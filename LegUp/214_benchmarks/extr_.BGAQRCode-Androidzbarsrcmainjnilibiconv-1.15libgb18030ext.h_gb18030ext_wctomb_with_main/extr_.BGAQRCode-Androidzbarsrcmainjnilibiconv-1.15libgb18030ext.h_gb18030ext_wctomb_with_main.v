//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:50:34 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module gb18030ext_wctomb
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_conv,
	arg_r,
	arg_wc,
	arg_n
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_2_2 = 6'd2;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_3_3 = 6'd3;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_4_4 = 6'd4;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_5_5 = 6'd5;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_7_6 = 6'd6;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_9_7 = 6'd7;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_11_8 = 6'd8;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_13_9 = 6'd9;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_15_10 = 6'd10;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_17_11 = 6'd11;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_19_12 = 6'd12;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_21_13 = 6'd13;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_23_14 = 6'd14;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_25_15 = 6'd15;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_26_16 = 6'd16;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_27_17 = 6'd17;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_29_18 = 6'd18;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_31_19 = 6'd19;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_32_20 = 6'd20;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_33_21 = 6'd21;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_34_22 = 6'd22;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_35_23 = 6'd23;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_36_24 = 6'd24;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_37_25 = 6'd25;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_38_26 = 6'd26;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_40_27 = 6'd27;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_42_28 = 6'd28;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_44_29 = 6'd29;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_46_30 = 6'd30;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_48_31 = 6'd31;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_50_32 = 6'd32;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_52_33 = 6'd33;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_54_34 = 6'd34;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_56_35 = 6'd35;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_58_36 = 6'd36;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_60_37 = 6'd37;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_62_38 = 6'd38;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_64_39 = 6'd39;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_66_40 = 6'd40;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_68_41 = 6'd41;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_70_42 = 6'd42;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_72_43 = 6'd43;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_72_44 = 6'd44;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_75_45 = 6'd45;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_77_46 = 6'd46;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_79_47 = 6'd47;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_80_48 = 6'd48;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_81_49 = 6'd49;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_82_50 = 6'd50;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_83_51 = 6'd51;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_84_52 = 6'd52;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_86_53 = 6'd53;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_86_54 = 6'd54;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB_86_55 = 6'd55;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB__thread_56 = 6'd56;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB__thread_57 = 6'd57;
parameter [5:0] LEGUP_F_gb18030ext_wctomb_BB__thread42_58 = 6'd58;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [31:0] arg_conv;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_r;
input [31:0] arg_wc;
input [31:0] arg_n;
reg [5:0] cur_state;
reg  gb18030ext_wctomb_0_1;
reg  gb18030ext_wctomb_0_1_reg;
reg [31:0] gb18030ext_wctomb_5_wc_off;
reg [31:0] gb18030ext_wctomb_5_wc_off_reg;
reg  gb18030ext_wctomb_5_6;
reg  gb18030ext_wctomb_5_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_7_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_7_8_reg;
reg [31:0] gb18030ext_wctomb_9_wc_off28;
reg [31:0] gb18030ext_wctomb_9_wc_off28_reg;
reg  gb18030ext_wctomb_9_10;
reg  gb18030ext_wctomb_9_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_11_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_11_12_reg;
reg  gb18030ext_wctomb_13_14;
reg  gb18030ext_wctomb_13_14_reg;
reg [31:0] gb18030ext_wctomb_15_wc_off29;
reg [31:0] gb18030ext_wctomb_15_wc_off29_reg;
reg  gb18030ext_wctomb_15_16;
reg  gb18030ext_wctomb_15_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_17_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_17_18_reg;
reg  gb18030ext_wctomb_19_20;
reg  gb18030ext_wctomb_19_20_reg;
reg [31:0] gb18030ext_wctomb_21_wc_off30;
reg [31:0] gb18030ext_wctomb_21_wc_off30_reg;
reg  gb18030ext_wctomb_21_22;
reg  gb18030ext_wctomb_21_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_23_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_23_24_reg;
reg [31:0] gb18030ext_wctomb_27_wc_off31;
reg [31:0] gb18030ext_wctomb_27_wc_off31_reg;
reg  gb18030ext_wctomb_27_28;
reg  gb18030ext_wctomb_27_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_29_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_29_30_reg;
reg [31:0] gb18030ext_wctomb_38_wc_off32;
reg [31:0] gb18030ext_wctomb_38_wc_off32_reg;
reg  gb18030ext_wctomb_38_39;
reg  gb18030ext_wctomb_38_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_40_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_40_41_reg;
reg  gb18030ext_wctomb_42_43;
reg  gb18030ext_wctomb_42_43_reg;
reg [31:0] gb18030ext_wctomb_44_wc_off33;
reg [31:0] gb18030ext_wctomb_44_wc_off33_reg;
reg  gb18030ext_wctomb_44_45;
reg  gb18030ext_wctomb_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_46_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_46_47_reg;
reg [31:0] gb18030ext_wctomb_48_wc_off34;
reg [31:0] gb18030ext_wctomb_48_wc_off34_reg;
reg  gb18030ext_wctomb_48_49;
reg  gb18030ext_wctomb_48_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_50_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_50_51_reg;
reg [31:0] gb18030ext_wctomb_52_wc_off35;
reg [31:0] gb18030ext_wctomb_52_wc_off35_reg;
reg  gb18030ext_wctomb_52_53;
reg  gb18030ext_wctomb_52_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_54_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_54_55_reg;
reg [31:0] gb18030ext_wctomb_56_wc_off36;
reg [31:0] gb18030ext_wctomb_56_wc_off36_reg;
reg  gb18030ext_wctomb_56_57;
reg  gb18030ext_wctomb_56_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_58_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_58_59_reg;
reg [31:0] gb18030ext_wctomb_60_wc_off37;
reg [31:0] gb18030ext_wctomb_60_wc_off37_reg;
reg  gb18030ext_wctomb_60_61;
reg  gb18030ext_wctomb_60_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_62_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_62_63_reg;
reg [31:0] gb18030ext_wctomb_64_wc_off38;
reg [31:0] gb18030ext_wctomb_64_wc_off38_reg;
reg  gb18030ext_wctomb_64_65;
reg  gb18030ext_wctomb_64_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_66_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_66_67_reg;
reg  gb18030ext_wctomb_68_69;
reg  gb18030ext_wctomb_68_69_reg;
reg [31:0] gb18030ext_wctomb_70_wc_off39;
reg [31:0] gb18030ext_wctomb_70_wc_off39_reg;
reg  gb18030ext_wctomb_70_71;
reg  gb18030ext_wctomb_70_71_reg;
reg [31:0] gb18030ext_wctomb_72_73;
reg [31:0] gb18030ext_wctomb_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_72_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_72_74_reg;
reg [31:0] gb18030ext_wctomb_75_wc_off40;
reg [31:0] gb18030ext_wctomb_75_wc_off40_reg;
reg  gb18030ext_wctomb_75_76;
reg  gb18030ext_wctomb_75_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_77_78_reg;
reg  gb18030ext_wctomb_84_85;
reg  gb18030ext_wctomb_84_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_86_c_0_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb_86_c_0_in_reg;
reg [15:0] gb18030ext_wctomb_86_c_0;
reg [15:0] gb18030ext_wctomb_86_c_0_reg;
reg  gb18030ext_wctomb_86_87;
reg  gb18030ext_wctomb_86_87_reg;
reg [15:0] gb18030ext_wctomb__thread_c_041;
reg [15:0] gb18030ext_wctomb__thread_c_041_reg;
reg [15:0] gb18030ext_wctomb__thread_88;
reg [15:0] gb18030ext_wctomb__thread_88_reg;
reg [7:0] gb18030ext_wctomb__thread_89;
reg [7:0] gb18030ext_wctomb__thread_89_reg;
reg [7:0] gb18030ext_wctomb__thread_90;
reg [7:0] gb18030ext_wctomb__thread_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb__thread_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] gb18030ext_wctomb__thread_91_reg;
reg [31:0] gb18030ext_wctomb__thread42__0;
reg [31:0] gb18030ext_wctomb__thread42__0_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread42_58;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd505)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd7743)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_3_3;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd8364)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc != 32'd505)) & (arg_wc != 32'd7743)) & (arg_wc != 32'd8364)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_3_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_3_3;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_5_6 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_7_6;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_5_6 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_7_6;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_9_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_9_10 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_11_8;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_11_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_9_10 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_13_9;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_13_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_11_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_11_8;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_11_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_11_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_13_9;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_13_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_13_14 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_13_14 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_15_10;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_15_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_15_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_15_10;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_15_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_15_10) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_15_16 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_17_11;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_17_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_15_10) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_15_16 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_19_12;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_19_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_17_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_17_11;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_17_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_17_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_19_12;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_19_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_19_20 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_19_20 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_21_13;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_21_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_21_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_21_13;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_21_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_21_13) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_21_22 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_23_14;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_23_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_21_13) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_21_22 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_25_15;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_25_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_23_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_23_14;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_23_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_23_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_25_15;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_25_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14616)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14702)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_26_16;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_26_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd0)) & (arg_wc != 32'd14616)) & (arg_wc != 32'd14702)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_27_17;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_27_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_26_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_26_16;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_26_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_26_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_27_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_27_17;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_27_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_27_17) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_27_28 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_29_18;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_29_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_27_17) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_27_28 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_31_19;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_29_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_29_18;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_29_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_29_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_31_19;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14963)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd15182)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd15470)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_33_21;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_33_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd15584)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_34_22;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_34_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd16470)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_35_23;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_35_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd16735)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_36_24;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_36_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd17207)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_37_25;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_37_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc != 32'd14963)) & (arg_wc != 32'd15182)) & (arg_wc != 32'd15470)) & (arg_wc != 32'd15584)) & (arg_wc != 32'd16470)) & (arg_wc != 32'd16735)) & (arg_wc != 32'd17207)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_38_26;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_38_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_32_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_33_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_33_21;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_33_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_33_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_34_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_34_22;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_34_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_34_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_35_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_35_23;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_35_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_35_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_36_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_36_24;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_36_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_36_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_37_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_37_25;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_37_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_37_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_38_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_38_26;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_38_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_38_26) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_38_39 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_40_27;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_40_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_38_26) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_38_39 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_42_28;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_42_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_40_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_40_27;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_40_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_40_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_42_28;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_42_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_42_43 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_42_43 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_44_29;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_44_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_44_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_44_29;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_44_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_44_29) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_44_45 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_46_30;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_46_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_44_29) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_44_45 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_48_31;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_48_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_46_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_46_30;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_46_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_46_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_48_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_48_31;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_48_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_48_31) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_48_49 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_50_32;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_50_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_48_31) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_48_49 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_52_33;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_52_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_50_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_50_32;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_50_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_50_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_52_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_52_33;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_52_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_52_33) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_52_53 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_54_34;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_54_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_52_33) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_52_53 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_56_35;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_56_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_54_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_54_34;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_54_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_54_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_56_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_56_35;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_56_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_56_35) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_56_57 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_58_36;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_58_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_56_35) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_56_57 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_60_37;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_60_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_58_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_58_36;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_58_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_58_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_60_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_60_37;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_60_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_60_37) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_60_61 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_62_38;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_62_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_60_37) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_60_61 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_64_39;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_64_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_62_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_62_38;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_62_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_62_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_64_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_64_39;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_64_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_64_39) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_64_65 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_66_40;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_66_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_64_39) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_64_65 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_68_41;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_68_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_66_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_66_40;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_66_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_66_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_68_41;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_68_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_68_69 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_68_69 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_70_42;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_70_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_70_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_70_42;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_70_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_70_42) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_70_71 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_72_43;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_72_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_70_42) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_70_71 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_75_45;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_75_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_72_43;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_72_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_72_44;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_72_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_72_44;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_72_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_75_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_75_45;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_75_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_75_45) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_75_76 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_75_45) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_75_76 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_79_47;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_79_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_77_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_77_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_79_47;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_79_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd131207)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd131209)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_80_48;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_80_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd131276)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_81_49;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_81_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd136663)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_82_50;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_82_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd141711)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_83_51;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_83_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc != 32'd131207)) & (arg_wc != 32'd131209)) & (arg_wc != 32'd131276)) & (arg_wc != 32'd136663)) & (arg_wc != 32'd141711)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_84_52;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_84_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_80_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_80_48;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_80_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_80_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_81_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_81_49;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_81_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_81_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_82_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_82_50;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_82_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_82_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_83_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_83_51;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_83_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_83_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_84_52;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_84_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread42_58;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_53;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_54;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_54;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_55;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB_86_55;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB_86_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread42_58;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_56;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_57;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread_57;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread42_58;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread42_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_gb18030ext_wctomb_BB__thread42_58;
if (reset == 1'b0 && ^(LEGUP_F_gb18030ext_wctomb_BB__thread42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread42_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %0*/
/*   %1 = icmp ugt i32 %n, 1*/
begin
gb18030ext_wctomb_0_1 = (arg_n > 32'd1);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %0*/
/*   %1 = icmp ugt i32 %n, 1*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1))
begin
gb18030ext_wctomb_0_1_reg <= gb18030ext_wctomb_0_1;
if (reset == 1'b0 && ^(gb18030ext_wctomb_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_0_1_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %5*/
/*   %wc.off = add i32 %wc, -11904*/
begin
gb18030ext_wctomb_5_wc_off = (arg_wc + -32'd11904);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %5*/
/*   %wc.off = add i32 %wc, -11904*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_5_5))
begin
gb18030ext_wctomb_5_wc_off_reg <= gb18030ext_wctomb_5_wc_off;
if (reset == 1'b0 && ^(gb18030ext_wctomb_5_wc_off) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_5_wc_off_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %5*/
/*   %6 = icmp ult i32 %wc.off, 80*/
begin
gb18030ext_wctomb_5_6 = (gb18030ext_wctomb_5_wc_off < 32'd80);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %5*/
/*   %6 = icmp ult i32 %wc.off, 80*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_5_5))
begin
gb18030ext_wctomb_5_6_reg <= gb18030ext_wctomb_5_6;
if (reset == 1'b0 && ^(gb18030ext_wctomb_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_5_6_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %7*/
/*   %8 = getelementptr inbounds i16* null, i32 %wc.off*/
begin
gb18030ext_wctomb_7_8 = (0 + (2 * gb18030ext_wctomb_5_wc_off_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %7*/
/*   %8 = getelementptr inbounds i16* null, i32 %wc.off*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_7_6))
begin
gb18030ext_wctomb_7_8_reg <= gb18030ext_wctomb_7_8;
if (reset == 1'b0 && ^(gb18030ext_wctomb_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_7_8_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %9*/
/*   %wc.off28 = add i32 %wc, -12272*/
begin
gb18030ext_wctomb_9_wc_off28 = (arg_wc + -32'd12272);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %9*/
/*   %wc.off28 = add i32 %wc, -12272*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_9_7))
begin
gb18030ext_wctomb_9_wc_off28_reg <= gb18030ext_wctomb_9_wc_off28;
if (reset == 1'b0 && ^(gb18030ext_wctomb_9_wc_off28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_9_wc_off28_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %9*/
/*   %10 = icmp ult i32 %wc.off28, 16*/
begin
gb18030ext_wctomb_9_10 = (gb18030ext_wctomb_9_wc_off28 < 32'd16);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %9*/
/*   %10 = icmp ult i32 %wc.off28, 16*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_9_7))
begin
gb18030ext_wctomb_9_10_reg <= gb18030ext_wctomb_9_10;
if (reset == 1'b0 && ^(gb18030ext_wctomb_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_9_10_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %11*/
/*   %12 = getelementptr inbounds i16* null, i32 %wc.off28*/
begin
gb18030ext_wctomb_11_12 = (0 + (2 * gb18030ext_wctomb_9_wc_off28_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %11*/
/*   %12 = getelementptr inbounds i16* null, i32 %wc.off28*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_11_8))
begin
gb18030ext_wctomb_11_12_reg <= gb18030ext_wctomb_11_12;
if (reset == 1'b0 && ^(gb18030ext_wctomb_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_11_12_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %13*/
/*   %14 = icmp eq i32 %wc, 12350*/
begin
gb18030ext_wctomb_13_14 = (arg_wc == 32'd12350);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %13*/
/*   %14 = icmp eq i32 %wc, 12350*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9))
begin
gb18030ext_wctomb_13_14_reg <= gb18030ext_wctomb_13_14;
if (reset == 1'b0 && ^(gb18030ext_wctomb_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_13_14_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %15*/
/*   %wc.off29 = add i32 %wc, -13376*/
begin
gb18030ext_wctomb_15_wc_off29 = (arg_wc + -32'd13376);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %15*/
/*   %wc.off29 = add i32 %wc, -13376*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_15_10))
begin
gb18030ext_wctomb_15_wc_off29_reg <= gb18030ext_wctomb_15_wc_off29;
if (reset == 1'b0 && ^(gb18030ext_wctomb_15_wc_off29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_15_wc_off29_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %15*/
/*   %16 = icmp ult i32 %wc.off29, 56*/
begin
gb18030ext_wctomb_15_16 = (gb18030ext_wctomb_15_wc_off29 < 32'd56);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %15*/
/*   %16 = icmp ult i32 %wc.off29, 56*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_15_10))
begin
gb18030ext_wctomb_15_16_reg <= gb18030ext_wctomb_15_16;
if (reset == 1'b0 && ^(gb18030ext_wctomb_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_15_16_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %17*/
/*   %18 = getelementptr inbounds i16* null, i32 %wc.off29*/
begin
gb18030ext_wctomb_17_18 = (0 + (2 * gb18030ext_wctomb_15_wc_off29_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %17*/
/*   %18 = getelementptr inbounds i16* null, i32 %wc.off29*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_17_11))
begin
gb18030ext_wctomb_17_18_reg <= gb18030ext_wctomb_17_18;
if (reset == 1'b0 && ^(gb18030ext_wctomb_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_17_18_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %19*/
/*   %20 = icmp eq i32 %wc, 13726*/
begin
gb18030ext_wctomb_19_20 = (arg_wc == 32'd13726);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %19*/
/*   %20 = icmp eq i32 %wc, 13726*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12))
begin
gb18030ext_wctomb_19_20_reg <= gb18030ext_wctomb_19_20;
if (reset == 1'b0 && ^(gb18030ext_wctomb_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_19_20_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %21*/
/*   %wc.off30 = add i32 %wc, -13832*/
begin
gb18030ext_wctomb_21_wc_off30 = (arg_wc + -32'd13832);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %21*/
/*   %wc.off30 = add i32 %wc, -13832*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_21_13))
begin
gb18030ext_wctomb_21_wc_off30_reg <= gb18030ext_wctomb_21_wc_off30;
if (reset == 1'b0 && ^(gb18030ext_wctomb_21_wc_off30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_21_wc_off30_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %21*/
/*   %22 = icmp ult i32 %wc.off30, 24*/
begin
gb18030ext_wctomb_21_22 = (gb18030ext_wctomb_21_wc_off30 < 32'd24);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %21*/
/*   %22 = icmp ult i32 %wc.off30, 24*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_21_13))
begin
gb18030ext_wctomb_21_22_reg <= gb18030ext_wctomb_21_22;
if (reset == 1'b0 && ^(gb18030ext_wctomb_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_21_22_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %23*/
/*   %24 = getelementptr inbounds i16* null, i32 %wc.off30*/
begin
gb18030ext_wctomb_23_24 = (0 + (2 * gb18030ext_wctomb_21_wc_off30_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %23*/
/*   %24 = getelementptr inbounds i16* null, i32 %wc.off30*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_23_14))
begin
gb18030ext_wctomb_23_24_reg <= gb18030ext_wctomb_23_24;
if (reset == 1'b0 && ^(gb18030ext_wctomb_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_23_24_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %27*/
/*   %wc.off31 = add i32 %wc, -14792*/
begin
gb18030ext_wctomb_27_wc_off31 = (arg_wc + -32'd14792);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %27*/
/*   %wc.off31 = add i32 %wc, -14792*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_27_17))
begin
gb18030ext_wctomb_27_wc_off31_reg <= gb18030ext_wctomb_27_wc_off31;
if (reset == 1'b0 && ^(gb18030ext_wctomb_27_wc_off31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_27_wc_off31_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %27*/
/*   %28 = icmp ult i32 %wc.off31, 24*/
begin
gb18030ext_wctomb_27_28 = (gb18030ext_wctomb_27_wc_off31 < 32'd24);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %27*/
/*   %28 = icmp ult i32 %wc.off31, 24*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_27_17))
begin
gb18030ext_wctomb_27_28_reg <= gb18030ext_wctomb_27_28;
if (reset == 1'b0 && ^(gb18030ext_wctomb_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_27_28_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %29*/
/*   %30 = getelementptr inbounds i16* null, i32 %wc.off31*/
begin
gb18030ext_wctomb_29_30 = (0 + (2 * gb18030ext_wctomb_27_wc_off31_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %29*/
/*   %30 = getelementptr inbounds i16* null, i32 %wc.off31*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_29_18))
begin
gb18030ext_wctomb_29_30_reg <= gb18030ext_wctomb_29_30;
if (reset == 1'b0 && ^(gb18030ext_wctomb_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_29_30_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %38*/
/*   %wc.off32 = add i32 %wc, -17320*/
begin
gb18030ext_wctomb_38_wc_off32 = (arg_wc + -32'd17320);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %38*/
/*   %wc.off32 = add i32 %wc, -17320*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_38_26))
begin
gb18030ext_wctomb_38_wc_off32_reg <= gb18030ext_wctomb_38_wc_off32;
if (reset == 1'b0 && ^(gb18030ext_wctomb_38_wc_off32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_38_wc_off32_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %38*/
/*   %39 = icmp ult i32 %wc.off32, 56*/
begin
gb18030ext_wctomb_38_39 = (gb18030ext_wctomb_38_wc_off32 < 32'd56);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %38*/
/*   %39 = icmp ult i32 %wc.off32, 56*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_38_26))
begin
gb18030ext_wctomb_38_39_reg <= gb18030ext_wctomb_38_39;
if (reset == 1'b0 && ^(gb18030ext_wctomb_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_38_39_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %40*/
/*   %41 = getelementptr inbounds i16* null, i32 %wc.off32*/
begin
gb18030ext_wctomb_40_41 = (0 + (2 * gb18030ext_wctomb_38_wc_off32_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %40*/
/*   %41 = getelementptr inbounds i16* null, i32 %wc.off32*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_40_27))
begin
gb18030ext_wctomb_40_41_reg <= gb18030ext_wctomb_40_41;
if (reset == 1'b0 && ^(gb18030ext_wctomb_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_40_41_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %42*/
/*   %43 = icmp eq i32 %wc, 17622*/
begin
gb18030ext_wctomb_42_43 = (arg_wc == 32'd17622);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %42*/
/*   %43 = icmp eq i32 %wc, 17622*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28))
begin
gb18030ext_wctomb_42_43_reg <= gb18030ext_wctomb_42_43;
if (reset == 1'b0 && ^(gb18030ext_wctomb_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_42_43_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %44*/
/*   %wc.off33 = add i32 %wc, -17992*/
begin
gb18030ext_wctomb_44_wc_off33 = (arg_wc + -32'd17992);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %44*/
/*   %wc.off33 = add i32 %wc, -17992*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_44_29))
begin
gb18030ext_wctomb_44_wc_off33_reg <= gb18030ext_wctomb_44_wc_off33;
if (reset == 1'b0 && ^(gb18030ext_wctomb_44_wc_off33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_44_wc_off33_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %44*/
/*   %45 = icmp ult i32 %wc.off33, 32*/
begin
gb18030ext_wctomb_44_45 = (gb18030ext_wctomb_44_wc_off33 < 32'd32);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %44*/
/*   %45 = icmp ult i32 %wc.off33, 32*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_44_29))
begin
gb18030ext_wctomb_44_45_reg <= gb18030ext_wctomb_44_45;
if (reset == 1'b0 && ^(gb18030ext_wctomb_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_44_45_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %46*/
/*   %47 = getelementptr inbounds i16* null, i32 %wc.off33*/
begin
gb18030ext_wctomb_46_47 = (0 + (2 * gb18030ext_wctomb_44_wc_off33_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %46*/
/*   %47 = getelementptr inbounds i16* null, i32 %wc.off33*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_46_30))
begin
gb18030ext_wctomb_46_47_reg <= gb18030ext_wctomb_46_47;
if (reset == 1'b0 && ^(gb18030ext_wctomb_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_46_47_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %48*/
/*   %wc.off34 = add i32 %wc, -18208*/
begin
gb18030ext_wctomb_48_wc_off34 = (arg_wc + -32'd18208);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %48*/
/*   %wc.off34 = add i32 %wc, -18208*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_48_31))
begin
gb18030ext_wctomb_48_wc_off34_reg <= gb18030ext_wctomb_48_wc_off34;
if (reset == 1'b0 && ^(gb18030ext_wctomb_48_wc_off34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_48_wc_off34_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %48*/
/*   %49 = icmp ult i32 %wc.off34, 16*/
begin
gb18030ext_wctomb_48_49 = (gb18030ext_wctomb_48_wc_off34 < 32'd16);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %48*/
/*   %49 = icmp ult i32 %wc.off34, 16*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_48_31))
begin
gb18030ext_wctomb_48_49_reg <= gb18030ext_wctomb_48_49;
if (reset == 1'b0 && ^(gb18030ext_wctomb_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_48_49_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %50*/
/*   %51 = getelementptr inbounds i16* null, i32 %wc.off34*/
begin
gb18030ext_wctomb_50_51 = (0 + (2 * gb18030ext_wctomb_48_wc_off34_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %50*/
/*   %51 = getelementptr inbounds i16* null, i32 %wc.off34*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_50_32))
begin
gb18030ext_wctomb_50_51_reg <= gb18030ext_wctomb_50_51;
if (reset == 1'b0 && ^(gb18030ext_wctomb_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_50_51_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %52*/
/*   %wc.off35 = add i32 %wc, -18296*/
begin
gb18030ext_wctomb_52_wc_off35 = (arg_wc + -32'd18296);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %52*/
/*   %wc.off35 = add i32 %wc, -18296*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_52_33))
begin
gb18030ext_wctomb_52_wc_off35_reg <= gb18030ext_wctomb_52_wc_off35;
if (reset == 1'b0 && ^(gb18030ext_wctomb_52_wc_off35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_52_wc_off35_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %52*/
/*   %53 = icmp ult i32 %wc.off35, 24*/
begin
gb18030ext_wctomb_52_53 = (gb18030ext_wctomb_52_wc_off35 < 32'd24);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %52*/
/*   %53 = icmp ult i32 %wc.off35, 24*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_52_33))
begin
gb18030ext_wctomb_52_53_reg <= gb18030ext_wctomb_52_53;
if (reset == 1'b0 && ^(gb18030ext_wctomb_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_52_53_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %54*/
/*   %55 = getelementptr inbounds i16* null, i32 %wc.off35*/
begin
gb18030ext_wctomb_54_55 = (0 + (2 * gb18030ext_wctomb_52_wc_off35_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %54*/
/*   %55 = getelementptr inbounds i16* null, i32 %wc.off35*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_54_34))
begin
gb18030ext_wctomb_54_55_reg <= gb18030ext_wctomb_54_55;
if (reset == 1'b0 && ^(gb18030ext_wctomb_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_54_55_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %56*/
/*   %wc.off36 = add i32 %wc, -18752*/
begin
gb18030ext_wctomb_56_wc_off36 = (arg_wc + -32'd18752);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %56*/
/*   %wc.off36 = add i32 %wc, -18752*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_56_35))
begin
gb18030ext_wctomb_56_wc_off36_reg <= gb18030ext_wctomb_56_wc_off36;
if (reset == 1'b0 && ^(gb18030ext_wctomb_56_wc_off36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_56_wc_off36_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %56*/
/*   %57 = icmp ult i32 %wc.off36, 120*/
begin
gb18030ext_wctomb_56_57 = (gb18030ext_wctomb_56_wc_off36 < 32'd120);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %56*/
/*   %57 = icmp ult i32 %wc.off36, 120*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_56_35))
begin
gb18030ext_wctomb_56_57_reg <= gb18030ext_wctomb_56_57;
if (reset == 1'b0 && ^(gb18030ext_wctomb_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_56_57_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %58*/
/*   %59 = getelementptr inbounds i16* null, i32 %wc.off36*/
begin
gb18030ext_wctomb_58_59 = (0 + (2 * gb18030ext_wctomb_56_wc_off36_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %58*/
/*   %59 = getelementptr inbounds i16* null, i32 %wc.off36*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_58_36))
begin
gb18030ext_wctomb_58_59_reg <= gb18030ext_wctomb_58_59;
if (reset == 1'b0 && ^(gb18030ext_wctomb_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_58_59_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %60*/
/*   %wc.off37 = add i32 %wc, -19568*/
begin
gb18030ext_wctomb_60_wc_off37 = (arg_wc + -32'd19568);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %60*/
/*   %wc.off37 = add i32 %wc, -19568*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_60_37))
begin
gb18030ext_wctomb_60_wc_off37_reg <= gb18030ext_wctomb_60_wc_off37;
if (reset == 1'b0 && ^(gb18030ext_wctomb_60_wc_off37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_60_wc_off37_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %60*/
/*   %61 = icmp ult i32 %wc.off37, 56*/
begin
gb18030ext_wctomb_60_61 = (gb18030ext_wctomb_60_wc_off37 < 32'd56);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %60*/
/*   %61 = icmp ult i32 %wc.off37, 56*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_60_37))
begin
gb18030ext_wctomb_60_61_reg <= gb18030ext_wctomb_60_61;
if (reset == 1'b0 && ^(gb18030ext_wctomb_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_60_61_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %62*/
/*   %63 = getelementptr inbounds i16* null, i32 %wc.off37*/
begin
gb18030ext_wctomb_62_63 = (0 + (2 * gb18030ext_wctomb_60_wc_off37_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %62*/
/*   %63 = getelementptr inbounds i16* null, i32 %wc.off37*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_62_38))
begin
gb18030ext_wctomb_62_63_reg <= gb18030ext_wctomb_62_63;
if (reset == 1'b0 && ^(gb18030ext_wctomb_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_62_63_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %64*/
/*   %wc.off38 = add i32 %wc, -19728*/
begin
gb18030ext_wctomb_64_wc_off38 = (arg_wc + -32'd19728);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %64*/
/*   %wc.off38 = add i32 %wc, -19728*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_64_39))
begin
gb18030ext_wctomb_64_wc_off38_reg <= gb18030ext_wctomb_64_wc_off38;
if (reset == 1'b0 && ^(gb18030ext_wctomb_64_wc_off38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_64_wc_off38_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %64*/
/*   %65 = icmp ult i32 %wc.off38, 16*/
begin
gb18030ext_wctomb_64_65 = (gb18030ext_wctomb_64_wc_off38 < 32'd16);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %64*/
/*   %65 = icmp ult i32 %wc.off38, 16*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_64_39))
begin
gb18030ext_wctomb_64_65_reg <= gb18030ext_wctomb_64_65;
if (reset == 1'b0 && ^(gb18030ext_wctomb_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_64_65_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %66*/
/*   %67 = getelementptr inbounds i16* null, i32 %wc.off38*/
begin
gb18030ext_wctomb_66_67 = (0 + (2 * gb18030ext_wctomb_64_wc_off38_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %66*/
/*   %67 = getelementptr inbounds i16* null, i32 %wc.off38*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_66_40))
begin
gb18030ext_wctomb_66_67_reg <= gb18030ext_wctomb_66_67;
if (reset == 1'b0 && ^(gb18030ext_wctomb_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_66_67_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %68*/
/*   %69 = icmp eq i32 %wc, 19886*/
begin
gb18030ext_wctomb_68_69 = (arg_wc == 32'd19886);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %68*/
/*   %69 = icmp eq i32 %wc, 19886*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41))
begin
gb18030ext_wctomb_68_69_reg <= gb18030ext_wctomb_68_69;
if (reset == 1'b0 && ^(gb18030ext_wctomb_68_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_68_69_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %70*/
/*   %wc.off39 = add i32 %wc, -40884*/
begin
gb18030ext_wctomb_70_wc_off39 = (arg_wc + -32'd40884);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %70*/
/*   %wc.off39 = add i32 %wc, -40884*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_70_42))
begin
gb18030ext_wctomb_70_wc_off39_reg <= gb18030ext_wctomb_70_wc_off39;
if (reset == 1'b0 && ^(gb18030ext_wctomb_70_wc_off39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_70_wc_off39_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %70*/
/*   %71 = icmp ult i32 %wc.off39, 8*/
begin
gb18030ext_wctomb_70_71 = (gb18030ext_wctomb_70_wc_off39 < 32'd8);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %70*/
/*   %71 = icmp ult i32 %wc.off39, 8*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_70_42))
begin
gb18030ext_wctomb_70_71_reg <= gb18030ext_wctomb_70_71;
if (reset == 1'b0 && ^(gb18030ext_wctomb_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_70_71_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %72*/
/*   %73 = add nsw i32 %wc, -40880*/
begin
gb18030ext_wctomb_72_73 = (arg_wc + -32'd40880);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %72*/
/*   %73 = add nsw i32 %wc, -40880*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_43))
begin
gb18030ext_wctomb_72_73_reg <= gb18030ext_wctomb_72_73;
if (reset == 1'b0 && ^(gb18030ext_wctomb_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_72_73_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %72*/
/*   %74 = getelementptr inbounds i16* null, i32 %73*/
begin
gb18030ext_wctomb_72_74 = (0 + (2 * gb18030ext_wctomb_72_73_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %72*/
/*   %74 = getelementptr inbounds i16* null, i32 %73*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_44))
begin
gb18030ext_wctomb_72_74_reg <= gb18030ext_wctomb_72_74;
if (reset == 1'b0 && ^(gb18030ext_wctomb_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_72_74_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %75*/
/*   %wc.off40 = add i32 %wc, -65040*/
begin
gb18030ext_wctomb_75_wc_off40 = (arg_wc + -32'd65040);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %75*/
/*   %wc.off40 = add i32 %wc, -65040*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_75_45))
begin
gb18030ext_wctomb_75_wc_off40_reg <= gb18030ext_wctomb_75_wc_off40;
if (reset == 1'b0 && ^(gb18030ext_wctomb_75_wc_off40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_75_wc_off40_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %75*/
/*   %76 = icmp ult i32 %wc.off40, 10*/
begin
gb18030ext_wctomb_75_76 = (gb18030ext_wctomb_75_wc_off40 < 32'd10);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %75*/
/*   %76 = icmp ult i32 %wc.off40, 10*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_75_45))
begin
gb18030ext_wctomb_75_76_reg <= gb18030ext_wctomb_75_76;
if (reset == 1'b0 && ^(gb18030ext_wctomb_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_75_76_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %77*/
/*   %78 = getelementptr inbounds i16* null, i32 %wc.off40*/
begin
gb18030ext_wctomb_77_78 = (0 + (2 * gb18030ext_wctomb_75_wc_off40_reg));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %77*/
/*   %78 = getelementptr inbounds i16* null, i32 %wc.off40*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_77_46))
begin
gb18030ext_wctomb_77_78_reg <= gb18030ext_wctomb_77_78;
if (reset == 1'b0 && ^(gb18030ext_wctomb_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_77_78_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %84*/
/*   %85 = icmp eq i32 %wc, 147966*/
begin
gb18030ext_wctomb_84_85 = (arg_wc == 32'd147966);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %84*/
/*   %85 = icmp eq i32 %wc, 147966*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52))
begin
gb18030ext_wctomb_84_85_reg <= gb18030ext_wctomb_84_85;
if (reset == 1'b0 && ^(gb18030ext_wctomb_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_84_85_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_7_8;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_11_8) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_11_12;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_17_11) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_17_18;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_23_14) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_23_24;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_29_18) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_29_30;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_40_27) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_40_41;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_46_30) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_46_47;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_50_32) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_50_51;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_54_34) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_54_55;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_58_36) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_58_59;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_62_38) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_62_63;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_66_40) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_66_67;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_44) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_72_74;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
else /* if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_77_46) & (memory_controller_waitrequest == 1'd0))) */
begin
gb18030ext_wctomb_86_c_0_in = gb18030ext_wctomb_77_78;
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_11_8) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_17_11) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_23_14) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_29_18) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_40_27) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_46_30) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_50_32) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_54_34) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_58_36) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_62_38) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_66_40) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_72_44) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
/* gb18030ext_wctomb: %86*/
/*   %c.0.in = phi i16* [ %8, %7 ], [ %12, %11 ], [ %18, %17 ], [ %24, %23 ], [ %30, %29 ], [ %41, %40 ], [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %59, %58 ], [ %63, %62 ], [ %67, %66 ], [ %74, %72 ], [ %78, %77 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_77_46) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb_86_c_0_in_reg <= gb18030ext_wctomb_86_c_0_in;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_in_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
begin
gb18030ext_wctomb_86_c_0 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55))
begin
gb18030ext_wctomb_86_c_0_reg <= gb18030ext_wctomb_86_c_0;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_c_0_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %86*/
/*   %87 = icmp eq i16 %c.0, 0*/
begin
gb18030ext_wctomb_86_87 = (gb18030ext_wctomb_86_c_0 == 16'd0);
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %86*/
/*   %87 = icmp eq i16 %c.0, 0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55))
begin
gb18030ext_wctomb_86_87_reg <= gb18030ext_wctomb_86_87;
if (reset == 1'b0 && ^(gb18030ext_wctomb_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb_86_87_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd505)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd22337;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd22340;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd23837;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_13_14 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd22135;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_19_20 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd422;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14616)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd416;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_26_16) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd417;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14963)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd412;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd408;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_33_21) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd407;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_34_22) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd406;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_35_23) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd401;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_36_24) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd400;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_37_25) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd398;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_42_43 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd389;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_68_69 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd353;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd131207)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd431;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_80_48) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd430;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_81_49) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd429;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_82_50) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd404;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_83_51) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd394;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041 = -16'd367;
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
else /* if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd0))) */
begin
gb18030ext_wctomb__thread_c_041 = gb18030ext_wctomb_86_c_0;
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd505)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_13_9) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_13_14 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_19_12) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_19_20 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_25_15) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14616)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_26_16) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd14963)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_33_21) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_34_22) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_35_23) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_36_24) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_37_25) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_42_28) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_42_43 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_68_41) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_68_69 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_79_47) & (memory_controller_waitrequest == 1'd0)) & (arg_wc == 32'd131207)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_80_48) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_81_49) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_82_50) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB_83_51) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd1)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread*/
/*   %c.041 = phi i16 [ %c.0, %86 ], [ -22340, %3 ], [ -23837, %4 ], [ -417, %26 ], [ -408, %32 ], [ -407, %33 ], [ -406, %34 ], [ -401, %35 ], [ -400, %36 ], [ -398, %37 ], [ -430, %80 ], [ -429, %81 ], [ -404, %82 ], [ -394, %83 ], [ -22337, %2 ], [ -22135, %13 ], [ -422, %19 ], [ -416, %25 ], [ -412, %31 ], [ -389, %42 ], [ -353, %68 ], [ -431, %79 ], [ -367, %84 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd0)))
begin
gb18030ext_wctomb__thread_c_041_reg <= gb18030ext_wctomb__thread_c_041;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_c_041) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_c_041_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread*/
/*   %88 = lshr i16 %c.041, 8*/
begin
gb18030ext_wctomb__thread_88 = (gb18030ext_wctomb__thread_c_041_reg >>> (16'd8 % 16'd16));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread*/
/*   %88 = lshr i16 %c.041, 8*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
gb18030ext_wctomb__thread_88_reg <= gb18030ext_wctomb__thread_88;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_88_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread*/
/*   %89 = trunc i16 %88 to i8*/
begin
gb18030ext_wctomb__thread_89 = gb18030ext_wctomb__thread_88[7:0];
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread*/
/*   %89 = trunc i16 %88 to i8*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
gb18030ext_wctomb__thread_89_reg <= gb18030ext_wctomb__thread_89;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_89_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread*/
/*   %90 = trunc i16 %c.041 to i8*/
begin
gb18030ext_wctomb__thread_90 = gb18030ext_wctomb__thread_c_041_reg[7:0];
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread*/
/*   %90 = trunc i16 %c.041 to i8*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
gb18030ext_wctomb__thread_90_reg <= gb18030ext_wctomb__thread_90;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_90_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread*/
/*   %91 = getelementptr inbounds i8* %r, i32 1*/
begin
gb18030ext_wctomb__thread_91 = (arg_r + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread*/
/*   %91 = getelementptr inbounds i8* %r, i32 1*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
gb18030ext_wctomb__thread_91_reg <= gb18030ext_wctomb__thread_91;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread_91_reg"); $finish; end
end
end
always @(*) begin
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_0_1 == 1'd0)))
begin
gb18030ext_wctomb__thread42__0 = 32'd0;
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd0)))
begin
gb18030ext_wctomb__thread42__0 = 32'd0;
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
else if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd1)))
begin
gb18030ext_wctomb__thread42__0 = 32'd0;
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
else /* if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_57) & (memory_controller_waitrequest == 1'd0))) */
begin
gb18030ext_wctomb__thread42__0 = 32'd2;
end
end
always @(posedge clk) begin
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_0_1 == 1'd0)))
begin
gb18030ext_wctomb__thread42__0_reg <= gb18030ext_wctomb__thread42__0;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread42__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread42__0_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_84_52) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_84_85 == 1'd0)))
begin
gb18030ext_wctomb__thread42__0_reg <= gb18030ext_wctomb__thread42__0;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread42__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread42__0_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_55) & (memory_controller_waitrequest == 1'd0)) & (gb18030ext_wctomb_86_87 == 1'd1)))
begin
gb18030ext_wctomb__thread42__0_reg <= gb18030ext_wctomb__thread42__0;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread42__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread42__0_reg"); $finish; end
end
/* gb18030ext_wctomb: %.thread42*/
/*   %.0 = phi i32 [ 2, %.thread ], [ 0, %86 ], [ 0, %84 ], [ 0, %0 ]*/
if (((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_57) & (memory_controller_waitrequest == 1'd0)))
begin
gb18030ext_wctomb__thread42__0_reg <= gb18030ext_wctomb__thread42__0;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread42__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to gb18030ext_wctomb__thread42__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* gb18030ext_wctomb: %.thread42*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread42_58))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53))
begin
memory_controller_enable_a = 1'd1;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %89, i8* %r, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53))
begin
memory_controller_address_a = gb18030ext_wctomb_86_c_0_in_reg;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %89, i8* %r, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_address_a = arg_r;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53))
begin
memory_controller_write_enable_a = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %89, i8* %r, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %89, i8* %r, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_in_a = gb18030ext_wctomb__thread_89;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* gb18030ext_wctomb: %86*/
/*   %c.0 = load i16* %c.0.in, align 2*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB_86_53))
begin
memory_controller_size_a = 2'd1;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %89, i8* %r, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %90, i8* %91, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %90, i8* %91, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_address_b = gb18030ext_wctomb__thread_91;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %90, i8* %91, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %90, i8* %91, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_in_b = gb18030ext_wctomb__thread_90;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* gb18030ext_wctomb: %.thread*/
/*   store i8 %90, i8* %91, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread_56))
begin
memory_controller_size_b = 2'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* gb18030ext_wctomb: %.thread42*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_gb18030ext_wctomb_BB__thread42_58))
begin
return_val <= gb18030ext_wctomb__thread42__0_reg;
if (reset == 1'b0 && ^(gb18030ext_wctomb__thread42__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_main_BB_gb18030ext_wctomb_exit_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg  cur_state;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_gb18030ext_wctomb_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_gb18030ext_wctomb_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_gb18030ext_wctomb_exit_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_gb18030ext_wctomb_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_gb18030ext_wctomb_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_gb18030ext_wctomb_exit_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %gb18030ext_wctomb.exit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_gb18030ext_wctomb_exit_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %gb18030ext_wctomb.exit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_gb18030ext_wctomb_exit_1))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
