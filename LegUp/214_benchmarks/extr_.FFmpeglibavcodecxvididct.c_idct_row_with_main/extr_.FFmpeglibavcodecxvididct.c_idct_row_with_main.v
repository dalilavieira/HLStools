//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:00 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module idct_row
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_in,
	arg_tab,
	arg_rnd
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_idct_row_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_idct_row_BB_0_2 = 6'd2;
parameter [5:0] LEGUP_F_idct_row_BB_0_3 = 6'd3;
parameter [5:0] LEGUP_F_idct_row_BB_0_4 = 6'd4;
parameter [5:0] LEGUP_F_idct_row_BB_0_5 = 6'd5;
parameter [5:0] LEGUP_F_idct_row_BB_0_6 = 6'd6;
parameter [5:0] LEGUP_F_idct_row_BB_0_7 = 6'd7;
parameter [5:0] LEGUP_F_idct_row_BB_0_8 = 6'd8;
parameter [5:0] LEGUP_F_idct_row_BB_0_9 = 6'd9;
parameter [5:0] LEGUP_F_idct_row_BB_41_10 = 6'd10;
parameter [5:0] LEGUP_F_idct_row_BB_41_11 = 6'd11;
parameter [5:0] LEGUP_F_idct_row_BB_41_12 = 6'd12;
parameter [5:0] LEGUP_F_idct_row_BB_41_13 = 6'd13;
parameter [5:0] LEGUP_F_idct_row_BB_47_14 = 6'd14;
parameter [5:0] LEGUP_F_idct_row_BB_47_15 = 6'd15;
parameter [5:0] LEGUP_F_idct_row_BB_47_16 = 6'd16;
parameter [5:0] LEGUP_F_idct_row_BB_47_17 = 6'd17;
parameter [5:0] LEGUP_F_idct_row_BB_47_18 = 6'd18;
parameter [5:0] LEGUP_F_idct_row_BB_47_19 = 6'd19;
parameter [5:0] LEGUP_F_idct_row_BB_82_20 = 6'd20;
parameter [5:0] LEGUP_F_idct_row_BB_84_21 = 6'd21;
parameter [5:0] LEGUP_F_idct_row_BB_84_22 = 6'd22;
parameter [5:0] LEGUP_F_idct_row_BB_84_23 = 6'd23;
parameter [5:0] LEGUP_F_idct_row_BB_84_24 = 6'd24;
parameter [5:0] LEGUP_F_idct_row_BB_84_25 = 6'd25;
parameter [5:0] LEGUP_F_idct_row_BB_86_26 = 6'd26;
parameter [5:0] LEGUP_F_idct_row_BB_86_27 = 6'd27;
parameter [5:0] LEGUP_F_idct_row_BB_86_28 = 6'd28;
parameter [5:0] LEGUP_F_idct_row_BB_91_29 = 6'd29;
parameter [5:0] LEGUP_F_idct_row_BB_91_30 = 6'd30;
parameter [5:0] LEGUP_F_idct_row_BB_91_31 = 6'd31;
parameter [5:0] LEGUP_F_idct_row_BB_91_32 = 6'd32;
parameter [5:0] LEGUP_F_idct_row_BB_91_33 = 6'd33;
parameter [5:0] LEGUP_F_idct_row_BB_91_34 = 6'd34;
parameter [5:0] LEGUP_F_idct_row_BB_100_35 = 6'd35;
parameter [5:0] LEGUP_F_idct_row_BB_100_36 = 6'd36;
parameter [5:0] LEGUP_F_idct_row_BB_100_37 = 6'd37;
parameter [5:0] LEGUP_F_idct_row_BB_100_38 = 6'd38;
parameter [5:0] LEGUP_F_idct_row_BB_100_39 = 6'd39;
parameter [5:0] LEGUP_F_idct_row_BB_100_40 = 6'd40;
parameter [5:0] LEGUP_F_idct_row_BB_100_41 = 6'd41;
parameter [5:0] LEGUP_F_idct_row_BB_162_42 = 6'd42;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_tab;
input [31:0] arg_rnd;
reg [5:0] cur_state;
reg [31:0] idct_row_0_1;
reg [31:0] idct_row_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_2_reg;
reg [31:0] idct_row_0_3;
reg [31:0] idct_row_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_4_reg;
reg [31:0] idct_row_0_5;
reg [31:0] idct_row_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_6_reg;
reg [31:0] idct_row_0_7;
reg [31:0] idct_row_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_8_reg;
reg [31:0] idct_row_0_9;
reg [31:0] idct_row_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_10_reg;
reg [31:0] idct_row_0_11;
reg [31:0] idct_row_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_12_reg;
reg [31:0] idct_row_0_13;
reg [31:0] idct_row_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_14_reg;
reg [15:0] idct_row_0_15;
reg [15:0] idct_row_0_15_reg;
reg [31:0] idct_row_0_16;
reg [31:0] idct_row_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_17_reg;
reg [15:0] idct_row_0_18;
reg [15:0] idct_row_0_18_reg;
reg [31:0] idct_row_0_19;
reg [31:0] idct_row_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_20_reg;
reg [15:0] idct_row_0_21;
reg [15:0] idct_row_0_21_reg;
reg [31:0] idct_row_0_22;
reg [31:0] idct_row_0_22_reg;
reg [15:0] idct_row_0_23;
reg [15:0] idct_row_0_23_reg;
reg [15:0] idct_row_0_24;
reg [15:0] idct_row_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_25_reg;
reg [15:0] idct_row_0_26;
reg [15:0] idct_row_0_26_reg;
reg [31:0] idct_row_0_27;
reg [31:0] idct_row_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_28_reg;
reg [15:0] idct_row_0_29;
reg [15:0] idct_row_0_29_reg;
reg [31:0] idct_row_0_30;
reg [31:0] idct_row_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_31_reg;
reg [15:0] idct_row_0_32;
reg [15:0] idct_row_0_32_reg;
reg [31:0] idct_row_0_33;
reg [31:0] idct_row_0_33_reg;
reg [15:0] idct_row_0_34;
reg [15:0] idct_row_0_34_reg;
reg [15:0] idct_row_0_35;
reg [15:0] idct_row_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_0_36_reg;
reg [15:0] idct_row_0_37;
reg [15:0] idct_row_0_37_reg;
reg [31:0] idct_row_0_38;
reg [31:0] idct_row_0_38_reg;
reg [15:0] idct_row_0_39;
reg [15:0] idct_row_0_39_reg;
reg  idct_row_0_40;
reg  idct_row_0_40_reg;
reg [15:0] idct_row_41_42;
reg [15:0] idct_row_41_42_reg;
reg [31:0] idct_row_41_43;
reg [31:0] idct_row_41_43_reg;
reg [31:0] idct_row_41_44;
reg [31:0] idct_row_41_44_reg;
reg [31:0] idct_row_41_45;
reg [31:0] idct_row_41_45_reg;
reg  idct_row_41_46;
reg  idct_row_41_46_reg;
reg [31:0] idct_row_47_48;
reg [31:0] idct_row_47_48_reg;
reg [31:0] idct_row_47_49;
reg [31:0] idct_row_47_49_reg;
reg [31:0] idct_row_47_50;
reg [31:0] idct_row_47_50_reg;
reg [31:0] idct_row_47_51;
reg [31:0] idct_row_47_51_reg;
reg [31:0] idct_row_47_52;
reg [31:0] idct_row_47_52_reg;
reg [31:0] idct_row_47_53;
reg [31:0] idct_row_47_53_reg;
reg [31:0] idct_row_47_54;
reg [31:0] idct_row_47_54_reg;
reg [31:0] idct_row_47_55;
reg [31:0] idct_row_47_55_reg;
reg [31:0] idct_row_47_56;
reg [31:0] idct_row_47_56_reg;
reg [31:0] idct_row_47_57;
reg [31:0] idct_row_47_57_reg;
reg [31:0] idct_row_47_58;
reg [31:0] idct_row_47_58_reg;
reg [31:0] idct_row_47_59;
reg [31:0] idct_row_47_59_reg;
reg [31:0] idct_row_47_60;
reg [31:0] idct_row_47_60_reg;
reg [31:0] idct_row_47_61;
reg [31:0] idct_row_47_61_reg;
reg [31:0] idct_row_47_62;
reg [31:0] idct_row_47_62_reg;
reg [31:0] idct_row_47_63;
reg [31:0] idct_row_47_63_reg;
reg [31:0] idct_row_47_64;
reg [31:0] idct_row_47_64_reg;
reg [31:0] idct_row_47_65;
reg [31:0] idct_row_47_65_reg;
reg [31:0] idct_row_47_66;
reg [31:0] idct_row_47_66_reg;
reg [15:0] idct_row_47_67;
reg [15:0] idct_row_47_67_reg;
reg [31:0] idct_row_47_68;
reg [31:0] idct_row_47_68_reg;
reg [15:0] idct_row_47_69;
reg [15:0] idct_row_47_69_reg;
reg [31:0] idct_row_47_70;
reg [31:0] idct_row_47_70_reg;
reg [15:0] idct_row_47_71;
reg [15:0] idct_row_47_71_reg;
reg [31:0] idct_row_47_72;
reg [31:0] idct_row_47_72_reg;
reg [15:0] idct_row_47_73;
reg [15:0] idct_row_47_73_reg;
reg [31:0] idct_row_47_74;
reg [31:0] idct_row_47_74_reg;
reg [15:0] idct_row_47_75;
reg [15:0] idct_row_47_75_reg;
reg [31:0] idct_row_47_76;
reg [31:0] idct_row_47_76_reg;
reg [15:0] idct_row_47_77;
reg [15:0] idct_row_47_77_reg;
reg [31:0] idct_row_47_78;
reg [31:0] idct_row_47_78_reg;
reg [15:0] idct_row_47_79;
reg [15:0] idct_row_47_79_reg;
reg [31:0] idct_row_47_80;
reg [31:0] idct_row_47_80_reg;
reg [15:0] idct_row_47_81;
reg [15:0] idct_row_47_81_reg;
reg  idct_row_82_83;
reg  idct_row_82_83_reg;
reg [15:0] idct_row_84_85;
reg [15:0] idct_row_84_85_reg;
reg [15:0] idct_row_86_87;
reg [15:0] idct_row_86_87_reg;
reg  idct_row_86_88;
reg  idct_row_86_88_reg;
reg [15:0] idct_row_86_89;
reg [15:0] idct_row_86_89_reg;
reg [31:0] idct_row_86_90;
reg [31:0] idct_row_86_90_reg;
reg [31:0] idct_row_91_92;
reg [31:0] idct_row_91_92_reg;
reg [31:0] idct_row_91_93;
reg [31:0] idct_row_91_93_reg;
reg [31:0] idct_row_91_94;
reg [31:0] idct_row_91_94_reg;
reg [31:0] idct_row_91_95;
reg [31:0] idct_row_91_95_reg;
reg [31:0] idct_row_91_96;
reg [31:0] idct_row_91_96_reg;
reg [31:0] idct_row_91_97;
reg [31:0] idct_row_91_97_reg;
reg [15:0] idct_row_91_98;
reg [15:0] idct_row_91_98_reg;
reg [15:0] idct_row_91_99;
reg [15:0] idct_row_91_99_reg;
reg [31:0] idct_row_100_101;
reg [31:0] idct_row_100_101_reg;
reg [31:0] idct_row_100_102;
reg [31:0] idct_row_100_102_reg;
reg [31:0] idct_row_100_103;
reg [31:0] idct_row_100_103_reg;
reg [31:0] idct_row_100_104;
reg [31:0] idct_row_100_104_reg;
reg [31:0] idct_row_100_105;
reg [31:0] idct_row_100_105_reg;
reg [31:0] idct_row_100_106;
reg [31:0] idct_row_100_106_reg;
reg [31:0] idct_row_100_107;
reg [31:0] idct_row_100_107_reg;
reg [31:0] idct_row_100_108;
reg [31:0] idct_row_100_108_reg;
reg [31:0] idct_row_100_109;
reg [31:0] idct_row_100_109_reg;
reg [31:0] idct_row_100_110;
reg [31:0] idct_row_100_110_reg;
reg [31:0] idct_row_100_111;
reg [31:0] idct_row_100_111_reg;
reg [31:0] idct_row_100_112;
reg [31:0] idct_row_100_112_reg;
reg [31:0] idct_row_100_113;
reg [31:0] idct_row_100_113_reg;
reg [31:0] idct_row_100_114;
reg [31:0] idct_row_100_114_reg;
reg [31:0] idct_row_100_115;
reg [31:0] idct_row_100_115_reg;
reg [31:0] idct_row_100_116;
reg [31:0] idct_row_100_116_reg;
reg [31:0] idct_row_100_117;
reg [31:0] idct_row_100_117_reg;
reg [31:0] idct_row_100_118;
reg [31:0] idct_row_100_118_reg;
reg [31:0] idct_row_100_119;
reg [31:0] idct_row_100_119_reg;
reg [31:0] idct_row_100_120;
reg [31:0] idct_row_100_120_reg;
reg [31:0] idct_row_100_121;
reg [31:0] idct_row_100_121_reg;
reg [31:0] idct_row_100_122;
reg [31:0] idct_row_100_122_reg;
reg [31:0] idct_row_100_123;
reg [31:0] idct_row_100_123_reg;
reg [31:0] idct_row_100_124;
reg [31:0] idct_row_100_124_reg;
reg [31:0] idct_row_100_125;
reg [31:0] idct_row_100_125_reg;
reg [31:0] idct_row_100_126;
reg [31:0] idct_row_100_126_reg;
reg [31:0] idct_row_100_127;
reg [31:0] idct_row_100_127_reg;
reg [31:0] idct_row_100_128;
reg [31:0] idct_row_100_128_reg;
reg [31:0] idct_row_100_129;
reg [31:0] idct_row_100_129_reg;
reg [31:0] idct_row_100_sum23;
reg [31:0] idct_row_100_sum23_reg;
reg [31:0] idct_row_100_130;
reg [31:0] idct_row_100_130_reg;
reg [31:0] idct_row_100_131;
reg [31:0] idct_row_100_131_reg;
reg [31:0] idct_row_100_132;
reg [31:0] idct_row_100_132_reg;
reg [31:0] idct_row_100_133;
reg [31:0] idct_row_100_133_reg;
reg [31:0] idct_row_100_134;
reg [31:0] idct_row_100_134_reg;
reg [31:0] idct_row_100_135;
reg [31:0] idct_row_100_135_reg;
reg [31:0] idct_row_100_136;
reg [31:0] idct_row_100_136_reg;
reg [31:0] idct_row_100_137;
reg [31:0] idct_row_100_137_reg;
reg [31:0] idct_row_100_138;
reg [31:0] idct_row_100_138_reg;
reg [31:0] idct_row_100_139;
reg [31:0] idct_row_100_139_reg;
reg [31:0] idct_row_100_140;
reg [31:0] idct_row_100_140_reg;
reg [31:0] idct_row_100_141;
reg [31:0] idct_row_100_141_reg;
reg [31:0] idct_row_100_142;
reg [31:0] idct_row_100_142_reg;
reg [31:0] idct_row_100_143;
reg [31:0] idct_row_100_143_reg;
reg [31:0] idct_row_100_144;
reg [31:0] idct_row_100_144_reg;
reg [31:0] idct_row_100_145;
reg [31:0] idct_row_100_145_reg;
reg [31:0] idct_row_100_146;
reg [31:0] idct_row_100_146_reg;
reg [15:0] idct_row_100_147;
reg [15:0] idct_row_100_147_reg;
reg [31:0] idct_row_100_148;
reg [31:0] idct_row_100_148_reg;
reg [15:0] idct_row_100_149;
reg [15:0] idct_row_100_149_reg;
reg [31:0] idct_row_100_150;
reg [31:0] idct_row_100_150_reg;
reg [15:0] idct_row_100_151;
reg [15:0] idct_row_100_151_reg;
reg [31:0] idct_row_100_152;
reg [31:0] idct_row_100_152_reg;
reg [15:0] idct_row_100_153;
reg [15:0] idct_row_100_153_reg;
reg [31:0] idct_row_100_154;
reg [31:0] idct_row_100_154_reg;
reg [15:0] idct_row_100_155;
reg [15:0] idct_row_100_155_reg;
reg [31:0] idct_row_100_156;
reg [31:0] idct_row_100_156_reg;
reg [15:0] idct_row_100_157;
reg [15:0] idct_row_100_157_reg;
reg [31:0] idct_row_100_158;
reg [31:0] idct_row_100_158_reg;
reg [15:0] idct_row_100_159;
reg [15:0] idct_row_100_159_reg;
reg [31:0] idct_row_100_160;
reg [31:0] idct_row_100_160_reg;
reg [15:0] idct_row_100_161;
reg [15:0] idct_row_100_161_reg;
reg [31:0] idct_row_162__0;
reg [31:0] idct_row_162__0_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_idct_row_41_44_en;
reg [31:0] idct_row_41_44_stage0_reg;
reg  lpm_mult_idct_row_47_48_en;
reg [31:0] idct_row_47_48_stage0_reg;
reg  lpm_mult_idct_row_47_50_en;
reg [31:0] idct_row_47_50_stage0_reg;
reg  lpm_mult_idct_row_47_54_en;
reg [31:0] idct_row_47_54_stage0_reg;
reg  lpm_mult_idct_row_47_55_en;
reg [31:0] idct_row_47_55_stage0_reg;
reg  lpm_mult_idct_row_47_57_en;
reg [31:0] idct_row_47_57_stage0_reg;
reg  lpm_mult_idct_row_47_58_en;
reg [31:0] idct_row_47_58_stage0_reg;
reg  lpm_mult_idct_row_47_60_en;
reg [31:0] idct_row_47_60_stage0_reg;
reg  lpm_mult_idct_row_47_61_en;
reg [31:0] idct_row_47_61_stage0_reg;
reg  lpm_mult_idct_row_47_63_en;
reg [31:0] idct_row_47_63_stage0_reg;
reg  lpm_mult_idct_row_47_64_en;
reg [31:0] idct_row_47_64_stage0_reg;
reg  lpm_mult_idct_row_91_93_en;
reg [31:0] idct_row_91_93_stage0_reg;
reg  lpm_mult_idct_row_91_96_en;
reg [31:0] idct_row_91_96_stage0_reg;
reg  lpm_mult_idct_row_100_101_en;
reg [31:0] idct_row_100_101_stage0_reg;
reg  lpm_mult_idct_row_100_103_en;
reg [31:0] idct_row_100_103_stage0_reg;
reg  lpm_mult_idct_row_100_104_en;
reg [31:0] idct_row_100_104_stage0_reg;
reg  lpm_mult_idct_row_100_105_en;
reg [31:0] idct_row_100_105_stage0_reg;
reg  lpm_mult_idct_row_100_109_en;
reg [31:0] idct_row_100_109_stage0_reg;
reg  lpm_mult_idct_row_100_110_en;
reg [31:0] idct_row_100_110_stage0_reg;
reg  lpm_mult_idct_row_100_119_en;
reg [31:0] idct_row_100_119_stage0_reg;
reg  lpm_mult_idct_row_100_120_en;
reg [31:0] idct_row_100_120_stage0_reg;
reg  lpm_mult_idct_row_100_121_en;
reg [31:0] idct_row_100_121_stage0_reg;
reg  lpm_mult_idct_row_100_122_en;
reg [31:0] idct_row_100_122_stage0_reg;
reg  lpm_mult_idct_row_100_126_en;
reg [31:0] idct_row_100_126_stage0_reg;
reg  lpm_mult_idct_row_100_127_en;
reg [31:0] idct_row_100_127_stage0_reg;
reg  lpm_mult_idct_row_100_128_en;
reg [31:0] idct_row_100_128_stage0_reg;
reg  lpm_mult_idct_row_100_129_en;
reg [31:0] idct_row_100_129_stage0_reg;
reg  lpm_mult_idct_row_100_132_en;
reg [31:0] idct_row_100_132_stage0_reg;
reg  lpm_mult_idct_row_100_133_en;
reg [31:0] idct_row_100_133_stage0_reg;
reg  lpm_mult_idct_row_100_134_en;
reg [31:0] idct_row_100_134_stage0_reg;
reg  lpm_mult_idct_row_100_135_en;
reg [31:0] idct_row_100_135_stage0_reg;
reg  lpm_mult_idct_row_100_139_en;
reg [31:0] idct_row_100_139_stage0_reg;
reg  lpm_mult_idct_row_100_140_en;
reg [31:0] idct_row_100_140_stage0_reg;
reg  lpm_mult_idct_row_100_141_en;
reg [31:0] idct_row_100_141_stage0_reg;
reg  lpm_mult_idct_row_100_142_en;
reg [31:0] idct_row_100_142_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_0_9) & (memory_controller_waitrequest == 1'd0)) & (idct_row_0_40 == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_10;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_0_9) & (memory_controller_waitrequest == 1'd0)) & (idct_row_0_40 == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_26;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_10;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_11;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_11;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_12;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_12;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_13;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_41_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_41_13;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_41_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_41_13) & (memory_controller_waitrequest == 1'd0)) & (idct_row_41_46_reg == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_82_20;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_82_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_41_13) & (memory_controller_waitrequest == 1'd0)) & (idct_row_41_46_reg == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_14;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_14;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_15;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_15;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_16;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_16;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_17;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_17;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_18;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_18;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_19;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_47_19;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_47_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_47_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_82_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_82_20;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_82_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_82_20) & (memory_controller_waitrequest == 1'd0)) & (idct_row_82_83 == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_82_20) & (memory_controller_waitrequest == 1'd0)) & (idct_row_82_83 == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_21;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_21;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_22;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_22;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_23;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_23;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_24;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_24;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_25;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_84_25;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_84_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_84_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_86_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_26;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_86_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_27;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_86_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_27;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_86_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_28;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_86_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_86_28;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_86_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_86_28) & (memory_controller_waitrequest == 1'd0)) & (idct_row_86_88_reg == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_29;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_idct_row_BB_86_28) & (memory_controller_waitrequest == 1'd0)) & (idct_row_86_88_reg == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_35;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_29;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_30;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_30;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_31;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_31;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_32;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_32;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_33;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_33;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_34;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_91_34;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_91_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_91_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_35;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_36;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_36;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_37;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_37;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_38;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_38;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_39;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_39;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_40;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_40;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_41;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_100_41;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_100_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_100_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_162_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_idct_row_BB_162_42;
if (reset == 1'b0 && ^(LEGUP_F_idct_row_BB_162_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_idct_row_BB_162_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
begin
idct_row_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
idct_row_0_1_reg <= idct_row_0_1;
if (reset == 1'b0 && ^(idct_row_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_1_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %2 = getelementptr inbounds i32* %tab, i32 1*/
begin
idct_row_0_2 = (arg_tab + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %2 = getelementptr inbounds i32* %tab, i32 1*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_2_reg <= idct_row_0_2;
if (reset == 1'b0 && ^(idct_row_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_2_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
begin
idct_row_0_3 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
idct_row_0_3_reg <= idct_row_0_3;
if (reset == 1'b0 && ^(idct_row_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_3_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %4 = getelementptr inbounds i32* %tab, i32 2*/
begin
idct_row_0_4 = (arg_tab + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %4 = getelementptr inbounds i32* %tab, i32 2*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_4_reg <= idct_row_0_4;
if (reset == 1'b0 && ^(idct_row_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_4_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
idct_row_0_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
idct_row_0_5_reg <= idct_row_0_5;
if (reset == 1'b0 && ^(idct_row_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_5_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %6 = getelementptr inbounds i32* %tab, i32 3*/
begin
idct_row_0_6 = (arg_tab + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %6 = getelementptr inbounds i32* %tab, i32 3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_6_reg <= idct_row_0_6;
if (reset == 1'b0 && ^(idct_row_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_6_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
idct_row_0_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
idct_row_0_7_reg <= idct_row_0_7;
if (reset == 1'b0 && ^(idct_row_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_7_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %8 = getelementptr inbounds i32* %tab, i32 4*/
begin
idct_row_0_8 = (arg_tab + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %8 = getelementptr inbounds i32* %tab, i32 4*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_8_reg <= idct_row_0_8;
if (reset == 1'b0 && ^(idct_row_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_8_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
idct_row_0_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
idct_row_0_9_reg <= idct_row_0_9;
if (reset == 1'b0 && ^(idct_row_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_9_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %10 = getelementptr inbounds i32* %tab, i32 5*/
begin
idct_row_0_10 = (arg_tab + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %10 = getelementptr inbounds i32* %tab, i32 5*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_10_reg <= idct_row_0_10;
if (reset == 1'b0 && ^(idct_row_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_10_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
idct_row_0_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
idct_row_0_11_reg <= idct_row_0_11;
if (reset == 1'b0 && ^(idct_row_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_11_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %12 = getelementptr inbounds i32* %tab, i32 6*/
begin
idct_row_0_12 = (arg_tab + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %12 = getelementptr inbounds i32* %tab, i32 6*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_12_reg <= idct_row_0_12;
if (reset == 1'b0 && ^(idct_row_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_12_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
idct_row_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
idct_row_0_13_reg <= idct_row_0_13;
if (reset == 1'b0 && ^(idct_row_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_13_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %14 = getelementptr inbounds i16* %in, i32 5*/
begin
idct_row_0_14 = (arg_in + (2 * 32'd5));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %14 = getelementptr inbounds i16* %in, i32 5*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_14_reg <= idct_row_0_14;
if (reset == 1'b0 && ^(idct_row_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_14_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
begin
idct_row_0_15 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
idct_row_0_15_reg <= idct_row_0_15;
if (reset == 1'b0 && ^(idct_row_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_15_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %16 = sext i16 %15 to i32*/
begin
idct_row_0_16 = $signed(idct_row_0_15);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %16 = sext i16 %15 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
idct_row_0_16_reg <= idct_row_0_16;
if (reset == 1'b0 && ^(idct_row_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_16_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %17 = getelementptr inbounds i16* %in, i32 6*/
begin
idct_row_0_17 = (arg_in + (2 * 32'd6));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %17 = getelementptr inbounds i16* %in, i32 6*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_17_reg <= idct_row_0_17;
if (reset == 1'b0 && ^(idct_row_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_17_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
begin
idct_row_0_18 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_18_reg <= idct_row_0_18;
if (reset == 1'b0 && ^(idct_row_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_18_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %19 = sext i16 %18 to i32*/
begin
idct_row_0_19 = $signed(idct_row_0_18);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %19 = sext i16 %18 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_19_reg <= idct_row_0_19;
if (reset == 1'b0 && ^(idct_row_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_19_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %20 = getelementptr inbounds i16* %in, i32 7*/
begin
idct_row_0_20 = (arg_in + (2 * 32'd7));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %20 = getelementptr inbounds i16* %in, i32 7*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_20_reg <= idct_row_0_20;
if (reset == 1'b0 && ^(idct_row_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_20_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
begin
idct_row_0_21 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_21_reg <= idct_row_0_21;
if (reset == 1'b0 && ^(idct_row_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_21_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %22 = sext i16 %21 to i32*/
begin
idct_row_0_22 = $signed(idct_row_0_21);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %22 = sext i16 %21 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_22_reg <= idct_row_0_22;
if (reset == 1'b0 && ^(idct_row_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_22_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %23 = or i16 %18, %15*/
begin
idct_row_0_23 = (idct_row_0_18 | idct_row_0_15_reg);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %23 = or i16 %18, %15*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_23_reg <= idct_row_0_23;
if (reset == 1'b0 && ^(idct_row_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_23_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %24 = or i16 %23, %21*/
begin
idct_row_0_24 = (idct_row_0_23 | idct_row_0_21);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %24 = or i16 %23, %21*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
idct_row_0_24_reg <= idct_row_0_24;
if (reset == 1'b0 && ^(idct_row_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_24_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %25 = getelementptr inbounds i16* %in, i32 1*/
begin
idct_row_0_25 = (arg_in + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %25 = getelementptr inbounds i16* %in, i32 1*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_25_reg <= idct_row_0_25;
if (reset == 1'b0 && ^(idct_row_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_25_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
begin
idct_row_0_26 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_8))
begin
idct_row_0_26_reg <= idct_row_0_26;
if (reset == 1'b0 && ^(idct_row_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_26_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %27 = sext i16 %26 to i32*/
begin
idct_row_0_27 = $signed(idct_row_0_26);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %27 = sext i16 %26 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_8))
begin
idct_row_0_27_reg <= idct_row_0_27;
if (reset == 1'b0 && ^(idct_row_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_27_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %28 = getelementptr inbounds i16* %in, i32 2*/
begin
idct_row_0_28 = (arg_in + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %28 = getelementptr inbounds i16* %in, i32 2*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_28_reg <= idct_row_0_28;
if (reset == 1'b0 && ^(idct_row_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_28_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
begin
idct_row_0_29 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_8))
begin
idct_row_0_29_reg <= idct_row_0_29;
if (reset == 1'b0 && ^(idct_row_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_29_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %30 = sext i16 %29 to i32*/
begin
idct_row_0_30 = $signed(idct_row_0_29);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %30 = sext i16 %29 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_8))
begin
idct_row_0_30_reg <= idct_row_0_30;
if (reset == 1'b0 && ^(idct_row_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_30_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %31 = getelementptr inbounds i16* %in, i32 3*/
begin
idct_row_0_31 = (arg_in + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %31 = getelementptr inbounds i16* %in, i32 3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_31_reg <= idct_row_0_31;
if (reset == 1'b0 && ^(idct_row_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_31_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
begin
idct_row_0_32 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_32_reg <= idct_row_0_32;
if (reset == 1'b0 && ^(idct_row_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_32_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %33 = sext i16 %32 to i32*/
begin
idct_row_0_33 = $signed(idct_row_0_32);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %33 = sext i16 %32 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_33_reg <= idct_row_0_33;
if (reset == 1'b0 && ^(idct_row_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_33_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %34 = or i16 %29, %26*/
begin
idct_row_0_34 = (idct_row_0_29 | idct_row_0_26);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %34 = or i16 %29, %26*/
if ((cur_state == LEGUP_F_idct_row_BB_0_8))
begin
idct_row_0_34_reg <= idct_row_0_34;
if (reset == 1'b0 && ^(idct_row_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_34_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %35 = or i16 %34, %32*/
begin
idct_row_0_35 = (idct_row_0_34_reg | idct_row_0_32);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %35 = or i16 %34, %32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_35_reg <= idct_row_0_35;
if (reset == 1'b0 && ^(idct_row_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_35_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %36 = getelementptr inbounds i16* %in, i32 4*/
begin
idct_row_0_36 = (arg_in + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %36 = getelementptr inbounds i16* %in, i32 4*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
idct_row_0_36_reg <= idct_row_0_36;
if (reset == 1'b0 && ^(idct_row_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_36_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
begin
idct_row_0_37 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_37_reg <= idct_row_0_37;
if (reset == 1'b0 && ^(idct_row_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_37_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %38 = sext i16 %37 to i32*/
begin
idct_row_0_38 = $signed(idct_row_0_37);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %38 = sext i16 %37 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_38_reg <= idct_row_0_38;
if (reset == 1'b0 && ^(idct_row_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_38_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %39 = or i16 %37, %24*/
begin
idct_row_0_39 = (idct_row_0_37 | idct_row_0_24_reg);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %39 = or i16 %37, %24*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_39_reg <= idct_row_0_39;
if (reset == 1'b0 && ^(idct_row_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_39_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %0*/
/*   %40 = icmp eq i16 %39, 0*/
begin
idct_row_0_40 = (idct_row_0_39 == 16'd0);
end
end
always @(posedge clk) begin
/* idct_row: %0*/
/*   %40 = icmp eq i16 %39, 0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_9))
begin
idct_row_0_40_reg <= idct_row_0_40;
if (reset == 1'b0 && ^(idct_row_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_0_40_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
begin
idct_row_41_42 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_41_12))
begin
idct_row_41_42_reg <= idct_row_41_42;
if (reset == 1'b0 && ^(idct_row_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_42_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %41*/
/*   %43 = sext i16 %42 to i32*/
begin
idct_row_41_43 = $signed(idct_row_41_42);
end
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %43 = sext i16 %42 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_41_12))
begin
idct_row_41_43_reg <= idct_row_41_43;
if (reset == 1'b0 && ^(idct_row_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_43_reg"); $finish; end
end
end
always @(*) begin
idct_row_41_44 = idct_row_41_44_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %44 = mul nsw i32 %43, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_41_13))
begin
idct_row_41_44_reg <= idct_row_41_44;
if (reset == 1'b0 && ^(idct_row_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_44_reg"); $finish; end
end
/* idct_row: %41*/
/*   %44 = mul nsw i32 %43, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_41_13))
begin
idct_row_41_44_reg <= idct_row_41_44;
if (reset == 1'b0 && ^(idct_row_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_44_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %41*/
/*   %45 = add nsw i32 %44, %rnd*/
begin
idct_row_41_45 = (idct_row_41_44 + arg_rnd);
end
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %45 = add nsw i32 %44, %rnd*/
if ((cur_state == LEGUP_F_idct_row_BB_41_13))
begin
idct_row_41_45_reg <= idct_row_41_45;
if (reset == 1'b0 && ^(idct_row_41_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_45_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %41*/
/*   %46 = icmp eq i16 %35, 0*/
begin
idct_row_41_46 = (idct_row_0_35_reg == 16'd0);
end
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %46 = icmp eq i16 %35, 0*/
if ((cur_state == LEGUP_F_idct_row_BB_41_10))
begin
idct_row_41_46_reg <= idct_row_41_46;
if (reset == 1'b0 && ^(idct_row_41_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_41_46_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_48 = idct_row_47_48_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %48 = mul nsw i32 %30, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_48_reg <= idct_row_47_48;
if (reset == 1'b0 && ^(idct_row_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_48_reg"); $finish; end
end
/* idct_row: %47*/
/*   %48 = mul nsw i32 %30, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_48_reg <= idct_row_47_48;
if (reset == 1'b0 && ^(idct_row_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_48_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %49 = add nsw i32 %45, %48*/
begin
idct_row_47_49 = (idct_row_41_45_reg + idct_row_47_48);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %49 = add nsw i32 %45, %48*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_49_reg <= idct_row_47_49;
if (reset == 1'b0 && ^(idct_row_47_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_49_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_50 = idct_row_47_50_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %50 = mul nsw i32 %30, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_50_reg <= idct_row_47_50;
if (reset == 1'b0 && ^(idct_row_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_50_reg"); $finish; end
end
/* idct_row: %47*/
/*   %50 = mul nsw i32 %30, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_50_reg <= idct_row_47_50;
if (reset == 1'b0 && ^(idct_row_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_50_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %51 = add nsw i32 %45, %50*/
begin
idct_row_47_51 = (idct_row_41_45_reg + idct_row_47_50);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %51 = add nsw i32 %45, %50*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_51_reg <= idct_row_47_51;
if (reset == 1'b0 && ^(idct_row_47_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_51_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %52 = sub nsw i32 %45, %50*/
begin
idct_row_47_52 = (idct_row_41_45_reg - idct_row_47_50);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %52 = sub nsw i32 %45, %50*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_52_reg <= idct_row_47_52;
if (reset == 1'b0 && ^(idct_row_47_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_52_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %53 = sub nsw i32 %45, %48*/
begin
idct_row_47_53 = (idct_row_41_45_reg - idct_row_47_48);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %53 = sub nsw i32 %45, %48*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_53_reg <= idct_row_47_53;
if (reset == 1'b0 && ^(idct_row_47_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_53_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_54 = idct_row_47_54_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %54 = mul nsw i32 %27, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_54_reg <= idct_row_47_54;
if (reset == 1'b0 && ^(idct_row_47_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_54_reg"); $finish; end
end
/* idct_row: %47*/
/*   %54 = mul nsw i32 %27, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_54_reg <= idct_row_47_54;
if (reset == 1'b0 && ^(idct_row_47_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_54_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_55 = idct_row_47_55_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %55 = mul nsw i32 %33, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_55_reg <= idct_row_47_55;
if (reset == 1'b0 && ^(idct_row_47_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_55_reg"); $finish; end
end
/* idct_row: %47*/
/*   %55 = mul nsw i32 %33, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_55_reg <= idct_row_47_55;
if (reset == 1'b0 && ^(idct_row_47_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_55_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %56 = add nsw i32 %55, %54*/
begin
idct_row_47_56 = (idct_row_47_55 + idct_row_47_54);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %56 = add nsw i32 %55, %54*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_56_reg <= idct_row_47_56;
if (reset == 1'b0 && ^(idct_row_47_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_56_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_57 = idct_row_47_57_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %57 = mul nsw i32 %27, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_57_reg <= idct_row_47_57;
if (reset == 1'b0 && ^(idct_row_47_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_57_reg"); $finish; end
end
/* idct_row: %47*/
/*   %57 = mul nsw i32 %27, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_57_reg <= idct_row_47_57;
if (reset == 1'b0 && ^(idct_row_47_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_57_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_58 = idct_row_47_58_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %58 = mul nsw i32 %33, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_58_reg <= idct_row_47_58;
if (reset == 1'b0 && ^(idct_row_47_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_58_reg"); $finish; end
end
/* idct_row: %47*/
/*   %58 = mul nsw i32 %33, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_58_reg <= idct_row_47_58;
if (reset == 1'b0 && ^(idct_row_47_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_58_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %59 = sub nsw i32 %57, %58*/
begin
idct_row_47_59 = (idct_row_47_57 - idct_row_47_58);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %59 = sub nsw i32 %57, %58*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_59_reg <= idct_row_47_59;
if (reset == 1'b0 && ^(idct_row_47_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_59_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_60 = idct_row_47_60_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %60 = mul nsw i32 %27, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_60_reg <= idct_row_47_60;
if (reset == 1'b0 && ^(idct_row_47_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_60_reg"); $finish; end
end
/* idct_row: %47*/
/*   %60 = mul nsw i32 %27, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_60_reg <= idct_row_47_60;
if (reset == 1'b0 && ^(idct_row_47_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_60_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_61 = idct_row_47_61_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %61 = mul nsw i32 %33, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_61_reg <= idct_row_47_61;
if (reset == 1'b0 && ^(idct_row_47_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_61_reg"); $finish; end
end
/* idct_row: %47*/
/*   %61 = mul nsw i32 %33, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_61_reg <= idct_row_47_61;
if (reset == 1'b0 && ^(idct_row_47_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_61_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %62 = sub nsw i32 %60, %61*/
begin
idct_row_47_62 = (idct_row_47_60 - idct_row_47_61);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %62 = sub nsw i32 %60, %61*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_62_reg <= idct_row_47_62;
if (reset == 1'b0 && ^(idct_row_47_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_62_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_63 = idct_row_47_63_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %63 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_63_reg <= idct_row_47_63;
if (reset == 1'b0 && ^(idct_row_47_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_63_reg"); $finish; end
end
/* idct_row: %47*/
/*   %63 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_63_reg <= idct_row_47_63;
if (reset == 1'b0 && ^(idct_row_47_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_63_reg"); $finish; end
end
end
always @(*) begin
idct_row_47_64 = idct_row_47_64_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %64 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_64_reg <= idct_row_47_64;
if (reset == 1'b0 && ^(idct_row_47_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_64_reg"); $finish; end
end
/* idct_row: %47*/
/*   %64 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_64_reg <= idct_row_47_64;
if (reset == 1'b0 && ^(idct_row_47_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_64_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %65 = sub nsw i32 %63, %64*/
begin
idct_row_47_65 = (idct_row_47_63 - idct_row_47_64);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %65 = sub nsw i32 %63, %64*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_65_reg <= idct_row_47_65;
if (reset == 1'b0 && ^(idct_row_47_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_65_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %66 = add nsw i32 %49, %56*/
begin
idct_row_47_66 = (idct_row_47_49 + idct_row_47_56);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %66 = add nsw i32 %49, %56*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_66_reg <= idct_row_47_66;
if (reset == 1'b0 && ^(idct_row_47_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_66_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %67 = trunc i32 %66 to i16*/
begin
idct_row_47_67 = idct_row_47_66[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %67 = trunc i32 %66 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_67_reg <= idct_row_47_67;
if (reset == 1'b0 && ^(idct_row_47_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_67_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %68 = add nsw i32 %51, %59*/
begin
idct_row_47_68 = (idct_row_47_51 + idct_row_47_59);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %68 = add nsw i32 %51, %59*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_68_reg <= idct_row_47_68;
if (reset == 1'b0 && ^(idct_row_47_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_68_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %69 = trunc i32 %68 to i16*/
begin
idct_row_47_69 = idct_row_47_68[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %69 = trunc i32 %68 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_69_reg <= idct_row_47_69;
if (reset == 1'b0 && ^(idct_row_47_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_69_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %70 = add nsw i32 %52, %62*/
begin
idct_row_47_70 = (idct_row_47_52 + idct_row_47_62);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %70 = add nsw i32 %52, %62*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_70_reg <= idct_row_47_70;
if (reset == 1'b0 && ^(idct_row_47_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_70_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %71 = trunc i32 %70 to i16*/
begin
idct_row_47_71 = idct_row_47_70[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %71 = trunc i32 %70 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_71_reg <= idct_row_47_71;
if (reset == 1'b0 && ^(idct_row_47_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_71_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %72 = add nsw i32 %53, %65*/
begin
idct_row_47_72 = (idct_row_47_53 + idct_row_47_65);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %72 = add nsw i32 %53, %65*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_72_reg <= idct_row_47_72;
if (reset == 1'b0 && ^(idct_row_47_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_72_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %73 = trunc i32 %72 to i16*/
begin
idct_row_47_73 = idct_row_47_72[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %73 = trunc i32 %72 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_73_reg <= idct_row_47_73;
if (reset == 1'b0 && ^(idct_row_47_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_73_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %74 = sub nsw i32 %53, %65*/
begin
idct_row_47_74 = (idct_row_47_53 - idct_row_47_65);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %74 = sub nsw i32 %53, %65*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_74_reg <= idct_row_47_74;
if (reset == 1'b0 && ^(idct_row_47_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_74_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %75 = trunc i32 %74 to i16*/
begin
idct_row_47_75 = idct_row_47_74[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %75 = trunc i32 %74 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_75_reg <= idct_row_47_75;
if (reset == 1'b0 && ^(idct_row_47_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_75_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %76 = sub nsw i32 %52, %62*/
begin
idct_row_47_76 = (idct_row_47_52 - idct_row_47_62);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %76 = sub nsw i32 %52, %62*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_76_reg <= idct_row_47_76;
if (reset == 1'b0 && ^(idct_row_47_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_76_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %77 = trunc i32 %76 to i16*/
begin
idct_row_47_77 = idct_row_47_76[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %77 = trunc i32 %76 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_77_reg <= idct_row_47_77;
if (reset == 1'b0 && ^(idct_row_47_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_77_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %78 = sub nsw i32 %51, %59*/
begin
idct_row_47_78 = (idct_row_47_51 - idct_row_47_59);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %78 = sub nsw i32 %51, %59*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_78_reg <= idct_row_47_78;
if (reset == 1'b0 && ^(idct_row_47_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_78_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %79 = trunc i32 %78 to i16*/
begin
idct_row_47_79 = idct_row_47_78[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %79 = trunc i32 %78 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_79_reg <= idct_row_47_79;
if (reset == 1'b0 && ^(idct_row_47_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_79_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %80 = sub nsw i32 %49, %56*/
begin
idct_row_47_80 = (idct_row_47_49 - idct_row_47_56);
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %80 = sub nsw i32 %49, %56*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_80_reg <= idct_row_47_80;
if (reset == 1'b0 && ^(idct_row_47_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_80_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %47*/
/*   %81 = trunc i32 %80 to i16*/
begin
idct_row_47_81 = idct_row_47_80[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %81 = trunc i32 %80 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
idct_row_47_81_reg <= idct_row_47_81;
if (reset == 1'b0 && ^(idct_row_47_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_47_81_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %82*/
/*   %83 = icmp eq i32 %45, 0*/
begin
idct_row_82_83 = (idct_row_41_45_reg == 32'd0);
end
end
always @(posedge clk) begin
/* idct_row: %82*/
/*   %83 = icmp eq i32 %45, 0*/
if ((cur_state == LEGUP_F_idct_row_BB_82_20))
begin
idct_row_82_83_reg <= idct_row_82_83;
if (reset == 1'b0 && ^(idct_row_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_82_83_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %84*/
/*   %85 = trunc i32 %45 to i16*/
begin
idct_row_84_85 = idct_row_41_45_reg[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %84*/
/*   %85 = trunc i32 %45 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
idct_row_84_85_reg <= idct_row_84_85;
if (reset == 1'b0 && ^(idct_row_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_84_85_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %86*/
/*   %87 = or i16 %35, %24*/
begin
idct_row_86_87 = (idct_row_0_35_reg | idct_row_0_24_reg);
end
end
always @(posedge clk) begin
/* idct_row: %86*/
/*   %87 = or i16 %35, %24*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
idct_row_86_87_reg <= idct_row_86_87;
if (reset == 1'b0 && ^(idct_row_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_86_87_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %86*/
/*   %88 = icmp eq i16 %87, 0*/
begin
idct_row_86_88 = (idct_row_86_87 == 16'd0);
end
end
always @(posedge clk) begin
/* idct_row: %86*/
/*   %88 = icmp eq i16 %87, 0*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
idct_row_86_88_reg <= idct_row_86_88;
if (reset == 1'b0 && ^(idct_row_86_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_86_88_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
begin
idct_row_86_89 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_86_28))
begin
idct_row_86_89_reg <= idct_row_86_89;
if (reset == 1'b0 && ^(idct_row_86_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_86_89_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %86*/
/*   %90 = sext i16 %89 to i32*/
begin
idct_row_86_90 = $signed(idct_row_86_89);
end
end
always @(posedge clk) begin
/* idct_row: %86*/
/*   %90 = sext i16 %89 to i32*/
if ((cur_state == LEGUP_F_idct_row_BB_86_28))
begin
idct_row_86_90_reg <= idct_row_86_90;
if (reset == 1'b0 && ^(idct_row_86_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_86_90_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %92 = add nsw i32 %90, %38*/
begin
idct_row_91_92 = (idct_row_86_90_reg + idct_row_0_38_reg);
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %92 = add nsw i32 %90, %38*/
if ((cur_state == LEGUP_F_idct_row_BB_91_29))
begin
idct_row_91_92_reg <= idct_row_91_92;
if (reset == 1'b0 && ^(idct_row_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_92_reg"); $finish; end
end
end
always @(*) begin
idct_row_91_93 = idct_row_91_93_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %93 = mul nsw i32 %92, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_93_reg <= idct_row_91_93;
if (reset == 1'b0 && ^(idct_row_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_93_reg"); $finish; end
end
/* idct_row: %91*/
/*   %93 = mul nsw i32 %92, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_93_reg <= idct_row_91_93;
if (reset == 1'b0 && ^(idct_row_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_93_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %94 = add nsw i32 %93, %rnd*/
begin
idct_row_91_94 = (idct_row_91_93 + arg_rnd);
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %94 = add nsw i32 %93, %rnd*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_94_reg <= idct_row_91_94;
if (reset == 1'b0 && ^(idct_row_91_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_94_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %95 = sub nsw i32 %90, %38*/
begin
idct_row_91_95 = (idct_row_86_90_reg - idct_row_0_38_reg);
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %95 = sub nsw i32 %90, %38*/
if ((cur_state == LEGUP_F_idct_row_BB_91_29))
begin
idct_row_91_95_reg <= idct_row_91_95;
if (reset == 1'b0 && ^(idct_row_91_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_95_reg"); $finish; end
end
end
always @(*) begin
idct_row_91_96 = idct_row_91_96_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %96 = mul nsw i32 %95, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_96_reg <= idct_row_91_96;
if (reset == 1'b0 && ^(idct_row_91_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_96_reg"); $finish; end
end
/* idct_row: %91*/
/*   %96 = mul nsw i32 %95, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_96_reg <= idct_row_91_96;
if (reset == 1'b0 && ^(idct_row_91_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_96_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %97 = add nsw i32 %96, %rnd*/
begin
idct_row_91_97 = (idct_row_91_96 + arg_rnd);
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %97 = add nsw i32 %96, %rnd*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_97_reg <= idct_row_91_97;
if (reset == 1'b0 && ^(idct_row_91_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_97_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %98 = trunc i32 %94 to i16*/
begin
idct_row_91_98 = idct_row_91_94[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %98 = trunc i32 %94 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_98_reg <= idct_row_91_98;
if (reset == 1'b0 && ^(idct_row_91_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_98_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %91*/
/*   %99 = trunc i32 %97 to i16*/
begin
idct_row_91_99 = idct_row_91_97[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %99 = trunc i32 %97 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
idct_row_91_99_reg <= idct_row_91_99;
if (reset == 1'b0 && ^(idct_row_91_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_91_99_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_101 = idct_row_100_101_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %101 = mul nsw i32 %90, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_101_reg <= idct_row_100_101;
if (reset == 1'b0 && ^(idct_row_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_101_reg"); $finish; end
end
/* idct_row: %100*/
/*   %101 = mul nsw i32 %90, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_101_reg <= idct_row_100_101;
if (reset == 1'b0 && ^(idct_row_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_101_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %102 = add nsw i32 %101, %rnd*/
begin
idct_row_100_102 = (idct_row_100_101 + arg_rnd);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %102 = add nsw i32 %101, %rnd*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_102_reg <= idct_row_100_102;
if (reset == 1'b0 && ^(idct_row_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_102_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_103 = idct_row_100_103_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %103 = mul nsw i32 %30, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_103_reg <= idct_row_100_103;
if (reset == 1'b0 && ^(idct_row_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_103_reg"); $finish; end
end
/* idct_row: %100*/
/*   %103 = mul nsw i32 %30, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_103_reg <= idct_row_100_103;
if (reset == 1'b0 && ^(idct_row_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_103_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_104 = idct_row_100_104_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %104 = mul nsw i32 %38, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_104_reg <= idct_row_100_104;
if (reset == 1'b0 && ^(idct_row_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_104_reg"); $finish; end
end
/* idct_row: %100*/
/*   %104 = mul nsw i32 %38, %7*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_104_reg <= idct_row_100_104;
if (reset == 1'b0 && ^(idct_row_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_104_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_105 = idct_row_100_105_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %105 = mul nsw i32 %19, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_105_reg <= idct_row_100_105;
if (reset == 1'b0 && ^(idct_row_100_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_105_reg"); $finish; end
end
/* idct_row: %100*/
/*   %105 = mul nsw i32 %19, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_105_reg <= idct_row_100_105;
if (reset == 1'b0 && ^(idct_row_100_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_105_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %106 = add i32 %103, %105*/
begin
idct_row_100_106 = (idct_row_100_103 + idct_row_100_105);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %106 = add i32 %103, %105*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_106_reg <= idct_row_100_106;
if (reset == 1'b0 && ^(idct_row_100_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_106_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %107 = add i32 %106, %104*/
begin
idct_row_100_107 = (idct_row_100_106 + idct_row_100_104);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %107 = add i32 %106, %104*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_107_reg <= idct_row_100_107;
if (reset == 1'b0 && ^(idct_row_100_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_107_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %108 = add i32 %107, %102*/
begin
idct_row_100_108 = (idct_row_100_107 + idct_row_100_102);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %108 = add i32 %107, %102*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_108_reg <= idct_row_100_108;
if (reset == 1'b0 && ^(idct_row_100_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_108_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_109 = idct_row_100_109_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %109 = mul nsw i32 %30, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_109_reg <= idct_row_100_109;
if (reset == 1'b0 && ^(idct_row_100_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_109_reg"); $finish; end
end
/* idct_row: %100*/
/*   %109 = mul nsw i32 %30, %11*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_109_reg <= idct_row_100_109;
if (reset == 1'b0 && ^(idct_row_100_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_109_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_110 = idct_row_100_110_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %110 = mul nsw i32 %19, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_110_reg <= idct_row_100_110;
if (reset == 1'b0 && ^(idct_row_100_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_110_reg"); $finish; end
end
/* idct_row: %100*/
/*   %110 = mul nsw i32 %19, %3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_110_reg <= idct_row_100_110;
if (reset == 1'b0 && ^(idct_row_100_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_110_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %111 = sub i32 %109, %110*/
begin
idct_row_100_111 = (idct_row_100_109 - idct_row_100_110);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %111 = sub i32 %109, %110*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_111_reg <= idct_row_100_111;
if (reset == 1'b0 && ^(idct_row_100_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_111_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %112 = sub i32 %111, %104*/
begin
idct_row_100_112 = (idct_row_100_111 - idct_row_100_104);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %112 = sub i32 %111, %104*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_112_reg <= idct_row_100_112;
if (reset == 1'b0 && ^(idct_row_100_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_112_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %113 = add i32 %112, %102*/
begin
idct_row_100_113 = (idct_row_100_112 + idct_row_100_102);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %113 = add i32 %112, %102*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_113_reg <= idct_row_100_113;
if (reset == 1'b0 && ^(idct_row_100_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_113_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %114 = sub i32 %110, %109*/
begin
idct_row_100_114 = (idct_row_100_110 - idct_row_100_109);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %114 = sub i32 %110, %109*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_114_reg <= idct_row_100_114;
if (reset == 1'b0 && ^(idct_row_100_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_114_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %115 = sub i32 %114, %104*/
begin
idct_row_100_115 = (idct_row_100_114 - idct_row_100_104);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %115 = sub i32 %114, %104*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_115_reg <= idct_row_100_115;
if (reset == 1'b0 && ^(idct_row_100_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_115_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %116 = add i32 %115, %102*/
begin
idct_row_100_116 = (idct_row_100_115 + idct_row_100_102);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %116 = add i32 %115, %102*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_116_reg <= idct_row_100_116;
if (reset == 1'b0 && ^(idct_row_100_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_116_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %117 = sub i32 %104, %106*/
begin
idct_row_100_117 = (idct_row_100_104 - idct_row_100_106);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %117 = sub i32 %104, %106*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_117_reg <= idct_row_100_117;
if (reset == 1'b0 && ^(idct_row_100_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_117_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %118 = add i32 %117, %102*/
begin
idct_row_100_118 = (idct_row_100_117 + idct_row_100_102);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %118 = add i32 %117, %102*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_118_reg <= idct_row_100_118;
if (reset == 1'b0 && ^(idct_row_100_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_118_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_119 = idct_row_100_119_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %119 = mul nsw i32 %27, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_119_reg <= idct_row_100_119;
if (reset == 1'b0 && ^(idct_row_100_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_119_reg"); $finish; end
end
/* idct_row: %100*/
/*   %119 = mul nsw i32 %27, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_119_reg <= idct_row_100_119;
if (reset == 1'b0 && ^(idct_row_100_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_119_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_120 = idct_row_100_120_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %120 = mul nsw i32 %33, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_120_reg <= idct_row_100_120;
if (reset == 1'b0 && ^(idct_row_100_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_120_reg"); $finish; end
end
/* idct_row: %100*/
/*   %120 = mul nsw i32 %33, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_120_reg <= idct_row_100_120;
if (reset == 1'b0 && ^(idct_row_100_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_120_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_121 = idct_row_100_121_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %121 = mul nsw i32 %16, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_121_reg <= idct_row_100_121;
if (reset == 1'b0 && ^(idct_row_100_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_121_reg"); $finish; end
end
/* idct_row: %100*/
/*   %121 = mul nsw i32 %16, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_121_reg <= idct_row_100_121;
if (reset == 1'b0 && ^(idct_row_100_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_121_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_122 = idct_row_100_122_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %122 = mul nsw i32 %22, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_122_reg <= idct_row_100_122;
if (reset == 1'b0 && ^(idct_row_100_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_122_reg"); $finish; end
end
/* idct_row: %100*/
/*   %122 = mul nsw i32 %22, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_122_reg <= idct_row_100_122;
if (reset == 1'b0 && ^(idct_row_100_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_122_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %123 = add i32 %122, %121*/
begin
idct_row_100_123 = (idct_row_100_122 + idct_row_100_121);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %123 = add i32 %122, %121*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_123_reg <= idct_row_100_123;
if (reset == 1'b0 && ^(idct_row_100_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_123_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %124 = add i32 %123, %119*/
begin
idct_row_100_124 = (idct_row_100_123 + idct_row_100_119);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %124 = add i32 %123, %119*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_124_reg <= idct_row_100_124;
if (reset == 1'b0 && ^(idct_row_100_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_124_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %125 = add i32 %124, %120*/
begin
idct_row_100_125 = (idct_row_100_124 + idct_row_100_120);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %125 = add i32 %124, %120*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_125_reg <= idct_row_100_125;
if (reset == 1'b0 && ^(idct_row_100_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_125_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_126 = idct_row_100_126_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %126 = mul nsw i32 %27, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_126_reg <= idct_row_100_126;
if (reset == 1'b0 && ^(idct_row_100_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_126_reg"); $finish; end
end
/* idct_row: %100*/
/*   %126 = mul nsw i32 %27, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_126_reg <= idct_row_100_126;
if (reset == 1'b0 && ^(idct_row_100_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_126_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_127 = idct_row_100_127_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %127 = mul nsw i32 %33, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_127_reg <= idct_row_100_127;
if (reset == 1'b0 && ^(idct_row_100_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_127_reg"); $finish; end
end
/* idct_row: %100*/
/*   %127 = mul nsw i32 %33, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_127_reg <= idct_row_100_127;
if (reset == 1'b0 && ^(idct_row_100_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_127_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_128 = idct_row_100_128_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %128 = mul nsw i32 %16, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_128_reg <= idct_row_100_128;
if (reset == 1'b0 && ^(idct_row_100_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_128_reg"); $finish; end
end
/* idct_row: %100*/
/*   %128 = mul nsw i32 %16, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_128_reg <= idct_row_100_128;
if (reset == 1'b0 && ^(idct_row_100_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_128_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_129 = idct_row_100_129_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %129 = mul nsw i32 %22, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_129_reg <= idct_row_100_129;
if (reset == 1'b0 && ^(idct_row_100_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_129_reg"); $finish; end
end
/* idct_row: %100*/
/*   %129 = mul nsw i32 %22, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_129_reg <= idct_row_100_129;
if (reset == 1'b0 && ^(idct_row_100_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_129_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %sum23 = add i32 %129, %128*/
begin
idct_row_100_sum23 = (idct_row_100_129 + idct_row_100_128);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %sum23 = add i32 %129, %128*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_sum23_reg <= idct_row_100_sum23;
if (reset == 1'b0 && ^(idct_row_100_sum23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_sum23_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %130 = sub i32 %126, %sum23*/
begin
idct_row_100_130 = (idct_row_100_126 - idct_row_100_sum23);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %130 = sub i32 %126, %sum23*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_130_reg <= idct_row_100_130;
if (reset == 1'b0 && ^(idct_row_100_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_130_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %131 = sub i32 %130, %127*/
begin
idct_row_100_131 = (idct_row_100_130 - idct_row_100_127);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %131 = sub i32 %130, %127*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_131_reg <= idct_row_100_131;
if (reset == 1'b0 && ^(idct_row_100_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_131_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_132 = idct_row_100_132_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %132 = mul nsw i32 %27, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_132_reg <= idct_row_100_132;
if (reset == 1'b0 && ^(idct_row_100_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_132_reg"); $finish; end
end
/* idct_row: %100*/
/*   %132 = mul nsw i32 %27, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_132_reg <= idct_row_100_132;
if (reset == 1'b0 && ^(idct_row_100_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_132_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_133 = idct_row_100_133_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %133 = mul nsw i32 %33, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_133_reg <= idct_row_100_133;
if (reset == 1'b0 && ^(idct_row_100_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_133_reg"); $finish; end
end
/* idct_row: %100*/
/*   %133 = mul nsw i32 %33, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_133_reg <= idct_row_100_133;
if (reset == 1'b0 && ^(idct_row_100_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_133_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_134 = idct_row_100_134_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %134 = mul nsw i32 %16, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_134_reg <= idct_row_100_134;
if (reset == 1'b0 && ^(idct_row_100_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_134_reg"); $finish; end
end
/* idct_row: %100*/
/*   %134 = mul nsw i32 %16, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_134_reg <= idct_row_100_134;
if (reset == 1'b0 && ^(idct_row_100_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_134_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_135 = idct_row_100_135_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %135 = mul nsw i32 %22, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_135_reg <= idct_row_100_135;
if (reset == 1'b0 && ^(idct_row_100_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_135_reg"); $finish; end
end
/* idct_row: %100*/
/*   %135 = mul nsw i32 %22, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_135_reg <= idct_row_100_135;
if (reset == 1'b0 && ^(idct_row_100_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_135_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %136 = add i32 %135, %134*/
begin
idct_row_100_136 = (idct_row_100_135 + idct_row_100_134);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %136 = add i32 %135, %134*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_136_reg <= idct_row_100_136;
if (reset == 1'b0 && ^(idct_row_100_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_136_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %137 = add i32 %136, %132*/
begin
idct_row_100_137 = (idct_row_100_136 + idct_row_100_132);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %137 = add i32 %136, %132*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_137_reg <= idct_row_100_137;
if (reset == 1'b0 && ^(idct_row_100_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_137_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %138 = sub i32 %137, %133*/
begin
idct_row_100_138 = (idct_row_100_137 - idct_row_100_133);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %138 = sub i32 %137, %133*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_138_reg <= idct_row_100_138;
if (reset == 1'b0 && ^(idct_row_100_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_138_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_139 = idct_row_100_139_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %139 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_139_reg <= idct_row_100_139;
if (reset == 1'b0 && ^(idct_row_100_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_139_reg"); $finish; end
end
/* idct_row: %100*/
/*   %139 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_139_reg <= idct_row_100_139;
if (reset == 1'b0 && ^(idct_row_100_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_139_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_140 = idct_row_100_140_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %140 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_140_reg <= idct_row_100_140;
if (reset == 1'b0 && ^(idct_row_100_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_140_reg"); $finish; end
end
/* idct_row: %100*/
/*   %140 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_140_reg <= idct_row_100_140;
if (reset == 1'b0 && ^(idct_row_100_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_140_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_141 = idct_row_100_141_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %141 = mul nsw i32 %16, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_141_reg <= idct_row_100_141;
if (reset == 1'b0 && ^(idct_row_100_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_141_reg"); $finish; end
end
/* idct_row: %100*/
/*   %141 = mul nsw i32 %16, %5*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_141_reg <= idct_row_100_141;
if (reset == 1'b0 && ^(idct_row_100_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_141_reg"); $finish; end
end
end
always @(*) begin
idct_row_100_142 = idct_row_100_142_stage0_reg;
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %142 = mul nsw i32 %22, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_142_reg <= idct_row_100_142;
if (reset == 1'b0 && ^(idct_row_100_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_142_reg"); $finish; end
end
/* idct_row: %100*/
/*   %142 = mul nsw i32 %22, %1*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_142_reg <= idct_row_100_142;
if (reset == 1'b0 && ^(idct_row_100_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_142_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %143 = sub i32 %141, %142*/
begin
idct_row_100_143 = (idct_row_100_141 - idct_row_100_142);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %143 = sub i32 %141, %142*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_143_reg <= idct_row_100_143;
if (reset == 1'b0 && ^(idct_row_100_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_143_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %144 = add i32 %143, %139*/
begin
idct_row_100_144 = (idct_row_100_143 + idct_row_100_139);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %144 = add i32 %143, %139*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_144_reg <= idct_row_100_144;
if (reset == 1'b0 && ^(idct_row_100_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_144_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %145 = sub i32 %144, %140*/
begin
idct_row_100_145 = (idct_row_100_144 - idct_row_100_140);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %145 = sub i32 %144, %140*/
if ((cur_state == LEGUP_F_idct_row_BB_100_36))
begin
idct_row_100_145_reg <= idct_row_100_145;
if (reset == 1'b0 && ^(idct_row_100_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_145_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %146 = add nsw i32 %108, %125*/
begin
idct_row_100_146 = (idct_row_100_108_reg + idct_row_100_125_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %146 = add nsw i32 %108, %125*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_146_reg <= idct_row_100_146;
if (reset == 1'b0 && ^(idct_row_100_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_146_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %147 = trunc i32 %146 to i16*/
begin
idct_row_100_147 = idct_row_100_146[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %147 = trunc i32 %146 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_147_reg <= idct_row_100_147;
if (reset == 1'b0 && ^(idct_row_100_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_147_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %148 = add nsw i32 %113, %131*/
begin
idct_row_100_148 = (idct_row_100_113_reg + idct_row_100_131_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %148 = add nsw i32 %113, %131*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_148_reg <= idct_row_100_148;
if (reset == 1'b0 && ^(idct_row_100_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_148_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %149 = trunc i32 %148 to i16*/
begin
idct_row_100_149 = idct_row_100_148[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %149 = trunc i32 %148 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_149_reg <= idct_row_100_149;
if (reset == 1'b0 && ^(idct_row_100_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_149_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %150 = add nsw i32 %116, %138*/
begin
idct_row_100_150 = (idct_row_100_116_reg + idct_row_100_138_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %150 = add nsw i32 %116, %138*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_150_reg <= idct_row_100_150;
if (reset == 1'b0 && ^(idct_row_100_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_150_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %151 = trunc i32 %150 to i16*/
begin
idct_row_100_151 = idct_row_100_150[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %151 = trunc i32 %150 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_151_reg <= idct_row_100_151;
if (reset == 1'b0 && ^(idct_row_100_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_151_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %152 = add nsw i32 %118, %145*/
begin
idct_row_100_152 = (idct_row_100_118_reg + idct_row_100_145_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %152 = add nsw i32 %118, %145*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_152_reg <= idct_row_100_152;
if (reset == 1'b0 && ^(idct_row_100_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_152_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %153 = trunc i32 %152 to i16*/
begin
idct_row_100_153 = idct_row_100_152[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %153 = trunc i32 %152 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_153_reg <= idct_row_100_153;
if (reset == 1'b0 && ^(idct_row_100_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_153_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %154 = sub nsw i32 %118, %145*/
begin
idct_row_100_154 = (idct_row_100_118_reg - idct_row_100_145_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %154 = sub nsw i32 %118, %145*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_154_reg <= idct_row_100_154;
if (reset == 1'b0 && ^(idct_row_100_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_154_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %155 = trunc i32 %154 to i16*/
begin
idct_row_100_155 = idct_row_100_154[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %155 = trunc i32 %154 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_155_reg <= idct_row_100_155;
if (reset == 1'b0 && ^(idct_row_100_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_155_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %156 = sub nsw i32 %116, %138*/
begin
idct_row_100_156 = (idct_row_100_116_reg - idct_row_100_138_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %156 = sub nsw i32 %116, %138*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_156_reg <= idct_row_100_156;
if (reset == 1'b0 && ^(idct_row_100_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_156_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %157 = trunc i32 %156 to i16*/
begin
idct_row_100_157 = idct_row_100_156[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %157 = trunc i32 %156 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_157_reg <= idct_row_100_157;
if (reset == 1'b0 && ^(idct_row_100_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_157_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %158 = sub nsw i32 %113, %131*/
begin
idct_row_100_158 = (idct_row_100_113_reg - idct_row_100_131_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %158 = sub nsw i32 %113, %131*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_158_reg <= idct_row_100_158;
if (reset == 1'b0 && ^(idct_row_100_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_158_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %159 = trunc i32 %158 to i16*/
begin
idct_row_100_159 = idct_row_100_158[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %159 = trunc i32 %158 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_159_reg <= idct_row_100_159;
if (reset == 1'b0 && ^(idct_row_100_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_159_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %160 = sub nsw i32 %108, %125*/
begin
idct_row_100_160 = (idct_row_100_108_reg - idct_row_100_125_reg);
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %160 = sub nsw i32 %108, %125*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_160_reg <= idct_row_100_160;
if (reset == 1'b0 && ^(idct_row_100_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_160_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %100*/
/*   %161 = trunc i32 %160 to i16*/
begin
idct_row_100_161 = idct_row_100_160[15:0];
end
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %161 = trunc i32 %160 to i16*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
idct_row_100_161_reg <= idct_row_100_161;
if (reset == 1'b0 && ^(idct_row_100_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_100_161_reg"); $finish; end
end
end
always @(*) begin
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if (((cur_state == LEGUP_F_idct_row_BB_47_19) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0 = 32'd1;
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
else if ((((cur_state == LEGUP_F_idct_row_BB_82_20) & (memory_controller_waitrequest == 1'd0)) & (idct_row_82_83 == 1'd1)))
begin
idct_row_162__0 = 32'd0;
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
else if (((cur_state == LEGUP_F_idct_row_BB_84_25) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0 = 32'd1;
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
else if (((cur_state == LEGUP_F_idct_row_BB_91_34) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0 = 32'd1;
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
else /* if (((cur_state == LEGUP_F_idct_row_BB_100_41) & (memory_controller_waitrequest == 1'd0))) */
begin
idct_row_162__0 = 32'd1;
end
end
always @(posedge clk) begin
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if (((cur_state == LEGUP_F_idct_row_BB_47_19) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0_reg <= idct_row_162__0;
if (reset == 1'b0 && ^(idct_row_162__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_162__0_reg"); $finish; end
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if ((((cur_state == LEGUP_F_idct_row_BB_82_20) & (memory_controller_waitrequest == 1'd0)) & (idct_row_82_83 == 1'd1)))
begin
idct_row_162__0_reg <= idct_row_162__0;
if (reset == 1'b0 && ^(idct_row_162__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_162__0_reg"); $finish; end
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if (((cur_state == LEGUP_F_idct_row_BB_84_25) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0_reg <= idct_row_162__0;
if (reset == 1'b0 && ^(idct_row_162__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_162__0_reg"); $finish; end
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if (((cur_state == LEGUP_F_idct_row_BB_91_34) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0_reg <= idct_row_162__0;
if (reset == 1'b0 && ^(idct_row_162__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_162__0_reg"); $finish; end
end
/* idct_row: %162*/
/*   %.0 = phi i32 [ 0, %82 ], [ 1, %91 ], [ 1, %100 ], [ 1, %47 ], [ 1, %84 ]*/
if (((cur_state == LEGUP_F_idct_row_BB_100_41) & (memory_controller_waitrequest == 1'd0)))
begin
idct_row_162__0_reg <= idct_row_162__0;
if (reset == 1'b0 && ^(idct_row_162__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_162__0_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_idct_row_41_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %41*/
/*   %44 = mul nsw i32 %43, %7*/
if ((lpm_mult_idct_row_41_44_en == 1'd1))
begin
idct_row_41_44_stage0_reg <= (idct_row_41_43 * idct_row_0_7_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %48 = mul nsw i32 %30, %3*/
if ((lpm_mult_idct_row_47_48_en == 1'd1))
begin
idct_row_47_48_stage0_reg <= (idct_row_0_30_reg * idct_row_0_3_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %50 = mul nsw i32 %30, %11*/
if ((lpm_mult_idct_row_47_50_en == 1'd1))
begin
idct_row_47_50_stage0_reg <= (idct_row_0_30_reg * idct_row_0_11_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %54 = mul nsw i32 %27, %1*/
if ((lpm_mult_idct_row_47_54_en == 1'd1))
begin
idct_row_47_54_stage0_reg <= (idct_row_0_27_reg * idct_row_0_1_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %55 = mul nsw i32 %33, %5*/
if ((lpm_mult_idct_row_47_55_en == 1'd1))
begin
idct_row_47_55_stage0_reg <= (idct_row_0_33_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %57 = mul nsw i32 %27, %5*/
if ((lpm_mult_idct_row_47_57_en == 1'd1))
begin
idct_row_47_57_stage0_reg <= (idct_row_0_27_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %58 = mul nsw i32 %33, %13*/
if ((lpm_mult_idct_row_47_58_en == 1'd1))
begin
idct_row_47_58_stage0_reg <= (idct_row_0_33_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %60 = mul nsw i32 %27, %9*/
if ((lpm_mult_idct_row_47_60_en == 1'd1))
begin
idct_row_47_60_stage0_reg <= (idct_row_0_27_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %61 = mul nsw i32 %33, %1*/
if ((lpm_mult_idct_row_47_61_en == 1'd1))
begin
idct_row_47_61_stage0_reg <= (idct_row_0_33_reg * idct_row_0_1_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %63 = mul nsw i32 %27, %13*/
if ((lpm_mult_idct_row_47_63_en == 1'd1))
begin
idct_row_47_63_stage0_reg <= (idct_row_0_27_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_47_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %47*/
/*   %64 = mul nsw i32 %33, %9*/
if ((lpm_mult_idct_row_47_64_en == 1'd1))
begin
idct_row_47_64_stage0_reg <= (idct_row_0_33_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_91_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %93 = mul nsw i32 %92, %7*/
if ((lpm_mult_idct_row_91_93_en == 1'd1))
begin
idct_row_91_93_stage0_reg <= (idct_row_91_92 * idct_row_0_7_reg);
end
end
always @(*) begin
lpm_mult_idct_row_91_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %91*/
/*   %96 = mul nsw i32 %95, %7*/
if ((lpm_mult_idct_row_91_96_en == 1'd1))
begin
idct_row_91_96_stage0_reg <= (idct_row_91_95 * idct_row_0_7_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_101_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %101 = mul nsw i32 %90, %7*/
if ((lpm_mult_idct_row_100_101_en == 1'd1))
begin
idct_row_100_101_stage0_reg <= (idct_row_86_90_reg * idct_row_0_7_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %103 = mul nsw i32 %30, %3*/
if ((lpm_mult_idct_row_100_103_en == 1'd1))
begin
idct_row_100_103_stage0_reg <= (idct_row_0_30_reg * idct_row_0_3_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_104_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %104 = mul nsw i32 %38, %7*/
if ((lpm_mult_idct_row_100_104_en == 1'd1))
begin
idct_row_100_104_stage0_reg <= (idct_row_0_38_reg * idct_row_0_7_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %105 = mul nsw i32 %19, %11*/
if ((lpm_mult_idct_row_100_105_en == 1'd1))
begin
idct_row_100_105_stage0_reg <= (idct_row_0_19_reg * idct_row_0_11_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %109 = mul nsw i32 %30, %11*/
if ((lpm_mult_idct_row_100_109_en == 1'd1))
begin
idct_row_100_109_stage0_reg <= (idct_row_0_30_reg * idct_row_0_11_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_110_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %110 = mul nsw i32 %19, %3*/
if ((lpm_mult_idct_row_100_110_en == 1'd1))
begin
idct_row_100_110_stage0_reg <= (idct_row_0_19_reg * idct_row_0_3_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_119_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %119 = mul nsw i32 %27, %1*/
if ((lpm_mult_idct_row_100_119_en == 1'd1))
begin
idct_row_100_119_stage0_reg <= (idct_row_0_27_reg * idct_row_0_1_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_120_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %120 = mul nsw i32 %33, %5*/
if ((lpm_mult_idct_row_100_120_en == 1'd1))
begin
idct_row_100_120_stage0_reg <= (idct_row_0_33_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %121 = mul nsw i32 %16, %9*/
if ((lpm_mult_idct_row_100_121_en == 1'd1))
begin
idct_row_100_121_stage0_reg <= (idct_row_0_16_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_122_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %122 = mul nsw i32 %22, %13*/
if ((lpm_mult_idct_row_100_122_en == 1'd1))
begin
idct_row_100_122_stage0_reg <= (idct_row_0_22_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_126_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %126 = mul nsw i32 %27, %5*/
if ((lpm_mult_idct_row_100_126_en == 1'd1))
begin
idct_row_100_126_stage0_reg <= (idct_row_0_27_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %127 = mul nsw i32 %33, %13*/
if ((lpm_mult_idct_row_100_127_en == 1'd1))
begin
idct_row_100_127_stage0_reg <= (idct_row_0_33_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_128_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %128 = mul nsw i32 %16, %1*/
if ((lpm_mult_idct_row_100_128_en == 1'd1))
begin
idct_row_100_128_stage0_reg <= (idct_row_0_16_reg * idct_row_0_1_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_129_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %129 = mul nsw i32 %22, %9*/
if ((lpm_mult_idct_row_100_129_en == 1'd1))
begin
idct_row_100_129_stage0_reg <= (idct_row_0_22_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_132_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %132 = mul nsw i32 %27, %9*/
if ((lpm_mult_idct_row_100_132_en == 1'd1))
begin
idct_row_100_132_stage0_reg <= (idct_row_0_27_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_133_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %133 = mul nsw i32 %33, %1*/
if ((lpm_mult_idct_row_100_133_en == 1'd1))
begin
idct_row_100_133_stage0_reg <= (idct_row_0_33_reg * idct_row_0_1_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_134_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %134 = mul nsw i32 %16, %13*/
if ((lpm_mult_idct_row_100_134_en == 1'd1))
begin
idct_row_100_134_stage0_reg <= (idct_row_0_16_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %135 = mul nsw i32 %22, %5*/
if ((lpm_mult_idct_row_100_135_en == 1'd1))
begin
idct_row_100_135_stage0_reg <= (idct_row_0_22_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %139 = mul nsw i32 %27, %13*/
if ((lpm_mult_idct_row_100_139_en == 1'd1))
begin
idct_row_100_139_stage0_reg <= (idct_row_0_27_reg * idct_row_0_13_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_140_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %140 = mul nsw i32 %33, %9*/
if ((lpm_mult_idct_row_100_140_en == 1'd1))
begin
idct_row_100_140_stage0_reg <= (idct_row_0_33_reg * idct_row_0_9_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_141_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %141 = mul nsw i32 %16, %5*/
if ((lpm_mult_idct_row_100_141_en == 1'd1))
begin
idct_row_100_141_stage0_reg <= (idct_row_0_16_reg * idct_row_0_5_reg);
end
end
always @(*) begin
lpm_mult_idct_row_100_142_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* idct_row: %100*/
/*   %142 = mul nsw i32 %22, %1*/
if ((lpm_mult_idct_row_100_142_en == 1'd1))
begin
idct_row_100_142_stage0_reg <= (idct_row_0_22_reg * idct_row_0_1_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* idct_row: %162*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_idct_row_BB_162_42))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_41_10))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %69, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %73, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %75, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %79, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %149, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %153, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %155, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %159, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_address_a = arg_tab;
end
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_address_a = idct_row_0_4_reg;
end
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_address_a = idct_row_0_8_reg;
end
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_address_a = idct_row_0_12_reg;
end
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_address_a = idct_row_0_17_reg;
end
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_address_a = idct_row_0_25_reg;
end
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_address_a = idct_row_0_31_reg;
end
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_41_10))
begin
memory_controller_address_a = arg_in;
end
/* idct_row: %47*/
/*   store i16 %69, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_address_a = idct_row_0_25_reg;
end
/* idct_row: %47*/
/*   store i16 %73, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_address_a = idct_row_0_31_reg;
end
/* idct_row: %47*/
/*   store i16 %75, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_address_a = idct_row_0_36_reg;
end
/* idct_row: %47*/
/*   store i16 %79, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_address_a = idct_row_0_17_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_address_a = idct_row_0_17_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_address_a = idct_row_0_36_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_address_a = idct_row_0_31_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_address_a = idct_row_0_25_reg;
end
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
memory_controller_address_a = arg_in;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_address_a = idct_row_0_31_reg;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_address_a = idct_row_0_36_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_address_a = idct_row_0_25_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_address_a = idct_row_0_17_reg;
end
/* idct_row: %100*/
/*   store i16 %149, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_address_a = idct_row_0_25_reg;
end
/* idct_row: %100*/
/*   store i16 %153, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_address_a = idct_row_0_31_reg;
end
/* idct_row: %100*/
/*   store i16 %155, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_address_a = idct_row_0_36_reg;
end
/* idct_row: %100*/
/*   store i16 %159, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_address_a = idct_row_0_17_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_41_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %47*/
/*   store i16 %69, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %73, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %75, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %79, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %149, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %153, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %155, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_write_enable_a = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %159, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* idct_row: %47*/
/*   store i16 %69, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_in_a = idct_row_47_69;
end
/* idct_row: %47*/
/*   store i16 %73, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_in_a = idct_row_47_73_reg;
end
/* idct_row: %47*/
/*   store i16 %75, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_in_a = idct_row_47_75_reg;
end
/* idct_row: %47*/
/*   store i16 %79, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_in_a = idct_row_47_79_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_in_a = idct_row_84_85;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_in_a = idct_row_84_85_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_in_a = idct_row_84_85_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_in_a = idct_row_84_85_reg;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_in_a = idct_row_91_98;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_in_a = idct_row_91_98_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_in_a = idct_row_91_99_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_in_a = idct_row_91_99_reg;
end
/* idct_row: %100*/
/*   store i16 %149, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_in_a = idct_row_100_149;
end
/* idct_row: %100*/
/*   store i16 %153, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_in_a = idct_row_100_153_reg;
end
/* idct_row: %100*/
/*   store i16 %155, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_in_a = idct_row_100_155_reg;
end
/* idct_row: %100*/
/*   store i16 %159, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_in_a = idct_row_100_159_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* idct_row: %0*/
/*   %1 = load i32* %tab, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* idct_row: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* idct_row: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* idct_row: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* idct_row: %0*/
/*   %18 = load i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %0*/
/*   %26 = load i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %0*/
/*   %32 = load i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %41*/
/*   %42 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_41_10))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %69, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %73, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %75, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %79, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %86*/
/*   %89 = load i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_86_26))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %149, i16* %25, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %153, i16* %31, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %155, i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_size_a = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %159, i16* %17, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_size_a = 2'd1;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %67, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %71, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %77, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %81, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %147, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %151, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %157, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %161, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_address_b = idct_row_0_2;
end
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_address_b = idct_row_0_6_reg;
end
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_address_b = idct_row_0_10_reg;
end
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_address_b = idct_row_0_14_reg;
end
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_address_b = idct_row_0_20_reg;
end
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_address_b = idct_row_0_28_reg;
end
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_address_b = idct_row_0_36_reg;
end
/* idct_row: %47*/
/*   store i16 %67, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_address_b = arg_in;
end
/* idct_row: %47*/
/*   store i16 %71, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_address_b = idct_row_0_28_reg;
end
/* idct_row: %47*/
/*   store i16 %77, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_address_b = idct_row_0_14_reg;
end
/* idct_row: %47*/
/*   store i16 %81, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_address_b = idct_row_0_20_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_address_b = idct_row_0_20_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_address_b = idct_row_0_14_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_address_b = idct_row_0_28_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_address_b = arg_in;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_address_b = arg_in;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_address_b = idct_row_0_20_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_address_b = idct_row_0_28_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_address_b = idct_row_0_14_reg;
end
/* idct_row: %100*/
/*   store i16 %147, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_address_b = arg_in;
end
/* idct_row: %100*/
/*   store i16 %151, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_address_b = idct_row_0_28_reg;
end
/* idct_row: %100*/
/*   store i16 %157, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_address_b = idct_row_0_14_reg;
end
/* idct_row: %100*/
/*   store i16 %161, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_address_b = idct_row_0_20_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* idct_row: %47*/
/*   store i16 %67, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %71, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %77, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %47*/
/*   store i16 %81, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %147, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %151, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %157, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* idct_row: %100*/
/*   store i16 %161, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* idct_row: %47*/
/*   store i16 %67, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_in_b = idct_row_47_67;
end
/* idct_row: %47*/
/*   store i16 %71, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_in_b = idct_row_47_71_reg;
end
/* idct_row: %47*/
/*   store i16 %77, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_in_b = idct_row_47_77_reg;
end
/* idct_row: %47*/
/*   store i16 %81, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_in_b = idct_row_47_81_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_in_b = idct_row_84_85;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_in_b = idct_row_84_85_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_in_b = idct_row_84_85_reg;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_in_b = idct_row_84_85_reg;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_in_b = idct_row_91_98;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_in_b = idct_row_91_98_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_in_b = idct_row_91_99_reg;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_in_b = idct_row_91_99_reg;
end
/* idct_row: %100*/
/*   store i16 %147, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_in_b = idct_row_100_147;
end
/* idct_row: %100*/
/*   store i16 %151, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_in_b = idct_row_100_151_reg;
end
/* idct_row: %100*/
/*   store i16 %157, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_in_b = idct_row_100_157_reg;
end
/* idct_row: %100*/
/*   store i16 %161, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_in_b = idct_row_100_161_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* idct_row: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* idct_row: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* idct_row: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_idct_row_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* idct_row: %0*/
/*   %15 = load i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_4))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %0*/
/*   %21 = load i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_5))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %0*/
/*   %29 = load i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_6))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %0*/
/*   %37 = load i16* %36, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_0_7))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %67, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_15))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %71, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_16))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %77, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_17))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %47*/
/*   store i16 %81, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_47_18))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_21))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_22))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_23))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %84*/
/*   store i16 %85, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_84_24))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_30))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %98, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_31))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_32))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %91*/
/*   store i16 %99, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_91_33))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %147, i16* %in, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_37))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %151, i16* %28, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_38))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %157, i16* %14, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_39))
begin
memory_controller_size_b = 2'd1;
end
/* idct_row: %100*/
/*   store i16 %161, i16* %20, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_idct_row_BB_100_40))
begin
memory_controller_size_b = 2'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* idct_row: %162*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_idct_row_BB_162_42))
begin
return_val <= idct_row_162__0_reg;
if (reset == 1'b0 && ^(idct_row_162__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  idct_row_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_arg_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_arg_tab;
reg [31:0] idct_row_arg_rnd;
wire  idct_row_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_memory_controller_address_a;
wire  idct_row_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] idct_row_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] idct_row_memory_controller_out_a;
wire [1:0] idct_row_memory_controller_size_a;
wire  idct_row_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] idct_row_memory_controller_address_b;
wire  idct_row_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] idct_row_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] idct_row_memory_controller_out_b;
wire [1:0] idct_row_memory_controller_size_b;
reg  idct_row_memory_controller_waitrequest;
wire  idct_row_finish;
reg  idct_row_finish_final;
wire [31:0] idct_row_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


idct_row idct_row_inst (
	.memory_controller_enable_a (idct_row_memory_controller_enable_a),
	.memory_controller_address_a (idct_row_memory_controller_address_a),
	.memory_controller_write_enable_a (idct_row_memory_controller_write_enable_a),
	.memory_controller_in_a (idct_row_memory_controller_in_a),
	.memory_controller_size_a (idct_row_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (idct_row_memory_controller_enable_b),
	.memory_controller_address_b (idct_row_memory_controller_address_b),
	.memory_controller_write_enable_b (idct_row_memory_controller_write_enable_b),
	.memory_controller_in_b (idct_row_memory_controller_in_b),
	.memory_controller_size_b (idct_row_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (idct_row_start),
	.finish (idct_row_finish),
	.return_val (idct_row_return_val),
	.arg_in (idct_row_arg_in),
	.arg_tab (idct_row_arg_tab),
	.arg_rnd (idct_row_arg_rnd)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (idct_row_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (idct_row_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
begin
main_0_1 = idct_row_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
idct_row_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
idct_row_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
idct_row_arg_in <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_arg_in"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
idct_row_arg_tab <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_arg_tab"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
idct_row_arg_rnd <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to idct_row_arg_rnd"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
begin
idct_row_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
begin
idct_row_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
idct_row_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
idct_row_finish_final = idct_row_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = idct_row_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = idct_row_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = idct_row_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = idct_row_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = idct_row_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = idct_row_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = idct_row_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = idct_row_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = idct_row_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = idct_row_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = idct_row_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = idct_row_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = idct_row_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = idct_row_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = idct_row_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = idct_row_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = idct_row_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = idct_row_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = idct_row_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @idct_row(i16* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = idct_row_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
