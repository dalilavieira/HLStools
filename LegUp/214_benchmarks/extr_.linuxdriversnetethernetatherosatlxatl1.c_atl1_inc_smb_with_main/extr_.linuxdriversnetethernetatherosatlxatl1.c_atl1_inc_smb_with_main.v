//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:51 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module atl1_inc_smb
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_adapter
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_40 = 8'd40;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_41 = 8'd41;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_42 = 8'd42;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_43 = 8'd43;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_44 = 8'd44;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_45 = 8'd45;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_46 = 8'd46;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_47 = 8'd47;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_48 = 8'd48;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_49 = 8'd49;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_50 = 8'd50;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_51 = 8'd51;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_52 = 8'd52;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_53 = 8'd53;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_54 = 8'd54;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_55 = 8'd55;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_56 = 8'd56;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_57 = 8'd57;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_58 = 8'd58;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_59 = 8'd59;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_60 = 8'd60;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_61 = 8'd61;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_62 = 8'd62;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_63 = 8'd63;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_64 = 8'd64;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_65 = 8'd65;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_66 = 8'd66;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_67 = 8'd67;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_68 = 8'd68;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_69 = 8'd69;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_70 = 8'd70;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_71 = 8'd71;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_72 = 8'd72;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_73 = 8'd73;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_74 = 8'd74;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_75 = 8'd75;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_76 = 8'd76;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_77 = 8'd77;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_78 = 8'd78;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_79 = 8'd79;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_80 = 8'd80;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_81 = 8'd81;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_82 = 8'd82;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_83 = 8'd83;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_84 = 8'd84;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_85 = 8'd85;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_86 = 8'd86;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_87 = 8'd87;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_88 = 8'd88;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_89 = 8'd89;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_90 = 8'd90;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_91 = 8'd91;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_92 = 8'd92;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_93 = 8'd93;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_94 = 8'd94;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_95 = 8'd95;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_96 = 8'd96;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_97 = 8'd97;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_98 = 8'd98;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_99 = 8'd99;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_100 = 8'd100;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_101 = 8'd101;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_102 = 8'd102;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_103 = 8'd103;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_104 = 8'd104;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_105 = 8'd105;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_106 = 8'd106;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_107 = 8'd107;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_108 = 8'd108;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_109 = 8'd109;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_110 = 8'd110;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_111 = 8'd111;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_112 = 8'd112;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_113 = 8'd113;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_114 = 8'd114;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_115 = 8'd115;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_116 = 8'd116;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_117 = 8'd117;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_118 = 8'd118;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_119 = 8'd119;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_120 = 8'd120;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_121 = 8'd121;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_122 = 8'd122;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_123 = 8'd123;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_124 = 8'd124;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_125 = 8'd125;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_126 = 8'd126;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_127 = 8'd127;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_128 = 8'd128;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_129 = 8'd129;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_130 = 8'd130;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_131 = 8'd131;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_132 = 8'd132;
parameter [7:0] LEGUP_F_atl1_inc_smb_BB_0_133 = 8'd133;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_adapter;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_5_reg;
reg [31:0] atl1_inc_smb_0_6;
reg [31:0] atl1_inc_smb_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_7_reg;
reg [31:0] atl1_inc_smb_0_8;
reg [31:0] atl1_inc_smb_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_9_reg;
reg [31:0] atl1_inc_smb_0_10;
reg [31:0] atl1_inc_smb_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_11_reg;
reg [31:0] atl1_inc_smb_0_12;
reg [31:0] atl1_inc_smb_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_13_reg;
reg [31:0] atl1_inc_smb_0_14;
reg [31:0] atl1_inc_smb_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_15_reg;
reg [31:0] atl1_inc_smb_0_16;
reg [31:0] atl1_inc_smb_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_17_reg;
reg [31:0] atl1_inc_smb_0_18;
reg [31:0] atl1_inc_smb_0_18_reg;
reg [31:0] atl1_inc_smb_0_19;
reg [31:0] atl1_inc_smb_0_19_reg;
reg [31:0] atl1_inc_smb_0_20;
reg [31:0] atl1_inc_smb_0_20_reg;
reg [31:0] atl1_inc_smb_0_21;
reg [31:0] atl1_inc_smb_0_21_reg;
reg [31:0] atl1_inc_smb_0_22;
reg [31:0] atl1_inc_smb_0_22_reg;
reg [31:0] atl1_inc_smb_0_23;
reg [31:0] atl1_inc_smb_0_23_reg;
reg [31:0] atl1_inc_smb_0_24;
reg [31:0] atl1_inc_smb_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_25_reg;
reg [31:0] atl1_inc_smb_0_26;
reg [31:0] atl1_inc_smb_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_27_reg;
reg [31:0] atl1_inc_smb_0_28;
reg [31:0] atl1_inc_smb_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_29_reg;
reg [31:0] atl1_inc_smb_0_30;
reg [31:0] atl1_inc_smb_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_31_reg;
reg [31:0] atl1_inc_smb_0_32;
reg [31:0] atl1_inc_smb_0_32_reg;
reg [31:0] atl1_inc_smb_0_33;
reg [31:0] atl1_inc_smb_0_33_reg;
reg [31:0] atl1_inc_smb_0_34;
reg [31:0] atl1_inc_smb_0_34_reg;
reg [31:0] atl1_inc_smb_0_35;
reg [31:0] atl1_inc_smb_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_36_reg;
reg [31:0] atl1_inc_smb_0_37;
reg [31:0] atl1_inc_smb_0_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_38_reg;
reg [31:0] atl1_inc_smb_0_39;
reg [31:0] atl1_inc_smb_0_39_reg;
reg [31:0] atl1_inc_smb_0_40;
reg [31:0] atl1_inc_smb_0_40_reg;
reg [31:0] atl1_inc_smb_0_41;
reg [31:0] atl1_inc_smb_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_42_reg;
reg [31:0] atl1_inc_smb_0_43;
reg [31:0] atl1_inc_smb_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_44_reg;
reg [31:0] atl1_inc_smb_0_45;
reg [31:0] atl1_inc_smb_0_45_reg;
reg [31:0] atl1_inc_smb_0_46;
reg [31:0] atl1_inc_smb_0_46_reg;
reg [31:0] atl1_inc_smb_0_47;
reg [31:0] atl1_inc_smb_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_48_reg;
reg [31:0] atl1_inc_smb_0_49;
reg [31:0] atl1_inc_smb_0_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_50_reg;
reg [31:0] atl1_inc_smb_0_51;
reg [31:0] atl1_inc_smb_0_51_reg;
reg [31:0] atl1_inc_smb_0_52;
reg [31:0] atl1_inc_smb_0_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_53_reg;
reg [31:0] atl1_inc_smb_0_54;
reg [31:0] atl1_inc_smb_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_55_reg;
reg [31:0] atl1_inc_smb_0_56;
reg [31:0] atl1_inc_smb_0_56_reg;
reg [31:0] atl1_inc_smb_0_57;
reg [31:0] atl1_inc_smb_0_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_58_reg;
reg [31:0] atl1_inc_smb_0_59;
reg [31:0] atl1_inc_smb_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_60_reg;
reg [31:0] atl1_inc_smb_0_61;
reg [31:0] atl1_inc_smb_0_61_reg;
reg [31:0] atl1_inc_smb_0_62;
reg [31:0] atl1_inc_smb_0_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_63_reg;
reg [31:0] atl1_inc_smb_0_64;
reg [31:0] atl1_inc_smb_0_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_65_reg;
reg [31:0] atl1_inc_smb_0_66;
reg [31:0] atl1_inc_smb_0_66_reg;
reg [31:0] atl1_inc_smb_0_67;
reg [31:0] atl1_inc_smb_0_67_reg;
reg [31:0] atl1_inc_smb_0_68;
reg [31:0] atl1_inc_smb_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_69_reg;
reg [31:0] atl1_inc_smb_0_70;
reg [31:0] atl1_inc_smb_0_70_reg;
reg [31:0] atl1_inc_smb_0_71;
reg [31:0] atl1_inc_smb_0_71_reg;
reg [31:0] atl1_inc_smb_0_72;
reg [31:0] atl1_inc_smb_0_72_reg;
reg [31:0] atl1_inc_smb_0_73;
reg [31:0] atl1_inc_smb_0_73_reg;
reg [31:0] atl1_inc_smb_0_74;
reg [31:0] atl1_inc_smb_0_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_75_reg;
reg [31:0] atl1_inc_smb_0_76;
reg [31:0] atl1_inc_smb_0_76_reg;
reg [31:0] atl1_inc_smb_0_77;
reg [31:0] atl1_inc_smb_0_77_reg;
reg [31:0] atl1_inc_smb_0_78;
reg [31:0] atl1_inc_smb_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_79_reg;
reg [31:0] atl1_inc_smb_0_80;
reg [31:0] atl1_inc_smb_0_80_reg;
reg [31:0] atl1_inc_smb_0_81;
reg [31:0] atl1_inc_smb_0_81_reg;
reg [31:0] atl1_inc_smb_0_82;
reg [31:0] atl1_inc_smb_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_83_reg;
reg [31:0] atl1_inc_smb_0_84;
reg [31:0] atl1_inc_smb_0_84_reg;
reg [31:0] atl1_inc_smb_0_85;
reg [31:0] atl1_inc_smb_0_85_reg;
reg [31:0] atl1_inc_smb_0_86;
reg [31:0] atl1_inc_smb_0_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_87_reg;
reg [31:0] atl1_inc_smb_0_88;
reg [31:0] atl1_inc_smb_0_88_reg;
reg [31:0] atl1_inc_smb_0_89;
reg [31:0] atl1_inc_smb_0_89_reg;
reg [31:0] atl1_inc_smb_0_90;
reg [31:0] atl1_inc_smb_0_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_91_reg;
reg [31:0] atl1_inc_smb_0_92;
reg [31:0] atl1_inc_smb_0_92_reg;
reg [31:0] atl1_inc_smb_0_93;
reg [31:0] atl1_inc_smb_0_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_94_reg;
reg [31:0] atl1_inc_smb_0_95;
reg [31:0] atl1_inc_smb_0_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_96_reg;
reg [31:0] atl1_inc_smb_0_97;
reg [31:0] atl1_inc_smb_0_97_reg;
reg [31:0] atl1_inc_smb_0_98;
reg [31:0] atl1_inc_smb_0_98_reg;
reg [31:0] atl1_inc_smb_0_99;
reg [31:0] atl1_inc_smb_0_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_100_reg;
reg [31:0] atl1_inc_smb_0_101;
reg [31:0] atl1_inc_smb_0_101_reg;
reg [31:0] atl1_inc_smb_0_102;
reg [31:0] atl1_inc_smb_0_102_reg;
reg [31:0] atl1_inc_smb_0_103;
reg [31:0] atl1_inc_smb_0_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_104_reg;
reg [31:0] atl1_inc_smb_0_105;
reg [31:0] atl1_inc_smb_0_105_reg;
reg [31:0] atl1_inc_smb_0_106;
reg [31:0] atl1_inc_smb_0_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_107_reg;
reg [31:0] atl1_inc_smb_0_108;
reg [31:0] atl1_inc_smb_0_108_reg;
reg [31:0] atl1_inc_smb_0_109;
reg [31:0] atl1_inc_smb_0_109_reg;
reg [31:0] atl1_inc_smb_0_110;
reg [31:0] atl1_inc_smb_0_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_111_reg;
reg [31:0] atl1_inc_smb_0_112;
reg [31:0] atl1_inc_smb_0_112_reg;
reg [31:0] atl1_inc_smb_0_113;
reg [31:0] atl1_inc_smb_0_113_reg;
reg [31:0] atl1_inc_smb_0_114;
reg [31:0] atl1_inc_smb_0_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_115_reg;
reg [31:0] atl1_inc_smb_0_116;
reg [31:0] atl1_inc_smb_0_116_reg;
reg [31:0] atl1_inc_smb_0_117;
reg [31:0] atl1_inc_smb_0_117_reg;
reg [31:0] atl1_inc_smb_0_118;
reg [31:0] atl1_inc_smb_0_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_119_reg;
reg [31:0] atl1_inc_smb_0_120;
reg [31:0] atl1_inc_smb_0_120_reg;
reg [31:0] atl1_inc_smb_0_121;
reg [31:0] atl1_inc_smb_0_121_reg;
reg [31:0] atl1_inc_smb_0_122;
reg [31:0] atl1_inc_smb_0_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_123_reg;
reg [31:0] atl1_inc_smb_0_124;
reg [31:0] atl1_inc_smb_0_124_reg;
reg [31:0] atl1_inc_smb_0_125;
reg [31:0] atl1_inc_smb_0_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_126_reg;
reg [31:0] atl1_inc_smb_0_127;
reg [31:0] atl1_inc_smb_0_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_128_reg;
reg [31:0] atl1_inc_smb_0_129;
reg [31:0] atl1_inc_smb_0_129_reg;
reg [31:0] atl1_inc_smb_0_130;
reg [31:0] atl1_inc_smb_0_130_reg;
reg [31:0] atl1_inc_smb_0_131;
reg [31:0] atl1_inc_smb_0_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_132_reg;
reg [31:0] atl1_inc_smb_0_133;
reg [31:0] atl1_inc_smb_0_133_reg;
reg [31:0] atl1_inc_smb_0_134;
reg [31:0] atl1_inc_smb_0_134_reg;
reg [31:0] atl1_inc_smb_0_135;
reg [31:0] atl1_inc_smb_0_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_136_reg;
reg [31:0] atl1_inc_smb_0_137;
reg [31:0] atl1_inc_smb_0_137_reg;
reg [31:0] atl1_inc_smb_0_138;
reg [31:0] atl1_inc_smb_0_138_reg;
reg [31:0] atl1_inc_smb_0_139;
reg [31:0] atl1_inc_smb_0_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_140_reg;
reg [31:0] atl1_inc_smb_0_141;
reg [31:0] atl1_inc_smb_0_141_reg;
reg [31:0] atl1_inc_smb_0_142;
reg [31:0] atl1_inc_smb_0_142_reg;
reg [31:0] atl1_inc_smb_0_143;
reg [31:0] atl1_inc_smb_0_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_144_reg;
reg [31:0] atl1_inc_smb_0_145;
reg [31:0] atl1_inc_smb_0_145_reg;
reg [31:0] atl1_inc_smb_0_146;
reg [31:0] atl1_inc_smb_0_146_reg;
reg [31:0] atl1_inc_smb_0_147;
reg [31:0] atl1_inc_smb_0_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_148_reg;
reg [31:0] atl1_inc_smb_0_149;
reg [31:0] atl1_inc_smb_0_149_reg;
reg [31:0] atl1_inc_smb_0_150;
reg [31:0] atl1_inc_smb_0_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_151_reg;
reg [31:0] atl1_inc_smb_0_152;
reg [31:0] atl1_inc_smb_0_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_153_reg;
reg [31:0] atl1_inc_smb_0_154;
reg [31:0] atl1_inc_smb_0_154_reg;
reg [31:0] atl1_inc_smb_0_155;
reg [31:0] atl1_inc_smb_0_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_156_reg;
reg [31:0] atl1_inc_smb_0_157;
reg [31:0] atl1_inc_smb_0_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_158_reg;
reg [31:0] atl1_inc_smb_0_159;
reg [31:0] atl1_inc_smb_0_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_160_reg;
reg [31:0] atl1_inc_smb_0_161;
reg [31:0] atl1_inc_smb_0_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_162_reg;
reg [31:0] atl1_inc_smb_0_163;
reg [31:0] atl1_inc_smb_0_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_164_reg;
reg [31:0] atl1_inc_smb_0_165;
reg [31:0] atl1_inc_smb_0_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_166_reg;
reg [31:0] atl1_inc_smb_0_167;
reg [31:0] atl1_inc_smb_0_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_168_reg;
reg [31:0] atl1_inc_smb_0_169;
reg [31:0] atl1_inc_smb_0_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_170_reg;
reg [31:0] atl1_inc_smb_0_171;
reg [31:0] atl1_inc_smb_0_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_172_reg;
reg [31:0] atl1_inc_smb_0_173;
reg [31:0] atl1_inc_smb_0_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_174_reg;
reg [31:0] atl1_inc_smb_0_175;
reg [31:0] atl1_inc_smb_0_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_176_reg;
reg [31:0] atl1_inc_smb_0_177;
reg [31:0] atl1_inc_smb_0_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_178_reg;
reg [31:0] atl1_inc_smb_0_179;
reg [31:0] atl1_inc_smb_0_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_180_reg;
reg [31:0] atl1_inc_smb_0_181;
reg [31:0] atl1_inc_smb_0_181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_183_reg;
reg [31:0] atl1_inc_smb_0_184;
reg [31:0] atl1_inc_smb_0_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_185_reg;
reg [31:0] atl1_inc_smb_0_186;
reg [31:0] atl1_inc_smb_0_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_187_reg;
reg [31:0] atl1_inc_smb_0_188;
reg [31:0] atl1_inc_smb_0_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_0_189_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_atl1_inc_smb_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_atl1_inc_smb_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_atl1_inc_smb_BB_0_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %1 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 2*/
begin
atl1_inc_smb_0_1 = (arg_adapter + 112);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %1 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 2*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_1_reg <= atl1_inc_smb_0_1;
if (reset == 1'b0 && ^(atl1_inc_smb_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_1_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
begin
atl1_inc_smb_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_2_reg <= atl1_inc_smb_0_2;
if (reset == 1'b0 && ^(atl1_inc_smb_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_2_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %3 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 1, i32 0*/
begin
atl1_inc_smb_0_3 = (arg_adapter + 108);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %3 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_3_reg <= atl1_inc_smb_0_3;
if (reset == 1'b0 && ^(atl1_inc_smb_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_3_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
begin
atl1_inc_smb_0_4 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_4_reg <= atl1_inc_smb_0_4;
if (reset == 1'b0 && ^(atl1_inc_smb_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_4_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %5 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 20*/
begin
atl1_inc_smb_0_5 = (atl1_inc_smb_0_4 + 80);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %5 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 20*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_5_reg <= atl1_inc_smb_0_5;
if (reset == 1'b0 && ^(atl1_inc_smb_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_5_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
atl1_inc_smb_0_6_reg <= atl1_inc_smb_0_6;
if (reset == 1'b0 && ^(atl1_inc_smb_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_6_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %7 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 12*/
begin
atl1_inc_smb_0_7 = (atl1_inc_smb_0_4 + 48);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %7 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 12*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_7_reg <= atl1_inc_smb_0_7;
if (reset == 1'b0 && ^(atl1_inc_smb_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_7_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_8 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
atl1_inc_smb_0_8_reg <= atl1_inc_smb_0_8;
if (reset == 1'b0 && ^(atl1_inc_smb_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_8_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %9 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 13*/
begin
atl1_inc_smb_0_9 = (atl1_inc_smb_0_4 + 52);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %9 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 13*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_9_reg <= atl1_inc_smb_0_9;
if (reset == 1'b0 && ^(atl1_inc_smb_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_9_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
atl1_inc_smb_0_10_reg <= atl1_inc_smb_0_10;
if (reset == 1'b0 && ^(atl1_inc_smb_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_10_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %11 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 8*/
begin
atl1_inc_smb_0_11 = (atl1_inc_smb_0_4 + 32);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %11 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 8*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_11_reg <= atl1_inc_smb_0_11;
if (reset == 1'b0 && ^(atl1_inc_smb_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_11_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
atl1_inc_smb_0_12_reg <= atl1_inc_smb_0_12;
if (reset == 1'b0 && ^(atl1_inc_smb_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_12_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %13 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 14*/
begin
atl1_inc_smb_0_13 = (atl1_inc_smb_0_4 + 56);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %13 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 14*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_13_reg <= atl1_inc_smb_0_13;
if (reset == 1'b0 && ^(atl1_inc_smb_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_13_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
atl1_inc_smb_0_14_reg <= atl1_inc_smb_0_14;
if (reset == 1'b0 && ^(atl1_inc_smb_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_14_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %15 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 9*/
begin
atl1_inc_smb_0_15 = (atl1_inc_smb_0_4 + 36);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %15 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 9*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_15_reg <= atl1_inc_smb_0_15;
if (reset == 1'b0 && ^(atl1_inc_smb_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_15_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_16 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
atl1_inc_smb_0_16_reg <= atl1_inc_smb_0_16;
if (reset == 1'b0 && ^(atl1_inc_smb_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_16_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %17 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 11*/
begin
atl1_inc_smb_0_17 = (atl1_inc_smb_0_4 + 44);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %17 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 11*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_17_reg <= atl1_inc_smb_0_17;
if (reset == 1'b0 && ^(atl1_inc_smb_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_17_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
atl1_inc_smb_0_18_reg <= atl1_inc_smb_0_18;
if (reset == 1'b0 && ^(atl1_inc_smb_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_18_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %19 = add i32 %8, %6*/
begin
atl1_inc_smb_0_19 = (atl1_inc_smb_0_8 + atl1_inc_smb_0_6);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %19 = add i32 %8, %6*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
atl1_inc_smb_0_19_reg <= atl1_inc_smb_0_19;
if (reset == 1'b0 && ^(atl1_inc_smb_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_19_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %20 = add i32 %19, %10*/
begin
atl1_inc_smb_0_20 = (atl1_inc_smb_0_19_reg + atl1_inc_smb_0_10);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %20 = add i32 %19, %10*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
atl1_inc_smb_0_20_reg <= atl1_inc_smb_0_20;
if (reset == 1'b0 && ^(atl1_inc_smb_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_20_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %21 = add i32 %20, %12*/
begin
atl1_inc_smb_0_21 = (atl1_inc_smb_0_20 + atl1_inc_smb_0_12);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %21 = add i32 %20, %12*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
atl1_inc_smb_0_21_reg <= atl1_inc_smb_0_21;
if (reset == 1'b0 && ^(atl1_inc_smb_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_21_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %22 = add i32 %21, %14*/
begin
atl1_inc_smb_0_22 = (atl1_inc_smb_0_21_reg + atl1_inc_smb_0_14);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %22 = add i32 %21, %14*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
atl1_inc_smb_0_22_reg <= atl1_inc_smb_0_22;
if (reset == 1'b0 && ^(atl1_inc_smb_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_22_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %23 = add i32 %22, %16*/
begin
atl1_inc_smb_0_23 = (atl1_inc_smb_0_22 + atl1_inc_smb_0_16);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %23 = add i32 %22, %16*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
atl1_inc_smb_0_23_reg <= atl1_inc_smb_0_23;
if (reset == 1'b0 && ^(atl1_inc_smb_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_23_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %24 = add i32 %23, %18*/
begin
atl1_inc_smb_0_24 = (atl1_inc_smb_0_23_reg + atl1_inc_smb_0_18);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %24 = add i32 %23, %18*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
atl1_inc_smb_0_24_reg <= atl1_inc_smb_0_24;
if (reset == 1'b0 && ^(atl1_inc_smb_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_24_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %25 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 3*/
begin
atl1_inc_smb_0_25 = (atl1_inc_smb_0_4 + 12);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %25 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_25_reg <= atl1_inc_smb_0_25;
if (reset == 1'b0 && ^(atl1_inc_smb_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_25_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_26 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
atl1_inc_smb_0_26_reg <= atl1_inc_smb_0_26;
if (reset == 1'b0 && ^(atl1_inc_smb_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_26_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %27 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 7*/
begin
atl1_inc_smb_0_27 = (atl1_inc_smb_0_4 + 28);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %27 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 7*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_27_reg <= atl1_inc_smb_0_27;
if (reset == 1'b0 && ^(atl1_inc_smb_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_27_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
atl1_inc_smb_0_28_reg <= atl1_inc_smb_0_28;
if (reset == 1'b0 && ^(atl1_inc_smb_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_28_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %29 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 2*/
begin
atl1_inc_smb_0_29 = (atl1_inc_smb_0_4 + 8);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %29 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 2*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_29_reg <= atl1_inc_smb_0_29;
if (reset == 1'b0 && ^(atl1_inc_smb_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_29_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
atl1_inc_smb_0_30_reg <= atl1_inc_smb_0_30;
if (reset == 1'b0 && ^(atl1_inc_smb_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_30_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %31 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 1*/
begin
atl1_inc_smb_0_31 = (atl1_inc_smb_0_4 + 4);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %31 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 1*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_31_reg <= atl1_inc_smb_0_31;
if (reset == 1'b0 && ^(atl1_inc_smb_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_31_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10))
begin
atl1_inc_smb_0_32_reg <= atl1_inc_smb_0_32;
if (reset == 1'b0 && ^(atl1_inc_smb_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_32_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %33 = add i32 %28, %26*/
begin
atl1_inc_smb_0_33 = (atl1_inc_smb_0_28 + atl1_inc_smb_0_26_reg);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %33 = add i32 %28, %26*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
atl1_inc_smb_0_33_reg <= atl1_inc_smb_0_33;
if (reset == 1'b0 && ^(atl1_inc_smb_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_33_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %34 = add i32 %33, %30*/
begin
atl1_inc_smb_0_34 = (atl1_inc_smb_0_33 + atl1_inc_smb_0_30);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %34 = add i32 %33, %30*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
atl1_inc_smb_0_34_reg <= atl1_inc_smb_0_34;
if (reset == 1'b0 && ^(atl1_inc_smb_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_34_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %35 = add i32 %34, %32*/
begin
atl1_inc_smb_0_35 = (atl1_inc_smb_0_34_reg + atl1_inc_smb_0_32);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %35 = add i32 %34, %32*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10))
begin
atl1_inc_smb_0_35_reg <= atl1_inc_smb_0_35;
if (reset == 1'b0 && ^(atl1_inc_smb_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_35_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %36 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 19*/
begin
atl1_inc_smb_0_36 = (atl1_inc_smb_0_4 + 76);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %36 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 19*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_36_reg <= atl1_inc_smb_0_36;
if (reset == 1'b0 && ^(atl1_inc_smb_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_36_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_37 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10))
begin
atl1_inc_smb_0_37_reg <= atl1_inc_smb_0_37;
if (reset == 1'b0 && ^(atl1_inc_smb_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_37_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %38 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 1*/
begin
atl1_inc_smb_0_38 = (arg_adapter + 4);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %38 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_38_reg <= atl1_inc_smb_0_38;
if (reset == 1'b0 && ^(atl1_inc_smb_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_38_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
atl1_inc_smb_0_39_reg <= atl1_inc_smb_0_39;
if (reset == 1'b0 && ^(atl1_inc_smb_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_39_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %40 = add i32 %37, %24*/
begin
atl1_inc_smb_0_40 = (atl1_inc_smb_0_37 + atl1_inc_smb_0_24_reg);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %40 = add i32 %37, %24*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_10))
begin
atl1_inc_smb_0_40_reg <= atl1_inc_smb_0_40;
if (reset == 1'b0 && ^(atl1_inc_smb_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_40_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %41 = add i32 %40, %39*/
begin
atl1_inc_smb_0_41 = (atl1_inc_smb_0_40_reg + atl1_inc_smb_0_39);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %41 = add i32 %40, %39*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
atl1_inc_smb_0_41_reg <= atl1_inc_smb_0_41;
if (reset == 1'b0 && ^(atl1_inc_smb_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_41_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %42 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 18*/
begin
atl1_inc_smb_0_42 = (atl1_inc_smb_0_4 + 72);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %42 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 18*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_42_reg <= atl1_inc_smb_0_42;
if (reset == 1'b0 && ^(atl1_inc_smb_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_42_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
atl1_inc_smb_0_43_reg <= atl1_inc_smb_0_43;
if (reset == 1'b0 && ^(atl1_inc_smb_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_43_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %44 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 0*/
begin
atl1_inc_smb_0_44 = arg_adapter;
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %44 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_44_reg <= atl1_inc_smb_0_44;
if (reset == 1'b0 && ^(atl1_inc_smb_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_44_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
atl1_inc_smb_0_45_reg <= atl1_inc_smb_0_45;
if (reset == 1'b0 && ^(atl1_inc_smb_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_45_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %46 = add i32 %43, %35*/
begin
atl1_inc_smb_0_46 = (atl1_inc_smb_0_43 + atl1_inc_smb_0_35_reg);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %46 = add i32 %43, %35*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
atl1_inc_smb_0_46_reg <= atl1_inc_smb_0_46;
if (reset == 1'b0 && ^(atl1_inc_smb_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_46_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %47 = add i32 %46, %45*/
begin
atl1_inc_smb_0_47 = (atl1_inc_smb_0_46 + atl1_inc_smb_0_45);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %47 = add i32 %46, %45*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
atl1_inc_smb_0_47_reg <= atl1_inc_smb_0_47;
if (reset == 1'b0 && ^(atl1_inc_smb_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_47_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %48 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 17*/
begin
atl1_inc_smb_0_48 = (atl1_inc_smb_0_4 + 68);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %48 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 17*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_48_reg <= atl1_inc_smb_0_48;
if (reset == 1'b0 && ^(atl1_inc_smb_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_48_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_49 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
atl1_inc_smb_0_49_reg <= atl1_inc_smb_0_49;
if (reset == 1'b0 && ^(atl1_inc_smb_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_49_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %50 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 16*/
begin
atl1_inc_smb_0_50 = (arg_adapter + 64);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %50 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 16*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_50_reg <= atl1_inc_smb_0_50;
if (reset == 1'b0 && ^(atl1_inc_smb_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_50_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
atl1_inc_smb_0_51_reg <= atl1_inc_smb_0_51;
if (reset == 1'b0 && ^(atl1_inc_smb_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_51_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %52 = add nsw i32 %51, %49*/
begin
atl1_inc_smb_0_52 = (atl1_inc_smb_0_51 + atl1_inc_smb_0_49);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %52 = add nsw i32 %51, %49*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
atl1_inc_smb_0_52_reg <= atl1_inc_smb_0_52;
if (reset == 1'b0 && ^(atl1_inc_smb_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_52_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %53 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 16*/
begin
atl1_inc_smb_0_53 = (atl1_inc_smb_0_4 + 64);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %53 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 16*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_53_reg <= atl1_inc_smb_0_53;
if (reset == 1'b0 && ^(atl1_inc_smb_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_53_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
atl1_inc_smb_0_54_reg <= atl1_inc_smb_0_54;
if (reset == 1'b0 && ^(atl1_inc_smb_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_54_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %55 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 15*/
begin
atl1_inc_smb_0_55 = (arg_adapter + 60);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %55 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 15*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_55_reg <= atl1_inc_smb_0_55;
if (reset == 1'b0 && ^(atl1_inc_smb_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_55_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
atl1_inc_smb_0_56_reg <= atl1_inc_smb_0_56;
if (reset == 1'b0 && ^(atl1_inc_smb_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_56_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %57 = add nsw i32 %56, %54*/
begin
atl1_inc_smb_0_57 = (atl1_inc_smb_0_56 + atl1_inc_smb_0_54);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %57 = add nsw i32 %56, %54*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
atl1_inc_smb_0_57_reg <= atl1_inc_smb_0_57;
if (reset == 1'b0 && ^(atl1_inc_smb_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_57_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %58 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 15*/
begin
atl1_inc_smb_0_58 = (atl1_inc_smb_0_4 + 60);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %58 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 15*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_58_reg <= atl1_inc_smb_0_58;
if (reset == 1'b0 && ^(atl1_inc_smb_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_58_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
atl1_inc_smb_0_59_reg <= atl1_inc_smb_0_59;
if (reset == 1'b0 && ^(atl1_inc_smb_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_59_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %60 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 14*/
begin
atl1_inc_smb_0_60 = (arg_adapter + 56);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %60 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 14*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_60_reg <= atl1_inc_smb_0_60;
if (reset == 1'b0 && ^(atl1_inc_smb_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_60_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
atl1_inc_smb_0_61_reg <= atl1_inc_smb_0_61;
if (reset == 1'b0 && ^(atl1_inc_smb_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_61_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %62 = add nsw i32 %61, %59*/
begin
atl1_inc_smb_0_62 = (atl1_inc_smb_0_61 + atl1_inc_smb_0_59);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %62 = add nsw i32 %61, %59*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
atl1_inc_smb_0_62_reg <= atl1_inc_smb_0_62;
if (reset == 1'b0 && ^(atl1_inc_smb_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_62_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %63 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 5*/
begin
atl1_inc_smb_0_63 = (atl1_inc_smb_0_4 + 20);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %63 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 5*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_63_reg <= atl1_inc_smb_0_63;
if (reset == 1'b0 && ^(atl1_inc_smb_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_63_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_64 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
atl1_inc_smb_0_64_reg <= atl1_inc_smb_0_64;
if (reset == 1'b0 && ^(atl1_inc_smb_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_64_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %65 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 4*/
begin
atl1_inc_smb_0_65 = (atl1_inc_smb_0_4 + 16);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %65 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 4*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_65_reg <= atl1_inc_smb_0_65;
if (reset == 1'b0 && ^(atl1_inc_smb_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_65_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
atl1_inc_smb_0_66_reg <= atl1_inc_smb_0_66;
if (reset == 1'b0 && ^(atl1_inc_smb_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_66_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_67 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27))
begin
atl1_inc_smb_0_67_reg <= atl1_inc_smb_0_67;
if (reset == 1'b0 && ^(atl1_inc_smb_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_67_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_68 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27))
begin
atl1_inc_smb_0_68_reg <= atl1_inc_smb_0_68;
if (reset == 1'b0 && ^(atl1_inc_smb_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_68_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %69 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 13*/
begin
atl1_inc_smb_0_69 = (arg_adapter + 52);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %69 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 13*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_69_reg <= atl1_inc_smb_0_69;
if (reset == 1'b0 && ^(atl1_inc_smb_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_69_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_70 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
atl1_inc_smb_0_70_reg <= atl1_inc_smb_0_70;
if (reset == 1'b0 && ^(atl1_inc_smb_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_70_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %71 = add i32 %66, %64*/
begin
atl1_inc_smb_0_71 = (atl1_inc_smb_0_66 + atl1_inc_smb_0_64);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %71 = add i32 %66, %64*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
atl1_inc_smb_0_71_reg <= atl1_inc_smb_0_71;
if (reset == 1'b0 && ^(atl1_inc_smb_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_71_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %72 = add i32 %71, %67*/
begin
atl1_inc_smb_0_72 = (atl1_inc_smb_0_71_reg + atl1_inc_smb_0_67);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %72 = add i32 %71, %67*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27))
begin
atl1_inc_smb_0_72_reg <= atl1_inc_smb_0_72;
if (reset == 1'b0 && ^(atl1_inc_smb_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_72_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %73 = add i32 %72, %68*/
begin
atl1_inc_smb_0_73 = (atl1_inc_smb_0_72 + atl1_inc_smb_0_68);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %73 = add i32 %72, %68*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_27))
begin
atl1_inc_smb_0_73_reg <= atl1_inc_smb_0_73;
if (reset == 1'b0 && ^(atl1_inc_smb_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_73_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %74 = add i32 %73, %70*/
begin
atl1_inc_smb_0_74 = (atl1_inc_smb_0_73_reg + atl1_inc_smb_0_70);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %74 = add i32 %73, %70*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
atl1_inc_smb_0_74_reg <= atl1_inc_smb_0_74;
if (reset == 1'b0 && ^(atl1_inc_smb_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_74_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %75 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 12*/
begin
atl1_inc_smb_0_75 = (arg_adapter + 48);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %75 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 12*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_75_reg <= atl1_inc_smb_0_75;
if (reset == 1'b0 && ^(atl1_inc_smb_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_75_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_76 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
atl1_inc_smb_0_76_reg <= atl1_inc_smb_0_76;
if (reset == 1'b0 && ^(atl1_inc_smb_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_76_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %77 = add nsw i32 %76, %24*/
begin
atl1_inc_smb_0_77 = (atl1_inc_smb_0_76 + atl1_inc_smb_0_24_reg);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %77 = add nsw i32 %76, %24*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
atl1_inc_smb_0_77_reg <= atl1_inc_smb_0_77;
if (reset == 1'b0 && ^(atl1_inc_smb_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_77_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_78 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
atl1_inc_smb_0_78_reg <= atl1_inc_smb_0_78;
if (reset == 1'b0 && ^(atl1_inc_smb_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_78_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %79 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 8*/
begin
atl1_inc_smb_0_79 = (arg_adapter + 32);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %79 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 8*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_79_reg <= atl1_inc_smb_0_79;
if (reset == 1'b0 && ^(atl1_inc_smb_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_79_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
atl1_inc_smb_0_80_reg <= atl1_inc_smb_0_80;
if (reset == 1'b0 && ^(atl1_inc_smb_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_80_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %81 = add nsw i32 %80, %78*/
begin
atl1_inc_smb_0_81 = (atl1_inc_smb_0_80 + atl1_inc_smb_0_78);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %81 = add nsw i32 %80, %78*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
atl1_inc_smb_0_81_reg <= atl1_inc_smb_0_81;
if (reset == 1'b0 && ^(atl1_inc_smb_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_81_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_82 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
atl1_inc_smb_0_82_reg <= atl1_inc_smb_0_82;
if (reset == 1'b0 && ^(atl1_inc_smb_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_82_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %83 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 11*/
begin
atl1_inc_smb_0_83 = (arg_adapter + 44);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %83 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 11*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_83_reg <= atl1_inc_smb_0_83;
if (reset == 1'b0 && ^(atl1_inc_smb_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_83_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_84 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
atl1_inc_smb_0_84_reg <= atl1_inc_smb_0_84;
if (reset == 1'b0 && ^(atl1_inc_smb_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_84_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %85 = add nsw i32 %84, %82*/
begin
atl1_inc_smb_0_85 = (atl1_inc_smb_0_84 + atl1_inc_smb_0_82);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %85 = add nsw i32 %84, %82*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
atl1_inc_smb_0_85_reg <= atl1_inc_smb_0_85;
if (reset == 1'b0 && ^(atl1_inc_smb_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_85_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_86 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
atl1_inc_smb_0_86_reg <= atl1_inc_smb_0_86;
if (reset == 1'b0 && ^(atl1_inc_smb_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_86_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %87 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 10*/
begin
atl1_inc_smb_0_87 = (arg_adapter + 40);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %87 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 10*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_87_reg <= atl1_inc_smb_0_87;
if (reset == 1'b0 && ^(atl1_inc_smb_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_87_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_88 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
atl1_inc_smb_0_88_reg <= atl1_inc_smb_0_88;
if (reset == 1'b0 && ^(atl1_inc_smb_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_88_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %89 = add nsw i32 %88, %86*/
begin
atl1_inc_smb_0_89 = (atl1_inc_smb_0_88 + atl1_inc_smb_0_86);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %89 = add nsw i32 %88, %86*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
atl1_inc_smb_0_89_reg <= atl1_inc_smb_0_89;
if (reset == 1'b0 && ^(atl1_inc_smb_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_89_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_90 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
atl1_inc_smb_0_90_reg <= atl1_inc_smb_0_90;
if (reset == 1'b0 && ^(atl1_inc_smb_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_90_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %91 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 9*/
begin
atl1_inc_smb_0_91 = (arg_adapter + 36);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %91 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 9*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_91_reg <= atl1_inc_smb_0_91;
if (reset == 1'b0 && ^(atl1_inc_smb_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_91_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
atl1_inc_smb_0_92_reg <= atl1_inc_smb_0_92;
if (reset == 1'b0 && ^(atl1_inc_smb_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_92_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %93 = add nsw i32 %92, %90*/
begin
atl1_inc_smb_0_93 = (atl1_inc_smb_0_92 + atl1_inc_smb_0_90);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %93 = add nsw i32 %92, %90*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
atl1_inc_smb_0_93_reg <= atl1_inc_smb_0_93;
if (reset == 1'b0 && ^(atl1_inc_smb_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_93_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %94 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 10*/
begin
atl1_inc_smb_0_94 = (atl1_inc_smb_0_4 + 40);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %94 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 10*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_94_reg <= atl1_inc_smb_0_94;
if (reset == 1'b0 && ^(atl1_inc_smb_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_94_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_95 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
atl1_inc_smb_0_95_reg <= atl1_inc_smb_0_95;
if (reset == 1'b0 && ^(atl1_inc_smb_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_95_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %96 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 26*/
begin
atl1_inc_smb_0_96 = (arg_adapter + 104);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %96 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 26*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_96_reg <= atl1_inc_smb_0_96;
if (reset == 1'b0 && ^(atl1_inc_smb_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_96_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
atl1_inc_smb_0_97_reg <= atl1_inc_smb_0_97;
if (reset == 1'b0 && ^(atl1_inc_smb_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_97_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %98 = add nsw i32 %97, %95*/
begin
atl1_inc_smb_0_98 = (atl1_inc_smb_0_97 + atl1_inc_smb_0_95);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %98 = add nsw i32 %97, %95*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
atl1_inc_smb_0_98_reg <= atl1_inc_smb_0_98;
if (reset == 1'b0 && ^(atl1_inc_smb_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_98_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_99 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
atl1_inc_smb_0_99_reg <= atl1_inc_smb_0_99;
if (reset == 1'b0 && ^(atl1_inc_smb_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_99_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %100 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 7*/
begin
atl1_inc_smb_0_100 = (arg_adapter + 28);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %100 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 7*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_100_reg <= atl1_inc_smb_0_100;
if (reset == 1'b0 && ^(atl1_inc_smb_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_100_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_101 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
atl1_inc_smb_0_101_reg <= atl1_inc_smb_0_101;
if (reset == 1'b0 && ^(atl1_inc_smb_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_101_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %102 = add nsw i32 %101, %99*/
begin
atl1_inc_smb_0_102 = (atl1_inc_smb_0_101 + atl1_inc_smb_0_99);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %102 = add nsw i32 %101, %99*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
atl1_inc_smb_0_102_reg <= atl1_inc_smb_0_102;
if (reset == 1'b0 && ^(atl1_inc_smb_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_102_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_103 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
atl1_inc_smb_0_103_reg <= atl1_inc_smb_0_103;
if (reset == 1'b0 && ^(atl1_inc_smb_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_103_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %104 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 25*/
begin
atl1_inc_smb_0_104 = (arg_adapter + 100);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %104 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 25*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_104_reg <= atl1_inc_smb_0_104;
if (reset == 1'b0 && ^(atl1_inc_smb_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_104_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_105 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
atl1_inc_smb_0_105_reg <= atl1_inc_smb_0_105;
if (reset == 1'b0 && ^(atl1_inc_smb_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_105_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %106 = add nsw i32 %105, %103*/
begin
atl1_inc_smb_0_106 = (atl1_inc_smb_0_105 + atl1_inc_smb_0_103);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %106 = add nsw i32 %105, %103*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
atl1_inc_smb_0_106_reg <= atl1_inc_smb_0_106;
if (reset == 1'b0 && ^(atl1_inc_smb_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_106_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %107 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 6*/
begin
atl1_inc_smb_0_107 = (arg_adapter + 24);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %107 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 6*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_107_reg <= atl1_inc_smb_0_107;
if (reset == 1'b0 && ^(atl1_inc_smb_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_107_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_108 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
atl1_inc_smb_0_108_reg <= atl1_inc_smb_0_108;
if (reset == 1'b0 && ^(atl1_inc_smb_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_108_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %109 = add nsw i32 %108, %35*/
begin
atl1_inc_smb_0_109 = (atl1_inc_smb_0_108 + atl1_inc_smb_0_35_reg);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %109 = add nsw i32 %108, %35*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
atl1_inc_smb_0_109_reg <= atl1_inc_smb_0_109;
if (reset == 1'b0 && ^(atl1_inc_smb_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_109_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_110 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
atl1_inc_smb_0_110_reg <= atl1_inc_smb_0_110;
if (reset == 1'b0 && ^(atl1_inc_smb_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_110_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %111 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 5*/
begin
atl1_inc_smb_0_111 = (arg_adapter + 20);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %111 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 5*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_111_reg <= atl1_inc_smb_0_111;
if (reset == 1'b0 && ^(atl1_inc_smb_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_111_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_112 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
atl1_inc_smb_0_112_reg <= atl1_inc_smb_0_112;
if (reset == 1'b0 && ^(atl1_inc_smb_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_112_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %113 = add nsw i32 %112, %110*/
begin
atl1_inc_smb_0_113 = (atl1_inc_smb_0_112 + atl1_inc_smb_0_110);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %113 = add nsw i32 %112, %110*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
atl1_inc_smb_0_113_reg <= atl1_inc_smb_0_113;
if (reset == 1'b0 && ^(atl1_inc_smb_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_113_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_114 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
atl1_inc_smb_0_114_reg <= atl1_inc_smb_0_114;
if (reset == 1'b0 && ^(atl1_inc_smb_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_114_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %115 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 4*/
begin
atl1_inc_smb_0_115 = (arg_adapter + 16);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %115 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 4*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_115_reg <= atl1_inc_smb_0_115;
if (reset == 1'b0 && ^(atl1_inc_smb_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_115_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_116 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
atl1_inc_smb_0_116_reg <= atl1_inc_smb_0_116;
if (reset == 1'b0 && ^(atl1_inc_smb_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_116_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %117 = add nsw i32 %116, %114*/
begin
atl1_inc_smb_0_117 = (atl1_inc_smb_0_116 + atl1_inc_smb_0_114);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %117 = add nsw i32 %116, %114*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
atl1_inc_smb_0_117_reg <= atl1_inc_smb_0_117;
if (reset == 1'b0 && ^(atl1_inc_smb_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_117_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_118 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
atl1_inc_smb_0_118_reg <= atl1_inc_smb_0_118;
if (reset == 1'b0 && ^(atl1_inc_smb_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_118_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %119 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 3*/
begin
atl1_inc_smb_0_119 = (arg_adapter + 12);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %119 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_119_reg <= atl1_inc_smb_0_119;
if (reset == 1'b0 && ^(atl1_inc_smb_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_119_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_120 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
atl1_inc_smb_0_120_reg <= atl1_inc_smb_0_120;
if (reset == 1'b0 && ^(atl1_inc_smb_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_120_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %121 = add nsw i32 %120, %118*/
begin
atl1_inc_smb_0_121 = (atl1_inc_smb_0_120 + atl1_inc_smb_0_118);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %121 = add nsw i32 %120, %118*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
atl1_inc_smb_0_121_reg <= atl1_inc_smb_0_121;
if (reset == 1'b0 && ^(atl1_inc_smb_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_121_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_122 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
atl1_inc_smb_0_122_reg <= atl1_inc_smb_0_122;
if (reset == 1'b0 && ^(atl1_inc_smb_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_122_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %123 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 24*/
begin
atl1_inc_smb_0_123 = (arg_adapter + 96);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %123 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 24*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_123_reg <= atl1_inc_smb_0_123;
if (reset == 1'b0 && ^(atl1_inc_smb_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_123_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_124 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
atl1_inc_smb_0_124_reg <= atl1_inc_smb_0_124;
if (reset == 1'b0 && ^(atl1_inc_smb_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_124_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %125 = add nsw i32 %124, %122*/
begin
atl1_inc_smb_0_125 = (atl1_inc_smb_0_124 + atl1_inc_smb_0_122);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %125 = add nsw i32 %124, %122*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
atl1_inc_smb_0_125_reg <= atl1_inc_smb_0_125;
if (reset == 1'b0 && ^(atl1_inc_smb_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_125_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %126 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 6*/
begin
atl1_inc_smb_0_126 = (atl1_inc_smb_0_4 + 24);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %126 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 6*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_126_reg <= atl1_inc_smb_0_126;
if (reset == 1'b0 && ^(atl1_inc_smb_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_126_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_127 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
atl1_inc_smb_0_127_reg <= atl1_inc_smb_0_127;
if (reset == 1'b0 && ^(atl1_inc_smb_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_127_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %128 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 23*/
begin
atl1_inc_smb_0_128 = (arg_adapter + 92);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %128 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 23*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_128_reg <= atl1_inc_smb_0_128;
if (reset == 1'b0 && ^(atl1_inc_smb_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_128_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_129 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
atl1_inc_smb_0_129_reg <= atl1_inc_smb_0_129;
if (reset == 1'b0 && ^(atl1_inc_smb_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_129_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %130 = add nsw i32 %129, %127*/
begin
atl1_inc_smb_0_130 = (atl1_inc_smb_0_129 + atl1_inc_smb_0_127);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %130 = add nsw i32 %129, %127*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
atl1_inc_smb_0_130_reg <= atl1_inc_smb_0_130;
if (reset == 1'b0 && ^(atl1_inc_smb_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_130_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_131 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
atl1_inc_smb_0_131_reg <= atl1_inc_smb_0_131;
if (reset == 1'b0 && ^(atl1_inc_smb_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_131_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %132 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 22*/
begin
atl1_inc_smb_0_132 = (arg_adapter + 88);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %132 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 22*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_132_reg <= atl1_inc_smb_0_132;
if (reset == 1'b0 && ^(atl1_inc_smb_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_132_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_133 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
atl1_inc_smb_0_133_reg <= atl1_inc_smb_0_133;
if (reset == 1'b0 && ^(atl1_inc_smb_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_133_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %134 = add nsw i32 %133, %131*/
begin
atl1_inc_smb_0_134 = (atl1_inc_smb_0_133 + atl1_inc_smb_0_131);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %134 = add nsw i32 %133, %131*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
atl1_inc_smb_0_134_reg <= atl1_inc_smb_0_134;
if (reset == 1'b0 && ^(atl1_inc_smb_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_134_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_135 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
atl1_inc_smb_0_135_reg <= atl1_inc_smb_0_135;
if (reset == 1'b0 && ^(atl1_inc_smb_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_135_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %136 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 21*/
begin
atl1_inc_smb_0_136 = (arg_adapter + 84);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %136 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 21*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_136_reg <= atl1_inc_smb_0_136;
if (reset == 1'b0 && ^(atl1_inc_smb_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_136_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_137 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
atl1_inc_smb_0_137_reg <= atl1_inc_smb_0_137;
if (reset == 1'b0 && ^(atl1_inc_smb_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_137_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %138 = add nsw i32 %137, %135*/
begin
atl1_inc_smb_0_138 = (atl1_inc_smb_0_137 + atl1_inc_smb_0_135);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %138 = add nsw i32 %137, %135*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
atl1_inc_smb_0_138_reg <= atl1_inc_smb_0_138;
if (reset == 1'b0 && ^(atl1_inc_smb_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_138_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_139 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
atl1_inc_smb_0_139_reg <= atl1_inc_smb_0_139;
if (reset == 1'b0 && ^(atl1_inc_smb_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_139_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %140 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 20*/
begin
atl1_inc_smb_0_140 = (arg_adapter + 80);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %140 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 20*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_140_reg <= atl1_inc_smb_0_140;
if (reset == 1'b0 && ^(atl1_inc_smb_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_140_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_141 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
atl1_inc_smb_0_141_reg <= atl1_inc_smb_0_141;
if (reset == 1'b0 && ^(atl1_inc_smb_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_141_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %142 = add nsw i32 %141, %139*/
begin
atl1_inc_smb_0_142 = (atl1_inc_smb_0_141 + atl1_inc_smb_0_139);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %142 = add nsw i32 %141, %139*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
atl1_inc_smb_0_142_reg <= atl1_inc_smb_0_142;
if (reset == 1'b0 && ^(atl1_inc_smb_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_142_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_143 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
atl1_inc_smb_0_143_reg <= atl1_inc_smb_0_143;
if (reset == 1'b0 && ^(atl1_inc_smb_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_143_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %144 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 19*/
begin
atl1_inc_smb_0_144 = (arg_adapter + 76);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %144 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 19*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_144_reg <= atl1_inc_smb_0_144;
if (reset == 1'b0 && ^(atl1_inc_smb_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_144_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_145 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
atl1_inc_smb_0_145_reg <= atl1_inc_smb_0_145;
if (reset == 1'b0 && ^(atl1_inc_smb_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_145_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %146 = add nsw i32 %145, %143*/
begin
atl1_inc_smb_0_146 = (atl1_inc_smb_0_145 + atl1_inc_smb_0_143);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %146 = add nsw i32 %145, %143*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
atl1_inc_smb_0_146_reg <= atl1_inc_smb_0_146;
if (reset == 1'b0 && ^(atl1_inc_smb_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_146_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
atl1_inc_smb_0_147_reg <= atl1_inc_smb_0_147;
if (reset == 1'b0 && ^(atl1_inc_smb_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_147_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %148 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 18*/
begin
atl1_inc_smb_0_148 = (arg_adapter + 72);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %148 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 18*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_148_reg <= atl1_inc_smb_0_148;
if (reset == 1'b0 && ^(atl1_inc_smb_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_148_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_149 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
atl1_inc_smb_0_149_reg <= atl1_inc_smb_0_149;
if (reset == 1'b0 && ^(atl1_inc_smb_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_149_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %150 = add nsw i32 %149, %147*/
begin
atl1_inc_smb_0_150 = (atl1_inc_smb_0_149 + atl1_inc_smb_0_147);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %150 = add nsw i32 %149, %147*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
atl1_inc_smb_0_150_reg <= atl1_inc_smb_0_150;
if (reset == 1'b0 && ^(atl1_inc_smb_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_150_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %151 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 0*/
begin
atl1_inc_smb_0_151 = atl1_inc_smb_0_4;
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %151 = getelementptr inbounds %struct.stats_msg_block* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
atl1_inc_smb_0_151_reg <= atl1_inc_smb_0_151;
if (reset == 1'b0 && ^(atl1_inc_smb_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_151_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_152 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
atl1_inc_smb_0_152_reg <= atl1_inc_smb_0_152;
if (reset == 1'b0 && ^(atl1_inc_smb_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_152_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %153 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 17*/
begin
atl1_inc_smb_0_153 = (arg_adapter + 68);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %153 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 17*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_153_reg <= atl1_inc_smb_0_153;
if (reset == 1'b0 && ^(atl1_inc_smb_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_153_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_154 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
atl1_inc_smb_0_154_reg <= atl1_inc_smb_0_154;
if (reset == 1'b0 && ^(atl1_inc_smb_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_154_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %155 = add nsw i32 %154, %152*/
begin
atl1_inc_smb_0_155 = (atl1_inc_smb_0_154 + atl1_inc_smb_0_152);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %155 = add nsw i32 %154, %152*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
atl1_inc_smb_0_155_reg <= atl1_inc_smb_0_155;
if (reset == 1'b0 && ^(atl1_inc_smb_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_155_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %156 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 16*/
begin
atl1_inc_smb_0_156 = (atl1_inc_smb_0_2 + 64);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %156 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 16*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_156_reg <= atl1_inc_smb_0_156;
if (reset == 1'b0 && ^(atl1_inc_smb_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_156_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_157 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
atl1_inc_smb_0_157_reg <= atl1_inc_smb_0_157;
if (reset == 1'b0 && ^(atl1_inc_smb_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_157_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %158 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 15*/
begin
atl1_inc_smb_0_158 = (atl1_inc_smb_0_2 + 60);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %158 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 15*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_158_reg <= atl1_inc_smb_0_158;
if (reset == 1'b0 && ^(atl1_inc_smb_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_158_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_159 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
atl1_inc_smb_0_159_reg <= atl1_inc_smb_0_159;
if (reset == 1'b0 && ^(atl1_inc_smb_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_159_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %160 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 14*/
begin
atl1_inc_smb_0_160 = (atl1_inc_smb_0_2 + 56);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %160 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 14*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_160_reg <= atl1_inc_smb_0_160;
if (reset == 1'b0 && ^(atl1_inc_smb_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_160_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_161 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
atl1_inc_smb_0_161_reg <= atl1_inc_smb_0_161;
if (reset == 1'b0 && ^(atl1_inc_smb_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_161_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %162 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 13*/
begin
atl1_inc_smb_0_162 = (atl1_inc_smb_0_2 + 52);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %162 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 13*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_162_reg <= atl1_inc_smb_0_162;
if (reset == 1'b0 && ^(atl1_inc_smb_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_162_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_163 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
atl1_inc_smb_0_163_reg <= atl1_inc_smb_0_163;
if (reset == 1'b0 && ^(atl1_inc_smb_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_163_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %164 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 12*/
begin
atl1_inc_smb_0_164 = (atl1_inc_smb_0_2 + 48);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %164 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 12*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_164_reg <= atl1_inc_smb_0_164;
if (reset == 1'b0 && ^(atl1_inc_smb_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_164_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_165 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
atl1_inc_smb_0_165_reg <= atl1_inc_smb_0_165;
if (reset == 1'b0 && ^(atl1_inc_smb_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_165_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %166 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 11*/
begin
atl1_inc_smb_0_166 = (atl1_inc_smb_0_2 + 44);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %166 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 11*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_166_reg <= atl1_inc_smb_0_166;
if (reset == 1'b0 && ^(atl1_inc_smb_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_166_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_167 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
atl1_inc_smb_0_167_reg <= atl1_inc_smb_0_167;
if (reset == 1'b0 && ^(atl1_inc_smb_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_167_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %168 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 10*/
begin
atl1_inc_smb_0_168 = (atl1_inc_smb_0_2 + 40);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %168 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 10*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_168_reg <= atl1_inc_smb_0_168;
if (reset == 1'b0 && ^(atl1_inc_smb_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_168_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_169 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
atl1_inc_smb_0_169_reg <= atl1_inc_smb_0_169;
if (reset == 1'b0 && ^(atl1_inc_smb_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_169_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %170 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 9*/
begin
atl1_inc_smb_0_170 = (atl1_inc_smb_0_2 + 36);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %170 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 9*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_170_reg <= atl1_inc_smb_0_170;
if (reset == 1'b0 && ^(atl1_inc_smb_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_170_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_171 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
atl1_inc_smb_0_171_reg <= atl1_inc_smb_0_171;
if (reset == 1'b0 && ^(atl1_inc_smb_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_171_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %172 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 8*/
begin
atl1_inc_smb_0_172 = (atl1_inc_smb_0_2 + 32);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %172 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 8*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_172_reg <= atl1_inc_smb_0_172;
if (reset == 1'b0 && ^(atl1_inc_smb_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_172_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_173 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
atl1_inc_smb_0_173_reg <= atl1_inc_smb_0_173;
if (reset == 1'b0 && ^(atl1_inc_smb_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_173_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %174 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 7*/
begin
atl1_inc_smb_0_174 = (atl1_inc_smb_0_2 + 28);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %174 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 7*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_174_reg <= atl1_inc_smb_0_174;
if (reset == 1'b0 && ^(atl1_inc_smb_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_174_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_175 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
atl1_inc_smb_0_175_reg <= atl1_inc_smb_0_175;
if (reset == 1'b0 && ^(atl1_inc_smb_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_175_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %176 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 6*/
begin
atl1_inc_smb_0_176 = (atl1_inc_smb_0_2 + 24);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %176 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 6*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_176_reg <= atl1_inc_smb_0_176;
if (reset == 1'b0 && ^(atl1_inc_smb_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_176_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_177 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
atl1_inc_smb_0_177_reg <= atl1_inc_smb_0_177;
if (reset == 1'b0 && ^(atl1_inc_smb_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_177_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %178 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 5*/
begin
atl1_inc_smb_0_178 = (atl1_inc_smb_0_2 + 20);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %178 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 5*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_178_reg <= atl1_inc_smb_0_178;
if (reset == 1'b0 && ^(atl1_inc_smb_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_178_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_179 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
atl1_inc_smb_0_179_reg <= atl1_inc_smb_0_179;
if (reset == 1'b0 && ^(atl1_inc_smb_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_179_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %180 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 4*/
begin
atl1_inc_smb_0_180 = (atl1_inc_smb_0_2 + 16);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %180 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 4*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_180_reg <= atl1_inc_smb_0_180;
if (reset == 1'b0 && ^(atl1_inc_smb_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_180_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_181 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
atl1_inc_smb_0_181_reg <= atl1_inc_smb_0_181;
if (reset == 1'b0 && ^(atl1_inc_smb_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_181_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %182 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 3*/
begin
atl1_inc_smb_0_182 = (atl1_inc_smb_0_2 + 12);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %182 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_182_reg <= atl1_inc_smb_0_182;
if (reset == 1'b0 && ^(atl1_inc_smb_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_182_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %183 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 2*/
begin
atl1_inc_smb_0_183 = (arg_adapter + 8);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %183 = getelementptr inbounds %struct.atl1_adapter* %adapter, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
atl1_inc_smb_0_183_reg <= atl1_inc_smb_0_183;
if (reset == 1'b0 && ^(atl1_inc_smb_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_183_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_184 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
atl1_inc_smb_0_184_reg <= atl1_inc_smb_0_184;
if (reset == 1'b0 && ^(atl1_inc_smb_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_184_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %185 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 2*/
begin
atl1_inc_smb_0_185 = (atl1_inc_smb_0_2 + 8);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %185 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_185_reg <= atl1_inc_smb_0_185;
if (reset == 1'b0 && ^(atl1_inc_smb_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_185_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_186 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
atl1_inc_smb_0_186_reg <= atl1_inc_smb_0_186;
if (reset == 1'b0 && ^(atl1_inc_smb_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_186_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %187 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 1*/
begin
atl1_inc_smb_0_187 = (atl1_inc_smb_0_2 + 4);
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %187 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_187_reg <= atl1_inc_smb_0_187;
if (reset == 1'b0 && ^(atl1_inc_smb_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_187_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
begin
atl1_inc_smb_0_188 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
atl1_inc_smb_0_188_reg <= atl1_inc_smb_0_188;
if (reset == 1'b0 && ^(atl1_inc_smb_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_188_reg"); $finish; end
end
end
always @(*) begin
/* atl1_inc_smb: %0*/
/*   %189 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 0*/
begin
atl1_inc_smb_0_189 = atl1_inc_smb_0_2;
end
end
always @(posedge clk) begin
/* atl1_inc_smb: %0*/
/*   %189 = getelementptr inbounds %struct.net_device* %2, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
atl1_inc_smb_0_189_reg <= atl1_inc_smb_0_189;
if (reset == 1'b0 && ^(atl1_inc_smb_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_0_189_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* atl1_inc_smb: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_133))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %74, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %89, i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %102, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %106, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %109, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %113, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %121, i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %138, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %142, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %146, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %157, i32* %158, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %161, i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %165, i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %169, i32* %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %177, i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %181, i32* %182, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
memory_controller_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %186, i32* %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
memory_controller_address_a = atl1_inc_smb_0_3;
end
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_address_a = atl1_inc_smb_0_5;
end
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_address_a = atl1_inc_smb_0_9_reg;
end
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_address_a = atl1_inc_smb_0_13_reg;
end
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_address_a = atl1_inc_smb_0_17_reg;
end
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_address_a = atl1_inc_smb_0_27_reg;
end
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_address_a = atl1_inc_smb_0_31_reg;
end
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_address_a = atl1_inc_smb_0_42_reg;
end
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_address_a = atl1_inc_smb_0_48_reg;
end
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_address_a = atl1_inc_smb_0_53_reg;
end
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_address_a = atl1_inc_smb_0_58_reg;
end
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_address_a = atl1_inc_smb_0_63_reg;
end
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_address_a = atl1_inc_smb_0_27_reg;
end
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_address_a = atl1_inc_smb_0_69_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %74, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_address_a = atl1_inc_smb_0_69_reg;
end
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_address_a = atl1_inc_smb_0_13_reg;
end
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_address_a = atl1_inc_smb_0_9_reg;
end
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_address_a = atl1_inc_smb_0_87_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %89, i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
memory_controller_address_a = atl1_inc_smb_0_87_reg;
end
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_address_a = atl1_inc_smb_0_17_reg;
end
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_address_a = atl1_inc_smb_0_94_reg;
end
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_address_a = atl1_inc_smb_0_100_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %102, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
memory_controller_address_a = atl1_inc_smb_0_100_reg;
end
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_address_a = atl1_inc_smb_0_104_reg;
end
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48))
begin
memory_controller_address_a = atl1_inc_smb_0_107_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %106, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
memory_controller_address_a = atl1_inc_smb_0_104_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %109, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
memory_controller_address_a = atl1_inc_smb_0_107_reg;
end
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_address_a = atl1_inc_smb_0_111_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %113, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
memory_controller_address_a = atl1_inc_smb_0_111_reg;
end
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_address_a = atl1_inc_smb_0_27_reg;
end
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_address_a = atl1_inc_smb_0_119_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %121, i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
memory_controller_address_a = atl1_inc_smb_0_119_reg;
end
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_address_a = atl1_inc_smb_0_27_reg;
end
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_address_a = atl1_inc_smb_0_126_reg;
end
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_address_a = atl1_inc_smb_0_63_reg;
end
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_address_a = atl1_inc_smb_0_136_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %138, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
memory_controller_address_a = atl1_inc_smb_0_136_reg;
end
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_address_a = atl1_inc_smb_0_140_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %142, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
memory_controller_address_a = atl1_inc_smb_0_140_reg;
end
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_address_a = atl1_inc_smb_0_144_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %146, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
memory_controller_address_a = atl1_inc_smb_0_144_reg;
end
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_address_a = atl1_inc_smb_0_31_reg;
end
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_address_a = atl1_inc_smb_0_151_reg;
end
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82))
begin
memory_controller_address_a = atl1_inc_smb_0_1_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %157, i32* %158, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
memory_controller_address_a = atl1_inc_smb_0_158_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
memory_controller_address_a = atl1_inc_smb_0_160_reg;
end
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91))
begin
memory_controller_address_a = atl1_inc_smb_0_69_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %161, i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
memory_controller_address_a = atl1_inc_smb_0_162_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %165, i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
memory_controller_address_a = atl1_inc_smb_0_166_reg;
end
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100))
begin
memory_controller_address_a = atl1_inc_smb_0_87_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %169, i32* %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
memory_controller_address_a = atl1_inc_smb_0_170_reg;
end
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109))
begin
memory_controller_address_a = atl1_inc_smb_0_100_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
memory_controller_address_a = atl1_inc_smb_0_174_reg;
end
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112))
begin
memory_controller_address_a = atl1_inc_smb_0_107_reg;
end
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115))
begin
memory_controller_address_a = atl1_inc_smb_0_111_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %177, i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
memory_controller_address_a = atl1_inc_smb_0_178_reg;
end
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121))
begin
memory_controller_address_a = atl1_inc_smb_0_119_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %181, i32* %182, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
memory_controller_address_a = atl1_inc_smb_0_182_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %186, i32* %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
memory_controller_address_a = atl1_inc_smb_0_187_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %74, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %89, i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %102, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %106, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %109, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %113, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %121, i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %138, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %142, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %146, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %157, i32* %158, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %161, i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %165, i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %169, i32* %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %177, i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121))
begin
memory_controller_write_enable_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %181, i32* %182, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
memory_controller_write_enable_a = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %186, i32* %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %74, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_in_a = atl1_inc_smb_0_74;
end
/* atl1_inc_smb: %0*/
/*   store i32 %89, i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
memory_controller_in_a = atl1_inc_smb_0_89;
end
/* atl1_inc_smb: %0*/
/*   store i32 %102, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
memory_controller_in_a = atl1_inc_smb_0_102;
end
/* atl1_inc_smb: %0*/
/*   store i32 %106, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
memory_controller_in_a = atl1_inc_smb_0_106;
end
/* atl1_inc_smb: %0*/
/*   store i32 %109, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
memory_controller_in_a = atl1_inc_smb_0_109;
end
/* atl1_inc_smb: %0*/
/*   store i32 %113, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
memory_controller_in_a = atl1_inc_smb_0_113;
end
/* atl1_inc_smb: %0*/
/*   store i32 %121, i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
memory_controller_in_a = atl1_inc_smb_0_121;
end
/* atl1_inc_smb: %0*/
/*   store i32 %138, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
memory_controller_in_a = atl1_inc_smb_0_138;
end
/* atl1_inc_smb: %0*/
/*   store i32 %142, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
memory_controller_in_a = atl1_inc_smb_0_142;
end
/* atl1_inc_smb: %0*/
/*   store i32 %146, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
memory_controller_in_a = atl1_inc_smb_0_146;
end
/* atl1_inc_smb: %0*/
/*   store i32 %157, i32* %158, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
memory_controller_in_a = atl1_inc_smb_0_157;
end
/* atl1_inc_smb: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
memory_controller_in_a = atl1_inc_smb_0_159;
end
/* atl1_inc_smb: %0*/
/*   store i32 %161, i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
memory_controller_in_a = atl1_inc_smb_0_161;
end
/* atl1_inc_smb: %0*/
/*   store i32 %165, i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
memory_controller_in_a = atl1_inc_smb_0_165;
end
/* atl1_inc_smb: %0*/
/*   store i32 %169, i32* %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
memory_controller_in_a = atl1_inc_smb_0_169;
end
/* atl1_inc_smb: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
memory_controller_in_a = atl1_inc_smb_0_173;
end
/* atl1_inc_smb: %0*/
/*   store i32 %177, i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
memory_controller_in_a = atl1_inc_smb_0_177;
end
/* atl1_inc_smb: %0*/
/*   store i32 %181, i32* %182, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
memory_controller_in_a = atl1_inc_smb_0_181;
end
/* atl1_inc_smb: %0*/
/*   store i32 %186, i32* %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
memory_controller_in_a = atl1_inc_smb_0_186;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %4 = load %struct.stats_msg_block** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %64 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %68 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %74, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %78 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %82 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %89, i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_37))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %90 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %95 = load i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %102, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_46))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_48))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %106, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_49))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %109, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_50))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %113, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_53))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %114 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %120 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %121, i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_59))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %122 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %127 = load i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %131 = load i32* %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %137 = load i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %138, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_71))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %141 = load i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %142, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_74))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %146, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_77))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %147 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %2 = load %struct.net_device** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_82))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %157, i32* %158, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_87))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_90))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %161 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_91))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %161, i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_93))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %165, i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_99))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %167 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_100))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %169, i32* %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_105))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %173 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_109))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_111))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %175 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_112))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %177 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_115))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %177, i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_117))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %181 = load i32* %119, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_121))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %181, i32* %182, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_123))
begin
memory_controller_size_a = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %186, i32* %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_129))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %41, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %47, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %57, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %62, i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %77, i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %81, i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %93, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %98, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %117, i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %125, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %130, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %134, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %150, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %155, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %163, i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %167, i32* %168, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %171, i32* %172, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %175, i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %184, i32* %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130))
begin
memory_controller_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %188, i32* %189, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_address_b = atl1_inc_smb_0_7;
end
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_address_b = atl1_inc_smb_0_11_reg;
end
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_address_b = atl1_inc_smb_0_15_reg;
end
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_address_b = atl1_inc_smb_0_25_reg;
end
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_address_b = atl1_inc_smb_0_29_reg;
end
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_address_b = atl1_inc_smb_0_36_reg;
end
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
memory_controller_address_b = atl1_inc_smb_0_38_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %41, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
memory_controller_address_b = atl1_inc_smb_0_38_reg;
end
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_address_b = atl1_inc_smb_0_44_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %47, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
memory_controller_address_b = atl1_inc_smb_0_44_reg;
end
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_address_b = atl1_inc_smb_0_50_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
memory_controller_address_b = atl1_inc_smb_0_50_reg;
end
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_address_b = atl1_inc_smb_0_55_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %57, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
memory_controller_address_b = atl1_inc_smb_0_55_reg;
end
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_address_b = atl1_inc_smb_0_60_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %62, i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
memory_controller_address_b = atl1_inc_smb_0_60_reg;
end
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_address_b = atl1_inc_smb_0_65_reg;
end
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_address_b = atl1_inc_smb_0_25_reg;
end
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_address_b = atl1_inc_smb_0_75_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %77, i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_address_b = atl1_inc_smb_0_75_reg;
end
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_address_b = atl1_inc_smb_0_79_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %81, i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
memory_controller_address_b = atl1_inc_smb_0_79_reg;
end
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_address_b = atl1_inc_smb_0_83_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
memory_controller_address_b = atl1_inc_smb_0_83_reg;
end
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_address_b = atl1_inc_smb_0_7_reg;
end
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_address_b = atl1_inc_smb_0_91_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %93, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
memory_controller_address_b = atl1_inc_smb_0_91_reg;
end
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_address_b = atl1_inc_smb_0_96_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %98, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
memory_controller_address_b = atl1_inc_smb_0_96_reg;
end
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_address_b = atl1_inc_smb_0_15_reg;
end
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_address_b = atl1_inc_smb_0_11_reg;
end
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_address_b = atl1_inc_smb_0_29_reg;
end
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_address_b = atl1_inc_smb_0_115_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %117, i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
memory_controller_address_b = atl1_inc_smb_0_115_reg;
end
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_address_b = atl1_inc_smb_0_25_reg;
end
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_address_b = atl1_inc_smb_0_123_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %125, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
memory_controller_address_b = atl1_inc_smb_0_123_reg;
end
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_address_b = atl1_inc_smb_0_128_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %130, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
memory_controller_address_b = atl1_inc_smb_0_128_reg;
end
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_address_b = atl1_inc_smb_0_132_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %134, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
memory_controller_address_b = atl1_inc_smb_0_132_reg;
end
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_address_b = atl1_inc_smb_0_65_reg;
end
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_address_b = atl1_inc_smb_0_25_reg;
end
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_address_b = atl1_inc_smb_0_29_reg;
end
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_address_b = atl1_inc_smb_0_148_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %150, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
memory_controller_address_b = atl1_inc_smb_0_148_reg;
end
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_address_b = atl1_inc_smb_0_153_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %155, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
memory_controller_address_b = atl1_inc_smb_0_153_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
memory_controller_address_b = atl1_inc_smb_0_156;
end
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85))
begin
memory_controller_address_b = atl1_inc_smb_0_55_reg;
end
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88))
begin
memory_controller_address_b = atl1_inc_smb_0_60_reg;
end
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94))
begin
memory_controller_address_b = atl1_inc_smb_0_75_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %163, i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
memory_controller_address_b = atl1_inc_smb_0_164_reg;
end
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97))
begin
memory_controller_address_b = atl1_inc_smb_0_83_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %167, i32* %168, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
memory_controller_address_b = atl1_inc_smb_0_168_reg;
end
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103))
begin
memory_controller_address_b = atl1_inc_smb_0_91_reg;
end
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106))
begin
memory_controller_address_b = atl1_inc_smb_0_79_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %171, i32* %172, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
memory_controller_address_b = atl1_inc_smb_0_172_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %175, i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
memory_controller_address_b = atl1_inc_smb_0_176_reg;
end
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118))
begin
memory_controller_address_b = atl1_inc_smb_0_115_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
memory_controller_address_b = atl1_inc_smb_0_180_reg;
end
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124))
begin
memory_controller_address_b = atl1_inc_smb_0_183_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %184, i32* %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
memory_controller_address_b = atl1_inc_smb_0_185_reg;
end
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127))
begin
memory_controller_address_b = atl1_inc_smb_0_38_reg;
end
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130))
begin
memory_controller_address_b = atl1_inc_smb_0_44_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %188, i32* %189, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
memory_controller_address_b = atl1_inc_smb_0_189_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %41, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %47, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %57, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %62, i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %77, i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %81, i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %93, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %98, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %117, i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %125, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %130, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %134, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %150, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %155, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %163, i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %167, i32* %168, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %171, i32* %172, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   store i32 %175, i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %184, i32* %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
memory_controller_write_enable_b = 1'd1;
end
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %188, i32* %189, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   store i32 %41, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
memory_controller_in_b = atl1_inc_smb_0_41;
end
/* atl1_inc_smb: %0*/
/*   store i32 %47, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
memory_controller_in_b = atl1_inc_smb_0_47;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
memory_controller_in_b = atl1_inc_smb_0_52;
end
/* atl1_inc_smb: %0*/
/*   store i32 %57, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
memory_controller_in_b = atl1_inc_smb_0_57;
end
/* atl1_inc_smb: %0*/
/*   store i32 %62, i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
memory_controller_in_b = atl1_inc_smb_0_62;
end
/* atl1_inc_smb: %0*/
/*   store i32 %77, i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_in_b = atl1_inc_smb_0_77;
end
/* atl1_inc_smb: %0*/
/*   store i32 %81, i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
memory_controller_in_b = atl1_inc_smb_0_81;
end
/* atl1_inc_smb: %0*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
memory_controller_in_b = atl1_inc_smb_0_85;
end
/* atl1_inc_smb: %0*/
/*   store i32 %93, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
memory_controller_in_b = atl1_inc_smb_0_93;
end
/* atl1_inc_smb: %0*/
/*   store i32 %98, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
memory_controller_in_b = atl1_inc_smb_0_98;
end
/* atl1_inc_smb: %0*/
/*   store i32 %117, i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
memory_controller_in_b = atl1_inc_smb_0_117;
end
/* atl1_inc_smb: %0*/
/*   store i32 %125, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
memory_controller_in_b = atl1_inc_smb_0_125;
end
/* atl1_inc_smb: %0*/
/*   store i32 %130, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
memory_controller_in_b = atl1_inc_smb_0_130;
end
/* atl1_inc_smb: %0*/
/*   store i32 %134, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
memory_controller_in_b = atl1_inc_smb_0_134;
end
/* atl1_inc_smb: %0*/
/*   store i32 %150, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
memory_controller_in_b = atl1_inc_smb_0_150;
end
/* atl1_inc_smb: %0*/
/*   store i32 %155, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
memory_controller_in_b = atl1_inc_smb_0_155;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
memory_controller_in_b = atl1_inc_smb_0_52_reg;
end
/* atl1_inc_smb: %0*/
/*   store i32 %163, i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
memory_controller_in_b = atl1_inc_smb_0_163;
end
/* atl1_inc_smb: %0*/
/*   store i32 %167, i32* %168, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
memory_controller_in_b = atl1_inc_smb_0_167;
end
/* atl1_inc_smb: %0*/
/*   store i32 %171, i32* %172, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
memory_controller_in_b = atl1_inc_smb_0_171;
end
/* atl1_inc_smb: %0*/
/*   store i32 %175, i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
memory_controller_in_b = atl1_inc_smb_0_175;
end
/* atl1_inc_smb: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
memory_controller_in_b = atl1_inc_smb_0_179;
end
/* atl1_inc_smb: %0*/
/*   store i32 %184, i32* %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
memory_controller_in_b = atl1_inc_smb_0_184;
end
/* atl1_inc_smb: %0*/
/*   store i32 %188, i32* %189, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
memory_controller_in_b = atl1_inc_smb_0_188;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* atl1_inc_smb: %0*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_7))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_8))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_9))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %41, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_11))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %45 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_12))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %47, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_14))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_15))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_17))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %57, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_20))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_21))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %62, i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_23))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_24))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %67 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_25))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_26))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %77, i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_28))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_29))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %81, i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_31))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_32))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_34))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %86 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_35))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %92 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_38))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %93, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_40))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_41))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %98, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_43))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %99 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_44))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %103 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_47))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %110 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_51))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_54))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %117, i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_56))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %118 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_57))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_60))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %125, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_62))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_63))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %130, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_65))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %133 = load i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_66))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %134, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_68))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %135 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_69))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %139 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_72))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %143 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_75))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %149 = load i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_78))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %150, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_80))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_81))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %155, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_83))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %52, i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_84))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %157 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_85))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %159 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_88))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %163 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_94))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %163, i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_96))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_97))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %167, i32* %168, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_102))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %169 = load i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_103))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %171 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_106))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %171, i32* %172, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_108))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %175, i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_114))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %179 = load i32* %115, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_118))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_120))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %184 = load i32* %183, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_124))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %184, i32* %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_126))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %186 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_127))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   %188 = load i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_130))
begin
memory_controller_size_b = 2'd2;
end
/* atl1_inc_smb: %0*/
/*   store i32 %188, i32* %189, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_atl1_inc_smb_BB_0_132))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  atl1_inc_smb_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_arg_adapter;
wire  atl1_inc_smb_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_memory_controller_address_a;
wire  atl1_inc_smb_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] atl1_inc_smb_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] atl1_inc_smb_memory_controller_out_a;
wire [1:0] atl1_inc_smb_memory_controller_size_a;
wire  atl1_inc_smb_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] atl1_inc_smb_memory_controller_address_b;
wire  atl1_inc_smb_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] atl1_inc_smb_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] atl1_inc_smb_memory_controller_out_b;
wire [1:0] atl1_inc_smb_memory_controller_size_b;
reg  atl1_inc_smb_memory_controller_waitrequest;
wire  atl1_inc_smb_finish;
reg  atl1_inc_smb_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


atl1_inc_smb atl1_inc_smb_inst (
	.memory_controller_enable_a (atl1_inc_smb_memory_controller_enable_a),
	.memory_controller_address_a (atl1_inc_smb_memory_controller_address_a),
	.memory_controller_write_enable_a (atl1_inc_smb_memory_controller_write_enable_a),
	.memory_controller_in_a (atl1_inc_smb_memory_controller_in_a),
	.memory_controller_size_a (atl1_inc_smb_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (atl1_inc_smb_memory_controller_enable_b),
	.memory_controller_address_b (atl1_inc_smb_memory_controller_address_b),
	.memory_controller_write_enable_b (atl1_inc_smb_memory_controller_write_enable_b),
	.memory_controller_in_b (atl1_inc_smb_memory_controller_in_b),
	.memory_controller_size_b (atl1_inc_smb_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (atl1_inc_smb_start),
	.finish (atl1_inc_smb_finish),
	.arg_adapter (atl1_inc_smb_arg_adapter)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (atl1_inc_smb_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (atl1_inc_smb_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
atl1_inc_smb_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_start"); $finish; end
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
atl1_inc_smb_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
atl1_inc_smb_arg_adapter <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to atl1_inc_smb_arg_adapter"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
begin
atl1_inc_smb_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
begin
atl1_inc_smb_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
atl1_inc_smb_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
atl1_inc_smb_finish_final = atl1_inc_smb_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = atl1_inc_smb_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = atl1_inc_smb_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = atl1_inc_smb_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = atl1_inc_smb_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = atl1_inc_smb_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = atl1_inc_smb_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = atl1_inc_smb_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = atl1_inc_smb_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = atl1_inc_smb_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = atl1_inc_smb_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = atl1_inc_smb_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = atl1_inc_smb_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = atl1_inc_smb_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = atl1_inc_smb_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = atl1_inc_smb_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = atl1_inc_smb_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = atl1_inc_smb_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = atl1_inc_smb_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = atl1_inc_smb_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @atl1_inc_smb(%struct.atl1_adapter* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = atl1_inc_smb_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
