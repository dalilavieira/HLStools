//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:23 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module imsttfb_check_var
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_var,
	arg_info
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_3_4 = 7'd4;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_3_5 = 7'd5;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_3_6 = 7'd6;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_9_7 = 7'd7;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_9_8 = 7'd8;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_9_9 = 7'd9;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_15_10 = 7'd10;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_15_11 = 7'd11;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_15_12 = 7'd12;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_19_13 = 7'd13;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_19_14 = 7'd14;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_19_15 = 7'd15;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_27_16 = 7'd16;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_27_17 = 7'd17;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_27_18 = 7'd18;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_31_19 = 7'd19;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_32_20 = 7'd20;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_32_21 = 7'd21;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_32_22 = 7'd22;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_32_23 = 7'd23;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_32_24 = 7'd24;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_41_25 = 7'd25;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_41_26 = 7'd26;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_41_27 = 7'd27;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB__thread_28 = 7'd28;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB__thread_29 = 7'd29;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_47_30 = 7'd30;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_47_31 = 7'd31;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_47_32 = 7'd32;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_51_33 = 7'd33;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_51_34 = 7'd34;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_51_35 = 7'd35;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_56_36 = 7'd36;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_56_37 = 7'd37;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_56_38 = 7'd38;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_56_39 = 7'd39;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_56_40 = 7'd40;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_65_41 = 7'd41;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_65_42 = 7'd42;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_65_43 = 7'd43;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_65_44 = 7'd44;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_65_45 = 7'd45;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_74_46 = 7'd46;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_47 = 7'd47;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_48 = 7'd48;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_49 = 7'd49;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_50 = 7'd50;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_51 = 7'd51;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_52 = 7'd52;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_53 = 7'd53;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_54 = 7'd54;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_55 = 7'd55;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_56 = 7'd56;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_57 = 7'd57;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_58 = 7'd58;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_59 = 7'd59;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_60 = 7'd60;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_61 = 7'd61;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_62 = 7'd62;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_63 = 7'd63;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_64 = 7'd64;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_65 = 7'd65;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_66 = 7'd66;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_67 = 7'd67;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_68 = 7'd68;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_69 = 7'd69;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_70 = 7'd70;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_71 = 7'd71;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_72 = 7'd72;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_73 = 7'd73;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_74 = 7'd74;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_75 = 7'd75;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_76 = 7'd76;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_77 = 7'd77;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_78 = 7'd78;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_79 = 7'd79;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_80 = 7'd80;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_81 = 7'd81;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_82 = 7'd82;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_83 = 7'd83;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_84 = 7'd84;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_85 = 7'd85;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_86 = 7'd86;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_87 = 7'd87;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_88 = 7'd88;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_89 = 7'd89;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_90 = 7'd90;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_91 = 7'd91;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_92 = 7'd92;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_93 = 7'd93;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_94 = 7'd94;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_95 = 7'd95;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_96 = 7'd96;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_97 = 7'd97;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_98 = 7'd98;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_99 = 7'd99;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_100 = 7'd100;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_101 = 7'd101;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_102 = 7'd102;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_103 = 7'd103;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_104 = 7'd104;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_105 = 7'd105;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_106 = 7'd106;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_107 = 7'd107;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_108 = 7'd108;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_109 = 7'd109;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_110 = 7'd110;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_111 = 7'd111;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_112 = 7'd112;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_113 = 7'd113;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_76_114 = 7'd114;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_82_115 = 7'd115;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_82_116 = 7'd116;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_117 = 7'd117;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_118 = 7'd118;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_119 = 7'd119;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_120 = 7'd120;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_121 = 7'd121;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_122 = 7'd122;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_123 = 7'd123;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_83_124 = 7'd124;
parameter [6:0] LEGUP_F_imsttfb_check_var_BB_96_125 = 7'd125;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_var;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_info;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_0_1_reg;
reg [31:0] imsttfb_check_var_0_2;
reg [31:0] imsttfb_check_var_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_3_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_3_4_reg;
reg [31:0] imsttfb_check_var_3_5;
reg [31:0] imsttfb_check_var_3_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_3_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_3_6_reg;
reg [31:0] imsttfb_check_var_3_7;
reg [31:0] imsttfb_check_var_3_7_reg;
reg  imsttfb_check_var_3_8;
reg  imsttfb_check_var_3_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_9_10_reg;
reg [31:0] imsttfb_check_var_9_11;
reg [31:0] imsttfb_check_var_9_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_9_12_reg;
reg [31:0] imsttfb_check_var_9_13;
reg [31:0] imsttfb_check_var_9_13_reg;
reg  imsttfb_check_var_9_14;
reg  imsttfb_check_var_9_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_15_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_15_16_reg;
reg [31:0] imsttfb_check_var_15_17;
reg [31:0] imsttfb_check_var_15_17_reg;
reg  imsttfb_check_var_15_18;
reg  imsttfb_check_var_15_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_19_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_19_20_reg;
reg [31:0] imsttfb_check_var_19_21;
reg [31:0] imsttfb_check_var_19_21_reg;
reg [31:0] imsttfb_check_var_19_22;
reg [31:0] imsttfb_check_var_19_22_reg;
reg [31:0] imsttfb_check_var_19_23;
reg [31:0] imsttfb_check_var_19_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_19_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_19_24_reg;
reg [31:0] imsttfb_check_var_19_25;
reg [31:0] imsttfb_check_var_19_25_reg;
reg  imsttfb_check_var_19_26;
reg  imsttfb_check_var_19_26_reg;
reg [31:0] imsttfb_check_var_27_28;
reg [31:0] imsttfb_check_var_27_28_reg;
reg [31:0] imsttfb_check_var_27_29;
reg [31:0] imsttfb_check_var_27_29_reg;
reg  imsttfb_check_var_27_30;
reg  imsttfb_check_var_27_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_32_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_41_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_41_42_reg;
reg [31:0] imsttfb_check_var_41_43;
reg [31:0] imsttfb_check_var_41_43_reg;
reg  imsttfb_check_var_41_44;
reg  imsttfb_check_var_41_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var__thread_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var__thread_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var__thread_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var__thread_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_47_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_51_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_56_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_65_73_reg;
reg  imsttfb_check_var_74_75;
reg  imsttfb_check_var_74_75_reg;
reg [31:0] imsttfb_check_var_76_77;
reg [31:0] imsttfb_check_var_76_77_reg;
reg [31:0] imsttfb_check_var_76_78;
reg [31:0] imsttfb_check_var_76_78_reg;
reg [31:0] imsttfb_check_var_76_79;
reg [31:0] imsttfb_check_var_76_79_reg;
reg [31:0] imsttfb_check_var_76_80;
reg [31:0] imsttfb_check_var_76_80_reg;
reg  imsttfb_check_var_76_81;
reg  imsttfb_check_var_76_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] imsttfb_check_var_83_95_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] imsttfb_check_var_signed_divide_32_0_op0;
reg [31:0] imsttfb_check_var_signed_divide_32_0_op1;
wire [31:0] lpm_divide_imsttfb_check_var_76_79_temp_out;
wire [31:0] imsttfb_check_var_76_79_unused;
reg  lpm_divide_imsttfb_check_var_76_79_en;
reg [31:0] lpm_divide_imsttfb_check_var_76_79_out;
reg [31:0] imsttfb_check_var_signed_divide_32_0;
reg  lpm_mult_imsttfb_check_var_19_22_en;
reg [31:0] imsttfb_check_var_19_22_stage0_reg;
reg  lpm_mult_imsttfb_check_var_19_23_en;
reg [31:0] imsttfb_check_var_19_23_stage0_reg;
reg  lpm_mult_imsttfb_check_var_27_28_en;
reg [31:0] imsttfb_check_var_27_28_stage0_reg;
reg  lpm_mult_imsttfb_check_var_27_29_en;
reg [31:0] imsttfb_check_var_27_29_stage0_reg;
reg  lpm_divide_imsttfb_check_var_76_80_en;

/*   %79 = sdiv i32 %78, %2*/
lpm_divide lpm_divide_imsttfb_check_var_76_79 (
	.quotient (lpm_divide_imsttfb_check_var_76_79_temp_out),
	.remain (imsttfb_check_var_76_79_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_imsttfb_check_var_76_79_en),
	.numer (imsttfb_check_var_signed_divide_32_0_op0),
	.denom (imsttfb_check_var_signed_divide_32_0_op1)
);

defparam
	lpm_divide_imsttfb_check_var_76_79.lpm_pipeline = 32,
	lpm_divide_imsttfb_check_var_76_79.lpm_widthn = 32,
	lpm_divide_imsttfb_check_var_76_79.lpm_widthd = 32,
	lpm_divide_imsttfb_check_var_76_79.lpm_drepresentation = "SIGNED",
	lpm_divide_imsttfb_check_var_76_79.lpm_nrepresentation = "SIGNED",
	lpm_divide_imsttfb_check_var_76_79.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2 == 32'd8)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2 == 32'd16)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2 == 32'd24)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2 == 32'd32)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2 != 32'd8)) & (imsttfb_check_var_0_2 != 32'd16)) & (imsttfb_check_var_0_2 != 32'd24)) & (imsttfb_check_var_0_2 != 32'd32)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_3_8 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_3_8 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_8;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_9_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_8;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_9_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_9;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_9_9;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_9_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_9_14 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_9_14 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_10;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_10;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_11;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_15_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_11;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_15_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_12;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_15_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_15_12;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_15_18 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_13;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_15_18 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_13;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_14;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_19_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_14;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_19_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_15;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_19_15;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_19_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_19_26 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_19_26 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_16;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_27_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_16;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_27_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_17;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_27_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_17;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_27_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_18;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_27_18;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_27_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_27_30 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_27_30 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_31_19;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_31_19;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_31_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2_reg == 32'd8)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2_reg == 32'd16)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_25;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2_reg == 32'd24)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_36;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2_reg == 32'd32)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_41;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_imsttfb_check_var_BB_31_19) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_0_2_reg != 32'd8)) & (imsttfb_check_var_0_2_reg != 32'd16)) & (imsttfb_check_var_0_2_reg != 32'd24)) & (imsttfb_check_var_0_2_reg != 32'd32)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_22;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_22;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_23;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_23;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_32_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_25;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_26;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_41_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_26;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_41_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_27;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_41_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_41_27;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_41_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_41_27) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_41_44 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB__thread_28;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB__thread_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_41_27) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_41_44 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_30;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB__thread_28;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB__thread_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB__thread_29;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB__thread_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB__thread_29;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB__thread_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_33;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_30;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_31;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_31;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_32;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_47_32;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_47_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_47_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_33;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_33;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_34;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_34;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_35;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_51_35;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_51_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_51_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_36;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_37;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_37;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_38;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_38;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_39;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_39;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_40;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_56_40;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_56_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_56_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_41;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_42;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_42;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_43;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_43;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_44;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_44;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_45;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_65_45;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_65_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_65_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_74_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_74_46;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_74_46) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_74_75 == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_47;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_74_46) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_74_75 == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_117;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_47;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_48;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_48;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_49;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_49;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_50;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_50;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_51;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_51;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_52;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_52;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_53;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_53;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_54;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_54;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_55;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_55;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_56;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_56;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_57;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_57;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_58;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_58;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_59;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_59;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_60;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_60;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_61;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_61;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_62;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_62;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_63;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_63;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_64;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_64;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_65;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_65;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_66;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_66;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_67;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_67;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_68;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_68;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_69;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_69;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_70;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_70;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_71;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_71;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_72;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_72;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_73;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_73;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_74;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_74;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_75;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_75;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_76;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_76;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_77;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_77;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_78;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_78;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_79;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_79;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_80;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_80;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_81;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_81;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_82;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_82;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_83;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_83;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_84;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_84;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_85;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_85;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_86;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_86;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_87;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_87;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_88;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_88;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_89;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_89;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_90;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_90;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_91;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_91;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_92;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_92;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_93;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_93;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_94;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_94;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_95;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_95;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_96;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_96;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_97;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_97;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_98;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_98;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_99;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_99;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_100;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_100;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_101;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_101;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_102;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_102;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_103;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_103;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_104;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_104;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_105;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_105;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_106;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_106;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_107;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_107;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_108;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_108;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_109;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_109;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_110;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_110;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_111;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_111;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_112;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_112;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_113;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_113;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_114;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_76_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_76_114;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_76_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_76_114) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_76_81_reg == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_82_115;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_82_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_imsttfb_check_var_BB_76_114) & (memory_controller_waitrequest == 1'd0)) & (imsttfb_check_var_76_81_reg == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_117;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_82_115;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_82_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_82_116;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_82_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_82_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_82_116;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_82_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_82_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_117;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_117;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_118;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_118;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_119;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_119;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_120;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_120;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_121;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_121;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_122;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_122;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_123;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_123;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_124;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_83_124;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_83_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_83_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_96_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_imsttfb_check_var_BB_96_125;
if (reset == 1'b0 && ^(LEGUP_F_imsttfb_check_var_BB_96_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_imsttfb_check_var_BB_96_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %0*/
/*   %1 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
begin
imsttfb_check_var_0_1 = arg_var;
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %0*/
/*   %1 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1))
begin
imsttfb_check_var_0_1_reg <= imsttfb_check_var_0_1;
if (reset == 1'b0 && ^(imsttfb_check_var_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_0_1_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
imsttfb_check_var_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_3))
begin
imsttfb_check_var_0_2_reg <= imsttfb_check_var_0_2;
if (reset == 1'b0 && ^(imsttfb_check_var_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_0_2_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %3*/
/*   %4 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 1*/
begin
imsttfb_check_var_3_4 = (arg_var + 4);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %3*/
/*   %4 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
imsttfb_check_var_3_4_reg <= imsttfb_check_var_3_4;
if (reset == 1'b0 && ^(imsttfb_check_var_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_3_4_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
imsttfb_check_var_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6))
begin
imsttfb_check_var_3_5_reg <= imsttfb_check_var_3_5;
if (reset == 1'b0 && ^(imsttfb_check_var_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_3_5_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %3*/
/*   %6 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 2*/
begin
imsttfb_check_var_3_6 = (arg_var + 8);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %3*/
/*   %6 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
imsttfb_check_var_3_6_reg <= imsttfb_check_var_3_6;
if (reset == 1'b0 && ^(imsttfb_check_var_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_3_6_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
imsttfb_check_var_3_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6))
begin
imsttfb_check_var_3_7_reg <= imsttfb_check_var_3_7;
if (reset == 1'b0 && ^(imsttfb_check_var_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_3_7_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %3*/
/*   %8 = icmp slt i32 %5, %7*/
begin
imsttfb_check_var_3_8 = ($signed(imsttfb_check_var_3_5) < $signed(imsttfb_check_var_3_7));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %3*/
/*   %8 = icmp slt i32 %5, %7*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_6))
begin
imsttfb_check_var_3_8_reg <= imsttfb_check_var_3_8;
if (reset == 1'b0 && ^(imsttfb_check_var_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_3_8_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %9*/
/*   %10 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 3*/
begin
imsttfb_check_var_9_10 = (arg_var + 12);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %9*/
/*   %10 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 3*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
imsttfb_check_var_9_10_reg <= imsttfb_check_var_9_10;
if (reset == 1'b0 && ^(imsttfb_check_var_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_9_10_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
imsttfb_check_var_9_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9))
begin
imsttfb_check_var_9_11_reg <= imsttfb_check_var_9_11;
if (reset == 1'b0 && ^(imsttfb_check_var_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_9_11_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %9*/
/*   %12 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 4*/
begin
imsttfb_check_var_9_12 = (arg_var + 16);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %9*/
/*   %12 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 4*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
imsttfb_check_var_9_12_reg <= imsttfb_check_var_9_12;
if (reset == 1'b0 && ^(imsttfb_check_var_9_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_9_12_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
imsttfb_check_var_9_13 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9))
begin
imsttfb_check_var_9_13_reg <= imsttfb_check_var_9_13;
if (reset == 1'b0 && ^(imsttfb_check_var_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_9_13_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %9*/
/*   %14 = icmp slt i32 %11, %13*/
begin
imsttfb_check_var_9_14 = ($signed(imsttfb_check_var_9_11) < $signed(imsttfb_check_var_9_13));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %9*/
/*   %14 = icmp slt i32 %11, %13*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_9))
begin
imsttfb_check_var_9_14_reg <= imsttfb_check_var_9_14;
if (reset == 1'b0 && ^(imsttfb_check_var_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_9_14_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %15*/
/*   %16 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 18*/
begin
imsttfb_check_var_15_16 = (arg_var + 104);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %15*/
/*   %16 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 18*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10))
begin
imsttfb_check_var_15_16_reg <= imsttfb_check_var_15_16;
if (reset == 1'b0 && ^(imsttfb_check_var_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_15_16_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
begin
imsttfb_check_var_15_17 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_12))
begin
imsttfb_check_var_15_17_reg <= imsttfb_check_var_15_17;
if (reset == 1'b0 && ^(imsttfb_check_var_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_15_17_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %15*/
/*   %18 = icmp eq i32 %17, 0*/
begin
imsttfb_check_var_15_18 = (imsttfb_check_var_15_17 == 32'd0);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %15*/
/*   %18 = icmp eq i32 %17, 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_12))
begin
imsttfb_check_var_15_18_reg <= imsttfb_check_var_15_18;
if (reset == 1'b0 && ^(imsttfb_check_var_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_15_18_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %19*/
/*   %20 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 5*/
begin
imsttfb_check_var_19_20 = (arg_var + 20);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %20 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 5*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
imsttfb_check_var_19_20_reg <= imsttfb_check_var_19_20;
if (reset == 1'b0 && ^(imsttfb_check_var_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_20_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %19*/
/*   %21 = ashr i32 %2, 3*/
begin
imsttfb_check_var_19_21 = ($signed(imsttfb_check_var_0_2_reg) >>> 32'd3);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %21 = ashr i32 %2, 3*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
imsttfb_check_var_19_21_reg <= imsttfb_check_var_19_21;
if (reset == 1'b0 && ^(imsttfb_check_var_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_21_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_19_22 = imsttfb_check_var_19_22_stage0_reg;
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %22 = mul i32 %13, %7*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_14))
begin
imsttfb_check_var_19_22_reg <= imsttfb_check_var_19_22;
if (reset == 1'b0 && ^(imsttfb_check_var_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_22_reg"); $finish; end
end
/* imsttfb_check_var: %19*/
/*   %22 = mul i32 %13, %7*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_14))
begin
imsttfb_check_var_19_22_reg <= imsttfb_check_var_19_22;
if (reset == 1'b0 && ^(imsttfb_check_var_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_22_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_19_23 = imsttfb_check_var_19_23_stage0_reg;
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %23 = mul i32 %22, %21*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15))
begin
imsttfb_check_var_19_23_reg <= imsttfb_check_var_19_23;
if (reset == 1'b0 && ^(imsttfb_check_var_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_23_reg"); $finish; end
end
/* imsttfb_check_var: %19*/
/*   %23 = mul i32 %22, %21*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15))
begin
imsttfb_check_var_19_23_reg <= imsttfb_check_var_19_23;
if (reset == 1'b0 && ^(imsttfb_check_var_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_23_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %19*/
/*   %24 = getelementptr inbounds %struct.fb_info* %info, i32 0, i32 0, i32 0*/
begin
imsttfb_check_var_19_24 = arg_info;
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %24 = getelementptr inbounds %struct.fb_info* %info, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
imsttfb_check_var_19_24_reg <= imsttfb_check_var_19_24;
if (reset == 1'b0 && ^(imsttfb_check_var_19_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_24_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
begin
imsttfb_check_var_19_25 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15))
begin
imsttfb_check_var_19_25_reg <= imsttfb_check_var_19_25;
if (reset == 1'b0 && ^(imsttfb_check_var_19_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_25_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %19*/
/*   %26 = icmp sgt i32 %23, %25*/
begin
imsttfb_check_var_19_26 = ($signed(imsttfb_check_var_19_23) > $signed(imsttfb_check_var_19_25));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %26 = icmp sgt i32 %23, %25*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_15))
begin
imsttfb_check_var_19_26_reg <= imsttfb_check_var_19_26;
if (reset == 1'b0 && ^(imsttfb_check_var_19_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_19_26_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_27_28 = imsttfb_check_var_27_28_stage0_reg;
end
always @(posedge clk) begin
/* imsttfb_check_var: %27*/
/*   %28 = mul i32 %11, %5*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_27_17))
begin
imsttfb_check_var_27_28_reg <= imsttfb_check_var_27_28;
if (reset == 1'b0 && ^(imsttfb_check_var_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_27_28_reg"); $finish; end
end
/* imsttfb_check_var: %27*/
/*   %28 = mul i32 %11, %5*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_27_17))
begin
imsttfb_check_var_27_28_reg <= imsttfb_check_var_27_28;
if (reset == 1'b0 && ^(imsttfb_check_var_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_27_28_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_27_29 = imsttfb_check_var_27_29_stage0_reg;
end
always @(posedge clk) begin
/* imsttfb_check_var: %27*/
/*   %29 = mul i32 %28, %21*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18))
begin
imsttfb_check_var_27_29_reg <= imsttfb_check_var_27_29;
if (reset == 1'b0 && ^(imsttfb_check_var_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_27_29_reg"); $finish; end
end
/* imsttfb_check_var: %27*/
/*   %29 = mul i32 %28, %21*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18))
begin
imsttfb_check_var_27_29_reg <= imsttfb_check_var_27_29;
if (reset == 1'b0 && ^(imsttfb_check_var_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_27_29_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %27*/
/*   %30 = icmp sgt i32 %29, %25*/
begin
imsttfb_check_var_27_30 = ($signed(imsttfb_check_var_27_29) > $signed(imsttfb_check_var_19_25_reg));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %27*/
/*   %30 = icmp sgt i32 %29, %25*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_27_18))
begin
imsttfb_check_var_27_30_reg <= imsttfb_check_var_27_30;
if (reset == 1'b0 && ^(imsttfb_check_var_27_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_27_30_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %33 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
begin
imsttfb_check_var_32_33 = (arg_var + 92);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %33 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_33_reg <= imsttfb_check_var_32_33;
if (reset == 1'b0 && ^(imsttfb_check_var_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_33_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %34 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
begin
imsttfb_check_var_32_34 = (arg_var + (92 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %34 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_34_reg <= imsttfb_check_var_32_34;
if (reset == 1'b0 && ^(imsttfb_check_var_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_34_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %35 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
begin
imsttfb_check_var_32_35 = (arg_var + 80);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %35 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_35_reg <= imsttfb_check_var_32_35;
if (reset == 1'b0 && ^(imsttfb_check_var_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_35_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %36 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
begin
imsttfb_check_var_32_36 = (arg_var + (80 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %36 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_36_reg <= imsttfb_check_var_32_36;
if (reset == 1'b0 && ^(imsttfb_check_var_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_36_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %37 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
begin
imsttfb_check_var_32_37 = (arg_var + (68 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %37 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_37_reg <= imsttfb_check_var_32_37;
if (reset == 1'b0 && ^(imsttfb_check_var_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_37_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %38 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
begin
imsttfb_check_var_32_38 = (arg_var + 68);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %38 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_38_reg <= imsttfb_check_var_32_38;
if (reset == 1'b0 && ^(imsttfb_check_var_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_38_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %39 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
begin
imsttfb_check_var_32_39 = (arg_var + 56);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %39 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_39_reg <= imsttfb_check_var_32_39;
if (reset == 1'b0 && ^(imsttfb_check_var_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_39_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %32*/
/*   %40 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
begin
imsttfb_check_var_32_40 = (arg_var + (56 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %32*/
/*   %40 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
imsttfb_check_var_32_40_reg <= imsttfb_check_var_32_40;
if (reset == 1'b0 && ^(imsttfb_check_var_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_32_40_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %41*/
/*   %42 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
begin
imsttfb_check_var_41_42 = (arg_var + (80 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %41*/
/*   %42 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25))
begin
imsttfb_check_var_41_42_reg <= imsttfb_check_var_41_42;
if (reset == 1'b0 && ^(imsttfb_check_var_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_41_42_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
begin
imsttfb_check_var_41_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_27))
begin
imsttfb_check_var_41_43_reg <= imsttfb_check_var_41_43;
if (reset == 1'b0 && ^(imsttfb_check_var_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_41_43_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %41*/
/*   %44 = icmp eq i32 %43, 6*/
begin
imsttfb_check_var_41_44 = (imsttfb_check_var_41_43 == 32'd6);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %41*/
/*   %44 = icmp eq i32 %43, 6*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_27))
begin
imsttfb_check_var_41_44_reg <= imsttfb_check_var_41_44;
if (reset == 1'b0 && ^(imsttfb_check_var_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_41_44_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %.thread*/
/*   %45 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
begin
imsttfb_check_var__thread_45 = (arg_var + (92 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %.thread*/
/*   %45 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
imsttfb_check_var__thread_45_reg <= imsttfb_check_var__thread_45;
if (reset == 1'b0 && ^(imsttfb_check_var__thread_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var__thread_45_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %.thread*/
/*   %46 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
begin
imsttfb_check_var__thread_46 = (arg_var + 80);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %.thread*/
/*   %46 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
imsttfb_check_var__thread_46_reg <= imsttfb_check_var__thread_46;
if (reset == 1'b0 && ^(imsttfb_check_var__thread_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var__thread_46_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %47*/
/*   %48 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
begin
imsttfb_check_var_47_48 = (arg_var + 92);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %47*/
/*   %48 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
imsttfb_check_var_47_48_reg <= imsttfb_check_var_47_48;
if (reset == 1'b0 && ^(imsttfb_check_var_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_47_48_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %47*/
/*   %49 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
begin
imsttfb_check_var_47_49 = (arg_var + (92 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %47*/
/*   %49 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
imsttfb_check_var_47_49_reg <= imsttfb_check_var_47_49;
if (reset == 1'b0 && ^(imsttfb_check_var_47_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_47_49_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %47*/
/*   %50 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
begin
imsttfb_check_var_47_50 = (arg_var + 80);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %47*/
/*   %50 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
imsttfb_check_var_47_50_reg <= imsttfb_check_var_47_50;
if (reset == 1'b0 && ^(imsttfb_check_var_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_47_50_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %51*/
/*   %52 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
begin
imsttfb_check_var_51_52 = (arg_var + (68 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %51*/
/*   %52 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
imsttfb_check_var_51_52_reg <= imsttfb_check_var_51_52;
if (reset == 1'b0 && ^(imsttfb_check_var_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_51_52_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %51*/
/*   %53 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
begin
imsttfb_check_var_51_53 = (arg_var + 68);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %51*/
/*   %53 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
imsttfb_check_var_51_53_reg <= imsttfb_check_var_51_53;
if (reset == 1'b0 && ^(imsttfb_check_var_51_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_51_53_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %51*/
/*   %54 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
begin
imsttfb_check_var_51_54 = (arg_var + 56);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %51*/
/*   %54 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
imsttfb_check_var_51_54_reg <= imsttfb_check_var_51_54;
if (reset == 1'b0 && ^(imsttfb_check_var_51_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_51_54_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %51*/
/*   %55 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
begin
imsttfb_check_var_51_55 = (arg_var + (56 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %51*/
/*   %55 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
imsttfb_check_var_51_55_reg <= imsttfb_check_var_51_55;
if (reset == 1'b0 && ^(imsttfb_check_var_51_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_51_55_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %57 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
begin
imsttfb_check_var_56_57 = (arg_var + 92);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %57 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_57_reg <= imsttfb_check_var_56_57;
if (reset == 1'b0 && ^(imsttfb_check_var_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_57_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %58 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
begin
imsttfb_check_var_56_58 = (arg_var + (92 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %58 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_58_reg <= imsttfb_check_var_56_58;
if (reset == 1'b0 && ^(imsttfb_check_var_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_58_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %59 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
begin
imsttfb_check_var_56_59 = (arg_var + 80);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %59 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_59_reg <= imsttfb_check_var_56_59;
if (reset == 1'b0 && ^(imsttfb_check_var_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_59_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %60 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
begin
imsttfb_check_var_56_60 = (arg_var + (80 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %60 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_60_reg <= imsttfb_check_var_56_60;
if (reset == 1'b0 && ^(imsttfb_check_var_56_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_60_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %61 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
begin
imsttfb_check_var_56_61 = (arg_var + (68 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %61 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_61_reg <= imsttfb_check_var_56_61;
if (reset == 1'b0 && ^(imsttfb_check_var_56_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_61_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %62 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
begin
imsttfb_check_var_56_62 = (arg_var + 68);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %62 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_62_reg <= imsttfb_check_var_56_62;
if (reset == 1'b0 && ^(imsttfb_check_var_56_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_62_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %63 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
begin
imsttfb_check_var_56_63 = (arg_var + 56);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %63 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_63_reg <= imsttfb_check_var_56_63;
if (reset == 1'b0 && ^(imsttfb_check_var_56_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_63_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %56*/
/*   %64 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
begin
imsttfb_check_var_56_64 = (arg_var + (56 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %56*/
/*   %64 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
imsttfb_check_var_56_64_reg <= imsttfb_check_var_56_64;
if (reset == 1'b0 && ^(imsttfb_check_var_56_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_56_64_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %66 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
begin
imsttfb_check_var_65_66 = (arg_var + 92);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %66 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_66_reg <= imsttfb_check_var_65_66;
if (reset == 1'b0 && ^(imsttfb_check_var_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_66_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %67 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
begin
imsttfb_check_var_65_67 = (arg_var + (92 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %67 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_67_reg <= imsttfb_check_var_65_67;
if (reset == 1'b0 && ^(imsttfb_check_var_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_67_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %68 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
begin
imsttfb_check_var_65_68 = (arg_var + 80);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %68 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_68_reg <= imsttfb_check_var_65_68;
if (reset == 1'b0 && ^(imsttfb_check_var_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_68_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %69 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
begin
imsttfb_check_var_65_69 = (arg_var + (80 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %69 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_69_reg <= imsttfb_check_var_65_69;
if (reset == 1'b0 && ^(imsttfb_check_var_65_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_69_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %70 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
begin
imsttfb_check_var_65_70 = (arg_var + (68 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %70 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_70_reg <= imsttfb_check_var_65_70;
if (reset == 1'b0 && ^(imsttfb_check_var_65_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_70_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %71 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
begin
imsttfb_check_var_65_71 = (arg_var + 68);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %71 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_71_reg <= imsttfb_check_var_65_71;
if (reset == 1'b0 && ^(imsttfb_check_var_65_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_71_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %72 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
begin
imsttfb_check_var_65_72 = (arg_var + 56);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %72 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_72_reg <= imsttfb_check_var_65_72;
if (reset == 1'b0 && ^(imsttfb_check_var_65_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_72_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %65*/
/*   %73 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
begin
imsttfb_check_var_65_73 = (arg_var + (56 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %65*/
/*   %73 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
imsttfb_check_var_65_73_reg <= imsttfb_check_var_65_73;
if (reset == 1'b0 && ^(imsttfb_check_var_65_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_65_73_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %74*/
/*   %75 = icmp eq i32 %13, %11*/
begin
imsttfb_check_var_74_75 = (imsttfb_check_var_9_13_reg == imsttfb_check_var_9_11_reg);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %74*/
/*   %75 = icmp eq i32 %13, %11*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_74_46))
begin
imsttfb_check_var_74_75_reg <= imsttfb_check_var_74_75;
if (reset == 1'b0 && ^(imsttfb_check_var_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_74_75_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
begin
imsttfb_check_var_76_77 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49))
begin
imsttfb_check_var_76_77_reg <= imsttfb_check_var_76_77;
if (reset == 1'b0 && ^(imsttfb_check_var_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_77_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %76*/
/*   %78 = shl i32 %77, 3*/
begin
imsttfb_check_var_76_78 = (imsttfb_check_var_76_77 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %76*/
/*   %78 = shl i32 %77, 3*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49))
begin
imsttfb_check_var_76_78_reg <= imsttfb_check_var_76_78;
if (reset == 1'b0 && ^(imsttfb_check_var_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_78_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_76_79 = imsttfb_check_var_signed_divide_32_0;
end
always @(posedge clk) begin
/* imsttfb_check_var: %76*/
/*   %79 = sdiv i32 %78, %2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81))
begin
imsttfb_check_var_76_79_reg <= imsttfb_check_var_76_79;
if (reset == 1'b0 && ^(imsttfb_check_var_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_79_reg"); $finish; end
end
/* imsttfb_check_var: %76*/
/*   %79 = sdiv i32 %78, %2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81))
begin
imsttfb_check_var_76_79_reg <= imsttfb_check_var_76_79;
if (reset == 1'b0 && ^(imsttfb_check_var_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_79_reg"); $finish; end
end
end
always @(*) begin
imsttfb_check_var_76_80 = imsttfb_check_var_signed_divide_32_0;
end
always @(posedge clk) begin
/* imsttfb_check_var: %76*/
/*   %80 = sdiv i32 %79, %5*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
imsttfb_check_var_76_80_reg <= imsttfb_check_var_76_80;
if (reset == 1'b0 && ^(imsttfb_check_var_76_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_80_reg"); $finish; end
end
/* imsttfb_check_var: %76*/
/*   %80 = sdiv i32 %79, %5*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
imsttfb_check_var_76_80_reg <= imsttfb_check_var_76_80;
if (reset == 1'b0 && ^(imsttfb_check_var_76_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_80_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %76*/
/*   %81 = icmp slt i32 %80, %13*/
begin
imsttfb_check_var_76_81 = ($signed(imsttfb_check_var_76_80) < $signed(imsttfb_check_var_9_13_reg));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %76*/
/*   %81 = icmp slt i32 %80, %13*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
imsttfb_check_var_76_81_reg <= imsttfb_check_var_76_81;
if (reset == 1'b0 && ^(imsttfb_check_var_76_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_76_81_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %84 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 2*/
begin
imsttfb_check_var_83_84 = (arg_var + (92 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %84 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 17, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_84_reg <= imsttfb_check_var_83_84;
if (reset == 1'b0 && ^(imsttfb_check_var_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_84_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %85 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 2*/
begin
imsttfb_check_var_83_85 = (arg_var + (80 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %85 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 16, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_85_reg <= imsttfb_check_var_83_85;
if (reset == 1'b0 && ^(imsttfb_check_var_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_85_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %86 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 1*/
begin
imsttfb_check_var_83_86 = (arg_var + (68 + 4));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %86 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 15, i32 1*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_86_reg <= imsttfb_check_var_83_86;
if (reset == 1'b0 && ^(imsttfb_check_var_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_86_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %87 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 2*/
begin
imsttfb_check_var_83_87 = (arg_var + (56 + 8));
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %87 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 14, i32 2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_87_reg <= imsttfb_check_var_83_87;
if (reset == 1'b0 && ^(imsttfb_check_var_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_87_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %88 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 6*/
begin
imsttfb_check_var_83_88 = (arg_var + 24);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %88 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 6*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_88_reg <= imsttfb_check_var_83_88;
if (reset == 1'b0 && ^(imsttfb_check_var_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_88_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %89 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 7*/
begin
imsttfb_check_var_83_89 = (arg_var + 28);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %89 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 7*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_89_reg <= imsttfb_check_var_83_89;
if (reset == 1'b0 && ^(imsttfb_check_var_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_89_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %90 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 9*/
begin
imsttfb_check_var_83_90 = (arg_var + 36);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %90 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 9*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_90_reg <= imsttfb_check_var_83_90;
if (reset == 1'b0 && ^(imsttfb_check_var_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_90_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %91 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 8*/
begin
imsttfb_check_var_83_91 = (arg_var + 32);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %91 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 8*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_91_reg <= imsttfb_check_var_83_91;
if (reset == 1'b0 && ^(imsttfb_check_var_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_91_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %92 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 11*/
begin
imsttfb_check_var_83_92 = (arg_var + 44);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %92 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 11*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_92_reg <= imsttfb_check_var_83_92;
if (reset == 1'b0 && ^(imsttfb_check_var_83_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_92_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %93 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 10*/
begin
imsttfb_check_var_83_93 = (arg_var + 40);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %93 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 10*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_93_reg <= imsttfb_check_var_83_93;
if (reset == 1'b0 && ^(imsttfb_check_var_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_93_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %94 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 13*/
begin
imsttfb_check_var_83_94 = (arg_var + 52);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %94 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 13*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_94_reg <= imsttfb_check_var_83_94;
if (reset == 1'b0 && ^(imsttfb_check_var_83_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_94_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %83*/
/*   %95 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 12*/
begin
imsttfb_check_var_83_95 = (arg_var + 48);
end
end
always @(posedge clk) begin
/* imsttfb_check_var: %83*/
/*   %95 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 12*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
imsttfb_check_var_83_95_reg <= imsttfb_check_var_83_95;
if (reset == 1'b0 && ^(imsttfb_check_var_83_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to imsttfb_check_var_83_95_reg"); $finish; end
end
end
always @(*) begin
/* imsttfb_check_var: %76*/
/*   %79 = sdiv i32 %78, %2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49))
begin
imsttfb_check_var_signed_divide_32_0_op0 = imsttfb_check_var_76_78;
end
/* imsttfb_check_var: %76*/
/*   %80 = sdiv i32 %79, %5*/
else /* if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81)) */
begin
imsttfb_check_var_signed_divide_32_0_op0 = imsttfb_check_var_76_79;
end
end
always @(*) begin
/* imsttfb_check_var: %76*/
/*   %79 = sdiv i32 %78, %2*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_49))
begin
imsttfb_check_var_signed_divide_32_0_op1 = imsttfb_check_var_0_2_reg;
end
/* imsttfb_check_var: %76*/
/*   %80 = sdiv i32 %79, %5*/
else /* if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_81)) */
begin
imsttfb_check_var_signed_divide_32_0_op1 = imsttfb_check_var_3_5_reg;
end
end
always @(*) begin
lpm_divide_imsttfb_check_var_76_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_imsttfb_check_var_76_79_out = lpm_divide_imsttfb_check_var_76_79_temp_out;
end
always @(*) begin
imsttfb_check_var_signed_divide_32_0 = lpm_divide_imsttfb_check_var_76_79_out;
end
always @(*) begin
lpm_mult_imsttfb_check_var_19_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %22 = mul i32 %13, %7*/
if ((lpm_mult_imsttfb_check_var_19_22_en == 1'd1))
begin
imsttfb_check_var_19_22_stage0_reg <= (imsttfb_check_var_9_13_reg * imsttfb_check_var_3_7_reg);
end
end
always @(*) begin
lpm_mult_imsttfb_check_var_19_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* imsttfb_check_var: %19*/
/*   %23 = mul i32 %22, %21*/
if ((lpm_mult_imsttfb_check_var_19_23_en == 1'd1))
begin
imsttfb_check_var_19_23_stage0_reg <= (imsttfb_check_var_19_22 * imsttfb_check_var_19_21_reg);
end
end
always @(*) begin
lpm_mult_imsttfb_check_var_27_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* imsttfb_check_var: %27*/
/*   %28 = mul i32 %11, %5*/
if ((lpm_mult_imsttfb_check_var_27_28_en == 1'd1))
begin
imsttfb_check_var_27_28_stage0_reg <= (imsttfb_check_var_9_11_reg * imsttfb_check_var_3_5_reg);
end
end
always @(*) begin
lpm_mult_imsttfb_check_var_27_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* imsttfb_check_var: %27*/
/*   %29 = mul i32 %28, %21*/
if ((lpm_mult_imsttfb_check_var_27_29_en == 1'd1))
begin
imsttfb_check_var_27_29_stage0_reg <= (imsttfb_check_var_27_28 * imsttfb_check_var_19_21_reg);
end
end
always @(*) begin
lpm_divide_imsttfb_check_var_76_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* imsttfb_check_var: %96*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_96_125))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 10, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 16, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 16, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 24, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %76*/
/*   store i32 %80, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %82*/
/*   store i32 %13, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1))
begin
memory_controller_address_a = imsttfb_check_var_0_1;
end
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_address_a = imsttfb_check_var_3_4;
end
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_address_a = imsttfb_check_var_9_10;
end
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
memory_controller_address_a = imsttfb_check_var_19_24;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_address_a = imsttfb_check_var_32_33;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_address_a = imsttfb_check_var_32_35_reg;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_address_a = imsttfb_check_var_32_37_reg;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_address_a = imsttfb_check_var_32_39_reg;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_address_a = imsttfb_check_var__thread_45;
end
/* imsttfb_check_var: %47*/
/*   store i32 10, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_address_a = imsttfb_check_var_47_48;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_address_a = imsttfb_check_var_47_50_reg;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_address_a = imsttfb_check_var_51_52;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_address_a = imsttfb_check_var_51_54_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 16, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_address_a = imsttfb_check_var_56_57;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_address_a = imsttfb_check_var_56_59_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_address_a = imsttfb_check_var_56_61_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_address_a = imsttfb_check_var_56_63_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 16, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_address_a = imsttfb_check_var_65_66;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_address_a = imsttfb_check_var_65_68_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_address_a = imsttfb_check_var_65_70_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 24, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_address_a = imsttfb_check_var_65_72_reg;
end
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47))
begin
memory_controller_address_a = imsttfb_check_var_19_24_reg;
end
/* imsttfb_check_var: %76*/
/*   store i32 %80, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
memory_controller_address_a = imsttfb_check_var_9_10_reg;
end
/* imsttfb_check_var: %82*/
/*   store i32 %13, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115))
begin
memory_controller_address_a = imsttfb_check_var_9_10_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_address_a = imsttfb_check_var_83_84;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_address_a = imsttfb_check_var_83_86_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_address_a = imsttfb_check_var_83_88_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_address_a = imsttfb_check_var_19_20_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_address_a = imsttfb_check_var_83_91_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_address_a = imsttfb_check_var_83_93_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 10, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 16, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 16, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 24, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* imsttfb_check_var: %76*/
/*   store i32 %80, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %82*/
/*   store i32 %13, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_write_enable_a = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_in_a = 32'd5;
end
/* imsttfb_check_var: %47*/
/*   store i32 10, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_in_a = 32'd10;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_in_a = 32'd5;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %56*/
/*   store i32 16, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_in_a = 32'd16;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_in_a = 32'd8;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %65*/
/*   store i32 16, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_in_a = 32'd16;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_in_a = 32'd8;
end
/* imsttfb_check_var: %65*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %65*/
/*   store i32 24, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_in_a = 32'd24;
end
/* imsttfb_check_var: %76*/
/*   store i32 %80, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
memory_controller_in_a = imsttfb_check_var_76_80;
end
/* imsttfb_check_var: %82*/
/*   store i32 %13, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115))
begin
memory_controller_in_a = imsttfb_check_var_9_13_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_in_a = -32'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_in_a = 32'd0;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_in_a = 32'd16;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_in_a = 32'd16;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* imsttfb_check_var: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %19*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_19_13))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %47*/
/*   store i32 10, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 16, i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 16, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 0, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 24, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %76*/
/*   %77 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_47))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %76*/
/*   store i32 %80, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_76_113))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %82*/
/*   store i32 %13, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_82_115))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_size_a = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 5, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_address_b = imsttfb_check_var_3_6;
end
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_address_b = imsttfb_check_var_9_12;
end
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10))
begin
memory_controller_address_b = imsttfb_check_var_15_16;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_address_b = imsttfb_check_var_32_34;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_address_b = imsttfb_check_var_32_36_reg;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_address_b = imsttfb_check_var_32_38_reg;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_address_b = imsttfb_check_var_32_40_reg;
end
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25))
begin
memory_controller_address_b = imsttfb_check_var_41_42;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_address_b = imsttfb_check_var__thread_46;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_address_b = imsttfb_check_var_47_49;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_address_b = imsttfb_check_var_41_42_reg;
end
/* imsttfb_check_var: %51*/
/*   store i32 5, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_address_b = imsttfb_check_var_51_53;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_address_b = imsttfb_check_var_51_55_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_address_b = imsttfb_check_var_56_58;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_address_b = imsttfb_check_var_56_60_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_address_b = imsttfb_check_var_56_62_reg;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_address_b = imsttfb_check_var_56_64_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_address_b = imsttfb_check_var_65_67;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_address_b = imsttfb_check_var_65_69_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_address_b = imsttfb_check_var_65_71_reg;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_address_b = imsttfb_check_var_65_73_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_address_b = imsttfb_check_var_83_85;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_address_b = imsttfb_check_var_83_87_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_address_b = imsttfb_check_var_83_89_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_address_b = imsttfb_check_var_83_90_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_address_b = imsttfb_check_var_83_92_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_address_b = imsttfb_check_var_83_94_reg;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123))
begin
memory_controller_address_b = imsttfb_check_var_83_95_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 5, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_write_enable_b = 1'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_in_b = 32'd0;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_in_b = 32'd5;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_in_b = 32'd5;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_in_b = 32'd5;
end
/* imsttfb_check_var: %51*/
/*   store i32 5, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_in_b = 32'd5;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_in_b = 32'd0;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_in_b = 32'd0;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_in_b = 32'd0;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_in_b = 32'd0;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_in_b = -32'd1;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_in_b = 32'd16;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_in_b = 32'd16;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_in_b = 32'd8;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123))
begin
memory_controller_in_b = 32'd8;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* imsttfb_check_var: %3*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_3_4))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %9*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_9_7))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %15*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_15_10))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_20))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_21))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 8, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_22))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %32*/
/*   store i32 0, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_32_23))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_41_25))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %.thread*/
/*   store i32 5, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB__thread_28))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_30))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %47*/
/*   store i32 5, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_47_31))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %51*/
/*   store i32 5, i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_33))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %51*/
/*   store i32 0, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_51_34))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_36))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_37))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 8, i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_38))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %56*/
/*   store i32 0, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_56_39))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_41))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_42))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_43))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %65*/
/*   store i32 8, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_65_44))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_117))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 0, i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_118))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 -1, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_119))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_120))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 16, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_121))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_122))
begin
memory_controller_size_b = 2'd2;
end
/* imsttfb_check_var: %83*/
/*   store i32 8, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_83_123))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* imsttfb_check_var: %96*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_imsttfb_check_var_BB_96_125))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_main_BB_imsttfb_check_var_exit_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg  cur_state;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_imsttfb_check_var_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_imsttfb_check_var_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_imsttfb_check_var_exit_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_imsttfb_check_var_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_imsttfb_check_var_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_imsttfb_check_var_exit_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %imsttfb_check_var.exit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_imsttfb_check_var_exit_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %imsttfb_check_var.exit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_imsttfb_check_var_exit_1))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
