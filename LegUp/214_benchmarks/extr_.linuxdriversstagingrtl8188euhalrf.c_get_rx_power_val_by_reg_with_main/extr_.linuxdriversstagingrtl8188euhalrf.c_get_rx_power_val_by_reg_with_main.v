//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:12 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module get_rx_power_val_by_reg
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_adapt,
	arg_channel,
	arg_index,
	arg_powerbase0,
	arg_powerbase1,
	arg_out_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_21_6 = 7'd6;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_7 = 7'd7;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_8 = 7'd8;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_9 = 7'd9;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_10 = 7'd10;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_11 = 7'd11;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_12 = 7'd12;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_26_13 = 7'd13;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14 = 7'd14;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15 = 7'd15;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16 = 7'd16;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17 = 7'd17;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18 = 7'd18;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19 = 7'd19;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20 = 7'd20;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21 = 7'd21;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22 = 7'd22;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23 = 7'd23;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_44_24 = 7'd24;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_44_25 = 7'd25;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_44_26 = 7'd26;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_46_27 = 7'd27;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_28 = 7'd28;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_29 = 7'd29;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_30 = 7'd30;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_31 = 7'd31;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_32 = 7'd32;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_33 = 7'd33;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_47_34 = 7'd34;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_52_35 = 7'd35;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_52_36 = 7'd36;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_52_37 = 7'd37;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_38 = 7'd38;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_39 = 7'd39;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_40 = 7'd40;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_41 = 7'd41;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_42 = 7'd42;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_43 = 7'd43;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_55_44 = 7'd44;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45 = 7'd45;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46 = 7'd46;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47 = 7'd47;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48 = 7'd48;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49 = 7'd49;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50 = 7'd50;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51 = 7'd51;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52 = 7'd52;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53 = 7'd53;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_54 = 7'd54;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_55 = 7'd55;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_56 = 7'd56;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_57 = 7'd57;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_58 = 7'd58;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_59 = 7'd59;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_87_60 = 7'd60;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_94_61 = 7'd61;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_94_62 = 7'd62;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_94_63 = 7'd63;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_94_64 = 7'd64;
parameter [6:0] LEGUP_F_get_rx_power_val_by_reg_BB_98_65 = 7'd65;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_adapt;
input [31:0] arg_channel;
input [31:0] arg_index;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_powerbase0;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_powerbase1;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_out_val;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_3_reg;
reg [31:0] get_rx_power_val_by_reg_0_4;
reg [31:0] get_rx_power_val_by_reg_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_5_reg;
reg  get_rx_power_val_by_reg_0_6;
reg  get_rx_power_val_by_reg_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_powerbase0_powerbase113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_powerbase0_powerbase113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_9_reg;
reg  get_rx_power_val_by_reg_0_10;
reg  get_rx_power_val_by_reg_0_10_reg;
reg  get_rx_power_val_by_reg_0_11;
reg  get_rx_power_val_by_reg_0_11_reg;
reg  get_rx_power_val_by_reg_0_12;
reg  get_rx_power_val_by_reg_0_12_reg;
reg  get_rx_power_val_by_reg_0_13;
reg  get_rx_power_val_by_reg_0_13_reg;
reg  get_rx_power_val_by_reg_0_14;
reg  get_rx_power_val_by_reg_0_14_reg;
reg [31:0] get_rx_power_val_by_reg_0_15;
reg [31:0] get_rx_power_val_by_reg_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_0_20_reg;
reg  get_rx_power_val_by_reg_0__not;
reg  get_rx_power_val_by_reg_0__not_reg;
reg [31:0] get_rx_power_val_by_reg_21_22;
reg [31:0] get_rx_power_val_by_reg_21_22_reg;
reg [31:0] get_rx_power_val_by_reg_21_pwr_diff_016;
reg [31:0] get_rx_power_val_by_reg_21_pwr_diff_016_reg;
reg [31:0] get_rx_power_val_by_reg_21_chnlGroup_015;
reg [31:0] get_rx_power_val_by_reg_21_chnlGroup_015_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_21_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_21_scevgep18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_21__in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_21__in_reg;
reg  get_rx_power_val_by_reg_21_23;
reg  get_rx_power_val_by_reg_21_23_reg;
reg [31:0] get_rx_power_val_by_reg_21_24;
reg [31:0] get_rx_power_val_by_reg_21_24_reg;
reg [31:0] get_rx_power_val_by_reg_21_25;
reg [31:0] get_rx_power_val_by_reg_21_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_26_29_reg;
reg [31:0] get_rx_power_val_by_reg_26_30;
reg [31:0] get_rx_power_val_by_reg_26_30_reg;
reg [31:0] get_rx_power_val_by_reg_26_31;
reg [31:0] get_rx_power_val_by_reg_26_31_reg;
reg [31:0] get_rx_power_val_by_reg_26_32;
reg [31:0] get_rx_power_val_by_reg_26_32_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_33;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_33_reg;
reg  get_rx_power_val_by_reg___crit_edge28_34;
reg  get_rx_power_val_by_reg___crit_edge28_34_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_35;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_35_reg;
reg  get_rx_power_val_by_reg___crit_edge28_36;
reg  get_rx_power_val_by_reg___crit_edge28_36_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge34;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge34_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge35;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge35_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge36;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge36_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge37;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge37_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_reg;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge38;
reg  get_rx_power_val_by_reg___crit_edge28_brmerge38_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_2;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_chnlGroup_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge28_40_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_41;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_41_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_42;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_42_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_43;
reg [31:0] get_rx_power_val_by_reg___crit_edge28_43_reg;
reg [31:0] get_rx_power_val_by_reg_44_45;
reg [31:0] get_rx_power_val_by_reg_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_47_50_reg;
reg [31:0] get_rx_power_val_by_reg_47_51;
reg [31:0] get_rx_power_val_by_reg_47_51_reg;
reg [31:0] get_rx_power_val_by_reg_47__pre;
reg [31:0] get_rx_power_val_by_reg_47__pre_reg;
reg [31:0] get_rx_power_val_by_reg_52_53;
reg [31:0] get_rx_power_val_by_reg_52_53_reg;
reg  get_rx_power_val_by_reg_52_54;
reg  get_rx_power_val_by_reg_52_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_55_58_reg;
reg [31:0] get_rx_power_val_by_reg_55_59;
reg [31:0] get_rx_power_val_by_reg_55_59_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_60;
reg [31:0] get_rx_power_val_by_reg___crit_edge_60_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_pwr_diff_1;
reg [31:0] get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg;
reg  get_rx_power_val_by_reg___crit_edge_61;
reg  get_rx_power_val_by_reg___crit_edge_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn9_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn9_in_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn_in_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge__pn_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0;
reg [31:0] get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_reg;
reg  get_rx_power_val_by_reg___crit_edge_62;
reg  get_rx_power_val_by_reg___crit_edge_62_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_63;
reg [31:0] get_rx_power_val_by_reg___crit_edge_63_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_pwr_diff_2;
reg [31:0] get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg___crit_edge_66_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_67;
reg [31:0] get_rx_power_val_by_reg___crit_edge_67_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_68;
reg [31:0] get_rx_power_val_by_reg___crit_edge_68_reg;
reg  get_rx_power_val_by_reg___crit_edge_69;
reg  get_rx_power_val_by_reg___crit_edge_69_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_70;
reg [31:0] get_rx_power_val_by_reg___crit_edge_70_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_71;
reg [31:0] get_rx_power_val_by_reg___crit_edge_71_reg;
reg  get_rx_power_val_by_reg___crit_edge_72;
reg  get_rx_power_val_by_reg___crit_edge_72_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_1;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_1_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_73;
reg [31:0] get_rx_power_val_by_reg___crit_edge_73_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_74;
reg [31:0] get_rx_power_val_by_reg___crit_edge_74_reg;
reg  get_rx_power_val_by_reg___crit_edge_75;
reg  get_rx_power_val_by_reg___crit_edge_75_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_2;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_2_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_76;
reg [31:0] get_rx_power_val_by_reg___crit_edge_76_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_77;
reg [31:0] get_rx_power_val_by_reg___crit_edge_77_reg;
reg  get_rx_power_val_by_reg___crit_edge_78;
reg  get_rx_power_val_by_reg___crit_edge_78_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_3;
reg [31:0] get_rx_power_val_by_reg___crit_edge_storemerge_3_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_79;
reg [31:0] get_rx_power_val_by_reg___crit_edge_79_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_80;
reg [31:0] get_rx_power_val_by_reg___crit_edge_80_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_81;
reg [31:0] get_rx_power_val_by_reg___crit_edge_81_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_82;
reg [31:0] get_rx_power_val_by_reg___crit_edge_82_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_83;
reg [31:0] get_rx_power_val_by_reg___crit_edge_83_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_84;
reg [31:0] get_rx_power_val_by_reg___crit_edge_84_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_85;
reg [31:0] get_rx_power_val_by_reg___crit_edge_85_reg;
reg [31:0] get_rx_power_val_by_reg___crit_edge_86;
reg [31:0] get_rx_power_val_by_reg___crit_edge_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_87_90_reg;
reg [31:0] get_rx_power_val_by_reg_87_91;
reg [31:0] get_rx_power_val_by_reg_87_91_reg;
reg [31:0] get_rx_power_val_by_reg_87_92;
reg [31:0] get_rx_power_val_by_reg_87_92_reg;
reg [31:0] get_rx_power_val_by_reg_87_93;
reg [31:0] get_rx_power_val_by_reg_87_93_reg;
reg [31:0] get_rx_power_val_by_reg_94_chnlGroup_3;
reg [31:0] get_rx_power_val_by_reg_94_chnlGroup_3_reg;
reg [31:0] get_rx_power_val_by_reg_94_pwr_diff_3;
reg [31:0] get_rx_power_val_by_reg_94_pwr_diff_3_reg;
reg [31:0] get_rx_power_val_by_reg_94_write_val_0;
reg [31:0] get_rx_power_val_by_reg_94_write_val_0_reg;
reg [31:0] get_rx_power_val_by_reg_94_95;
reg [31:0] get_rx_power_val_by_reg_94_95_reg;
reg  get_rx_power_val_by_reg_94_96;
reg  get_rx_power_val_by_reg_94_96_reg;
reg [31:0] get_rx_power_val_by_reg_94_write_val_1;
reg [31:0] get_rx_power_val_by_reg_94_write_val_1_reg;
reg [31:0] get_rx_power_val_by_reg_94_97;
reg [31:0] get_rx_power_val_by_reg_94_97_reg;
reg  get_rx_power_val_by_reg_94_exitcond;
reg  get_rx_power_val_by_reg_94_exitcond_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_21_6;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_21_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_21_6;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_21_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_4_reg == 32'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_7;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_4_reg == 32'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_4_reg == 32'd2)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_24;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_4_reg == 32'd3)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_46_27;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_46_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_4_reg != 32'd0)) & (get_rx_power_val_by_reg_0_4_reg != 32'd1)) & (get_rx_power_val_by_reg_0_4_reg != 32'd2)) & (get_rx_power_val_by_reg_0_4_reg != 32'd3)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_54;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_7;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_8;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_8;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_9;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_9;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_10;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_10;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_11;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_11;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_12;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_12;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_13;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_26_13;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_26_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_24;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_25;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_25;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_26;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_44_26;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_44_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_46_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_46_27;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_46_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_46_27) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_28;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_46_27) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_0_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_35;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_28;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_29;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_29;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_30;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_30;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_31;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_31;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_32;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_32;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_33;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_33;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_34;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_47_34;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_47_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_35;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_36;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_36;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_37;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_52_37;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_52_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_38;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_38;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_39;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_39;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_40;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_40;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_41;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_41;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_42;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_42;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_43;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_43;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_44;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_55_44;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_55_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_54;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_55;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_55;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_56;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_56;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_57;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_57;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_58;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_58;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_59;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_59;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_60;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_87_60;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_87_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_61;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_62;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_62;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_63;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_63;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_64;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_94_64;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_94_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_98_65;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_98_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_21_6;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_21_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_98_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_rx_power_val_by_reg_BB_98_65;
if (reset == 1'b0 && ^(LEGUP_F_get_rx_power_val_by_reg_BB_98_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_98_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %1 = getelementptr inbounds %struct.adapter* %adapt, i32 0, i32 0*/
begin
get_rx_power_val_by_reg_0_1 = arg_adapt;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %1 = getelementptr inbounds %struct.adapter* %adapt, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_1_reg <= get_rx_power_val_by_reg_0_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_1_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_2_reg <= get_rx_power_val_by_reg_0_2;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_2_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %3 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 0*/
begin
get_rx_power_val_by_reg_0_3 = get_rx_power_val_by_reg_0_2;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %3 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_3_reg <= get_rx_power_val_by_reg_0_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_3_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5))
begin
get_rx_power_val_by_reg_0_4_reg <= get_rx_power_val_by_reg_0_4;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_4_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %5 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 1*/
begin
get_rx_power_val_by_reg_0_5 = (get_rx_power_val_by_reg_0_2 + 4);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %5 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_5_reg <= get_rx_power_val_by_reg_0_5;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_5_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %6 = icmp slt i32 %index, 2*/
begin
get_rx_power_val_by_reg_0_6 = ($signed(arg_index) < $signed(32'd2));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %6 = icmp slt i32 %index, 2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_6_reg <= get_rx_power_val_by_reg_0_6;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_6_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %powerbase0.powerbase113 = select i1 %6, i32* %powerbase0, i32* %powerbase1*/
begin
get_rx_power_val_by_reg_0_powerbase0_powerbase113 = (get_rx_power_val_by_reg_0_6_reg ? arg_powerbase0 : arg_powerbase1);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %powerbase0.powerbase113 = select i1 %6, i32* %powerbase0, i32* %powerbase1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_2))
begin
get_rx_power_val_by_reg_0_powerbase0_powerbase113_reg <= get_rx_power_val_by_reg_0_powerbase0_powerbase113;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_powerbase0_powerbase113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_powerbase0_powerbase113_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %7 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 9, i32 0*/
begin
get_rx_power_val_by_reg_0_7 = (get_rx_power_val_by_reg_0_2 + 36);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %7 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 9, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_7_reg <= get_rx_power_val_by_reg_0_7;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_7_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %8 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 2*/
begin
get_rx_power_val_by_reg_0_8 = (get_rx_power_val_by_reg_0_2 + 8);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %8 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_8_reg <= get_rx_power_val_by_reg_0_8;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_8_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %9 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 3*/
begin
get_rx_power_val_by_reg_0_9 = (get_rx_power_val_by_reg_0_2 + 12);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %9 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_9_reg <= get_rx_power_val_by_reg_0_9;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_9_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %10 = icmp slt i32 %channel, 3*/
begin
get_rx_power_val_by_reg_0_10 = ($signed(arg_channel) < $signed(32'd3));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %10 = icmp slt i32 %channel, 3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_10_reg <= get_rx_power_val_by_reg_0_10;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_10_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %11 = icmp slt i32 %channel, 6*/
begin
get_rx_power_val_by_reg_0_11 = ($signed(arg_channel) < $signed(32'd6));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %11 = icmp slt i32 %channel, 6*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_11_reg <= get_rx_power_val_by_reg_0_11;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_11_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %12 = icmp slt i32 %channel, 9*/
begin
get_rx_power_val_by_reg_0_12 = ($signed(arg_channel) < $signed(32'd9));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %12 = icmp slt i32 %channel, 9*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_12_reg <= get_rx_power_val_by_reg_0_12;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_12_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %13 = icmp slt i32 %channel, 12*/
begin
get_rx_power_val_by_reg_0_13 = ($signed(arg_channel) < $signed(32'd12));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %13 = icmp slt i32 %channel, 12*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_13_reg <= get_rx_power_val_by_reg_0_13;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_13_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %14 = icmp slt i32 %channel, 14*/
begin
get_rx_power_val_by_reg_0_14 = ($signed(arg_channel) < $signed(32'd14));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %14 = icmp slt i32 %channel, 14*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_14_reg <= get_rx_power_val_by_reg_0_14;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_14_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %15 = add nsw i32 %channel, -1*/
begin
get_rx_power_val_by_reg_0_15 = (arg_channel + -32'd1);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %15 = add nsw i32 %channel, -1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0_15_reg <= get_rx_power_val_by_reg_0_15;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_15_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %16 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 4*/
begin
get_rx_power_val_by_reg_0_16 = (get_rx_power_val_by_reg_0_2 + 16);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %16 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_16_reg <= get_rx_power_val_by_reg_0_16;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_16_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %17 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 8*/
begin
get_rx_power_val_by_reg_0_17 = (get_rx_power_val_by_reg_0_2 + 32);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %17 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 8*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_17_reg <= get_rx_power_val_by_reg_0_17;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_17_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %18 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 6*/
begin
get_rx_power_val_by_reg_0_18 = (get_rx_power_val_by_reg_0_2 + 24);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %18 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 6*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_18_reg <= get_rx_power_val_by_reg_0_18;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_18_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %19 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 7*/
begin
get_rx_power_val_by_reg_0_19 = (get_rx_power_val_by_reg_0_2 + 28);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %19 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 7*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_19_reg <= get_rx_power_val_by_reg_0_19;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_19_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %20 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 5*/
begin
get_rx_power_val_by_reg_0_20 = (get_rx_power_val_by_reg_0_2 + 20);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %20 = getelementptr inbounds %struct.hal_data_8188e* %2, i32 0, i32 5*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
get_rx_power_val_by_reg_0_20_reg <= get_rx_power_val_by_reg_0_20;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0_20_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %0*/
/*   %.not = icmp ne i32 %channel, 14*/
begin
get_rx_power_val_by_reg_0__not = (arg_channel != 32'd14);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %0*/
/*   %.not = icmp ne i32 %channel, 14*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
get_rx_power_val_by_reg_0__not_reg <= get_rx_power_val_by_reg_0__not;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_0__not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_0__not_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %22 = phi i32 [ 0, %0 ], [ %97, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_22 = 32'd0;
end
/* get_rx_power_val_by_reg: %21*/
/*   %22 = phi i32 [ 0, %0 ], [ %97, %94 ]*/
else /* if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0))) */
begin
get_rx_power_val_by_reg_21_22 = get_rx_power_val_by_reg_94_97_reg;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %22 = phi i32 [ 0, %0 ], [ %97, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_22_reg <= get_rx_power_val_by_reg_21_22;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_22_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %21*/
/*   %22 = phi i32 [ 0, %0 ], [ %97, %94 ]*/
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0)))
begin
get_rx_power_val_by_reg_21_22_reg <= get_rx_power_val_by_reg_21_22;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_22_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %pwr_diff.016 = phi i32 [ 0, %0 ], [ %pwr_diff.3, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_pwr_diff_016 = 32'd0;
end
/* get_rx_power_val_by_reg: %21*/
/*   %pwr_diff.016 = phi i32 [ 0, %0 ], [ %pwr_diff.3, %94 ]*/
else /* if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0))) */
begin
get_rx_power_val_by_reg_21_pwr_diff_016 = get_rx_power_val_by_reg_94_pwr_diff_3_reg;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %pwr_diff.016 = phi i32 [ 0, %0 ], [ %pwr_diff.3, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_pwr_diff_016_reg <= get_rx_power_val_by_reg_21_pwr_diff_016;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_pwr_diff_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_pwr_diff_016_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %21*/
/*   %pwr_diff.016 = phi i32 [ 0, %0 ], [ %pwr_diff.3, %94 ]*/
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0)))
begin
get_rx_power_val_by_reg_21_pwr_diff_016_reg <= get_rx_power_val_by_reg_21_pwr_diff_016;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_pwr_diff_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_pwr_diff_016_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %chnlGroup.015 = phi i32 [ 0, %0 ], [ %chnlGroup.3, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_chnlGroup_015 = 32'd0;
end
/* get_rx_power_val_by_reg: %21*/
/*   %chnlGroup.015 = phi i32 [ 0, %0 ], [ %chnlGroup.3, %94 ]*/
else /* if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0))) */
begin
get_rx_power_val_by_reg_21_chnlGroup_015 = get_rx_power_val_by_reg_94_chnlGroup_3_reg;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %chnlGroup.015 = phi i32 [ 0, %0 ], [ %chnlGroup.3, %94 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_21_chnlGroup_015_reg <= get_rx_power_val_by_reg_21_chnlGroup_015;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_chnlGroup_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_chnlGroup_015_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %21*/
/*   %chnlGroup.015 = phi i32 [ 0, %0 ], [ %chnlGroup.3, %94 ]*/
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_64) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_94_exitcond_reg == 1'd0)))
begin
get_rx_power_val_by_reg_21_chnlGroup_015_reg <= get_rx_power_val_by_reg_21_chnlGroup_015;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_chnlGroup_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_chnlGroup_015_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %scevgep18 = getelementptr i32* %out_val, i32 %22*/
begin
get_rx_power_val_by_reg_21_scevgep18 = (arg_out_val + (4 * get_rx_power_val_by_reg_21_22_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %scevgep18 = getelementptr i32* %out_val, i32 %22*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6))
begin
get_rx_power_val_by_reg_21_scevgep18_reg <= get_rx_power_val_by_reg_21_scevgep18;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_scevgep18_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %.in = getelementptr i32* %powerbase0.powerbase113, i32 %22*/
begin
get_rx_power_val_by_reg_21__in = (get_rx_power_val_by_reg_0_powerbase0_powerbase113_reg + (4 * get_rx_power_val_by_reg_21_22_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %.in = getelementptr i32* %powerbase0.powerbase113, i32 %22*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6))
begin
get_rx_power_val_by_reg_21__in_reg <= get_rx_power_val_by_reg_21__in;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21__in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21__in_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %23 = icmp ne i32 %22, 0*/
begin
get_rx_power_val_by_reg_21_23 = (get_rx_power_val_by_reg_21_22_reg != 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %23 = icmp ne i32 %22, 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6))
begin
get_rx_power_val_by_reg_21_23_reg <= get_rx_power_val_by_reg_21_23;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_23_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %24 = select i1 %23, i32 8, i32 0*/
begin
get_rx_power_val_by_reg_21_24 = (get_rx_power_val_by_reg_21_23 ? 32'd8 : 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %24 = select i1 %23, i32 8, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6))
begin
get_rx_power_val_by_reg_21_24_reg <= get_rx_power_val_by_reg_21_24;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_24_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %21*/
/*   %25 = add nsw i32 %24, %index*/
begin
get_rx_power_val_by_reg_21_25 = (get_rx_power_val_by_reg_21_24 + arg_index);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %21*/
/*   %25 = add nsw i32 %24, %index*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_21_6))
begin
get_rx_power_val_by_reg_21_25_reg <= get_rx_power_val_by_reg_21_25;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_21_25_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_26_27 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
get_rx_power_val_by_reg_26_27_reg <= get_rx_power_val_by_reg_26_27;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_27_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_26_28 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
get_rx_power_val_by_reg_26_28_reg <= get_rx_power_val_by_reg_26_28;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_28_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %29 = getelementptr inbounds i32* %28, i32 %25*/
begin
get_rx_power_val_by_reg_26_29 = (get_rx_power_val_by_reg_26_28 + (4 * get_rx_power_val_by_reg_21_25_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %29 = getelementptr inbounds i32* %28, i32 %25*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
get_rx_power_val_by_reg_26_29_reg <= get_rx_power_val_by_reg_26_29;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_29_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_26_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13))
begin
get_rx_power_val_by_reg_26_30_reg <= get_rx_power_val_by_reg_26_30;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_30_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
begin
get_rx_power_val_by_reg_26_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
get_rx_power_val_by_reg_26_31_reg <= get_rx_power_val_by_reg_26_31;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_31_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %26*/
/*   %32 = add nsw i32 %31, %30*/
begin
get_rx_power_val_by_reg_26_32 = (get_rx_power_val_by_reg_26_31_reg + get_rx_power_val_by_reg_26_30);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %26*/
/*   %32 = add nsw i32 %31, %30*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13))
begin
get_rx_power_val_by_reg_26_32_reg <= get_rx_power_val_by_reg_26_32;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_26_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_26_32_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg___crit_edge28_33 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_33_reg <= get_rx_power_val_by_reg___crit_edge28_33;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_33_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %34 = icmp eq i32 %33, 1*/
begin
get_rx_power_val_by_reg___crit_edge28_34 = (get_rx_power_val_by_reg___crit_edge28_33 == 32'd1);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %34 = icmp eq i32 %33, 1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_34_reg <= get_rx_power_val_by_reg___crit_edge28_34;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_34_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1 = select i1 %34, i32 0, i32 %chnlGroup.015*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1 = (get_rx_power_val_by_reg___crit_edge28_34 ? 32'd0 : get_rx_power_val_by_reg_21_chnlGroup_015_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1 = select i1 %34, i32 0, i32 %chnlGroup.015*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg___crit_edge28_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_35_reg <= get_rx_power_val_by_reg___crit_edge28_35;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_35_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %36 = icmp slt i32 %33, %35*/
begin
get_rx_power_val_by_reg___crit_edge28_36 = ($signed(get_rx_power_val_by_reg___crit_edge28_33) < $signed(get_rx_power_val_by_reg___crit_edge28_35));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %36 = icmp slt i32 %33, %35*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_36_reg <= get_rx_power_val_by_reg___crit_edge28_36;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_36_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge = or i1 %36, %10*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge = (get_rx_power_val_by_reg___crit_edge28_36 | get_rx_power_val_by_reg_0_10_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge = or i1 %36, %10*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux = select i1 %36, i32 %chnlGroup.1, i32 0*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux = (get_rx_power_val_by_reg___crit_edge28_36 ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1 : 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux = select i1 %36, i32 %chnlGroup.1, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge34 = or i1 %brmerge, %11*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge34 = (get_rx_power_val_by_reg___crit_edge28_brmerge | get_rx_power_val_by_reg_0_11_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge34 = or i1 %brmerge, %11*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge34_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge34;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge34_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux = select i1 %brmerge, i32 %chnlGroup.1.mux, i32 1*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux = (get_rx_power_val_by_reg___crit_edge28_brmerge_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_reg : 32'd1);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux = select i1 %brmerge, i32 %chnlGroup.1.mux, i32 1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge35 = or i1 %brmerge34, %12*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge35 = (get_rx_power_val_by_reg___crit_edge28_brmerge34 | get_rx_power_val_by_reg_0_12_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge35 = or i1 %brmerge34, %12*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge35_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge35;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge35_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux = select i1 %brmerge34, i32 %chnlGroup.1.mux.mux, i32 2*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux = (get_rx_power_val_by_reg___crit_edge28_brmerge34_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux : 32'd2);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux = select i1 %brmerge34, i32 %chnlGroup.1.mux.mux, i32 2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge36 = or i1 %brmerge35, %13*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge36 = (get_rx_power_val_by_reg___crit_edge28_brmerge35 | get_rx_power_val_by_reg_0_13_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge36 = or i1 %brmerge35, %13*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge36_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge36;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge36_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux = select i1 %brmerge35, i32 %chnlGroup.1.mux.mux.mux, i32 3*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux = (get_rx_power_val_by_reg___crit_edge28_brmerge35_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux : 32'd3);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux = select i1 %brmerge35, i32 %chnlGroup.1.mux.mux.mux, i32 3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge37 = or i1 %brmerge36, %14*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge37 = (get_rx_power_val_by_reg___crit_edge28_brmerge36 | get_rx_power_val_by_reg_0_14_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge37 = or i1 %brmerge36, %14*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge37_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge37;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge37_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux.mux = select i1 %brmerge36, i32 %chnlGroup.1.mux.mux.mux.mux, i32 4*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux = (get_rx_power_val_by_reg___crit_edge28_brmerge36_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_reg : 32'd4);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux.mux = select i1 %brmerge36, i32 %chnlGroup.1.mux.mux.mux.mux, i32 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge38 = or i1 %brmerge37, %.not*/
begin
get_rx_power_val_by_reg___crit_edge28_brmerge38 = (get_rx_power_val_by_reg___crit_edge28_brmerge37 | get_rx_power_val_by_reg_0__not_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %brmerge38 = or i1 %brmerge37, %.not*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_16))
begin
get_rx_power_val_by_reg___crit_edge28_brmerge38_reg <= get_rx_power_val_by_reg___crit_edge28_brmerge38;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_brmerge38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_brmerge38_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux.mux.mux = select i1 %brmerge37, i32 %chnlGroup.1.mux.mux.mux.mux.mux, i32 %chnlGroup.1*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux = (get_rx_power_val_by_reg___crit_edge28_brmerge37_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux : get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.1.mux.mux.mux.mux.mux.mux = select i1 %brmerge37, i32 %chnlGroup.1.mux.mux.mux.mux.mux, i32 %chnlGroup.1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.2 = select i1 %brmerge38, i32 %chnlGroup.1.mux.mux.mux.mux.mux.mux, i32 5*/
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_2 = (get_rx_power_val_by_reg___crit_edge28_brmerge38_reg ? get_rx_power_val_by_reg___crit_edge28_chnlGroup_1_mux_mux_mux_mux_mux_mux : 32'd5);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %chnlGroup.2 = select i1 %brmerge38, i32 %chnlGroup.1.mux.mux.mux.mux.mux.mux, i32 5*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_18))
begin
get_rx_power_val_by_reg___crit_edge28_chnlGroup_2_reg <= get_rx_power_val_by_reg___crit_edge28_chnlGroup_2;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_chnlGroup_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_chnlGroup_2_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg___crit_edge28_37 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17))
begin
get_rx_power_val_by_reg___crit_edge28_37_reg <= get_rx_power_val_by_reg___crit_edge28_37;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_37_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %38 = getelementptr inbounds i32** %37, i32 %chnlGroup.2*/
begin
get_rx_power_val_by_reg___crit_edge28_38 = (get_rx_power_val_by_reg___crit_edge28_37_reg + (4 * get_rx_power_val_by_reg___crit_edge28_chnlGroup_2_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %38 = getelementptr inbounds i32** %37, i32 %chnlGroup.2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19))
begin
get_rx_power_val_by_reg___crit_edge28_38_reg <= get_rx_power_val_by_reg___crit_edge28_38;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_38_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg___crit_edge28_39 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
get_rx_power_val_by_reg___crit_edge28_39_reg <= get_rx_power_val_by_reg___crit_edge28_39;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_39_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %40 = getelementptr inbounds i32* %39, i32 %25*/
begin
get_rx_power_val_by_reg___crit_edge28_40 = (get_rx_power_val_by_reg___crit_edge28_39 + (4 * get_rx_power_val_by_reg_21_25_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %40 = getelementptr inbounds i32* %39, i32 %25*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
get_rx_power_val_by_reg___crit_edge28_40_reg <= get_rx_power_val_by_reg___crit_edge28_40;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_40_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg___crit_edge28_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23))
begin
get_rx_power_val_by_reg___crit_edge28_41_reg <= get_rx_power_val_by_reg___crit_edge28_41;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_41_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
begin
get_rx_power_val_by_reg___crit_edge28_42 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_17))
begin
get_rx_power_val_by_reg___crit_edge28_42_reg <= get_rx_power_val_by_reg___crit_edge28_42;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_42_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %43 = add nsw i32 %42, %41*/
begin
get_rx_power_val_by_reg___crit_edge28_43 = (get_rx_power_val_by_reg___crit_edge28_42_reg + get_rx_power_val_by_reg___crit_edge28_41);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %43 = add nsw i32 %42, %41*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23))
begin
get_rx_power_val_by_reg___crit_edge28_43_reg <= get_rx_power_val_by_reg___crit_edge28_43;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge28_43_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
begin
get_rx_power_val_by_reg_44_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26))
begin
get_rx_power_val_by_reg_44_45_reg <= get_rx_power_val_by_reg_44_45;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_44_45_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_47_48 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
get_rx_power_val_by_reg_47_48_reg <= get_rx_power_val_by_reg_47_48;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47_48_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %scevgep19 = getelementptr i32** %48, i32 %22*/
begin
get_rx_power_val_by_reg_47_scevgep19 = (get_rx_power_val_by_reg_47_48 + (4 * get_rx_power_val_by_reg_21_22_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %scevgep19 = getelementptr i32** %48, i32 %22*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
get_rx_power_val_by_reg_47_scevgep19_reg <= get_rx_power_val_by_reg_47_scevgep19;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47_scevgep19_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_47_49 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
get_rx_power_val_by_reg_47_49_reg <= get_rx_power_val_by_reg_47_49;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47_49_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %50 = getelementptr inbounds i32* %49, i32 %15*/
begin
get_rx_power_val_by_reg_47_50 = (get_rx_power_val_by_reg_47_49 + (4 * get_rx_power_val_by_reg_0_15_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %50 = getelementptr inbounds i32* %49, i32 %15*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
get_rx_power_val_by_reg_47_50_reg <= get_rx_power_val_by_reg_47_50;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47_50_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_47_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34))
begin
get_rx_power_val_by_reg_47_51_reg <= get_rx_power_val_by_reg_47_51;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47_51_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_47__pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
get_rx_power_val_by_reg_47__pre_reg <= get_rx_power_val_by_reg_47__pre;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_47__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_47__pre_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_52_53 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37))
begin
get_rx_power_val_by_reg_52_53_reg <= get_rx_power_val_by_reg_52_53;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_52_53_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %52*/
/*   %54 = icmp eq i32 %53, 0*/
begin
get_rx_power_val_by_reg_52_54 = (get_rx_power_val_by_reg_52_53 == 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %52*/
/*   %54 = icmp eq i32 %53, 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37))
begin
get_rx_power_val_by_reg_52_54_reg <= get_rx_power_val_by_reg_52_54;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_52_54_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_55_56 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
get_rx_power_val_by_reg_55_56_reg <= get_rx_power_val_by_reg_55_56;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_55_56_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %55*/
/*   %scevgep20 = getelementptr i32** %56, i32 %22*/
begin
get_rx_power_val_by_reg_55_scevgep20 = (get_rx_power_val_by_reg_55_56 + (4 * get_rx_power_val_by_reg_21_22_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %55*/
/*   %scevgep20 = getelementptr i32** %56, i32 %22*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
get_rx_power_val_by_reg_55_scevgep20_reg <= get_rx_power_val_by_reg_55_scevgep20;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_55_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_55_scevgep20_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_55_57 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
get_rx_power_val_by_reg_55_57_reg <= get_rx_power_val_by_reg_55_57;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_55_57_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %55*/
/*   %58 = getelementptr inbounds i32* %57, i32 %15*/
begin
get_rx_power_val_by_reg_55_58 = (get_rx_power_val_by_reg_55_57 + (4 * get_rx_power_val_by_reg_0_15_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %55*/
/*   %58 = getelementptr inbounds i32* %57, i32 %15*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
get_rx_power_val_by_reg_55_58_reg <= get_rx_power_val_by_reg_55_58;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_55_58_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_55_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44))
begin
get_rx_power_val_by_reg_55_59_reg <= get_rx_power_val_by_reg_55_59;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_55_59_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_60 = get_rx_power_val_by_reg_47__pre_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
else if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_60 = get_rx_power_val_by_reg_52_53;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
else /* if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd0))) */
begin
get_rx_power_val_by_reg___crit_edge_60 = get_rx_power_val_by_reg_52_53_reg;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_60_reg <= get_rx_power_val_by_reg___crit_edge_60;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_60_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_60_reg <= get_rx_power_val_by_reg___crit_edge_60;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_60_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %60 = phi i32 [ %.pre, %47 ], [ %53, %55 ], [ %53, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_60_reg <= get_rx_power_val_by_reg___crit_edge_60;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_60_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1 = get_rx_power_val_by_reg_47_51;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
else if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1 = get_rx_power_val_by_reg_21_pwr_diff_016_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
else /* if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd0))) */
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1 = get_rx_power_val_by_reg_55_59;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_34) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg <= get_rx_power_val_by_reg___crit_edge_pwr_diff_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_pwr_diff_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
if ((((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_37) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_52_54 == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg <= get_rx_power_val_by_reg___crit_edge_pwr_diff_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_pwr_diff_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.1 = phi i32 [ %51, %47 ], [ %59, %55 ], [ %pwr_diff.016, %52 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_44) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg <= get_rx_power_val_by_reg___crit_edge_pwr_diff_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_pwr_diff_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %61 = icmp eq i32 %60, 0*/
begin
get_rx_power_val_by_reg___crit_edge_61 = (get_rx_power_val_by_reg___crit_edge_60_reg == 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %61 = icmp eq i32 %60, 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
get_rx_power_val_by_reg___crit_edge_61_reg <= get_rx_power_val_by_reg___crit_edge_61;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_61_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9.in = select i1 %61, i32*** %18, i32*** %19*/
begin
get_rx_power_val_by_reg___crit_edge__pn9_in = (get_rx_power_val_by_reg___crit_edge_61_reg ? get_rx_power_val_by_reg_0_18_reg : get_rx_power_val_by_reg_0_19_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9.in = select i1 %61, i32*** %18, i32*** %19*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46))
begin
get_rx_power_val_by_reg___crit_edge__pn9_in_reg <= get_rx_power_val_by_reg___crit_edge__pn9_in;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge__pn9_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge__pn9_in_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
begin
get_rx_power_val_by_reg___crit_edge__pn9 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
get_rx_power_val_by_reg___crit_edge__pn9_reg <= get_rx_power_val_by_reg___crit_edge__pn9;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge__pn9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge__pn9_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn.in = getelementptr i32** %.pn9, i32 %22*/
begin
get_rx_power_val_by_reg___crit_edge__pn_in = (get_rx_power_val_by_reg___crit_edge__pn9 + (4 * get_rx_power_val_by_reg_21_22_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn.in = getelementptr i32** %.pn9, i32 %22*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
get_rx_power_val_by_reg___crit_edge__pn_in_reg <= get_rx_power_val_by_reg___crit_edge__pn_in;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge__pn_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge__pn_in_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
begin
get_rx_power_val_by_reg___crit_edge__pn = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
get_rx_power_val_by_reg___crit_edge__pn_reg <= get_rx_power_val_by_reg___crit_edge__pn;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge__pn_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0.in = getelementptr inbounds i32* %.pn, i32 %15*/
begin
get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in = (get_rx_power_val_by_reg___crit_edge__pn + (4 * get_rx_power_val_by_reg_0_15_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0.in = getelementptr inbounds i32* %.pn, i32 %15*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in_reg <= get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
begin
get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_reg <= get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %62 = icmp slt i32 %pwr_diff.1, %customer_pwr_limit.0*/
begin
get_rx_power_val_by_reg___crit_edge_62 = ($signed(get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg) < $signed(get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %62 = icmp slt i32 %pwr_diff.1, %customer_pwr_limit.0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_62_reg <= get_rx_power_val_by_reg___crit_edge_62;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_62_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %63 = sub nsw i32 %customer_pwr_limit.0, %pwr_diff.1*/
begin
get_rx_power_val_by_reg___crit_edge_63 = (get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0 - get_rx_power_val_by_reg___crit_edge_pwr_diff_1_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %63 = sub nsw i32 %customer_pwr_limit.0, %pwr_diff.1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_63_reg <= get_rx_power_val_by_reg___crit_edge_63;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_63_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.2 = select i1 %62, i32 %63, i32 0*/
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_2 = (get_rx_power_val_by_reg___crit_edge_62 ? get_rx_power_val_by_reg___crit_edge_63 : 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %pwr_diff.2 = select i1 %62, i32 %63, i32 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg <= get_rx_power_val_by_reg___crit_edge_pwr_diff_2;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_pwr_diff_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg___crit_edge_64 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
get_rx_power_val_by_reg___crit_edge_64_reg <= get_rx_power_val_by_reg___crit_edge_64;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_64_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg___crit_edge_65 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
get_rx_power_val_by_reg___crit_edge_65_reg <= get_rx_power_val_by_reg___crit_edge_65;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_65_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %66 = getelementptr inbounds i32* %65, i32 %25*/
begin
get_rx_power_val_by_reg___crit_edge_66 = (get_rx_power_val_by_reg___crit_edge_65 + (4 * get_rx_power_val_by_reg_21_25_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %66 = getelementptr inbounds i32* %65, i32 %25*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
get_rx_power_val_by_reg___crit_edge_66_reg <= get_rx_power_val_by_reg___crit_edge_66;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_66_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg___crit_edge_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_67_reg <= get_rx_power_val_by_reg___crit_edge_67;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_67_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %68 = and i32 %67, 127*/
begin
get_rx_power_val_by_reg___crit_edge_68 = (get_rx_power_val_by_reg___crit_edge_67 & 32'd127);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %68 = and i32 %67, 127*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_68_reg <= get_rx_power_val_by_reg___crit_edge_68;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_68_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %69 = icmp sgt i32 %68, %pwr_diff.2*/
begin
get_rx_power_val_by_reg___crit_edge_69 = ($signed(get_rx_power_val_by_reg___crit_edge_68_reg) > $signed(get_rx_power_val_by_reg___crit_edge_pwr_diff_2));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %69 = icmp sgt i32 %68, %pwr_diff.2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_69_reg <= get_rx_power_val_by_reg___crit_edge_69;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_69_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge = select i1 %69, i32 %pwr_diff.2, i32 %68*/
begin
get_rx_power_val_by_reg___crit_edge_storemerge = (get_rx_power_val_by_reg___crit_edge_69_reg ? get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg : get_rx_power_val_by_reg___crit_edge_68_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge = select i1 %69, i32 %pwr_diff.2, i32 %68*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_storemerge_reg <= get_rx_power_val_by_reg___crit_edge_storemerge;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %70 = lshr i32 %67, 8*/
begin
get_rx_power_val_by_reg___crit_edge_70 = (get_rx_power_val_by_reg___crit_edge_67 >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %70 = lshr i32 %67, 8*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_70_reg <= get_rx_power_val_by_reg___crit_edge_70;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_70_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %71 = and i32 %70, 127*/
begin
get_rx_power_val_by_reg___crit_edge_71 = (get_rx_power_val_by_reg___crit_edge_70 & 32'd127);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %71 = and i32 %70, 127*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_71_reg <= get_rx_power_val_by_reg___crit_edge_71;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_71_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %72 = icmp sgt i32 %71, %pwr_diff.2*/
begin
get_rx_power_val_by_reg___crit_edge_72 = ($signed(get_rx_power_val_by_reg___crit_edge_71_reg) > $signed(get_rx_power_val_by_reg___crit_edge_pwr_diff_2));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %72 = icmp sgt i32 %71, %pwr_diff.2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_72_reg <= get_rx_power_val_by_reg___crit_edge_72;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_72_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.1 = select i1 %72, i32 %pwr_diff.2, i32 %71*/
begin
get_rx_power_val_by_reg___crit_edge_storemerge_1 = (get_rx_power_val_by_reg___crit_edge_72_reg ? get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg : get_rx_power_val_by_reg___crit_edge_71_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.1 = select i1 %72, i32 %pwr_diff.2, i32 %71*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_storemerge_1_reg <= get_rx_power_val_by_reg___crit_edge_storemerge_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_storemerge_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_storemerge_1_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %73 = lshr i32 %67, 16*/
begin
get_rx_power_val_by_reg___crit_edge_73 = (get_rx_power_val_by_reg___crit_edge_67 >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %73 = lshr i32 %67, 16*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_73_reg <= get_rx_power_val_by_reg___crit_edge_73;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_73_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %74 = and i32 %73, 127*/
begin
get_rx_power_val_by_reg___crit_edge_74 = (get_rx_power_val_by_reg___crit_edge_73 & 32'd127);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %74 = and i32 %73, 127*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_74_reg <= get_rx_power_val_by_reg___crit_edge_74;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_74_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %75 = icmp sgt i32 %74, %pwr_diff.2*/
begin
get_rx_power_val_by_reg___crit_edge_75 = ($signed(get_rx_power_val_by_reg___crit_edge_74_reg) > $signed(get_rx_power_val_by_reg___crit_edge_pwr_diff_2));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %75 = icmp sgt i32 %74, %pwr_diff.2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_75_reg <= get_rx_power_val_by_reg___crit_edge_75;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_75_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.2 = select i1 %75, i32 %pwr_diff.2, i32 %74*/
begin
get_rx_power_val_by_reg___crit_edge_storemerge_2 = (get_rx_power_val_by_reg___crit_edge_75_reg ? get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg : get_rx_power_val_by_reg___crit_edge_74_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.2 = select i1 %75, i32 %pwr_diff.2, i32 %74*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_storemerge_2_reg <= get_rx_power_val_by_reg___crit_edge_storemerge_2;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_storemerge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_storemerge_2_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %76 = lshr i32 %67, 24*/
begin
get_rx_power_val_by_reg___crit_edge_76 = (get_rx_power_val_by_reg___crit_edge_67 >>> (32'd24 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %76 = lshr i32 %67, 24*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_76_reg <= get_rx_power_val_by_reg___crit_edge_76;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_76_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %77 = and i32 %76, 127*/
begin
get_rx_power_val_by_reg___crit_edge_77 = (get_rx_power_val_by_reg___crit_edge_76 & 32'd127);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %77 = and i32 %76, 127*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_51))
begin
get_rx_power_val_by_reg___crit_edge_77_reg <= get_rx_power_val_by_reg___crit_edge_77;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_77_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %78 = icmp sgt i32 %77, %pwr_diff.2*/
begin
get_rx_power_val_by_reg___crit_edge_78 = ($signed(get_rx_power_val_by_reg___crit_edge_77_reg) > $signed(get_rx_power_val_by_reg___crit_edge_pwr_diff_2));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %78 = icmp sgt i32 %77, %pwr_diff.2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_52))
begin
get_rx_power_val_by_reg___crit_edge_78_reg <= get_rx_power_val_by_reg___crit_edge_78;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_78_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.3 = select i1 %78, i32 %pwr_diff.2, i32 %77*/
begin
get_rx_power_val_by_reg___crit_edge_storemerge_3 = (get_rx_power_val_by_reg___crit_edge_78_reg ? get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg : get_rx_power_val_by_reg___crit_edge_77_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %storemerge.3 = select i1 %78, i32 %pwr_diff.2, i32 %77*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_storemerge_3_reg <= get_rx_power_val_by_reg___crit_edge_storemerge_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_storemerge_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_storemerge_3_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %79 = shl i32 %storemerge.3, 24*/
begin
get_rx_power_val_by_reg___crit_edge_79 = (get_rx_power_val_by_reg___crit_edge_storemerge_3 <<< (32'd24 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %79 = shl i32 %storemerge.3, 24*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_79_reg <= get_rx_power_val_by_reg___crit_edge_79;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_79_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %80 = shl i32 %storemerge.2, 16*/
begin
get_rx_power_val_by_reg___crit_edge_80 = (get_rx_power_val_by_reg___crit_edge_storemerge_2 <<< (32'd16 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %80 = shl i32 %storemerge.2, 16*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_80_reg <= get_rx_power_val_by_reg___crit_edge_80;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_80_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %81 = shl i32 %storemerge.1, 8*/
begin
get_rx_power_val_by_reg___crit_edge_81 = (get_rx_power_val_by_reg___crit_edge_storemerge_1 <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %81 = shl i32 %storemerge.1, 8*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_81_reg <= get_rx_power_val_by_reg___crit_edge_81;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_81_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %82 = or i32 %80, %79*/
begin
get_rx_power_val_by_reg___crit_edge_82 = (get_rx_power_val_by_reg___crit_edge_80 | get_rx_power_val_by_reg___crit_edge_79);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %82 = or i32 %80, %79*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_82_reg <= get_rx_power_val_by_reg___crit_edge_82;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_82_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %83 = or i32 %82, %storemerge*/
begin
get_rx_power_val_by_reg___crit_edge_83 = (get_rx_power_val_by_reg___crit_edge_82 | get_rx_power_val_by_reg___crit_edge_storemerge);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %83 = or i32 %82, %storemerge*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_83_reg <= get_rx_power_val_by_reg___crit_edge_83;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_83_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %84 = or i32 %83, %81*/
begin
get_rx_power_val_by_reg___crit_edge_84 = (get_rx_power_val_by_reg___crit_edge_83 | get_rx_power_val_by_reg___crit_edge_81);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %84 = or i32 %83, %81*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_84_reg <= get_rx_power_val_by_reg___crit_edge_84;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_84_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
begin
get_rx_power_val_by_reg___crit_edge_85 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
get_rx_power_val_by_reg___crit_edge_85_reg <= get_rx_power_val_by_reg___crit_edge_85;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_85_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %86 = add nsw i32 %84, %85*/
begin
get_rx_power_val_by_reg___crit_edge_86 = (get_rx_power_val_by_reg___crit_edge_84 + get_rx_power_val_by_reg___crit_edge_85_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %86 = add nsw i32 %84, %85*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53))
begin
get_rx_power_val_by_reg___crit_edge_86_reg <= get_rx_power_val_by_reg___crit_edge_86;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg___crit_edge_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg___crit_edge_86_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_87_88 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
get_rx_power_val_by_reg_87_88_reg <= get_rx_power_val_by_reg_87_88;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_88_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
begin
get_rx_power_val_by_reg_87_89 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
get_rx_power_val_by_reg_87_89_reg <= get_rx_power_val_by_reg_87_89;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_89_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %90 = getelementptr inbounds i32* %89, i32 %25*/
begin
get_rx_power_val_by_reg_87_90 = (get_rx_power_val_by_reg_87_89 + (4 * get_rx_power_val_by_reg_21_25_reg));
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %90 = getelementptr inbounds i32* %89, i32 %25*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
get_rx_power_val_by_reg_87_90_reg <= get_rx_power_val_by_reg_87_90;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_90_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_87_91 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60))
begin
get_rx_power_val_by_reg_87_91_reg <= get_rx_power_val_by_reg_87_91;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_91_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
begin
get_rx_power_val_by_reg_87_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
get_rx_power_val_by_reg_87_92_reg <= get_rx_power_val_by_reg_87_92;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_92_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %87*/
/*   %93 = add nsw i32 %92, %91*/
begin
get_rx_power_val_by_reg_87_93 = (get_rx_power_val_by_reg_87_92_reg + get_rx_power_val_by_reg_87_91);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %87*/
/*   %93 = add nsw i32 %92, %91*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60))
begin
get_rx_power_val_by_reg_87_93_reg <= get_rx_power_val_by_reg_87_93;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_87_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_87_93_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3 = 32'd0;
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3 = get_rx_power_val_by_reg___crit_edge28_chnlGroup_2_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3 = get_rx_power_val_by_reg_21_chnlGroup_015_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3 = 32'd0;
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
else /* if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0))) */
begin
get_rx_power_val_by_reg_94_chnlGroup_3 = 32'd0;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3_reg <= get_rx_power_val_by_reg_94_chnlGroup_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_chnlGroup_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_chnlGroup_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3_reg <= get_rx_power_val_by_reg_94_chnlGroup_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_chnlGroup_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_chnlGroup_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3_reg <= get_rx_power_val_by_reg_94_chnlGroup_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_chnlGroup_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_chnlGroup_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3_reg <= get_rx_power_val_by_reg_94_chnlGroup_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_chnlGroup_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_chnlGroup_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %chnlGroup.3 = phi i32 [ 0, %87 ], [ 0, %._crit_edge ], [ %chnlGroup.015, %44 ], [ %chnlGroup.2, %._crit_edge28 ], [ 0, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_chnlGroup_3_reg <= get_rx_power_val_by_reg_94_chnlGroup_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_chnlGroup_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_chnlGroup_3_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3 = get_rx_power_val_by_reg_21_pwr_diff_016_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3 = get_rx_power_val_by_reg_21_pwr_diff_016_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3 = get_rx_power_val_by_reg_21_pwr_diff_016_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3 = get_rx_power_val_by_reg___crit_edge_pwr_diff_2_reg;
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
else /* if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0))) */
begin
get_rx_power_val_by_reg_94_pwr_diff_3 = get_rx_power_val_by_reg_21_pwr_diff_016_reg;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3_reg <= get_rx_power_val_by_reg_94_pwr_diff_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_pwr_diff_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_pwr_diff_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3_reg <= get_rx_power_val_by_reg_94_pwr_diff_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_pwr_diff_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_pwr_diff_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3_reg <= get_rx_power_val_by_reg_94_pwr_diff_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_pwr_diff_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_pwr_diff_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3_reg <= get_rx_power_val_by_reg_94_pwr_diff_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_pwr_diff_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_pwr_diff_3_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %pwr_diff.3 = phi i32 [ %pwr_diff.016, %87 ], [ %pwr_diff.2, %._crit_edge ], [ %pwr_diff.016, %44 ], [ %pwr_diff.016, %._crit_edge28 ], [ %pwr_diff.016, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_pwr_diff_3_reg <= get_rx_power_val_by_reg_94_pwr_diff_3;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_pwr_diff_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_pwr_diff_3_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0 = get_rx_power_val_by_reg_26_32;
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0 = get_rx_power_val_by_reg___crit_edge28_43;
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0 = get_rx_power_val_by_reg_44_45;
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
else if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0 = get_rx_power_val_by_reg___crit_edge_86;
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
else /* if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0))) */
begin
get_rx_power_val_by_reg_94_write_val_0 = get_rx_power_val_by_reg_87_93;
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_13) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0_reg <= get_rx_power_val_by_reg_94_write_val_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_0_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_23) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0_reg <= get_rx_power_val_by_reg_94_write_val_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_0_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_26) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0_reg <= get_rx_power_val_by_reg_94_write_val_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_0_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_53) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0_reg <= get_rx_power_val_by_reg_94_write_val_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_0_reg"); $finish; end
end
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.0 = phi i32 [ %93, %87 ], [ %86, %._crit_edge ], [ %45, %44 ], [ %43, %._crit_edge28 ], [ %32, %26 ]*/
if (((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_60) & (memory_controller_waitrequest == 1'd0)))
begin
get_rx_power_val_by_reg_94_write_val_0_reg <= get_rx_power_val_by_reg_94_write_val_0;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_0_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
begin
get_rx_power_val_by_reg_94_95 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
get_rx_power_val_by_reg_94_95_reg <= get_rx_power_val_by_reg_94_95;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_95_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %96 = icmp eq i32 %95, 0*/
begin
get_rx_power_val_by_reg_94_96 = (get_rx_power_val_by_reg_94_95 == 32'd0);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %96 = icmp eq i32 %95, 0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
get_rx_power_val_by_reg_94_96_reg <= get_rx_power_val_by_reg_94_96;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_96_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.1 = select i1 %96, i32 336860180, i32 %write_val.0*/
begin
get_rx_power_val_by_reg_94_write_val_1 = (get_rx_power_val_by_reg_94_96 ? 32'd336860180 : get_rx_power_val_by_reg_94_write_val_0_reg);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %write_val.1 = select i1 %96, i32 336860180, i32 %write_val.0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
get_rx_power_val_by_reg_94_write_val_1_reg <= get_rx_power_val_by_reg_94_write_val_1;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_write_val_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_write_val_1_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %97 = add nsw i32 %22, 1*/
begin
get_rx_power_val_by_reg_94_97 = (get_rx_power_val_by_reg_21_22_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %97 = add nsw i32 %22, 1*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
get_rx_power_val_by_reg_94_97_reg <= get_rx_power_val_by_reg_94_97;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_97_reg"); $finish; end
end
end
always @(*) begin
/* get_rx_power_val_by_reg: %94*/
/*   %exitcond = icmp eq i32 %97, 2*/
begin
get_rx_power_val_by_reg_94_exitcond = (get_rx_power_val_by_reg_94_97 == 32'd2);
end
end
always @(posedge clk) begin
/* get_rx_power_val_by_reg: %94*/
/*   %exitcond = icmp eq i32 %97, 2*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
get_rx_power_val_by_reg_94_exitcond_reg <= get_rx_power_val_by_reg_94_exitcond;
if (reset == 1'b0 && ^(get_rx_power_val_by_reg_94_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_94_exitcond_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* get_rx_power_val_by_reg: %98*/
/*   ret void*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_98_65))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
memory_controller_enable_a = 1'd1;
end
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_1;
end
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_5_reg;
end
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
memory_controller_address_a = get_rx_power_val_by_reg_26_27;
end
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
memory_controller_address_a = get_rx_power_val_by_reg_26_29;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_8_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_5_reg;
end
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_16_reg;
end
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
memory_controller_address_a = get_rx_power_val_by_reg_47_scevgep19;
end
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_20_reg;
end
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
memory_controller_address_a = get_rx_power_val_by_reg_55_58;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_5_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
memory_controller_address_a = get_rx_power_val_by_reg___crit_edge_64;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
memory_controller_address_a = get_rx_power_val_by_reg___crit_edge_66;
end
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_5_reg;
end
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
memory_controller_address_a = get_rx_power_val_by_reg_87_88;
end
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
memory_controller_address_a = get_rx_power_val_by_reg_0_7_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %2 = load %struct.hal_data_8188e** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %26*/
/*   %27 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %26*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_9))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %26*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_11))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %33 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %37 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %47*/
/*   %48 = load i32*** %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %47*/
/*   %49 = load i32** %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_30))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %55*/
/*   %56 = load i32*** %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_38))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %55*/
/*   %59 = load i32* %58, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_42))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %64 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %65 = load i32** %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_47))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %67 = load i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_49))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %87*/
/*   %88 = load i32*** %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %87*/
/*   %89 = load i32** %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_56))
begin
memory_controller_size_a = 2'd2;
end
/* get_rx_power_val_by_reg: %94*/
/*   %95 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_61))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
memory_controller_enable_b = 1'd1;
end
/* get_rx_power_val_by_reg: %94*/
/*   store i32 %write_val.1, i32* %scevgep18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
memory_controller_address_b = get_rx_power_val_by_reg_0_3;
end
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21__in_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_address_b = get_rx_power_val_by_reg_0_9_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21__in_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19))
begin
memory_controller_address_b = get_rx_power_val_by_reg___crit_edge28_38;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
memory_controller_address_b = get_rx_power_val_by_reg___crit_edge28_40;
end
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21__in_reg;
end
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_address_b = get_rx_power_val_by_reg_0_17_reg;
end
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
memory_controller_address_b = get_rx_power_val_by_reg_47_50;
end
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35))
begin
memory_controller_address_b = get_rx_power_val_by_reg_0_17_reg;
end
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
memory_controller_address_b = get_rx_power_val_by_reg_55_scevgep20;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21__in_reg;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46))
begin
memory_controller_address_b = get_rx_power_val_by_reg___crit_edge__pn9_in;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
memory_controller_address_b = get_rx_power_val_by_reg___crit_edge__pn_in;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
memory_controller_address_b = get_rx_power_val_by_reg___crit_edge_customer_pwr_limit_0_in;
end
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21__in_reg;
end
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
memory_controller_address_b = get_rx_power_val_by_reg_87_90;
end
/* get_rx_power_val_by_reg: %94*/
/*   store i32 %write_val.1, i32* %scevgep18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
memory_controller_address_b = get_rx_power_val_by_reg_21_scevgep18_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_rx_power_val_by_reg: %94*/
/*   store i32 %write_val.1, i32* %scevgep18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* get_rx_power_val_by_reg: %94*/
/*   store i32 %write_val.1, i32* %scevgep18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
memory_controller_in_b = get_rx_power_val_by_reg_94_write_val_1;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* get_rx_power_val_by_reg: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %26*/
/*   %31 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_26_7))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %35 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_14))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %42 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_15))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %39 = load i32** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_19))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge28*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge28_21))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %44*/
/*   %45 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_44_24))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %47*/
/*   %.pre = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_28))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %47*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_47_32))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %52*/
/*   %53 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_52_35))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %55*/
/*   %57 = load i32** %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_55_40))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %85 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_45))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn9 = load i32*** %.pn9.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_46))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %.pn = load i32** %.pn.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_48))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %._crit_edge*/
/*   %customer_pwr_limit.0 = load i32* %customer_pwr_limit.0.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB___crit_edge_50))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %87*/
/*   %92 = load i32* %.in, align 4*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_54))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %87*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_87_58))
begin
memory_controller_size_b = 2'd2;
end
/* get_rx_power_val_by_reg: %94*/
/*   store i32 %write_val.1, i32* %scevgep18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_rx_power_val_by_reg_BB_94_63))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  get_rx_power_val_by_reg_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_arg_adapt;
reg [31:0] get_rx_power_val_by_reg_arg_channel;
reg [31:0] get_rx_power_val_by_reg_arg_index;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_arg_powerbase0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_arg_powerbase1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_arg_out_val;
wire  get_rx_power_val_by_reg_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_address_a;
wire  get_rx_power_val_by_reg_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_out_a;
wire [1:0] get_rx_power_val_by_reg_memory_controller_size_a;
wire  get_rx_power_val_by_reg_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_address_b;
wire  get_rx_power_val_by_reg_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_rx_power_val_by_reg_memory_controller_out_b;
wire [1:0] get_rx_power_val_by_reg_memory_controller_size_b;
reg  get_rx_power_val_by_reg_memory_controller_waitrequest;
wire  get_rx_power_val_by_reg_finish;
reg  get_rx_power_val_by_reg_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


get_rx_power_val_by_reg get_rx_power_val_by_reg_inst (
	.memory_controller_enable_a (get_rx_power_val_by_reg_memory_controller_enable_a),
	.memory_controller_address_a (get_rx_power_val_by_reg_memory_controller_address_a),
	.memory_controller_write_enable_a (get_rx_power_val_by_reg_memory_controller_write_enable_a),
	.memory_controller_in_a (get_rx_power_val_by_reg_memory_controller_in_a),
	.memory_controller_size_a (get_rx_power_val_by_reg_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (get_rx_power_val_by_reg_memory_controller_enable_b),
	.memory_controller_address_b (get_rx_power_val_by_reg_memory_controller_address_b),
	.memory_controller_write_enable_b (get_rx_power_val_by_reg_memory_controller_write_enable_b),
	.memory_controller_in_b (get_rx_power_val_by_reg_memory_controller_in_b),
	.memory_controller_size_b (get_rx_power_val_by_reg_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (get_rx_power_val_by_reg_start),
	.finish (get_rx_power_val_by_reg_finish),
	.arg_adapt (get_rx_power_val_by_reg_arg_adapt),
	.arg_channel (get_rx_power_val_by_reg_arg_channel),
	.arg_index (get_rx_power_val_by_reg_arg_index),
	.arg_powerbase0 (get_rx_power_val_by_reg_arg_powerbase0),
	.arg_powerbase1 (get_rx_power_val_by_reg_arg_powerbase1),
	.arg_out_val (get_rx_power_val_by_reg_arg_out_val)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_rx_power_val_by_reg_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_start"); $finish; end
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
get_rx_power_val_by_reg_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_adapt <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_adapt"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_channel <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_channel"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_index <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_index"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_powerbase0 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_powerbase0"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_powerbase1 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_powerbase1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_rx_power_val_by_reg_arg_out_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_rx_power_val_by_reg_arg_out_val"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
begin
get_rx_power_val_by_reg_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
begin
get_rx_power_val_by_reg_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
get_rx_power_val_by_reg_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
get_rx_power_val_by_reg_finish_final = get_rx_power_val_by_reg_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_rx_power_val_by_reg_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_rx_power_val_by_reg_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_rx_power_val_by_reg_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_rx_power_val_by_reg_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_rx_power_val_by_reg_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_rx_power_val_by_reg_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_rx_power_val_by_reg_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_rx_power_val_by_reg_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_rx_power_val_by_reg_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_rx_power_val_by_reg_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_rx_power_val_by_reg_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_rx_power_val_by_reg_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @get_rx_power_val_by_reg(%struct.adapter* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_rx_power_val_by_reg_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
