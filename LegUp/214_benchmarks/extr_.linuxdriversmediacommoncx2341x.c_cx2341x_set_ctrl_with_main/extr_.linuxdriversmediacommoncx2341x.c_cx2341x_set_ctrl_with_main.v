//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:12 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module cx2341x_set_ctrl
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_params,
	arg_busy,
	arg_ctrl
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_3_4 = 8'd4;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_5_5 = 8'd5;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_5_6 = 8'd6;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_5_7 = 8'd7;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_5_8 = 8'd8;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_9_9 = 8'd9;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10 = 8'd10;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11 = 8'd11;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12 = 8'd12;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13 = 8'd13;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_12_14 = 8'd14;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_14_15 = 8'd15;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_14_16 = 8'd16;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_14_17 = 8'd17;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_14_18 = 8'd18;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_18_19 = 8'd19;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_18_20 = 8'd20;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_18_21 = 8'd21;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_18_22 = 8'd22;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_22_23 = 8'd23;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_22_24 = 8'd24;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_22_25 = 8'd25;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_22_26 = 8'd26;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_26_27 = 8'd27;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_26_28 = 8'd28;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_26_29 = 8'd29;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_26_30 = 8'd30;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_30_31 = 8'd31;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_30_32 = 8'd32;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_30_33 = 8'd33;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_30_34 = 8'd34;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_34_35 = 8'd35;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_34_36 = 8'd36;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_34_37 = 8'd37;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_34_38 = 8'd38;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_38_39 = 8'd39;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_38_40 = 8'd40;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_38_41 = 8'd41;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_38_42 = 8'd42;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_43 = 8'd43;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_44 = 8'd44;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_45 = 8'd45;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_46 = 8'd46;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_47 = 8'd47;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_48 = 8'd48;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_49 = 8'd49;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_50 = 8'd50;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_51 = 8'd51;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_52 = 8'd52;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_53 = 8'd53;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_54 = 8'd54;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_55 = 8'd55;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_56 = 8'd56;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_57 = 8'd57;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_58 = 8'd58;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_59 = 8'd59;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_60 = 8'd60;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_61 = 8'd61;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_62 = 8'd62;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_63 = 8'd63;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_64 = 8'd64;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_65 = 8'd65;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_66 = 8'd66;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_67 = 8'd67;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_68 = 8'd68;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_69 = 8'd69;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_70 = 8'd70;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_71 = 8'd71;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_72 = 8'd72;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_73 = 8'd73;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_74 = 8'd74;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_75 = 8'd75;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_76 = 8'd76;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_77 = 8'd77;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_42_78 = 8'd78;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79 = 8'd79;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_53_80 = 8'd80;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_53_81 = 8'd81;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_82 = 8'd82;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_83 = 8'd83;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_84 = 8'd84;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_85 = 8'd85;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_86 = 8'd86;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_87 = 8'd87;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_88 = 8'd88;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_89 = 8'd89;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_90 = 8'd90;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_91 = 8'd91;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_92 = 8'd92;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_93 = 8'd93;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_94 = 8'd94;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_95 = 8'd95;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_96 = 8'd96;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_97 = 8'd97;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_98 = 8'd98;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_99 = 8'd99;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_100 = 8'd100;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_101 = 8'd101;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_102 = 8'd102;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_103 = 8'd103;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_104 = 8'd104;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_105 = 8'd105;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_106 = 8'd106;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_107 = 8'd107;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_108 = 8'd108;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_109 = 8'd109;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_110 = 8'd110;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_111 = 8'd111;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_112 = 8'd112;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_113 = 8'd113;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_114 = 8'd114;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_115 = 8'd115;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_116 = 8'd116;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_55_117 = 8'd117;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118 = 8'd118;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_66_119 = 8'd119;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_66_120 = 8'd120;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121 = 8'd121;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122 = 8'd122;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_68_123 = 8'd123;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_68_124 = 8'd124;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_69_125 = 8'd125;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_69_126 = 8'd126;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_69_127 = 8'd127;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_69_128 = 8'd128;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_73_129 = 8'd129;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_75_130 = 8'd130;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_75_131 = 8'd131;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_75_132 = 8'd132;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133 = 8'd133;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134 = 8'd134;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_83_135 = 8'd135;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_85_136 = 8'd136;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_85_137 = 8'd137;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_85_138 = 8'd138;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_85_139 = 8'd139;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_89_140 = 8'd140;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_91_141 = 8'd141;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_91_142 = 8'd142;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_91_143 = 8'd143;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_91_144 = 8'd144;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_95_145 = 8'd145;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_95_146 = 8'd146;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_95_147 = 8'd147;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_95_148 = 8'd148;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_99_149 = 8'd149;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_99_150 = 8'd150;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_99_151 = 8'd151;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_99_152 = 8'd152;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_105_153 = 8'd153;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_105_154 = 8'd154;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_105_155 = 8'd155;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_105_156 = 8'd156;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_109_157 = 8'd157;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_111_158 = 8'd158;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_111_159 = 8'd159;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_111_160 = 8'd160;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_111_161 = 8'd161;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_111_162 = 8'd162;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_117_163 = 8'd163;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_117_164 = 8'd164;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_117_165 = 8'd165;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_117_166 = 8'd166;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_121_167 = 8'd167;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_121_168 = 8'd168;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_121_169 = 8'd169;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_121_170 = 8'd170;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_125_171 = 8'd171;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_125_172 = 8'd172;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_125_173 = 8'd173;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_125_174 = 8'd174;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_129_175 = 8'd175;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_129_176 = 8'd176;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_129_177 = 8'd177;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_129_178 = 8'd178;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_133_179 = 8'd179;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_133_180 = 8'd180;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_133_181 = 8'd181;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_133_182 = 8'd182;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_137_183 = 8'd183;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_137_184 = 8'd184;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_137_185 = 8'd185;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_137_186 = 8'd186;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_141_187 = 8'd187;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_141_188 = 8'd188;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_141_189 = 8'd189;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_141_190 = 8'd190;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_145_191 = 8'd191;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_145_192 = 8'd192;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_145_193 = 8'd193;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_145_194 = 8'd194;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_149_195 = 8'd195;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_149_196 = 8'd196;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_149_197 = 8'd197;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_149_198 = 8'd198;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_153_199 = 8'd199;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_153_200 = 8'd200;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_153_201 = 8'd201;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_153_202 = 8'd202;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_157_203 = 8'd203;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_157_204 = 8'd204;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_157_205 = 8'd205;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_157_206 = 8'd206;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_161_207 = 8'd207;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_161_208 = 8'd208;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_161_209 = 8'd209;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_161_210 = 8'd210;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_165_211 = 8'd211;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_165_212 = 8'd212;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_165_213 = 8'd213;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB_165_214 = 8'd214;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215 = 8'd215;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216 = 8'd216;
parameter [7:0] LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217 = 8'd217;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_params;
input [31:0] arg_busy;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ctrl;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_0_1_reg;
reg [31:0] cx2341x_set_ctrl_0_2;
reg [31:0] cx2341x_set_ctrl_0_2_reg;
reg  cx2341x_set_ctrl_3_4;
reg  cx2341x_set_ctrl_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_5_6_reg;
reg [31:0] cx2341x_set_ctrl_5_7;
reg [31:0] cx2341x_set_ctrl_5_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_5_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_5_8_reg;
reg  cx2341x_set_ctrl_9_10;
reg  cx2341x_set_ctrl_9_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge26__phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge26__phi_trans_insert_reg;
reg [31:0] cx2341x_set_ctrl___crit_edge26__pre;
reg [31:0] cx2341x_set_ctrl___crit_edge26__pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge26_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge26_11_reg;
reg  cx2341x_set_ctrl_12_13;
reg  cx2341x_set_ctrl_12_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_14_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_14_15_reg;
reg [31:0] cx2341x_set_ctrl_14_16;
reg [31:0] cx2341x_set_ctrl_14_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_14_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_14_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_18_19_reg;
reg [31:0] cx2341x_set_ctrl_18_20;
reg [31:0] cx2341x_set_ctrl_18_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_18_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_18_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_22_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_22_23_reg;
reg [31:0] cx2341x_set_ctrl_22_24;
reg [31:0] cx2341x_set_ctrl_22_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_22_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_22_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_26_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_26_27_reg;
reg [31:0] cx2341x_set_ctrl_26_28;
reg [31:0] cx2341x_set_ctrl_26_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_26_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_26_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_30_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_30_31_reg;
reg [31:0] cx2341x_set_ctrl_30_32;
reg [31:0] cx2341x_set_ctrl_30_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_30_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_30_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_34_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_34_35_reg;
reg [31:0] cx2341x_set_ctrl_34_36;
reg [31:0] cx2341x_set_ctrl_34_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_34_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_34_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_38_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_38_39_reg;
reg [31:0] cx2341x_set_ctrl_38_40;
reg [31:0] cx2341x_set_ctrl_38_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_38_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_38_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_43_reg;
reg [31:0] cx2341x_set_ctrl_42_44;
reg [31:0] cx2341x_set_ctrl_42_44_reg;
reg [31:0] cx2341x_set_ctrl_42_45;
reg [31:0] cx2341x_set_ctrl_42_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_46_reg;
reg [31:0] cx2341x_set_ctrl_42_47;
reg [31:0] cx2341x_set_ctrl_42_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_42_48_reg;
reg [31:0] cx2341x_set_ctrl_42_49;
reg [31:0] cx2341x_set_ctrl_42_49_reg;
reg [31:0] cx2341x_set_ctrl_42_50;
reg [31:0] cx2341x_set_ctrl_42_50_reg;
reg [31:0] cx2341x_set_ctrl_42_51;
reg [31:0] cx2341x_set_ctrl_42_51_reg;
reg  cx2341x_set_ctrl_42_52;
reg  cx2341x_set_ctrl_42_52_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp20;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp20_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp22;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp22_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp23;
reg [31:0] cx2341x_set_ctrl__lr_ph10_tmp23_reg;
reg [31:0] cx2341x_set_ctrl_53_indvar18;
reg [31:0] cx2341x_set_ctrl_53_indvar18_reg;
reg [31:0] cx2341x_set_ctrl_53_tmp21;
reg [31:0] cx2341x_set_ctrl_53_tmp21_reg;
reg [31:0] cx2341x_set_ctrl_53_tmp24;
reg [31:0] cx2341x_set_ctrl_53_tmp24_reg;
reg  cx2341x_set_ctrl_53_54;
reg  cx2341x_set_ctrl_53_54_reg;
reg [31:0] cx2341x_set_ctrl_53_indvar_next19;
reg [31:0] cx2341x_set_ctrl_53_indvar_next19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_56_reg;
reg [31:0] cx2341x_set_ctrl_55_57;
reg [31:0] cx2341x_set_ctrl_55_57_reg;
reg [31:0] cx2341x_set_ctrl_55_58;
reg [31:0] cx2341x_set_ctrl_55_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_59_reg;
reg [31:0] cx2341x_set_ctrl_55_60;
reg [31:0] cx2341x_set_ctrl_55_60_reg;
reg [31:0] cx2341x_set_ctrl_55_61;
reg [31:0] cx2341x_set_ctrl_55_61_reg;
reg [31:0] cx2341x_set_ctrl_55_62;
reg [31:0] cx2341x_set_ctrl_55_62_reg;
reg [31:0] cx2341x_set_ctrl_55_63;
reg [31:0] cx2341x_set_ctrl_55_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_55_64_reg;
reg  cx2341x_set_ctrl_55_65;
reg  cx2341x_set_ctrl_55_65_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp14;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp14_reg;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp15;
reg [31:0] cx2341x_set_ctrl__lr_ph_tmp15_reg;
reg [31:0] cx2341x_set_ctrl_66_indvar;
reg [31:0] cx2341x_set_ctrl_66_indvar_reg;
reg [31:0] cx2341x_set_ctrl_66_tmp13;
reg [31:0] cx2341x_set_ctrl_66_tmp13_reg;
reg [31:0] cx2341x_set_ctrl_66_tmp16;
reg [31:0] cx2341x_set_ctrl_66_tmp16_reg;
reg  cx2341x_set_ctrl_66_67;
reg  cx2341x_set_ctrl_66_67_reg;
reg [31:0] cx2341x_set_ctrl_66_indvar_next;
reg [31:0] cx2341x_set_ctrl_66_indvar_next_reg;
reg [31:0] cx2341x_set_ctrl_68_storemerge_lcssa;
reg [31:0] cx2341x_set_ctrl_68_storemerge_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_69_70_reg;
reg [31:0] cx2341x_set_ctrl_69_71;
reg [31:0] cx2341x_set_ctrl_69_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_69_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_69_72_reg;
reg  cx2341x_set_ctrl_73_74;
reg  cx2341x_set_ctrl_73_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_75_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_75_76_reg;
reg [31:0] cx2341x_set_ctrl_75_77;
reg [31:0] cx2341x_set_ctrl_75_77_reg;
reg  cx2341x_set_ctrl_75_78;
reg  cx2341x_set_ctrl_75_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_75_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_75_79_reg;
reg [31:0] cx2341x_set_ctrl_75_80;
reg [31:0] cx2341x_set_ctrl_75_80_reg;
reg  cx2341x_set_ctrl_75_81;
reg  cx2341x_set_ctrl_75_81_reg;
reg  cx2341x_set_ctrl_75_or_cond30;
reg  cx2341x_set_ctrl_75_or_cond30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge25_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl___crit_edge25_82_reg;
reg  cx2341x_set_ctrl_83_84;
reg  cx2341x_set_ctrl_83_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_85_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_85_86_reg;
reg [31:0] cx2341x_set_ctrl_85_87;
reg [31:0] cx2341x_set_ctrl_85_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_85_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_85_88_reg;
reg  cx2341x_set_ctrl_89_90;
reg  cx2341x_set_ctrl_89_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_91_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_91_92_reg;
reg [31:0] cx2341x_set_ctrl_91_93;
reg [31:0] cx2341x_set_ctrl_91_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_91_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_91_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_95_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_95_96_reg;
reg [31:0] cx2341x_set_ctrl_95_97;
reg [31:0] cx2341x_set_ctrl_95_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_95_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_95_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_99_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_99_100_reg;
reg [31:0] cx2341x_set_ctrl_99_101;
reg [31:0] cx2341x_set_ctrl_99_101_reg;
reg  cx2341x_set_ctrl_99_102;
reg  cx2341x_set_ctrl_99_102_reg;
reg [31:0] cx2341x_set_ctrl_99_103;
reg [31:0] cx2341x_set_ctrl_99_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_99_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_99_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_105_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_105_106_reg;
reg [31:0] cx2341x_set_ctrl_105_107;
reg [31:0] cx2341x_set_ctrl_105_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_105_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_105_108_reg;
reg  cx2341x_set_ctrl_109_110;
reg  cx2341x_set_ctrl_109_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_112_reg;
reg [31:0] cx2341x_set_ctrl_111_113;
reg [31:0] cx2341x_set_ctrl_111_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_111_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_117_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_117_118_reg;
reg [31:0] cx2341x_set_ctrl_117_119;
reg [31:0] cx2341x_set_ctrl_117_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_117_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_117_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_121_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_121_122_reg;
reg [31:0] cx2341x_set_ctrl_121_123;
reg [31:0] cx2341x_set_ctrl_121_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_121_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_121_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_125_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_125_126_reg;
reg [31:0] cx2341x_set_ctrl_125_127;
reg [31:0] cx2341x_set_ctrl_125_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_125_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_125_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_129_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_129_130_reg;
reg [31:0] cx2341x_set_ctrl_129_131;
reg [31:0] cx2341x_set_ctrl_129_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_129_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_129_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_133_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_133_134_reg;
reg [31:0] cx2341x_set_ctrl_133_135;
reg [31:0] cx2341x_set_ctrl_133_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_133_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_133_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_137_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_137_138_reg;
reg [31:0] cx2341x_set_ctrl_137_139;
reg [31:0] cx2341x_set_ctrl_137_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_137_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_137_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_141_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_141_142_reg;
reg [31:0] cx2341x_set_ctrl_141_143;
reg [31:0] cx2341x_set_ctrl_141_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_141_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_141_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_145_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_145_146_reg;
reg [31:0] cx2341x_set_ctrl_145_147;
reg [31:0] cx2341x_set_ctrl_145_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_145_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_145_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_149_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_149_150_reg;
reg [31:0] cx2341x_set_ctrl_149_151;
reg [31:0] cx2341x_set_ctrl_149_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_149_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_149_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_153_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_153_154_reg;
reg [31:0] cx2341x_set_ctrl_153_155;
reg [31:0] cx2341x_set_ctrl_153_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_153_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_153_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_157_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_157_158_reg;
reg [31:0] cx2341x_set_ctrl_157_159;
reg [31:0] cx2341x_set_ctrl_157_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_157_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_157_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_161_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_161_162_reg;
reg [31:0] cx2341x_set_ctrl_161_163;
reg [31:0] cx2341x_set_ctrl_161_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_161_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_161_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_165_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_165_166_reg;
reg [31:0] cx2341x_set_ctrl_165_167;
reg [31:0] cx2341x_set_ctrl_165_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_165_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_165_168_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] cx2341x_set_ctrl_signed_modulus_32_0_op0;
reg [31:0] cx2341x_set_ctrl_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_cx2341x_set_ctrl_55_62_temp_out;
wire [31:0] cx2341x_set_ctrl_55_62_unused;
reg  lpm_divide_cx2341x_set_ctrl_55_62_en;
reg [31:0] lpm_divide_cx2341x_set_ctrl_55_62_out;
reg [31:0] cx2341x_set_ctrl_signed_modulus_32_0;
reg  lpm_divide_cx2341x_set_ctrl_42_50_en;
reg  lpm_mult_cx2341x_set_ctrl_53_tmp21_en;
reg [31:0] cx2341x_set_ctrl_53_tmp21_stage0_reg;
reg  lpm_mult_cx2341x_set_ctrl_66_tmp13_en;
reg [31:0] cx2341x_set_ctrl_66_tmp13_stage0_reg;

/*   %62 = srem i32 %61, %58*/
lpm_divide lpm_divide_cx2341x_set_ctrl_55_62 (
	.quotient (cx2341x_set_ctrl_55_62_unused),
	.remain (lpm_divide_cx2341x_set_ctrl_55_62_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_cx2341x_set_ctrl_55_62_en),
	.numer (cx2341x_set_ctrl_signed_modulus_32_0_op0),
	.denom (cx2341x_set_ctrl_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_pipeline = 32,
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_widthn = 32,
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_widthd = 32,
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_drepresentation = "SIGNED",
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_nrepresentation = "SIGNED",
	lpm_divide_cx2341x_set_ctrl_55_62.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd152)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd157)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_9_9;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_9_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd156)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd151)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_211;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd155)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_19;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd154)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_23;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd158)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd159)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_31;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd153)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_35;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd137)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_39;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd133)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_43;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd131)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_82;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd132)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_125;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd135)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_73_129;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_73_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd136)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_83_135;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_83_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd134)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_89_140;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_89_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd128)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_145;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd130)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_149;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd129)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_153;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd139)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_109_157;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_109_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd138)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_163;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd142)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_167;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd143)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_171;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd145)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_175;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd148)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_179;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd140)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_183;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd141)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_187;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd144)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_191;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd146)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_195;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd147)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_199;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd149)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_203;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 == 32'd150)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_207;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((((((((((((((((((((((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_0_2 != 32'd152)) & (cx2341x_set_ctrl_0_2 != 32'd157)) & (cx2341x_set_ctrl_0_2 != 32'd156)) & (cx2341x_set_ctrl_0_2 != 32'd151)) & (cx2341x_set_ctrl_0_2 != 32'd155)) & (cx2341x_set_ctrl_0_2 != 32'd154)) & (cx2341x_set_ctrl_0_2 != 32'd158)) & (cx2341x_set_ctrl_0_2 != 32'd159)) & (cx2341x_set_ctrl_0_2 != 32'd153)) & (cx2341x_set_ctrl_0_2 != 32'd137)) & (cx2341x_set_ctrl_0_2 != 32'd133)) & (cx2341x_set_ctrl_0_2 != 32'd131)) & (cx2341x_set_ctrl_0_2 != 32'd132)) & (cx2341x_set_ctrl_0_2 != 32'd135)) & (cx2341x_set_ctrl_0_2 != 32'd136)) & (cx2341x_set_ctrl_0_2 != 32'd134)) & (cx2341x_set_ctrl_0_2 != 32'd128)) & (cx2341x_set_ctrl_0_2 != 32'd130)) & (cx2341x_set_ctrl_0_2 != 32'd129)) & (cx2341x_set_ctrl_0_2 != 32'd139)) & (cx2341x_set_ctrl_0_2 != 32'd138)) & (cx2341x_set_ctrl_0_2 != 32'd142)) & (cx2341x_set_ctrl_0_2 != 32'd143)) & (cx2341x_set_ctrl_0_2 != 32'd145)) & (cx2341x_set_ctrl_0_2 != 32'd148)) & (cx2341x_set_ctrl_0_2 != 32'd140)) & (cx2341x_set_ctrl_0_2 != 32'd141)) & (cx2341x_set_ctrl_0_2 != 32'd144)) & (cx2341x_set_ctrl_0_2 != 32'd146)) & (cx2341x_set_ctrl_0_2 != 32'd147)) & (cx2341x_set_ctrl_0_2 != 32'd149)) & (cx2341x_set_ctrl_0_2 != 32'd150)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_3_4) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_3_4 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_3_4) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_3_4 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_7;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_7;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_8;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_5_8;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_9_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_9_9;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_9_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_9_9) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_9_10 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_9_9) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_9_10 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_12_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_12_14) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_12_13 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_15;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_12_14) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_12_13 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_15;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_16;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_16;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_17;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_17;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_18;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_14_18;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_14_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_19;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_20;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_20;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_21;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_21;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_22;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_18_22;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_23;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_26;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_22_26;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_29;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_29;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_30;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_26_30;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_31;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_32;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_32;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_33;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_33;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_34;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_30_34;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_35;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_36;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_36;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_37;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_37;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_38;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_34_38;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_39;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_40;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_40;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_41;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_41;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_43;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_44;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_44;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_45;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_45;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_46;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_46;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_47;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_47;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_48;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_48;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_49;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_49;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_50;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_50;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_51;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_51;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_52;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_52;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_53;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_53;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_54;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_54;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_55;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_55;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_56;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_56;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_57;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_57;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_58;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_58;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_59;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_59;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_60;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_60;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_61;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_61;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_62;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_62;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_63;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_63;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_64;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_64;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_65;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_65;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_66;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_66;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_67;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_67;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_68;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_68;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_69;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_69;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_70;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_70;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_71;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_71;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_72;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_72;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_73;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_73;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_74;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_74;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_75;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_75;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_76;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_76;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_77;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_77;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_78;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_42_78;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_42_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_78) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_42_52_reg == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_78) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_42_52_reg == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_53_80;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_53_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_53_80;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_53_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_53_81;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_53_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_53_81;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_53_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_53_54 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_53_80;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_53_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_53_54 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_82;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_83;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_83;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_84;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_84;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_85;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_85;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_86;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_86;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_87;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_87;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_88;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_88;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_89;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_89;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_90;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_90;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_91;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_91;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_92;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_92;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_93;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_93;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_94;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_94;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_95;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_95;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_96;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_96;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_97;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_97;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_98;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_98;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_99;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_99;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_100;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_100;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_101;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_101;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_102;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_102;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_103;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_103;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_104;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_104;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_105;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_105;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_106;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_106;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_107;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_107;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_108;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_108;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_109;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_109;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_110;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_110;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_111;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_111;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_112;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_112;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_113;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_113;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_114;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_114;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_115;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_115;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_116;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_116;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_117;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_55_117;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_55_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_117) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_55_65_reg == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_117) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_55_65_reg == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_68_123;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_68_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_66_119;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_66_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_66_119;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_66_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_66_120;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_66_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_66_120;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_66_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_66_67 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_66_119;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_66_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_66_67 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_68_123;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_68_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_68_123;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_68_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_68_124;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_68_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_68_124;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_68_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_125;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_126;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_126;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_127;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_127;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_128;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_69_128;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_69_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_73_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_73_129;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_73_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_73_129) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_73_74 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_130;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_73_129) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_73_74 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_130;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_131;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_131;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_132;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_75_132;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_75_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_75_or_cond30 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_75_or_cond30 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_83_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_83_135;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_83_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_83_135) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_83_84 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_136;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_83_135) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_83_84 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_136;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_137;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_137;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_138;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_138;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_139;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_85_139;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_85_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_89_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_89_140;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_89_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_89_140) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_89_90 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_141;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_89_140) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_89_90 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_141;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_142;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_142;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_143;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_143;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_144;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_91_144;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_91_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_145;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_146;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_146;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_147;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_147;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_148;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_95_148;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_95_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_149;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_150;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_150;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_151;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_151;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_152;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_99_152;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_99_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_153;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_154;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_154;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_155;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_155;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_156;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_105_156;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_105_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_109_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_109_157;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_109_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_109_157) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_109_110 == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_158;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_109_157) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_109_110 == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_158;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_159;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_159;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_160;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_160;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_161;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_161;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_162;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_111_162;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_111_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_163;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_164;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_164;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_165;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_165;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_166;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_117_166;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_117_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_167;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_168;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_168;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_169;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_169;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_170;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_121_170;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_121_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_171;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_172;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_172;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_173;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_173;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_174;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_125_174;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_125_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_175;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_176;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_176;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_177;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_177;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_178;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_129_178;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_129_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_179;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_180;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_180;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_181;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_181;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_182;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_133_182;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_133_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_183;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_184;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_184;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_185;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_185;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_186;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_137_186;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_137_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_187;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_188;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_188;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_189;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_189;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_190;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_141_190;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_141_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_191;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_192;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_192;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_193;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_193;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_194;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_145_194;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_145_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_195;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_196;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_196;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_197;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_197;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_198;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_149_198;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_149_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_199;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_200;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_200;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_201;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_201;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_202;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_153_202;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_153_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_203;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_204;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_204;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_205;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_205;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_206;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_157_206;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_157_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_207;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_208;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_208;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_209;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_209;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_210;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_161_210;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_161_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_211;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_212;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_212;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_213;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_213;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_214;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB_165_214;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB_165_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217;
if (reset == 1'b0 && ^(LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %0*/
/*   %1 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 0*/
begin
cx2341x_set_ctrl_0_1 = arg_ctrl;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %0*/
/*   %1 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1))
begin
cx2341x_set_ctrl_0_1_reg <= cx2341x_set_ctrl_0_1;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_0_1_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_3))
begin
cx2341x_set_ctrl_0_2_reg <= cx2341x_set_ctrl_0_2;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_0_2_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %3*/
/*   %4 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_3_4 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %3*/
/*   %4 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_3_4))
begin
cx2341x_set_ctrl_3_4_reg <= cx2341x_set_ctrl_3_4;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_3_4_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %5*/
/*   %6 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_5_6 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %5*/
/*   %6 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
cx2341x_set_ctrl_5_6_reg <= cx2341x_set_ctrl_5_6;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_5_6_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_5_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
cx2341x_set_ctrl_5_7_reg <= cx2341x_set_ctrl_5_7;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_5_7_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %5*/
/*   %8 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 0*/
begin
cx2341x_set_ctrl_5_8 = arg_params;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %5*/
/*   %8 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
cx2341x_set_ctrl_5_8_reg <= cx2341x_set_ctrl_5_8;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_5_8_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %9*/
/*   %10 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_9_10 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %9*/
/*   %10 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_9_9))
begin
cx2341x_set_ctrl_9_10_reg <= cx2341x_set_ctrl_9_10;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_9_10_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.phi.trans.insert = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl___crit_edge26__phi_trans_insert = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.phi.trans.insert = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
cx2341x_set_ctrl___crit_edge26__phi_trans_insert_reg <= cx2341x_set_ctrl___crit_edge26__phi_trans_insert;
if (reset == 1'b0 && ^(cx2341x_set_ctrl___crit_edge26__phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl___crit_edge26__phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl___crit_edge26__pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
cx2341x_set_ctrl___crit_edge26__pre_reg <= cx2341x_set_ctrl___crit_edge26__pre;
if (reset == 1'b0 && ^(cx2341x_set_ctrl___crit_edge26__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl___crit_edge26__pre_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %11 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 2*/
begin
cx2341x_set_ctrl___crit_edge26_11 = (arg_params + 8);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %11 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 2*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
cx2341x_set_ctrl___crit_edge26_11_reg <= cx2341x_set_ctrl___crit_edge26_11;
if (reset == 1'b0 && ^(cx2341x_set_ctrl___crit_edge26_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl___crit_edge26_11_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %12*/
/*   %13 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_12_13 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %12*/
/*   %13 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_12_14))
begin
cx2341x_set_ctrl_12_13_reg <= cx2341x_set_ctrl_12_13;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_12_13_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %14*/
/*   %15 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_14_15 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %14*/
/*   %15 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
cx2341x_set_ctrl_14_15_reg <= cx2341x_set_ctrl_14_15;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_14_15_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_14_16 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
cx2341x_set_ctrl_14_16_reg <= cx2341x_set_ctrl_14_16;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_14_16_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %14*/
/*   %17 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 3*/
begin
cx2341x_set_ctrl_14_17 = (arg_params + 12);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %14*/
/*   %17 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 3*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
cx2341x_set_ctrl_14_17_reg <= cx2341x_set_ctrl_14_17;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_14_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_14_17_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %18*/
/*   %19 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_18_19 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %18*/
/*   %19 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
cx2341x_set_ctrl_18_19_reg <= cx2341x_set_ctrl_18_19;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_18_19_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_18_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
cx2341x_set_ctrl_18_20_reg <= cx2341x_set_ctrl_18_20;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_18_20_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %18*/
/*   %21 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 5*/
begin
cx2341x_set_ctrl_18_21 = (arg_params + 20);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %18*/
/*   %21 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 5*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
cx2341x_set_ctrl_18_21_reg <= cx2341x_set_ctrl_18_21;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_18_21_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %22*/
/*   %23 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_22_23 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %22*/
/*   %23 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
cx2341x_set_ctrl_22_23_reg <= cx2341x_set_ctrl_22_23;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_22_23_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_22_24 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
cx2341x_set_ctrl_22_24_reg <= cx2341x_set_ctrl_22_24;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_22_24_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %22*/
/*   %25 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 6*/
begin
cx2341x_set_ctrl_22_25 = (arg_params + 24);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %22*/
/*   %25 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 6*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
cx2341x_set_ctrl_22_25_reg <= cx2341x_set_ctrl_22_25;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_22_25_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %26*/
/*   %27 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_26_27 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %26*/
/*   %27 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
cx2341x_set_ctrl_26_27_reg <= cx2341x_set_ctrl_26_27;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_26_27_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_26_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
cx2341x_set_ctrl_26_28_reg <= cx2341x_set_ctrl_26_28;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_26_28_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %26*/
/*   %29 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 7*/
begin
cx2341x_set_ctrl_26_29 = (arg_params + 28);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %26*/
/*   %29 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 7*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
cx2341x_set_ctrl_26_29_reg <= cx2341x_set_ctrl_26_29;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_26_29_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %30*/
/*   %31 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_30_31 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %30*/
/*   %31 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
cx2341x_set_ctrl_30_31_reg <= cx2341x_set_ctrl_30_31;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_30_31_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_30_32 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
cx2341x_set_ctrl_30_32_reg <= cx2341x_set_ctrl_30_32;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_30_32_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %30*/
/*   %33 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 8*/
begin
cx2341x_set_ctrl_30_33 = (arg_params + 32);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %30*/
/*   %33 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 8*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
cx2341x_set_ctrl_30_33_reg <= cx2341x_set_ctrl_30_33;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_30_33_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %34*/
/*   %35 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_34_35 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %34*/
/*   %35 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
cx2341x_set_ctrl_34_35_reg <= cx2341x_set_ctrl_34_35;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_34_35_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_34_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
cx2341x_set_ctrl_34_36_reg <= cx2341x_set_ctrl_34_36;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_34_36_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %34*/
/*   %37 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 9*/
begin
cx2341x_set_ctrl_34_37 = (arg_params + 36);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %34*/
/*   %37 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 9*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
cx2341x_set_ctrl_34_37_reg <= cx2341x_set_ctrl_34_37;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_34_37_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %38*/
/*   %39 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_38_39 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %38*/
/*   %39 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
cx2341x_set_ctrl_38_39_reg <= cx2341x_set_ctrl_38_39;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_38_39_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_38_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
cx2341x_set_ctrl_38_40_reg <= cx2341x_set_ctrl_38_40;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_38_40_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %38*/
/*   %41 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 10*/
begin
cx2341x_set_ctrl_38_41 = (arg_params + 40);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %38*/
/*   %41 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 10*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
cx2341x_set_ctrl_38_41_reg <= cx2341x_set_ctrl_38_41;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_38_41_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %43 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_42_43 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %43 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
cx2341x_set_ctrl_42_43_reg <= cx2341x_set_ctrl_42_43;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_43_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_42_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_42_44_reg <= cx2341x_set_ctrl_42_44;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_44_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %45 = add nsw i32 %44, 1*/
begin
cx2341x_set_ctrl_42_45 = (cx2341x_set_ctrl_42_44 + 32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %45 = add nsw i32 %44, 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_42_45_reg <= cx2341x_set_ctrl_42_45;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_45_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %46 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 11*/
begin
cx2341x_set_ctrl_42_46 = (arg_params + 44);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %46 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 11*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
cx2341x_set_ctrl_42_46_reg <= cx2341x_set_ctrl_42_46;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_46_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_42_47 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_42_47_reg <= cx2341x_set_ctrl_42_47;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_47_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %48 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 12*/
begin
cx2341x_set_ctrl_42_48 = (arg_params + 48);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %48 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 12*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
cx2341x_set_ctrl_42_48_reg <= cx2341x_set_ctrl_42_48;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_48_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %49 = add i32 %47, %44*/
begin
cx2341x_set_ctrl_42_49 = (cx2341x_set_ctrl_42_47 + cx2341x_set_ctrl_42_44);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %49 = add i32 %47, %44*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_42_49_reg <= cx2341x_set_ctrl_42_49;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_49_reg"); $finish; end
end
end
always @(*) begin
cx2341x_set_ctrl_42_50 = cx2341x_set_ctrl_signed_modulus_32_0;
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %50 = srem i32 %49, %45*/
cx2341x_set_ctrl_42_50_reg = cx2341x_set_ctrl_55_62_reg;
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %51 = sub i32 %49, %50*/
begin
cx2341x_set_ctrl_42_51 = (cx2341x_set_ctrl_42_49_reg - cx2341x_set_ctrl_42_50);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %51 = sub i32 %49, %50*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
cx2341x_set_ctrl_42_51_reg <= cx2341x_set_ctrl_42_51;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_51_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %52 = icmp sgt i32 %51, 34*/
begin
cx2341x_set_ctrl_42_52 = ($signed(cx2341x_set_ctrl_42_51) > $signed(32'd34));
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %42*/
/*   %52 = icmp sgt i32 %51, 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
cx2341x_set_ctrl_42_52_reg <= cx2341x_set_ctrl_42_52;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_42_52_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp20 = xor i32 %44, -1*/
begin
cx2341x_set_ctrl__lr_ph10_tmp20 = (cx2341x_set_ctrl_42_44_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp20 = xor i32 %44, -1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79))
begin
cx2341x_set_ctrl__lr_ph10_tmp20_reg <= cx2341x_set_ctrl__lr_ph10_tmp20;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph10_tmp20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph10_tmp20_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp22 = add i32 %47, -1*/
begin
cx2341x_set_ctrl__lr_ph10_tmp22 = (cx2341x_set_ctrl_42_47_reg + -32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp22 = add i32 %47, -1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79))
begin
cx2341x_set_ctrl__lr_ph10_tmp22_reg <= cx2341x_set_ctrl__lr_ph10_tmp22;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph10_tmp22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph10_tmp22_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp23 = sub i32 %tmp22, %50*/
begin
cx2341x_set_ctrl__lr_ph10_tmp23 = (cx2341x_set_ctrl__lr_ph10_tmp22 - cx2341x_set_ctrl_42_50_reg);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph10*/
/*   %tmp23 = sub i32 %tmp22, %50*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79))
begin
cx2341x_set_ctrl__lr_ph10_tmp23_reg <= cx2341x_set_ctrl__lr_ph10_tmp23;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph10_tmp23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph10_tmp23_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %53*/
/*   %indvar18 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next19, %53 ]*/
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) & (memory_controller_waitrequest == 1'd0)))
begin
cx2341x_set_ctrl_53_indvar18 = 32'd0;
end
/* cx2341x_set_ctrl: %53*/
/*   %indvar18 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next19, %53 ]*/
else /* if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_53_54 == 1'd1))) */
begin
cx2341x_set_ctrl_53_indvar18 = cx2341x_set_ctrl_53_indvar_next19_reg;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %indvar18 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next19, %53 ]*/
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph10_79) & (memory_controller_waitrequest == 1'd0)))
begin
cx2341x_set_ctrl_53_indvar18_reg <= cx2341x_set_ctrl_53_indvar18;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_indvar18_reg"); $finish; end
end
/* cx2341x_set_ctrl: %53*/
/*   %indvar18 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next19, %53 ]*/
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_53_54 == 1'd1)))
begin
cx2341x_set_ctrl_53_indvar18_reg <= cx2341x_set_ctrl_53_indvar18;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_indvar18_reg"); $finish; end
end
end
always @(*) begin
cx2341x_set_ctrl_53_tmp21 = cx2341x_set_ctrl_53_tmp21_stage0_reg;
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %tmp21 = mul i32 %indvar18, %tmp20*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81))
begin
cx2341x_set_ctrl_53_tmp21_reg <= cx2341x_set_ctrl_53_tmp21;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_tmp21_reg"); $finish; end
end
/* cx2341x_set_ctrl: %53*/
/*   %tmp21 = mul i32 %indvar18, %tmp20*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81))
begin
cx2341x_set_ctrl_53_tmp21_reg <= cx2341x_set_ctrl_53_tmp21;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_tmp21_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %53*/
/*   %tmp24 = add i32 %tmp23, %tmp21*/
begin
cx2341x_set_ctrl_53_tmp24 = (cx2341x_set_ctrl__lr_ph10_tmp23_reg + cx2341x_set_ctrl_53_tmp21);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %tmp24 = add i32 %tmp23, %tmp21*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81))
begin
cx2341x_set_ctrl_53_tmp24_reg <= cx2341x_set_ctrl_53_tmp24;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_tmp24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_tmp24_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %53*/
/*   %54 = icmp sgt i32 %tmp24, 34*/
begin
cx2341x_set_ctrl_53_54 = ($signed(cx2341x_set_ctrl_53_tmp24) > $signed(32'd34));
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %54 = icmp sgt i32 %tmp24, 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_81))
begin
cx2341x_set_ctrl_53_54_reg <= cx2341x_set_ctrl_53_54;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_54_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %53*/
/*   %indvar.next19 = add i32 %indvar18, 1*/
begin
cx2341x_set_ctrl_53_indvar_next19 = (cx2341x_set_ctrl_53_indvar18_reg + 32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %indvar.next19 = add i32 %indvar18, 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_53_80))
begin
cx2341x_set_ctrl_53_indvar_next19_reg <= cx2341x_set_ctrl_53_indvar_next19;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_53_indvar_next19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_53_indvar_next19_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %56 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 12*/
begin
cx2341x_set_ctrl_55_56 = (arg_params + 48);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %56 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 12*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
cx2341x_set_ctrl_55_56_reg <= cx2341x_set_ctrl_55_56;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_56_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_55_57 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84))
begin
cx2341x_set_ctrl_55_57_reg <= cx2341x_set_ctrl_55_57;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_57_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %58 = add nsw i32 %57, 1*/
begin
cx2341x_set_ctrl_55_58 = (cx2341x_set_ctrl_55_57 + 32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %58 = add nsw i32 %57, 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84))
begin
cx2341x_set_ctrl_55_58_reg <= cx2341x_set_ctrl_55_58;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_58_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %59 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_55_59 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %59 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
cx2341x_set_ctrl_55_59_reg <= cx2341x_set_ctrl_55_59;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_59_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_55_60 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84))
begin
cx2341x_set_ctrl_55_60_reg <= cx2341x_set_ctrl_55_60;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_60_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %61 = add i32 %60, %57*/
begin
cx2341x_set_ctrl_55_61 = (cx2341x_set_ctrl_55_60 + cx2341x_set_ctrl_55_57);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %61 = add i32 %60, %57*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84))
begin
cx2341x_set_ctrl_55_61_reg <= cx2341x_set_ctrl_55_61;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_61_reg"); $finish; end
end
end
always @(*) begin
cx2341x_set_ctrl_55_62 = cx2341x_set_ctrl_signed_modulus_32_0;
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %62 = srem i32 %61, %58*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
cx2341x_set_ctrl_55_62_reg <= cx2341x_set_ctrl_55_62;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_62_reg"); $finish; end
end
/* cx2341x_set_ctrl: %55*/
/*   %62 = srem i32 %61, %58*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
cx2341x_set_ctrl_55_62_reg <= cx2341x_set_ctrl_55_62;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_62_reg"); $finish; end
end
/* cx2341x_set_ctrl: %42*/
/*   %50 = srem i32 %49, %45*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
cx2341x_set_ctrl_55_62_reg <= cx2341x_set_ctrl_42_50;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_42_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_62_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %63 = sub i32 %61, %62*/
begin
cx2341x_set_ctrl_55_63 = (cx2341x_set_ctrl_55_61_reg - cx2341x_set_ctrl_55_62);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %63 = sub i32 %61, %62*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
cx2341x_set_ctrl_55_63_reg <= cx2341x_set_ctrl_55_63;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_63_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %64 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 11*/
begin
cx2341x_set_ctrl_55_64 = (arg_params + 44);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %64 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 11*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
cx2341x_set_ctrl_55_64_reg <= cx2341x_set_ctrl_55_64;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_64_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %55*/
/*   %65 = icmp sgt i32 %63, 34*/
begin
cx2341x_set_ctrl_55_65 = ($signed(cx2341x_set_ctrl_55_63) > $signed(32'd34));
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %55*/
/*   %65 = icmp sgt i32 %63, 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
cx2341x_set_ctrl_55_65_reg <= cx2341x_set_ctrl_55_65;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_55_65_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp = xor i32 %57, -1*/
begin
cx2341x_set_ctrl__lr_ph_tmp = (cx2341x_set_ctrl_55_57_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp = xor i32 %57, -1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118))
begin
cx2341x_set_ctrl__lr_ph_tmp_reg <= cx2341x_set_ctrl__lr_ph_tmp;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp14 = add i32 %60, -1*/
begin
cx2341x_set_ctrl__lr_ph_tmp14 = (cx2341x_set_ctrl_55_60_reg + -32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp14 = add i32 %60, -1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118))
begin
cx2341x_set_ctrl__lr_ph_tmp14_reg <= cx2341x_set_ctrl__lr_ph_tmp14;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph_tmp14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph_tmp14_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp15 = sub i32 %tmp14, %62*/
begin
cx2341x_set_ctrl__lr_ph_tmp15 = (cx2341x_set_ctrl__lr_ph_tmp14 - cx2341x_set_ctrl_55_62_reg);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %.lr.ph*/
/*   %tmp15 = sub i32 %tmp14, %62*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118))
begin
cx2341x_set_ctrl__lr_ph_tmp15_reg <= cx2341x_set_ctrl__lr_ph_tmp15;
if (reset == 1'b0 && ^(cx2341x_set_ctrl__lr_ph_tmp15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl__lr_ph_tmp15_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %66*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %66 ]*/
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) & (memory_controller_waitrequest == 1'd0)))
begin
cx2341x_set_ctrl_66_indvar = 32'd0;
end
/* cx2341x_set_ctrl: %66*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %66 ]*/
else /* if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_66_67 == 1'd1))) */
begin
cx2341x_set_ctrl_66_indvar = cx2341x_set_ctrl_66_indvar_next_reg;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %66 ]*/
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__lr_ph_118) & (memory_controller_waitrequest == 1'd0)))
begin
cx2341x_set_ctrl_66_indvar_reg <= cx2341x_set_ctrl_66_indvar;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_indvar_reg"); $finish; end
end
/* cx2341x_set_ctrl: %66*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %66 ]*/
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_66_67 == 1'd1)))
begin
cx2341x_set_ctrl_66_indvar_reg <= cx2341x_set_ctrl_66_indvar;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_indvar_reg"); $finish; end
end
end
always @(*) begin
cx2341x_set_ctrl_66_tmp13 = cx2341x_set_ctrl_66_tmp13_stage0_reg;
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %tmp13 = mul i32 %indvar, %tmp*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120))
begin
cx2341x_set_ctrl_66_tmp13_reg <= cx2341x_set_ctrl_66_tmp13;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_tmp13_reg"); $finish; end
end
/* cx2341x_set_ctrl: %66*/
/*   %tmp13 = mul i32 %indvar, %tmp*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120))
begin
cx2341x_set_ctrl_66_tmp13_reg <= cx2341x_set_ctrl_66_tmp13;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_tmp13_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %66*/
/*   %tmp16 = add i32 %tmp15, %tmp13*/
begin
cx2341x_set_ctrl_66_tmp16 = (cx2341x_set_ctrl__lr_ph_tmp15_reg + cx2341x_set_ctrl_66_tmp13);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %tmp16 = add i32 %tmp15, %tmp13*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120))
begin
cx2341x_set_ctrl_66_tmp16_reg <= cx2341x_set_ctrl_66_tmp16;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_tmp16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_tmp16_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %66*/
/*   %67 = icmp sgt i32 %tmp16, 34*/
begin
cx2341x_set_ctrl_66_67 = ($signed(cx2341x_set_ctrl_66_tmp16) > $signed(32'd34));
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %67 = icmp sgt i32 %tmp16, 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_120))
begin
cx2341x_set_ctrl_66_67_reg <= cx2341x_set_ctrl_66_67;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_67_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %66*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
cx2341x_set_ctrl_66_indvar_next = (cx2341x_set_ctrl_66_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_66_119))
begin
cx2341x_set_ctrl_66_indvar_next_reg <= cx2341x_set_ctrl_66_indvar_next;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_66_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_66_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %68*/
/*   %storemerge.lcssa = phi i32 [ %tmp16, %._crit_edge ], [ %63, %55 ]*/
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_117) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_55_65_reg == 1'd0)))
begin
cx2341x_set_ctrl_68_storemerge_lcssa = cx2341x_set_ctrl_55_63_reg;
end
/* cx2341x_set_ctrl: %68*/
/*   %storemerge.lcssa = phi i32 [ %tmp16, %._crit_edge ], [ %63, %55 ]*/
else /* if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) & (memory_controller_waitrequest == 1'd0))) */
begin
cx2341x_set_ctrl_68_storemerge_lcssa = cx2341x_set_ctrl_66_tmp16_reg;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %68*/
/*   %storemerge.lcssa = phi i32 [ %tmp16, %._crit_edge ], [ %63, %55 ]*/
if ((((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_117) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_55_65_reg == 1'd0)))
begin
cx2341x_set_ctrl_68_storemerge_lcssa_reg <= cx2341x_set_ctrl_68_storemerge_lcssa;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_68_storemerge_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_68_storemerge_lcssa_reg"); $finish; end
end
/* cx2341x_set_ctrl: %68*/
/*   %storemerge.lcssa = phi i32 [ %tmp16, %._crit_edge ], [ %63, %55 ]*/
if (((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_122) & (memory_controller_waitrequest == 1'd0)))
begin
cx2341x_set_ctrl_68_storemerge_lcssa_reg <= cx2341x_set_ctrl_68_storemerge_lcssa;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_68_storemerge_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_68_storemerge_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %69*/
/*   %70 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_69_70 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %69*/
/*   %70 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
cx2341x_set_ctrl_69_70_reg <= cx2341x_set_ctrl_69_70;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_69_70_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_69_71 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
cx2341x_set_ctrl_69_71_reg <= cx2341x_set_ctrl_69_71;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_69_71_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %69*/
/*   %72 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 13*/
begin
cx2341x_set_ctrl_69_72 = (arg_params + 52);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %69*/
/*   %72 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 13*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
cx2341x_set_ctrl_69_72_reg <= cx2341x_set_ctrl_69_72;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_69_72_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %73*/
/*   %74 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_73_74 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %73*/
/*   %74 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_73_129))
begin
cx2341x_set_ctrl_73_74_reg <= cx2341x_set_ctrl_73_74;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_73_74_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %76 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 34*/
begin
cx2341x_set_ctrl_75_76 = (arg_params + 136);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %76 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
cx2341x_set_ctrl_75_76_reg <= cx2341x_set_ctrl_75_76;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_76_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_75_77 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132))
begin
cx2341x_set_ctrl_75_77_reg <= cx2341x_set_ctrl_75_77;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_77_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %78 = icmp ne i32 %77, 0*/
begin
cx2341x_set_ctrl_75_78 = (cx2341x_set_ctrl_75_77 != 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %78 = icmp ne i32 %77, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132))
begin
cx2341x_set_ctrl_75_78_reg <= cx2341x_set_ctrl_75_78;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_78_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %79 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_75_79 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %79 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
cx2341x_set_ctrl_75_79_reg <= cx2341x_set_ctrl_75_79;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_79_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_75_80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132))
begin
cx2341x_set_ctrl_75_80_reg <= cx2341x_set_ctrl_75_80;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_80_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %81 = icmp eq i32 %80, 0*/
begin
cx2341x_set_ctrl_75_81 = (cx2341x_set_ctrl_75_80 == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %81 = icmp eq i32 %80, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132))
begin
cx2341x_set_ctrl_75_81_reg <= cx2341x_set_ctrl_75_81;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_81_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %75*/
/*   %or.cond30 = or i1 %78, %81*/
begin
cx2341x_set_ctrl_75_or_cond30 = (cx2341x_set_ctrl_75_78 | cx2341x_set_ctrl_75_81);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %75*/
/*   %or.cond30 = or i1 %78, %81*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_132))
begin
cx2341x_set_ctrl_75_or_cond30_reg <= cx2341x_set_ctrl_75_or_cond30;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_75_or_cond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_75_or_cond30_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   %82 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 14*/
begin
cx2341x_set_ctrl___crit_edge25_82 = (arg_params + 56);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   %82 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 14*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
cx2341x_set_ctrl___crit_edge25_82_reg <= cx2341x_set_ctrl___crit_edge25_82;
if (reset == 1'b0 && ^(cx2341x_set_ctrl___crit_edge25_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl___crit_edge25_82_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %83*/
/*   %84 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_83_84 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %83*/
/*   %84 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_83_135))
begin
cx2341x_set_ctrl_83_84_reg <= cx2341x_set_ctrl_83_84;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_83_84_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %85*/
/*   %86 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_85_86 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %85*/
/*   %86 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
cx2341x_set_ctrl_85_86_reg <= cx2341x_set_ctrl_85_86;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_85_86_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_85_87 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
cx2341x_set_ctrl_85_87_reg <= cx2341x_set_ctrl_85_87;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_85_87_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %85*/
/*   %88 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 15*/
begin
cx2341x_set_ctrl_85_88 = (arg_params + 60);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %85*/
/*   %88 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 15*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
cx2341x_set_ctrl_85_88_reg <= cx2341x_set_ctrl_85_88;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_85_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_85_88_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %89*/
/*   %90 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_89_90 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %89*/
/*   %90 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_89_140))
begin
cx2341x_set_ctrl_89_90_reg <= cx2341x_set_ctrl_89_90;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_89_90_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %91*/
/*   %92 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_91_92 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %91*/
/*   %92 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
cx2341x_set_ctrl_91_92_reg <= cx2341x_set_ctrl_91_92;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_91_92_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_91_93 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
cx2341x_set_ctrl_91_93_reg <= cx2341x_set_ctrl_91_93;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_91_93_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %91*/
/*   %94 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 16*/
begin
cx2341x_set_ctrl_91_94 = (arg_params + 64);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %91*/
/*   %94 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 16*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
cx2341x_set_ctrl_91_94_reg <= cx2341x_set_ctrl_91_94;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_91_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_91_94_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %95*/
/*   %96 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_95_96 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %95*/
/*   %96 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
cx2341x_set_ctrl_95_96_reg <= cx2341x_set_ctrl_95_96;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_95_96_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_95_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
cx2341x_set_ctrl_95_97_reg <= cx2341x_set_ctrl_95_97;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_95_97_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %95*/
/*   %98 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 17*/
begin
cx2341x_set_ctrl_95_98 = (arg_params + 68);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %95*/
/*   %98 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 17*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
cx2341x_set_ctrl_95_98_reg <= cx2341x_set_ctrl_95_98;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_95_98_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %99*/
/*   %100 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_99_100 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %99*/
/*   %100 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
cx2341x_set_ctrl_99_100_reg <= cx2341x_set_ctrl_99_100;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_99_100_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_99_101 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
cx2341x_set_ctrl_99_101_reg <= cx2341x_set_ctrl_99_101;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_99_101_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %99*/
/*   %102 = icmp ne i32 %101, 0*/
begin
cx2341x_set_ctrl_99_102 = (cx2341x_set_ctrl_99_101 != 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %99*/
/*   %102 = icmp ne i32 %101, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
cx2341x_set_ctrl_99_102_reg <= cx2341x_set_ctrl_99_102;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_99_102_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %99*/
/*   %103 = zext i1 %102 to i32*/
begin
cx2341x_set_ctrl_99_103 = cx2341x_set_ctrl_99_102;
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %99*/
/*   %103 = zext i1 %102 to i32*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
cx2341x_set_ctrl_99_103_reg <= cx2341x_set_ctrl_99_103;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_99_103_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %99*/
/*   %104 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 18*/
begin
cx2341x_set_ctrl_99_104 = (arg_params + 72);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %99*/
/*   %104 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 18*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
cx2341x_set_ctrl_99_104_reg <= cx2341x_set_ctrl_99_104;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_99_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_99_104_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %105*/
/*   %106 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_105_106 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %105*/
/*   %106 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
cx2341x_set_ctrl_105_106_reg <= cx2341x_set_ctrl_105_106;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_105_106_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_105_107 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
cx2341x_set_ctrl_105_107_reg <= cx2341x_set_ctrl_105_107;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_105_107_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %105*/
/*   %108 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 19*/
begin
cx2341x_set_ctrl_105_108 = (arg_params + 76);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %105*/
/*   %108 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 19*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
cx2341x_set_ctrl_105_108_reg <= cx2341x_set_ctrl_105_108;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_105_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_105_108_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %109*/
/*   %110 = icmp eq i32 %busy, 0*/
begin
cx2341x_set_ctrl_109_110 = (arg_busy == 32'd0);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %109*/
/*   %110 = icmp eq i32 %busy, 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_109_157))
begin
cx2341x_set_ctrl_109_110_reg <= cx2341x_set_ctrl_109_110;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_109_110_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %111*/
/*   %112 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_111_112 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %111*/
/*   %112 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
cx2341x_set_ctrl_111_112_reg <= cx2341x_set_ctrl_111_112;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_111_112_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_111_113 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
cx2341x_set_ctrl_111_113_reg <= cx2341x_set_ctrl_111_113;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_111_113_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %111*/
/*   %114 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 20*/
begin
cx2341x_set_ctrl_111_114 = (arg_params + 80);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %111*/
/*   %114 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 20*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
cx2341x_set_ctrl_111_114_reg <= cx2341x_set_ctrl_111_114;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_111_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_111_114_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %111*/
/*   %115 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 34*/
begin
cx2341x_set_ctrl_111_115 = (arg_params + 136);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %111*/
/*   %115 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 34*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
cx2341x_set_ctrl_111_115_reg <= cx2341x_set_ctrl_111_115;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_111_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_111_115_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %111*/
/*   %116 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 14*/
begin
cx2341x_set_ctrl_111_116 = (arg_params + 56);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %111*/
/*   %116 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 14*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
cx2341x_set_ctrl_111_116_reg <= cx2341x_set_ctrl_111_116;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_111_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_111_116_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %117*/
/*   %118 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_117_118 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %117*/
/*   %118 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
cx2341x_set_ctrl_117_118_reg <= cx2341x_set_ctrl_117_118;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_117_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_117_118_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_117_119 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
cx2341x_set_ctrl_117_119_reg <= cx2341x_set_ctrl_117_119;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_117_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_117_119_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %117*/
/*   %120 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 21*/
begin
cx2341x_set_ctrl_117_120 = (arg_params + 84);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %117*/
/*   %120 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 21*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
cx2341x_set_ctrl_117_120_reg <= cx2341x_set_ctrl_117_120;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_117_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_117_120_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %121*/
/*   %122 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_121_122 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %121*/
/*   %122 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
cx2341x_set_ctrl_121_122_reg <= cx2341x_set_ctrl_121_122;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_121_122_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_121_123 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
cx2341x_set_ctrl_121_123_reg <= cx2341x_set_ctrl_121_123;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_121_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_121_123_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %121*/
/*   %124 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 22*/
begin
cx2341x_set_ctrl_121_124 = (arg_params + 88);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %121*/
/*   %124 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 22*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
cx2341x_set_ctrl_121_124_reg <= cx2341x_set_ctrl_121_124;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_121_124_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %125*/
/*   %126 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_125_126 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %125*/
/*   %126 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
cx2341x_set_ctrl_125_126_reg <= cx2341x_set_ctrl_125_126;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_125_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_125_126_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_125_127 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
cx2341x_set_ctrl_125_127_reg <= cx2341x_set_ctrl_125_127;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_125_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_125_127_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %125*/
/*   %128 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 23*/
begin
cx2341x_set_ctrl_125_128 = (arg_params + 92);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %125*/
/*   %128 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 23*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
cx2341x_set_ctrl_125_128_reg <= cx2341x_set_ctrl_125_128;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_125_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_125_128_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %129*/
/*   %130 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_129_130 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %129*/
/*   %130 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
cx2341x_set_ctrl_129_130_reg <= cx2341x_set_ctrl_129_130;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_129_130_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_129_131 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
cx2341x_set_ctrl_129_131_reg <= cx2341x_set_ctrl_129_131;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_129_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_129_131_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %129*/
/*   %132 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 24*/
begin
cx2341x_set_ctrl_129_132 = (arg_params + 96);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %129*/
/*   %132 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 24*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
cx2341x_set_ctrl_129_132_reg <= cx2341x_set_ctrl_129_132;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_129_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_129_132_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %133*/
/*   %134 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_133_134 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %133*/
/*   %134 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
cx2341x_set_ctrl_133_134_reg <= cx2341x_set_ctrl_133_134;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_133_134_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_133_135 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
cx2341x_set_ctrl_133_135_reg <= cx2341x_set_ctrl_133_135;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_133_135_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %133*/
/*   %136 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 25*/
begin
cx2341x_set_ctrl_133_136 = (arg_params + 100);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %133*/
/*   %136 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 25*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
cx2341x_set_ctrl_133_136_reg <= cx2341x_set_ctrl_133_136;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_133_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_133_136_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %137*/
/*   %138 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_137_138 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %137*/
/*   %138 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
cx2341x_set_ctrl_137_138_reg <= cx2341x_set_ctrl_137_138;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_137_138_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_137_139 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
cx2341x_set_ctrl_137_139_reg <= cx2341x_set_ctrl_137_139;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_137_139_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %137*/
/*   %140 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 26*/
begin
cx2341x_set_ctrl_137_140 = (arg_params + 104);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %137*/
/*   %140 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 26*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
cx2341x_set_ctrl_137_140_reg <= cx2341x_set_ctrl_137_140;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_137_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_137_140_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %141*/
/*   %142 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_141_142 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %141*/
/*   %142 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
cx2341x_set_ctrl_141_142_reg <= cx2341x_set_ctrl_141_142;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_141_142_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_141_143 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
cx2341x_set_ctrl_141_143_reg <= cx2341x_set_ctrl_141_143;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_141_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_141_143_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %141*/
/*   %144 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 27*/
begin
cx2341x_set_ctrl_141_144 = (arg_params + 108);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %141*/
/*   %144 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 27*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
cx2341x_set_ctrl_141_144_reg <= cx2341x_set_ctrl_141_144;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_141_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_141_144_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %145*/
/*   %146 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_145_146 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %145*/
/*   %146 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
cx2341x_set_ctrl_145_146_reg <= cx2341x_set_ctrl_145_146;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_145_146_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_145_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
cx2341x_set_ctrl_145_147_reg <= cx2341x_set_ctrl_145_147;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_145_147_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %145*/
/*   %148 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 28*/
begin
cx2341x_set_ctrl_145_148 = (arg_params + 112);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %145*/
/*   %148 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 28*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
cx2341x_set_ctrl_145_148_reg <= cx2341x_set_ctrl_145_148;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_145_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_145_148_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %149*/
/*   %150 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_149_150 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %149*/
/*   %150 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
cx2341x_set_ctrl_149_150_reg <= cx2341x_set_ctrl_149_150;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_149_150_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_149_151 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
cx2341x_set_ctrl_149_151_reg <= cx2341x_set_ctrl_149_151;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_149_151_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %149*/
/*   %152 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 29*/
begin
cx2341x_set_ctrl_149_152 = (arg_params + 116);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %149*/
/*   %152 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 29*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
cx2341x_set_ctrl_149_152_reg <= cx2341x_set_ctrl_149_152;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_149_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_149_152_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %153*/
/*   %154 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_153_154 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %153*/
/*   %154 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
cx2341x_set_ctrl_153_154_reg <= cx2341x_set_ctrl_153_154;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_153_154_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_153_155 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
cx2341x_set_ctrl_153_155_reg <= cx2341x_set_ctrl_153_155;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_153_155_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %153*/
/*   %156 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 30*/
begin
cx2341x_set_ctrl_153_156 = (arg_params + 120);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %153*/
/*   %156 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 30*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
cx2341x_set_ctrl_153_156_reg <= cx2341x_set_ctrl_153_156;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_153_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_153_156_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %157*/
/*   %158 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_157_158 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %157*/
/*   %158 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
cx2341x_set_ctrl_157_158_reg <= cx2341x_set_ctrl_157_158;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_157_158_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_157_159 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
cx2341x_set_ctrl_157_159_reg <= cx2341x_set_ctrl_157_159;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_157_159_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %157*/
/*   %160 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 31*/
begin
cx2341x_set_ctrl_157_160 = (arg_params + 124);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %157*/
/*   %160 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 31*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
cx2341x_set_ctrl_157_160_reg <= cx2341x_set_ctrl_157_160;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_157_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_157_160_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %161*/
/*   %162 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_161_162 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %161*/
/*   %162 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
cx2341x_set_ctrl_161_162_reg <= cx2341x_set_ctrl_161_162;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_161_162_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_161_163 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
cx2341x_set_ctrl_161_163_reg <= cx2341x_set_ctrl_161_163;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_161_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_161_163_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %161*/
/*   %164 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 32*/
begin
cx2341x_set_ctrl_161_164 = (arg_params + 128);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %161*/
/*   %164 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 32*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
cx2341x_set_ctrl_161_164_reg <= cx2341x_set_ctrl_161_164;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_161_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_161_164_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %165*/
/*   %166 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
begin
cx2341x_set_ctrl_165_166 = (arg_ctrl + 4);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %165*/
/*   %166 = getelementptr inbounds %struct.v4l2_ext_control* %ctrl, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
cx2341x_set_ctrl_165_166_reg <= cx2341x_set_ctrl_165_166;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_165_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_165_166_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
begin
cx2341x_set_ctrl_165_167 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
cx2341x_set_ctrl_165_167_reg <= cx2341x_set_ctrl_165_167;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_165_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_165_167_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %165*/
/*   %168 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 33*/
begin
cx2341x_set_ctrl_165_168 = (arg_params + 132);
end
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %165*/
/*   %168 = getelementptr inbounds %struct.cx2341x_mpeg_params* %params, i32 0, i32 33*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
cx2341x_set_ctrl_165_168_reg <= cx2341x_set_ctrl_165_168;
if (reset == 1'b0 && ^(cx2341x_set_ctrl_165_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_165_168_reg"); $finish; end
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %50 = srem i32 %49, %45*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_signed_modulus_32_0_op0 = cx2341x_set_ctrl_42_49;
end
/* cx2341x_set_ctrl: %55*/
/*   %62 = srem i32 %61, %58*/
else /* if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84)) */
begin
cx2341x_set_ctrl_signed_modulus_32_0_op0 = cx2341x_set_ctrl_55_61;
end
end
always @(*) begin
/* cx2341x_set_ctrl: %42*/
/*   %50 = srem i32 %49, %45*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
cx2341x_set_ctrl_signed_modulus_32_0_op1 = cx2341x_set_ctrl_42_45;
end
/* cx2341x_set_ctrl: %55*/
/*   %62 = srem i32 %61, %58*/
else /* if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_84)) */
begin
cx2341x_set_ctrl_signed_modulus_32_0_op1 = cx2341x_set_ctrl_55_58;
end
end
always @(*) begin
lpm_divide_cx2341x_set_ctrl_55_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_cx2341x_set_ctrl_55_62_out = lpm_divide_cx2341x_set_ctrl_55_62_temp_out;
end
always @(*) begin
cx2341x_set_ctrl_signed_modulus_32_0 = lpm_divide_cx2341x_set_ctrl_55_62_out;
end
always @(*) begin
lpm_divide_cx2341x_set_ctrl_42_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_cx2341x_set_ctrl_53_tmp21_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %53*/
/*   %tmp21 = mul i32 %indvar18, %tmp20*/
if ((lpm_mult_cx2341x_set_ctrl_53_tmp21_en == 1'd1))
begin
cx2341x_set_ctrl_53_tmp21_stage0_reg <= (cx2341x_set_ctrl_53_indvar18_reg * cx2341x_set_ctrl__lr_ph10_tmp20_reg);
end
end
always @(*) begin
lpm_mult_cx2341x_set_ctrl_66_tmp13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* cx2341x_set_ctrl: %66*/
/*   %tmp13 = mul i32 %indvar, %tmp*/
if ((lpm_mult_cx2341x_set_ctrl_66_tmp13_en == 1'd1))
begin
cx2341x_set_ctrl_66_tmp13_stage0_reg <= (cx2341x_set_ctrl_66_indvar_reg * cx2341x_set_ctrl__lr_ph_tmp_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* cx2341x_set_ctrl: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %5*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   store i32 %.pre, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %14*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %18*/
/*   store i32 %20, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %22*/
/*   store i32 %24, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %26*/
/*   store i32 %28, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %38*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %55*/
/*   store i32 %63, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge*/
/*   store i32 %tmp16, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %69*/
/*   store i32 %71, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %91*/
/*   store i32 %93, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %99*/
/*   store i32 %103, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 %113, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %121*/
/*   store i32 %123, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %129*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %137*/
/*   store i32 %139, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %145*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %153*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
memory_controller_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %161*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1))
begin
memory_controller_address_a = cx2341x_set_ctrl_0_1;
end
/* cx2341x_set_ctrl: %5*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
memory_controller_address_a = cx2341x_set_ctrl_5_8_reg;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   store i32 %.pre, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
memory_controller_address_a = cx2341x_set_ctrl___crit_edge26_11_reg;
end
/* cx2341x_set_ctrl: %14*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
memory_controller_address_a = cx2341x_set_ctrl_14_17_reg;
end
/* cx2341x_set_ctrl: %18*/
/*   store i32 %20, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
memory_controller_address_a = cx2341x_set_ctrl_18_21_reg;
end
/* cx2341x_set_ctrl: %22*/
/*   store i32 %24, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
memory_controller_address_a = cx2341x_set_ctrl_22_25_reg;
end
/* cx2341x_set_ctrl: %26*/
/*   store i32 %28, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
memory_controller_address_a = cx2341x_set_ctrl_26_29_reg;
end
/* cx2341x_set_ctrl: %38*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
memory_controller_address_a = cx2341x_set_ctrl_38_41_reg;
end
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_address_a = cx2341x_set_ctrl_42_43;
end
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_address_a = cx2341x_set_ctrl_55_56;
end
/* cx2341x_set_ctrl: %55*/
/*   store i32 %63, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
memory_controller_address_a = cx2341x_set_ctrl_55_64_reg;
end
/* cx2341x_set_ctrl: %._crit_edge*/
/*   store i32 %tmp16, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121))
begin
memory_controller_address_a = cx2341x_set_ctrl_55_64_reg;
end
/* cx2341x_set_ctrl: %69*/
/*   store i32 %71, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
memory_controller_address_a = cx2341x_set_ctrl_69_72_reg;
end
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_address_a = cx2341x_set_ctrl_75_76;
end
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
memory_controller_address_a = cx2341x_set_ctrl_85_86;
end
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
memory_controller_address_a = cx2341x_set_ctrl_91_92;
end
/* cx2341x_set_ctrl: %91*/
/*   store i32 %93, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
memory_controller_address_a = cx2341x_set_ctrl_91_94_reg;
end
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
memory_controller_address_a = cx2341x_set_ctrl_99_100;
end
/* cx2341x_set_ctrl: %99*/
/*   store i32 %103, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
memory_controller_address_a = cx2341x_set_ctrl_99_104_reg;
end
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
memory_controller_address_a = cx2341x_set_ctrl_111_112;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 %113, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_address_a = cx2341x_set_ctrl_111_114_reg;
end
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
memory_controller_address_a = cx2341x_set_ctrl_117_118;
end
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
memory_controller_address_a = cx2341x_set_ctrl_121_122;
end
/* cx2341x_set_ctrl: %121*/
/*   store i32 %123, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
memory_controller_address_a = cx2341x_set_ctrl_121_124_reg;
end
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
memory_controller_address_a = cx2341x_set_ctrl_129_130;
end
/* cx2341x_set_ctrl: %129*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
memory_controller_address_a = cx2341x_set_ctrl_129_132_reg;
end
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
memory_controller_address_a = cx2341x_set_ctrl_137_138;
end
/* cx2341x_set_ctrl: %137*/
/*   store i32 %139, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
memory_controller_address_a = cx2341x_set_ctrl_137_140_reg;
end
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
memory_controller_address_a = cx2341x_set_ctrl_145_146;
end
/* cx2341x_set_ctrl: %145*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
memory_controller_address_a = cx2341x_set_ctrl_145_148_reg;
end
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
memory_controller_address_a = cx2341x_set_ctrl_153_154;
end
/* cx2341x_set_ctrl: %153*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
memory_controller_address_a = cx2341x_set_ctrl_153_156_reg;
end
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
memory_controller_address_a = cx2341x_set_ctrl_161_162;
end
/* cx2341x_set_ctrl: %161*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
memory_controller_address_a = cx2341x_set_ctrl_161_164_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   store i32 %.pre, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %14*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %18*/
/*   store i32 %20, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %22*/
/*   store i32 %24, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %26*/
/*   store i32 %28, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %38*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %55*/
/*   store i32 %63, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge*/
/*   store i32 %tmp16, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %69*/
/*   store i32 %71, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %91*/
/*   store i32 %93, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %99*/
/*   store i32 %103, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 %113, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %121*/
/*   store i32 %123, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %129*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %137*/
/*   store i32 %139, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %145*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %153*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cx2341x_set_ctrl: %161*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
memory_controller_in_a = cx2341x_set_ctrl_5_7;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   store i32 %.pre, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
memory_controller_in_a = cx2341x_set_ctrl___crit_edge26__pre;
end
/* cx2341x_set_ctrl: %14*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
memory_controller_in_a = cx2341x_set_ctrl_14_16;
end
/* cx2341x_set_ctrl: %18*/
/*   store i32 %20, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
memory_controller_in_a = cx2341x_set_ctrl_18_20;
end
/* cx2341x_set_ctrl: %22*/
/*   store i32 %24, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
memory_controller_in_a = cx2341x_set_ctrl_22_24;
end
/* cx2341x_set_ctrl: %26*/
/*   store i32 %28, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
memory_controller_in_a = cx2341x_set_ctrl_26_28;
end
/* cx2341x_set_ctrl: %38*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
memory_controller_in_a = cx2341x_set_ctrl_38_40;
end
/* cx2341x_set_ctrl: %55*/
/*   store i32 %63, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
memory_controller_in_a = cx2341x_set_ctrl_55_63;
end
/* cx2341x_set_ctrl: %._crit_edge*/
/*   store i32 %tmp16, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121))
begin
memory_controller_in_a = cx2341x_set_ctrl_66_tmp16_reg;
end
/* cx2341x_set_ctrl: %69*/
/*   store i32 %71, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
memory_controller_in_a = cx2341x_set_ctrl_69_71;
end
/* cx2341x_set_ctrl: %91*/
/*   store i32 %93, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
memory_controller_in_a = cx2341x_set_ctrl_91_93;
end
/* cx2341x_set_ctrl: %99*/
/*   store i32 %103, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
memory_controller_in_a = cx2341x_set_ctrl_99_103;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 %113, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_in_a = cx2341x_set_ctrl_111_113;
end
/* cx2341x_set_ctrl: %121*/
/*   store i32 %123, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
memory_controller_in_a = cx2341x_set_ctrl_121_123;
end
/* cx2341x_set_ctrl: %129*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
memory_controller_in_a = cx2341x_set_ctrl_129_131;
end
/* cx2341x_set_ctrl: %137*/
/*   store i32 %139, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
memory_controller_in_a = cx2341x_set_ctrl_137_139;
end
/* cx2341x_set_ctrl: %145*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
memory_controller_in_a = cx2341x_set_ctrl_145_147;
end
/* cx2341x_set_ctrl: %153*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
memory_controller_in_a = cx2341x_set_ctrl_153_155;
end
/* cx2341x_set_ctrl: %161*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
memory_controller_in_a = cx2341x_set_ctrl_161_163;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* cx2341x_set_ctrl: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %5*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_7))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   store i32 %.pre, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_12))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %14*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_17))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %18*/
/*   store i32 %20, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_21))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %22*/
/*   store i32 %24, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_25))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %26*/
/*   store i32 %28, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_29))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %38*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_41))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %55*/
/*   store i32 %63, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_116))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %._crit_edge*/
/*   store i32 %tmp16, i32* %64, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge_121))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %69*/
/*   store i32 %71, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_127))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %85*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_136))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_141))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %91*/
/*   store i32 %93, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_91_143))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_149))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %99*/
/*   store i32 %103, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_99_151))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %111*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_158))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 %113, i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %117*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_163))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_167))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %121*/
/*   store i32 %123, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_121_169))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %129*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_175))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %129*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_129_177))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %137*/
/*   %139 = load i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_183))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %137*/
/*   store i32 %139, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_137_185))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_191))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %145*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_145_193))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_199))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %153*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_153_201))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %161*/
/*   %163 = load i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_207))
begin
memory_controller_size_a = 2'd2;
end
/* cx2341x_set_ctrl: %161*/
/*   store i32 %163, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_161_209))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %30*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %34*/
/*   store i32 %36, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %44, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %51, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %68*/
/*   store i32 %storemerge.lcssa, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   store i32 %80, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %85*/
/*   store i32 %87, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %95*/
/*   store i32 %97, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %105*/
/*   store i32 %107, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %117*/
/*   store i32 %119, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %125*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %133*/
/*   store i32 %135, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %141*/
/*   store i32 %143, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %149*/
/*   store i32 %151, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %157*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %165*/
/*   store i32 %167, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
memory_controller_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %..loopexit_crit_edge*/
/*   store i32 %tmp24, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
memory_controller_address_b = cx2341x_set_ctrl_5_6;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
memory_controller_address_b = cx2341x_set_ctrl___crit_edge26__phi_trans_insert;
end
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
memory_controller_address_b = cx2341x_set_ctrl_14_15;
end
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
memory_controller_address_b = cx2341x_set_ctrl_18_19;
end
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
memory_controller_address_b = cx2341x_set_ctrl_22_23;
end
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
memory_controller_address_b = cx2341x_set_ctrl_26_27;
end
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
memory_controller_address_b = cx2341x_set_ctrl_30_31;
end
/* cx2341x_set_ctrl: %30*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
memory_controller_address_b = cx2341x_set_ctrl_30_33_reg;
end
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
memory_controller_address_b = cx2341x_set_ctrl_34_35;
end
/* cx2341x_set_ctrl: %34*/
/*   store i32 %36, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
memory_controller_address_b = cx2341x_set_ctrl_34_37_reg;
end
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
memory_controller_address_b = cx2341x_set_ctrl_38_39;
end
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_address_b = cx2341x_set_ctrl_42_46;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %44, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
memory_controller_address_b = cx2341x_set_ctrl_42_48_reg;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %51, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
memory_controller_address_b = cx2341x_set_ctrl_42_46_reg;
end
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_address_b = cx2341x_set_ctrl_55_59;
end
/* cx2341x_set_ctrl: %68*/
/*   store i32 %storemerge.lcssa, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123))
begin
memory_controller_address_b = cx2341x_set_ctrl_55_59_reg;
end
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
memory_controller_address_b = cx2341x_set_ctrl_69_70;
end
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_address_b = cx2341x_set_ctrl_75_79;
end
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   store i32 %80, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
memory_controller_address_b = cx2341x_set_ctrl___crit_edge25_82;
end
/* cx2341x_set_ctrl: %85*/
/*   store i32 %87, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
memory_controller_address_b = cx2341x_set_ctrl_85_88_reg;
end
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
memory_controller_address_b = cx2341x_set_ctrl_95_96;
end
/* cx2341x_set_ctrl: %95*/
/*   store i32 %97, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
memory_controller_address_b = cx2341x_set_ctrl_95_98_reg;
end
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
memory_controller_address_b = cx2341x_set_ctrl_105_106;
end
/* cx2341x_set_ctrl: %105*/
/*   store i32 %107, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
memory_controller_address_b = cx2341x_set_ctrl_105_108_reg;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_address_b = cx2341x_set_ctrl_111_115_reg;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161))
begin
memory_controller_address_b = cx2341x_set_ctrl_111_116_reg;
end
/* cx2341x_set_ctrl: %117*/
/*   store i32 %119, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
memory_controller_address_b = cx2341x_set_ctrl_117_120_reg;
end
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
memory_controller_address_b = cx2341x_set_ctrl_125_126;
end
/* cx2341x_set_ctrl: %125*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
memory_controller_address_b = cx2341x_set_ctrl_125_128_reg;
end
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
memory_controller_address_b = cx2341x_set_ctrl_133_134;
end
/* cx2341x_set_ctrl: %133*/
/*   store i32 %135, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
memory_controller_address_b = cx2341x_set_ctrl_133_136_reg;
end
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
memory_controller_address_b = cx2341x_set_ctrl_141_142;
end
/* cx2341x_set_ctrl: %141*/
/*   store i32 %143, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
memory_controller_address_b = cx2341x_set_ctrl_141_144_reg;
end
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
memory_controller_address_b = cx2341x_set_ctrl_149_150;
end
/* cx2341x_set_ctrl: %149*/
/*   store i32 %151, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
memory_controller_address_b = cx2341x_set_ctrl_149_152_reg;
end
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
memory_controller_address_b = cx2341x_set_ctrl_157_158;
end
/* cx2341x_set_ctrl: %157*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
memory_controller_address_b = cx2341x_set_ctrl_157_160_reg;
end
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
memory_controller_address_b = cx2341x_set_ctrl_165_166;
end
/* cx2341x_set_ctrl: %165*/
/*   store i32 %167, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
memory_controller_address_b = cx2341x_set_ctrl_165_168_reg;
end
/* cx2341x_set_ctrl: %..loopexit_crit_edge*/
/*   store i32 %tmp24, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215))
begin
memory_controller_address_b = cx2341x_set_ctrl_42_46_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %30*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %34*/
/*   store i32 %36, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %44, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %51, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %68*/
/*   store i32 %storemerge.lcssa, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   store i32 %80, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %85*/
/*   store i32 %87, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %95*/
/*   store i32 %97, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %105*/
/*   store i32 %107, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %117*/
/*   store i32 %119, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %125*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %133*/
/*   store i32 %135, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %141*/
/*   store i32 %143, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %149*/
/*   store i32 %151, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %157*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cx2341x_set_ctrl: %165*/
/*   store i32 %167, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cx2341x_set_ctrl: %..loopexit_crit_edge*/
/*   store i32 %tmp24, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* cx2341x_set_ctrl: %30*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
memory_controller_in_b = cx2341x_set_ctrl_30_32;
end
/* cx2341x_set_ctrl: %34*/
/*   store i32 %36, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
memory_controller_in_b = cx2341x_set_ctrl_34_36;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %44, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
memory_controller_in_b = cx2341x_set_ctrl_42_44;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %51, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
memory_controller_in_b = cx2341x_set_ctrl_42_51;
end
/* cx2341x_set_ctrl: %68*/
/*   store i32 %storemerge.lcssa, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123))
begin
memory_controller_in_b = cx2341x_set_ctrl_68_storemerge_lcssa_reg;
end
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   store i32 %80, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
memory_controller_in_b = cx2341x_set_ctrl_75_80_reg;
end
/* cx2341x_set_ctrl: %85*/
/*   store i32 %87, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
memory_controller_in_b = cx2341x_set_ctrl_85_87;
end
/* cx2341x_set_ctrl: %95*/
/*   store i32 %97, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
memory_controller_in_b = cx2341x_set_ctrl_95_97;
end
/* cx2341x_set_ctrl: %105*/
/*   store i32 %107, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
memory_controller_in_b = cx2341x_set_ctrl_105_107;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_in_b = 32'd0;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161))
begin
memory_controller_in_b = 32'd0;
end
/* cx2341x_set_ctrl: %117*/
/*   store i32 %119, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
memory_controller_in_b = cx2341x_set_ctrl_117_119;
end
/* cx2341x_set_ctrl: %125*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
memory_controller_in_b = cx2341x_set_ctrl_125_127;
end
/* cx2341x_set_ctrl: %133*/
/*   store i32 %135, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
memory_controller_in_b = cx2341x_set_ctrl_133_135;
end
/* cx2341x_set_ctrl: %141*/
/*   store i32 %143, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
memory_controller_in_b = cx2341x_set_ctrl_141_143;
end
/* cx2341x_set_ctrl: %149*/
/*   store i32 %151, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
memory_controller_in_b = cx2341x_set_ctrl_149_151;
end
/* cx2341x_set_ctrl: %157*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
memory_controller_in_b = cx2341x_set_ctrl_157_159;
end
/* cx2341x_set_ctrl: %165*/
/*   store i32 %167, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
memory_controller_in_b = cx2341x_set_ctrl_165_167;
end
/* cx2341x_set_ctrl: %..loopexit_crit_edge*/
/*   store i32 %tmp24, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215))
begin
memory_controller_in_b = cx2341x_set_ctrl_53_tmp24_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* cx2341x_set_ctrl: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_5_5))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %._crit_edge26*/
/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge26_10))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %14*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_14_15))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_18_19))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_22_23))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %26*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_26_27))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %30*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_31))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %30*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_30_33))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %34*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_35))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %34*/
/*   store i32 %36, i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_34_37))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %38*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_38_39))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %42*/
/*   %47 = load i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_43))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %44, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_45))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %42*/
/*   store i32 %51, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_42_77))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_55_82))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %68*/
/*   store i32 %storemerge.lcssa, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_68_123))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_69_125))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %75*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_75_130))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %._crit_edge25*/
/*   store i32 %80, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___crit_edge25_133))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %85*/
/*   store i32 %87, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_85_138))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_145))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %95*/
/*   store i32 %97, i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_95_147))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_153))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %105*/
/*   store i32 %107, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_105_155))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_160))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %111*/
/*   store i32 0, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_111_161))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %117*/
/*   store i32 %119, i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_117_165))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %125*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_171))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %125*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_125_173))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %133*/
/*   %135 = load i32* %134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_179))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %133*/
/*   store i32 %135, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_133_181))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_187))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %141*/
/*   store i32 %143, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_141_189))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_195))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %149*/
/*   store i32 %151, i32* %152, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_149_197))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %157*/
/*   %159 = load i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_203))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %157*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_157_205))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_211))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %165*/
/*   store i32 %167, i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB_165_213))
begin
memory_controller_size_b = 2'd2;
end
/* cx2341x_set_ctrl: %..loopexit_crit_edge*/
/*   store i32 %tmp24, i32* %46, align 4*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB___loopexit_crit_edge_215))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* cx2341x_set_ctrl: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_cx2341x_set_ctrl_BB__loopexit_217))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  cx2341x_set_ctrl_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_arg_params;
reg [31:0] cx2341x_set_ctrl_arg_busy;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_arg_ctrl;
wire  cx2341x_set_ctrl_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_memory_controller_address_a;
wire  cx2341x_set_ctrl_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cx2341x_set_ctrl_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cx2341x_set_ctrl_memory_controller_out_a;
wire [1:0] cx2341x_set_ctrl_memory_controller_size_a;
wire  cx2341x_set_ctrl_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cx2341x_set_ctrl_memory_controller_address_b;
wire  cx2341x_set_ctrl_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cx2341x_set_ctrl_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cx2341x_set_ctrl_memory_controller_out_b;
wire [1:0] cx2341x_set_ctrl_memory_controller_size_b;
reg  cx2341x_set_ctrl_memory_controller_waitrequest;
wire  cx2341x_set_ctrl_finish;
reg  cx2341x_set_ctrl_finish_final;
wire [31:0] cx2341x_set_ctrl_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


cx2341x_set_ctrl cx2341x_set_ctrl_inst (
	.memory_controller_enable_a (cx2341x_set_ctrl_memory_controller_enable_a),
	.memory_controller_address_a (cx2341x_set_ctrl_memory_controller_address_a),
	.memory_controller_write_enable_a (cx2341x_set_ctrl_memory_controller_write_enable_a),
	.memory_controller_in_a (cx2341x_set_ctrl_memory_controller_in_a),
	.memory_controller_size_a (cx2341x_set_ctrl_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (cx2341x_set_ctrl_memory_controller_enable_b),
	.memory_controller_address_b (cx2341x_set_ctrl_memory_controller_address_b),
	.memory_controller_write_enable_b (cx2341x_set_ctrl_memory_controller_write_enable_b),
	.memory_controller_in_b (cx2341x_set_ctrl_memory_controller_in_b),
	.memory_controller_size_b (cx2341x_set_ctrl_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (cx2341x_set_ctrl_start),
	.finish (cx2341x_set_ctrl_finish),
	.return_val (cx2341x_set_ctrl_return_val),
	.arg_params (cx2341x_set_ctrl_arg_params),
	.arg_busy (cx2341x_set_ctrl_arg_busy),
	.arg_ctrl (cx2341x_set_ctrl_arg_ctrl)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (cx2341x_set_ctrl_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
begin
main_0_1 = cx2341x_set_ctrl_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cx2341x_set_ctrl_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
cx2341x_set_ctrl_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cx2341x_set_ctrl_arg_params <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_arg_params"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cx2341x_set_ctrl_arg_busy <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_arg_busy"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cx2341x_set_ctrl_arg_ctrl <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cx2341x_set_ctrl_arg_ctrl"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
begin
cx2341x_set_ctrl_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
begin
cx2341x_set_ctrl_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
cx2341x_set_ctrl_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
cx2341x_set_ctrl_finish_final = cx2341x_set_ctrl_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = cx2341x_set_ctrl_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = cx2341x_set_ctrl_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = cx2341x_set_ctrl_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = cx2341x_set_ctrl_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = cx2341x_set_ctrl_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = cx2341x_set_ctrl_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = cx2341x_set_ctrl_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = cx2341x_set_ctrl_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = cx2341x_set_ctrl_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = cx2341x_set_ctrl_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cx2341x_set_ctrl_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = cx2341x_set_ctrl_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cx2341x_set_ctrl(%struct.cx2341x_mpeg_params* undef, i32 undef, %struct.v4l2_ext_control* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = cx2341x_set_ctrl_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
