//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:12 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module set_ppc_fields
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_v,
	arg_p,
	arg_data
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_2_2 = 8'd2;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_2_3 = 8'd3;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_2_4 = 8'd4;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_5 = 8'd5;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_6 = 8'd6;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_7 = 8'd7;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_8 = 8'd8;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_9 = 8'd9;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_5_10 = 8'd10;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_11 = 8'd11;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_12 = 8'd12;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_13 = 8'd13;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_14 = 8'd14;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_15 = 8'd15;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_16 = 8'd16;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_17 = 8'd17;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_18 = 8'd18;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_19 = 8'd19;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_11_20 = 8'd20;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_21_21 = 8'd21;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_21_22 = 8'd22;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_21_23 = 8'd23;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_24 = 8'd24;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_25 = 8'd25;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_26 = 8'd26;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_27 = 8'd27;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_28 = 8'd28;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_29 = 8'd29;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_30 = 8'd30;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_31 = 8'd31;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_32 = 8'd32;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_25_33 = 8'd33;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_35_34 = 8'd34;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_35_35 = 8'd35;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_35_36 = 8'd36;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_37 = 8'd37;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_38 = 8'd38;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_39 = 8'd39;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_40 = 8'd40;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_41 = 8'd41;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_42 = 8'd42;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_43 = 8'd43;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_44 = 8'd44;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_45 = 8'd45;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_39_46 = 8'd46;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_47 = 8'd47;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_48 = 8'd48;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_49 = 8'd49;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_50 = 8'd50;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_51 = 8'd51;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_52 = 8'd52;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_53 = 8'd53;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_54 = 8'd54;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_49_55 = 8'd55;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_56 = 8'd56;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_57 = 8'd57;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_58 = 8'd58;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_59 = 8'd59;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_60 = 8'd60;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_61 = 8'd61;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_62 = 8'd62;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_63 = 8'd63;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_64 = 8'd64;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_65 = 8'd65;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_66 = 8'd66;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_67 = 8'd67;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_68 = 8'd68;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_69 = 8'd69;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_60_70 = 8'd70;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_71 = 8'd71;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_72 = 8'd72;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_73 = 8'd73;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_74 = 8'd74;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_75 = 8'd75;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_76 = 8'd76;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_77 = 8'd77;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_78 = 8'd78;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_79 = 8'd79;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_80 = 8'd80;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_81 = 8'd81;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_82 = 8'd82;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_83 = 8'd83;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_84 = 8'd84;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_83_85 = 8'd85;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_86 = 8'd86;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_87 = 8'd87;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_88 = 8'd88;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_89 = 8'd89;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_90 = 8'd90;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_91 = 8'd91;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_92 = 8'd92;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_93 = 8'd93;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_94 = 8'd94;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_95 = 8'd95;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_96 = 8'd96;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_97 = 8'd97;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_98 = 8'd98;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_99 = 8'd99;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_106_100 = 8'd100;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_101 = 8'd101;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_102 = 8'd102;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_103 = 8'd103;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_104 = 8'd104;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_105 = 8'd105;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_106 = 8'd106;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_107 = 8'd107;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_108 = 8'd108;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_109 = 8'd109;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_110 = 8'd110;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_111 = 8'd111;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_112 = 8'd112;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_113 = 8'd113;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_114 = 8'd114;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_129_115 = 8'd115;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_116 = 8'd116;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_117 = 8'd117;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_118 = 8'd118;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_119 = 8'd119;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_120 = 8'd120;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_121 = 8'd121;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_122 = 8'd122;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_123 = 8'd123;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_152_124 = 8'd124;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_125 = 8'd125;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_126 = 8'd126;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_127 = 8'd127;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_128 = 8'd128;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_129 = 8'd129;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_130 = 8'd130;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_131 = 8'd131;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_132 = 8'd132;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_133 = 8'd133;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_134 = 8'd134;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_135 = 8'd135;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_163_136 = 8'd136;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_137 = 8'd137;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_138 = 8'd138;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_139 = 8'd139;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_140 = 8'd140;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_141 = 8'd141;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_142 = 8'd142;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_143 = 8'd143;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_144 = 8'd144;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_145 = 8'd145;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_146 = 8'd146;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_147 = 8'd147;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_148 = 8'd148;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_149 = 8'd149;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_150 = 8'd150;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_151 = 8'd151;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_152 = 8'd152;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_153 = 8'd153;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_180_154 = 8'd154;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_155 = 8'd155;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_156 = 8'd156;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_157 = 8'd157;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_158 = 8'd158;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_159 = 8'd159;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_160 = 8'd160;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_161 = 8'd161;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_162 = 8'd162;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_209_163 = 8'd163;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_164 = 8'd164;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_165 = 8'd165;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_166 = 8'd166;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_167 = 8'd167;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_168 = 8'd168;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_169 = 8'd169;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_170 = 8'd170;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_171 = 8'd171;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_220_172 = 8'd172;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_173 = 8'd173;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_174 = 8'd174;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_175 = 8'd175;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_176 = 8'd176;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_177 = 8'd177;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_178 = 8'd178;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_179 = 8'd179;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_180 = 8'd180;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_181 = 8'd181;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_182 = 8'd182;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_183 = 8'd183;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_231_184 = 8'd184;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_185 = 8'd185;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_186 = 8'd186;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_187 = 8'd187;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_188 = 8'd188;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_189 = 8'd189;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_190 = 8'd190;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_191 = 8'd191;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_192 = 8'd192;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_193 = 8'd193;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_194 = 8'd194;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_195 = 8'd195;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_248_196 = 8'd196;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_265_197 = 8'd197;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_265_198 = 8'd198;
parameter [7:0] LEGUP_F_set_ppc_fields_BB_267_199 = 8'd199;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_v;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p;
input [31:0] arg_data;
reg [7:0] cur_state;
reg  set_ppc_fields_0_1;
reg  set_ppc_fields_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_2_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_2_3_reg;
reg [31:0] set_ppc_fields_2_4;
reg [31:0] set_ppc_fields_2_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_5_8_reg;
reg [31:0] set_ppc_fields_5_9;
reg [31:0] set_ppc_fields_5_9_reg;
reg  set_ppc_fields_5_10;
reg  set_ppc_fields_5_10_reg;
reg [31:0] set_ppc_fields_11_12;
reg [31:0] set_ppc_fields_11_12_reg;
reg [31:0] set_ppc_fields_11_13;
reg [31:0] set_ppc_fields_11_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_16_reg;
reg [31:0] set_ppc_fields_11_17;
reg [31:0] set_ppc_fields_11_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_11_18_reg;
reg [31:0] set_ppc_fields_11_19;
reg [31:0] set_ppc_fields_11_19_reg;
reg [31:0] set_ppc_fields_11_20;
reg [31:0] set_ppc_fields_11_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_21_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_21_22_reg;
reg [31:0] set_ppc_fields_21_23;
reg [31:0] set_ppc_fields_21_23_reg;
reg  set_ppc_fields_21_24;
reg  set_ppc_fields_21_24_reg;
reg [31:0] set_ppc_fields_25_26;
reg [31:0] set_ppc_fields_25_26_reg;
reg [31:0] set_ppc_fields_25_27;
reg [31:0] set_ppc_fields_25_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_30_reg;
reg [31:0] set_ppc_fields_25_31;
reg [31:0] set_ppc_fields_25_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_25_32_reg;
reg [31:0] set_ppc_fields_25_33;
reg [31:0] set_ppc_fields_25_33_reg;
reg [31:0] set_ppc_fields_25_34;
reg [31:0] set_ppc_fields_25_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_35_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_35_36_reg;
reg [31:0] set_ppc_fields_35_37;
reg [31:0] set_ppc_fields_35_37_reg;
reg  set_ppc_fields_35_38;
reg  set_ppc_fields_35_38_reg;
reg [31:0] set_ppc_fields_39_40;
reg [31:0] set_ppc_fields_39_40_reg;
reg [31:0] set_ppc_fields_39_41;
reg [31:0] set_ppc_fields_39_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_44_reg;
reg [31:0] set_ppc_fields_39_45;
reg [31:0] set_ppc_fields_39_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_39_46_reg;
reg [31:0] set_ppc_fields_39_47;
reg [31:0] set_ppc_fields_39_47_reg;
reg [31:0] set_ppc_fields_39_48;
reg [31:0] set_ppc_fields_39_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_50_reg;
reg [31:0] set_ppc_fields_49_51;
reg [31:0] set_ppc_fields_49_51_reg;
reg [31:0] set_ppc_fields_49_52;
reg [31:0] set_ppc_fields_49_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_57_reg;
reg [31:0] set_ppc_fields_49_58;
reg [31:0] set_ppc_fields_49_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_49_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_61_reg;
reg [31:0] set_ppc_fields_60_62;
reg [31:0] set_ppc_fields_60_62_reg;
reg [31:0] set_ppc_fields_60_63;
reg [31:0] set_ppc_fields_60_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_68_reg;
reg [31:0] set_ppc_fields_60_69;
reg [31:0] set_ppc_fields_60_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_70_reg;
reg [31:0] set_ppc_fields_60_71;
reg [31:0] set_ppc_fields_60_71_reg;
reg [31:0] set_ppc_fields_60_72;
reg [31:0] set_ppc_fields_60_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_74_reg;
reg [31:0] set_ppc_fields_60_75;
reg [31:0] set_ppc_fields_60_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_76_reg;
reg [31:0] set_ppc_fields_60_77;
reg [31:0] set_ppc_fields_60_77_reg;
reg [31:0] set_ppc_fields_60_78;
reg [31:0] set_ppc_fields_60_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_80_reg;
reg [31:0] set_ppc_fields_60_81;
reg [31:0] set_ppc_fields_60_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_60_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_84_reg;
reg [31:0] set_ppc_fields_83_85;
reg [31:0] set_ppc_fields_83_85_reg;
reg [31:0] set_ppc_fields_83_86;
reg [31:0] set_ppc_fields_83_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_91_reg;
reg [31:0] set_ppc_fields_83_92;
reg [31:0] set_ppc_fields_83_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_93_reg;
reg [31:0] set_ppc_fields_83_94;
reg [31:0] set_ppc_fields_83_94_reg;
reg [31:0] set_ppc_fields_83_95;
reg [31:0] set_ppc_fields_83_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_97_reg;
reg [31:0] set_ppc_fields_83_98;
reg [31:0] set_ppc_fields_83_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_99_reg;
reg [31:0] set_ppc_fields_83_100;
reg [31:0] set_ppc_fields_83_100_reg;
reg [31:0] set_ppc_fields_83_101;
reg [31:0] set_ppc_fields_83_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_103_reg;
reg [31:0] set_ppc_fields_83_104;
reg [31:0] set_ppc_fields_83_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_83_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_107_reg;
reg [31:0] set_ppc_fields_106_108;
reg [31:0] set_ppc_fields_106_108_reg;
reg [31:0] set_ppc_fields_106_109;
reg [31:0] set_ppc_fields_106_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_114_reg;
reg [31:0] set_ppc_fields_106_115;
reg [31:0] set_ppc_fields_106_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_116_reg;
reg [31:0] set_ppc_fields_106_117;
reg [31:0] set_ppc_fields_106_117_reg;
reg [31:0] set_ppc_fields_106_118;
reg [31:0] set_ppc_fields_106_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_120_reg;
reg [31:0] set_ppc_fields_106_121;
reg [31:0] set_ppc_fields_106_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_122_reg;
reg [31:0] set_ppc_fields_106_123;
reg [31:0] set_ppc_fields_106_123_reg;
reg [31:0] set_ppc_fields_106_124;
reg [31:0] set_ppc_fields_106_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_126_reg;
reg [31:0] set_ppc_fields_106_127;
reg [31:0] set_ppc_fields_106_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_106_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_130_reg;
reg [31:0] set_ppc_fields_129_131;
reg [31:0] set_ppc_fields_129_131_reg;
reg [31:0] set_ppc_fields_129_132;
reg [31:0] set_ppc_fields_129_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_137_reg;
reg [31:0] set_ppc_fields_129_138;
reg [31:0] set_ppc_fields_129_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_139_reg;
reg [31:0] set_ppc_fields_129_140;
reg [31:0] set_ppc_fields_129_140_reg;
reg [31:0] set_ppc_fields_129_141;
reg [31:0] set_ppc_fields_129_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_143_reg;
reg [31:0] set_ppc_fields_129_144;
reg [31:0] set_ppc_fields_129_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_145_reg;
reg [31:0] set_ppc_fields_129_146;
reg [31:0] set_ppc_fields_129_146_reg;
reg [31:0] set_ppc_fields_129_147;
reg [31:0] set_ppc_fields_129_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_149_reg;
reg [31:0] set_ppc_fields_129_150;
reg [31:0] set_ppc_fields_129_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_129_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_153_reg;
reg [31:0] set_ppc_fields_152_154;
reg [31:0] set_ppc_fields_152_154_reg;
reg [31:0] set_ppc_fields_152_155;
reg [31:0] set_ppc_fields_152_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_160_reg;
reg [31:0] set_ppc_fields_152_161;
reg [31:0] set_ppc_fields_152_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_152_162_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_164_reg;
reg [31:0] set_ppc_fields_163_165;
reg [31:0] set_ppc_fields_163_165_reg;
reg [31:0] set_ppc_fields_163_166;
reg [31:0] set_ppc_fields_163_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_171_reg;
reg [31:0] set_ppc_fields_163_172;
reg [31:0] set_ppc_fields_163_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_173_reg;
reg [31:0] set_ppc_fields_163_174;
reg [31:0] set_ppc_fields_163_174_reg;
reg [31:0] set_ppc_fields_163_175;
reg [31:0] set_ppc_fields_163_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_177_reg;
reg [31:0] set_ppc_fields_163_178;
reg [31:0] set_ppc_fields_163_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_163_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_181_reg;
reg [31:0] set_ppc_fields_180_182;
reg [31:0] set_ppc_fields_180_182_reg;
reg [31:0] set_ppc_fields_180_183;
reg [31:0] set_ppc_fields_180_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_188_reg;
reg [31:0] set_ppc_fields_180_189;
reg [31:0] set_ppc_fields_180_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_190_reg;
reg [31:0] set_ppc_fields_180_191;
reg [31:0] set_ppc_fields_180_191_reg;
reg [31:0] set_ppc_fields_180_192;
reg [31:0] set_ppc_fields_180_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_194_reg;
reg [31:0] set_ppc_fields_180_195;
reg [31:0] set_ppc_fields_180_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_196_reg;
reg [31:0] set_ppc_fields_180_197;
reg [31:0] set_ppc_fields_180_197_reg;
reg [31:0] set_ppc_fields_180_198;
reg [31:0] set_ppc_fields_180_198_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_200_reg;
reg [31:0] set_ppc_fields_180_201;
reg [31:0] set_ppc_fields_180_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_202_reg;
reg [31:0] set_ppc_fields_180_203;
reg [31:0] set_ppc_fields_180_203_reg;
reg [31:0] set_ppc_fields_180_204;
reg [31:0] set_ppc_fields_180_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_206_reg;
reg [31:0] set_ppc_fields_180_207;
reg [31:0] set_ppc_fields_180_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_180_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_210_reg;
reg [31:0] set_ppc_fields_209_211;
reg [31:0] set_ppc_fields_209_211_reg;
reg [31:0] set_ppc_fields_209_212;
reg [31:0] set_ppc_fields_209_212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_213_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_215;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_217_reg;
reg [31:0] set_ppc_fields_209_218;
reg [31:0] set_ppc_fields_209_218_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_209_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_221_reg;
reg [31:0] set_ppc_fields_220_222;
reg [31:0] set_ppc_fields_220_222_reg;
reg [31:0] set_ppc_fields_220_223;
reg [31:0] set_ppc_fields_220_223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_224;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_225_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_226_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_227_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_228_reg;
reg [31:0] set_ppc_fields_220_229;
reg [31:0] set_ppc_fields_220_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_220_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_232_reg;
reg [31:0] set_ppc_fields_231_233;
reg [31:0] set_ppc_fields_231_233_reg;
reg [31:0] set_ppc_fields_231_234;
reg [31:0] set_ppc_fields_231_234_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_235_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_237_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_239_reg;
reg [31:0] set_ppc_fields_231_240;
reg [31:0] set_ppc_fields_231_240_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_241_reg;
reg [31:0] set_ppc_fields_231_242;
reg [31:0] set_ppc_fields_231_242_reg;
reg [31:0] set_ppc_fields_231_243;
reg [31:0] set_ppc_fields_231_243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_245;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_245_reg;
reg [31:0] set_ppc_fields_231_246;
reg [31:0] set_ppc_fields_231_246_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_231_247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_249_reg;
reg [31:0] set_ppc_fields_248_250;
reg [31:0] set_ppc_fields_248_250_reg;
reg [31:0] set_ppc_fields_248_251;
reg [31:0] set_ppc_fields_248_251_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_252;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_253_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_254;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_254_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_256;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_256_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_257;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_257_reg;
reg [31:0] set_ppc_fields_248_258;
reg [31:0] set_ppc_fields_248_258_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_259_reg;
reg [31:0] set_ppc_fields_248_260;
reg [31:0] set_ppc_fields_248_260_reg;
reg [31:0] set_ppc_fields_248_261;
reg [31:0] set_ppc_fields_248_261_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_262_reg;
reg [31:0] set_ppc_fields_248_263;
reg [31:0] set_ppc_fields_248_263_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_264;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_248_264_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_265_266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_265_266_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd133)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd130)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd137)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd128)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_47;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd129)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_56;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd141)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_71;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd140)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_86;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd139)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_101;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd138)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_116;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd136)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_125;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd142)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_137;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd131)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_155;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd132)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_164;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd135)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_173;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 == 32'd134)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_185;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((((((((((((cur_state == LEGUP_F_set_ppc_fields_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_2_4 != 32'd133)) & (set_ppc_fields_2_4 != 32'd130)) & (set_ppc_fields_2_4 != 32'd137)) & (set_ppc_fields_2_4 != 32'd128)) & (set_ppc_fields_2_4 != 32'd129)) & (set_ppc_fields_2_4 != 32'd141)) & (set_ppc_fields_2_4 != 32'd140)) & (set_ppc_fields_2_4 != 32'd139)) & (set_ppc_fields_2_4 != 32'd138)) & (set_ppc_fields_2_4 != 32'd136)) & (set_ppc_fields_2_4 != 32'd142)) & (set_ppc_fields_2_4 != 32'd131)) & (set_ppc_fields_2_4 != 32'd132)) & (set_ppc_fields_2_4 != 32'd135)) & (set_ppc_fields_2_4 != 32'd134)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_265_197;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_265_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_7;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_7;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_8;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_8;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_9;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_9;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_10;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_5_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_5_10;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_5_10) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_5_10 == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_21;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_5_10) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_5_10 == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_12;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_12;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_13;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_13;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_14;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_14;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_15;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_15;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_16;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_16;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_17;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_17;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_18;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_18;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_19;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_19;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_20;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_11_20;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_11_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_21;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_21_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_21;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_21_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_22;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_21_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_22;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_21_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_23;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_21_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_21_23;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_21_23) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_21_24 == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_34;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_21_23) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_21_24 == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_24;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_24;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_26;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_26;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_27;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_27;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_28;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_28;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_29;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_29;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_30;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_30;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_31;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_31;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_32;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_32;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_33;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_25_33;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_25_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_25_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_34;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_35_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_34;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_35_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_35;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_35_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_35;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_35_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_36;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_35_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_35_36;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_35_36) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_35_38 == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_set_ppc_fields_BB_35_36) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_35_38 == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_37;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_37;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_38;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_38;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_39;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_39;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_40;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_40;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_41;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_41;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_42;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_42;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_43;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_43;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_44;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_44;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_45;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_45;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_46;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_39_46;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_39_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_39_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_47;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_48;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_48;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_49;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_49;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_50;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_50;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_51;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_51;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_52;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_52;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_53;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_53;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_54;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_54;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_55;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_49_55;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_49_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_56;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_57;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_57;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_58;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_58;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_59;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_59;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_60;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_60;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_61;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_61;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_62;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_62;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_63;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_63;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_64;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_64;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_65;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_65;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_66;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_66;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_67;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_67;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_68;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_68;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_69;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_69;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_70;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_60_70;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_60_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_60_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_71;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_72;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_72;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_73;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_73;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_74;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_74;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_75;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_75;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_76;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_76;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_77;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_77;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_78;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_78;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_79;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_79;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_80;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_80;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_81;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_81;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_82;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_82;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_84;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_84;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_85;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_83_85;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_83_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_86;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_87;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_87;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_88;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_88;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_89;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_89;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_90;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_90;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_91;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_91;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_92;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_92;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_93;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_93;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_94;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_94;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_95;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_95;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_96;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_96;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_97;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_97;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_98;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_98;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_99;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_99;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_100;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_106_100;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_106_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_106_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_101;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_102;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_102;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_103;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_103;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_104;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_104;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_105;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_105;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_106;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_106;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_107;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_107;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_108;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_108;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_109;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_109;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_110;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_110;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_111;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_111;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_112;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_112;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_113;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_113;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_114;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_114;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_115;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_129_115;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_129_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_129_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_116;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_118;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_118;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_119;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_119;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_120;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_120;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_121;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_121;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_122;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_122;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_123;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_123;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_124;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_152_124;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_152_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_152_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_125;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_126;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_126;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_127;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_127;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_128;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_128;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_129;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_129;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_130;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_130;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_131;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_131;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_132;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_132;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_133;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_133;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_134;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_134;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_135;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_135;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_136;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_163_136;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_163_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_163_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_137;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_138;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_138;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_139;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_139;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_140;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_140;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_141;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_141;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_142;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_142;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_143;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_143;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_144;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_144;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_145;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_145;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_146;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_146;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_147;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_147;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_148;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_148;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_149;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_149;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_150;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_150;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_151;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_151;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_152;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_152;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_153;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_153;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_154;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_180_154;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_180_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_180_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_155;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_156;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_156;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_157;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_157;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_158;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_158;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_159;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_159;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_160;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_160;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_161;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_161;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_162;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_162;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_163;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_209_163;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_209_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_209_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_164;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_165;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_165;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_166;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_166;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_167;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_167;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_168;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_168;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_169;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_169;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_170;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_170;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_171;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_171;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_172;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_220_172;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_220_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_220_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_173;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_174;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_174;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_175;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_175;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_176;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_176;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_177;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_177;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_178;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_178;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_179;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_179;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_180;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_180;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_181;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_181;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_182;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_182;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_183;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_183;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_184;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_231_184;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_231_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_231_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_185;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_186;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_186;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_187;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_187;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_188;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_188;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_189;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_189;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_190;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_190;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_191;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_191;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_192;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_192;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_193;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_193;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_194;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_194;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_195;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_195;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_196;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_248_196;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_248_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_248_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_265_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_265_197;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_265_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_265_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_265_198;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_265_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_265_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_265_198;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_265_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_265_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_267_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_set_ppc_fields_BB_267_199;
if (reset == 1'b0 && ^(LEGUP_F_set_ppc_fields_BB_267_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_set_ppc_fields_BB_267_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %0*/
/*   %1 = icmp eq %struct.TYPE_7__* %v, null*/
begin
set_ppc_fields_0_1 = (arg_v == 0);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %0*/
/*   %1 = icmp eq %struct.TYPE_7__* %v, null*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_0_1))
begin
set_ppc_fields_0_1_reg <= set_ppc_fields_0_1;
if (reset == 1'b0 && ^(set_ppc_fields_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_0_1_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %2*/
/*   %3 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 0*/
begin
set_ppc_fields_2_3 = arg_p;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %2*/
/*   %3 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_2))
begin
set_ppc_fields_2_3_reg <= set_ppc_fields_2_3;
if (reset == 1'b0 && ^(set_ppc_fields_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_2_3_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
begin
set_ppc_fields_2_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_4))
begin
set_ppc_fields_2_4_reg <= set_ppc_fields_2_4;
if (reset == 1'b0 && ^(set_ppc_fields_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_2_4_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %5*/
/*   %6 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_5_6 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %5*/
/*   %6 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
set_ppc_fields_5_6_reg <= set_ppc_fields_5_6;
if (reset == 1'b0 && ^(set_ppc_fields_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_5_6_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %5*/
/*   %7 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_5_7 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %5*/
/*   %7 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
set_ppc_fields_5_7_reg <= set_ppc_fields_5_7;
if (reset == 1'b0 && ^(set_ppc_fields_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_5_7_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
begin
set_ppc_fields_5_8 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_8))
begin
set_ppc_fields_5_8_reg <= set_ppc_fields_5_8;
if (reset == 1'b0 && ^(set_ppc_fields_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_5_8_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
set_ppc_fields_5_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_10))
begin
set_ppc_fields_5_9_reg <= set_ppc_fields_5_9;
if (reset == 1'b0 && ^(set_ppc_fields_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_5_9_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %5*/
/*   %10 = icmp eq i32 %9, 0*/
begin
set_ppc_fields_5_10 = (set_ppc_fields_5_9 == 32'd0);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %5*/
/*   %10 = icmp eq i32 %9, 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_10))
begin
set_ppc_fields_5_10_reg <= set_ppc_fields_5_10;
if (reset == 1'b0 && ^(set_ppc_fields_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_5_10_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %12 = lshr i32 %data, 21*/
begin
set_ppc_fields_11_12 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %12 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
set_ppc_fields_11_12_reg <= set_ppc_fields_11_12;
if (reset == 1'b0 && ^(set_ppc_fields_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_12_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %13 = and i32 %12, 31*/
begin
set_ppc_fields_11_13 = (set_ppc_fields_11_12 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %13 = and i32 %12, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
set_ppc_fields_11_13_reg <= set_ppc_fields_11_13;
if (reset == 1'b0 && ^(set_ppc_fields_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_13_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %14 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_11_14 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %14 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
set_ppc_fields_11_14_reg <= set_ppc_fields_11_14;
if (reset == 1'b0 && ^(set_ppc_fields_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_14_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
begin
set_ppc_fields_11_15 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
set_ppc_fields_11_15_reg <= set_ppc_fields_11_15;
if (reset == 1'b0 && ^(set_ppc_fields_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_15_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %16 = getelementptr inbounds %struct.TYPE_6__* %15, i32 0, i32 0*/
begin
set_ppc_fields_11_16 = set_ppc_fields_11_15;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %16 = getelementptr inbounds %struct.TYPE_6__* %15, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
set_ppc_fields_11_16_reg <= set_ppc_fields_11_16;
if (reset == 1'b0 && ^(set_ppc_fields_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_16_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
begin
set_ppc_fields_11_17 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
set_ppc_fields_11_17_reg <= set_ppc_fields_11_17;
if (reset == 1'b0 && ^(set_ppc_fields_11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_17_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %15, i32 0, i32 1*/
begin
set_ppc_fields_11_18 = (set_ppc_fields_11_15 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %15, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
set_ppc_fields_11_18_reg <= set_ppc_fields_11_18;
if (reset == 1'b0 && ^(set_ppc_fields_11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_18_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
begin
set_ppc_fields_11_19 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
set_ppc_fields_11_19_reg <= set_ppc_fields_11_19;
if (reset == 1'b0 && ^(set_ppc_fields_11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_19_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %11*/
/*   %20 = add nsw i32 %19, 1*/
begin
set_ppc_fields_11_20 = (set_ppc_fields_11_19 + 32'd1);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %11*/
/*   %20 = add nsw i32 %19, 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
set_ppc_fields_11_20_reg <= set_ppc_fields_11_20;
if (reset == 1'b0 && ^(set_ppc_fields_11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_11_20_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %21*/
/*   %22 = getelementptr inbounds i32* %8, i32 1*/
begin
set_ppc_fields_21_22 = (set_ppc_fields_5_8_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %21*/
/*   %22 = getelementptr inbounds i32* %8, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_21))
begin
set_ppc_fields_21_22_reg <= set_ppc_fields_21_22;
if (reset == 1'b0 && ^(set_ppc_fields_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_21_22_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
set_ppc_fields_21_23 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_23))
begin
set_ppc_fields_21_23_reg <= set_ppc_fields_21_23;
if (reset == 1'b0 && ^(set_ppc_fields_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_21_23_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %21*/
/*   %24 = icmp eq i32 %23, 0*/
begin
set_ppc_fields_21_24 = (set_ppc_fields_21_23 == 32'd0);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %21*/
/*   %24 = icmp eq i32 %23, 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_23))
begin
set_ppc_fields_21_24_reg <= set_ppc_fields_21_24;
if (reset == 1'b0 && ^(set_ppc_fields_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_21_24_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %26 = lshr i32 %data, 16*/
begin
set_ppc_fields_25_26 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %26 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
set_ppc_fields_25_26_reg <= set_ppc_fields_25_26;
if (reset == 1'b0 && ^(set_ppc_fields_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_26_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %27 = and i32 %26, 31*/
begin
set_ppc_fields_25_27 = (set_ppc_fields_25_26 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %27 = and i32 %26, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
set_ppc_fields_25_27_reg <= set_ppc_fields_25_27;
if (reset == 1'b0 && ^(set_ppc_fields_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_27_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %28 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_25_28 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %28 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
set_ppc_fields_25_28_reg <= set_ppc_fields_25_28;
if (reset == 1'b0 && ^(set_ppc_fields_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_28_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
begin
set_ppc_fields_25_29 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
set_ppc_fields_25_29_reg <= set_ppc_fields_25_29;
if (reset == 1'b0 && ^(set_ppc_fields_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_29_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %30 = getelementptr inbounds %struct.TYPE_6__* %29, i32 1, i32 0*/
begin
set_ppc_fields_25_30 = (set_ppc_fields_25_29 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %30 = getelementptr inbounds %struct.TYPE_6__* %29, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
set_ppc_fields_25_30_reg <= set_ppc_fields_25_30;
if (reset == 1'b0 && ^(set_ppc_fields_25_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_30_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
begin
set_ppc_fields_25_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
set_ppc_fields_25_31_reg <= set_ppc_fields_25_31;
if (reset == 1'b0 && ^(set_ppc_fields_25_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_31_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %32 = getelementptr inbounds %struct.TYPE_6__* %29, i32 1, i32 1*/
begin
set_ppc_fields_25_32 = (set_ppc_fields_25_29 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %32 = getelementptr inbounds %struct.TYPE_6__* %29, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
set_ppc_fields_25_32_reg <= set_ppc_fields_25_32;
if (reset == 1'b0 && ^(set_ppc_fields_25_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_32_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
begin
set_ppc_fields_25_33 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
set_ppc_fields_25_33_reg <= set_ppc_fields_25_33;
if (reset == 1'b0 && ^(set_ppc_fields_25_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_33_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %25*/
/*   %34 = add nsw i32 %33, 1*/
begin
set_ppc_fields_25_34 = (set_ppc_fields_25_33 + 32'd1);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %25*/
/*   %34 = add nsw i32 %33, 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
set_ppc_fields_25_34_reg <= set_ppc_fields_25_34;
if (reset == 1'b0 && ^(set_ppc_fields_25_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_25_34_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %35*/
/*   %36 = getelementptr inbounds i32* %8, i32 2*/
begin
set_ppc_fields_35_36 = (set_ppc_fields_5_8_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %35*/
/*   %36 = getelementptr inbounds i32* %8, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_34))
begin
set_ppc_fields_35_36_reg <= set_ppc_fields_35_36;
if (reset == 1'b0 && ^(set_ppc_fields_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_35_36_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
begin
set_ppc_fields_35_37 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_36))
begin
set_ppc_fields_35_37_reg <= set_ppc_fields_35_37;
if (reset == 1'b0 && ^(set_ppc_fields_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_35_37_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %35*/
/*   %38 = icmp eq i32 %37, 0*/
begin
set_ppc_fields_35_38 = (set_ppc_fields_35_37 == 32'd0);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %35*/
/*   %38 = icmp eq i32 %37, 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_36))
begin
set_ppc_fields_35_38_reg <= set_ppc_fields_35_38;
if (reset == 1'b0 && ^(set_ppc_fields_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_35_38_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %40 = lshr i32 %data, 11*/
begin
set_ppc_fields_39_40 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %40 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
set_ppc_fields_39_40_reg <= set_ppc_fields_39_40;
if (reset == 1'b0 && ^(set_ppc_fields_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_40_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %41 = and i32 %40, 31*/
begin
set_ppc_fields_39_41 = (set_ppc_fields_39_40 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %41 = and i32 %40, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
set_ppc_fields_39_41_reg <= set_ppc_fields_39_41;
if (reset == 1'b0 && ^(set_ppc_fields_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_41_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %42 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_39_42 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %42 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
set_ppc_fields_39_42_reg <= set_ppc_fields_39_42;
if (reset == 1'b0 && ^(set_ppc_fields_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_42_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
begin
set_ppc_fields_39_43 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
set_ppc_fields_39_43_reg <= set_ppc_fields_39_43;
if (reset == 1'b0 && ^(set_ppc_fields_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_43_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %44 = getelementptr inbounds %struct.TYPE_6__* %43, i32 2, i32 0*/
begin
set_ppc_fields_39_44 = (set_ppc_fields_39_43 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %44 = getelementptr inbounds %struct.TYPE_6__* %43, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
set_ppc_fields_39_44_reg <= set_ppc_fields_39_44;
if (reset == 1'b0 && ^(set_ppc_fields_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_44_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
begin
set_ppc_fields_39_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
set_ppc_fields_39_45_reg <= set_ppc_fields_39_45;
if (reset == 1'b0 && ^(set_ppc_fields_39_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_45_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %46 = getelementptr inbounds %struct.TYPE_6__* %43, i32 2, i32 1*/
begin
set_ppc_fields_39_46 = (set_ppc_fields_39_43 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %46 = getelementptr inbounds %struct.TYPE_6__* %43, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
set_ppc_fields_39_46_reg <= set_ppc_fields_39_46;
if (reset == 1'b0 && ^(set_ppc_fields_39_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_46_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
begin
set_ppc_fields_39_47 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
set_ppc_fields_39_47_reg <= set_ppc_fields_39_47;
if (reset == 1'b0 && ^(set_ppc_fields_39_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_47_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %39*/
/*   %48 = add nsw i32 %47, 1*/
begin
set_ppc_fields_39_48 = (set_ppc_fields_39_47 + 32'd1);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %39*/
/*   %48 = add nsw i32 %47, 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
set_ppc_fields_39_48_reg <= set_ppc_fields_39_48;
if (reset == 1'b0 && ^(set_ppc_fields_39_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_39_48_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %50 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_49_50 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %50 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
set_ppc_fields_49_50_reg <= set_ppc_fields_49_50;
if (reset == 1'b0 && ^(set_ppc_fields_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_50_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %51 = lshr i32 %data, 15*/
begin
set_ppc_fields_49_51 = (arg_data >>> (32'd15 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %51 = lshr i32 %data, 15*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
set_ppc_fields_49_51_reg <= set_ppc_fields_49_51;
if (reset == 1'b0 && ^(set_ppc_fields_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_51_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %52 = and i32 %51, 1*/
begin
set_ppc_fields_49_52 = (set_ppc_fields_49_51 & 32'd1);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %52 = and i32 %51, 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
set_ppc_fields_49_52_reg <= set_ppc_fields_49_52;
if (reset == 1'b0 && ^(set_ppc_fields_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_52_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %53 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_49_53 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %53 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
set_ppc_fields_49_53_reg <= set_ppc_fields_49_53;
if (reset == 1'b0 && ^(set_ppc_fields_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_53_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
begin
set_ppc_fields_49_54 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
set_ppc_fields_49_54_reg <= set_ppc_fields_49_54;
if (reset == 1'b0 && ^(set_ppc_fields_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_54_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %55 = getelementptr inbounds %struct.TYPE_6__* %54, i32 0, i32 0*/
begin
set_ppc_fields_49_55 = set_ppc_fields_49_54;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %55 = getelementptr inbounds %struct.TYPE_6__* %54, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
set_ppc_fields_49_55_reg <= set_ppc_fields_49_55;
if (reset == 1'b0 && ^(set_ppc_fields_49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_55_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %56 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_49_56 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %56 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
set_ppc_fields_49_56_reg <= set_ppc_fields_49_56;
if (reset == 1'b0 && ^(set_ppc_fields_49_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_56_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
begin
set_ppc_fields_49_57 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_52))
begin
set_ppc_fields_49_57_reg <= set_ppc_fields_49_57;
if (reset == 1'b0 && ^(set_ppc_fields_49_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_57_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
begin
set_ppc_fields_49_58 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
set_ppc_fields_49_58_reg <= set_ppc_fields_49_58;
if (reset == 1'b0 && ^(set_ppc_fields_49_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_58_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %49*/
/*   %59 = getelementptr inbounds %struct.TYPE_6__* %54, i32 0, i32 1*/
begin
set_ppc_fields_49_59 = (set_ppc_fields_49_54 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %49*/
/*   %59 = getelementptr inbounds %struct.TYPE_6__* %54, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
set_ppc_fields_49_59_reg <= set_ppc_fields_49_59;
if (reset == 1'b0 && ^(set_ppc_fields_49_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_49_59_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %61 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_60_61 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %61 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_61_reg <= set_ppc_fields_60_61;
if (reset == 1'b0 && ^(set_ppc_fields_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_61_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %62 = lshr i32 %data, 21*/
begin
set_ppc_fields_60_62 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %62 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_62_reg <= set_ppc_fields_60_62;
if (reset == 1'b0 && ^(set_ppc_fields_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_62_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %63 = and i32 %62, 31*/
begin
set_ppc_fields_60_63 = (set_ppc_fields_60_62 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %63 = and i32 %62, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_63_reg <= set_ppc_fields_60_63;
if (reset == 1'b0 && ^(set_ppc_fields_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_63_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %64 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_60_64 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %64 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_64_reg <= set_ppc_fields_60_64;
if (reset == 1'b0 && ^(set_ppc_fields_60_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_64_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
begin
set_ppc_fields_60_65 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_65_reg <= set_ppc_fields_60_65;
if (reset == 1'b0 && ^(set_ppc_fields_60_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_65_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %66 = getelementptr inbounds %struct.TYPE_6__* %65, i32 1, i32 0*/
begin
set_ppc_fields_60_66 = (set_ppc_fields_60_65 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %66 = getelementptr inbounds %struct.TYPE_6__* %65, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_66_reg <= set_ppc_fields_60_66;
if (reset == 1'b0 && ^(set_ppc_fields_60_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_66_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %67 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_60_67 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %67 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_67_reg <= set_ppc_fields_60_67;
if (reset == 1'b0 && ^(set_ppc_fields_60_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_67_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
begin
set_ppc_fields_60_68 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
set_ppc_fields_60_68_reg <= set_ppc_fields_60_68;
if (reset == 1'b0 && ^(set_ppc_fields_60_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_68_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
begin
set_ppc_fields_60_69 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
set_ppc_fields_60_69_reg <= set_ppc_fields_60_69;
if (reset == 1'b0 && ^(set_ppc_fields_60_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_69_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %70 = getelementptr inbounds %struct.TYPE_6__* %65, i32 1, i32 1*/
begin
set_ppc_fields_60_70 = (set_ppc_fields_60_65 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %70 = getelementptr inbounds %struct.TYPE_6__* %65, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_70_reg <= set_ppc_fields_60_70;
if (reset == 1'b0 && ^(set_ppc_fields_60_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_70_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %71 = lshr i32 %data, 16*/
begin
set_ppc_fields_60_71 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %71 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_71_reg <= set_ppc_fields_60_71;
if (reset == 1'b0 && ^(set_ppc_fields_60_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_71_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %72 = and i32 %71, 31*/
begin
set_ppc_fields_60_72 = (set_ppc_fields_60_71 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %72 = and i32 %71, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_72_reg <= set_ppc_fields_60_72;
if (reset == 1'b0 && ^(set_ppc_fields_60_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_72_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %73 = getelementptr inbounds %struct.TYPE_6__* %65, i32 0, i32 0*/
begin
set_ppc_fields_60_73 = set_ppc_fields_60_65;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %73 = getelementptr inbounds %struct.TYPE_6__* %65, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_73_reg <= set_ppc_fields_60_73;
if (reset == 1'b0 && ^(set_ppc_fields_60_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_73_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %74 = getelementptr inbounds i32* %68, i32 1*/
begin
set_ppc_fields_60_74 = (set_ppc_fields_60_68 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %74 = getelementptr inbounds i32* %68, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
set_ppc_fields_60_74_reg <= set_ppc_fields_60_74;
if (reset == 1'b0 && ^(set_ppc_fields_60_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_74_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
begin
set_ppc_fields_60_75 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
set_ppc_fields_60_75_reg <= set_ppc_fields_60_75;
if (reset == 1'b0 && ^(set_ppc_fields_60_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_75_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %76 = getelementptr inbounds %struct.TYPE_6__* %65, i32 0, i32 1*/
begin
set_ppc_fields_60_76 = (set_ppc_fields_60_65 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %76 = getelementptr inbounds %struct.TYPE_6__* %65, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_76_reg <= set_ppc_fields_60_76;
if (reset == 1'b0 && ^(set_ppc_fields_60_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_76_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %77 = lshr i32 %data, 11*/
begin
set_ppc_fields_60_77 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %77 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_77_reg <= set_ppc_fields_60_77;
if (reset == 1'b0 && ^(set_ppc_fields_60_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_77_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %78 = and i32 %77, 31*/
begin
set_ppc_fields_60_78 = (set_ppc_fields_60_77 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %78 = and i32 %77, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
set_ppc_fields_60_78_reg <= set_ppc_fields_60_78;
if (reset == 1'b0 && ^(set_ppc_fields_60_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_78_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %79 = getelementptr inbounds %struct.TYPE_6__* %65, i32 2, i32 0*/
begin
set_ppc_fields_60_79 = (set_ppc_fields_60_65 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %79 = getelementptr inbounds %struct.TYPE_6__* %65, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_79_reg <= set_ppc_fields_60_79;
if (reset == 1'b0 && ^(set_ppc_fields_60_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_79_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %80 = getelementptr inbounds i32* %68, i32 2*/
begin
set_ppc_fields_60_80 = (set_ppc_fields_60_68 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %80 = getelementptr inbounds i32* %68, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
set_ppc_fields_60_80_reg <= set_ppc_fields_60_80;
if (reset == 1'b0 && ^(set_ppc_fields_60_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_80_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
begin
set_ppc_fields_60_81 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
set_ppc_fields_60_81_reg <= set_ppc_fields_60_81;
if (reset == 1'b0 && ^(set_ppc_fields_60_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_81_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %60*/
/*   %82 = getelementptr inbounds %struct.TYPE_6__* %65, i32 2, i32 1*/
begin
set_ppc_fields_60_82 = (set_ppc_fields_60_65 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %60*/
/*   %82 = getelementptr inbounds %struct.TYPE_6__* %65, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
set_ppc_fields_60_82_reg <= set_ppc_fields_60_82;
if (reset == 1'b0 && ^(set_ppc_fields_60_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_60_82_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %84 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_83_84 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %84 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_84_reg <= set_ppc_fields_83_84;
if (reset == 1'b0 && ^(set_ppc_fields_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_84_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %85 = lshr i32 %data, 23*/
begin
set_ppc_fields_83_85 = (arg_data >>> (32'd23 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %85 = lshr i32 %data, 23*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_85_reg <= set_ppc_fields_83_85;
if (reset == 1'b0 && ^(set_ppc_fields_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_85_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %86 = and i32 %85, 7*/
begin
set_ppc_fields_83_86 = (set_ppc_fields_83_85 & 32'd7);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %86 = and i32 %85, 7*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_86_reg <= set_ppc_fields_83_86;
if (reset == 1'b0 && ^(set_ppc_fields_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_86_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %87 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_83_87 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %87 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_87_reg <= set_ppc_fields_83_87;
if (reset == 1'b0 && ^(set_ppc_fields_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_87_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
begin
set_ppc_fields_83_88 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_88_reg <= set_ppc_fields_83_88;
if (reset == 1'b0 && ^(set_ppc_fields_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_88_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %89 = getelementptr inbounds %struct.TYPE_6__* %88, i32 0, i32 0*/
begin
set_ppc_fields_83_89 = set_ppc_fields_83_88;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %89 = getelementptr inbounds %struct.TYPE_6__* %88, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_89_reg <= set_ppc_fields_83_89;
if (reset == 1'b0 && ^(set_ppc_fields_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_89_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %90 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_83_90 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %90 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_90_reg <= set_ppc_fields_83_90;
if (reset == 1'b0 && ^(set_ppc_fields_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_90_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
begin
set_ppc_fields_83_91 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
set_ppc_fields_83_91_reg <= set_ppc_fields_83_91;
if (reset == 1'b0 && ^(set_ppc_fields_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_91_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
begin
set_ppc_fields_83_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
set_ppc_fields_83_92_reg <= set_ppc_fields_83_92;
if (reset == 1'b0 && ^(set_ppc_fields_83_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_92_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %93 = getelementptr inbounds %struct.TYPE_6__* %88, i32 0, i32 1*/
begin
set_ppc_fields_83_93 = (set_ppc_fields_83_88 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %93 = getelementptr inbounds %struct.TYPE_6__* %88, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_93_reg <= set_ppc_fields_83_93;
if (reset == 1'b0 && ^(set_ppc_fields_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_93_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %94 = lshr i32 %data, 16*/
begin
set_ppc_fields_83_94 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %94 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_94_reg <= set_ppc_fields_83_94;
if (reset == 1'b0 && ^(set_ppc_fields_83_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_94_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %95 = and i32 %94, 31*/
begin
set_ppc_fields_83_95 = (set_ppc_fields_83_94 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %95 = and i32 %94, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_95_reg <= set_ppc_fields_83_95;
if (reset == 1'b0 && ^(set_ppc_fields_83_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_95_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %96 = getelementptr inbounds %struct.TYPE_6__* %88, i32 1, i32 0*/
begin
set_ppc_fields_83_96 = (set_ppc_fields_83_88 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %96 = getelementptr inbounds %struct.TYPE_6__* %88, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_96_reg <= set_ppc_fields_83_96;
if (reset == 1'b0 && ^(set_ppc_fields_83_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_96_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %97 = getelementptr inbounds i32* %91, i32 1*/
begin
set_ppc_fields_83_97 = (set_ppc_fields_83_91 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %97 = getelementptr inbounds i32* %91, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
set_ppc_fields_83_97_reg <= set_ppc_fields_83_97;
if (reset == 1'b0 && ^(set_ppc_fields_83_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_97_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
begin
set_ppc_fields_83_98 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
set_ppc_fields_83_98_reg <= set_ppc_fields_83_98;
if (reset == 1'b0 && ^(set_ppc_fields_83_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_98_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %99 = getelementptr inbounds %struct.TYPE_6__* %88, i32 1, i32 1*/
begin
set_ppc_fields_83_99 = (set_ppc_fields_83_88 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %99 = getelementptr inbounds %struct.TYPE_6__* %88, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_99_reg <= set_ppc_fields_83_99;
if (reset == 1'b0 && ^(set_ppc_fields_83_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_99_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %100 = lshr i32 %data, 11*/
begin
set_ppc_fields_83_100 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %100 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_100_reg <= set_ppc_fields_83_100;
if (reset == 1'b0 && ^(set_ppc_fields_83_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_100_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %101 = and i32 %100, 31*/
begin
set_ppc_fields_83_101 = (set_ppc_fields_83_100 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %101 = and i32 %100, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
set_ppc_fields_83_101_reg <= set_ppc_fields_83_101;
if (reset == 1'b0 && ^(set_ppc_fields_83_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_101_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %102 = getelementptr inbounds %struct.TYPE_6__* %88, i32 2, i32 0*/
begin
set_ppc_fields_83_102 = (set_ppc_fields_83_88 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %102 = getelementptr inbounds %struct.TYPE_6__* %88, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_102_reg <= set_ppc_fields_83_102;
if (reset == 1'b0 && ^(set_ppc_fields_83_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_102_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %103 = getelementptr inbounds i32* %91, i32 2*/
begin
set_ppc_fields_83_103 = (set_ppc_fields_83_91 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %103 = getelementptr inbounds i32* %91, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
set_ppc_fields_83_103_reg <= set_ppc_fields_83_103;
if (reset == 1'b0 && ^(set_ppc_fields_83_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_103_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
begin
set_ppc_fields_83_104 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
set_ppc_fields_83_104_reg <= set_ppc_fields_83_104;
if (reset == 1'b0 && ^(set_ppc_fields_83_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_104_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %83*/
/*   %105 = getelementptr inbounds %struct.TYPE_6__* %88, i32 2, i32 1*/
begin
set_ppc_fields_83_105 = (set_ppc_fields_83_88 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %83*/
/*   %105 = getelementptr inbounds %struct.TYPE_6__* %88, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
set_ppc_fields_83_105_reg <= set_ppc_fields_83_105;
if (reset == 1'b0 && ^(set_ppc_fields_83_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_83_105_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %107 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_106_107 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %107 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_107_reg <= set_ppc_fields_106_107;
if (reset == 1'b0 && ^(set_ppc_fields_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_107_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %108 = lshr i32 %data, 21*/
begin
set_ppc_fields_106_108 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %108 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_108_reg <= set_ppc_fields_106_108;
if (reset == 1'b0 && ^(set_ppc_fields_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_108_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %109 = and i32 %108, 7*/
begin
set_ppc_fields_106_109 = (set_ppc_fields_106_108 & 32'd7);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %109 = and i32 %108, 7*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_109_reg <= set_ppc_fields_106_109;
if (reset == 1'b0 && ^(set_ppc_fields_106_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_109_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %110 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_106_110 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %110 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_110_reg <= set_ppc_fields_106_110;
if (reset == 1'b0 && ^(set_ppc_fields_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_110_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
begin
set_ppc_fields_106_111 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_111_reg <= set_ppc_fields_106_111;
if (reset == 1'b0 && ^(set_ppc_fields_106_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_111_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %112 = getelementptr inbounds %struct.TYPE_6__* %111, i32 0, i32 0*/
begin
set_ppc_fields_106_112 = set_ppc_fields_106_111;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %112 = getelementptr inbounds %struct.TYPE_6__* %111, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_112_reg <= set_ppc_fields_106_112;
if (reset == 1'b0 && ^(set_ppc_fields_106_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_112_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %113 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_106_113 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %113 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_113_reg <= set_ppc_fields_106_113;
if (reset == 1'b0 && ^(set_ppc_fields_106_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_113_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
begin
set_ppc_fields_106_114 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
set_ppc_fields_106_114_reg <= set_ppc_fields_106_114;
if (reset == 1'b0 && ^(set_ppc_fields_106_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_114_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
begin
set_ppc_fields_106_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
set_ppc_fields_106_115_reg <= set_ppc_fields_106_115;
if (reset == 1'b0 && ^(set_ppc_fields_106_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_115_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %116 = getelementptr inbounds %struct.TYPE_6__* %111, i32 0, i32 1*/
begin
set_ppc_fields_106_116 = (set_ppc_fields_106_111 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %116 = getelementptr inbounds %struct.TYPE_6__* %111, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_116_reg <= set_ppc_fields_106_116;
if (reset == 1'b0 && ^(set_ppc_fields_106_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_116_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %117 = lshr i32 %data, 16*/
begin
set_ppc_fields_106_117 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %117 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_117_reg <= set_ppc_fields_106_117;
if (reset == 1'b0 && ^(set_ppc_fields_106_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_117_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %118 = and i32 %117, 31*/
begin
set_ppc_fields_106_118 = (set_ppc_fields_106_117 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %118 = and i32 %117, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_118_reg <= set_ppc_fields_106_118;
if (reset == 1'b0 && ^(set_ppc_fields_106_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_118_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %119 = getelementptr inbounds %struct.TYPE_6__* %111, i32 1, i32 0*/
begin
set_ppc_fields_106_119 = (set_ppc_fields_106_111 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %119 = getelementptr inbounds %struct.TYPE_6__* %111, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_119_reg <= set_ppc_fields_106_119;
if (reset == 1'b0 && ^(set_ppc_fields_106_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_119_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %120 = getelementptr inbounds i32* %114, i32 1*/
begin
set_ppc_fields_106_120 = (set_ppc_fields_106_114 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %120 = getelementptr inbounds i32* %114, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
set_ppc_fields_106_120_reg <= set_ppc_fields_106_120;
if (reset == 1'b0 && ^(set_ppc_fields_106_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_120_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
begin
set_ppc_fields_106_121 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
set_ppc_fields_106_121_reg <= set_ppc_fields_106_121;
if (reset == 1'b0 && ^(set_ppc_fields_106_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_121_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %122 = getelementptr inbounds %struct.TYPE_6__* %111, i32 1, i32 1*/
begin
set_ppc_fields_106_122 = (set_ppc_fields_106_111 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %122 = getelementptr inbounds %struct.TYPE_6__* %111, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_122_reg <= set_ppc_fields_106_122;
if (reset == 1'b0 && ^(set_ppc_fields_106_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_122_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %123 = lshr i32 %data, 11*/
begin
set_ppc_fields_106_123 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %123 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_123_reg <= set_ppc_fields_106_123;
if (reset == 1'b0 && ^(set_ppc_fields_106_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_123_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %124 = and i32 %123, 31*/
begin
set_ppc_fields_106_124 = (set_ppc_fields_106_123 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %124 = and i32 %123, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
set_ppc_fields_106_124_reg <= set_ppc_fields_106_124;
if (reset == 1'b0 && ^(set_ppc_fields_106_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_124_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %125 = getelementptr inbounds %struct.TYPE_6__* %111, i32 2, i32 0*/
begin
set_ppc_fields_106_125 = (set_ppc_fields_106_111 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %125 = getelementptr inbounds %struct.TYPE_6__* %111, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_125_reg <= set_ppc_fields_106_125;
if (reset == 1'b0 && ^(set_ppc_fields_106_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_125_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %126 = getelementptr inbounds i32* %114, i32 2*/
begin
set_ppc_fields_106_126 = (set_ppc_fields_106_114 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %126 = getelementptr inbounds i32* %114, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
set_ppc_fields_106_126_reg <= set_ppc_fields_106_126;
if (reset == 1'b0 && ^(set_ppc_fields_106_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_126_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
begin
set_ppc_fields_106_127 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
set_ppc_fields_106_127_reg <= set_ppc_fields_106_127;
if (reset == 1'b0 && ^(set_ppc_fields_106_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_127_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %106*/
/*   %128 = getelementptr inbounds %struct.TYPE_6__* %111, i32 2, i32 1*/
begin
set_ppc_fields_106_128 = (set_ppc_fields_106_111 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %106*/
/*   %128 = getelementptr inbounds %struct.TYPE_6__* %111, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
set_ppc_fields_106_128_reg <= set_ppc_fields_106_128;
if (reset == 1'b0 && ^(set_ppc_fields_106_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_106_128_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %130 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_129_130 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %130 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_130_reg <= set_ppc_fields_129_130;
if (reset == 1'b0 && ^(set_ppc_fields_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_130_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %131 = lshr i32 %data, 21*/
begin
set_ppc_fields_129_131 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %131 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_131_reg <= set_ppc_fields_129_131;
if (reset == 1'b0 && ^(set_ppc_fields_129_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_131_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %132 = and i32 %131, 15*/
begin
set_ppc_fields_129_132 = (set_ppc_fields_129_131 & 32'd15);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %132 = and i32 %131, 15*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_132_reg <= set_ppc_fields_129_132;
if (reset == 1'b0 && ^(set_ppc_fields_129_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_132_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %133 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_129_133 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %133 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_133_reg <= set_ppc_fields_129_133;
if (reset == 1'b0 && ^(set_ppc_fields_129_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_133_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
begin
set_ppc_fields_129_134 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_134_reg <= set_ppc_fields_129_134;
if (reset == 1'b0 && ^(set_ppc_fields_129_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_134_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %135 = getelementptr inbounds %struct.TYPE_6__* %134, i32 0, i32 0*/
begin
set_ppc_fields_129_135 = set_ppc_fields_129_134;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %135 = getelementptr inbounds %struct.TYPE_6__* %134, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_135_reg <= set_ppc_fields_129_135;
if (reset == 1'b0 && ^(set_ppc_fields_129_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_135_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %136 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_129_136 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %136 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_136_reg <= set_ppc_fields_129_136;
if (reset == 1'b0 && ^(set_ppc_fields_129_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_136_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
begin
set_ppc_fields_129_137 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
set_ppc_fields_129_137_reg <= set_ppc_fields_129_137;
if (reset == 1'b0 && ^(set_ppc_fields_129_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_137_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
begin
set_ppc_fields_129_138 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
set_ppc_fields_129_138_reg <= set_ppc_fields_129_138;
if (reset == 1'b0 && ^(set_ppc_fields_129_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_138_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %139 = getelementptr inbounds %struct.TYPE_6__* %134, i32 0, i32 1*/
begin
set_ppc_fields_129_139 = (set_ppc_fields_129_134 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %139 = getelementptr inbounds %struct.TYPE_6__* %134, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_139_reg <= set_ppc_fields_129_139;
if (reset == 1'b0 && ^(set_ppc_fields_129_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_139_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %140 = lshr i32 %data, 16*/
begin
set_ppc_fields_129_140 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %140 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_140_reg <= set_ppc_fields_129_140;
if (reset == 1'b0 && ^(set_ppc_fields_129_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_140_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %141 = and i32 %140, 31*/
begin
set_ppc_fields_129_141 = (set_ppc_fields_129_140 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %141 = and i32 %140, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_141_reg <= set_ppc_fields_129_141;
if (reset == 1'b0 && ^(set_ppc_fields_129_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_141_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %142 = getelementptr inbounds %struct.TYPE_6__* %134, i32 1, i32 0*/
begin
set_ppc_fields_129_142 = (set_ppc_fields_129_134 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %142 = getelementptr inbounds %struct.TYPE_6__* %134, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_142_reg <= set_ppc_fields_129_142;
if (reset == 1'b0 && ^(set_ppc_fields_129_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_142_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %143 = getelementptr inbounds i32* %137, i32 1*/
begin
set_ppc_fields_129_143 = (set_ppc_fields_129_137 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %143 = getelementptr inbounds i32* %137, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
set_ppc_fields_129_143_reg <= set_ppc_fields_129_143;
if (reset == 1'b0 && ^(set_ppc_fields_129_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_143_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
begin
set_ppc_fields_129_144 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
set_ppc_fields_129_144_reg <= set_ppc_fields_129_144;
if (reset == 1'b0 && ^(set_ppc_fields_129_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_144_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %145 = getelementptr inbounds %struct.TYPE_6__* %134, i32 1, i32 1*/
begin
set_ppc_fields_129_145 = (set_ppc_fields_129_134 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %145 = getelementptr inbounds %struct.TYPE_6__* %134, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_145_reg <= set_ppc_fields_129_145;
if (reset == 1'b0 && ^(set_ppc_fields_129_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_145_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %146 = lshr i32 %data, 11*/
begin
set_ppc_fields_129_146 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %146 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_146_reg <= set_ppc_fields_129_146;
if (reset == 1'b0 && ^(set_ppc_fields_129_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_146_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %147 = and i32 %146, 31*/
begin
set_ppc_fields_129_147 = (set_ppc_fields_129_146 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %147 = and i32 %146, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
set_ppc_fields_129_147_reg <= set_ppc_fields_129_147;
if (reset == 1'b0 && ^(set_ppc_fields_129_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_147_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %148 = getelementptr inbounds %struct.TYPE_6__* %134, i32 2, i32 0*/
begin
set_ppc_fields_129_148 = (set_ppc_fields_129_134 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %148 = getelementptr inbounds %struct.TYPE_6__* %134, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_148_reg <= set_ppc_fields_129_148;
if (reset == 1'b0 && ^(set_ppc_fields_129_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_148_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %149 = getelementptr inbounds i32* %137, i32 2*/
begin
set_ppc_fields_129_149 = (set_ppc_fields_129_137 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %149 = getelementptr inbounds i32* %137, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
set_ppc_fields_129_149_reg <= set_ppc_fields_129_149;
if (reset == 1'b0 && ^(set_ppc_fields_129_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_149_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
set_ppc_fields_129_150 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
set_ppc_fields_129_150_reg <= set_ppc_fields_129_150;
if (reset == 1'b0 && ^(set_ppc_fields_129_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_150_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %129*/
/*   %151 = getelementptr inbounds %struct.TYPE_6__* %134, i32 2, i32 1*/
begin
set_ppc_fields_129_151 = (set_ppc_fields_129_134 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %129*/
/*   %151 = getelementptr inbounds %struct.TYPE_6__* %134, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
set_ppc_fields_129_151_reg <= set_ppc_fields_129_151;
if (reset == 1'b0 && ^(set_ppc_fields_129_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_129_151_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %153 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_152_153 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %153 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
set_ppc_fields_152_153_reg <= set_ppc_fields_152_153;
if (reset == 1'b0 && ^(set_ppc_fields_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_153_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %154 = lshr i32 %data, 21*/
begin
set_ppc_fields_152_154 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %154 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
set_ppc_fields_152_154_reg <= set_ppc_fields_152_154;
if (reset == 1'b0 && ^(set_ppc_fields_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_154_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %155 = and i32 %154, 7*/
begin
set_ppc_fields_152_155 = (set_ppc_fields_152_154 & 32'd7);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %155 = and i32 %154, 7*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
set_ppc_fields_152_155_reg <= set_ppc_fields_152_155;
if (reset == 1'b0 && ^(set_ppc_fields_152_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_155_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %156 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_152_156 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %156 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
set_ppc_fields_152_156_reg <= set_ppc_fields_152_156;
if (reset == 1'b0 && ^(set_ppc_fields_152_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_156_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
begin
set_ppc_fields_152_157 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
set_ppc_fields_152_157_reg <= set_ppc_fields_152_157;
if (reset == 1'b0 && ^(set_ppc_fields_152_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_157_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %158 = getelementptr inbounds %struct.TYPE_6__* %157, i32 0, i32 0*/
begin
set_ppc_fields_152_158 = set_ppc_fields_152_157;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %158 = getelementptr inbounds %struct.TYPE_6__* %157, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
set_ppc_fields_152_158_reg <= set_ppc_fields_152_158;
if (reset == 1'b0 && ^(set_ppc_fields_152_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_158_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %159 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_152_159 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %159 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
set_ppc_fields_152_159_reg <= set_ppc_fields_152_159;
if (reset == 1'b0 && ^(set_ppc_fields_152_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_159_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
begin
set_ppc_fields_152_160 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_121))
begin
set_ppc_fields_152_160_reg <= set_ppc_fields_152_160;
if (reset == 1'b0 && ^(set_ppc_fields_152_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_160_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
begin
set_ppc_fields_152_161 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
set_ppc_fields_152_161_reg <= set_ppc_fields_152_161;
if (reset == 1'b0 && ^(set_ppc_fields_152_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_161_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %152*/
/*   %162 = getelementptr inbounds %struct.TYPE_6__* %157, i32 0, i32 1*/
begin
set_ppc_fields_152_162 = (set_ppc_fields_152_157 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %152*/
/*   %162 = getelementptr inbounds %struct.TYPE_6__* %157, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
set_ppc_fields_152_162_reg <= set_ppc_fields_152_162;
if (reset == 1'b0 && ^(set_ppc_fields_152_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_152_162_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %164 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_163_164 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %164 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_164_reg <= set_ppc_fields_163_164;
if (reset == 1'b0 && ^(set_ppc_fields_163_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_164_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %165 = lshr i32 %data, 21*/
begin
set_ppc_fields_163_165 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %165 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_165_reg <= set_ppc_fields_163_165;
if (reset == 1'b0 && ^(set_ppc_fields_163_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_165_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %166 = and i32 %165, 31*/
begin
set_ppc_fields_163_166 = (set_ppc_fields_163_165 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %166 = and i32 %165, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_166_reg <= set_ppc_fields_163_166;
if (reset == 1'b0 && ^(set_ppc_fields_163_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_166_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %167 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_163_167 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %167 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_167_reg <= set_ppc_fields_163_167;
if (reset == 1'b0 && ^(set_ppc_fields_163_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_167_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
begin
set_ppc_fields_163_168 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
set_ppc_fields_163_168_reg <= set_ppc_fields_163_168;
if (reset == 1'b0 && ^(set_ppc_fields_163_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_168_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %169 = getelementptr inbounds %struct.TYPE_6__* %168, i32 0, i32 0*/
begin
set_ppc_fields_163_169 = set_ppc_fields_163_168;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %169 = getelementptr inbounds %struct.TYPE_6__* %168, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
set_ppc_fields_163_169_reg <= set_ppc_fields_163_169;
if (reset == 1'b0 && ^(set_ppc_fields_163_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_169_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %170 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_163_170 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %170 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_170_reg <= set_ppc_fields_163_170;
if (reset == 1'b0 && ^(set_ppc_fields_163_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_170_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
begin
set_ppc_fields_163_171 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
set_ppc_fields_163_171_reg <= set_ppc_fields_163_171;
if (reset == 1'b0 && ^(set_ppc_fields_163_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_171_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
begin
set_ppc_fields_163_172 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
set_ppc_fields_163_172_reg <= set_ppc_fields_163_172;
if (reset == 1'b0 && ^(set_ppc_fields_163_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_172_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %173 = getelementptr inbounds %struct.TYPE_6__* %168, i32 0, i32 1*/
begin
set_ppc_fields_163_173 = (set_ppc_fields_163_168 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %173 = getelementptr inbounds %struct.TYPE_6__* %168, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
set_ppc_fields_163_173_reg <= set_ppc_fields_163_173;
if (reset == 1'b0 && ^(set_ppc_fields_163_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_173_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %174 = lshr i32 %data, 16*/
begin
set_ppc_fields_163_174 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %174 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_174_reg <= set_ppc_fields_163_174;
if (reset == 1'b0 && ^(set_ppc_fields_163_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_174_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %175 = and i32 %174, 31*/
begin
set_ppc_fields_163_175 = (set_ppc_fields_163_174 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %175 = and i32 %174, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
set_ppc_fields_163_175_reg <= set_ppc_fields_163_175;
if (reset == 1'b0 && ^(set_ppc_fields_163_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_175_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %176 = getelementptr inbounds %struct.TYPE_6__* %168, i32 1, i32 0*/
begin
set_ppc_fields_163_176 = (set_ppc_fields_163_168 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %176 = getelementptr inbounds %struct.TYPE_6__* %168, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
set_ppc_fields_163_176_reg <= set_ppc_fields_163_176;
if (reset == 1'b0 && ^(set_ppc_fields_163_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_176_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %177 = getelementptr inbounds i32* %171, i32 1*/
begin
set_ppc_fields_163_177 = (set_ppc_fields_163_171 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %177 = getelementptr inbounds i32* %171, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
set_ppc_fields_163_177_reg <= set_ppc_fields_163_177;
if (reset == 1'b0 && ^(set_ppc_fields_163_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_177_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
begin
set_ppc_fields_163_178 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
set_ppc_fields_163_178_reg <= set_ppc_fields_163_178;
if (reset == 1'b0 && ^(set_ppc_fields_163_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_178_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %163*/
/*   %179 = getelementptr inbounds %struct.TYPE_6__* %168, i32 1, i32 1*/
begin
set_ppc_fields_163_179 = (set_ppc_fields_163_168 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %163*/
/*   %179 = getelementptr inbounds %struct.TYPE_6__* %168, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
set_ppc_fields_163_179_reg <= set_ppc_fields_163_179;
if (reset == 1'b0 && ^(set_ppc_fields_163_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_163_179_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %181 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_180_181 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %181 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_181_reg <= set_ppc_fields_180_181;
if (reset == 1'b0 && ^(set_ppc_fields_180_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_181_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %182 = lshr i32 %data, 21*/
begin
set_ppc_fields_180_182 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %182 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_182_reg <= set_ppc_fields_180_182;
if (reset == 1'b0 && ^(set_ppc_fields_180_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_182_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %183 = and i32 %182, 15*/
begin
set_ppc_fields_180_183 = (set_ppc_fields_180_182 & 32'd15);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %183 = and i32 %182, 15*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_183_reg <= set_ppc_fields_180_183;
if (reset == 1'b0 && ^(set_ppc_fields_180_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_183_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %184 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_180_184 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %184 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_184_reg <= set_ppc_fields_180_184;
if (reset == 1'b0 && ^(set_ppc_fields_180_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_184_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
begin
set_ppc_fields_180_185 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_185_reg <= set_ppc_fields_180_185;
if (reset == 1'b0 && ^(set_ppc_fields_180_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_185_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %186 = getelementptr inbounds %struct.TYPE_6__* %185, i32 0, i32 0*/
begin
set_ppc_fields_180_186 = set_ppc_fields_180_185;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %186 = getelementptr inbounds %struct.TYPE_6__* %185, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_186_reg <= set_ppc_fields_180_186;
if (reset == 1'b0 && ^(set_ppc_fields_180_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_186_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %187 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_180_187 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %187 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_187_reg <= set_ppc_fields_180_187;
if (reset == 1'b0 && ^(set_ppc_fields_180_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_187_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
begin
set_ppc_fields_180_188 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
set_ppc_fields_180_188_reg <= set_ppc_fields_180_188;
if (reset == 1'b0 && ^(set_ppc_fields_180_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_188_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
begin
set_ppc_fields_180_189 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
set_ppc_fields_180_189_reg <= set_ppc_fields_180_189;
if (reset == 1'b0 && ^(set_ppc_fields_180_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_189_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %190 = getelementptr inbounds %struct.TYPE_6__* %185, i32 0, i32 1*/
begin
set_ppc_fields_180_190 = (set_ppc_fields_180_185 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %190 = getelementptr inbounds %struct.TYPE_6__* %185, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_190_reg <= set_ppc_fields_180_190;
if (reset == 1'b0 && ^(set_ppc_fields_180_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_190_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %191 = lshr i32 %data, 16*/
begin
set_ppc_fields_180_191 = (arg_data >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %191 = lshr i32 %data, 16*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_191_reg <= set_ppc_fields_180_191;
if (reset == 1'b0 && ^(set_ppc_fields_180_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_191_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %192 = and i32 %191, 31*/
begin
set_ppc_fields_180_192 = (set_ppc_fields_180_191 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %192 = and i32 %191, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_192_reg <= set_ppc_fields_180_192;
if (reset == 1'b0 && ^(set_ppc_fields_180_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_192_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %193 = getelementptr inbounds %struct.TYPE_6__* %185, i32 1, i32 0*/
begin
set_ppc_fields_180_193 = (set_ppc_fields_180_185 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %193 = getelementptr inbounds %struct.TYPE_6__* %185, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_193_reg <= set_ppc_fields_180_193;
if (reset == 1'b0 && ^(set_ppc_fields_180_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_193_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %194 = getelementptr inbounds i32* %188, i32 1*/
begin
set_ppc_fields_180_194 = (set_ppc_fields_180_188 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %194 = getelementptr inbounds i32* %188, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
set_ppc_fields_180_194_reg <= set_ppc_fields_180_194;
if (reset == 1'b0 && ^(set_ppc_fields_180_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_194_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
begin
set_ppc_fields_180_195 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
set_ppc_fields_180_195_reg <= set_ppc_fields_180_195;
if (reset == 1'b0 && ^(set_ppc_fields_180_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_195_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %196 = getelementptr inbounds %struct.TYPE_6__* %185, i32 1, i32 1*/
begin
set_ppc_fields_180_196 = (set_ppc_fields_180_185 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %196 = getelementptr inbounds %struct.TYPE_6__* %185, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_196_reg <= set_ppc_fields_180_196;
if (reset == 1'b0 && ^(set_ppc_fields_180_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_196_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %197 = lshr i32 %data, 11*/
begin
set_ppc_fields_180_197 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %197 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_197_reg <= set_ppc_fields_180_197;
if (reset == 1'b0 && ^(set_ppc_fields_180_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_197_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %198 = and i32 %197, 31*/
begin
set_ppc_fields_180_198 = (set_ppc_fields_180_197 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %198 = and i32 %197, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_198_reg <= set_ppc_fields_180_198;
if (reset == 1'b0 && ^(set_ppc_fields_180_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_198_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %199 = getelementptr inbounds %struct.TYPE_6__* %185, i32 2, i32 0*/
begin
set_ppc_fields_180_199 = (set_ppc_fields_180_185 + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %199 = getelementptr inbounds %struct.TYPE_6__* %185, i32 2, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_199_reg <= set_ppc_fields_180_199;
if (reset == 1'b0 && ^(set_ppc_fields_180_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_199_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %200 = getelementptr inbounds i32* %188, i32 2*/
begin
set_ppc_fields_180_200 = (set_ppc_fields_180_188 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %200 = getelementptr inbounds i32* %188, i32 2*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
set_ppc_fields_180_200_reg <= set_ppc_fields_180_200;
if (reset == 1'b0 && ^(set_ppc_fields_180_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_200_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
begin
set_ppc_fields_180_201 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
set_ppc_fields_180_201_reg <= set_ppc_fields_180_201;
if (reset == 1'b0 && ^(set_ppc_fields_180_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_201_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %202 = getelementptr inbounds %struct.TYPE_6__* %185, i32 2, i32 1*/
begin
set_ppc_fields_180_202 = (set_ppc_fields_180_185 + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %202 = getelementptr inbounds %struct.TYPE_6__* %185, i32 2, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_202_reg <= set_ppc_fields_180_202;
if (reset == 1'b0 && ^(set_ppc_fields_180_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_202_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %203 = lshr i32 %data, 6*/
begin
set_ppc_fields_180_203 = (arg_data >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %203 = lshr i32 %data, 6*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_203_reg <= set_ppc_fields_180_203;
if (reset == 1'b0 && ^(set_ppc_fields_180_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_203_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %204 = and i32 %203, 31*/
begin
set_ppc_fields_180_204 = (set_ppc_fields_180_203 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %204 = and i32 %203, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
set_ppc_fields_180_204_reg <= set_ppc_fields_180_204;
if (reset == 1'b0 && ^(set_ppc_fields_180_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_204_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %205 = getelementptr inbounds %struct.TYPE_6__* %185, i32 3, i32 0*/
begin
set_ppc_fields_180_205 = (set_ppc_fields_180_185 + (8 * 32'd3));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %205 = getelementptr inbounds %struct.TYPE_6__* %185, i32 3, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_205_reg <= set_ppc_fields_180_205;
if (reset == 1'b0 && ^(set_ppc_fields_180_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_205_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %206 = getelementptr inbounds i32* %188, i32 3*/
begin
set_ppc_fields_180_206 = (set_ppc_fields_180_188 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %206 = getelementptr inbounds i32* %188, i32 3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
set_ppc_fields_180_206_reg <= set_ppc_fields_180_206;
if (reset == 1'b0 && ^(set_ppc_fields_180_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_206_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
begin
set_ppc_fields_180_207 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
set_ppc_fields_180_207_reg <= set_ppc_fields_180_207;
if (reset == 1'b0 && ^(set_ppc_fields_180_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_207_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %180*/
/*   %208 = getelementptr inbounds %struct.TYPE_6__* %185, i32 3, i32 1*/
begin
set_ppc_fields_180_208 = (set_ppc_fields_180_185 + ((8 * 32'd3) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %180*/
/*   %208 = getelementptr inbounds %struct.TYPE_6__* %185, i32 3, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
set_ppc_fields_180_208_reg <= set_ppc_fields_180_208;
if (reset == 1'b0 && ^(set_ppc_fields_180_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_180_208_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %210 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_209_210 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %210 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
set_ppc_fields_209_210_reg <= set_ppc_fields_209_210;
if (reset == 1'b0 && ^(set_ppc_fields_209_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_210_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %211 = lshr i32 %data, 21*/
begin
set_ppc_fields_209_211 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %211 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
set_ppc_fields_209_211_reg <= set_ppc_fields_209_211;
if (reset == 1'b0 && ^(set_ppc_fields_209_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_211_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %212 = and i32 %211, 31*/
begin
set_ppc_fields_209_212 = (set_ppc_fields_209_211 & 32'd31);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %212 = and i32 %211, 31*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
set_ppc_fields_209_212_reg <= set_ppc_fields_209_212;
if (reset == 1'b0 && ^(set_ppc_fields_209_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_212_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %213 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_209_213 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %213 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
set_ppc_fields_209_213_reg <= set_ppc_fields_209_213;
if (reset == 1'b0 && ^(set_ppc_fields_209_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_213_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
begin
set_ppc_fields_209_214 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
set_ppc_fields_209_214_reg <= set_ppc_fields_209_214;
if (reset == 1'b0 && ^(set_ppc_fields_209_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_214_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %215 = getelementptr inbounds %struct.TYPE_6__* %214, i32 0, i32 0*/
begin
set_ppc_fields_209_215 = set_ppc_fields_209_214;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %215 = getelementptr inbounds %struct.TYPE_6__* %214, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
set_ppc_fields_209_215_reg <= set_ppc_fields_209_215;
if (reset == 1'b0 && ^(set_ppc_fields_209_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_215_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %216 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_209_216 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %216 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
set_ppc_fields_209_216_reg <= set_ppc_fields_209_216;
if (reset == 1'b0 && ^(set_ppc_fields_209_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_216_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
begin
set_ppc_fields_209_217 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_160))
begin
set_ppc_fields_209_217_reg <= set_ppc_fields_209_217;
if (reset == 1'b0 && ^(set_ppc_fields_209_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_217_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
begin
set_ppc_fields_209_218 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
set_ppc_fields_209_218_reg <= set_ppc_fields_209_218;
if (reset == 1'b0 && ^(set_ppc_fields_209_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_218_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %209*/
/*   %219 = getelementptr inbounds %struct.TYPE_6__* %214, i32 0, i32 1*/
begin
set_ppc_fields_209_219 = (set_ppc_fields_209_214 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %209*/
/*   %219 = getelementptr inbounds %struct.TYPE_6__* %214, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
set_ppc_fields_209_219_reg <= set_ppc_fields_209_219;
if (reset == 1'b0 && ^(set_ppc_fields_209_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_209_219_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %221 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_220_221 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %221 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
set_ppc_fields_220_221_reg <= set_ppc_fields_220_221;
if (reset == 1'b0 && ^(set_ppc_fields_220_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_221_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %222 = lshr i32 %data, 23*/
begin
set_ppc_fields_220_222 = (arg_data >>> (32'd23 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %222 = lshr i32 %data, 23*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
set_ppc_fields_220_222_reg <= set_ppc_fields_220_222;
if (reset == 1'b0 && ^(set_ppc_fields_220_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_222_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %223 = and i32 %222, 7*/
begin
set_ppc_fields_220_223 = (set_ppc_fields_220_222 & 32'd7);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %223 = and i32 %222, 7*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
set_ppc_fields_220_223_reg <= set_ppc_fields_220_223;
if (reset == 1'b0 && ^(set_ppc_fields_220_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_223_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %224 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_220_224 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %224 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
set_ppc_fields_220_224_reg <= set_ppc_fields_220_224;
if (reset == 1'b0 && ^(set_ppc_fields_220_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_224_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
begin
set_ppc_fields_220_225 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
set_ppc_fields_220_225_reg <= set_ppc_fields_220_225;
if (reset == 1'b0 && ^(set_ppc_fields_220_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_225_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %226 = getelementptr inbounds %struct.TYPE_6__* %225, i32 0, i32 0*/
begin
set_ppc_fields_220_226 = set_ppc_fields_220_225;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %226 = getelementptr inbounds %struct.TYPE_6__* %225, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
set_ppc_fields_220_226_reg <= set_ppc_fields_220_226;
if (reset == 1'b0 && ^(set_ppc_fields_220_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_226_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %227 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_220_227 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %227 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
set_ppc_fields_220_227_reg <= set_ppc_fields_220_227;
if (reset == 1'b0 && ^(set_ppc_fields_220_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_227_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
begin
set_ppc_fields_220_228 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_169))
begin
set_ppc_fields_220_228_reg <= set_ppc_fields_220_228;
if (reset == 1'b0 && ^(set_ppc_fields_220_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_228_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
begin
set_ppc_fields_220_229 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
set_ppc_fields_220_229_reg <= set_ppc_fields_220_229;
if (reset == 1'b0 && ^(set_ppc_fields_220_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_229_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %220*/
/*   %230 = getelementptr inbounds %struct.TYPE_6__* %225, i32 0, i32 1*/
begin
set_ppc_fields_220_230 = (set_ppc_fields_220_225 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %220*/
/*   %230 = getelementptr inbounds %struct.TYPE_6__* %225, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
set_ppc_fields_220_230_reg <= set_ppc_fields_220_230;
if (reset == 1'b0 && ^(set_ppc_fields_220_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_220_230_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %232 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_231_232 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %232 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_232_reg <= set_ppc_fields_231_232;
if (reset == 1'b0 && ^(set_ppc_fields_231_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_232_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %233 = lshr i32 %data, 21*/
begin
set_ppc_fields_231_233 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %233 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_233_reg <= set_ppc_fields_231_233;
if (reset == 1'b0 && ^(set_ppc_fields_231_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_233_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %234 = and i32 %233, 15*/
begin
set_ppc_fields_231_234 = (set_ppc_fields_231_233 & 32'd15);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %234 = and i32 %233, 15*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_234_reg <= set_ppc_fields_231_234;
if (reset == 1'b0 && ^(set_ppc_fields_231_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_234_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %235 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_231_235 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %235 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_235_reg <= set_ppc_fields_231_235;
if (reset == 1'b0 && ^(set_ppc_fields_231_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_235_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
begin
set_ppc_fields_231_236 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
set_ppc_fields_231_236_reg <= set_ppc_fields_231_236;
if (reset == 1'b0 && ^(set_ppc_fields_231_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_236_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %237 = getelementptr inbounds %struct.TYPE_6__* %236, i32 0, i32 0*/
begin
set_ppc_fields_231_237 = set_ppc_fields_231_236;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %237 = getelementptr inbounds %struct.TYPE_6__* %236, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
set_ppc_fields_231_237_reg <= set_ppc_fields_231_237;
if (reset == 1'b0 && ^(set_ppc_fields_231_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_237_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %238 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_231_238 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %238 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_238_reg <= set_ppc_fields_231_238;
if (reset == 1'b0 && ^(set_ppc_fields_231_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_238_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
begin
set_ppc_fields_231_239 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
set_ppc_fields_231_239_reg <= set_ppc_fields_231_239;
if (reset == 1'b0 && ^(set_ppc_fields_231_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_239_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
begin
set_ppc_fields_231_240 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
set_ppc_fields_231_240_reg <= set_ppc_fields_231_240;
if (reset == 1'b0 && ^(set_ppc_fields_231_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_240_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %241 = getelementptr inbounds %struct.TYPE_6__* %236, i32 0, i32 1*/
begin
set_ppc_fields_231_241 = (set_ppc_fields_231_236 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %241 = getelementptr inbounds %struct.TYPE_6__* %236, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
set_ppc_fields_231_241_reg <= set_ppc_fields_231_241;
if (reset == 1'b0 && ^(set_ppc_fields_231_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_241_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %242 = lshr i32 %data, 11*/
begin
set_ppc_fields_231_242 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %242 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_242_reg <= set_ppc_fields_231_242;
if (reset == 1'b0 && ^(set_ppc_fields_231_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_242_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %243 = and i32 %242, 1023*/
begin
set_ppc_fields_231_243 = (set_ppc_fields_231_242 & 32'd1023);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %243 = and i32 %242, 1023*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
set_ppc_fields_231_243_reg <= set_ppc_fields_231_243;
if (reset == 1'b0 && ^(set_ppc_fields_231_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_243_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %244 = getelementptr inbounds %struct.TYPE_6__* %236, i32 1, i32 0*/
begin
set_ppc_fields_231_244 = (set_ppc_fields_231_236 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %244 = getelementptr inbounds %struct.TYPE_6__* %236, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
set_ppc_fields_231_244_reg <= set_ppc_fields_231_244;
if (reset == 1'b0 && ^(set_ppc_fields_231_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_244_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %245 = getelementptr inbounds i32* %239, i32 1*/
begin
set_ppc_fields_231_245 = (set_ppc_fields_231_239 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %245 = getelementptr inbounds i32* %239, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
set_ppc_fields_231_245_reg <= set_ppc_fields_231_245;
if (reset == 1'b0 && ^(set_ppc_fields_231_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_245_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
begin
set_ppc_fields_231_246 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
set_ppc_fields_231_246_reg <= set_ppc_fields_231_246;
if (reset == 1'b0 && ^(set_ppc_fields_231_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_246_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %231*/
/*   %247 = getelementptr inbounds %struct.TYPE_6__* %236, i32 1, i32 1*/
begin
set_ppc_fields_231_247 = (set_ppc_fields_231_236 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %231*/
/*   %247 = getelementptr inbounds %struct.TYPE_6__* %236, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
set_ppc_fields_231_247_reg <= set_ppc_fields_231_247;
if (reset == 1'b0 && ^(set_ppc_fields_231_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_231_247_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %249 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_248_249 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %249 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_249_reg <= set_ppc_fields_248_249;
if (reset == 1'b0 && ^(set_ppc_fields_248_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_249_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %250 = lshr i32 %data, 21*/
begin
set_ppc_fields_248_250 = (arg_data >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %250 = lshr i32 %data, 21*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_250_reg <= set_ppc_fields_248_250;
if (reset == 1'b0 && ^(set_ppc_fields_248_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_250_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %251 = and i32 %250, 15*/
begin
set_ppc_fields_248_251 = (set_ppc_fields_248_250 & 32'd15);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %251 = and i32 %250, 15*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_251_reg <= set_ppc_fields_248_251;
if (reset == 1'b0 && ^(set_ppc_fields_248_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_251_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %252 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
begin
set_ppc_fields_248_252 = (arg_v + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %252 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_252_reg <= set_ppc_fields_248_252;
if (reset == 1'b0 && ^(set_ppc_fields_248_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_252_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
begin
set_ppc_fields_248_253 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
set_ppc_fields_248_253_reg <= set_ppc_fields_248_253;
if (reset == 1'b0 && ^(set_ppc_fields_248_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_253_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %254 = getelementptr inbounds %struct.TYPE_6__* %253, i32 1, i32 0*/
begin
set_ppc_fields_248_254 = (set_ppc_fields_248_253 + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %254 = getelementptr inbounds %struct.TYPE_6__* %253, i32 1, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
set_ppc_fields_248_254_reg <= set_ppc_fields_248_254;
if (reset == 1'b0 && ^(set_ppc_fields_248_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_254_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %255 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
begin
set_ppc_fields_248_255 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %255 = getelementptr inbounds %struct.TYPE_8__* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_255_reg <= set_ppc_fields_248_255;
if (reset == 1'b0 && ^(set_ppc_fields_248_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_255_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
begin
set_ppc_fields_248_256 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
set_ppc_fields_248_256_reg <= set_ppc_fields_248_256;
if (reset == 1'b0 && ^(set_ppc_fields_248_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_256_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %257 = getelementptr inbounds i32* %256, i32 1*/
begin
set_ppc_fields_248_257 = (set_ppc_fields_248_256 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %257 = getelementptr inbounds i32* %256, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
set_ppc_fields_248_257_reg <= set_ppc_fields_248_257;
if (reset == 1'b0 && ^(set_ppc_fields_248_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_257_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
begin
set_ppc_fields_248_258 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
set_ppc_fields_248_258_reg <= set_ppc_fields_248_258;
if (reset == 1'b0 && ^(set_ppc_fields_248_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_258_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %259 = getelementptr inbounds %struct.TYPE_6__* %253, i32 1, i32 1*/
begin
set_ppc_fields_248_259 = (set_ppc_fields_248_253 + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %259 = getelementptr inbounds %struct.TYPE_6__* %253, i32 1, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
set_ppc_fields_248_259_reg <= set_ppc_fields_248_259;
if (reset == 1'b0 && ^(set_ppc_fields_248_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_259_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %260 = lshr i32 %data, 11*/
begin
set_ppc_fields_248_260 = (arg_data >>> (32'd11 % 32));
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %260 = lshr i32 %data, 11*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_260_reg <= set_ppc_fields_248_260;
if (reset == 1'b0 && ^(set_ppc_fields_248_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_260_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %261 = and i32 %260, 1023*/
begin
set_ppc_fields_248_261 = (set_ppc_fields_248_260 & 32'd1023);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %261 = and i32 %260, 1023*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
set_ppc_fields_248_261_reg <= set_ppc_fields_248_261;
if (reset == 1'b0 && ^(set_ppc_fields_248_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_261_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %262 = getelementptr inbounds %struct.TYPE_6__* %253, i32 0, i32 0*/
begin
set_ppc_fields_248_262 = set_ppc_fields_248_253;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %262 = getelementptr inbounds %struct.TYPE_6__* %253, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
set_ppc_fields_248_262_reg <= set_ppc_fields_248_262;
if (reset == 1'b0 && ^(set_ppc_fields_248_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_262_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
begin
set_ppc_fields_248_263 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
set_ppc_fields_248_263_reg <= set_ppc_fields_248_263;
if (reset == 1'b0 && ^(set_ppc_fields_248_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_263_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %248*/
/*   %264 = getelementptr inbounds %struct.TYPE_6__* %253, i32 0, i32 1*/
begin
set_ppc_fields_248_264 = (set_ppc_fields_248_253 + 4);
end
end
always @(posedge clk) begin
/* set_ppc_fields: %248*/
/*   %264 = getelementptr inbounds %struct.TYPE_6__* %253, i32 0, i32 1*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
set_ppc_fields_248_264_reg <= set_ppc_fields_248_264;
if (reset == 1'b0 && ^(set_ppc_fields_248_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_248_264_reg"); $finish; end
end
end
always @(*) begin
/* set_ppc_fields: %265*/
/*   %266 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
begin
set_ppc_fields_265_266 = arg_v;
end
end
always @(posedge clk) begin
/* set_ppc_fields: %265*/
/*   %266 = getelementptr inbounds %struct.TYPE_7__* %v, i32 0, i32 0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
set_ppc_fields_265_266_reg <= set_ppc_fields_265_266;
if (reset == 1'b0 && ^(set_ppc_fields_265_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_265_266_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* set_ppc_fields: %267*/
/*   ret void*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_267_199))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_2))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_8))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   store i32 %13, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_14))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_17))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   store i32 %20, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_30))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %25*/
/*   store i32 %34, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %39*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_43))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %39*/
/*   store i32 %48, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %49*/
/*   store i32 1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_50))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %49*/
/*   store i32 %58, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 3, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_59))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %69, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_64))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %75, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %81, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 3, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_74))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %92, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_79))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %104, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 3, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_89))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %115, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_94))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %121, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 3, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_104))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %138, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_109))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %150, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_119))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %152*/
/*   store i32 %161, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 2, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_128))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_133))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 4, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %183, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %195, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_148))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %201, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %207, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %209*/
/*   store i32 1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_158))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %209*/
/*   store i32 %218, i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %220*/
/*   store i32 1, i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_167))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %220*/
/*   store i32 %229, i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 2, i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_176))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_181))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 2, i32* %249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %251, i32* %254, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %258, i32* %259, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %263, i32* %264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_2))
begin
memory_controller_address_a = set_ppc_fields_2_3;
end
/* set_ppc_fields: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
memory_controller_address_a = set_ppc_fields_5_6;
end
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_8))
begin
memory_controller_address_a = set_ppc_fields_5_8;
end
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
memory_controller_address_a = set_ppc_fields_11_14;
end
/* set_ppc_fields: %11*/
/*   store i32 %13, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
memory_controller_address_a = set_ppc_fields_11_16;
end
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_14))
begin
memory_controller_address_a = set_ppc_fields_5_8_reg;
end
/* set_ppc_fields: %11*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
memory_controller_address_a = set_ppc_fields_11_18_reg;
end
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_17))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %11*/
/*   store i32 %20, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_30))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %25*/
/*   store i32 %34, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %39*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
memory_controller_address_a = set_ppc_fields_39_46_reg;
end
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_43))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %39*/
/*   store i32 %48, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
memory_controller_address_a = set_ppc_fields_5_6_reg;
end
/* set_ppc_fields: %49*/
/*   store i32 1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_address_a = set_ppc_fields_49_50;
end
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_50))
begin
memory_controller_address_a = set_ppc_fields_49_56_reg;
end
/* set_ppc_fields: %49*/
/*   store i32 %58, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
memory_controller_address_a = set_ppc_fields_49_59_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 3, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_address_a = set_ppc_fields_60_61;
end
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_59))
begin
memory_controller_address_a = set_ppc_fields_60_67_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %69, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_address_a = set_ppc_fields_60_70_reg;
end
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_64))
begin
memory_controller_address_a = set_ppc_fields_60_74_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %75, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_address_a = set_ppc_fields_60_76_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %81, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
memory_controller_address_a = set_ppc_fields_60_82_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 3, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_address_a = set_ppc_fields_83_84;
end
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_74))
begin
memory_controller_address_a = set_ppc_fields_83_90_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %92, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_address_a = set_ppc_fields_83_93_reg;
end
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_79))
begin
memory_controller_address_a = set_ppc_fields_83_97_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_address_a = set_ppc_fields_83_99_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %104, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
memory_controller_address_a = set_ppc_fields_83_105_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 3, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_address_a = set_ppc_fields_106_107;
end
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_89))
begin
memory_controller_address_a = set_ppc_fields_106_113_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %115, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_address_a = set_ppc_fields_106_116_reg;
end
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_94))
begin
memory_controller_address_a = set_ppc_fields_106_120_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %121, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_address_a = set_ppc_fields_106_122_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
memory_controller_address_a = set_ppc_fields_106_128_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 3, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_address_a = set_ppc_fields_129_130;
end
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_104))
begin
memory_controller_address_a = set_ppc_fields_129_136_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %138, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_address_a = set_ppc_fields_129_139_reg;
end
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_109))
begin
memory_controller_address_a = set_ppc_fields_129_143_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_address_a = set_ppc_fields_129_145_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %150, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
memory_controller_address_a = set_ppc_fields_129_151_reg;
end
/* set_ppc_fields: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_address_a = set_ppc_fields_152_153;
end
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_119))
begin
memory_controller_address_a = set_ppc_fields_152_159_reg;
end
/* set_ppc_fields: %152*/
/*   store i32 %161, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
memory_controller_address_a = set_ppc_fields_152_162_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 2, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_address_a = set_ppc_fields_163_164;
end
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_128))
begin
memory_controller_address_a = set_ppc_fields_163_170_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_address_a = set_ppc_fields_163_173_reg;
end
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_133))
begin
memory_controller_address_a = set_ppc_fields_163_177_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 4, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_address_a = set_ppc_fields_180_181;
end
/* set_ppc_fields: %180*/
/*   store i32 %183, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
memory_controller_address_a = set_ppc_fields_180_186;
end
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
memory_controller_address_a = set_ppc_fields_180_188;
end
/* set_ppc_fields: %180*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_address_a = set_ppc_fields_180_190_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %195, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_address_a = set_ppc_fields_180_196_reg;
end
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_148))
begin
memory_controller_address_a = set_ppc_fields_180_200_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %201, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_address_a = set_ppc_fields_180_202_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %207, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
memory_controller_address_a = set_ppc_fields_180_208_reg;
end
/* set_ppc_fields: %209*/
/*   store i32 1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_address_a = set_ppc_fields_209_210;
end
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_158))
begin
memory_controller_address_a = set_ppc_fields_209_216_reg;
end
/* set_ppc_fields: %209*/
/*   store i32 %218, i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
memory_controller_address_a = set_ppc_fields_209_219_reg;
end
/* set_ppc_fields: %220*/
/*   store i32 1, i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_address_a = set_ppc_fields_220_221;
end
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_167))
begin
memory_controller_address_a = set_ppc_fields_220_227_reg;
end
/* set_ppc_fields: %220*/
/*   store i32 %229, i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
memory_controller_address_a = set_ppc_fields_220_230_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 2, i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_address_a = set_ppc_fields_231_232;
end
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_176))
begin
memory_controller_address_a = set_ppc_fields_231_238_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_address_a = set_ppc_fields_231_241_reg;
end
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_181))
begin
memory_controller_address_a = set_ppc_fields_231_245_reg;
end
/* set_ppc_fields: %248*/
/*   store i32 2, i32* %249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_address_a = set_ppc_fields_248_249;
end
/* set_ppc_fields: %248*/
/*   store i32 %251, i32* %254, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
memory_controller_address_a = set_ppc_fields_248_254;
end
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
memory_controller_address_a = set_ppc_fields_248_257;
end
/* set_ppc_fields: %248*/
/*   store i32 %258, i32* %259, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_address_a = set_ppc_fields_248_259_reg;
end
/* set_ppc_fields: %248*/
/*   store i32 %263, i32* %264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
memory_controller_address_a = set_ppc_fields_248_264_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %11*/
/*   store i32 %13, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %11*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %11*/
/*   store i32 %20, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_30))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %25*/
/*   store i32 %34, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %39*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %39*/
/*   store i32 %48, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %49*/
/*   store i32 1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_50))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %49*/
/*   store i32 %58, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 3, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_59))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %60*/
/*   store i32 %69, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %60*/
/*   store i32 %75, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %81, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 3, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_74))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %83*/
/*   store i32 %92, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_79))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %83*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %104, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 3, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %106*/
/*   store i32 %115, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_94))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %106*/
/*   store i32 %121, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 3, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_104))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %129*/
/*   store i32 %138, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %129*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %150, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_119))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %152*/
/*   store i32 %161, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 2, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_128))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_133))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %180*/
/*   store i32 4, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %183, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %180*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %195, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_148))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %180*/
/*   store i32 %201, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %207, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %209*/
/*   store i32 1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_158))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %209*/
/*   store i32 %218, i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %220*/
/*   store i32 1, i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_167))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %220*/
/*   store i32 %229, i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 2, i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_176))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %231*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_181))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %248*/
/*   store i32 2, i32* %249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %251, i32* %254, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
memory_controller_write_enable_a = 1'd0;
end
/* set_ppc_fields: %248*/
/*   store i32 %258, i32* %259, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_write_enable_a = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %263, i32* %264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* set_ppc_fields: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
memory_controller_in_a = 32'd0;
end
/* set_ppc_fields: %11*/
/*   store i32 %13, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
memory_controller_in_a = set_ppc_fields_11_13_reg;
end
/* set_ppc_fields: %11*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
memory_controller_in_a = set_ppc_fields_11_17;
end
/* set_ppc_fields: %11*/
/*   store i32 %20, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
memory_controller_in_a = set_ppc_fields_11_20;
end
/* set_ppc_fields: %25*/
/*   store i32 %34, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
memory_controller_in_a = set_ppc_fields_25_34;
end
/* set_ppc_fields: %39*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
memory_controller_in_a = set_ppc_fields_39_45;
end
/* set_ppc_fields: %39*/
/*   store i32 %48, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
memory_controller_in_a = set_ppc_fields_39_48;
end
/* set_ppc_fields: %49*/
/*   store i32 1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_in_a = 32'd1;
end
/* set_ppc_fields: %49*/
/*   store i32 %58, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
memory_controller_in_a = set_ppc_fields_49_58;
end
/* set_ppc_fields: %60*/
/*   store i32 3, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_in_a = 32'd3;
end
/* set_ppc_fields: %60*/
/*   store i32 %69, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_in_a = set_ppc_fields_60_69;
end
/* set_ppc_fields: %60*/
/*   store i32 %75, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_in_a = set_ppc_fields_60_75;
end
/* set_ppc_fields: %60*/
/*   store i32 %81, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
memory_controller_in_a = set_ppc_fields_60_81;
end
/* set_ppc_fields: %83*/
/*   store i32 3, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_in_a = 32'd3;
end
/* set_ppc_fields: %83*/
/*   store i32 %92, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_in_a = set_ppc_fields_83_92;
end
/* set_ppc_fields: %83*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_in_a = set_ppc_fields_83_98;
end
/* set_ppc_fields: %83*/
/*   store i32 %104, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
memory_controller_in_a = set_ppc_fields_83_104;
end
/* set_ppc_fields: %106*/
/*   store i32 3, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_in_a = 32'd3;
end
/* set_ppc_fields: %106*/
/*   store i32 %115, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_in_a = set_ppc_fields_106_115;
end
/* set_ppc_fields: %106*/
/*   store i32 %121, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_in_a = set_ppc_fields_106_121;
end
/* set_ppc_fields: %106*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
memory_controller_in_a = set_ppc_fields_106_127;
end
/* set_ppc_fields: %129*/
/*   store i32 3, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_in_a = 32'd3;
end
/* set_ppc_fields: %129*/
/*   store i32 %138, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_in_a = set_ppc_fields_129_138;
end
/* set_ppc_fields: %129*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_in_a = set_ppc_fields_129_144;
end
/* set_ppc_fields: %129*/
/*   store i32 %150, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
memory_controller_in_a = set_ppc_fields_129_150;
end
/* set_ppc_fields: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_in_a = 32'd1;
end
/* set_ppc_fields: %152*/
/*   store i32 %161, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
memory_controller_in_a = set_ppc_fields_152_161;
end
/* set_ppc_fields: %163*/
/*   store i32 2, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_in_a = 32'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_in_a = set_ppc_fields_163_172;
end
/* set_ppc_fields: %180*/
/*   store i32 4, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_in_a = 32'd4;
end
/* set_ppc_fields: %180*/
/*   store i32 %183, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
memory_controller_in_a = set_ppc_fields_180_183_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_in_a = set_ppc_fields_180_189;
end
/* set_ppc_fields: %180*/
/*   store i32 %195, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_in_a = set_ppc_fields_180_195;
end
/* set_ppc_fields: %180*/
/*   store i32 %201, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_in_a = set_ppc_fields_180_201;
end
/* set_ppc_fields: %180*/
/*   store i32 %207, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
memory_controller_in_a = set_ppc_fields_180_207;
end
/* set_ppc_fields: %209*/
/*   store i32 1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_in_a = 32'd1;
end
/* set_ppc_fields: %209*/
/*   store i32 %218, i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
memory_controller_in_a = set_ppc_fields_209_218;
end
/* set_ppc_fields: %220*/
/*   store i32 1, i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_in_a = 32'd1;
end
/* set_ppc_fields: %220*/
/*   store i32 %229, i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
memory_controller_in_a = set_ppc_fields_220_229;
end
/* set_ppc_fields: %231*/
/*   store i32 2, i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_in_a = 32'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_in_a = set_ppc_fields_231_240;
end
/* set_ppc_fields: %248*/
/*   store i32 2, i32* %249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_in_a = 32'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 %251, i32* %254, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
memory_controller_in_a = set_ppc_fields_248_251_reg;
end
/* set_ppc_fields: %248*/
/*   store i32 %258, i32* %259, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_in_a = set_ppc_fields_248_258;
end
/* set_ppc_fields: %248*/
/*   store i32 %263, i32* %264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
memory_controller_in_a = set_ppc_fields_248_263;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* set_ppc_fields: %2*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_2_2))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_5))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %5*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_8))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   %15 = load %struct.TYPE_6__** %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_11))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   store i32 %13, i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_13))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   %17 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_14))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_16))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   %19 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_17))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %11*/
/*   store i32 %20, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_11_19))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %25*/
/*   %33 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_30))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %25*/
/*   store i32 %34, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_32))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %39*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_42))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %39*/
/*   %47 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_43))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %39*/
/*   store i32 %48, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_45))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %49*/
/*   store i32 1, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %49*/
/*   %57 = load i32** %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_50))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %49*/
/*   store i32 %58, i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_54))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 3, i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   %68 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_59))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %69, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_64))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %75, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %81, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_69))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 3, i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   %91 = load i32** %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_74))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %92, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_79))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %104, i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_84))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 3, i32* %107, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   %114 = load i32** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_89))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %115, i32* %116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   %121 = load i32* %120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_94))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %121, i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %127, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_99))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 3, i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   %137 = load i32** %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_104))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %138, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   %144 = load i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_109))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %150, i32* %151, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_114))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %152*/
/*   %160 = load i32** %159, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_119))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %152*/
/*   store i32 %161, i32* %162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_123))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 2, i32* %164, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %163*/
/*   %171 = load i32** %170, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_128))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %163*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_133))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 4, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %183, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_139))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %189 = load i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_142))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %195, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %201 = load i32* %200, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_148))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %201, i32* %202, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %207, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_153))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %209*/
/*   store i32 1, i32* %210, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %209*/
/*   %217 = load i32** %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_158))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %209*/
/*   store i32 %218, i32* %219, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_162))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %220*/
/*   store i32 1, i32* %221, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %220*/
/*   %228 = load i32** %227, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_167))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %220*/
/*   store i32 %229, i32* %230, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_171))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 2, i32* %232, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %231*/
/*   %239 = load i32** %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_176))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %231*/
/*   %246 = load i32* %245, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_181))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 2, i32* %249, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 %251, i32* %254, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_187))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %248*/
/*   %258 = load i32* %257, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_190))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 %258, i32* %259, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_size_a = 2'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 %263, i32* %264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_195))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_6))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_21))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %25*/
/*   store i32 %27, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_27))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %25*/
/*   store i32 %31, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_34))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %39*/
/*   store i32 %41, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_40))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %49*/
/*   store i32 %52, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_52))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %63, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %78, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_67))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %86, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %95, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %101, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_82))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %109, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %118, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %124, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_97))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %132, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %141, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_112))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %152*/
/*   store i32 %155, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_121))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 %166, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 %175, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 %178, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_140))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %192, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_145))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %204, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_151))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %209*/
/*   store i32 %212, i32* %215, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_160))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %220*/
/*   store i32 %223, i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_169))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 %234, i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 %243, i32* %244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 %246, i32* %247, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_188))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   store i32 %261, i32* %262, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_193))
begin
memory_controller_enable_b = 1'd1;
end
/* set_ppc_fields: %265*/
/*   store i32 0, i32* %266, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_6))
begin
memory_controller_address_b = set_ppc_fields_5_7_reg;
end
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_21))
begin
memory_controller_address_b = set_ppc_fields_21_22;
end
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
memory_controller_address_b = set_ppc_fields_25_28;
end
/* set_ppc_fields: %25*/
/*   store i32 %27, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
memory_controller_address_b = set_ppc_fields_25_30;
end
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_27))
begin
memory_controller_address_b = set_ppc_fields_21_22_reg;
end
/* set_ppc_fields: %25*/
/*   store i32 %31, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
memory_controller_address_b = set_ppc_fields_25_32_reg;
end
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_34))
begin
memory_controller_address_b = set_ppc_fields_35_36;
end
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
memory_controller_address_b = set_ppc_fields_39_42;
end
/* set_ppc_fields: %39*/
/*   store i32 %41, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
memory_controller_address_b = set_ppc_fields_39_44;
end
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_40))
begin
memory_controller_address_b = set_ppc_fields_35_36_reg;
end
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_address_b = set_ppc_fields_49_53;
end
/* set_ppc_fields: %49*/
/*   store i32 %52, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
memory_controller_address_b = set_ppc_fields_49_55;
end
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_52))
begin
memory_controller_address_b = set_ppc_fields_49_57;
end
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_address_b = set_ppc_fields_60_64;
end
/* set_ppc_fields: %60*/
/*   store i32 %63, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
memory_controller_address_b = set_ppc_fields_60_66;
end
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
memory_controller_address_b = set_ppc_fields_60_68;
end
/* set_ppc_fields: %60*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_address_b = set_ppc_fields_60_73_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %78, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_address_b = set_ppc_fields_60_79_reg;
end
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_67))
begin
memory_controller_address_b = set_ppc_fields_60_80_reg;
end
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_address_b = set_ppc_fields_83_87;
end
/* set_ppc_fields: %83*/
/*   store i32 %86, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
memory_controller_address_b = set_ppc_fields_83_89;
end
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
memory_controller_address_b = set_ppc_fields_83_91;
end
/* set_ppc_fields: %83*/
/*   store i32 %95, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_address_b = set_ppc_fields_83_96_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %101, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_address_b = set_ppc_fields_83_102_reg;
end
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_82))
begin
memory_controller_address_b = set_ppc_fields_83_103_reg;
end
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_address_b = set_ppc_fields_106_110;
end
/* set_ppc_fields: %106*/
/*   store i32 %109, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
memory_controller_address_b = set_ppc_fields_106_112;
end
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
memory_controller_address_b = set_ppc_fields_106_114;
end
/* set_ppc_fields: %106*/
/*   store i32 %118, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_address_b = set_ppc_fields_106_119_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %124, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_address_b = set_ppc_fields_106_125_reg;
end
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_97))
begin
memory_controller_address_b = set_ppc_fields_106_126_reg;
end
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_address_b = set_ppc_fields_129_133;
end
/* set_ppc_fields: %129*/
/*   store i32 %132, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
memory_controller_address_b = set_ppc_fields_129_135;
end
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
memory_controller_address_b = set_ppc_fields_129_137;
end
/* set_ppc_fields: %129*/
/*   store i32 %141, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_address_b = set_ppc_fields_129_142_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_address_b = set_ppc_fields_129_148_reg;
end
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_112))
begin
memory_controller_address_b = set_ppc_fields_129_149_reg;
end
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_address_b = set_ppc_fields_152_156;
end
/* set_ppc_fields: %152*/
/*   store i32 %155, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
memory_controller_address_b = set_ppc_fields_152_158;
end
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_121))
begin
memory_controller_address_b = set_ppc_fields_152_160;
end
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_address_b = set_ppc_fields_163_167;
end
/* set_ppc_fields: %163*/
/*   store i32 %166, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
memory_controller_address_b = set_ppc_fields_163_169;
end
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
memory_controller_address_b = set_ppc_fields_163_171;
end
/* set_ppc_fields: %163*/
/*   store i32 %175, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_address_b = set_ppc_fields_163_176_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 %178, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
memory_controller_address_b = set_ppc_fields_163_179_reg;
end
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_address_b = set_ppc_fields_180_184;
end
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_140))
begin
memory_controller_address_b = set_ppc_fields_180_187_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %192, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_address_b = set_ppc_fields_180_193_reg;
end
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_145))
begin
memory_controller_address_b = set_ppc_fields_180_194_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_address_b = set_ppc_fields_180_199_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %204, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_address_b = set_ppc_fields_180_205_reg;
end
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_151))
begin
memory_controller_address_b = set_ppc_fields_180_206_reg;
end
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_address_b = set_ppc_fields_209_213;
end
/* set_ppc_fields: %209*/
/*   store i32 %212, i32* %215, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
memory_controller_address_b = set_ppc_fields_209_215;
end
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_160))
begin
memory_controller_address_b = set_ppc_fields_209_217;
end
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_address_b = set_ppc_fields_220_224;
end
/* set_ppc_fields: %220*/
/*   store i32 %223, i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
memory_controller_address_b = set_ppc_fields_220_226;
end
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_169))
begin
memory_controller_address_b = set_ppc_fields_220_228;
end
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_address_b = set_ppc_fields_231_235;
end
/* set_ppc_fields: %231*/
/*   store i32 %234, i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
memory_controller_address_b = set_ppc_fields_231_237;
end
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
memory_controller_address_b = set_ppc_fields_231_239;
end
/* set_ppc_fields: %231*/
/*   store i32 %243, i32* %244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_address_b = set_ppc_fields_231_244_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 %246, i32* %247, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
memory_controller_address_b = set_ppc_fields_231_247_reg;
end
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_address_b = set_ppc_fields_248_252;
end
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_188))
begin
memory_controller_address_b = set_ppc_fields_248_255_reg;
end
/* set_ppc_fields: %248*/
/*   store i32 %261, i32* %262, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_address_b = set_ppc_fields_248_262_reg;
end
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_193))
begin
memory_controller_address_b = set_ppc_fields_248_256_reg;
end
/* set_ppc_fields: %265*/
/*   store i32 0, i32* %266, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
memory_controller_address_b = set_ppc_fields_265_266;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %25*/
/*   store i32 %27, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %25*/
/*   store i32 %31, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %39*/
/*   store i32 %41, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %49*/
/*   store i32 %52, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %60*/
/*   store i32 %63, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %60*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   store i32 %78, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_67))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %83*/
/*   store i32 %86, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %83*/
/*   store i32 %95, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   store i32 %101, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %106*/
/*   store i32 %109, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %106*/
/*   store i32 %118, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   store i32 %124, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_97))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %129*/
/*   store i32 %132, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %129*/
/*   store i32 %141, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_112))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %152*/
/*   store i32 %155, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_121))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %163*/
/*   store i32 %166, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %163*/
/*   store i32 %175, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %163*/
/*   store i32 %178, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_140))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %180*/
/*   store i32 %192, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_145))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %180*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   store i32 %204, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_151))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %209*/
/*   store i32 %212, i32* %215, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_160))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %220*/
/*   store i32 %223, i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_169))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %231*/
/*   store i32 %234, i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %231*/
/*   store i32 %243, i32* %244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %231*/
/*   store i32 %246, i32* %247, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_188))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %248*/
/*   store i32 %261, i32* %262, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_write_enable_b = 1'd1;
end
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_193))
begin
memory_controller_write_enable_b = 1'd0;
end
/* set_ppc_fields: %265*/
/*   store i32 0, i32* %266, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* set_ppc_fields: %25*/
/*   store i32 %27, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
memory_controller_in_b = set_ppc_fields_25_27_reg;
end
/* set_ppc_fields: %25*/
/*   store i32 %31, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
memory_controller_in_b = set_ppc_fields_25_31;
end
/* set_ppc_fields: %39*/
/*   store i32 %41, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
memory_controller_in_b = set_ppc_fields_39_41_reg;
end
/* set_ppc_fields: %49*/
/*   store i32 %52, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
memory_controller_in_b = set_ppc_fields_49_52_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %63, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
memory_controller_in_b = set_ppc_fields_60_63_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_in_b = set_ppc_fields_60_72_reg;
end
/* set_ppc_fields: %60*/
/*   store i32 %78, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_in_b = set_ppc_fields_60_78_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %86, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
memory_controller_in_b = set_ppc_fields_83_86_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %95, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_in_b = set_ppc_fields_83_95_reg;
end
/* set_ppc_fields: %83*/
/*   store i32 %101, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_in_b = set_ppc_fields_83_101_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %109, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
memory_controller_in_b = set_ppc_fields_106_109_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %118, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_in_b = set_ppc_fields_106_118_reg;
end
/* set_ppc_fields: %106*/
/*   store i32 %124, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_in_b = set_ppc_fields_106_124_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %132, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
memory_controller_in_b = set_ppc_fields_129_132_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %141, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_in_b = set_ppc_fields_129_141_reg;
end
/* set_ppc_fields: %129*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_in_b = set_ppc_fields_129_147_reg;
end
/* set_ppc_fields: %152*/
/*   store i32 %155, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
memory_controller_in_b = set_ppc_fields_152_155_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 %166, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
memory_controller_in_b = set_ppc_fields_163_166_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 %175, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_in_b = set_ppc_fields_163_175_reg;
end
/* set_ppc_fields: %163*/
/*   store i32 %178, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
memory_controller_in_b = set_ppc_fields_163_178;
end
/* set_ppc_fields: %180*/
/*   store i32 %192, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_in_b = set_ppc_fields_180_192_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_in_b = set_ppc_fields_180_198_reg;
end
/* set_ppc_fields: %180*/
/*   store i32 %204, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_in_b = set_ppc_fields_180_204_reg;
end
/* set_ppc_fields: %209*/
/*   store i32 %212, i32* %215, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
memory_controller_in_b = set_ppc_fields_209_212_reg;
end
/* set_ppc_fields: %220*/
/*   store i32 %223, i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
memory_controller_in_b = set_ppc_fields_220_223_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 %234, i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
memory_controller_in_b = set_ppc_fields_231_234_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 %243, i32* %244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_in_b = set_ppc_fields_231_243_reg;
end
/* set_ppc_fields: %231*/
/*   store i32 %246, i32* %247, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
memory_controller_in_b = set_ppc_fields_231_246;
end
/* set_ppc_fields: %248*/
/*   store i32 %261, i32* %262, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_in_b = set_ppc_fields_248_261_reg;
end
/* set_ppc_fields: %265*/
/*   store i32 0, i32* %266, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
memory_controller_in_b = 32'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* set_ppc_fields: %5*/
/*   %8 = load i32** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_5_6))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_21_21))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %25*/
/*   %29 = load %struct.TYPE_6__** %28, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_24))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %25*/
/*   store i32 %27, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_26))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %25*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_27))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %25*/
/*   store i32 %31, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_25_29))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_35_34))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %39*/
/*   %43 = load %struct.TYPE_6__** %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_37))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %39*/
/*   store i32 %41, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_39))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %39*/
/*   %45 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_39_40))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %49*/
/*   %54 = load %struct.TYPE_6__** %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_47))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %49*/
/*   store i32 %52, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_49))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %49*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_49_52))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   %65 = load %struct.TYPE_6__** %64, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_56))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %63, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_58))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_61))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_63))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   store i32 %78, i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_66))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %60*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_60_67))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   %88 = load %struct.TYPE_6__** %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_71))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %86, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_73))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_76))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %95, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_78))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   store i32 %101, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_81))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_83_82))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   %111 = load %struct.TYPE_6__** %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_86))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %109, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_88))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_91))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %118, i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_93))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   store i32 %124, i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_96))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %106*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_106_97))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   %134 = load %struct.TYPE_6__** %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_101))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %132, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_103))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_106))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %141, i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_108))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   store i32 %147, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_111))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %129*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_129_112))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %152*/
/*   %157 = load %struct.TYPE_6__** %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_116))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %152*/
/*   store i32 %155, i32* %158, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_118))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %152*/
/*   %161 = load i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_152_121))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %163*/
/*   %168 = load %struct.TYPE_6__** %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_125))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 %166, i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_127))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_130))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 %175, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_132))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %163*/
/*   store i32 %178, i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_163_135))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %185 = load %struct.TYPE_6__** %184, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_137))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %188 = load i32** %187, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_140))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %192, i32* %193, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_144))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %195 = load i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_145))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_147))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   store i32 %204, i32* %205, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_150))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %180*/
/*   %207 = load i32* %206, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_180_151))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %209*/
/*   %214 = load %struct.TYPE_6__** %213, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_155))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %209*/
/*   store i32 %212, i32* %215, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_157))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %209*/
/*   %218 = load i32* %217, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_209_160))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %220*/
/*   %225 = load %struct.TYPE_6__** %224, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_164))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %220*/
/*   store i32 %223, i32* %226, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_166))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %220*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_220_169))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %231*/
/*   %236 = load %struct.TYPE_6__** %235, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_173))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 %234, i32* %237, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_175))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %231*/
/*   %240 = load i32* %239, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_178))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 %243, i32* %244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_180))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %231*/
/*   store i32 %246, i32* %247, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_231_183))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %248*/
/*   %253 = load %struct.TYPE_6__** %252, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_185))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %248*/
/*   %256 = load i32** %255, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_188))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %248*/
/*   store i32 %261, i32* %262, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_192))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %248*/
/*   %263 = load i32* %256, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_248_193))
begin
memory_controller_size_b = 2'd2;
end
/* set_ppc_fields: %265*/
/*   store i32 0, i32* %266, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_set_ppc_fields_BB_265_197))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  set_ppc_fields_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_arg_v;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_arg_p;
reg [31:0] set_ppc_fields_arg_data;
wire  set_ppc_fields_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_memory_controller_address_a;
wire  set_ppc_fields_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] set_ppc_fields_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] set_ppc_fields_memory_controller_out_a;
wire [1:0] set_ppc_fields_memory_controller_size_a;
wire  set_ppc_fields_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] set_ppc_fields_memory_controller_address_b;
wire  set_ppc_fields_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] set_ppc_fields_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] set_ppc_fields_memory_controller_out_b;
wire [1:0] set_ppc_fields_memory_controller_size_b;
reg  set_ppc_fields_memory_controller_waitrequest;
wire  set_ppc_fields_finish;
reg  set_ppc_fields_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


set_ppc_fields set_ppc_fields_inst (
	.memory_controller_enable_a (set_ppc_fields_memory_controller_enable_a),
	.memory_controller_address_a (set_ppc_fields_memory_controller_address_a),
	.memory_controller_write_enable_a (set_ppc_fields_memory_controller_write_enable_a),
	.memory_controller_in_a (set_ppc_fields_memory_controller_in_a),
	.memory_controller_size_a (set_ppc_fields_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (set_ppc_fields_memory_controller_enable_b),
	.memory_controller_address_b (set_ppc_fields_memory_controller_address_b),
	.memory_controller_write_enable_b (set_ppc_fields_memory_controller_write_enable_b),
	.memory_controller_in_b (set_ppc_fields_memory_controller_in_b),
	.memory_controller_size_b (set_ppc_fields_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (set_ppc_fields_start),
	.finish (set_ppc_fields_finish),
	.arg_v (set_ppc_fields_arg_v),
	.arg_p (set_ppc_fields_arg_p),
	.arg_data (set_ppc_fields_arg_data)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (set_ppc_fields_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
set_ppc_fields_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_start"); $finish; end
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
set_ppc_fields_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
set_ppc_fields_arg_v <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_arg_v"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
set_ppc_fields_arg_p <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_arg_p"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
set_ppc_fields_arg_data <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to set_ppc_fields_arg_data"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
begin
set_ppc_fields_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
begin
set_ppc_fields_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
set_ppc_fields_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
set_ppc_fields_finish_final = set_ppc_fields_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = set_ppc_fields_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = set_ppc_fields_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = set_ppc_fields_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = set_ppc_fields_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = set_ppc_fields_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = set_ppc_fields_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = set_ppc_fields_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = set_ppc_fields_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = set_ppc_fields_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = set_ppc_fields_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = set_ppc_fields_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = set_ppc_fields_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = set_ppc_fields_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = set_ppc_fields_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = set_ppc_fields_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = set_ppc_fields_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = set_ppc_fields_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = set_ppc_fields_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = set_ppc_fields_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @set_ppc_fields(%struct.TYPE_7__* undef, %struct.TYPE_8__* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = set_ppc_fields_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
