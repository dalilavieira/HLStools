//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:13 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module getPixelColorRGBA16
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_r,
	arg_g,
	arg_b,
	arg_a,
	arg_in,
	arg_i,
	arg_mode
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_4_4 = 5'd4;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_4_5 = 5'd5;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_4_6 = 5'd6;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_7 = 5'd7;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_8 = 5'd8;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_9 = 5'd9;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_10 = 5'd10;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_11 = 5'd11;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_12 = 5'd12;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_13 = 5'd13;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_8_14 = 5'd14;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_22_15 = 5'd15;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_22_16 = 5'd16;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_22_17 = 5'd17;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_22_18 = 5'd18;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_32_19 = 5'd19;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_32_20 = 5'd20;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_33_21 = 5'd21;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_33_22 = 5'd22;
parameter [4:0] LEGUP_F_getPixelColorRGBA16_BB_34_23 = 5'd23;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_r;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_g;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
input [31:0] arg_i;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_mode;
reg [4:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_0_1_reg;
reg [31:0] getPixelColorRGBA16_0_2;
reg [31:0] getPixelColorRGBA16_0_2_reg;
reg  getPixelColorRGBA16_0_3;
reg  getPixelColorRGBA16_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_4_5_reg;
reg [31:0] getPixelColorRGBA16_4_6;
reg [31:0] getPixelColorRGBA16_4_6_reg;
reg  getPixelColorRGBA16_4_7;
reg  getPixelColorRGBA16_4_7_reg;
reg [31:0] getPixelColorRGBA16_8_9;
reg [31:0] getPixelColorRGBA16_8_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_10_reg;
reg [7:0] getPixelColorRGBA16_8_11;
reg [7:0] getPixelColorRGBA16_8_11_reg;
reg [15:0] getPixelColorRGBA16_8_12;
reg [15:0] getPixelColorRGBA16_8_12_reg;
reg [15:0] getPixelColorRGBA16_8_13;
reg [15:0] getPixelColorRGBA16_8_13_reg;
reg [31:0] getPixelColorRGBA16_8_14;
reg [31:0] getPixelColorRGBA16_8_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_15_reg;
reg [7:0] getPixelColorRGBA16_8_16;
reg [7:0] getPixelColorRGBA16_8_16_reg;
reg [15:0] getPixelColorRGBA16_8_17;
reg [15:0] getPixelColorRGBA16_8_17_reg;
reg [15:0] getPixelColorRGBA16_8_18;
reg [15:0] getPixelColorRGBA16_8_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_8_19_reg;
reg [31:0] getPixelColorRGBA16_8_20;
reg [31:0] getPixelColorRGBA16_8_20_reg;
reg  getPixelColorRGBA16_8_21;
reg  getPixelColorRGBA16_8_21_reg;
reg [7:0] getPixelColorRGBA16_22_23;
reg [7:0] getPixelColorRGBA16_22_23_reg;
reg [31:0] getPixelColorRGBA16_22_24;
reg [31:0] getPixelColorRGBA16_22_24_reg;
reg [31:0] getPixelColorRGBA16_22_25;
reg [31:0] getPixelColorRGBA16_22_25_reg;
reg [7:0] getPixelColorRGBA16_22_26;
reg [7:0] getPixelColorRGBA16_22_26_reg;
reg [31:0] getPixelColorRGBA16_22_27;
reg [31:0] getPixelColorRGBA16_22_27_reg;
reg [31:0] getPixelColorRGBA16_22_28;
reg [31:0] getPixelColorRGBA16_22_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_22_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] getPixelColorRGBA16_22_29_reg;
reg [31:0] getPixelColorRGBA16_22_30;
reg [31:0] getPixelColorRGBA16_22_30_reg;
reg  getPixelColorRGBA16_22_31;
reg  getPixelColorRGBA16_22_31_reg;
reg [31:0] getPixelColorRGBA16_34__0;
reg [31:0] getPixelColorRGBA16_34__0_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_0_3 == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_0_3 == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_34_23;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_34_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_5;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_5;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_6;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_4_6;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_4_7 == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_4_7 == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_34_23;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_34_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_12;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_12;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_13;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_13;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_14;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_8_14;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_14) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_8_21 == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_33_21;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_33_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_14) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_8_21 == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_15;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_15;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_16;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_16;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_18;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_22_18;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_18) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_22_31 == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_32_19;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_32_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_18) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_22_31 == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_33_21;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_33_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_32_19;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_32_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_34_23;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_34_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_33_21;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_33_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_33_22;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_33_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_33_22;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_33_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_34_23;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_34_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_34_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_getPixelColorRGBA16_BB_34_23;
if (reset == 1'b0 && ^(LEGUP_F_getPixelColorRGBA16_BB_34_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_34_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 0*/
begin
getPixelColorRGBA16_0_1 = arg_mode;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1))
begin
getPixelColorRGBA16_0_1_reg <= getPixelColorRGBA16_0_1;
if (reset == 1'b0 && ^(getPixelColorRGBA16_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_0_1_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
getPixelColorRGBA16_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3))
begin
getPixelColorRGBA16_0_2_reg <= getPixelColorRGBA16_0_2;
if (reset == 1'b0 && ^(getPixelColorRGBA16_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_0_2_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %0*/
/*   %3 = icmp eq i32 %2, 16*/
begin
getPixelColorRGBA16_0_3 = (getPixelColorRGBA16_0_2 == 32'd16);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %0*/
/*   %3 = icmp eq i32 %2, 16*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3))
begin
getPixelColorRGBA16_0_3_reg <= getPixelColorRGBA16_0_3;
if (reset == 1'b0 && ^(getPixelColorRGBA16_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_0_3_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %4*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 1*/
begin
getPixelColorRGBA16_4_5 = (arg_mode + 4);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %4*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4))
begin
getPixelColorRGBA16_4_5_reg <= getPixelColorRGBA16_4_5;
if (reset == 1'b0 && ^(getPixelColorRGBA16_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_4_5_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
getPixelColorRGBA16_4_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6))
begin
getPixelColorRGBA16_4_6_reg <= getPixelColorRGBA16_4_6;
if (reset == 1'b0 && ^(getPixelColorRGBA16_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_4_6_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %4*/
/*   %7 = icmp eq i32 %6, 0*/
begin
getPixelColorRGBA16_4_7 = (getPixelColorRGBA16_4_6 == 32'd0);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %4*/
/*   %7 = icmp eq i32 %6, 0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6))
begin
getPixelColorRGBA16_4_7_reg <= getPixelColorRGBA16_4_7;
if (reset == 1'b0 && ^(getPixelColorRGBA16_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_4_7_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %9 = shl i32 %i, 1*/
begin
getPixelColorRGBA16_8_9 = (arg_i <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %9 = shl i32 %i, 1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
getPixelColorRGBA16_8_9_reg <= getPixelColorRGBA16_8_9;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_9_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %10 = getelementptr inbounds i8* %in, i32 %9*/
begin
getPixelColorRGBA16_8_10 = (arg_in + (1 * getPixelColorRGBA16_8_9));
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %10 = getelementptr inbounds i8* %in, i32 %9*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
getPixelColorRGBA16_8_10_reg <= getPixelColorRGBA16_8_10;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_10_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
begin
getPixelColorRGBA16_8_11 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_11_reg <= getPixelColorRGBA16_8_11;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_11_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %12 = zext i8 %11 to i16*/
begin
getPixelColorRGBA16_8_12 = getPixelColorRGBA16_8_11;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %12 = zext i8 %11 to i16*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_12_reg <= getPixelColorRGBA16_8_12;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_12_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %13 = shl nuw i16 %12, 8*/
begin
getPixelColorRGBA16_8_13 = (getPixelColorRGBA16_8_12 <<< (16'd8 % 16'd16));
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %13 = shl nuw i16 %12, 8*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_13_reg <= getPixelColorRGBA16_8_13;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_13_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %14 = or i32 %9, 1*/
begin
getPixelColorRGBA16_8_14 = (getPixelColorRGBA16_8_9 | 32'd1);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %14 = or i32 %9, 1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
getPixelColorRGBA16_8_14_reg <= getPixelColorRGBA16_8_14;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_14_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %15 = getelementptr inbounds i8* %in, i32 %14*/
begin
getPixelColorRGBA16_8_15 = (arg_in + (1 * getPixelColorRGBA16_8_14));
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %15 = getelementptr inbounds i8* %in, i32 %14*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
getPixelColorRGBA16_8_15_reg <= getPixelColorRGBA16_8_15;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_15_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
begin
getPixelColorRGBA16_8_16 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_16_reg <= getPixelColorRGBA16_8_16;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_16_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %17 = zext i8 %16 to i16*/
begin
getPixelColorRGBA16_8_17 = getPixelColorRGBA16_8_16;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %17 = zext i8 %16 to i16*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_17_reg <= getPixelColorRGBA16_8_17;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_17_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %18 = or i16 %13, %17*/
begin
getPixelColorRGBA16_8_18 = (getPixelColorRGBA16_8_13 | getPixelColorRGBA16_8_17);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %18 = or i16 %13, %17*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
getPixelColorRGBA16_8_18_reg <= getPixelColorRGBA16_8_18;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_18_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %19 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 5*/
begin
getPixelColorRGBA16_8_19 = (arg_mode + 20);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %19 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 5*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
getPixelColorRGBA16_8_19_reg <= getPixelColorRGBA16_8_19;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_19_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
begin
getPixelColorRGBA16_8_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_14))
begin
getPixelColorRGBA16_8_20_reg <= getPixelColorRGBA16_8_20;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_20_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %8*/
/*   %21 = icmp eq i32 %20, 0*/
begin
getPixelColorRGBA16_8_21 = (getPixelColorRGBA16_8_20 == 32'd0);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %8*/
/*   %21 = icmp eq i32 %20, 0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_14))
begin
getPixelColorRGBA16_8_21_reg <= getPixelColorRGBA16_8_21;
if (reset == 1'b0 && ^(getPixelColorRGBA16_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_8_21_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
begin
getPixelColorRGBA16_22_23 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_23_reg <= getPixelColorRGBA16_22_23;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_23_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %24 = zext i8 %23 to i32*/
begin
getPixelColorRGBA16_22_24 = getPixelColorRGBA16_22_23;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %24 = zext i8 %23 to i32*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_24_reg <= getPixelColorRGBA16_22_24;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_24_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %25 = shl nuw nsw i32 %24, 8*/
begin
getPixelColorRGBA16_22_25 = (getPixelColorRGBA16_22_24 <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %25 = shl nuw nsw i32 %24, 8*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_25_reg <= getPixelColorRGBA16_22_25;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_25_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
begin
getPixelColorRGBA16_22_26 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_26_reg <= getPixelColorRGBA16_22_26;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_26_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %27 = zext i8 %26 to i32*/
begin
getPixelColorRGBA16_22_27 = getPixelColorRGBA16_22_26;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %27 = zext i8 %26 to i32*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_27_reg <= getPixelColorRGBA16_22_27;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_27_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %28 = or i32 %25, %27*/
begin
getPixelColorRGBA16_22_28 = (getPixelColorRGBA16_22_25 | getPixelColorRGBA16_22_27);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %28 = or i32 %25, %27*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_17))
begin
getPixelColorRGBA16_22_28_reg <= getPixelColorRGBA16_22_28;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_28_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %29 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 2*/
begin
getPixelColorRGBA16_22_29 = (arg_mode + 8);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %29 = getelementptr inbounds %struct.TYPE_3__* %mode, i32 0, i32 2*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
getPixelColorRGBA16_22_29_reg <= getPixelColorRGBA16_22_29;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_29_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
begin
getPixelColorRGBA16_22_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_18))
begin
getPixelColorRGBA16_22_30_reg <= getPixelColorRGBA16_22_30;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_30_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %22*/
/*   %31 = icmp eq i32 %28, %30*/
begin
getPixelColorRGBA16_22_31 = (getPixelColorRGBA16_22_28_reg == getPixelColorRGBA16_22_30);
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %22*/
/*   %31 = icmp eq i32 %28, %30*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_18))
begin
getPixelColorRGBA16_22_31_reg <= getPixelColorRGBA16_22_31;
if (reset == 1'b0 && ^(getPixelColorRGBA16_22_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_22_31_reg"); $finish; end
end
end
always @(*) begin
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_0_3 == 1'd0)))
begin
getPixelColorRGBA16_34__0 = 32'd85;
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
else if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_4_7 == 1'd0)))
begin
getPixelColorRGBA16_34__0 = 32'd85;
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
else if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
getPixelColorRGBA16_34__0 = 32'd0;
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
else /* if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_22) & (memory_controller_waitrequest == 1'd0))) */
begin
getPixelColorRGBA16_34__0 = 32'd0;
end
end
always @(posedge clk) begin
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_0_3 == 1'd0)))
begin
getPixelColorRGBA16_34__0_reg <= getPixelColorRGBA16_34__0;
if (reset == 1'b0 && ^(getPixelColorRGBA16_34__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_34__0_reg"); $finish; end
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
if ((((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (getPixelColorRGBA16_4_7 == 1'd0)))
begin
getPixelColorRGBA16_34__0_reg <= getPixelColorRGBA16_34__0;
if (reset == 1'b0 && ^(getPixelColorRGBA16_34__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_34__0_reg"); $finish; end
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
getPixelColorRGBA16_34__0_reg <= getPixelColorRGBA16_34__0;
if (reset == 1'b0 && ^(getPixelColorRGBA16_34__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_34__0_reg"); $finish; end
end
/* getPixelColorRGBA16: %34*/
/*   %.0 = phi i32 [ 85, %0 ], [ 0, %32 ], [ 0, %33 ], [ 85, %4 ]*/
if (((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_22) & (memory_controller_waitrequest == 1'd0)))
begin
getPixelColorRGBA16_34__0_reg <= getPixelColorRGBA16_34__0;
if (reset == 1'b0 && ^(getPixelColorRGBA16_34__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to getPixelColorRGBA16_34__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* getPixelColorRGBA16: %34*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_34_23))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4))
begin
memory_controller_enable_a = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_enable_a = 1'd1;
end
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_enable_a = 1'd1;
end
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1))
begin
memory_controller_address_a = getPixelColorRGBA16_0_1;
end
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4))
begin
memory_controller_address_a = getPixelColorRGBA16_4_5;
end
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_address_a = getPixelColorRGBA16_8_10;
end
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_address_a = getPixelColorRGBA16_8_10_reg;
end
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16))
begin
memory_controller_address_a = getPixelColorRGBA16_22_29_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* getPixelColorRGBA16: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* getPixelColorRGBA16: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_4_4))
begin
memory_controller_size_a = 2'd2;
end
/* getPixelColorRGBA16: %8*/
/*   %11 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_size_a = 2'd0;
end
/* getPixelColorRGBA16: %22*/
/*   %23 = load i8* %10, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_size_a = 2'd0;
end
/* getPixelColorRGBA16: %22*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_16))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %b, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %g, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %r, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %32*/
/*   store i16 0, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19))
begin
memory_controller_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %33*/
/*   store i16 -1, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_address_b = getPixelColorRGBA16_8_15;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %b, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
memory_controller_address_b = arg_b;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %g, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10))
begin
memory_controller_address_b = arg_g;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %r, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11))
begin
memory_controller_address_b = arg_r;
end
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12))
begin
memory_controller_address_b = getPixelColorRGBA16_8_19_reg;
end
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_address_b = getPixelColorRGBA16_8_15_reg;
end
/* getPixelColorRGBA16: %32*/
/*   store i16 0, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19))
begin
memory_controller_address_b = arg_a;
end
/* getPixelColorRGBA16: %33*/
/*   store i16 -1, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21))
begin
memory_controller_address_b = arg_a;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %b, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %g, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10))
begin
memory_controller_write_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %r, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* getPixelColorRGBA16: %32*/
/*   store i16 0, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* getPixelColorRGBA16: %33*/
/*   store i16 -1, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %b, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
memory_controller_in_b = getPixelColorRGBA16_8_18;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %g, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10))
begin
memory_controller_in_b = getPixelColorRGBA16_8_18_reg;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %r, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11))
begin
memory_controller_in_b = getPixelColorRGBA16_8_18_reg;
end
/* getPixelColorRGBA16: %32*/
/*   store i16 0, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19))
begin
memory_controller_in_b = 16'd0;
end
/* getPixelColorRGBA16: %33*/
/*   store i16 -1, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21))
begin
memory_controller_in_b = -16'd1;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* getPixelColorRGBA16: %8*/
/*   %16 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_7))
begin
memory_controller_size_b = 2'd0;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %b, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_9))
begin
memory_controller_size_b = 2'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %g, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_10))
begin
memory_controller_size_b = 2'd1;
end
/* getPixelColorRGBA16: %8*/
/*   store i16 %18, i16* %r, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_11))
begin
memory_controller_size_b = 2'd1;
end
/* getPixelColorRGBA16: %8*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_8_12))
begin
memory_controller_size_b = 2'd2;
end
/* getPixelColorRGBA16: %22*/
/*   %26 = load i8* %15, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_22_15))
begin
memory_controller_size_b = 2'd0;
end
/* getPixelColorRGBA16: %32*/
/*   store i16 0, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_32_19))
begin
memory_controller_size_b = 2'd1;
end
/* getPixelColorRGBA16: %33*/
/*   store i16 -1, i16* %a, align 2, !tbaa !3*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_33_21))
begin
memory_controller_size_b = 2'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* getPixelColorRGBA16: %34*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_getPixelColorRGBA16_BB_34_23))
begin
return_val <= getPixelColorRGBA16_34__0_reg;
if (reset == 1'b0 && ^(getPixelColorRGBA16_34__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_getPixelColorRGBA16_exit_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_getPixelColorRGBA16_exit_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  llvm_trap_start;
wire  llvm_trap_finish;
reg  llvm_trap_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


llvm_trap llvm_trap_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (llvm_trap_start),
	.finish (llvm_trap_finish)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_getPixelColorRGBA16_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_getPixelColorRGBA16_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_getPixelColorRGBA16_exit_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_getPixelColorRGBA16_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_getPixelColorRGBA16_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_getPixelColorRGBA16_exit_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_getPixelColorRGBA16_exit_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_getPixelColorRGBA16_exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_getPixelColorRGBA16_exit_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_getPixelColorRGBA16_exit_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_getPixelColorRGBA16_exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_getPixelColorRGBA16_exit_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %getPixelColorRGBA16.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_F_main_BB_getPixelColorRGBA16_exit_1))
begin
llvm_trap_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
/* main: %getPixelColorRGBA16.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
llvm_trap_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
end
always @(*) begin
llvm_trap_finish_final = llvm_trap_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %getPixelColorRGBA16.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
