//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:26 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module avc_tuner_tuneqpsk
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_fdtv,
	arg_p
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_40 = 8'd40;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_41 = 8'd41;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_42 = 8'd42;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_43 = 8'd43;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_44 = 8'd44;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_45 = 8'd45;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_46 = 8'd46;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_47 = 8'd47;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_48 = 8'd48;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_49 = 8'd49;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_50 = 8'd50;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_51 = 8'd51;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_52 = 8'd52;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_53 = 8'd53;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_54 = 8'd54;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_55 = 8'd55;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_56 = 8'd56;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_57 = 8'd57;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_58 = 8'd58;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_59 = 8'd59;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_60 = 8'd60;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_61 = 8'd61;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_62 = 8'd62;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_63 = 8'd63;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_64 = 8'd64;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_65 = 8'd65;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_66 = 8'd66;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_67 = 8'd67;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_68 = 8'd68;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_69 = 8'd69;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_70 = 8'd70;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_71 = 8'd71;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_72 = 8'd72;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_73 = 8'd73;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_74 = 8'd74;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_75 = 8'd75;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_76 = 8'd76;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_77 = 8'd77;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_78 = 8'd78;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_79 = 8'd79;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_80 = 8'd80;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_81 = 8'd81;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_82 = 8'd82;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_83 = 8'd83;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_84 = 8'd84;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_85 = 8'd85;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_86 = 8'd86;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_87 = 8'd87;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_88 = 8'd88;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_89 = 8'd89;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_90 = 8'd90;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_0_91 = 8'd91;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_37_92 = 8'd92;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_37_93 = 8'd93;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_39_94 = 8'd94;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_39_95 = 8'd95;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_41_96 = 8'd96;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_41_97 = 8'd97;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_43_98 = 8'd98;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_43_99 = 8'd99;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_45_100 = 8'd100;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_45_101 = 8'd101;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_47_102 = 8'd102;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_47_103 = 8'd103;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_49_104 = 8'd104;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_49_105 = 8'd105;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_49_106 = 8'd106;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_53_107 = 8'd107;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_53_108 = 8'd108;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_55_109 = 8'd109;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_58_110 = 8'd110;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_58_111 = 8'd111;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_59_112 = 8'd112;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_59_113 = 8'd113;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_60_114 = 8'd114;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_60_115 = 8'd115;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_60_116 = 8'd116;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_64_117 = 8'd117;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_64_118 = 8'd118;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_66_119 = 8'd119;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_69_120 = 8'd120;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_69_121 = 8'd121;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_70_122 = 8'd122;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_70_123 = 8'd123;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_71_124 = 8'd124;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_71_125 = 8'd125;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_71_126 = 8'd126;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_74_127 = 8'd127;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_74_128 = 8'd128;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_74_129 = 8'd129;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_78_130 = 8'd130;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_78_131 = 8'd131;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_78_132 = 8'd132;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_81_133 = 8'd133;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_81_134 = 8'd134;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_81_135 = 8'd135;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_81_136 = 8'd136;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_84_137 = 8'd137;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_84_138 = 8'd138;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_84_139 = 8'd139;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_84_140 = 8'd140;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_87_141 = 8'd141;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_87_142 = 8'd142;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_87_143 = 8'd143;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_87_144 = 8'd144;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_90_145 = 8'd145;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_90_146 = 8'd146;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_90_147 = 8'd147;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_90_148 = 8'd148;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_93_149 = 8'd149;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_93_150 = 8'd150;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_93_151 = 8'd151;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_97_152 = 8'd152;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_97_153 = 8'd153;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_99_154 = 8'd154;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_99_155 = 8'd155;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_101_156 = 8'd156;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_101_157 = 8'd157;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_103_158 = 8'd158;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_103_159 = 8'd159;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_105_160 = 8'd160;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_105_161 = 8'd161;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_105_162 = 8'd162;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_108_163 = 8'd163;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_108_164 = 8'd164;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_110_165 = 8'd165;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_110_166 = 8'd166;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_112_167 = 8'd167;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_112_168 = 8'd168;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_114_169 = 8'd169;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_114_170 = 8'd170;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_114_171 = 8'd171;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_114_172 = 8'd172;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_114_173 = 8'd173;
parameter [7:0] LEGUP_F_avc_tuner_tuneqpsk_BB_119_174 = 8'd174;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_fdtv;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_10_reg;
reg [31:0] avc_tuner_tuneqpsk_0_11;
reg [31:0] avc_tuner_tuneqpsk_0_11_reg;
reg [31:0] avc_tuner_tuneqpsk_0_12;
reg [31:0] avc_tuner_tuneqpsk_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_13_reg;
reg [31:0] avc_tuner_tuneqpsk_0_14;
reg [31:0] avc_tuner_tuneqpsk_0_14_reg;
reg [31:0] avc_tuner_tuneqpsk_0_15;
reg [31:0] avc_tuner_tuneqpsk_0_15_reg;
reg [31:0] avc_tuner_tuneqpsk_0_16;
reg [31:0] avc_tuner_tuneqpsk_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_17_reg;
reg [31:0] avc_tuner_tuneqpsk_0_18;
reg [31:0] avc_tuner_tuneqpsk_0_18_reg;
reg [31:0] avc_tuner_tuneqpsk_0_19;
reg [31:0] avc_tuner_tuneqpsk_0_19_reg;
reg [31:0] avc_tuner_tuneqpsk_0_20;
reg [31:0] avc_tuner_tuneqpsk_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_21_reg;
reg [31:0] avc_tuner_tuneqpsk_0_22;
reg [31:0] avc_tuner_tuneqpsk_0_22_reg;
reg [31:0] avc_tuner_tuneqpsk_0_23;
reg [31:0] avc_tuner_tuneqpsk_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_25_reg;
reg [31:0] avc_tuner_tuneqpsk_0_26;
reg [31:0] avc_tuner_tuneqpsk_0_26_reg;
reg [31:0] avc_tuner_tuneqpsk_0_27;
reg [31:0] avc_tuner_tuneqpsk_0_27_reg;
reg [31:0] avc_tuner_tuneqpsk_0_28;
reg [31:0] avc_tuner_tuneqpsk_0_28_reg;
reg [31:0] avc_tuner_tuneqpsk_0_29;
reg [31:0] avc_tuner_tuneqpsk_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_30_reg;
reg [31:0] avc_tuner_tuneqpsk_0_31;
reg [31:0] avc_tuner_tuneqpsk_0_31_reg;
reg [31:0] avc_tuner_tuneqpsk_0_32;
reg [31:0] avc_tuner_tuneqpsk_0_32_reg;
reg [31:0] avc_tuner_tuneqpsk_0_33;
reg [31:0] avc_tuner_tuneqpsk_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_0_35_reg;
reg [31:0] avc_tuner_tuneqpsk_0_36;
reg [31:0] avc_tuner_tuneqpsk_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_37_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_37_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_39_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_39_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_41_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_41_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_43_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_43_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_45_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_45_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_47_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_47_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_49_50_reg;
reg [31:0] avc_tuner_tuneqpsk_49_51;
reg [31:0] avc_tuner_tuneqpsk_49_51_reg;
reg  avc_tuner_tuneqpsk_49_52;
reg  avc_tuner_tuneqpsk_49_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_53_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_53_54_reg;
reg  avc_tuner_tuneqpsk_55_56;
reg  avc_tuner_tuneqpsk_55_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_55_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_55_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_60_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_60_61_reg;
reg [31:0] avc_tuner_tuneqpsk_60_62;
reg [31:0] avc_tuner_tuneqpsk_60_62_reg;
reg  avc_tuner_tuneqpsk_60_63;
reg  avc_tuner_tuneqpsk_60_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_64_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_64_65_reg;
reg  avc_tuner_tuneqpsk_66_67;
reg  avc_tuner_tuneqpsk_66_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_66_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_66_68_reg;
reg [31:0] avc_tuner_tuneqpsk_71_72;
reg [31:0] avc_tuner_tuneqpsk_71_72_reg;
reg  avc_tuner_tuneqpsk_71_73;
reg  avc_tuner_tuneqpsk_71_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_74_75_reg;
reg [31:0] avc_tuner_tuneqpsk_74_76;
reg [31:0] avc_tuner_tuneqpsk_74_76_reg;
reg  avc_tuner_tuneqpsk_74_77;
reg  avc_tuner_tuneqpsk_74_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_78_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_78_79_reg;
reg [31:0] avc_tuner_tuneqpsk_78_80;
reg [31:0] avc_tuner_tuneqpsk_78_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_81_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_81_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_81_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_81_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_84_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_84_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_84_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_84_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_87_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_87_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_87_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_87_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_90_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_90_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_90_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_90_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_93_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_93_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_93_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_93_95_reg;
reg [31:0] avc_tuner_tuneqpsk_93_96;
reg [31:0] avc_tuner_tuneqpsk_93_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_97_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_97_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_99_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_99_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_101_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_101_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_103_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_103_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_105_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_105_106_reg;
reg [31:0] avc_tuner_tuneqpsk_105_107;
reg [31:0] avc_tuner_tuneqpsk_105_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_108_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_108_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_110_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_110_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_112_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_112_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_114_118_reg;
reg [31:0] avc_tuner_tuneqpsk_119__0;
reg [31:0] avc_tuner_tuneqpsk_119__0_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] avc_tuner_tuneqpsk_signed_divide_32_0_op0;
reg [31:0] avc_tuner_tuneqpsk_signed_divide_32_0_op1;
wire [31:0] lpm_divide_avc_tuner_tuneqpsk_0_27_temp_out;
wire [31:0] avc_tuner_tuneqpsk_0_27_unused;
reg  lpm_divide_avc_tuner_tuneqpsk_0_27_en;
reg [31:0] lpm_divide_avc_tuner_tuneqpsk_0_27_out;
reg [31:0] avc_tuner_tuneqpsk_signed_divide_32_0;
reg  lpm_divide_avc_tuner_tuneqpsk_0_32_en;

/*   %27 = sdiv i32 %26, 1000*/
lpm_divide lpm_divide_avc_tuner_tuneqpsk_0_27 (
	.quotient (lpm_divide_avc_tuner_tuneqpsk_0_27_temp_out),
	.remain (avc_tuner_tuneqpsk_0_27_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_avc_tuner_tuneqpsk_0_27_en),
	.numer (avc_tuner_tuneqpsk_signed_divide_32_0_op0),
	.denom (avc_tuner_tuneqpsk_signed_divide_32_0_op1)
);

defparam
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_pipeline = 32,
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_widthn = 32,
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_widthd = 32,
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_drepresentation = "SIGNED",
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_nrepresentation = "SIGNED",
	lpm_divide_avc_tuner_tuneqpsk_0_27.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 == 32'd145)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_37_92;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_37_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 == 32'd144)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_39_94;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_39_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 == 32'd143)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_41_96;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_41_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 == 32'd141)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_43_98;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_43_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 == 32'd140)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_45_100;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_45_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_0_36 != 32'd145)) & (avc_tuner_tuneqpsk_0_36 != 32'd144)) & (avc_tuner_tuneqpsk_0_36 != 32'd143)) & (avc_tuner_tuneqpsk_0_36 != 32'd141)) & (avc_tuner_tuneqpsk_0_36 != 32'd140)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_47_102;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_47_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_37_92;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_37_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_37_93;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_37_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_37_93;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_37_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_39_94;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_39_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_39_95;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_39_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_39_95;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_39_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_41_96;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_41_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_41_97;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_41_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_41_97;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_41_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_43_98;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_43_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_43_99;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_43_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_43_99;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_43_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_45_100;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_45_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_45_101;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_45_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_45_101;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_45_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_47_102;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_47_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_47_103;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_47_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_47_103;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_47_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_104;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_105;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_105;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_106;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_49_106;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_49_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_106) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_49_52 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_53_107;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_53_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_106) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_49_52 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_55_109;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_55_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_53_107;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_53_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_53_108;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_53_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_53_108;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_53_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_114;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_55_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_55_109;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_55_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_55_109) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_55_56 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_58_110;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_58_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_55_109) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_55_56 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_59_112;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_59_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_58_110;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_58_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_58_111;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_58_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_58_111;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_58_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_114;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_59_112;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_59_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_59_113;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_59_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_59_113;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_59_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_114;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_114;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_115;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_115;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_116;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_60_116;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_60_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_116) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_60_63 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_64_117;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_64_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_116) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_60_63 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_66_119;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_66_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_64_117;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_64_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_64_118;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_64_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_64_118;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_64_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_124;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_66_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_66_119;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_66_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_66_119) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_66_67 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_69_120;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_69_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_66_119) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_66_67 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_70_122;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_70_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_69_120;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_69_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_69_121;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_69_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_69_121;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_69_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_124;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_70_122;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_70_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_70_123;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_70_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_70_123;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_70_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_124;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_124;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_125;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_125;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_126;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_71_126;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_71_73 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_127;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_71_73 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_127;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_128;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_128;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_129;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_74_129;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_74_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_129) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_74_77 == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_130;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_129) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_74_77 == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_169;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_130;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_131;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_131;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_132;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_78_132;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_78_80 == 32'd133)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_133;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_78_80 == 32'd132)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_137;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_78_80 == 32'd134)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_141;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_78_80 != 32'd133)) & (avc_tuner_tuneqpsk_78_80 != 32'd132)) & (avc_tuner_tuneqpsk_78_80 != 32'd134)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_145;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_133;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_134;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_134;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_135;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_135;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_136;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_81_136;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_149;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_137;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_138;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_138;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_139;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_139;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_140;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_84_140;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_149;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_141;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_142;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_142;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_143;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_143;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_144;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_87_144;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_149;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_145;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_146;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_146;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_147;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_147;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_148;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_90_148;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_149;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_149;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_150;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_150;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_151;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_93_151;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_93_96 == 32'd129)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_97_152;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_97_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_93_96 == 32'd131)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_99_154;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_99_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_93_96 == 32'd130)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_101_156;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_101_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_93_96 != 32'd129)) & (avc_tuner_tuneqpsk_93_96 != 32'd131)) & (avc_tuner_tuneqpsk_93_96 != 32'd130)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_103_158;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_103_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_97_152;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_97_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_97_153;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_97_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_97_153;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_97_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_160;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_99_154;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_99_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_99_155;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_99_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_99_155;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_99_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_160;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_101_156;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_101_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_101_157;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_101_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_101_157;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_101_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_160;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_103_158;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_103_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_103_159;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_103_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_103_159;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_103_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_160;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_160;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_161;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_161;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_162;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_105_162;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 == 32'd137)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_108_163;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_108_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 == 32'd136)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_110_165;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_110_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 == 32'd135)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_112_167;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_112_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 != 32'd137)) & (avc_tuner_tuneqpsk_105_107 != 32'd136)) & (avc_tuner_tuneqpsk_105_107 != 32'd135)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_108_163;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_108_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_108_164;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_108_164;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_110_165;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_110_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_110_166;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_110_166;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_112_167;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_112_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_112_168;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_112_168;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_169;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_170;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_170;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_171;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_171;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_172;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_172;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_173;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_114_173;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_avc_tuner_tuneqpsk_BB_119_174;
if (reset == 1'b0 && ^(LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_119_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %1 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 4*/
begin
avc_tuner_tuneqpsk_0_1 = (arg_fdtv + 28);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %1 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 4*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
avc_tuner_tuneqpsk_0_1_reg <= avc_tuner_tuneqpsk_0_1;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_1_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
avc_tuner_tuneqpsk_0_2_reg <= avc_tuner_tuneqpsk_0_2;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_2_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %3 = getelementptr inbounds i32* %2, i32 1*/
begin
avc_tuner_tuneqpsk_0_3 = (avc_tuner_tuneqpsk_0_2 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %3 = getelementptr inbounds i32* %2, i32 1*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
avc_tuner_tuneqpsk_0_3_reg <= avc_tuner_tuneqpsk_0_3;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_3_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %4 = bitcast i32* %2 to i32***/
begin
avc_tuner_tuneqpsk_0_4 = avc_tuner_tuneqpsk_0_2;
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %4 = bitcast i32* %2 to i32***/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
avc_tuner_tuneqpsk_0_4_reg <= avc_tuner_tuneqpsk_0_4;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_4_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_0_5 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_5_reg <= avc_tuner_tuneqpsk_0_5;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_5_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %6 = getelementptr inbounds i32* %5, i32 1*/
begin
avc_tuner_tuneqpsk_0_6 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %6 = getelementptr inbounds i32* %5, i32 1*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_6_reg <= avc_tuner_tuneqpsk_0_6;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_6_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %7 = getelementptr inbounds i32* %5, i32 2*/
begin
avc_tuner_tuneqpsk_0_7 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %7 = getelementptr inbounds i32* %5, i32 2*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_7_reg <= avc_tuner_tuneqpsk_0_7;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_7_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %8 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 0*/
begin
avc_tuner_tuneqpsk_0_8 = arg_fdtv;
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %8 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
avc_tuner_tuneqpsk_0_8_reg <= avc_tuner_tuneqpsk_0_8;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_8_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %9 = getelementptr inbounds i32* %5, i32 3*/
begin
avc_tuner_tuneqpsk_0_9 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %9 = getelementptr inbounds i32* %5, i32 3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_9_reg <= avc_tuner_tuneqpsk_0_9;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_9_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %10 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 0*/
begin
avc_tuner_tuneqpsk_0_10 = arg_p;
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %10 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
avc_tuner_tuneqpsk_0_10_reg <= avc_tuner_tuneqpsk_0_10;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_10_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
avc_tuner_tuneqpsk_0_11_reg <= avc_tuner_tuneqpsk_0_11;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_11_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %12 = lshr i32 %11, 24*/
begin
avc_tuner_tuneqpsk_0_12 = (avc_tuner_tuneqpsk_0_11 >>> (32'd24 % 32));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %12 = lshr i32 %11, 24*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
avc_tuner_tuneqpsk_0_12_reg <= avc_tuner_tuneqpsk_0_12;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_12_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %13 = getelementptr inbounds i32* %5, i32 4*/
begin
avc_tuner_tuneqpsk_0_13 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %13 = getelementptr inbounds i32* %5, i32 4*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_13_reg <= avc_tuner_tuneqpsk_0_13;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_13_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_14 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
avc_tuner_tuneqpsk_0_14_reg <= avc_tuner_tuneqpsk_0_14;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_14_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %15 = lshr i32 %14, 16*/
begin
avc_tuner_tuneqpsk_0_15 = (avc_tuner_tuneqpsk_0_14 >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %15 = lshr i32 %14, 16*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
avc_tuner_tuneqpsk_0_15_reg <= avc_tuner_tuneqpsk_0_15;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_15_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %16 = and i32 %15, 255*/
begin
avc_tuner_tuneqpsk_0_16 = (avc_tuner_tuneqpsk_0_15 & 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %16 = and i32 %15, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
avc_tuner_tuneqpsk_0_16_reg <= avc_tuner_tuneqpsk_0_16;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_16_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %17 = getelementptr inbounds i32* %5, i32 5*/
begin
avc_tuner_tuneqpsk_0_17 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %17 = getelementptr inbounds i32* %5, i32 5*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_17_reg <= avc_tuner_tuneqpsk_0_17;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_17_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_18 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
avc_tuner_tuneqpsk_0_18_reg <= avc_tuner_tuneqpsk_0_18;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_18_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %19 = lshr i32 %18, 8*/
begin
avc_tuner_tuneqpsk_0_19 = (avc_tuner_tuneqpsk_0_18 >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %19 = lshr i32 %18, 8*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
avc_tuner_tuneqpsk_0_19_reg <= avc_tuner_tuneqpsk_0_19;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_19_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %20 = and i32 %19, 255*/
begin
avc_tuner_tuneqpsk_0_20 = (avc_tuner_tuneqpsk_0_19 & 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %20 = and i32 %19, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
avc_tuner_tuneqpsk_0_20_reg <= avc_tuner_tuneqpsk_0_20;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_20_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %21 = getelementptr inbounds i32* %5, i32 6*/
begin
avc_tuner_tuneqpsk_0_21 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %21 = getelementptr inbounds i32* %5, i32 6*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_21_reg <= avc_tuner_tuneqpsk_0_21;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_21_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
avc_tuner_tuneqpsk_0_22_reg <= avc_tuner_tuneqpsk_0_22;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_22_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %23 = and i32 %22, 255*/
begin
avc_tuner_tuneqpsk_0_23 = (avc_tuner_tuneqpsk_0_22 & 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %23 = and i32 %22, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
avc_tuner_tuneqpsk_0_23_reg <= avc_tuner_tuneqpsk_0_23;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_23_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %24 = getelementptr inbounds i32* %5, i32 7*/
begin
avc_tuner_tuneqpsk_0_24 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %24 = getelementptr inbounds i32* %5, i32 7*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_24_reg <= avc_tuner_tuneqpsk_0_24;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_24_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %25 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 1*/
begin
avc_tuner_tuneqpsk_0_25 = (arg_p + 4);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %25 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 1*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
avc_tuner_tuneqpsk_0_25_reg <= avc_tuner_tuneqpsk_0_25;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_25_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_21))
begin
avc_tuner_tuneqpsk_0_26_reg <= avc_tuner_tuneqpsk_0_26;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_26_reg"); $finish; end
end
end
always @(*) begin
avc_tuner_tuneqpsk_0_27 = avc_tuner_tuneqpsk_signed_divide_32_0;
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %27 = sdiv i32 %26, 1000*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
avc_tuner_tuneqpsk_0_27_reg <= avc_tuner_tuneqpsk_0_27;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_27_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %0*/
/*   %27 = sdiv i32 %26, 1000*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
avc_tuner_tuneqpsk_0_27_reg <= avc_tuner_tuneqpsk_0_27;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_27_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %0*/
/*   %32 = sdiv i32 %31, 1000*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
avc_tuner_tuneqpsk_0_27_reg <= avc_tuner_tuneqpsk_0_32;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_27_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %28 = lshr i32 %27, 8*/
begin
avc_tuner_tuneqpsk_0_28 = (avc_tuner_tuneqpsk_0_27 >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %28 = lshr i32 %27, 8*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
avc_tuner_tuneqpsk_0_28_reg <= avc_tuner_tuneqpsk_0_28;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_28_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %29 = and i32 %28, 255*/
begin
avc_tuner_tuneqpsk_0_29 = (avc_tuner_tuneqpsk_0_28 & 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %29 = and i32 %28, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
avc_tuner_tuneqpsk_0_29_reg <= avc_tuner_tuneqpsk_0_29;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_29_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %30 = getelementptr inbounds i32* %5, i32 8*/
begin
avc_tuner_tuneqpsk_0_30 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %30 = getelementptr inbounds i32* %5, i32 8*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_30_reg <= avc_tuner_tuneqpsk_0_30;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_30_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_31 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_56))
begin
avc_tuner_tuneqpsk_0_31_reg <= avc_tuner_tuneqpsk_0_31;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_31_reg"); $finish; end
end
end
always @(*) begin
avc_tuner_tuneqpsk_0_32 = avc_tuner_tuneqpsk_signed_divide_32_0;
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %32 = sdiv i32 %31, 1000*/
avc_tuner_tuneqpsk_0_32_reg = avc_tuner_tuneqpsk_0_27_reg;
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %33 = and i32 %32, 255*/
begin
avc_tuner_tuneqpsk_0_33 = (avc_tuner_tuneqpsk_0_32 & 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %33 = and i32 %32, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
avc_tuner_tuneqpsk_0_33_reg <= avc_tuner_tuneqpsk_0_33;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_33_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %34 = getelementptr inbounds i32* %5, i32 9*/
begin
avc_tuner_tuneqpsk_0_34 = (avc_tuner_tuneqpsk_0_5 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %34 = getelementptr inbounds i32* %5, i32 9*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
avc_tuner_tuneqpsk_0_34_reg <= avc_tuner_tuneqpsk_0_34;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_34_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %35 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 2*/
begin
avc_tuner_tuneqpsk_0_35 = (arg_p + 8);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %35 = getelementptr inbounds %struct.dtv_frontend_properties* %p, i32 0, i32 2*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
avc_tuner_tuneqpsk_0_35_reg <= avc_tuner_tuneqpsk_0_35;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_35_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_0_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_91))
begin
avc_tuner_tuneqpsk_0_36_reg <= avc_tuner_tuneqpsk_0_36;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_0_36_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %37*/
/*   %38 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_37_38 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %37*/
/*   %38 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
avc_tuner_tuneqpsk_37_38_reg <= avc_tuner_tuneqpsk_37_38;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_37_38_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %39*/
/*   %40 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_39_40 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %39*/
/*   %40 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
avc_tuner_tuneqpsk_39_40_reg <= avc_tuner_tuneqpsk_39_40;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_39_40_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %41*/
/*   %42 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_41_42 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %41*/
/*   %42 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
avc_tuner_tuneqpsk_41_42_reg <= avc_tuner_tuneqpsk_41_42;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_41_42_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %43*/
/*   %44 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_43_44 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %43*/
/*   %44 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
avc_tuner_tuneqpsk_43_44_reg <= avc_tuner_tuneqpsk_43_44;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_43_44_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %45*/
/*   %46 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_45_46 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %45*/
/*   %46 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
avc_tuner_tuneqpsk_45_46_reg <= avc_tuner_tuneqpsk_45_46;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_45_46_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %47*/
/*   %48 = getelementptr inbounds i32* %5, i32 10*/
begin
avc_tuner_tuneqpsk_47_48 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %47*/
/*   %48 = getelementptr inbounds i32* %5, i32 10*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
avc_tuner_tuneqpsk_47_48_reg <= avc_tuner_tuneqpsk_47_48;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_47_48_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %50 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 1*/
begin
avc_tuner_tuneqpsk_49_50 = (arg_fdtv + 4);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %50 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 1*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104))
begin
avc_tuner_tuneqpsk_49_50_reg <= avc_tuner_tuneqpsk_49_50;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_49_50_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_49_51 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_106))
begin
avc_tuner_tuneqpsk_49_51_reg <= avc_tuner_tuneqpsk_49_51;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_49_51_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %52 = icmp eq i32 %51, 255*/
begin
avc_tuner_tuneqpsk_49_52 = (avc_tuner_tuneqpsk_49_51 == 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %49*/
/*   %52 = icmp eq i32 %51, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_106))
begin
avc_tuner_tuneqpsk_49_52_reg <= avc_tuner_tuneqpsk_49_52;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_49_52_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %53*/
/*   %54 = getelementptr inbounds i32* %5, i32 11*/
begin
avc_tuner_tuneqpsk_53_54 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %53*/
/*   %54 = getelementptr inbounds i32* %5, i32 11*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
avc_tuner_tuneqpsk_53_54_reg <= avc_tuner_tuneqpsk_53_54;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_53_54_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %55*/
/*   %56 = icmp eq i32 %51, 0*/
begin
avc_tuner_tuneqpsk_55_56 = (avc_tuner_tuneqpsk_49_51_reg == 32'd0);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %55*/
/*   %56 = icmp eq i32 %51, 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_55_109))
begin
avc_tuner_tuneqpsk_55_56_reg <= avc_tuner_tuneqpsk_55_56;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_55_56_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %55*/
/*   %57 = getelementptr inbounds i32* %5, i32 11*/
begin
avc_tuner_tuneqpsk_55_57 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %55*/
/*   %57 = getelementptr inbounds i32* %5, i32 11*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_55_109))
begin
avc_tuner_tuneqpsk_55_57_reg <= avc_tuner_tuneqpsk_55_57;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_55_57_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %61 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 2*/
begin
avc_tuner_tuneqpsk_60_61 = (arg_fdtv + 8);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %61 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 2*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114))
begin
avc_tuner_tuneqpsk_60_61_reg <= avc_tuner_tuneqpsk_60_61;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_60_61_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_60_62 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_116))
begin
avc_tuner_tuneqpsk_60_62_reg <= avc_tuner_tuneqpsk_60_62;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_60_62_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %63 = icmp eq i32 %62, 255*/
begin
avc_tuner_tuneqpsk_60_63 = (avc_tuner_tuneqpsk_60_62 == 32'd255);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %60*/
/*   %63 = icmp eq i32 %62, 255*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_116))
begin
avc_tuner_tuneqpsk_60_63_reg <= avc_tuner_tuneqpsk_60_63;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_60_63_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %64*/
/*   %65 = getelementptr inbounds i32* %5, i32 12*/
begin
avc_tuner_tuneqpsk_64_65 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %64*/
/*   %65 = getelementptr inbounds i32* %5, i32 12*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
avc_tuner_tuneqpsk_64_65_reg <= avc_tuner_tuneqpsk_64_65;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_64_65_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %66*/
/*   %67 = icmp eq i32 %62, 0*/
begin
avc_tuner_tuneqpsk_66_67 = (avc_tuner_tuneqpsk_60_62_reg == 32'd0);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %66*/
/*   %67 = icmp eq i32 %62, 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_66_119))
begin
avc_tuner_tuneqpsk_66_67_reg <= avc_tuner_tuneqpsk_66_67;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_66_67_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %66*/
/*   %68 = getelementptr inbounds i32* %5, i32 12*/
begin
avc_tuner_tuneqpsk_66_68 = (avc_tuner_tuneqpsk_0_5_reg + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %66*/
/*   %68 = getelementptr inbounds i32* %5, i32 12*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_66_119))
begin
avc_tuner_tuneqpsk_66_68_reg <= avc_tuner_tuneqpsk_66_68;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_66_68_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_71_72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126))
begin
avc_tuner_tuneqpsk_71_72_reg <= avc_tuner_tuneqpsk_71_72;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_71_72_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %71*/
/*   %73 = icmp eq i32 %72, 0*/
begin
avc_tuner_tuneqpsk_71_73 = (avc_tuner_tuneqpsk_71_72 == 32'd0);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %71*/
/*   %73 = icmp eq i32 %72, 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126))
begin
avc_tuner_tuneqpsk_71_73_reg <= avc_tuner_tuneqpsk_71_73;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_71_73_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %75 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 0*/
begin
avc_tuner_tuneqpsk_74_75 = (arg_fdtv + 12);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %75 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127))
begin
avc_tuner_tuneqpsk_74_75_reg <= avc_tuner_tuneqpsk_74_75;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_74_75_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_74_76 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_129))
begin
avc_tuner_tuneqpsk_74_76_reg <= avc_tuner_tuneqpsk_74_76;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_74_76_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %77 = icmp eq i32 %76, 0*/
begin
avc_tuner_tuneqpsk_74_77 = (avc_tuner_tuneqpsk_74_76 == 32'd0);
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %74*/
/*   %77 = icmp eq i32 %76, 0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_129))
begin
avc_tuner_tuneqpsk_74_77_reg <= avc_tuner_tuneqpsk_74_77;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_74_77_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %78*/
/*   %79 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 1*/
begin
avc_tuner_tuneqpsk_78_79 = (arg_fdtv + (12 + 4));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %78*/
/*   %79 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 1*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130))
begin
avc_tuner_tuneqpsk_78_79_reg <= avc_tuner_tuneqpsk_78_79;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_78_79_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_78_80 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_132))
begin
avc_tuner_tuneqpsk_78_80_reg <= avc_tuner_tuneqpsk_78_80;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_78_80_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_81_82 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
avc_tuner_tuneqpsk_81_82_reg <= avc_tuner_tuneqpsk_81_82;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_81_82_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %81*/
/*   %83 = getelementptr inbounds i32* %82, i32 13*/
begin
avc_tuner_tuneqpsk_81_83 = (avc_tuner_tuneqpsk_81_82 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %81*/
/*   %83 = getelementptr inbounds i32* %82, i32 13*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
avc_tuner_tuneqpsk_81_83_reg <= avc_tuner_tuneqpsk_81_83;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_81_83_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_84_85 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
avc_tuner_tuneqpsk_84_85_reg <= avc_tuner_tuneqpsk_84_85;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_84_85_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %84*/
/*   %86 = getelementptr inbounds i32* %85, i32 13*/
begin
avc_tuner_tuneqpsk_84_86 = (avc_tuner_tuneqpsk_84_85 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %84*/
/*   %86 = getelementptr inbounds i32* %85, i32 13*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
avc_tuner_tuneqpsk_84_86_reg <= avc_tuner_tuneqpsk_84_86;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_84_86_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_87_88 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
avc_tuner_tuneqpsk_87_88_reg <= avc_tuner_tuneqpsk_87_88;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_87_88_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %87*/
/*   %89 = getelementptr inbounds i32* %88, i32 13*/
begin
avc_tuner_tuneqpsk_87_89 = (avc_tuner_tuneqpsk_87_88 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %87*/
/*   %89 = getelementptr inbounds i32* %88, i32 13*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
avc_tuner_tuneqpsk_87_89_reg <= avc_tuner_tuneqpsk_87_89;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_87_89_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_90_91 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
avc_tuner_tuneqpsk_90_91_reg <= avc_tuner_tuneqpsk_90_91;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_90_91_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %90*/
/*   %92 = getelementptr inbounds i32* %91, i32 13*/
begin
avc_tuner_tuneqpsk_90_92 = (avc_tuner_tuneqpsk_90_91 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %90*/
/*   %92 = getelementptr inbounds i32* %91, i32 13*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
avc_tuner_tuneqpsk_90_92_reg <= avc_tuner_tuneqpsk_90_92;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_90_92_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94 = avc_tuner_tuneqpsk_81_82_reg;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
else if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94 = avc_tuner_tuneqpsk_84_85_reg;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
else if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94 = avc_tuner_tuneqpsk_87_88_reg;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
else /* if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) & (memory_controller_waitrequest == 1'd0))) */
begin
avc_tuner_tuneqpsk_93_94 = avc_tuner_tuneqpsk_90_91_reg;
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_136) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94_reg <= avc_tuner_tuneqpsk_93_94;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_94_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_140) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94_reg <= avc_tuner_tuneqpsk_93_94;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_94_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_144) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94_reg <= avc_tuner_tuneqpsk_93_94;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_94_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %93*/
/*   %94 = phi i32* [ %91, %90 ], [ %88, %87 ], [ %85, %84 ], [ %82, %81 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_148) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_93_94_reg <= avc_tuner_tuneqpsk_93_94;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_94_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %95 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 2*/
begin
avc_tuner_tuneqpsk_93_95 = (arg_fdtv + (12 + 8));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %95 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 2*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149))
begin
avc_tuner_tuneqpsk_93_95_reg <= avc_tuner_tuneqpsk_93_95;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_95_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_93_96 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_151))
begin
avc_tuner_tuneqpsk_93_96_reg <= avc_tuner_tuneqpsk_93_96;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_93_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_93_96_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %97*/
/*   %98 = getelementptr inbounds i32* %94, i32 14*/
begin
avc_tuner_tuneqpsk_97_98 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %97*/
/*   %98 = getelementptr inbounds i32* %94, i32 14*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
avc_tuner_tuneqpsk_97_98_reg <= avc_tuner_tuneqpsk_97_98;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_97_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_97_98_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %99*/
/*   %100 = getelementptr inbounds i32* %94, i32 14*/
begin
avc_tuner_tuneqpsk_99_100 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %99*/
/*   %100 = getelementptr inbounds i32* %94, i32 14*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
avc_tuner_tuneqpsk_99_100_reg <= avc_tuner_tuneqpsk_99_100;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_99_100_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %101*/
/*   %102 = getelementptr inbounds i32* %94, i32 14*/
begin
avc_tuner_tuneqpsk_101_102 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %101*/
/*   %102 = getelementptr inbounds i32* %94, i32 14*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
avc_tuner_tuneqpsk_101_102_reg <= avc_tuner_tuneqpsk_101_102;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_101_102_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %103*/
/*   %104 = getelementptr inbounds i32* %94, i32 14*/
begin
avc_tuner_tuneqpsk_103_104 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %103*/
/*   %104 = getelementptr inbounds i32* %94, i32 14*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
avc_tuner_tuneqpsk_103_104_reg <= avc_tuner_tuneqpsk_103_104;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_103_104_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %105*/
/*   %106 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 3*/
begin
avc_tuner_tuneqpsk_105_106 = (arg_fdtv + (12 + 12));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %105*/
/*   %106 = getelementptr inbounds %struct.firedtv* %fdtv, i32 0, i32 3, i32 0, i32 3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160))
begin
avc_tuner_tuneqpsk_105_106_reg <= avc_tuner_tuneqpsk_105_106;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_105_106_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
begin
avc_tuner_tuneqpsk_105_107 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162))
begin
avc_tuner_tuneqpsk_105_107_reg <= avc_tuner_tuneqpsk_105_107;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_105_107_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %108*/
/*   %109 = getelementptr inbounds i32* %94, i32 15*/
begin
avc_tuner_tuneqpsk_108_109 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %108*/
/*   %109 = getelementptr inbounds i32* %94, i32 15*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
avc_tuner_tuneqpsk_108_109_reg <= avc_tuner_tuneqpsk_108_109;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_108_109_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %110*/
/*   %111 = getelementptr inbounds i32* %94, i32 15*/
begin
avc_tuner_tuneqpsk_110_111 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %110*/
/*   %111 = getelementptr inbounds i32* %94, i32 15*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
avc_tuner_tuneqpsk_110_111_reg <= avc_tuner_tuneqpsk_110_111;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_110_111_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %112*/
/*   %113 = getelementptr inbounds i32* %94, i32 15*/
begin
avc_tuner_tuneqpsk_112_113 = (avc_tuner_tuneqpsk_93_94_reg + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %112*/
/*   %113 = getelementptr inbounds i32* %94, i32 15*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
avc_tuner_tuneqpsk_112_113_reg <= avc_tuner_tuneqpsk_112_113;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_112_113_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
begin
avc_tuner_tuneqpsk_114_115 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
avc_tuner_tuneqpsk_114_115_reg <= avc_tuner_tuneqpsk_114_115;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_114_115_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %116 = getelementptr inbounds i32* %115, i32 13*/
begin
avc_tuner_tuneqpsk_114_116 = (avc_tuner_tuneqpsk_114_115 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %116 = getelementptr inbounds i32* %115, i32 13*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
avc_tuner_tuneqpsk_114_116_reg <= avc_tuner_tuneqpsk_114_116;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_114_116_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %117 = getelementptr inbounds i32* %115, i32 14*/
begin
avc_tuner_tuneqpsk_114_117 = (avc_tuner_tuneqpsk_114_115 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %117 = getelementptr inbounds i32* %115, i32 14*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
avc_tuner_tuneqpsk_114_117_reg <= avc_tuner_tuneqpsk_114_117;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_114_117_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %118 = getelementptr inbounds i32* %115, i32 15*/
begin
avc_tuner_tuneqpsk_114_118 = (avc_tuner_tuneqpsk_114_115 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %114*/
/*   %118 = getelementptr inbounds i32* %115, i32 15*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
avc_tuner_tuneqpsk_114_118_reg <= avc_tuner_tuneqpsk_114_118;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_114_118_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_71_73 == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0 = 32'd13;
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
else if ((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 != 32'd137)) & (avc_tuner_tuneqpsk_105_107 != 32'd136)) & (avc_tuner_tuneqpsk_105_107 != 32'd135)))
begin
avc_tuner_tuneqpsk_119__0 = 32'd16;
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
else if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0 = 32'd16;
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
else if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0 = 32'd16;
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
else if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0 = 32'd16;
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
else /* if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) & (memory_controller_waitrequest == 1'd0))) */
begin
avc_tuner_tuneqpsk_119__0 = 32'd16;
end
end
always @(posedge clk) begin
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if ((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_126) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_71_73 == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if ((((((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_162) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_105_107 != 32'd137)) & (avc_tuner_tuneqpsk_105_107 != 32'd136)) & (avc_tuner_tuneqpsk_105_107 != 32'd135)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_164) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_166) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_168) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   %.0 = phi i32 [ 16, %108 ], [ 16, %110 ], [ 16, %112 ], [ 16, %105 ], [ 16, %114 ], [ 13, %71 ]*/
if (((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_173) & (memory_controller_waitrequest == 1'd0)))
begin
avc_tuner_tuneqpsk_119__0_reg <= avc_tuner_tuneqpsk_119__0;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_119__0_reg"); $finish; end
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %27 = sdiv i32 %26, 1000*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_21))
begin
avc_tuner_tuneqpsk_signed_divide_32_0_op0 = avc_tuner_tuneqpsk_0_26;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %32 = sdiv i32 %31, 1000*/
else /* if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_56)) */
begin
avc_tuner_tuneqpsk_signed_divide_32_0_op0 = avc_tuner_tuneqpsk_0_31;
end
end
always @(*) begin
/* avc_tuner_tuneqpsk: %0*/
/*   %27 = sdiv i32 %26, 1000*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_21))
begin
avc_tuner_tuneqpsk_signed_divide_32_0_op1 = 32'd1000;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %32 = sdiv i32 %31, 1000*/
else /* if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_56)) */
begin
avc_tuner_tuneqpsk_signed_divide_32_0_op1 = 32'd1000;
end
end
always @(*) begin
lpm_divide_avc_tuner_tuneqpsk_0_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_avc_tuner_tuneqpsk_0_27_out = lpm_divide_avc_tuner_tuneqpsk_0_27_temp_out;
end
always @(*) begin
avc_tuner_tuneqpsk_signed_divide_32_0 = lpm_divide_avc_tuner_tuneqpsk_0_27_out;
end
always @(*) begin
lpm_divide_avc_tuner_tuneqpsk_0_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_119_174))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %20, i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %33, i32* %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %37*/
/*   store i32 1, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %41*/
/*   store i32 3, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %45*/
/*   store i32 5, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %58*/
/*   store i32 0, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %59*/
/*   store i32 1, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %84*/
/*   store i32 2, i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %90*/
/*   store i32 2, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %97*/
/*   store i32 2, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %101*/
/*   store i32 1, i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %110*/
/*   store i32 0, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 1, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %118, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_3;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_5;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_7_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_13_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %20, i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_21_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_25_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_25_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %33, i32* %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_34_reg;
end
/* avc_tuner_tuneqpsk: %37*/
/*   store i32 1, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_37_38;
end
/* avc_tuner_tuneqpsk: %41*/
/*   store i32 3, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_41_42;
end
/* avc_tuner_tuneqpsk: %45*/
/*   store i32 5, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_45_46;
end
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_49_50;
end
/* avc_tuner_tuneqpsk: %58*/
/*   store i32 0, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_55_57_reg;
end
/* avc_tuner_tuneqpsk: %59*/
/*   store i32 1, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_55_57_reg;
end
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_60_61;
end
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_0_8_reg;
end
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_78_79;
end
/* avc_tuner_tuneqpsk: %84*/
/*   store i32 2, i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_84_86;
end
/* avc_tuner_tuneqpsk: %90*/
/*   store i32 2, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_90_92;
end
/* avc_tuner_tuneqpsk: %97*/
/*   store i32 2, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_97_98;
end
/* avc_tuner_tuneqpsk: %101*/
/*   store i32 1, i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_101_102;
end
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_105_106;
end
/* avc_tuner_tuneqpsk: %110*/
/*   store i32 0, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_110_111;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 1, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_114_116;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %118, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172))
begin
memory_controller_address_a = avc_tuner_tuneqpsk_114_118_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %20, i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %33, i32* %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %37*/
/*   store i32 1, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %41*/
/*   store i32 3, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %45*/
/*   store i32 5, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %58*/
/*   store i32 0, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %59*/
/*   store i32 1, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %84*/
/*   store i32 2, i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %90*/
/*   store i32 2, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %97*/
/*   store i32 2, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %101*/
/*   store i32 1, i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160))
begin
memory_controller_write_enable_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %110*/
/*   store i32 0, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 1, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_write_enable_a = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %118, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_in_a = 32'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_in_a = 32'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_in_a = 32'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
memory_controller_in_a = avc_tuner_tuneqpsk_0_12;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %20, i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
memory_controller_in_a = avc_tuner_tuneqpsk_0_20;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %33, i32* %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
memory_controller_in_a = avc_tuner_tuneqpsk_0_33;
end
/* avc_tuner_tuneqpsk: %37*/
/*   store i32 1, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
memory_controller_in_a = 32'd1;
end
/* avc_tuner_tuneqpsk: %41*/
/*   store i32 3, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
memory_controller_in_a = 32'd3;
end
/* avc_tuner_tuneqpsk: %45*/
/*   store i32 5, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
memory_controller_in_a = 32'd5;
end
/* avc_tuner_tuneqpsk: %58*/
/*   store i32 0, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110))
begin
memory_controller_in_a = 32'd0;
end
/* avc_tuner_tuneqpsk: %59*/
/*   store i32 1, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112))
begin
memory_controller_in_a = 32'd1;
end
/* avc_tuner_tuneqpsk: %84*/
/*   store i32 2, i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
memory_controller_in_a = 32'd2;
end
/* avc_tuner_tuneqpsk: %90*/
/*   store i32 2, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
memory_controller_in_a = 32'd2;
end
/* avc_tuner_tuneqpsk: %97*/
/*   store i32 2, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
memory_controller_in_a = 32'd2;
end
/* avc_tuner_tuneqpsk: %101*/
/*   store i32 1, i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
memory_controller_in_a = 32'd1;
end
/* avc_tuner_tuneqpsk: %110*/
/*   store i32 0, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
memory_controller_in_a = 32'd0;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 1, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_in_a = 32'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %118, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172))
begin
memory_controller_in_a = 32'd255;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_9))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %20, i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_19))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %31 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_54))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %33, i32* %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_88))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %37*/
/*   store i32 1, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_37_92))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %41*/
/*   store i32 3, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_41_96))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %45*/
/*   store i32 5, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_45_100))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_49_104))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %58*/
/*   store i32 0, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_58_110))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %59*/
/*   store i32 1, i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_59_112))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %60*/
/*   %62 = load i32* %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_60_114))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %71*/
/*   %72 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_71_124))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %78*/
/*   %80 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_78_130))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %84*/
/*   store i32 2, i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_139))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %90*/
/*   store i32 2, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_147))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %97*/
/*   store i32 2, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_97_152))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %101*/
/*   store i32 1, i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_101_156))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_105_160))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %110*/
/*   store i32 0, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_110_165))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 1, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_size_a = 2'd2;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %118, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_172))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %23, i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %39*/
/*   store i32 2, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %43*/
/*   store i32 4, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %47*/
/*   store i32 0, i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %53*/
/*   store i32 255, i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %64*/
/*   store i32 255, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %69*/
/*   store i32 1, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %70*/
/*   store i32 0, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %81*/
/*   store i32 1, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %87*/
/*   store i32 3, i32* %89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %99*/
/*   store i32 0, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %103*/
/*   store i32 2, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %108*/
/*   store i32 0, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169))
begin
memory_controller_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_6;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_9_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_10_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_10_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_17_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_10_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_10_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %23, i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_24_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_30_reg;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_35_reg;
end
/* avc_tuner_tuneqpsk: %39*/
/*   store i32 2, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_39_40;
end
/* avc_tuner_tuneqpsk: %43*/
/*   store i32 4, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_43_44;
end
/* avc_tuner_tuneqpsk: %47*/
/*   store i32 0, i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_47_48;
end
/* avc_tuner_tuneqpsk: %53*/
/*   store i32 255, i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_53_54;
end
/* avc_tuner_tuneqpsk: %64*/
/*   store i32 255, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_64_65;
end
/* avc_tuner_tuneqpsk: %69*/
/*   store i32 1, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_66_68_reg;
end
/* avc_tuner_tuneqpsk: %70*/
/*   store i32 0, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_66_68_reg;
end
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_74_75;
end
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4_reg;
end
/* avc_tuner_tuneqpsk: %81*/
/*   store i32 1, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_81_83;
end
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4_reg;
end
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4_reg;
end
/* avc_tuner_tuneqpsk: %87*/
/*   store i32 3, i32* %89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_87_89;
end
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4_reg;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_93_95;
end
/* avc_tuner_tuneqpsk: %99*/
/*   store i32 0, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_99_100;
end
/* avc_tuner_tuneqpsk: %103*/
/*   store i32 2, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_103_104;
end
/* avc_tuner_tuneqpsk: %108*/
/*   store i32 0, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_108_109;
end
/* avc_tuner_tuneqpsk: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_112_113;
end
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_0_4_reg;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_address_b = avc_tuner_tuneqpsk_114_117;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %23, i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %39*/
/*   store i32 2, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %43*/
/*   store i32 4, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %47*/
/*   store i32 0, i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %53*/
/*   store i32 255, i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %64*/
/*   store i32 255, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %69*/
/*   store i32 1, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %70*/
/*   store i32 0, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %81*/
/*   store i32 1, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %87*/
/*   store i32 3, i32* %89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %99*/
/*   store i32 0, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %103*/
/*   store i32 2, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %108*/
/*   store i32 0, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
memory_controller_write_enable_b = 1'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169))
begin
memory_controller_write_enable_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
memory_controller_in_b = avc_tuner_tuneqpsk_0_16;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %23, i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
memory_controller_in_b = avc_tuner_tuneqpsk_0_23;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
memory_controller_in_b = avc_tuner_tuneqpsk_0_29;
end
/* avc_tuner_tuneqpsk: %39*/
/*   store i32 2, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
memory_controller_in_b = 32'd2;
end
/* avc_tuner_tuneqpsk: %43*/
/*   store i32 4, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
memory_controller_in_b = 32'd4;
end
/* avc_tuner_tuneqpsk: %47*/
/*   store i32 0, i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %53*/
/*   store i32 255, i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
memory_controller_in_b = 32'd255;
end
/* avc_tuner_tuneqpsk: %64*/
/*   store i32 255, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
memory_controller_in_b = 32'd255;
end
/* avc_tuner_tuneqpsk: %69*/
/*   store i32 1, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120))
begin
memory_controller_in_b = 32'd1;
end
/* avc_tuner_tuneqpsk: %70*/
/*   store i32 0, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %81*/
/*   store i32 1, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
memory_controller_in_b = 32'd1;
end
/* avc_tuner_tuneqpsk: %87*/
/*   store i32 3, i32* %89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
memory_controller_in_b = 32'd3;
end
/* avc_tuner_tuneqpsk: %99*/
/*   store i32 0, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %103*/
/*   store i32 2, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
memory_controller_in_b = 32'd2;
end
/* avc_tuner_tuneqpsk: %108*/
/*   store i32 0, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
memory_controller_in_b = 32'd0;
end
/* avc_tuner_tuneqpsk: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
memory_controller_in_b = 32'd1;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_in_b = 32'd255;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %5 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 0, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_7))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %14 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_10))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_12))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %18 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_13))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %22 = load i32* %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_16))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %23, i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_53))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_0_89))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %39*/
/*   store i32 2, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_39_94))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %43*/
/*   store i32 4, i32* %44, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_43_98))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %47*/
/*   store i32 0, i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_47_102))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %53*/
/*   store i32 255, i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_53_107))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %64*/
/*   store i32 255, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_64_117))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %69*/
/*   store i32 1, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_69_120))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %70*/
/*   store i32 0, i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_70_122))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_74_127))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %81*/
/*   %82 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_133))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %81*/
/*   store i32 1, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_81_135))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %84*/
/*   %85 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_84_137))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %87*/
/*   %88 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_141))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %87*/
/*   store i32 3, i32* %89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_87_143))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %90*/
/*   %91 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_90_145))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %93*/
/*   %96 = load i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_93_149))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %99*/
/*   store i32 0, i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_99_154))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %103*/
/*   store i32 2, i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_103_158))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %108*/
/*   store i32 0, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_108_163))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_112_167))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %114*/
/*   %115 = load i32** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_169))
begin
memory_controller_size_b = 2'd2;
end
/* avc_tuner_tuneqpsk: %114*/
/*   store i32 255, i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_114_171))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* avc_tuner_tuneqpsk: %119*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_avc_tuner_tuneqpsk_BB_119_174))
begin
return_val <= avc_tuner_tuneqpsk_119__0_reg;
if (reset == 1'b0 && ^(avc_tuner_tuneqpsk_119__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  avc_tuner_tuneqpsk_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_arg_fdtv;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_arg_p;
wire  avc_tuner_tuneqpsk_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_address_a;
wire  avc_tuner_tuneqpsk_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_out_a;
wire [1:0] avc_tuner_tuneqpsk_memory_controller_size_a;
wire  avc_tuner_tuneqpsk_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_address_b;
wire  avc_tuner_tuneqpsk_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] avc_tuner_tuneqpsk_memory_controller_out_b;
wire [1:0] avc_tuner_tuneqpsk_memory_controller_size_b;
reg  avc_tuner_tuneqpsk_memory_controller_waitrequest;
wire  avc_tuner_tuneqpsk_finish;
reg  avc_tuner_tuneqpsk_finish_final;
wire [31:0] avc_tuner_tuneqpsk_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


avc_tuner_tuneqpsk avc_tuner_tuneqpsk_inst (
	.memory_controller_enable_a (avc_tuner_tuneqpsk_memory_controller_enable_a),
	.memory_controller_address_a (avc_tuner_tuneqpsk_memory_controller_address_a),
	.memory_controller_write_enable_a (avc_tuner_tuneqpsk_memory_controller_write_enable_a),
	.memory_controller_in_a (avc_tuner_tuneqpsk_memory_controller_in_a),
	.memory_controller_size_a (avc_tuner_tuneqpsk_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (avc_tuner_tuneqpsk_memory_controller_enable_b),
	.memory_controller_address_b (avc_tuner_tuneqpsk_memory_controller_address_b),
	.memory_controller_write_enable_b (avc_tuner_tuneqpsk_memory_controller_write_enable_b),
	.memory_controller_in_b (avc_tuner_tuneqpsk_memory_controller_in_b),
	.memory_controller_size_b (avc_tuner_tuneqpsk_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (avc_tuner_tuneqpsk_start),
	.finish (avc_tuner_tuneqpsk_finish),
	.return_val (avc_tuner_tuneqpsk_return_val),
	.arg_fdtv (avc_tuner_tuneqpsk_arg_fdtv),
	.arg_p (avc_tuner_tuneqpsk_arg_p)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (avc_tuner_tuneqpsk_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
begin
main_0_1 = avc_tuner_tuneqpsk_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
avc_tuner_tuneqpsk_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
avc_tuner_tuneqpsk_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
avc_tuner_tuneqpsk_arg_fdtv <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_arg_fdtv"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
avc_tuner_tuneqpsk_arg_p <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to avc_tuner_tuneqpsk_arg_p"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
begin
avc_tuner_tuneqpsk_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
begin
avc_tuner_tuneqpsk_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
avc_tuner_tuneqpsk_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
avc_tuner_tuneqpsk_finish_final = avc_tuner_tuneqpsk_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = avc_tuner_tuneqpsk_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = avc_tuner_tuneqpsk_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = avc_tuner_tuneqpsk_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = avc_tuner_tuneqpsk_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = avc_tuner_tuneqpsk_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = avc_tuner_tuneqpsk_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = avc_tuner_tuneqpsk_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = avc_tuner_tuneqpsk_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = avc_tuner_tuneqpsk_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = avc_tuner_tuneqpsk_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = avc_tuner_tuneqpsk_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = avc_tuner_tuneqpsk_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @avc_tuner_tuneqpsk(%struct.firedtv* undef, %struct.dtv_frontend_properties* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = avc_tuner_tuneqpsk_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
