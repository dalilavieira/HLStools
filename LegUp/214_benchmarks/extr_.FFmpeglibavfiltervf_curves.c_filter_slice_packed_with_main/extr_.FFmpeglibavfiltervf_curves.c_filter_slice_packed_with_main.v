//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:26 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module filter_slice_packed
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_ctx,
	arg_arg,
	arg_jobnr,
	arg_nb_jobs
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader_40 = 8'd40;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_41 = 8'd41;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_42 = 8'd42;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_43 = 8'd43;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_44 = 8'd44;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_45 = 8'd45;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_46 = 8'd46;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph12_47 = 8'd47;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_43_48 = 8'd48;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_43_49 = 8'd49;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph_50 = 8'd50;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph_51 = 8'd51;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph_52 = 8'd52;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph_53 = 8'd53;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph_54 = 8'd54;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55 = 8'd55;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56 = 8'd56;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_57 = 8'd57;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_58 = 8'd58;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_59 = 8'd59;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_60 = 8'd60;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_61 = 8'd61;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_62 = 8'd62;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_63 = 8'd63;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_64 = 8'd64;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_65 = 8'd65;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_66 = 8'd66;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_67 = 8'd67;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_68 = 8'd68;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_69 = 8'd69;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_70 = 8'd70;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_71 = 8'd71;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_72 = 8'd72;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_73 = 8'd73;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_74 = 8'd74;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_75 = 8'd75;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_76 = 8'd76;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader2_77 = 8'd77;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge182_78 = 8'd78;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_79 = 8'd79;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_80 = 8'd80;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_81 = 8'd81;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_82 = 8'd82;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_83 = 8'd83;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_84 = 8'd84;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_85 = 8'd85;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_86 = 8'd86;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_87 = 8'd87;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_88 = 8'd88;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_89 = 8'd89;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_90 = 8'd90;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_91 = 8'd91;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_92 = 8'd92;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_93 = 8'd93;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_94 = 8'd94;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_95 = 8'd95;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader1_96 = 8'd96;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge181_97 = 8'd97;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98 = 8'd98;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99 = 8'd99;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge_100 = 8'd100;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_67_101 = 8'd101;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102 = 8'd102;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103 = 8'd103;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104 = 8'd104;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105 = 8'd105;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106 = 8'd106;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107 = 8'd107;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108 = 8'd108;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_109 = 8'd109;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader13_110 = 8'd110;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph15_111 = 8'd111;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph15_112 = 8'd112;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph15_113 = 8'd113;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph15_114 = 8'd114;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__lr_ph15_115 = 8'd115;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116 = 8'd116;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117 = 8'd117;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_118 = 8'd118;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_119 = 8'd119;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_120 = 8'd120;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_121 = 8'd121;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_122 = 8'd122;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_123 = 8'd123;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_124 = 8'd124;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_125 = 8'd125;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_126 = 8'd126;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_127 = 8'd127;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_128 = 8'd128;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_129 = 8'd129;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_130 = 8'd130;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_131 = 8'd131;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_132 = 8'd132;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_133 = 8'd133;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_134 = 8'd134;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_135 = 8'd135;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_136 = 8'd136;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_137 = 8'd137;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_138 = 8'd138;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_139 = 8'd139;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_140 = 8'd140;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader5_141 = 8'd141;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_142 = 8'd142;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_143 = 8'd143;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_144 = 8'd144;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_145 = 8'd145;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_146 = 8'd146;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_147 = 8'd147;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_148 = 8'd148;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_149 = 8'd149;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_150 = 8'd150;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_151 = 8'd151;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_152 = 8'd152;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_153 = 8'd153;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_154 = 8'd154;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_155 = 8'd155;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_156 = 8'd156;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_157 = 8'd157;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_158 = 8'd158;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_159 = 8'd159;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_160 = 8'd160;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_161 = 8'd161;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__preheader4_162 = 8'd162;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163 = 8'd163;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164 = 8'd164;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge16_165 = 8'd165;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge16_166 = 8'd166;
parameter [7:0] LEGUP_F_filter_slice_packed_BB___crit_edge16_167 = 8'd167;
parameter [7:0] LEGUP_F_filter_slice_packed_BB_120_168 = 8'd168;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169 = 8'd169;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170 = 8'd170;
parameter [7:0] LEGUP_F_filter_slice_packed_BB__loopexit_171 = 8'd171;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ctx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_arg;
input [31:0] arg_jobnr;
input [31:0] arg_nb_jobs;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_7_reg;
reg  filter_slice_packed_0_8;
reg  filter_slice_packed_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_9_reg;
reg [31:0] filter_slice_packed_0_10;
reg [31:0] filter_slice_packed_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_12_reg;
reg [31:0] filter_slice_packed_0_13;
reg [31:0] filter_slice_packed_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_14_reg;
reg [31:0] filter_slice_packed_0_15;
reg [31:0] filter_slice_packed_0_15_reg;
reg [31:0] filter_slice_packed_0_16;
reg [31:0] filter_slice_packed_0_16_reg;
reg [31:0] filter_slice_packed_0_17;
reg [31:0] filter_slice_packed_0_17_reg;
reg [31:0] filter_slice_packed_0_18;
reg [31:0] filter_slice_packed_0_18_reg;
reg [31:0] filter_slice_packed_0_19;
reg [31:0] filter_slice_packed_0_19_reg;
reg [31:0] filter_slice_packed_0_20;
reg [31:0] filter_slice_packed_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_0_21_reg;
reg [31:0] filter_slice_packed_0_22;
reg [31:0] filter_slice_packed_0_22_reg;
reg  filter_slice_packed_0_23;
reg  filter_slice_packed_0_23_reg;
reg  filter_slice_packed_0_24;
reg  filter_slice_packed_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_29_reg;
reg [31:0] filter_slice_packed__lr_ph12_30;
reg [31:0] filter_slice_packed__lr_ph12_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_35_reg;
reg [31:0] filter_slice_packed__lr_ph12_36;
reg [31:0] filter_slice_packed__lr_ph12_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_37_reg;
reg [31:0] filter_slice_packed__lr_ph12_38;
reg [31:0] filter_slice_packed__lr_ph12_38_reg;
reg [31:0] filter_slice_packed__lr_ph12_39;
reg [31:0] filter_slice_packed__lr_ph12_39_reg;
reg  filter_slice_packed__lr_ph12_40;
reg  filter_slice_packed__lr_ph12_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph12_41_reg;
reg  filter_slice_packed__lr_ph12__not;
reg  filter_slice_packed__lr_ph12__not_reg;
reg  filter_slice_packed__lr_ph12_42;
reg  filter_slice_packed__lr_ph12_42_reg;
reg  filter_slice_packed__lr_ph12_or_cond;
reg  filter_slice_packed__lr_ph12_or_cond_reg;
reg [31:0] filter_slice_packed__lr_ph12_tmp95;
reg [31:0] filter_slice_packed__lr_ph12_tmp95_reg;
reg [31:0] filter_slice_packed__lr_ph12_tmp98;
reg [31:0] filter_slice_packed__lr_ph12_tmp98_reg;
reg [31:0] filter_slice_packed__lr_ph12_tmp99;
reg [31:0] filter_slice_packed__lr_ph12_tmp99_reg;
reg [31:0] filter_slice_packed__lr_ph12_tmp112;
reg [31:0] filter_slice_packed__lr_ph12_tmp112_reg;
reg [31:0] filter_slice_packed__lr_ph12_tmp113;
reg [31:0] filter_slice_packed__lr_ph12_tmp113_reg;
reg [31:0] filter_slice_packed_43_indvar25;
reg [31:0] filter_slice_packed_43_indvar25_reg;
reg [31:0] filter_slice_packed_43_tmp97;
reg [31:0] filter_slice_packed_43_tmp97_reg;
reg [31:0] filter_slice_packed_43_tmp100;
reg [31:0] filter_slice_packed_43_tmp100_reg;
reg [31:0] filter_slice_packed_43_tmp111;
reg [31:0] filter_slice_packed_43_tmp111_reg;
reg [31:0] filter_slice_packed_43_tmp114;
reg [31:0] filter_slice_packed_43_tmp114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph_45_reg;
reg [31:0] filter_slice_packed__preheader2_indvar;
reg [31:0] filter_slice_packed__preheader2_indvar_reg;
reg [31:0] filter_slice_packed__preheader2_tmp125;
reg [31:0] filter_slice_packed__preheader2_tmp125_reg;
reg [31:0] filter_slice_packed__preheader2_tmp126;
reg [31:0] filter_slice_packed__preheader2_tmp126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_scevgep62_reg;
reg [31:0] filter_slice_packed__preheader2_tmp136;
reg [31:0] filter_slice_packed__preheader2_tmp136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_scevgep58_reg;
reg [31:0] filter_slice_packed__preheader2_tmp38;
reg [31:0] filter_slice_packed__preheader2_tmp38_reg;
reg [31:0] filter_slice_packed__preheader2_46;
reg [31:0] filter_slice_packed__preheader2_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_47_reg;
reg [31:0] filter_slice_packed__preheader2_48;
reg [31:0] filter_slice_packed__preheader2_48_reg;
reg [31:0] filter_slice_packed__preheader2_49;
reg [31:0] filter_slice_packed__preheader2_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_50_reg;
reg [31:0] filter_slice_packed__preheader2_51;
reg [31:0] filter_slice_packed__preheader2_51_reg;
reg [31:0] filter_slice_packed__preheader2_52;
reg [31:0] filter_slice_packed__preheader2_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader2_53_reg;
reg [31:0] filter_slice_packed__preheader2_54;
reg [31:0] filter_slice_packed__preheader2_54_reg;
reg [31:0] filter_slice_packed__preheader2_55;
reg [31:0] filter_slice_packed__preheader2_55_reg;
reg  filter_slice_packed__preheader2_56;
reg  filter_slice_packed__preheader2_56_reg;
reg [31:0] filter_slice_packed___crit_edge182_indvar_next;
reg [31:0] filter_slice_packed___crit_edge182_indvar_next_reg;
reg [31:0] filter_slice_packed__preheader1_indvar63;
reg [31:0] filter_slice_packed__preheader1_indvar63_reg;
reg [31:0] filter_slice_packed__preheader1_tmp96;
reg [31:0] filter_slice_packed__preheader1_tmp96_reg;
reg [31:0] filter_slice_packed__preheader1_tmp101;
reg [31:0] filter_slice_packed__preheader1_tmp101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_scevgep93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_scevgep93_reg;
reg [31:0] filter_slice_packed__preheader1_tmp115;
reg [31:0] filter_slice_packed__preheader1_tmp115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_scevgep89_reg;
reg [31:0] filter_slice_packed__preheader1_tmp94;
reg [31:0] filter_slice_packed__preheader1_tmp94_reg;
reg [31:0] filter_slice_packed__preheader1_57;
reg [31:0] filter_slice_packed__preheader1_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_58_reg;
reg [31:0] filter_slice_packed__preheader1_59;
reg [31:0] filter_slice_packed__preheader1_59_reg;
reg [31:0] filter_slice_packed__preheader1_60;
reg [31:0] filter_slice_packed__preheader1_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_61_reg;
reg [31:0] filter_slice_packed__preheader1_62;
reg [31:0] filter_slice_packed__preheader1_62_reg;
reg [31:0] filter_slice_packed__preheader1_63;
reg [31:0] filter_slice_packed__preheader1_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader1_64_reg;
reg [31:0] filter_slice_packed__preheader1_65;
reg [31:0] filter_slice_packed__preheader1_65_reg;
reg  filter_slice_packed__preheader1_66;
reg  filter_slice_packed__preheader1_66_reg;
reg [31:0] filter_slice_packed___crit_edge181_indvar_next64;
reg [31:0] filter_slice_packed___crit_edge181_indvar_next64_reg;
reg [31:0] filter_slice_packed___crit_edge_indvar_next26;
reg [31:0] filter_slice_packed___crit_edge_indvar_next26_reg;
reg  filter_slice_packed___crit_edge_exitcond;
reg  filter_slice_packed___crit_edge_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_73_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph_74;
reg [31:0] filter_slice_packed__preheader13_lr_ph_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_75_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph_76;
reg [31:0] filter_slice_packed__preheader13_lr_ph_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_77_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph_78;
reg [31:0] filter_slice_packed__preheader13_lr_ph_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_79_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph_80;
reg [31:0] filter_slice_packed__preheader13_lr_ph_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_lr_ph_85_reg;
reg  filter_slice_packed__preheader13_lr_ph__not8;
reg  filter_slice_packed__preheader13_lr_ph__not8_reg;
reg  filter_slice_packed__preheader13_lr_ph_86;
reg  filter_slice_packed__preheader13_lr_ph_86_reg;
reg  filter_slice_packed__preheader13_lr_ph_or_cond9;
reg  filter_slice_packed__preheader13_lr_ph_or_cond9_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph_tmp177;
reg [31:0] filter_slice_packed__preheader13_lr_ph_tmp177_reg;
reg [31:0] filter_slice_packed__preheader13_lr_ph__pre;
reg [31:0] filter_slice_packed__preheader13_lr_ph__pre_reg;
reg [31:0] filter_slice_packed__preheader13_87;
reg [31:0] filter_slice_packed__preheader13_87_reg;
reg [31:0] filter_slice_packed__preheader13_88;
reg [31:0] filter_slice_packed__preheader13_88_reg;
reg [31:0] filter_slice_packed__preheader13_89;
reg [31:0] filter_slice_packed__preheader13_89_reg;
reg [31:0] filter_slice_packed__preheader13_indvar175;
reg [31:0] filter_slice_packed__preheader13_indvar175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_src_022;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_src_022_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_dst_019;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader13_dst_019_reg;
reg [31:0] filter_slice_packed__preheader13_90;
reg [31:0] filter_slice_packed__preheader13_90_reg;
reg  filter_slice_packed__preheader13_91;
reg  filter_slice_packed__preheader13_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph15_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph15_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph15_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__lr_ph15_93_reg;
reg [31:0] filter_slice_packed__preheader5_indvar146;
reg [31:0] filter_slice_packed__preheader5_indvar146_reg;
reg [31:0] filter_slice_packed__preheader5_tmp148;
reg [31:0] filter_slice_packed__preheader5_tmp148_reg;
reg [31:0] filter_slice_packed__preheader5_tmp149;
reg [31:0] filter_slice_packed__preheader5_tmp149_reg;
reg [31:0] filter_slice_packed__preheader5_tmp152;
reg [31:0] filter_slice_packed__preheader5_tmp152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_scevgep154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_scevgep154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_scevgep155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_scevgep155_reg;
reg [31:0] filter_slice_packed__preheader5_94;
reg [31:0] filter_slice_packed__preheader5_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_95_reg;
reg [31:0] filter_slice_packed__preheader5_96;
reg [31:0] filter_slice_packed__preheader5_96_reg;
reg [31:0] filter_slice_packed__preheader5_97;
reg [31:0] filter_slice_packed__preheader5_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_98_reg;
reg [31:0] filter_slice_packed__preheader5_99;
reg [31:0] filter_slice_packed__preheader5_99_reg;
reg [31:0] filter_slice_packed__preheader5_100;
reg [31:0] filter_slice_packed__preheader5_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader5_101_reg;
reg [31:0] filter_slice_packed__preheader5_102;
reg [31:0] filter_slice_packed__preheader5_102_reg;
reg [31:0] filter_slice_packed__preheader5_103;
reg [31:0] filter_slice_packed__preheader5_103_reg;
reg [31:0] filter_slice_packed__preheader5_104;
reg [31:0] filter_slice_packed__preheader5_104_reg;
reg [31:0] filter_slice_packed__preheader5_105;
reg [31:0] filter_slice_packed__preheader5_105_reg;
reg  filter_slice_packed__preheader5_106;
reg  filter_slice_packed__preheader5_106_reg;
reg [31:0] filter_slice_packed__preheader5_indvar_next147;
reg [31:0] filter_slice_packed__preheader5_indvar_next147_reg;
reg [31:0] filter_slice_packed__preheader4_indvar162;
reg [31:0] filter_slice_packed__preheader4_indvar162_reg;
reg [31:0] filter_slice_packed__preheader4_tmp164;
reg [31:0] filter_slice_packed__preheader4_tmp164_reg;
reg [31:0] filter_slice_packed__preheader4_tmp165;
reg [31:0] filter_slice_packed__preheader4_tmp165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_scevgep166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_scevgep166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_scevgep167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_scevgep167_reg;
reg [31:0] filter_slice_packed__preheader4_tmp174;
reg [31:0] filter_slice_packed__preheader4_tmp174_reg;
reg [31:0] filter_slice_packed__preheader4_107;
reg [31:0] filter_slice_packed__preheader4_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_108_reg;
reg [31:0] filter_slice_packed__preheader4_109;
reg [31:0] filter_slice_packed__preheader4_109_reg;
reg [31:0] filter_slice_packed__preheader4_110;
reg [31:0] filter_slice_packed__preheader4_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_111_reg;
reg [31:0] filter_slice_packed__preheader4_112;
reg [31:0] filter_slice_packed__preheader4_112_reg;
reg [31:0] filter_slice_packed__preheader4_113;
reg [31:0] filter_slice_packed__preheader4_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed__preheader4_114_reg;
reg [31:0] filter_slice_packed__preheader4_115;
reg [31:0] filter_slice_packed__preheader4_115_reg;
reg [31:0] filter_slice_packed__preheader4_116;
reg [31:0] filter_slice_packed__preheader4_116_reg;
reg [31:0] filter_slice_packed__preheader4_117;
reg [31:0] filter_slice_packed__preheader4_117_reg;
reg  filter_slice_packed__preheader4_118;
reg  filter_slice_packed__preheader4_118_reg;
reg [31:0] filter_slice_packed__preheader4_indvar_next163;
reg [31:0] filter_slice_packed__preheader4_indvar_next163_reg;
reg [31:0] filter_slice_packed___crit_edge16_119;
reg [31:0] filter_slice_packed___crit_edge16_119_reg;
reg [31:0] filter_slice_packed___crit_edge16__pre179;
reg [31:0] filter_slice_packed___crit_edge16__pre179_reg;
reg [31:0] filter_slice_packed___crit_edge16__pre180;
reg [31:0] filter_slice_packed___crit_edge16__pre180_reg;
reg [31:0] filter_slice_packed_120_121;
reg [31:0] filter_slice_packed_120_121_reg;
reg [31:0] filter_slice_packed_120_122;
reg [31:0] filter_slice_packed_120_122_reg;
reg [31:0] filter_slice_packed_120_123;
reg [31:0] filter_slice_packed_120_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_120_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_120_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_120_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_120_125_reg;
reg [31:0] filter_slice_packed_120_indvar_next176;
reg [31:0] filter_slice_packed_120_indvar_next176_reg;
reg  filter_slice_packed_120_exitcond178;
reg  filter_slice_packed_120_exitcond178_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] filter_slice_packed_signed_divide_32_0_op0;
reg [31:0] filter_slice_packed_signed_divide_32_0_op1;
wire [31:0] lpm_divide_filter_slice_packed_0_20_temp_out;
wire [31:0] filter_slice_packed_0_20_unused;
reg  lpm_divide_filter_slice_packed_0_20_en;
reg [31:0] lpm_divide_filter_slice_packed_0_20_out;
reg [31:0] filter_slice_packed_signed_divide_32_0;
reg  lpm_mult_filter_slice_packed_0_16_en;
reg [31:0] filter_slice_packed_0_16_stage0_reg;
reg  lpm_mult_filter_slice_packed_0_19_en;
reg [31:0] filter_slice_packed_0_19_stage0_reg;
reg  lpm_divide_filter_slice_packed_0_17_en;
reg  lpm_mult_filter_slice_packed__lr_ph12_tmp98_en;
reg [31:0] filter_slice_packed__lr_ph12_tmp98_stage0_reg;
reg  lpm_mult_filter_slice_packed__lr_ph12_tmp112_en;
reg [31:0] filter_slice_packed__lr_ph12_tmp112_stage0_reg;
reg  lpm_mult_filter_slice_packed__lr_ph12_39_en;
reg [31:0] filter_slice_packed__lr_ph12_39_stage0_reg;
reg  lpm_mult_filter_slice_packed_43_tmp97_en;
reg [31:0] filter_slice_packed_43_tmp97_stage0_reg;
reg  lpm_mult_filter_slice_packed_43_tmp111_en;
reg [31:0] filter_slice_packed_43_tmp111_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader2_tmp125_en;
reg [31:0] filter_slice_packed__preheader2_tmp125_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader1_tmp96_en;
reg [31:0] filter_slice_packed__preheader1_tmp96_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader13_lr_ph_78_en;
reg [31:0] filter_slice_packed__preheader13_lr_ph_78_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader13_lr_ph_80_en;
reg [31:0] filter_slice_packed__preheader13_lr_ph_80_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader13_90_en;
reg [31:0] filter_slice_packed__preheader13_90_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader5_tmp148_en;
reg [31:0] filter_slice_packed__preheader5_tmp148_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader5_105_en;
reg [31:0] filter_slice_packed__preheader5_105_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader4_tmp164_en;
reg [31:0] filter_slice_packed__preheader4_tmp164_stage0_reg;
reg  lpm_mult_filter_slice_packed__preheader4_117_en;
reg [31:0] filter_slice_packed__preheader4_117_stage0_reg;

/*   %20 = sdiv i32 %19, %nb_jobs*/
lpm_divide lpm_divide_filter_slice_packed_0_20 (
	.quotient (lpm_divide_filter_slice_packed_0_20_temp_out),
	.remain (filter_slice_packed_0_20_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_filter_slice_packed_0_20_en),
	.numer (filter_slice_packed_signed_divide_32_0_op0),
	.denom (filter_slice_packed_signed_divide_32_0_op1)
);

defparam
	lpm_divide_filter_slice_packed_0_20.lpm_pipeline = 32,
	lpm_divide_filter_slice_packed_0_20.lpm_widthn = 32,
	lpm_divide_filter_slice_packed_0_20.lpm_widthd = 32,
	lpm_divide_filter_slice_packed_0_20.lpm_drepresentation = "SIGNED",
	lpm_divide_filter_slice_packed_0_20.lpm_nrepresentation = "SIGNED",
	lpm_divide_filter_slice_packed_0_20.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_23_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_67_101;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_67_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_23_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader_40;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader_40;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader_40) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_41;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader_40) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_171;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_41;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_42;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_42;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_43;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_43;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_44;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_44;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_45;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_45;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_46;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_46;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_47;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph12_47;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph12_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_43_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_43_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_43_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_43_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_43_49;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_43_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_43_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_43_49;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_43_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_43_49) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__lr_ph12_40_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_43_49) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__lr_ph12_40_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__lr_ph12_or_cond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__lr_ph12_or_cond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_79;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_58;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_58;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_59;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_59;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_60;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_60;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_61;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_61;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_62;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_62;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_63;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_63;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_64;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_64;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_65;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_65;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_66;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_66;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_67;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_67;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_68;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_68;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_69;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_69;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_70;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_70;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_71;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_71;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_72;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_72;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_73;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_73;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_74;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_74;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_75;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_75;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_76;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_76;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_77;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_77;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_77) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader2_56_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge182_78;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge182_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_77) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader2_56_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge182_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge182_78;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge182_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge182_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader2_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader2_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_79;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_80;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_80;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_81;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_81;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_82;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_82;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_83;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_83;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_84;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_84;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_85;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_85;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_86;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_86;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_87;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_87;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_88;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_88;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_89;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_89;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_90;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_90;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_91;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_91;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_92;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_92;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_93;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_93;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_94;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_94;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_95;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_95;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader1_66_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge181_97;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge181_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader1_66_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge181_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge181_97;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge181_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge181_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader1_79;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_loopexit1_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed___crit_edge_exitcond == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed___crit_edge_exitcond == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_43_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_67_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_67_101;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_67_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_67_101) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_67_101) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_171;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_109;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_109;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_110;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_110;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_111;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_120_168;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_120_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_111;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_112;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_112;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_113;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_113;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_114;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_114;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_115;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__lr_ph15_115;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__lr_ph15_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_115) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_lr_ph_or_cond9_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_115) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_lr_ph_or_cond9_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_118;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_142;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_118;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_119;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_119;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_120;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_120;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_121;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_121;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_122;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_122;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_123;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_123;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_124;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_124;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_125;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_125;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_126;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_126;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_127;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_127;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_128;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_128;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_129;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_129;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_130;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_130;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_131;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_131;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_132;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_132;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_133;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_133;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_134;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_134;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_135;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_135;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_136;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_136;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_137;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_137;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_138;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_138;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_139;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_139;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_140;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_140;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_141;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_141;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader5_106 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader5_118;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader5_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader5_106 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_142;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_143;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_143;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_144;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_144;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_145;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_145;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_146;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_146;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_147;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_147;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_148;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_148;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_149;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_149;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_150;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_150;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_151;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_151;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_152;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_152;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_153;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_153;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_155;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_155;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_156;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_156;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_158;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_158;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_159;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_159;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_160;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_160;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_161;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_161;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_162;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_162;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader4_118 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader4_142;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader4_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader4_118 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_165;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_165;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_165;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_166;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_166;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_167;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB___crit_edge16_167;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB___crit_edge16_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_120_168;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_120_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB_120_168;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB_120_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__preheader13_109;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__preheader13_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_loopexit_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_171;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_loopexit3_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_171;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_packed_BB__loopexit_171;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_packed_BB__loopexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
begin
filter_slice_packed_0_1 = arg_ctx;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
filter_slice_packed_0_1_reg <= filter_slice_packed_0_1;
if (reset == 1'b0 && ^(filter_slice_packed_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_1_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
begin
filter_slice_packed_0_2 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
filter_slice_packed_0_2_reg <= filter_slice_packed_0_2;
if (reset == 1'b0 && ^(filter_slice_packed_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_2_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %3 = getelementptr inbounds i8* %arg, i32 4*/
begin
filter_slice_packed_0_3 = (arg_arg + (1 * 32'd4));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %3 = getelementptr inbounds i8* %arg, i32 4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
filter_slice_packed_0_3_reg <= filter_slice_packed_0_3;
if (reset == 1'b0 && ^(filter_slice_packed_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_3_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %4 = bitcast i8* %3 to %struct.TYPE_9__***/
begin
filter_slice_packed_0_4 = filter_slice_packed_0_3;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %4 = bitcast i8* %3 to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
filter_slice_packed_0_4_reg <= filter_slice_packed_0_4;
if (reset == 1'b0 && ^(filter_slice_packed_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_4_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
begin
filter_slice_packed_0_5 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
filter_slice_packed_0_5_reg <= filter_slice_packed_0_5;
if (reset == 1'b0 && ^(filter_slice_packed_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_5_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %6 = bitcast i8* %arg to %struct.TYPE_9__***/
begin
filter_slice_packed_0_6 = arg_arg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %6 = bitcast i8* %arg to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
filter_slice_packed_0_6_reg <= filter_slice_packed_0_6;
if (reset == 1'b0 && ^(filter_slice_packed_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_6_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
begin
filter_slice_packed_0_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
filter_slice_packed_0_7_reg <= filter_slice_packed_0_7;
if (reset == 1'b0 && ^(filter_slice_packed_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_7_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %8 = icmp eq %struct.TYPE_9__* %7, %5*/
begin
filter_slice_packed_0_8 = (filter_slice_packed_0_7 == filter_slice_packed_0_5_reg);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %8 = icmp eq %struct.TYPE_9__* %7, %5*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
filter_slice_packed_0_8_reg <= filter_slice_packed_0_8;
if (reset == 1'b0 && ^(filter_slice_packed_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_8_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 0*/
begin
filter_slice_packed_0_9 = filter_slice_packed_0_2;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
filter_slice_packed_0_9_reg <= filter_slice_packed_0_9;
if (reset == 1'b0 && ^(filter_slice_packed_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_9_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
begin
filter_slice_packed_0_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_7))
begin
filter_slice_packed_0_10_reg <= filter_slice_packed_0_10;
if (reset == 1'b0 && ^(filter_slice_packed_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_10_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 1*/
begin
filter_slice_packed_0_11 = (filter_slice_packed_0_2 + 4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
filter_slice_packed_0_11_reg <= filter_slice_packed_0_11;
if (reset == 1'b0 && ^(filter_slice_packed_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_11_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
begin
filter_slice_packed_0_12 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_0_12_reg <= filter_slice_packed_0_12;
if (reset == 1'b0 && ^(filter_slice_packed_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_12_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
begin
filter_slice_packed_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_8))
begin
filter_slice_packed_0_13_reg <= filter_slice_packed_0_13;
if (reset == 1'b0 && ^(filter_slice_packed_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_13_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
begin
filter_slice_packed_0_14 = filter_slice_packed_0_5;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
filter_slice_packed_0_14_reg <= filter_slice_packed_0_14;
if (reset == 1'b0 && ^(filter_slice_packed_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_14_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
begin
filter_slice_packed_0_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
filter_slice_packed_0_15_reg <= filter_slice_packed_0_15;
if (reset == 1'b0 && ^(filter_slice_packed_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_15_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_0_16 = filter_slice_packed_0_16_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_0_16_reg <= filter_slice_packed_0_16;
if (reset == 1'b0 && ^(filter_slice_packed_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_16_reg"); $finish; end
end
/* filter_slice_packed: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_0_16_reg <= filter_slice_packed_0_16;
if (reset == 1'b0 && ^(filter_slice_packed_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_16_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_0_17 = filter_slice_packed_signed_divide_32_0;
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_38))
begin
filter_slice_packed_0_17_reg <= filter_slice_packed_0_17;
if (reset == 1'b0 && ^(filter_slice_packed_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_17_reg"); $finish; end
end
/* filter_slice_packed: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_38))
begin
filter_slice_packed_0_17_reg <= filter_slice_packed_0_17;
if (reset == 1'b0 && ^(filter_slice_packed_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_17_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %18 = add nsw i32 %jobnr, 1*/
begin
filter_slice_packed_0_18 = (arg_jobnr + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %18 = add nsw i32 %jobnr, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
filter_slice_packed_0_18_reg <= filter_slice_packed_0_18;
if (reset == 1'b0 && ^(filter_slice_packed_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_18_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_0_19 = filter_slice_packed_0_19_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_0_19_reg <= filter_slice_packed_0_19;
if (reset == 1'b0 && ^(filter_slice_packed_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_19_reg"); $finish; end
end
/* filter_slice_packed: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_0_19_reg <= filter_slice_packed_0_19;
if (reset == 1'b0 && ^(filter_slice_packed_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_19_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_0_20 = filter_slice_packed_signed_divide_32_0;
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_39))
begin
filter_slice_packed_0_20_reg <= filter_slice_packed_0_20;
if (reset == 1'b0 && ^(filter_slice_packed_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_20_reg"); $finish; end
end
/* filter_slice_packed: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_39))
begin
filter_slice_packed_0_20_reg <= filter_slice_packed_0_20;
if (reset == 1'b0 && ^(filter_slice_packed_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_20_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %21 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 3*/
begin
filter_slice_packed_0_21 = (filter_slice_packed_0_2 + 12);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %21 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
filter_slice_packed_0_21_reg <= filter_slice_packed_0_21;
if (reset == 1'b0 && ^(filter_slice_packed_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_21_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
begin
filter_slice_packed_0_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_8))
begin
filter_slice_packed_0_22_reg <= filter_slice_packed_0_22;
if (reset == 1'b0 && ^(filter_slice_packed_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_22_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %23 = icmp eq i32 %22, 0*/
begin
filter_slice_packed_0_23 = (filter_slice_packed_0_22 == 32'd0);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %23 = icmp eq i32 %22, 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_8))
begin
filter_slice_packed_0_23_reg <= filter_slice_packed_0_23;
if (reset == 1'b0 && ^(filter_slice_packed_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_23_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %24 = icmp slt i32 %17, %20*/
begin
filter_slice_packed_0_24 = ($signed(filter_slice_packed_0_17_reg) < $signed(filter_slice_packed_0_20));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %24 = icmp slt i32 %17, %20*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_39))
begin
filter_slice_packed_0_24_reg <= filter_slice_packed_0_24;
if (reset == 1'b0 && ^(filter_slice_packed_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_0_24_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %25 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
begin
filter_slice_packed__lr_ph12_25 = (filter_slice_packed_0_7_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %25 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_25_reg <= filter_slice_packed__lr_ph12_25;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_25_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_26 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
filter_slice_packed__lr_ph12_26_reg <= filter_slice_packed__lr_ph12_26;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_26_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_27 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_27_reg <= filter_slice_packed__lr_ph12_27;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_27_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %28 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
begin
filter_slice_packed__lr_ph12_28 = (filter_slice_packed_0_7_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %28 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_28_reg <= filter_slice_packed__lr_ph12_28;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_28_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_29 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
filter_slice_packed__lr_ph12_29_reg <= filter_slice_packed__lr_ph12_29;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_29_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
begin
filter_slice_packed__lr_ph12_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
filter_slice_packed__lr_ph12_30_reg <= filter_slice_packed__lr_ph12_30;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_30_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %31 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
begin
filter_slice_packed__lr_ph12_31 = (filter_slice_packed_0_5_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %31 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_31_reg <= filter_slice_packed__lr_ph12_31;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_31_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_32 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
filter_slice_packed__lr_ph12_32_reg <= filter_slice_packed__lr_ph12_32;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_32_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_33 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47))
begin
filter_slice_packed__lr_ph12_33_reg <= filter_slice_packed__lr_ph12_33;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_33_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %34 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
begin
filter_slice_packed__lr_ph12_34 = (filter_slice_packed_0_5_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %34 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_34_reg <= filter_slice_packed__lr_ph12_34;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_34_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph12_35 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
filter_slice_packed__lr_ph12_35_reg <= filter_slice_packed__lr_ph12_35;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_35_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
begin
filter_slice_packed__lr_ph12_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
filter_slice_packed__lr_ph12_36_reg <= filter_slice_packed__lr_ph12_36;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_36_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %37 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
begin
filter_slice_packed__lr_ph12_37 = (filter_slice_packed_0_5_reg + 12);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %37 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_37_reg <= filter_slice_packed__lr_ph12_37;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_37_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
begin
filter_slice_packed__lr_ph12_38 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_38_reg <= filter_slice_packed__lr_ph12_38;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_38_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__lr_ph12_39 = filter_slice_packed__lr_ph12_39_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %39 = mul nsw i32 %38, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47))
begin
filter_slice_packed__lr_ph12_39_reg <= filter_slice_packed__lr_ph12_39;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_39_reg"); $finish; end
end
/* filter_slice_packed: %.lr.ph12*/
/*   %39 = mul nsw i32 %38, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47))
begin
filter_slice_packed__lr_ph12_39_reg <= filter_slice_packed__lr_ph12_39;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_39_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %40 = icmp sgt i32 %39, 0*/
begin
filter_slice_packed__lr_ph12_40 = ($signed(filter_slice_packed__lr_ph12_39) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %40 = icmp sgt i32 %39, 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47))
begin
filter_slice_packed__lr_ph12_40_reg <= filter_slice_packed__lr_ph12_40;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_40_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %41 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
begin
filter_slice_packed__lr_ph12_41 = (filter_slice_packed_0_2_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %41 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_41_reg <= filter_slice_packed__lr_ph12_41;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_41_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %.not = xor i1 %8, true*/
begin
filter_slice_packed__lr_ph12__not = (filter_slice_packed_0_8_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %.not = xor i1 %8, true*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12__not_reg <= filter_slice_packed__lr_ph12__not;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12__not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12__not_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %42 = icmp eq i32 %10, 4*/
begin
filter_slice_packed__lr_ph12_42 = (filter_slice_packed_0_10_reg == 32'd4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %42 = icmp eq i32 %10, 4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_42_reg <= filter_slice_packed__lr_ph12_42;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_42_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %or.cond = and i1 %42, %.not*/
begin
filter_slice_packed__lr_ph12_or_cond = (filter_slice_packed__lr_ph12_42 & filter_slice_packed__lr_ph12__not);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %or.cond = and i1 %42, %.not*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_or_cond_reg <= filter_slice_packed__lr_ph12_or_cond;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp95 = sub i32 %20, %17*/
begin
filter_slice_packed__lr_ph12_tmp95 = (filter_slice_packed_0_20_reg - filter_slice_packed_0_17_reg);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp95 = sub i32 %20, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
filter_slice_packed__lr_ph12_tmp95_reg <= filter_slice_packed__lr_ph12_tmp95;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp95_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__lr_ph12_tmp98 = filter_slice_packed__lr_ph12_tmp98_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp98 = mul i32 %36, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp98_reg <= filter_slice_packed__lr_ph12_tmp98;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp98_reg"); $finish; end
end
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp98 = mul i32 %36, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp98_reg <= filter_slice_packed__lr_ph12_tmp98;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp99 = add i32 %13, %tmp98*/
begin
filter_slice_packed__lr_ph12_tmp99 = (filter_slice_packed_0_13_reg + filter_slice_packed__lr_ph12_tmp98);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp99 = add i32 %13, %tmp98*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp99_reg <= filter_slice_packed__lr_ph12_tmp99;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp99_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__lr_ph12_tmp112 = filter_slice_packed__lr_ph12_tmp112_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp112 = mul i32 %30, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp112_reg <= filter_slice_packed__lr_ph12_tmp112;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp112_reg"); $finish; end
end
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp112 = mul i32 %30, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp112_reg <= filter_slice_packed__lr_ph12_tmp112;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp112_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp113 = add i32 %13, %tmp112*/
begin
filter_slice_packed__lr_ph12_tmp113 = (filter_slice_packed_0_13_reg + filter_slice_packed__lr_ph12_tmp112);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp113 = add i32 %13, %tmp112*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_46))
begin
filter_slice_packed__lr_ph12_tmp113_reg <= filter_slice_packed__lr_ph12_tmp113;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph12_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph12_tmp113_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %43*/
/*   %indvar25 = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next26, %._crit_edge ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed_43_indvar25 = 32'd0;
end
/* filter_slice_packed: %43*/
/*   %indvar25 = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next26, %._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed___crit_edge_exitcond == 1'd0))) */
begin
filter_slice_packed_43_indvar25 = filter_slice_packed___crit_edge_indvar_next26;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %indvar25 = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next26, %._crit_edge ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed_43_indvar25_reg <= filter_slice_packed_43_indvar25;
if (reset == 1'b0 && ^(filter_slice_packed_43_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_indvar25_reg"); $finish; end
end
/* filter_slice_packed: %43*/
/*   %indvar25 = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next26, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed___crit_edge_exitcond == 1'd0)))
begin
filter_slice_packed_43_indvar25_reg <= filter_slice_packed_43_indvar25;
if (reset == 1'b0 && ^(filter_slice_packed_43_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_indvar25_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_43_tmp97 = filter_slice_packed_43_tmp97_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp97 = mul i32 %36, %indvar25*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp97_reg <= filter_slice_packed_43_tmp97;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp97_reg"); $finish; end
end
/* filter_slice_packed: %43*/
/*   %tmp97 = mul i32 %36, %indvar25*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp97_reg <= filter_slice_packed_43_tmp97;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp97_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %43*/
/*   %tmp100 = add i32 %tmp99, %tmp97*/
begin
filter_slice_packed_43_tmp100 = (filter_slice_packed__lr_ph12_tmp99_reg + filter_slice_packed_43_tmp97);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp100 = add i32 %tmp99, %tmp97*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp100_reg <= filter_slice_packed_43_tmp100;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp100_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed_43_tmp111 = filter_slice_packed_43_tmp111_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp111 = mul i32 %30, %indvar25*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp111_reg <= filter_slice_packed_43_tmp111;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp111_reg"); $finish; end
end
/* filter_slice_packed: %43*/
/*   %tmp111 = mul i32 %30, %indvar25*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp111_reg <= filter_slice_packed_43_tmp111;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp111_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %43*/
/*   %tmp114 = add i32 %tmp113, %tmp111*/
begin
filter_slice_packed_43_tmp114 = (filter_slice_packed__lr_ph12_tmp113_reg + filter_slice_packed_43_tmp111);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp114 = add i32 %tmp113, %tmp111*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_43_49))
begin
filter_slice_packed_43_tmp114_reg <= filter_slice_packed_43_tmp114;
if (reset == 1'b0 && ^(filter_slice_packed_43_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_43_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph_44 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52))
begin
filter_slice_packed__lr_ph_44_reg <= filter_slice_packed__lr_ph_44;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph_44_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph_45 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_54))
begin
filter_slice_packed__lr_ph_45_reg <= filter_slice_packed__lr_ph_45;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph_45_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %indvar = phi i32 [ %indvar.next, %._crit_edge182 ], [ 0, %.preheader2.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader2_indvar = 32'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   %indvar = phi i32 [ %indvar.next, %._crit_edge182 ], [ 0, %.preheader2.preheader ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge182_78) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed__preheader2_indvar = filter_slice_packed___crit_edge182_indvar_next;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %indvar = phi i32 [ %indvar.next, %._crit_edge182 ], [ 0, %.preheader2.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader2_indvar_reg <= filter_slice_packed__preheader2_indvar;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_indvar_reg"); $finish; end
end
/* filter_slice_packed: %.preheader2*/
/*   %indvar = phi i32 [ %indvar.next, %._crit_edge182 ], [ 0, %.preheader2.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge182_78) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader2_indvar_reg <= filter_slice_packed__preheader2_indvar;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_indvar_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader2_tmp125 = filter_slice_packed__preheader2_tmp125_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp125 = mul i32 %10, %indvar*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_tmp125_reg <= filter_slice_packed__preheader2_tmp125;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_tmp125_reg"); $finish; end
end
/* filter_slice_packed: %.preheader2*/
/*   %tmp125 = mul i32 %10, %indvar*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_tmp125_reg <= filter_slice_packed__preheader2_tmp125;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_tmp125_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp126 = add i32 %tmp100, %tmp125*/
begin
filter_slice_packed__preheader2_tmp126 = (filter_slice_packed_43_tmp100_reg + filter_slice_packed__preheader2_tmp125);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp126 = add i32 %tmp100, %tmp125*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_tmp126_reg <= filter_slice_packed__preheader2_tmp126;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %scevgep62 = getelementptr i32* %33, i32 %tmp126*/
begin
filter_slice_packed__preheader2_scevgep62 = (filter_slice_packed__lr_ph12_33_reg + (4 * filter_slice_packed__preheader2_tmp126_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %scevgep62 = getelementptr i32* %33, i32 %tmp126*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
filter_slice_packed__preheader2_scevgep62_reg <= filter_slice_packed__preheader2_scevgep62;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_scevgep62_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp136 = add i32 %tmp114, %tmp125*/
begin
filter_slice_packed__preheader2_tmp136 = (filter_slice_packed_43_tmp114_reg + filter_slice_packed__preheader2_tmp125);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp136 = add i32 %tmp114, %tmp125*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_tmp136_reg <= filter_slice_packed__preheader2_tmp136;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_tmp136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_tmp136_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %scevgep58 = getelementptr i32* %27, i32 %tmp136*/
begin
filter_slice_packed__preheader2_scevgep58 = (filter_slice_packed__lr_ph12_27_reg + (4 * filter_slice_packed__preheader2_tmp136_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %scevgep58 = getelementptr i32* %27, i32 %tmp136*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
filter_slice_packed__preheader2_scevgep58_reg <= filter_slice_packed__preheader2_scevgep58;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp38 = add i32 %10, %tmp125*/
begin
filter_slice_packed__preheader2_tmp38 = (filter_slice_packed_0_10_reg + filter_slice_packed__preheader2_tmp125);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp38 = add i32 %10, %tmp125*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_tmp38_reg <= filter_slice_packed__preheader2_tmp38;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_tmp38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_tmp38_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_46 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
filter_slice_packed__preheader2_46_reg <= filter_slice_packed__preheader2_46;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_46_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %47 = getelementptr inbounds i32* %45, i32 %46*/
begin
filter_slice_packed__preheader2_47 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader2_46));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %47 = getelementptr inbounds i32* %45, i32 %46*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
filter_slice_packed__preheader2_47_reg <= filter_slice_packed__preheader2_47;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_47_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_48 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
filter_slice_packed__preheader2_48_reg <= filter_slice_packed__preheader2_48;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_48_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_49 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
filter_slice_packed__preheader2_49_reg <= filter_slice_packed__preheader2_49;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_49_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %50 = getelementptr inbounds i32* %45, i32 %49*/
begin
filter_slice_packed__preheader2_50 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader2_49));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %50 = getelementptr inbounds i32* %45, i32 %49*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
filter_slice_packed__preheader2_50_reg <= filter_slice_packed__preheader2_50;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_50_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_51 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
filter_slice_packed__preheader2_51_reg <= filter_slice_packed__preheader2_51;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_51_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_52 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
filter_slice_packed__preheader2_52_reg <= filter_slice_packed__preheader2_52;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_52_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %53 = getelementptr inbounds i32* %45, i32 %52*/
begin
filter_slice_packed__preheader2_53 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader2_52));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %53 = getelementptr inbounds i32* %45, i32 %52*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
filter_slice_packed__preheader2_53_reg <= filter_slice_packed__preheader2_53;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_53_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
filter_slice_packed__preheader2_54_reg <= filter_slice_packed__preheader2_54;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_54_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader2_55 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
filter_slice_packed__preheader2_55_reg <= filter_slice_packed__preheader2_55;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_55_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader2*/
/*   %56 = icmp slt i32 %tmp38, %39*/
begin
filter_slice_packed__preheader2_56 = ($signed(filter_slice_packed__preheader2_tmp38) < $signed(filter_slice_packed__lr_ph12_39_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %56 = icmp slt i32 %tmp38, %39*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_58))
begin
filter_slice_packed__preheader2_56_reg <= filter_slice_packed__preheader2_56;
if (reset == 1'b0 && ^(filter_slice_packed__preheader2_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader2_56_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge182*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
filter_slice_packed___crit_edge182_indvar_next = (filter_slice_packed__preheader2_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge182*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge182_78))
begin
filter_slice_packed___crit_edge182_indvar_next_reg <= filter_slice_packed___crit_edge182_indvar_next;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge182_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge182_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %indvar63 = phi i32 [ %indvar.next64, %._crit_edge181 ], [ 0, %.preheader1.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader1_indvar63 = 32'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   %indvar63 = phi i32 [ %indvar.next64, %._crit_edge181 ], [ 0, %.preheader1.preheader ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge181_97) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed__preheader1_indvar63 = filter_slice_packed___crit_edge181_indvar_next64;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %indvar63 = phi i32 [ %indvar.next64, %._crit_edge181 ], [ 0, %.preheader1.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader1_indvar63_reg <= filter_slice_packed__preheader1_indvar63;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_indvar63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_indvar63_reg"); $finish; end
end
/* filter_slice_packed: %.preheader1*/
/*   %indvar63 = phi i32 [ %indvar.next64, %._crit_edge181 ], [ 0, %.preheader1.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge181_97) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader1_indvar63_reg <= filter_slice_packed__preheader1_indvar63;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_indvar63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_indvar63_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader1_tmp96 = filter_slice_packed__preheader1_tmp96_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp96 = mul i32 %10, %indvar63*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_tmp96_reg <= filter_slice_packed__preheader1_tmp96;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_tmp96_reg"); $finish; end
end
/* filter_slice_packed: %.preheader1*/
/*   %tmp96 = mul i32 %10, %indvar63*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_tmp96_reg <= filter_slice_packed__preheader1_tmp96;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_tmp96_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp101 = add i32 %tmp100, %tmp96*/
begin
filter_slice_packed__preheader1_tmp101 = (filter_slice_packed_43_tmp100_reg + filter_slice_packed__preheader1_tmp96);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp101 = add i32 %tmp100, %tmp96*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_tmp101_reg <= filter_slice_packed__preheader1_tmp101;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_tmp101_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %scevgep93 = getelementptr i32* %33, i32 %tmp101*/
begin
filter_slice_packed__preheader1_scevgep93 = (filter_slice_packed__lr_ph12_33_reg + (4 * filter_slice_packed__preheader1_tmp101_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %scevgep93 = getelementptr i32* %33, i32 %tmp101*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
filter_slice_packed__preheader1_scevgep93_reg <= filter_slice_packed__preheader1_scevgep93;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_scevgep93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_scevgep93_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp115 = add i32 %tmp114, %tmp96*/
begin
filter_slice_packed__preheader1_tmp115 = (filter_slice_packed_43_tmp114_reg + filter_slice_packed__preheader1_tmp96);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp115 = add i32 %tmp114, %tmp96*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_tmp115_reg <= filter_slice_packed__preheader1_tmp115;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_tmp115_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %scevgep89 = getelementptr i32* %27, i32 %tmp115*/
begin
filter_slice_packed__preheader1_scevgep89 = (filter_slice_packed__lr_ph12_27_reg + (4 * filter_slice_packed__preheader1_tmp115_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %scevgep89 = getelementptr i32* %27, i32 %tmp115*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
filter_slice_packed__preheader1_scevgep89_reg <= filter_slice_packed__preheader1_scevgep89;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_scevgep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_scevgep89_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp94 = add i32 %10, %tmp96*/
begin
filter_slice_packed__preheader1_tmp94 = (filter_slice_packed_0_10_reg + filter_slice_packed__preheader1_tmp96);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp94 = add i32 %10, %tmp96*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_tmp94_reg <= filter_slice_packed__preheader1_tmp94;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_tmp94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_tmp94_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_57 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
filter_slice_packed__preheader1_57_reg <= filter_slice_packed__preheader1_57;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_57_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %58 = getelementptr inbounds i32* %45, i32 %57*/
begin
filter_slice_packed__preheader1_58 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader1_57));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %58 = getelementptr inbounds i32* %45, i32 %57*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
filter_slice_packed__preheader1_58_reg <= filter_slice_packed__preheader1_58;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_58_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
filter_slice_packed__preheader1_59_reg <= filter_slice_packed__preheader1_59;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_59_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_60 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
filter_slice_packed__preheader1_60_reg <= filter_slice_packed__preheader1_60;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_60_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %61 = getelementptr inbounds i32* %45, i32 %60*/
begin
filter_slice_packed__preheader1_61 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader1_60));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %61 = getelementptr inbounds i32* %45, i32 %60*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
filter_slice_packed__preheader1_61_reg <= filter_slice_packed__preheader1_61;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_61_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_62 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
filter_slice_packed__preheader1_62_reg <= filter_slice_packed__preheader1_62;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_62_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_63 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
filter_slice_packed__preheader1_63_reg <= filter_slice_packed__preheader1_63;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_63_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %64 = getelementptr inbounds i32* %45, i32 %63*/
begin
filter_slice_packed__preheader1_64 = (filter_slice_packed__lr_ph_45_reg + (4 * filter_slice_packed__preheader1_63));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %64 = getelementptr inbounds i32* %45, i32 %63*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
filter_slice_packed__preheader1_64_reg <= filter_slice_packed__preheader1_64;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_64_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader1_65 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
filter_slice_packed__preheader1_65_reg <= filter_slice_packed__preheader1_65;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_65_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader1*/
/*   %66 = icmp slt i32 %tmp94, %39*/
begin
filter_slice_packed__preheader1_66 = ($signed(filter_slice_packed__preheader1_tmp94) < $signed(filter_slice_packed__lr_ph12_39_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %66 = icmp slt i32 %tmp94, %39*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_80))
begin
filter_slice_packed__preheader1_66_reg <= filter_slice_packed__preheader1_66;
if (reset == 1'b0 && ^(filter_slice_packed__preheader1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader1_66_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge181*/
/*   %indvar.next64 = add i32 %indvar63, 1*/
begin
filter_slice_packed___crit_edge181_indvar_next64 = (filter_slice_packed__preheader1_indvar63_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge181*/
/*   %indvar.next64 = add i32 %indvar63, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge181_97))
begin
filter_slice_packed___crit_edge181_indvar_next64_reg <= filter_slice_packed___crit_edge181_indvar_next64;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge181_indvar_next64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge181_indvar_next64_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge*/
/*   %indvar.next26 = add i32 %indvar25, 1*/
begin
filter_slice_packed___crit_edge_indvar_next26 = (filter_slice_packed_43_indvar25_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge*/
/*   %indvar.next26 = add i32 %indvar25, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100))
begin
filter_slice_packed___crit_edge_indvar_next26_reg <= filter_slice_packed___crit_edge_indvar_next26;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge_indvar_next26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge_indvar_next26_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge*/
/*   %exitcond = icmp eq i32 %indvar.next26, %tmp95*/
begin
filter_slice_packed___crit_edge_exitcond = (filter_slice_packed___crit_edge_indvar_next26 == filter_slice_packed__lr_ph12_tmp95_reg);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge*/
/*   %exitcond = icmp eq i32 %indvar.next26, %tmp95*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge_100))
begin
filter_slice_packed___crit_edge_exitcond_reg <= filter_slice_packed___crit_edge_exitcond;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %68 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
begin
filter_slice_packed__preheader13_lr_ph_68 = (filter_slice_packed_0_5_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %68 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_68_reg <= filter_slice_packed__preheader13_lr_ph_68;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_68_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %69 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
begin
filter_slice_packed__preheader13_lr_ph_69 = (filter_slice_packed_0_7_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %69 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_69_reg <= filter_slice_packed__preheader13_lr_ph_69;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_69_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_70 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
filter_slice_packed__preheader13_lr_ph_70_reg <= filter_slice_packed__preheader13_lr_ph_70;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_70_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
begin
filter_slice_packed__preheader13_lr_ph_71 = (filter_slice_packed_0_5_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_71_reg <= filter_slice_packed__preheader13_lr_ph_71;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_71_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_72 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
filter_slice_packed__preheader13_lr_ph_72_reg <= filter_slice_packed__preheader13_lr_ph_72;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_72_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %73 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
begin
filter_slice_packed__preheader13_lr_ph_73 = (filter_slice_packed_0_7_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %73 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_73_reg <= filter_slice_packed__preheader13_lr_ph_73;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_73_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader13_lr_ph_74 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
filter_slice_packed__preheader13_lr_ph_74_reg <= filter_slice_packed__preheader13_lr_ph_74;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_74_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_75 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
filter_slice_packed__preheader13_lr_ph_75_reg <= filter_slice_packed__preheader13_lr_ph_75;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_75_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader13_lr_ph_76 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
filter_slice_packed__preheader13_lr_ph_76_reg <= filter_slice_packed__preheader13_lr_ph_76;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_76_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_77 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
filter_slice_packed__preheader13_lr_ph_77_reg <= filter_slice_packed__preheader13_lr_ph_77;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_77_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader13_lr_ph_78 = filter_slice_packed__preheader13_lr_ph_78_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %78 = mul nsw i32 %74, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_78_reg <= filter_slice_packed__preheader13_lr_ph_78;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_78_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %78 = mul nsw i32 %74, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_78_reg <= filter_slice_packed__preheader13_lr_ph_78;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_78_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_79 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_79_reg <= filter_slice_packed__preheader13_lr_ph_79;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_79_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader13_lr_ph_80 = filter_slice_packed__preheader13_lr_ph_80_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %80 = mul nsw i32 %76, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_80_reg <= filter_slice_packed__preheader13_lr_ph_80;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_80_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %80 = mul nsw i32 %76, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_80_reg <= filter_slice_packed__preheader13_lr_ph_80;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_80_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
begin
filter_slice_packed__preheader13_lr_ph_81 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_81_reg <= filter_slice_packed__preheader13_lr_ph_81;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_81_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %82 = getelementptr inbounds i32* %79, i32 %78*/
begin
filter_slice_packed__preheader13_lr_ph_82 = (filter_slice_packed__preheader13_lr_ph_79 + (4 * filter_slice_packed__preheader13_lr_ph_78));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %82 = getelementptr inbounds i32* %79, i32 %78*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_82_reg <= filter_slice_packed__preheader13_lr_ph_82;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_82_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %83 = getelementptr inbounds i32* %81, i32 %80*/
begin
filter_slice_packed__preheader13_lr_ph_83 = (filter_slice_packed__preheader13_lr_ph_81 + (4 * filter_slice_packed__preheader13_lr_ph_80));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %83 = getelementptr inbounds i32* %81, i32 %80*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_107))
begin
filter_slice_packed__preheader13_lr_ph_83_reg <= filter_slice_packed__preheader13_lr_ph_83;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_83_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %84 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
begin
filter_slice_packed__preheader13_lr_ph_84 = (filter_slice_packed_0_5_reg + 12);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %84 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_84_reg <= filter_slice_packed__preheader13_lr_ph_84;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_84_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %85 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
begin
filter_slice_packed__preheader13_lr_ph_85 = (filter_slice_packed_0_2_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %85 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_85_reg <= filter_slice_packed__preheader13_lr_ph_85;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_85_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.not8 = xor i1 %8, true*/
begin
filter_slice_packed__preheader13_lr_ph__not8 = (filter_slice_packed_0_8_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.not8 = xor i1 %8, true*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph__not8_reg <= filter_slice_packed__preheader13_lr_ph__not8;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph__not8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph__not8_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %86 = icmp eq i32 %10, 4*/
begin
filter_slice_packed__preheader13_lr_ph_86 = (filter_slice_packed_0_10_reg == 32'd4);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %86 = icmp eq i32 %10, 4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_86_reg <= filter_slice_packed__preheader13_lr_ph_86;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_86_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %or.cond9 = and i1 %86, %.not8*/
begin
filter_slice_packed__preheader13_lr_ph_or_cond9 = (filter_slice_packed__preheader13_lr_ph_86 & filter_slice_packed__preheader13_lr_ph__not8);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %or.cond9 = and i1 %86, %.not8*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_or_cond9_reg <= filter_slice_packed__preheader13_lr_ph_or_cond9;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_or_cond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_or_cond9_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %tmp177 = sub i32 %20, %17*/
begin
filter_slice_packed__preheader13_lr_ph_tmp177 = (filter_slice_packed_0_20_reg - filter_slice_packed_0_17_reg);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %tmp177 = sub i32 %20, %17*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
filter_slice_packed__preheader13_lr_ph_tmp177_reg <= filter_slice_packed__preheader13_lr_ph_tmp177;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph_tmp177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph_tmp177_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader13_lr_ph__pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108))
begin
filter_slice_packed__preheader13_lr_ph__pre_reg <= filter_slice_packed__preheader13_lr_ph__pre;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_lr_ph__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_lr_ph__pre_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %87 = phi i32 [ %74, %.preheader13.lr.ph ], [ %121, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_87 = filter_slice_packed__preheader13_lr_ph_74_reg;
end
/* filter_slice_packed: %.preheader13*/
/*   %87 = phi i32 [ %74, %.preheader13.lr.ph ], [ %121, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_87 = filter_slice_packed_120_121_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %87 = phi i32 [ %74, %.preheader13.lr.ph ], [ %121, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_87_reg <= filter_slice_packed__preheader13_87;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_87_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %87 = phi i32 [ %74, %.preheader13.lr.ph ], [ %121, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_87_reg <= filter_slice_packed__preheader13_87;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_87_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %88 = phi i32 [ %76, %.preheader13.lr.ph ], [ %122, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_88 = filter_slice_packed__preheader13_lr_ph_76_reg;
end
/* filter_slice_packed: %.preheader13*/
/*   %88 = phi i32 [ %76, %.preheader13.lr.ph ], [ %122, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_88 = filter_slice_packed_120_122_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %88 = phi i32 [ %76, %.preheader13.lr.ph ], [ %122, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_88_reg <= filter_slice_packed__preheader13_88;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_88_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %88 = phi i32 [ %76, %.preheader13.lr.ph ], [ %122, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_88_reg <= filter_slice_packed__preheader13_88;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_88_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %89 = phi i32 [ %.pre, %.preheader13.lr.ph ], [ %123, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_89 = filter_slice_packed__preheader13_lr_ph__pre;
end
/* filter_slice_packed: %.preheader13*/
/*   %89 = phi i32 [ %.pre, %.preheader13.lr.ph ], [ %123, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_89 = filter_slice_packed_120_123_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %89 = phi i32 [ %.pre, %.preheader13.lr.ph ], [ %123, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_89_reg <= filter_slice_packed__preheader13_89;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_89_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %89 = phi i32 [ %.pre, %.preheader13.lr.ph ], [ %123, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_89_reg <= filter_slice_packed__preheader13_89;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_89_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %indvar175 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next176, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_indvar175 = 32'd0;
end
/* filter_slice_packed: %.preheader13*/
/*   %indvar175 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next176, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_indvar175 = filter_slice_packed_120_indvar_next176;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %indvar175 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next176, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_indvar175_reg <= filter_slice_packed__preheader13_indvar175;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_indvar175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_indvar175_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %indvar175 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next176, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_indvar175_reg <= filter_slice_packed__preheader13_indvar175;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_indvar175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_indvar175_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %src.022 = phi i32* [ %82, %.preheader13.lr.ph ], [ %125, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_src_022 = filter_slice_packed__preheader13_lr_ph_82_reg;
end
/* filter_slice_packed: %.preheader13*/
/*   %src.022 = phi i32* [ %82, %.preheader13.lr.ph ], [ %125, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_src_022 = filter_slice_packed_120_125;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %src.022 = phi i32* [ %82, %.preheader13.lr.ph ], [ %125, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_src_022_reg <= filter_slice_packed__preheader13_src_022;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_src_022) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_src_022_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %src.022 = phi i32* [ %82, %.preheader13.lr.ph ], [ %125, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_src_022_reg <= filter_slice_packed__preheader13_src_022;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_src_022) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_src_022_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %dst.019 = phi i32* [ %83, %.preheader13.lr.ph ], [ %124, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_dst_019 = filter_slice_packed__preheader13_lr_ph_83_reg;
end
/* filter_slice_packed: %.preheader13*/
/*   %dst.019 = phi i32* [ %83, %.preheader13.lr.ph ], [ %124, %120 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0))) */
begin
filter_slice_packed__preheader13_dst_019 = filter_slice_packed_120_124;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %dst.019 = phi i32* [ %83, %.preheader13.lr.ph ], [ %124, %120 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_108) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader13_dst_019_reg <= filter_slice_packed__preheader13_dst_019;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_dst_019) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_dst_019_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %dst.019 = phi i32* [ %83, %.preheader13.lr.ph ], [ %124, %120 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB_120_168) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_120_exitcond178 == 1'd0)))
begin
filter_slice_packed__preheader13_dst_019_reg <= filter_slice_packed__preheader13_dst_019;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_dst_019) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_dst_019_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader13_90 = filter_slice_packed__preheader13_90_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %90 = mul nsw i32 %89, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110))
begin
filter_slice_packed__preheader13_90_reg <= filter_slice_packed__preheader13_90;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_90_reg"); $finish; end
end
/* filter_slice_packed: %.preheader13*/
/*   %90 = mul nsw i32 %89, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110))
begin
filter_slice_packed__preheader13_90_reg <= filter_slice_packed__preheader13_90;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_90_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader13*/
/*   %91 = icmp sgt i32 %90, 0*/
begin
filter_slice_packed__preheader13_91 = ($signed(filter_slice_packed__preheader13_90) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %91 = icmp sgt i32 %90, 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110))
begin
filter_slice_packed__preheader13_91_reg <= filter_slice_packed__preheader13_91;
if (reset == 1'b0 && ^(filter_slice_packed__preheader13_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader13_91_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph15_92 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113))
begin
filter_slice_packed__lr_ph15_92_reg <= filter_slice_packed__lr_ph15_92;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph15_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph15_92_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
begin
filter_slice_packed__lr_ph15_93 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_115))
begin
filter_slice_packed__lr_ph15_93_reg <= filter_slice_packed__lr_ph15_93;
if (reset == 1'b0 && ^(filter_slice_packed__lr_ph15_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__lr_ph15_93_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %indvar146 = phi i32 [ %indvar.next147, %.preheader5 ], [ 0, %.preheader5.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader5_indvar146 = 32'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %indvar146 = phi i32 [ %indvar.next147, %.preheader5 ], [ 0, %.preheader5.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader5_106 == 1'd1))) */
begin
filter_slice_packed__preheader5_indvar146 = filter_slice_packed__preheader5_indvar_next147_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %indvar146 = phi i32 [ %indvar.next147, %.preheader5 ], [ 0, %.preheader5.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_preheader_116) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader5_indvar146_reg <= filter_slice_packed__preheader5_indvar146;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_indvar146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_indvar146_reg"); $finish; end
end
/* filter_slice_packed: %.preheader5*/
/*   %indvar146 = phi i32 [ %indvar.next147, %.preheader5 ], [ 0, %.preheader5.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader5_106 == 1'd1)))
begin
filter_slice_packed__preheader5_indvar146_reg <= filter_slice_packed__preheader5_indvar146;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_indvar146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_indvar146_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader5_tmp148 = filter_slice_packed__preheader5_tmp148_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp148 = mul i32 %10, %indvar146*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119))
begin
filter_slice_packed__preheader5_tmp148_reg <= filter_slice_packed__preheader5_tmp148;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_tmp148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_tmp148_reg"); $finish; end
end
/* filter_slice_packed: %.preheader5*/
/*   %tmp148 = mul i32 %10, %indvar146*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119))
begin
filter_slice_packed__preheader5_tmp148_reg <= filter_slice_packed__preheader5_tmp148;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_tmp148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_tmp148_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp149 = add i32 %13, %tmp148*/
begin
filter_slice_packed__preheader5_tmp149 = (filter_slice_packed_0_13_reg + filter_slice_packed__preheader5_tmp148);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp149 = add i32 %13, %tmp148*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119))
begin
filter_slice_packed__preheader5_tmp149_reg <= filter_slice_packed__preheader5_tmp149;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_tmp149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_tmp149_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp152 = add i32 %10, %tmp148*/
begin
filter_slice_packed__preheader5_tmp152 = (filter_slice_packed_0_10_reg + filter_slice_packed__preheader5_tmp148);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp152 = add i32 %10, %tmp148*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_119))
begin
filter_slice_packed__preheader5_tmp152_reg <= filter_slice_packed__preheader5_tmp152;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_tmp152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_tmp152_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %scevgep154 = getelementptr i32* %dst.019, i32 %tmp149*/
begin
filter_slice_packed__preheader5_scevgep154 = (filter_slice_packed__preheader13_dst_019_reg + (4 * filter_slice_packed__preheader5_tmp149_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %scevgep154 = getelementptr i32* %dst.019, i32 %tmp149*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
filter_slice_packed__preheader5_scevgep154_reg <= filter_slice_packed__preheader5_scevgep154;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_scevgep154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_scevgep154_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %scevgep155 = getelementptr i32* %src.022, i32 %tmp149*/
begin
filter_slice_packed__preheader5_scevgep155 = (filter_slice_packed__preheader13_src_022_reg + (4 * filter_slice_packed__preheader5_tmp149_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %scevgep155 = getelementptr i32* %src.022, i32 %tmp149*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
filter_slice_packed__preheader5_scevgep155_reg <= filter_slice_packed__preheader5_scevgep155;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_scevgep155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_scevgep155_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader5_94 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
filter_slice_packed__preheader5_94_reg <= filter_slice_packed__preheader5_94;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_94_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %95 = getelementptr inbounds i32* %93, i32 %94*/
begin
filter_slice_packed__preheader5_95 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader5_94));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %95 = getelementptr inbounds i32* %93, i32 %94*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
filter_slice_packed__preheader5_95_reg <= filter_slice_packed__preheader5_95;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_95_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader5_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
filter_slice_packed__preheader5_96_reg <= filter_slice_packed__preheader5_96;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_96_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader5_97 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
filter_slice_packed__preheader5_97_reg <= filter_slice_packed__preheader5_97;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_97_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %98 = getelementptr inbounds i32* %93, i32 %97*/
begin
filter_slice_packed__preheader5_98 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader5_97));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %98 = getelementptr inbounds i32* %93, i32 %97*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
filter_slice_packed__preheader5_98_reg <= filter_slice_packed__preheader5_98;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_98_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader5_99 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
filter_slice_packed__preheader5_99_reg <= filter_slice_packed__preheader5_99;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_99_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader5_100 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
filter_slice_packed__preheader5_100_reg <= filter_slice_packed__preheader5_100;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_100_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %101 = getelementptr inbounds i32* %93, i32 %100*/
begin
filter_slice_packed__preheader5_101 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader5_100));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %101 = getelementptr inbounds i32* %93, i32 %100*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
filter_slice_packed__preheader5_101_reg <= filter_slice_packed__preheader5_101;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_101_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader5_102 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
filter_slice_packed__preheader5_102_reg <= filter_slice_packed__preheader5_102;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_102_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader5_103 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
filter_slice_packed__preheader5_103_reg <= filter_slice_packed__preheader5_103;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_103_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader5_104 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_140))
begin
filter_slice_packed__preheader5_104_reg <= filter_slice_packed__preheader5_104;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_104_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader5_105 = filter_slice_packed__preheader5_105_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %105 = mul nsw i32 %104, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141))
begin
filter_slice_packed__preheader5_105_reg <= filter_slice_packed__preheader5_105;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_105_reg"); $finish; end
end
/* filter_slice_packed: %.preheader5*/
/*   %105 = mul nsw i32 %104, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141))
begin
filter_slice_packed__preheader5_105_reg <= filter_slice_packed__preheader5_105;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_105_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %106 = icmp slt i32 %tmp152, %105*/
begin
filter_slice_packed__preheader5_106 = ($signed(filter_slice_packed__preheader5_tmp152_reg) < $signed(filter_slice_packed__preheader5_105));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %106 = icmp slt i32 %tmp152, %105*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_141))
begin
filter_slice_packed__preheader5_106_reg <= filter_slice_packed__preheader5_106;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_106_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader5*/
/*   %indvar.next147 = add i32 %indvar146, 1*/
begin
filter_slice_packed__preheader5_indvar_next147 = (filter_slice_packed__preheader5_indvar146_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %indvar.next147 = add i32 %indvar146, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_118))
begin
filter_slice_packed__preheader5_indvar_next147_reg <= filter_slice_packed__preheader5_indvar_next147;
if (reset == 1'b0 && ^(filter_slice_packed__preheader5_indvar_next147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader5_indvar_next147_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %indvar162 = phi i32 [ %indvar.next163, %.preheader4 ], [ 0, %.preheader4.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader4_indvar162 = 32'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %indvar162 = phi i32 [ %indvar.next163, %.preheader4 ], [ 0, %.preheader4.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader4_118 == 1'd1))) */
begin
filter_slice_packed__preheader4_indvar162 = filter_slice_packed__preheader4_indvar_next163_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %indvar162 = phi i32 [ %indvar.next163, %.preheader4 ], [ 0, %.preheader4.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_preheader_117) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed__preheader4_indvar162_reg <= filter_slice_packed__preheader4_indvar162;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_indvar162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_indvar162_reg"); $finish; end
end
/* filter_slice_packed: %.preheader4*/
/*   %indvar162 = phi i32 [ %indvar.next163, %.preheader4 ], [ 0, %.preheader4.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader4_118 == 1'd1)))
begin
filter_slice_packed__preheader4_indvar162_reg <= filter_slice_packed__preheader4_indvar162;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_indvar162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_indvar162_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader4_tmp164 = filter_slice_packed__preheader4_tmp164_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp164 = mul i32 %10, %indvar162*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143))
begin
filter_slice_packed__preheader4_tmp164_reg <= filter_slice_packed__preheader4_tmp164;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_tmp164_reg"); $finish; end
end
/* filter_slice_packed: %.preheader4*/
/*   %tmp164 = mul i32 %10, %indvar162*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143))
begin
filter_slice_packed__preheader4_tmp164_reg <= filter_slice_packed__preheader4_tmp164;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_tmp164_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp165 = add i32 %13, %tmp164*/
begin
filter_slice_packed__preheader4_tmp165 = (filter_slice_packed_0_13_reg + filter_slice_packed__preheader4_tmp164);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp165 = add i32 %13, %tmp164*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143))
begin
filter_slice_packed__preheader4_tmp165_reg <= filter_slice_packed__preheader4_tmp165;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_tmp165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_tmp165_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %scevgep166 = getelementptr i32* %dst.019, i32 %tmp165*/
begin
filter_slice_packed__preheader4_scevgep166 = (filter_slice_packed__preheader13_dst_019_reg + (4 * filter_slice_packed__preheader4_tmp165_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %scevgep166 = getelementptr i32* %dst.019, i32 %tmp165*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
filter_slice_packed__preheader4_scevgep166_reg <= filter_slice_packed__preheader4_scevgep166;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_scevgep166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_scevgep166_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %scevgep167 = getelementptr i32* %src.022, i32 %tmp165*/
begin
filter_slice_packed__preheader4_scevgep167 = (filter_slice_packed__preheader13_src_022_reg + (4 * filter_slice_packed__preheader4_tmp165_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %scevgep167 = getelementptr i32* %src.022, i32 %tmp165*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
filter_slice_packed__preheader4_scevgep167_reg <= filter_slice_packed__preheader4_scevgep167;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_scevgep167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_scevgep167_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp174 = add i32 %10, %tmp164*/
begin
filter_slice_packed__preheader4_tmp174 = (filter_slice_packed_0_10_reg + filter_slice_packed__preheader4_tmp164);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp174 = add i32 %10, %tmp164*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_143))
begin
filter_slice_packed__preheader4_tmp174_reg <= filter_slice_packed__preheader4_tmp174;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_tmp174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_tmp174_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader4_107 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
filter_slice_packed__preheader4_107_reg <= filter_slice_packed__preheader4_107;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_107_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %108 = getelementptr inbounds i32* %93, i32 %107*/
begin
filter_slice_packed__preheader4_108 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader4_107));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %108 = getelementptr inbounds i32* %93, i32 %107*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
filter_slice_packed__preheader4_108_reg <= filter_slice_packed__preheader4_108;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_108_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader4_109 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
filter_slice_packed__preheader4_109_reg <= filter_slice_packed__preheader4_109;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_109_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader4_110 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
filter_slice_packed__preheader4_110_reg <= filter_slice_packed__preheader4_110;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_110_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %111 = getelementptr inbounds i32* %93, i32 %110*/
begin
filter_slice_packed__preheader4_111 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader4_110));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %111 = getelementptr inbounds i32* %93, i32 %110*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
filter_slice_packed__preheader4_111_reg <= filter_slice_packed__preheader4_111;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_111_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader4_112 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
filter_slice_packed__preheader4_112_reg <= filter_slice_packed__preheader4_112;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_112_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader4_113 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
filter_slice_packed__preheader4_113_reg <= filter_slice_packed__preheader4_113;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_113_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %114 = getelementptr inbounds i32* %93, i32 %113*/
begin
filter_slice_packed__preheader4_114 = (filter_slice_packed__lr_ph15_93_reg + (4 * filter_slice_packed__preheader4_113));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %114 = getelementptr inbounds i32* %93, i32 %113*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
filter_slice_packed__preheader4_114_reg <= filter_slice_packed__preheader4_114;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_114_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
begin
filter_slice_packed__preheader4_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
filter_slice_packed__preheader4_115_reg <= filter_slice_packed__preheader4_115;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_115_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
begin
filter_slice_packed__preheader4_116 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_161))
begin
filter_slice_packed__preheader4_116_reg <= filter_slice_packed__preheader4_116;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_116_reg"); $finish; end
end
end
always @(*) begin
filter_slice_packed__preheader4_117 = filter_slice_packed__preheader4_117_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %117 = mul nsw i32 %116, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162))
begin
filter_slice_packed__preheader4_117_reg <= filter_slice_packed__preheader4_117;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_117_reg"); $finish; end
end
/* filter_slice_packed: %.preheader4*/
/*   %117 = mul nsw i32 %116, %10*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162))
begin
filter_slice_packed__preheader4_117_reg <= filter_slice_packed__preheader4_117;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_117_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %118 = icmp slt i32 %tmp174, %117*/
begin
filter_slice_packed__preheader4_118 = ($signed(filter_slice_packed__preheader4_tmp174_reg) < $signed(filter_slice_packed__preheader4_117));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %118 = icmp slt i32 %tmp174, %117*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_162))
begin
filter_slice_packed__preheader4_118_reg <= filter_slice_packed__preheader4_118;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_118_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %.preheader4*/
/*   %indvar.next163 = add i32 %indvar162, 1*/
begin
filter_slice_packed__preheader4_indvar_next163 = (filter_slice_packed__preheader4_indvar162_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %indvar.next163 = add i32 %indvar162, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_142))
begin
filter_slice_packed__preheader4_indvar_next163_reg <= filter_slice_packed__preheader4_indvar_next163;
if (reset == 1'b0 && ^(filter_slice_packed__preheader4_indvar_next163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed__preheader4_indvar_next163_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %119 = phi i32 [ %116, %._crit_edge16.loopexit ], [ %104, %._crit_edge16.loopexit2 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed___crit_edge16_119 = filter_slice_packed__preheader4_116_reg;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %119 = phi i32 [ %116, %._crit_edge16.loopexit ], [ %104, %._crit_edge16.loopexit2 ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed___crit_edge16_119 = filter_slice_packed__preheader5_104_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %119 = phi i32 [ %116, %._crit_edge16.loopexit ], [ %104, %._crit_edge16.loopexit2 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit_163) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed___crit_edge16_119_reg <= filter_slice_packed___crit_edge16_119;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge16_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge16_119_reg"); $finish; end
end
/* filter_slice_packed: %._crit_edge16*/
/*   %119 = phi i32 [ %116, %._crit_edge16.loopexit ], [ %104, %._crit_edge16.loopexit2 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_loopexit2_164) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed___crit_edge16_119_reg <= filter_slice_packed___crit_edge16_119;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge16_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge16_119_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
begin
filter_slice_packed___crit_edge16__pre179 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167))
begin
filter_slice_packed___crit_edge16__pre179_reg <= filter_slice_packed___crit_edge16__pre179;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge16__pre179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge16__pre179_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
begin
filter_slice_packed___crit_edge16__pre180 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167))
begin
filter_slice_packed___crit_edge16__pre180_reg <= filter_slice_packed___crit_edge16__pre180;
if (reset == 1'b0 && ^(filter_slice_packed___crit_edge16__pre180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed___crit_edge16__pre180_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %121 = phi i32 [ %.pre180, %._crit_edge16 ], [ %87, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_121 = filter_slice_packed__preheader13_87_reg;
end
/* filter_slice_packed: %120*/
/*   %121 = phi i32 [ %.pre180, %._crit_edge16 ], [ %87, %.preheader13 ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed_120_121 = filter_slice_packed___crit_edge16__pre180;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %121 = phi i32 [ %.pre180, %._crit_edge16 ], [ %87, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_121_reg <= filter_slice_packed_120_121;
if (reset == 1'b0 && ^(filter_slice_packed_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_121_reg"); $finish; end
end
/* filter_slice_packed: %120*/
/*   %121 = phi i32 [ %.pre180, %._crit_edge16 ], [ %87, %.preheader13 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed_120_121_reg <= filter_slice_packed_120_121;
if (reset == 1'b0 && ^(filter_slice_packed_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_121_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %122 = phi i32 [ %.pre179, %._crit_edge16 ], [ %88, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_122 = filter_slice_packed__preheader13_88_reg;
end
/* filter_slice_packed: %120*/
/*   %122 = phi i32 [ %.pre179, %._crit_edge16 ], [ %88, %.preheader13 ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed_120_122 = filter_slice_packed___crit_edge16__pre179;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %122 = phi i32 [ %.pre179, %._crit_edge16 ], [ %88, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_122_reg <= filter_slice_packed_120_122;
if (reset == 1'b0 && ^(filter_slice_packed_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_122_reg"); $finish; end
end
/* filter_slice_packed: %120*/
/*   %122 = phi i32 [ %.pre179, %._crit_edge16 ], [ %88, %.preheader13 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed_120_122_reg <= filter_slice_packed_120_122;
if (reset == 1'b0 && ^(filter_slice_packed_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_122_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %123 = phi i32 [ %119, %._crit_edge16 ], [ %89, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_123 = filter_slice_packed__preheader13_89_reg;
end
/* filter_slice_packed: %120*/
/*   %123 = phi i32 [ %119, %._crit_edge16 ], [ %89, %.preheader13 ]*/
else /* if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0))) */
begin
filter_slice_packed_120_123 = filter_slice_packed___crit_edge16_119_reg;
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %123 = phi i32 [ %119, %._crit_edge16 ], [ %89, %.preheader13 ]*/
if ((((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_110) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed__preheader13_91 == 1'd0)))
begin
filter_slice_packed_120_123_reg <= filter_slice_packed_120_123;
if (reset == 1'b0 && ^(filter_slice_packed_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_123_reg"); $finish; end
end
/* filter_slice_packed: %120*/
/*   %123 = phi i32 [ %119, %._crit_edge16 ], [ %89, %.preheader13 ]*/
if (((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_167) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_packed_120_123_reg <= filter_slice_packed_120_123;
if (reset == 1'b0 && ^(filter_slice_packed_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_123_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %124 = getelementptr inbounds i32* %dst.019, i32 %122*/
begin
filter_slice_packed_120_124 = (filter_slice_packed__preheader13_dst_019_reg + (4 * filter_slice_packed_120_122_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %124 = getelementptr inbounds i32* %dst.019, i32 %122*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_120_168))
begin
filter_slice_packed_120_124_reg <= filter_slice_packed_120_124;
if (reset == 1'b0 && ^(filter_slice_packed_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_124_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %125 = getelementptr inbounds i32* %src.022, i32 %121*/
begin
filter_slice_packed_120_125 = (filter_slice_packed__preheader13_src_022_reg + (4 * filter_slice_packed_120_121_reg));
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %125 = getelementptr inbounds i32* %src.022, i32 %121*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_120_168))
begin
filter_slice_packed_120_125_reg <= filter_slice_packed_120_125;
if (reset == 1'b0 && ^(filter_slice_packed_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_125_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %indvar.next176 = add i32 %indvar175, 1*/
begin
filter_slice_packed_120_indvar_next176 = (filter_slice_packed__preheader13_indvar175_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %indvar.next176 = add i32 %indvar175, 1*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_120_168))
begin
filter_slice_packed_120_indvar_next176_reg <= filter_slice_packed_120_indvar_next176;
if (reset == 1'b0 && ^(filter_slice_packed_120_indvar_next176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_indvar_next176_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %120*/
/*   %exitcond178 = icmp eq i32 %indvar.next176, %tmp177*/
begin
filter_slice_packed_120_exitcond178 = (filter_slice_packed_120_indvar_next176 == filter_slice_packed__preheader13_lr_ph_tmp177_reg);
end
end
always @(posedge clk) begin
/* filter_slice_packed: %120*/
/*   %exitcond178 = icmp eq i32 %indvar.next176, %tmp177*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_120_168))
begin
filter_slice_packed_120_exitcond178_reg <= filter_slice_packed_120_exitcond178;
if (reset == 1'b0 && ^(filter_slice_packed_120_exitcond178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_120_exitcond178_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_signed_divide_32_0_op0 = filter_slice_packed_0_16;
end
/* filter_slice_packed: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
else /* if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_7)) */
begin
filter_slice_packed_signed_divide_32_0_op0 = filter_slice_packed_0_19_reg;
end
end
always @(*) begin
/* filter_slice_packed: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
filter_slice_packed_signed_divide_32_0_op1 = arg_nb_jobs;
end
/* filter_slice_packed: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
else /* if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_7)) */
begin
filter_slice_packed_signed_divide_32_0_op1 = arg_nb_jobs;
end
end
always @(*) begin
lpm_divide_filter_slice_packed_0_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_filter_slice_packed_0_20_out = lpm_divide_filter_slice_packed_0_20_temp_out;
end
always @(*) begin
filter_slice_packed_signed_divide_32_0 = lpm_divide_filter_slice_packed_0_20_out;
end
always @(*) begin
lpm_mult_filter_slice_packed_0_16_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((lpm_mult_filter_slice_packed_0_16_en == 1'd1))
begin
filter_slice_packed_0_16_stage0_reg <= (filter_slice_packed_0_15 * arg_jobnr);
end
end
always @(*) begin
lpm_mult_filter_slice_packed_0_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((lpm_mult_filter_slice_packed_0_19_en == 1'd1))
begin
filter_slice_packed_0_19_stage0_reg <= (filter_slice_packed_0_15 * filter_slice_packed_0_18_reg);
end
end
always @(*) begin
lpm_divide_filter_slice_packed_0_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_filter_slice_packed__lr_ph12_tmp98_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp98 = mul i32 %36, %17*/
if ((lpm_mult_filter_slice_packed__lr_ph12_tmp98_en == 1'd1))
begin
filter_slice_packed__lr_ph12_tmp98_stage0_reg <= (filter_slice_packed__lr_ph12_36 * filter_slice_packed_0_17_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__lr_ph12_tmp112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %tmp112 = mul i32 %30, %17*/
if ((lpm_mult_filter_slice_packed__lr_ph12_tmp112_en == 1'd1))
begin
filter_slice_packed__lr_ph12_tmp112_stage0_reg <= (filter_slice_packed__lr_ph12_30 * filter_slice_packed_0_17_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__lr_ph12_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.lr.ph12*/
/*   %39 = mul nsw i32 %38, %10*/
if ((lpm_mult_filter_slice_packed__lr_ph12_39_en == 1'd1))
begin
filter_slice_packed__lr_ph12_39_stage0_reg <= (filter_slice_packed__lr_ph12_38 * filter_slice_packed_0_10_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed_43_tmp97_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp97 = mul i32 %36, %indvar25*/
if ((lpm_mult_filter_slice_packed_43_tmp97_en == 1'd1))
begin
filter_slice_packed_43_tmp97_stage0_reg <= (filter_slice_packed__lr_ph12_36_reg * filter_slice_packed_43_indvar25_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed_43_tmp111_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %43*/
/*   %tmp111 = mul i32 %30, %indvar25*/
if ((lpm_mult_filter_slice_packed_43_tmp111_en == 1'd1))
begin
filter_slice_packed_43_tmp111_stage0_reg <= (filter_slice_packed__lr_ph12_30_reg * filter_slice_packed_43_indvar25_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader2_tmp125_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader2*/
/*   %tmp125 = mul i32 %10, %indvar*/
if ((lpm_mult_filter_slice_packed__preheader2_tmp125_en == 1'd1))
begin
filter_slice_packed__preheader2_tmp125_stage0_reg <= (filter_slice_packed_0_10_reg * filter_slice_packed__preheader2_indvar_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader1_tmp96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader1*/
/*   %tmp96 = mul i32 %10, %indvar63*/
if ((lpm_mult_filter_slice_packed__preheader1_tmp96_en == 1'd1))
begin
filter_slice_packed__preheader1_tmp96_stage0_reg <= (filter_slice_packed_0_10_reg * filter_slice_packed__preheader1_indvar63_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader13_lr_ph_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %78 = mul nsw i32 %74, %17*/
if ((lpm_mult_filter_slice_packed__preheader13_lr_ph_78_en == 1'd1))
begin
filter_slice_packed__preheader13_lr_ph_78_stage0_reg <= (filter_slice_packed__preheader13_lr_ph_74 * filter_slice_packed_0_17_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader13_lr_ph_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %80 = mul nsw i32 %76, %17*/
if ((lpm_mult_filter_slice_packed__preheader13_lr_ph_80_en == 1'd1))
begin
filter_slice_packed__preheader13_lr_ph_80_stage0_reg <= (filter_slice_packed__preheader13_lr_ph_76 * filter_slice_packed_0_17_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader13_90_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader13*/
/*   %90 = mul nsw i32 %89, %10*/
if ((lpm_mult_filter_slice_packed__preheader13_90_en == 1'd1))
begin
filter_slice_packed__preheader13_90_stage0_reg <= (filter_slice_packed__preheader13_89_reg * filter_slice_packed_0_10_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader5_tmp148_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %tmp148 = mul i32 %10, %indvar146*/
if ((lpm_mult_filter_slice_packed__preheader5_tmp148_en == 1'd1))
begin
filter_slice_packed__preheader5_tmp148_stage0_reg <= (filter_slice_packed_0_10_reg * filter_slice_packed__preheader5_indvar146_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader5_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader5*/
/*   %105 = mul nsw i32 %104, %10*/
if ((lpm_mult_filter_slice_packed__preheader5_105_en == 1'd1))
begin
filter_slice_packed__preheader5_105_stage0_reg <= (filter_slice_packed__preheader5_104 * filter_slice_packed_0_10_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader4_tmp164_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %tmp164 = mul i32 %10, %indvar162*/
if ((lpm_mult_filter_slice_packed__preheader4_tmp164_en == 1'd1))
begin
filter_slice_packed__preheader4_tmp164_stage0_reg <= (filter_slice_packed_0_10_reg * filter_slice_packed__preheader4_indvar162_reg);
end
end
always @(*) begin
lpm_mult_filter_slice_packed__preheader4_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_packed: %.preheader4*/
/*   %117 = mul nsw i32 %116, %10*/
if ((lpm_mult_filter_slice_packed__preheader4_117_en == 1'd1))
begin
filter_slice_packed__preheader4_117_stage0_reg <= (filter_slice_packed__preheader4_116 * filter_slice_packed_0_10_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* filter_slice_packed: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_171))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %96, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %99, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %102, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %103, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %109, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %112, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %115, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
memory_controller_address_a = filter_slice_packed_0_4;
end
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_address_a = filter_slice_packed_0_6_reg;
end
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
memory_controller_address_a = filter_slice_packed_0_11;
end
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_address_a = filter_slice_packed_0_12;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_address_a = filter_slice_packed__lr_ph12_28;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_address_a = filter_slice_packed__lr_ph12_25_reg;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_address_a = filter_slice_packed__lr_ph12_29;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_address_a = filter_slice_packed__lr_ph12_26;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
memory_controller_address_a = filter_slice_packed__lr_ph12_32_reg;
end
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52))
begin
memory_controller_address_a = filter_slice_packed__lr_ph_44;
end
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
memory_controller_address_a = filter_slice_packed__preheader2_47;
end
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
memory_controller_address_a = filter_slice_packed__preheader2_50;
end
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
memory_controller_address_a = filter_slice_packed__preheader2_53;
end
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
memory_controller_address_a = filter_slice_packed__preheader1_58;
end
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
memory_controller_address_a = filter_slice_packed__preheader1_61;
end
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
memory_controller_address_a = filter_slice_packed__preheader1_64;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_68;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_71_reg;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_70;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_75;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_85_reg;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113))
begin
memory_controller_address_a = filter_slice_packed__lr_ph15_92;
end
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep155;
end
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
memory_controller_address_a = filter_slice_packed__preheader5_95;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %96, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep154_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep155_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %99, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep154_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep155_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %102, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep154_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep155_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %103, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
memory_controller_address_a = filter_slice_packed__preheader5_scevgep154_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %109, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
memory_controller_address_a = filter_slice_packed__preheader4_scevgep166_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %112, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
memory_controller_address_a = filter_slice_packed__preheader4_scevgep166_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %115, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
memory_controller_address_a = filter_slice_packed__preheader4_scevgep166_reg;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_address_a = filter_slice_packed__preheader13_lr_ph_70_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %96, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %99, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %102, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %103, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %109, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %112, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %115, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %96, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
memory_controller_in_a = filter_slice_packed__preheader5_96;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %99, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
memory_controller_in_a = filter_slice_packed__preheader5_99;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %102, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
memory_controller_in_a = filter_slice_packed__preheader5_102;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %103, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
memory_controller_in_a = filter_slice_packed__preheader5_103;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %109, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
memory_controller_in_a = filter_slice_packed__preheader4_109;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %112, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
memory_controller_in_a = filter_slice_packed__preheader4_112;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %115, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
memory_controller_in_a = filter_slice_packed__preheader4_115;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %29 = load i32** %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %27 = load i32** %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %33 = load i32** %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_45))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph*/
/*   %45 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_52))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %48 = load i32* %47, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_61))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_66))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_71))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %59 = load i32* %58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_83))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_88))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_93))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %70 = load i32** %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %75 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %74 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %79 = load i32** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %92 = load i32*** %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_111))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph15_113))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %94 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_120))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_122))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %96, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_124))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %97 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_125))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %99, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_129))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %100 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_130))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %102, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_134))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %103 = load i32* %scevgep155, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_135))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   store i32 %103, i32* %scevgep154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_137))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %109, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_148))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %112, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_153))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   store i32 %115, i32* %scevgep166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_158))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre180 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %48, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %51, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %54, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %55, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %59, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %62, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %65, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_2))
begin
memory_controller_address_b = filter_slice_packed_0_1_reg;
end
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_address_b = filter_slice_packed_0_14;
end
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
memory_controller_address_b = filter_slice_packed_0_9_reg;
end
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_address_b = filter_slice_packed_0_21_reg;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_address_b = filter_slice_packed__lr_ph12_34;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_address_b = filter_slice_packed__lr_ph12_31_reg;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_address_b = filter_slice_packed__lr_ph12_35;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_address_b = filter_slice_packed__lr_ph12_37_reg;
end
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50))
begin
memory_controller_address_b = filter_slice_packed__lr_ph12_41_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep62;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %48, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep58_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep62_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %51, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep58_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep62_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %54, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep58_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep62_reg;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %55, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
memory_controller_address_b = filter_slice_packed__preheader2_scevgep58_reg;
end
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep93;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %59, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep89_reg;
end
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep93_reg;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %62, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep89_reg;
end
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep93_reg;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %65, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
memory_controller_address_b = filter_slice_packed__preheader1_scevgep89_reg;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_69;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_73_reg;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_72;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_77;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_84_reg;
end
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
memory_controller_address_b = filter_slice_packed__preheader5_98;
end
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
memory_controller_address_b = filter_slice_packed__preheader5_101;
end
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_84_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
memory_controller_address_b = filter_slice_packed__preheader4_scevgep167;
end
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
memory_controller_address_b = filter_slice_packed__preheader4_108;
end
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149))
begin
memory_controller_address_b = filter_slice_packed__preheader4_scevgep167_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
memory_controller_address_b = filter_slice_packed__preheader4_111;
end
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154))
begin
memory_controller_address_b = filter_slice_packed__preheader4_scevgep167_reg;
end
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
memory_controller_address_b = filter_slice_packed__preheader4_114;
end
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_84_reg;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_address_b = filter_slice_packed__preheader13_lr_ph_72_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %48, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %51, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %54, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %55, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %59, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %62, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %65, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %48, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
memory_controller_in_b = filter_slice_packed__preheader2_48;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %51, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
memory_controller_in_b = filter_slice_packed__preheader2_51;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %54, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
memory_controller_in_b = filter_slice_packed__preheader2_54;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %55, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
memory_controller_in_b = filter_slice_packed__preheader2_55;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %59, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
memory_controller_in_b = filter_slice_packed__preheader1_59;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %62, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
memory_controller_in_b = filter_slice_packed__preheader1_62;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %65, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
memory_controller_in_b = filter_slice_packed__preheader1_65;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* filter_slice_packed: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %35 = load i32** %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_41))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %32 = load i32*** %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_42))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_43))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.lr.ph12*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph12_44))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.lr.ph*/
/*   %44 = load i32*** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__lr_ph_50))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %46 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_59))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %48, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_63))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %49 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_64))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %51, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_68))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %52 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_69))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %54, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_73))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   %55 = load i32* %scevgep62, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_74))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader2*/
/*   store i32 %55, i32* %scevgep58, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader2_76))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %57 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_81))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %59, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_85))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %60 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_86))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %62, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_90))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   %63 = load i32* %scevgep93, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_91))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader1*/
/*   store i32 %65, i32* %scevgep89, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader1_95))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %72 = load i32** %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_102))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %77 = load i32*** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_103))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %76 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_104))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %81 = load i32** %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_105))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader13.lr.ph*/
/*   %.pre = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader13_lr_ph_106))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_127))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_132))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader5*/
/*   %104 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader5_138))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %107 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_144))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %109 = load i32* %108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_146))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %110 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_149))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %112 = load i32* %111, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_151))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %113 = load i32* %scevgep167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_154))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %115 = load i32* %114, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_156))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %.preheader4*/
/*   %116 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__preheader4_159))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_packed: %._crit_edge16*/
/*   %.pre179 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB___crit_edge16_165))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* filter_slice_packed: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_filter_slice_packed_BB__loopexit_171))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  filter_slice_packed_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_arg_ctx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_arg_arg;
reg [31:0] filter_slice_packed_arg_jobnr;
reg [31:0] filter_slice_packed_arg_nb_jobs;
wire  filter_slice_packed_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_memory_controller_address_a;
wire  filter_slice_packed_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_packed_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_packed_memory_controller_out_a;
wire [1:0] filter_slice_packed_memory_controller_size_a;
wire  filter_slice_packed_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_packed_memory_controller_address_b;
wire  filter_slice_packed_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_packed_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_packed_memory_controller_out_b;
wire [1:0] filter_slice_packed_memory_controller_size_b;
reg  filter_slice_packed_memory_controller_waitrequest;
wire  filter_slice_packed_finish;
reg  filter_slice_packed_finish_final;
wire [31:0] filter_slice_packed_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


filter_slice_packed filter_slice_packed_inst (
	.memory_controller_enable_a (filter_slice_packed_memory_controller_enable_a),
	.memory_controller_address_a (filter_slice_packed_memory_controller_address_a),
	.memory_controller_write_enable_a (filter_slice_packed_memory_controller_write_enable_a),
	.memory_controller_in_a (filter_slice_packed_memory_controller_in_a),
	.memory_controller_size_a (filter_slice_packed_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (filter_slice_packed_memory_controller_enable_b),
	.memory_controller_address_b (filter_slice_packed_memory_controller_address_b),
	.memory_controller_write_enable_b (filter_slice_packed_memory_controller_write_enable_b),
	.memory_controller_in_b (filter_slice_packed_memory_controller_in_b),
	.memory_controller_size_b (filter_slice_packed_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (filter_slice_packed_start),
	.finish (filter_slice_packed_finish),
	.return_val (filter_slice_packed_return_val),
	.arg_ctx (filter_slice_packed_arg_ctx),
	.arg_arg (filter_slice_packed_arg_arg),
	.arg_jobnr (filter_slice_packed_arg_jobnr),
	.arg_nb_jobs (filter_slice_packed_arg_nb_jobs)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_packed_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
main_0_1 = filter_slice_packed_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_packed_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
filter_slice_packed_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_packed_arg_ctx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_arg_ctx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_packed_arg_arg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_arg_arg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_packed_arg_jobnr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_arg_jobnr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_packed_arg_nb_jobs <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_packed_arg_nb_jobs"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
filter_slice_packed_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
filter_slice_packed_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
filter_slice_packed_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
filter_slice_packed_finish_final = filter_slice_packed_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = filter_slice_packed_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = filter_slice_packed_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_packed_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_packed_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = filter_slice_packed_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = filter_slice_packed_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_packed_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_packed_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = filter_slice_packed_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = filter_slice_packed_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = filter_slice_packed_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = filter_slice_packed_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_packed_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_packed_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = filter_slice_packed_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = filter_slice_packed_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_packed_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_packed_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = filter_slice_packed_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_packed(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = filter_slice_packed_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
