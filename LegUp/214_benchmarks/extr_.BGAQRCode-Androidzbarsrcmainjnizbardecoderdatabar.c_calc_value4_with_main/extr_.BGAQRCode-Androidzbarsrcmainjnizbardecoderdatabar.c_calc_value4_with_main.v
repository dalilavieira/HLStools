//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:50:43 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module calc_value4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_sig,
	arg_n,
	arg_wmax,
	arg_nonarrow
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_calc_value4_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_calc_value4_BB___crit_edge_2 = 7'd2;
parameter [6:0] LEGUP_F_calc_value4_BB_5_3 = 7'd3;
parameter [6:0] LEGUP_F_calc_value4_BB_7_4 = 7'd4;
parameter [6:0] LEGUP_F_calc_value4_BB_7_5 = 7'd5;
parameter [6:0] LEGUP_F_calc_value4_BB_7_6 = 7'd6;
parameter [6:0] LEGUP_F_calc_value4_BB_28_7 = 7'd7;
parameter [6:0] LEGUP_F_calc_value4_BB_28_8 = 7'd8;
parameter [6:0] LEGUP_F_calc_value4_BB_28_9 = 7'd9;
parameter [6:0] LEGUP_F_calc_value4_BB___crit_edge13_10 = 7'd10;
parameter [6:0] LEGUP_F_calc_value4_BB_42_11 = 7'd11;
parameter [6:0] LEGUP_F_calc_value4_BB_42_12 = 7'd12;
parameter [6:0] LEGUP_F_calc_value4_BB_48_13 = 7'd13;
parameter [6:0] LEGUP_F_calc_value4_BB_48_14 = 7'd14;
parameter [6:0] LEGUP_F_calc_value4_BB_48_15 = 7'd15;
parameter [6:0] LEGUP_F_calc_value4_BB_53_16 = 7'd16;
parameter [6:0] LEGUP_F_calc_value4_BB_53_17 = 7'd17;
parameter [6:0] LEGUP_F_calc_value4_BB_53_18 = 7'd18;
parameter [6:0] LEGUP_F_calc_value4_BB_66_19 = 7'd19;
parameter [6:0] LEGUP_F_calc_value4_BB_66_20 = 7'd20;
parameter [6:0] LEGUP_F_calc_value4_BB_69_21 = 7'd21;
parameter [6:0] LEGUP_F_calc_value4_BB_69_22 = 7'd22;
parameter [6:0] LEGUP_F_calc_value4_BB_69_23 = 7'd23;
parameter [6:0] LEGUP_F_calc_value4_BB_69_24 = 7'd24;
parameter [6:0] LEGUP_F_calc_value4_BB_69_25 = 7'd25;
parameter [6:0] LEGUP_F_calc_value4_BB_69_26 = 7'd26;
parameter [6:0] LEGUP_F_calc_value4_BB_69_27 = 7'd27;
parameter [6:0] LEGUP_F_calc_value4_BB_69_28 = 7'd28;
parameter [6:0] LEGUP_F_calc_value4_BB_69_29 = 7'd29;
parameter [6:0] LEGUP_F_calc_value4_BB_69_30 = 7'd30;
parameter [6:0] LEGUP_F_calc_value4_BB_69_31 = 7'd31;
parameter [6:0] LEGUP_F_calc_value4_BB_69_32 = 7'd32;
parameter [6:0] LEGUP_F_calc_value4_BB_69_33 = 7'd33;
parameter [6:0] LEGUP_F_calc_value4_BB_69_34 = 7'd34;
parameter [6:0] LEGUP_F_calc_value4_BB_69_35 = 7'd35;
parameter [6:0] LEGUP_F_calc_value4_BB_69_36 = 7'd36;
parameter [6:0] LEGUP_F_calc_value4_BB_69_37 = 7'd37;
parameter [6:0] LEGUP_F_calc_value4_BB_69_38 = 7'd38;
parameter [6:0] LEGUP_F_calc_value4_BB_69_39 = 7'd39;
parameter [6:0] LEGUP_F_calc_value4_BB_69_40 = 7'd40;
parameter [6:0] LEGUP_F_calc_value4_BB_69_41 = 7'd41;
parameter [6:0] LEGUP_F_calc_value4_BB_69_42 = 7'd42;
parameter [6:0] LEGUP_F_calc_value4_BB_69_43 = 7'd43;
parameter [6:0] LEGUP_F_calc_value4_BB_69_44 = 7'd44;
parameter [6:0] LEGUP_F_calc_value4_BB_69_45 = 7'd45;
parameter [6:0] LEGUP_F_calc_value4_BB_69_46 = 7'd46;
parameter [6:0] LEGUP_F_calc_value4_BB_69_47 = 7'd47;
parameter [6:0] LEGUP_F_calc_value4_BB_69_48 = 7'd48;
parameter [6:0] LEGUP_F_calc_value4_BB_69_49 = 7'd49;
parameter [6:0] LEGUP_F_calc_value4_BB_69_50 = 7'd50;
parameter [6:0] LEGUP_F_calc_value4_BB_69_51 = 7'd51;
parameter [6:0] LEGUP_F_calc_value4_BB_69_52 = 7'd52;
parameter [6:0] LEGUP_F_calc_value4_BB_69_53 = 7'd53;
parameter [6:0] LEGUP_F_calc_value4_BB_71_54 = 7'd54;
parameter [6:0] LEGUP_F_calc_value4_BB_75_55 = 7'd55;
parameter [6:0] LEGUP_F_calc_value4_BB_77_56 = 7'd56;
parameter [6:0] LEGUP_F_calc_value4_BB_77_57 = 7'd57;
parameter [6:0] LEGUP_F_calc_value4_BB_87_58 = 7'd58;
parameter [6:0] LEGUP_F_calc_value4_BB_87_59 = 7'd59;
parameter [6:0] LEGUP_F_calc_value4_BB_93_60 = 7'd60;
parameter [6:0] LEGUP_F_calc_value4_BB_96_61 = 7'd61;
parameter [6:0] LEGUP_F_calc_value4_BB_99_62 = 7'd62;
parameter [6:0] LEGUP_F_calc_value4_BB_99_63 = 7'd63;
parameter [6:0] LEGUP_F_calc_value4_BB_104_64 = 7'd64;
parameter [6:0] LEGUP_F_calc_value4_BB_104_65 = 7'd65;
parameter [6:0] LEGUP_F_calc_value4_BB_109_66 = 7'd66;
parameter [6:0] LEGUP_F_calc_value4_BB_114_67 = 7'd67;
parameter [6:0] LEGUP_F_calc_value4_BB_116_68 = 7'd68;
parameter [6:0] LEGUP_F_calc_value4_BB_122_69 = 7'd69;
parameter [6:0] LEGUP_F_calc_value4_BB_124_70 = 7'd70;
parameter [6:0] LEGUP_F_calc_value4_BB_126_71 = 7'd71;
parameter [6:0] LEGUP_F_calc_value4_BB_129_72 = 7'd72;
parameter [6:0] LEGUP_F_calc_value4_BB_132_73 = 7'd73;
parameter [6:0] LEGUP_F_calc_value4_BB_134_74 = 7'd74;
parameter [6:0] LEGUP_F_calc_value4_BB_136_75 = 7'd75;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [31:0] arg_sig;
input [31:0] arg_n;
input [31:0] arg_wmax;
input [31:0] arg_nonarrow;
reg [6:0] cur_state;
reg [31:0] calc_value4_0_1;
reg [31:0] calc_value4_0_1_reg;
reg [31:0] calc_value4_0_2;
reg [31:0] calc_value4_0_2_reg;
reg [31:0] calc_value4_0_3;
reg [31:0] calc_value4_0_3_reg;
reg  calc_value4_0_4;
reg  calc_value4_0_4_reg;
reg [31:0] calc_value4___crit_edge__pre14;
reg [31:0] calc_value4___crit_edge__pre14_reg;
reg  calc_value4_5_6;
reg  calc_value4_5_6_reg;
reg [31:0] calc_value4_7_8;
reg [31:0] calc_value4_7_8_reg;
reg [31:0] calc_value4_7_9;
reg [31:0] calc_value4_7_9_reg;
reg [31:0] calc_value4_7_10;
reg [31:0] calc_value4_7_10_reg;
reg [31:0] calc_value4_7_11;
reg [31:0] calc_value4_7_11_reg;
reg [31:0] calc_value4_7_12;
reg [31:0] calc_value4_7_12_reg;
reg [31:0] calc_value4_7_13;
reg [31:0] calc_value4_7_13_reg;
reg [31:0] calc_value4_7_14;
reg [31:0] calc_value4_7_14_reg;
reg [31:0] calc_value4_7_15;
reg [31:0] calc_value4_7_15_reg;
reg [31:0] calc_value4_7_16;
reg [31:0] calc_value4_7_16_reg;
reg [31:0] calc_value4_7_17;
reg [31:0] calc_value4_7_17_reg;
reg [31:0] calc_value4_7_18;
reg [31:0] calc_value4_7_18_reg;
reg [31:0] calc_value4_7_19;
reg [31:0] calc_value4_7_19_reg;
reg [31:0] calc_value4_7_tmp;
reg [31:0] calc_value4_7_tmp_reg;
reg [31:0] calc_value4_7_20;
reg [31:0] calc_value4_7_20_reg;
reg [31:0] calc_value4_7_21;
reg [31:0] calc_value4_7_21_reg;
reg [31:0] calc_value4_7_22;
reg [31:0] calc_value4_7_22_reg;
reg [31:0] calc_value4_7_23;
reg [31:0] calc_value4_7_23_reg;
reg  calc_value4_7_24;
reg  calc_value4_7_24_reg;
reg  calc_value4_7_25;
reg  calc_value4_7_25_reg;
reg  calc_value4_7_or_cond;
reg  calc_value4_7_or_cond_reg;
reg  calc_value4_7_26;
reg  calc_value4_7_26_reg;
reg  calc_value4_7_or_cond5;
reg  calc_value4_7_or_cond5_reg;
reg [31:0] calc_value4_7_27;
reg [31:0] calc_value4_7_27_reg;
reg [31:0] calc_value4_28_29;
reg [31:0] calc_value4_28_29_reg;
reg [31:0] calc_value4_28_30;
reg [31:0] calc_value4_28_30_reg;
reg [31:0] calc_value4_28_31;
reg [31:0] calc_value4_28_31_reg;
reg [31:0] calc_value4_28_32;
reg [31:0] calc_value4_28_32_reg;
reg [31:0] calc_value4_28_33;
reg [31:0] calc_value4_28_33_reg;
reg [31:0] calc_value4_28_34;
reg [31:0] calc_value4_28_34_reg;
reg [31:0] calc_value4_28_35;
reg [31:0] calc_value4_28_35_reg;
reg [31:0] calc_value4_28_36;
reg [31:0] calc_value4_28_36_reg;
reg [31:0] calc_value4_28_37;
reg [31:0] calc_value4_28_37_reg;
reg [31:0] calc_value4_28_38;
reg [31:0] calc_value4_28_38_reg;
reg [31:0] calc_value4_28_39;
reg [31:0] calc_value4_28_39_reg;
reg [31:0] calc_value4_28_40;
reg [31:0] calc_value4_28_40_reg;
reg [31:0] calc_value4___crit_edge13_v_0;
reg [31:0] calc_value4___crit_edge13_v_0_reg;
reg  calc_value4___crit_edge13_41;
reg  calc_value4___crit_edge13_41_reg;
reg [31:0] calc_value4_42_43;
reg [31:0] calc_value4_42_43_reg;
reg [31:0] calc_value4_42_44;
reg [31:0] calc_value4_42_44_reg;
reg [31:0] calc_value4_42_45;
reg [31:0] calc_value4_42_45_reg;
reg [31:0] calc_value4_42_46;
reg [31:0] calc_value4_42_46_reg;
reg  calc_value4_42_47;
reg  calc_value4_42_47_reg;
reg [31:0] calc_value4_48_49;
reg [31:0] calc_value4_48_49_reg;
reg [31:0] calc_value4_48_50;
reg [31:0] calc_value4_48_50_reg;
reg [31:0] calc_value4_48_51;
reg [31:0] calc_value4_48_51_reg;
reg [31:0] calc_value4_48_52;
reg [31:0] calc_value4_48_52_reg;
reg [31:0] calc_value4_53_54;
reg [31:0] calc_value4_53_54_reg;
reg [31:0] calc_value4_53_55;
reg [31:0] calc_value4_53_55_reg;
reg [31:0] calc_value4_53_56;
reg [31:0] calc_value4_53_56_reg;
reg [31:0] calc_value4_53_57;
reg [31:0] calc_value4_53_57_reg;
reg [31:0] calc_value4_53_58;
reg [31:0] calc_value4_53_58_reg;
reg [31:0] calc_value4_53_tmp3;
reg [31:0] calc_value4_53_tmp3_reg;
reg [31:0] calc_value4_53_59;
reg [31:0] calc_value4_53_59_reg;
reg [31:0] calc_value4_53_60;
reg [31:0] calc_value4_53_60_reg;
reg [31:0] calc_value4_53_61;
reg [31:0] calc_value4_53_61_reg;
reg [31:0] calc_value4_53_62;
reg [31:0] calc_value4_53_62_reg;
reg [31:0] calc_value4_53_63;
reg [31:0] calc_value4_53_63_reg;
reg [31:0] calc_value4_53_64;
reg [31:0] calc_value4_53_64_reg;
reg [31:0] calc_value4_53_65;
reg [31:0] calc_value4_53_65_reg;
reg [31:0] calc_value4_66_k1_0;
reg [31:0] calc_value4_66_k1_0_reg;
reg [31:0] calc_value4_66_67;
reg [31:0] calc_value4_66_67_reg;
reg [31:0] calc_value4_66_68;
reg [31:0] calc_value4_66_68_reg;
reg [31:0] calc_value4_69_v_1;
reg [31:0] calc_value4_69_v_1_reg;
reg [31:0] calc_value4_69_70;
reg [31:0] calc_value4_69_70_reg;
reg [31:0] calc_value4_71__pre_phi15;
reg [31:0] calc_value4_71__pre_phi15_reg;
reg [31:0] calc_value4_71__02;
reg [31:0] calc_value4_71__02_reg;
reg [31:0] calc_value4_71_v_2;
reg [31:0] calc_value4_71_v_2_reg;
reg [31:0] calc_value4_71_72;
reg [31:0] calc_value4_71_72_reg;
reg [31:0] calc_value4_71_73;
reg [31:0] calc_value4_71_73_reg;
reg  calc_value4_71_74;
reg  calc_value4_71_74_reg;
reg  calc_value4_75_76;
reg  calc_value4_75_76_reg;
reg [31:0] calc_value4_77_78;
reg [31:0] calc_value4_77_78_reg;
reg [31:0] calc_value4_77_79;
reg [31:0] calc_value4_77_79_reg;
reg [31:0] calc_value4_77_80;
reg [31:0] calc_value4_77_80_reg;
reg [31:0] calc_value4_77_81;
reg [31:0] calc_value4_77_81_reg;
reg [31:0] calc_value4_77_82;
reg [31:0] calc_value4_77_82_reg;
reg [31:0] calc_value4_77_83;
reg [31:0] calc_value4_77_83_reg;
reg  calc_value4_77_84;
reg  calc_value4_77_84_reg;
reg  calc_value4_77_85;
reg  calc_value4_77_85_reg;
reg  calc_value4_77_or_cond6;
reg  calc_value4_77_or_cond6_reg;
reg  calc_value4_77_86;
reg  calc_value4_77_86_reg;
reg  calc_value4_77_or_cond7;
reg  calc_value4_77_or_cond7_reg;
reg [31:0] calc_value4_87_88;
reg [31:0] calc_value4_87_88_reg;
reg [31:0] calc_value4_87_89;
reg [31:0] calc_value4_87_89_reg;
reg [31:0] calc_value4_87_90;
reg [31:0] calc_value4_87_90_reg;
reg [31:0] calc_value4_87_91;
reg [31:0] calc_value4_87_91_reg;
reg [31:0] calc_value4_87_92;
reg [31:0] calc_value4_87_92_reg;
reg [31:0] calc_value4_93_v_3;
reg [31:0] calc_value4_93_v_3_reg;
reg [31:0] calc_value4_93_94;
reg [31:0] calc_value4_93_94_reg;
reg  calc_value4_93_95;
reg  calc_value4_93_95_reg;
reg [31:0] calc_value4_96_97;
reg [31:0] calc_value4_96_97_reg;
reg  calc_value4_96_98;
reg  calc_value4_96_98_reg;
reg [31:0] calc_value4_99_100;
reg [31:0] calc_value4_99_100_reg;
reg [31:0] calc_value4_99_101;
reg [31:0] calc_value4_99_101_reg;
reg [31:0] calc_value4_99_102;
reg [31:0] calc_value4_99_102_reg;
reg [31:0] calc_value4_99_103;
reg [31:0] calc_value4_99_103_reg;
reg [31:0] calc_value4_104_105;
reg [31:0] calc_value4_104_105_reg;
reg [31:0] calc_value4_104_106;
reg [31:0] calc_value4_104_106_reg;
reg [31:0] calc_value4_104_107;
reg [31:0] calc_value4_104_107_reg;
reg [31:0] calc_value4_104_108;
reg [31:0] calc_value4_104_108_reg;
reg [31:0] calc_value4_109__1;
reg [31:0] calc_value4_109__1_reg;
reg [31:0] calc_value4_109_v_4;
reg [31:0] calc_value4_109_v_4_reg;
reg [31:0] calc_value4_109_110;
reg [31:0] calc_value4_109_110_reg;
reg [31:0] calc_value4_109_111;
reg [31:0] calc_value4_109_111_reg;
reg [31:0] calc_value4_109_112;
reg [31:0] calc_value4_109_112_reg;
reg  calc_value4_109_113;
reg  calc_value4_109_113_reg;
reg  calc_value4_114_115;
reg  calc_value4_114_115_reg;
reg [31:0] calc_value4_116_117;
reg [31:0] calc_value4_116_117_reg;
reg [31:0] calc_value4_116_118;
reg [31:0] calc_value4_116_118_reg;
reg  calc_value4_116_119;
reg  calc_value4_116_119_reg;
reg  calc_value4_116_120;
reg  calc_value4_116_120_reg;
reg  calc_value4_116_or_cond8;
reg  calc_value4_116_or_cond8_reg;
reg  calc_value4_116_121;
reg  calc_value4_116_121_reg;
reg  calc_value4_116_or_cond9;
reg  calc_value4_116_or_cond9_reg;
reg [31:0] calc_value4_122__neg12;
reg [31:0] calc_value4_122__neg12_reg;
reg [31:0] calc_value4_122_123;
reg [31:0] calc_value4_122_123_reg;
reg [31:0] calc_value4_124_v_5;
reg [31:0] calc_value4_124_v_5_reg;
reg  calc_value4_124_125;
reg  calc_value4_124_125_reg;
reg [31:0] calc_value4_126_127;
reg [31:0] calc_value4_126_127_reg;
reg [31:0] calc_value4_126_128;
reg [31:0] calc_value4_126_128_reg;
reg [31:0] calc_value4_129__2;
reg [31:0] calc_value4_129__2_reg;
reg [31:0] calc_value4_129_v_6;
reg [31:0] calc_value4_129_v_6_reg;
reg [31:0] calc_value4_129_130;
reg [31:0] calc_value4_129_130_reg;
reg  calc_value4_129_131;
reg  calc_value4_129_131_reg;
reg  calc_value4_132_133;
reg  calc_value4_132_133_reg;
reg [31:0] calc_value4_134__3;
reg [31:0] calc_value4_134__3_reg;
reg  calc_value4_134_135;
reg  calc_value4_134_135_reg;
reg [31:0] calc_value4_134__v_6;
reg [31:0] calc_value4_134__v_6_reg;
reg [31:0] calc_value4_136__0;
reg [31:0] calc_value4_136__0_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] calc_value4_unsigned_divide_32_0_op0;
reg [31:0] calc_value4_unsigned_divide_32_0_op1;
wire [31:0] lpm_divide_calc_value4_69_70_temp_out;
wire [31:0] calc_value4_69_70_unused;
reg  lpm_divide_calc_value4_69_70_en;
reg [31:0] lpm_divide_calc_value4_69_70_out;
reg [31:0] calc_value4_unsigned_divide_32_0;
reg  lpm_mult_calc_value4_7_12_en;
reg [31:0] calc_value4_7_12_stage0_reg;
reg  lpm_mult_calc_value4_7_17_en;
reg [31:0] calc_value4_7_17_stage0_reg;
reg  lpm_mult_calc_value4_7_tmp_en;
reg [31:0] calc_value4_7_tmp_stage0_reg;
reg  lpm_mult_calc_value4_7_13_en;
reg [31:0] calc_value4_7_13_stage0_reg;
reg  lpm_mult_calc_value4_7_18_en;
reg [31:0] calc_value4_7_18_stage0_reg;
reg  lpm_mult_calc_value4_7_22_en;
reg [31:0] calc_value4_7_22_stage0_reg;
reg  lpm_mult_calc_value4_28_30_en;
reg [31:0] calc_value4_28_30_stage0_reg;
reg  lpm_mult_calc_value4_28_33_en;
reg [31:0] calc_value4_28_33_stage0_reg;
reg  lpm_mult_calc_value4_28_34_en;
reg [31:0] calc_value4_28_34_stage0_reg;
reg  lpm_mult_calc_value4_28_31_en;
reg [31:0] calc_value4_28_31_stage0_reg;
reg  lpm_mult_calc_value4_28_37_en;
reg [31:0] calc_value4_28_37_stage0_reg;
reg  lpm_mult_calc_value4_42_45_en;
reg [31:0] calc_value4_42_45_stage0_reg;
reg  lpm_mult_calc_value4_48_49_en;
reg [31:0] calc_value4_48_49_stage0_reg;
reg  lpm_mult_calc_value4_48_51_en;
reg [31:0] calc_value4_48_51_stage0_reg;
reg  lpm_mult_calc_value4_53_56_en;
reg [31:0] calc_value4_53_56_stage0_reg;
reg  lpm_mult_calc_value4_53_tmp3_en;
reg [31:0] calc_value4_53_tmp3_stage0_reg;
reg  lpm_mult_calc_value4_53_61_en;
reg [31:0] calc_value4_53_61_stage0_reg;
reg  lpm_mult_calc_value4_53_57_en;
reg [31:0] calc_value4_53_57_stage0_reg;
reg  lpm_mult_calc_value4_53_63_en;
reg [31:0] calc_value4_53_63_stage0_reg;
reg  lpm_mult_calc_value4_66_67_en;
reg [31:0] calc_value4_66_67_stage0_reg;
reg  lpm_mult_calc_value4_77_81_en;
reg [31:0] calc_value4_77_81_stage0_reg;
reg  lpm_mult_calc_value4_87_90_en;
reg [31:0] calc_value4_87_90_stage0_reg;
reg  lpm_mult_calc_value4_99_102_en;
reg [31:0] calc_value4_99_102_stage0_reg;
reg  lpm_mult_calc_value4_104_107_en;
reg [31:0] calc_value4_104_107_stage0_reg;

/*   %70 = udiv i32 %v.1, 12*/
lpm_divide lpm_divide_calc_value4_69_70 (
	.quotient (lpm_divide_calc_value4_69_70_temp_out),
	.remain (calc_value4_69_70_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_calc_value4_69_70_en),
	.numer (calc_value4_unsigned_divide_32_0_op0),
	.denom (calc_value4_unsigned_divide_32_0_op1)
);

defparam
	lpm_divide_calc_value4_69_70.lpm_pipeline = 32,
	lpm_divide_calc_value4_69_70.lpm_widthn = 32,
	lpm_divide_calc_value4_69_70.lpm_widthd = 32,
	lpm_divide_calc_value4_69_70.lpm_drepresentation = "UNSIGNED",
	lpm_divide_calc_value4_69_70.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_calc_value4_69_70.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_0_4 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_5_3;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_0_4 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB___crit_edge_2;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB___crit_edge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB___crit_edge_2;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB___crit_edge_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_71_54;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_71_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_5_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_5_3;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_5_3) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_5_6 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_5_3) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_5_6 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_4;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_7_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_4;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_7_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_5;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_7_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_5;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_7_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_6;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_7_6;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_7_6) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_7_or_cond5_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_7;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_7_6) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_7_or_cond5_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB___crit_edge13_10;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB___crit_edge13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_7;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_8;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_8;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_9;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_28_9;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_28_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_28_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB___crit_edge13_10;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB___crit_edge13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB___crit_edge13_10;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB___crit_edge13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10) & (memory_controller_waitrequest == 1'd0)) & (calc_value4___crit_edge13_41 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_42_11;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_42_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10) & (memory_controller_waitrequest == 1'd0)) & (calc_value4___crit_edge13_41 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_21;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_42_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_42_11;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_42_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_42_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_42_12;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_42_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_42_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_42_12;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_42_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_42_12) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_42_47_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_13;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_42_12) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_42_47_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_16;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_13;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_14;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_14;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_15;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_48_15;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_48_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_48_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_66_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_66_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_16;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_17;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_17;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_18;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_53_18;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_53_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_53_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_66_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_66_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_66_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_66_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_66_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_66_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_66_20;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_66_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_66_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_66_20;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_66_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_66_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_21;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_21;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_22;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_22;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_23;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_23;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_24;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_24;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_25;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_25;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_26;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_26;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_27;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_27;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_28;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_28;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_29;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_29;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_30;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_30;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_31;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_31;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_32;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_32;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_33;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_33;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_34;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_34;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_35;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_35;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_36;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_36;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_37;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_37;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_38;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_38;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_39;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_39;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_40;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_40;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_44;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_44;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_45;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_45;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_46;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_46;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_47;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_47;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_48;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_48;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_50;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_50;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_51;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_51;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_52;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_52;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_53;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_69_53;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_69_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_71_54;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_71_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_71_54;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_71_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_75_55;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_75_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_109_66;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_109_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_75_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_75_55;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_75_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_75_55) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_75_76 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_75_55) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_75_76 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_77_56;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_77_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_77_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_77_56;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_77_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_77_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_77_57;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_77_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_77_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_77_57;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_77_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_77_57) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_77_or_cond7_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_87_58;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_87_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_77_57) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_77_or_cond7_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_93_60;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_93_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_87_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_87_58;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_87_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_87_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_87_59;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_87_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_87_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_87_59;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_87_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_87_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_93_60;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_93_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_93_60;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_93_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_96_61;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_96_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_109_66;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_109_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_96_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_96_61;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_96_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_96_61) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_96_98 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_99_62;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_99_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_96_61) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_96_98 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_104_64;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_104_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_99_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_99_62;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_99_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_99_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_99_63;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_99_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_99_63;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_99_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_109_66;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_109_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_104_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_104_64;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_104_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_104_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_104_65;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_104_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_104_65;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_104_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_109_66;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_109_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_109_66;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_109_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_114_67;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_114_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_129_72;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_129_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_114_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_114_67;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_114_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_114_67) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_114_115 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_114_67) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_114_115 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_116_68;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_116_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_116_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_116_68;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_116_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_116_68) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_116_or_cond9 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_122_69;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_122_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_116_68) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_116_or_cond9 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_124_70;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_124_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_122_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_122_69;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_122_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_122_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_124_70;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_124_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_124_70;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_124_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_126_71;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_126_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_129_72;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_129_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_126_71;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_126_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_129_72;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_129_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_129_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_129_72;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_129_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_129_72) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_129_131 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_134_74;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_134_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_129_72) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_129_131 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_132_73;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_132_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_132_73;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_132_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_134_74;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_134_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_134_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_134_74;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_134_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_134_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_136_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_value4_BB_136_75;
if (reset == 1'b0 && ^(LEGUP_F_calc_value4_BB_136_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_value4_BB_136_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* calc_value4: %0*/
/*   %1 = add i32 %n, -1*/
begin
calc_value4_0_1 = (arg_n + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %0*/
/*   %1 = add i32 %n, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_0_1))
begin
calc_value4_0_1_reg <= calc_value4_0_1;
if (reset == 1'b0 && ^(calc_value4_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_0_1_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %0*/
/*   %2 = lshr i32 %sig, 12*/
begin
calc_value4_0_2 = (arg_sig >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %0*/
/*   %2 = lshr i32 %sig, 12*/
if ((cur_state == LEGUP_F_calc_value4_BB_0_1))
begin
calc_value4_0_2_reg <= calc_value4_0_2;
if (reset == 1'b0 && ^(calc_value4_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_0_2_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %0*/
/*   %3 = and i32 %2, 15*/
begin
calc_value4_0_3 = (calc_value4_0_2 & 32'd15);
end
end
always @(posedge clk) begin
/* calc_value4: %0*/
/*   %3 = and i32 %2, 15*/
if ((cur_state == LEGUP_F_calc_value4_BB_0_1))
begin
calc_value4_0_3_reg <= calc_value4_0_3;
if (reset == 1'b0 && ^(calc_value4_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_0_3_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %0*/
/*   %4 = icmp ugt i32 %3, 1*/
begin
calc_value4_0_4 = (calc_value4_0_3 > 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %0*/
/*   %4 = icmp ugt i32 %3, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_0_1))
begin
calc_value4_0_4_reg <= calc_value4_0_4;
if (reset == 1'b0 && ^(calc_value4_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_0_4_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %._crit_edge*/
/*   %.pre14 = sub i32 %1, %3*/
begin
calc_value4___crit_edge__pre14 = (calc_value4_0_1_reg - calc_value4_0_3_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %._crit_edge*/
/*   %.pre14 = sub i32 %1, %3*/
if ((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2))
begin
calc_value4___crit_edge__pre14_reg <= calc_value4___crit_edge__pre14;
if (reset == 1'b0 && ^(calc_value4___crit_edge__pre14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4___crit_edge__pre14_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %5*/
/*   %6 = icmp ugt i32 %3, %wmax*/
begin
calc_value4_5_6 = (calc_value4_0_3_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %5*/
/*   %6 = icmp ugt i32 %3, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_5_3))
begin
calc_value4_5_6_reg <= calc_value4_5_6;
if (reset == 1'b0 && ^(calc_value4_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_5_6_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %8 = sub i32 %1, %3*/
begin
calc_value4_7_8 = (calc_value4_0_1_reg - calc_value4_0_3_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %8 = sub i32 %1, %3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_8_reg <= calc_value4_7_8;
if (reset == 1'b0 && ^(calc_value4_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_8_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %9 = add i32 %n, -2*/
begin
calc_value4_7_9 = (arg_n + -32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %9 = add i32 %n, -2*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_9_reg <= calc_value4_7_9;
if (reset == 1'b0 && ^(calc_value4_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_9_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %10 = shl i32 %1, 1*/
begin
calc_value4_7_10 = (calc_value4_0_1_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %10 = shl i32 %1, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_10_reg <= calc_value4_7_10;
if (reset == 1'b0 && ^(calc_value4_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_10_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %11 = add i32 %10, -1*/
begin
calc_value4_7_11 = (calc_value4_7_10 + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %11 = add i32 %10, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_11_reg <= calc_value4_7_11;
if (reset == 1'b0 && ^(calc_value4_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_11_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_12 = calc_value4_7_12_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %12 = mul i32 %9, %1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_12_reg <= calc_value4_7_12;
if (reset == 1'b0 && ^(calc_value4_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_12_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %12 = mul i32 %9, %1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_12_reg <= calc_value4_7_12;
if (reset == 1'b0 && ^(calc_value4_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_12_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_13 = calc_value4_7_13_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %13 = mul i32 %12, %11*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_13_reg <= calc_value4_7_13;
if (reset == 1'b0 && ^(calc_value4_7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_13_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %13 = mul i32 %12, %11*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_13_reg <= calc_value4_7_13;
if (reset == 1'b0 && ^(calc_value4_7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_13_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %14 = add i32 %8, 1*/
begin
calc_value4_7_14 = (calc_value4_7_8 + 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %14 = add i32 %8, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_14_reg <= calc_value4_7_14;
if (reset == 1'b0 && ^(calc_value4_7_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_14_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %15 = shl i32 %8, 1*/
begin
calc_value4_7_15 = (calc_value4_7_8 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %15 = shl i32 %8, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_15_reg <= calc_value4_7_15;
if (reset == 1'b0 && ^(calc_value4_7_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_15_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %16 = or i32 %15, 1*/
begin
calc_value4_7_16 = (calc_value4_7_15 | 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %16 = or i32 %15, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_16_reg <= calc_value4_7_16;
if (reset == 1'b0 && ^(calc_value4_7_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_16_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_17 = calc_value4_7_17_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %17 = mul i32 %14, %8*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_17_reg <= calc_value4_7_17;
if (reset == 1'b0 && ^(calc_value4_7_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_17_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %17 = mul i32 %14, %8*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_17_reg <= calc_value4_7_17;
if (reset == 1'b0 && ^(calc_value4_7_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_17_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_18 = calc_value4_7_18_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %18 = mul i32 %17, %16*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_18_reg <= calc_value4_7_18;
if (reset == 1'b0 && ^(calc_value4_7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_18_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %18 = mul i32 %17, %16*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_18_reg <= calc_value4_7_18;
if (reset == 1'b0 && ^(calc_value4_7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_18_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %19 = sub i32 %13, %18*/
begin
calc_value4_7_19 = (calc_value4_7_13 - calc_value4_7_18);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %19 = sub i32 %13, %18*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_19_reg <= calc_value4_7_19;
if (reset == 1'b0 && ^(calc_value4_7_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_19_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_tmp = calc_value4_7_tmp_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %tmp = mul i32 %3, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_tmp_reg <= calc_value4_7_tmp;
if (reset == 1'b0 && ^(calc_value4_7_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_tmp_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %tmp = mul i32 %3, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_tmp_reg <= calc_value4_7_tmp;
if (reset == 1'b0 && ^(calc_value4_7_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_tmp_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %20 = add i32 %tmp, -3*/
begin
calc_value4_7_20 = (calc_value4_7_tmp + -32'd3);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %20 = add i32 %tmp, -3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_5))
begin
calc_value4_7_20_reg <= calc_value4_7_20;
if (reset == 1'b0 && ^(calc_value4_7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_20_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %21 = sub i32 %10, %3*/
begin
calc_value4_7_21 = (calc_value4_7_10 - calc_value4_0_3_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %21 = sub i32 %10, %3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_21_reg <= calc_value4_7_21;
if (reset == 1'b0 && ^(calc_value4_7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_21_reg"); $finish; end
end
end
always @(*) begin
calc_value4_7_22 = calc_value4_7_22_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %22 = mul i32 %20, %21*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_22_reg <= calc_value4_7_22;
if (reset == 1'b0 && ^(calc_value4_7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_22_reg"); $finish; end
end
/* calc_value4: %7*/
/*   %22 = mul i32 %20, %21*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_22_reg <= calc_value4_7_22;
if (reset == 1'b0 && ^(calc_value4_7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_22_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %23 = sub i32 %19, %22*/
begin
calc_value4_7_23 = (calc_value4_7_19 - calc_value4_7_22);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %23 = sub i32 %19, %22*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_6))
begin
calc_value4_7_23_reg <= calc_value4_7_23;
if (reset == 1'b0 && ^(calc_value4_7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_23_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %24 = icmp eq i32 %nonarrow, 0*/
begin
calc_value4_7_24 = (arg_nonarrow == 32'd0);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %24 = icmp eq i32 %nonarrow, 0*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_24_reg <= calc_value4_7_24;
if (reset == 1'b0 && ^(calc_value4_7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_24_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %25 = icmp ugt i32 %3, 2*/
begin
calc_value4_7_25 = (calc_value4_0_3_reg > 32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %25 = icmp ugt i32 %3, 2*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_25_reg <= calc_value4_7_25;
if (reset == 1'b0 && ^(calc_value4_7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_25_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %or.cond = and i1 %24, %25*/
begin
calc_value4_7_or_cond = (calc_value4_7_24 & calc_value4_7_25);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %or.cond = and i1 %24, %25*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_or_cond_reg <= calc_value4_7_or_cond;
if (reset == 1'b0 && ^(calc_value4_7_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %26 = icmp ugt i32 %1, 4*/
begin
calc_value4_7_26 = (calc_value4_0_1_reg > 32'd4);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %26 = icmp ugt i32 %1, 4*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_26_reg <= calc_value4_7_26;
if (reset == 1'b0 && ^(calc_value4_7_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_26_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %or.cond5 = and i1 %or.cond, %26*/
begin
calc_value4_7_or_cond5 = (calc_value4_7_or_cond & calc_value4_7_26);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %or.cond5 = and i1 %or.cond, %26*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_or_cond5_reg <= calc_value4_7_or_cond5;
if (reset == 1'b0 && ^(calc_value4_7_or_cond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_or_cond5_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %7*/
/*   %27 = add i32 %n, -3*/
begin
calc_value4_7_27 = (arg_n + -32'd3);
end
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %27 = add i32 %n, -3*/
if ((cur_state == LEGUP_F_calc_value4_BB_7_4))
begin
calc_value4_7_27_reg <= calc_value4_7_27;
if (reset == 1'b0 && ^(calc_value4_7_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_7_27_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %29 = add i32 %10, -3*/
begin
calc_value4_28_29 = (calc_value4_7_10_reg + -32'd3);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %29 = add i32 %10, -3*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_7))
begin
calc_value4_28_29_reg <= calc_value4_28_29;
if (reset == 1'b0 && ^(calc_value4_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_29_reg"); $finish; end
end
end
always @(*) begin
calc_value4_28_30 = calc_value4_28_30_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %30 = mul i32 %27, %9*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_30_reg <= calc_value4_28_30;
if (reset == 1'b0 && ^(calc_value4_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_30_reg"); $finish; end
end
/* calc_value4: %28*/
/*   %30 = mul i32 %27, %9*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_30_reg <= calc_value4_28_30;
if (reset == 1'b0 && ^(calc_value4_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_30_reg"); $finish; end
end
end
always @(*) begin
calc_value4_28_31 = calc_value4_28_31_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %31 = mul i32 %30, %29*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_31_reg <= calc_value4_28_31;
if (reset == 1'b0 && ^(calc_value4_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_31_reg"); $finish; end
end
/* calc_value4: %28*/
/*   %31 = mul i32 %30, %29*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_31_reg <= calc_value4_28_31;
if (reset == 1'b0 && ^(calc_value4_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_31_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %32 = add i32 %tmp, -6*/
begin
calc_value4_28_32 = (calc_value4_7_tmp_reg + -32'd6);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %32 = add i32 %tmp, -6*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_7))
begin
calc_value4_28_32_reg <= calc_value4_28_32;
if (reset == 1'b0 && ^(calc_value4_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_32_reg"); $finish; end
end
end
always @(*) begin
calc_value4_28_33 = calc_value4_28_33_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %33 = mul i32 %1, 14*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_33_reg <= calc_value4_28_33;
if (reset == 1'b0 && ^(calc_value4_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_33_reg"); $finish; end
end
/* calc_value4: %28*/
/*   %33 = mul i32 %1, 14*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_33_reg <= calc_value4_28_33;
if (reset == 1'b0 && ^(calc_value4_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_33_reg"); $finish; end
end
end
always @(*) begin
calc_value4_28_34 = calc_value4_28_34_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %34 = mul i32 %3, -7*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_34_reg <= calc_value4_28_34;
if (reset == 1'b0 && ^(calc_value4_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_34_reg"); $finish; end
end
/* calc_value4: %28*/
/*   %34 = mul i32 %3, -7*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_34_reg <= calc_value4_28_34;
if (reset == 1'b0 && ^(calc_value4_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_34_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %35 = add i32 %34, -31*/
begin
calc_value4_28_35 = (calc_value4_28_34 + -32'd31);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %35 = add i32 %34, -31*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_35_reg <= calc_value4_28_35;
if (reset == 1'b0 && ^(calc_value4_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_35_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %36 = add i32 %35, %33*/
begin
calc_value4_28_36 = (calc_value4_28_35 + calc_value4_28_33);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %36 = add i32 %35, %33*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_8))
begin
calc_value4_28_36_reg <= calc_value4_28_36;
if (reset == 1'b0 && ^(calc_value4_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_36_reg"); $finish; end
end
end
always @(*) begin
calc_value4_28_37 = calc_value4_28_37_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %37 = mul i32 %36, %32*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_37_reg <= calc_value4_28_37;
if (reset == 1'b0 && ^(calc_value4_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_37_reg"); $finish; end
end
/* calc_value4: %28*/
/*   %37 = mul i32 %36, %32*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_37_reg <= calc_value4_28_37;
if (reset == 1'b0 && ^(calc_value4_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_37_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %38 = sub i32 %37, %31*/
begin
calc_value4_28_38 = (calc_value4_28_37 - calc_value4_28_31);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %38 = sub i32 %37, %31*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_38_reg <= calc_value4_28_38;
if (reset == 1'b0 && ^(calc_value4_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_38_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %39 = add i32 %38, %18*/
begin
calc_value4_28_39 = (calc_value4_28_38 + calc_value4_7_18_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %39 = add i32 %38, %18*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_39_reg <= calc_value4_28_39;
if (reset == 1'b0 && ^(calc_value4_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_39_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %28*/
/*   %40 = add i32 %39, %23*/
begin
calc_value4_28_40 = (calc_value4_28_39 + calc_value4_7_23_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %40 = add i32 %39, %23*/
if ((cur_state == LEGUP_F_calc_value4_BB_28_9))
begin
calc_value4_28_40_reg <= calc_value4_28_40;
if (reset == 1'b0 && ^(calc_value4_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_28_40_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %._crit_edge13*/
/*   %v.0 = phi i32 [ %40, %28 ], [ %23, %7 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_7_6) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_7_or_cond5_reg == 1'd0)))
begin
calc_value4___crit_edge13_v_0 = calc_value4_7_23;
end
/* calc_value4: %._crit_edge13*/
/*   %v.0 = phi i32 [ %40, %28 ], [ %23, %7 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_28_9) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4___crit_edge13_v_0 = calc_value4_28_40;
end
end
always @(posedge clk) begin
/* calc_value4: %._crit_edge13*/
/*   %v.0 = phi i32 [ %40, %28 ], [ %23, %7 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_7_6) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_7_or_cond5_reg == 1'd0)))
begin
calc_value4___crit_edge13_v_0_reg <= calc_value4___crit_edge13_v_0;
if (reset == 1'b0 && ^(calc_value4___crit_edge13_v_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4___crit_edge13_v_0_reg"); $finish; end
end
/* calc_value4: %._crit_edge13*/
/*   %v.0 = phi i32 [ %40, %28 ], [ %23, %7 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_28_9) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4___crit_edge13_v_0_reg <= calc_value4___crit_edge13_v_0;
if (reset == 1'b0 && ^(calc_value4___crit_edge13_v_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4___crit_edge13_v_0_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %._crit_edge13*/
/*   %41 = icmp ugt i32 %27, %wmax*/
begin
calc_value4___crit_edge13_41 = (calc_value4_7_27_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %._crit_edge13*/
/*   %41 = icmp ugt i32 %27, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10))
begin
calc_value4___crit_edge13_41_reg <= calc_value4___crit_edge13_41;
if (reset == 1'b0 && ^(calc_value4___crit_edge13_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4___crit_edge13_41_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %42*/
/*   %43 = shl i32 %wmax, 1*/
begin
calc_value4_42_43 = (arg_wmax <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %43 = shl i32 %wmax, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_11))
begin
calc_value4_42_43_reg <= calc_value4_42_43;
if (reset == 1'b0 && ^(calc_value4_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_43_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %42*/
/*   %44 = add i32 %wmax, 1*/
begin
calc_value4_42_44 = (arg_wmax + 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %44 = add i32 %wmax, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_11))
begin
calc_value4_42_44_reg <= calc_value4_42_44;
if (reset == 1'b0 && ^(calc_value4_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_44_reg"); $finish; end
end
end
always @(*) begin
calc_value4_42_45 = calc_value4_42_45_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %45 = mul i32 %43, %44*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_12))
begin
calc_value4_42_45_reg <= calc_value4_42_45;
if (reset == 1'b0 && ^(calc_value4_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_45_reg"); $finish; end
end
/* calc_value4: %42*/
/*   %45 = mul i32 %43, %44*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_12))
begin
calc_value4_42_45_reg <= calc_value4_42_45;
if (reset == 1'b0 && ^(calc_value4_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_45_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %42*/
/*   %46 = or i32 %43, 1*/
begin
calc_value4_42_46 = (calc_value4_42_43 | 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %46 = or i32 %43, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_11))
begin
calc_value4_42_46_reg <= calc_value4_42_46;
if (reset == 1'b0 && ^(calc_value4_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_46_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %42*/
/*   %47 = icmp ugt i32 %8, %wmax*/
begin
calc_value4_42_47 = (calc_value4_7_8_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %47 = icmp ugt i32 %8, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_42_11))
begin
calc_value4_42_47_reg <= calc_value4_42_47;
if (reset == 1'b0 && ^(calc_value4_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_42_47_reg"); $finish; end
end
end
always @(*) begin
calc_value4_48_49 = calc_value4_48_49_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %49 = mul i32 %46, %21*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_14))
begin
calc_value4_48_49_reg <= calc_value4_48_49;
if (reset == 1'b0 && ^(calc_value4_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_49_reg"); $finish; end
end
/* calc_value4: %48*/
/*   %49 = mul i32 %46, %21*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_14))
begin
calc_value4_48_49_reg <= calc_value4_48_49;
if (reset == 1'b0 && ^(calc_value4_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_49_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %48*/
/*   %50 = sub i32 %45, %49*/
begin
calc_value4_48_50 = (calc_value4_42_45_reg - calc_value4_48_49);
end
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %50 = sub i32 %45, %49*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_14))
begin
calc_value4_48_50_reg <= calc_value4_48_50;
if (reset == 1'b0 && ^(calc_value4_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_50_reg"); $finish; end
end
end
always @(*) begin
calc_value4_48_51 = calc_value4_48_51_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %51 = mul i32 %50, %20*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_15))
begin
calc_value4_48_51_reg <= calc_value4_48_51;
if (reset == 1'b0 && ^(calc_value4_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_51_reg"); $finish; end
end
/* calc_value4: %48*/
/*   %51 = mul i32 %50, %20*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_15))
begin
calc_value4_48_51_reg <= calc_value4_48_51;
if (reset == 1'b0 && ^(calc_value4_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_51_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %48*/
/*   %52 = add i32 %19, %51*/
begin
calc_value4_48_52 = (calc_value4_7_19_reg + calc_value4_48_51);
end
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %52 = add i32 %19, %51*/
if ((cur_state == LEGUP_F_calc_value4_BB_48_15))
begin
calc_value4_48_52_reg <= calc_value4_48_52;
if (reset == 1'b0 && ^(calc_value4_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_48_52_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %54 = add i32 %wmax, 2*/
begin
calc_value4_53_54 = (arg_wmax + 32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %54 = add i32 %wmax, 2*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_16))
begin
calc_value4_53_54_reg <= calc_value4_53_54;
if (reset == 1'b0 && ^(calc_value4_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_54_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %55 = add i32 %43, 3*/
begin
calc_value4_53_55 = (calc_value4_42_43_reg + 32'd3);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %55 = add i32 %43, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_16))
begin
calc_value4_53_55_reg <= calc_value4_53_55;
if (reset == 1'b0 && ^(calc_value4_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_55_reg"); $finish; end
end
end
always @(*) begin
calc_value4_53_56 = calc_value4_53_56_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %56 = mul i32 %44, %54*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_56_reg <= calc_value4_53_56;
if (reset == 1'b0 && ^(calc_value4_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_56_reg"); $finish; end
end
/* calc_value4: %53*/
/*   %56 = mul i32 %44, %54*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_56_reg <= calc_value4_53_56;
if (reset == 1'b0 && ^(calc_value4_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_56_reg"); $finish; end
end
end
always @(*) begin
calc_value4_53_57 = calc_value4_53_57_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %57 = mul i32 %56, %55*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_57_reg <= calc_value4_53_57;
if (reset == 1'b0 && ^(calc_value4_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_57_reg"); $finish; end
end
/* calc_value4: %53*/
/*   %57 = mul i32 %56, %55*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_57_reg <= calc_value4_53_57;
if (reset == 1'b0 && ^(calc_value4_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_57_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %58 = sub i32 %1, %wmax*/
begin
calc_value4_53_58 = (calc_value4_0_1_reg - arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %58 = sub i32 %1, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_16))
begin
calc_value4_53_58_reg <= calc_value4_53_58;
if (reset == 1'b0 && ^(calc_value4_53_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_58_reg"); $finish; end
end
end
always @(*) begin
calc_value4_53_tmp3 = calc_value4_53_tmp3_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %tmp3 = mul i32 %58, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_tmp3_reg <= calc_value4_53_tmp3;
if (reset == 1'b0 && ^(calc_value4_53_tmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_tmp3_reg"); $finish; end
end
/* calc_value4: %53*/
/*   %tmp3 = mul i32 %58, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_tmp3_reg <= calc_value4_53_tmp3;
if (reset == 1'b0 && ^(calc_value4_53_tmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_tmp3_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %59 = add i32 %tmp3, -6*/
begin
calc_value4_53_59 = (calc_value4_53_tmp3 + -32'd6);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %59 = add i32 %tmp3, -6*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_59_reg <= calc_value4_53_59;
if (reset == 1'b0 && ^(calc_value4_53_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_59_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %60 = add i32 %wmax, %n*/
begin
calc_value4_53_60 = (arg_wmax + arg_n);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %60 = add i32 %wmax, %n*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_16))
begin
calc_value4_53_60_reg <= calc_value4_53_60;
if (reset == 1'b0 && ^(calc_value4_53_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_60_reg"); $finish; end
end
end
always @(*) begin
calc_value4_53_61 = calc_value4_53_61_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %61 = mul i32 %46, %60*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_61_reg <= calc_value4_53_61;
if (reset == 1'b0 && ^(calc_value4_53_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_61_reg"); $finish; end
end
/* calc_value4: %53*/
/*   %61 = mul i32 %46, %60*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_61_reg <= calc_value4_53_61;
if (reset == 1'b0 && ^(calc_value4_53_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_61_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %62 = sub i32 %45, %61*/
begin
calc_value4_53_62 = (calc_value4_42_45_reg - calc_value4_53_61);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %62 = sub i32 %45, %61*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_17))
begin
calc_value4_53_62_reg <= calc_value4_53_62;
if (reset == 1'b0 && ^(calc_value4_53_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_62_reg"); $finish; end
end
end
always @(*) begin
calc_value4_53_63 = calc_value4_53_63_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %63 = mul i32 %62, %59*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_63_reg <= calc_value4_53_63;
if (reset == 1'b0 && ^(calc_value4_53_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_63_reg"); $finish; end
end
/* calc_value4: %53*/
/*   %63 = mul i32 %62, %59*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_63_reg <= calc_value4_53_63;
if (reset == 1'b0 && ^(calc_value4_53_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_63_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %64 = sub i32 %13, %57*/
begin
calc_value4_53_64 = (calc_value4_7_13_reg - calc_value4_53_57);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %64 = sub i32 %13, %57*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_64_reg <= calc_value4_53_64;
if (reset == 1'b0 && ^(calc_value4_53_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_64_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %53*/
/*   %65 = add i32 %64, %63*/
begin
calc_value4_53_65 = (calc_value4_53_64 + calc_value4_53_63);
end
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %65 = add i32 %64, %63*/
if ((cur_state == LEGUP_F_calc_value4_BB_53_18))
begin
calc_value4_53_65_reg <= calc_value4_53_65;
if (reset == 1'b0 && ^(calc_value4_53_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_53_65_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %66*/
/*   %k1.0 = phi i32 [ %52, %48 ], [ %65, %53 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_48_15) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_66_k1_0 = calc_value4_48_52;
end
/* calc_value4: %66*/
/*   %k1.0 = phi i32 [ %52, %48 ], [ %65, %53 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_53_18) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_66_k1_0 = calc_value4_53_65;
end
end
always @(posedge clk) begin
/* calc_value4: %66*/
/*   %k1.0 = phi i32 [ %52, %48 ], [ %65, %53 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_48_15) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_66_k1_0_reg <= calc_value4_66_k1_0;
if (reset == 1'b0 && ^(calc_value4_66_k1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_66_k1_0_reg"); $finish; end
end
/* calc_value4: %66*/
/*   %k1.0 = phi i32 [ %52, %48 ], [ %65, %53 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_53_18) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_66_k1_0_reg <= calc_value4_66_k1_0;
if (reset == 1'b0 && ^(calc_value4_66_k1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_66_k1_0_reg"); $finish; end
end
end
always @(*) begin
calc_value4_66_67 = calc_value4_66_67_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %66*/
/*   %67 = mul i32 %k1.0, -3*/
if ((cur_state == LEGUP_F_calc_value4_BB_66_20))
begin
calc_value4_66_67_reg <= calc_value4_66_67;
if (reset == 1'b0 && ^(calc_value4_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_66_67_reg"); $finish; end
end
/* calc_value4: %66*/
/*   %67 = mul i32 %k1.0, -3*/
if ((cur_state == LEGUP_F_calc_value4_BB_66_20))
begin
calc_value4_66_67_reg <= calc_value4_66_67;
if (reset == 1'b0 && ^(calc_value4_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_66_67_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %66*/
/*   %68 = add i32 %67, %v.0*/
begin
calc_value4_66_68 = (calc_value4_66_67 + calc_value4___crit_edge13_v_0_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %66*/
/*   %68 = add i32 %67, %v.0*/
if ((cur_state == LEGUP_F_calc_value4_BB_66_20))
begin
calc_value4_66_68_reg <= calc_value4_66_68;
if (reset == 1'b0 && ^(calc_value4_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_66_68_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %69*/
/*   %v.1 = phi i32 [ %68, %66 ], [ %v.0, %._crit_edge13 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10) & (memory_controller_waitrequest == 1'd0)) & (calc_value4___crit_edge13_41 == 1'd0)))
begin
calc_value4_69_v_1 = calc_value4___crit_edge13_v_0_reg;
end
/* calc_value4: %69*/
/*   %v.1 = phi i32 [ %68, %66 ], [ %v.0, %._crit_edge13 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_66_20) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_69_v_1 = calc_value4_66_68;
end
end
always @(posedge clk) begin
/* calc_value4: %69*/
/*   %v.1 = phi i32 [ %68, %66 ], [ %v.0, %._crit_edge13 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB___crit_edge13_10) & (memory_controller_waitrequest == 1'd0)) & (calc_value4___crit_edge13_41 == 1'd0)))
begin
calc_value4_69_v_1_reg <= calc_value4_69_v_1;
if (reset == 1'b0 && ^(calc_value4_69_v_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_69_v_1_reg"); $finish; end
end
/* calc_value4: %69*/
/*   %v.1 = phi i32 [ %68, %66 ], [ %v.0, %._crit_edge13 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_66_20) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_69_v_1_reg <= calc_value4_69_v_1;
if (reset == 1'b0 && ^(calc_value4_69_v_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_69_v_1_reg"); $finish; end
end
end
always @(*) begin
calc_value4_69_70 = calc_value4_unsigned_divide_32_0;
end
always @(posedge clk) begin
/* calc_value4: %69*/
/*   %70 = udiv i32 %v.1, 12*/
if ((cur_state == LEGUP_F_calc_value4_BB_69_53))
begin
calc_value4_69_70_reg <= calc_value4_69_70;
if (reset == 1'b0 && ^(calc_value4_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_69_70_reg"); $finish; end
end
/* calc_value4: %69*/
/*   %70 = udiv i32 %v.1, 12*/
if ((cur_state == LEGUP_F_calc_value4_BB_69_53))
begin
calc_value4_69_70_reg <= calc_value4_69_70;
if (reset == 1'b0 && ^(calc_value4_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_69_70_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %.pre-phi15 = phi i32 [ %.pre14, %._crit_edge ], [ %8, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__pre_phi15 = calc_value4___crit_edge__pre14;
end
/* calc_value4: %71*/
/*   %.pre-phi15 = phi i32 [ %.pre14, %._crit_edge ], [ %8, %69 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_71__pre_phi15 = calc_value4_7_8_reg;
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %.pre-phi15 = phi i32 [ %.pre14, %._crit_edge ], [ %8, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__pre_phi15_reg <= calc_value4_71__pre_phi15;
if (reset == 1'b0 && ^(calc_value4_71__pre_phi15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71__pre_phi15_reg"); $finish; end
end
/* calc_value4: %71*/
/*   %.pre-phi15 = phi i32 [ %.pre14, %._crit_edge ], [ %8, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__pre_phi15_reg <= calc_value4_71__pre_phi15;
if (reset == 1'b0 && ^(calc_value4_71__pre_phi15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71__pre_phi15_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %.02 = phi i32 [ 1, %._crit_edge ], [ %nonarrow, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__02 = 32'd1;
end
/* calc_value4: %71*/
/*   %.02 = phi i32 [ 1, %._crit_edge ], [ %nonarrow, %69 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_71__02 = arg_nonarrow;
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %.02 = phi i32 [ 1, %._crit_edge ], [ %nonarrow, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__02_reg <= calc_value4_71__02;
if (reset == 1'b0 && ^(calc_value4_71__02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71__02_reg"); $finish; end
end
/* calc_value4: %71*/
/*   %.02 = phi i32 [ 1, %._crit_edge ], [ %nonarrow, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71__02_reg <= calc_value4_71__02;
if (reset == 1'b0 && ^(calc_value4_71__02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71__02_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %v.2 = phi i32 [ 0, %._crit_edge ], [ %70, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71_v_2 = 32'd0;
end
/* calc_value4: %71*/
/*   %v.2 = phi i32 [ 0, %._crit_edge ], [ %70, %69 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_71_v_2 = calc_value4_69_70;
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %v.2 = phi i32 [ 0, %._crit_edge ], [ %70, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB___crit_edge_2) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71_v_2_reg <= calc_value4_71_v_2;
if (reset == 1'b0 && ^(calc_value4_71_v_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71_v_2_reg"); $finish; end
end
/* calc_value4: %71*/
/*   %v.2 = phi i32 [ 0, %._crit_edge ], [ %70, %69 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_69_53) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_71_v_2_reg <= calc_value4_71_v_2;
if (reset == 1'b0 && ^(calc_value4_71_v_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71_v_2_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %72 = lshr i32 %sig, 8*/
begin
calc_value4_71_72 = (arg_sig >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %72 = lshr i32 %sig, 8*/
if ((cur_state == LEGUP_F_calc_value4_BB_71_54))
begin
calc_value4_71_72_reg <= calc_value4_71_72;
if (reset == 1'b0 && ^(calc_value4_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71_72_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %73 = and i32 %72, 15*/
begin
calc_value4_71_73 = (calc_value4_71_72 & 32'd15);
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %73 = and i32 %72, 15*/
if ((cur_state == LEGUP_F_calc_value4_BB_71_54))
begin
calc_value4_71_73_reg <= calc_value4_71_73;
if (reset == 1'b0 && ^(calc_value4_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71_73_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %71*/
/*   %74 = icmp ugt i32 %73, 1*/
begin
calc_value4_71_74 = (calc_value4_71_73 > 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %71*/
/*   %74 = icmp ugt i32 %73, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_71_54))
begin
calc_value4_71_74_reg <= calc_value4_71_74;
if (reset == 1'b0 && ^(calc_value4_71_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_71_74_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %75*/
/*   %76 = icmp ugt i32 %73, %wmax*/
begin
calc_value4_75_76 = (calc_value4_71_73_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %75*/
/*   %76 = icmp ugt i32 %73, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_75_55))
begin
calc_value4_75_76_reg <= calc_value4_75_76;
if (reset == 1'b0 && ^(calc_value4_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_75_76_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %78 = shl i32 %.pre-phi15, 1*/
begin
calc_value4_77_78 = (calc_value4_71__pre_phi15_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %78 = shl i32 %.pre-phi15, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_78_reg <= calc_value4_77_78;
if (reset == 1'b0 && ^(calc_value4_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_78_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %79 = sub i32 %78, %73*/
begin
calc_value4_77_79 = (calc_value4_77_78 - calc_value4_71_73_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %79 = sub i32 %78, %73*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_79_reg <= calc_value4_77_79;
if (reset == 1'b0 && ^(calc_value4_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_79_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %80 = add i32 %73, -1*/
begin
calc_value4_77_80 = (calc_value4_71_73_reg + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %80 = add i32 %73, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_80_reg <= calc_value4_77_80;
if (reset == 1'b0 && ^(calc_value4_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_80_reg"); $finish; end
end
end
always @(*) begin
calc_value4_77_81 = calc_value4_77_81_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %81 = mul i32 %79, %80*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_57))
begin
calc_value4_77_81_reg <= calc_value4_77_81;
if (reset == 1'b0 && ^(calc_value4_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_81_reg"); $finish; end
end
/* calc_value4: %77*/
/*   %81 = mul i32 %79, %80*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_57))
begin
calc_value4_77_81_reg <= calc_value4_77_81;
if (reset == 1'b0 && ^(calc_value4_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_81_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %82 = lshr i32 %81, 1*/
begin
calc_value4_77_82 = (calc_value4_77_81 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %82 = lshr i32 %81, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_57))
begin
calc_value4_77_82_reg <= calc_value4_77_82;
if (reset == 1'b0 && ^(calc_value4_77_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_82_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %83 = add i32 %v.2, %82*/
begin
calc_value4_77_83 = (calc_value4_71_v_2_reg + calc_value4_77_82);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %83 = add i32 %v.2, %82*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_57))
begin
calc_value4_77_83_reg <= calc_value4_77_83;
if (reset == 1'b0 && ^(calc_value4_77_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_83_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %84 = icmp eq i32 %.02, 0*/
begin
calc_value4_77_84 = (calc_value4_71__02_reg == 32'd0);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %84 = icmp eq i32 %.02, 0*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_84_reg <= calc_value4_77_84;
if (reset == 1'b0 && ^(calc_value4_77_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_84_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %85 = icmp ugt i32 %73, 2*/
begin
calc_value4_77_85 = (calc_value4_71_73_reg > 32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %85 = icmp ugt i32 %73, 2*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_85_reg <= calc_value4_77_85;
if (reset == 1'b0 && ^(calc_value4_77_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_85_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %or.cond6 = and i1 %84, %85*/
begin
calc_value4_77_or_cond6 = (calc_value4_77_84 & calc_value4_77_85);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %or.cond6 = and i1 %84, %85*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_or_cond6_reg <= calc_value4_77_or_cond6;
if (reset == 1'b0 && ^(calc_value4_77_or_cond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_or_cond6_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %86 = icmp ugt i32 %.pre-phi15, 3*/
begin
calc_value4_77_86 = (calc_value4_71__pre_phi15_reg > 32'd3);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %86 = icmp ugt i32 %.pre-phi15, 3*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_86_reg <= calc_value4_77_86;
if (reset == 1'b0 && ^(calc_value4_77_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_86_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %77*/
/*   %or.cond7 = and i1 %or.cond6, %86*/
begin
calc_value4_77_or_cond7 = (calc_value4_77_or_cond6 & calc_value4_77_86);
end
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %or.cond7 = and i1 %or.cond6, %86*/
if ((cur_state == LEGUP_F_calc_value4_BB_77_56))
begin
calc_value4_77_or_cond7_reg <= calc_value4_77_or_cond7;
if (reset == 1'b0 && ^(calc_value4_77_or_cond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_77_or_cond7_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %87*/
/*   %88 = add i32 %79, -5*/
begin
calc_value4_87_88 = (calc_value4_77_79_reg + -32'd5);
end
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %88 = add i32 %79, -5*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_58))
begin
calc_value4_87_88_reg <= calc_value4_87_88;
if (reset == 1'b0 && ^(calc_value4_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_88_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %87*/
/*   %89 = add i32 %73, -2*/
begin
calc_value4_87_89 = (calc_value4_71_73_reg + -32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %89 = add i32 %73, -2*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_58))
begin
calc_value4_87_89_reg <= calc_value4_87_89;
if (reset == 1'b0 && ^(calc_value4_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_89_reg"); $finish; end
end
end
always @(*) begin
calc_value4_87_90 = calc_value4_87_90_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %90 = mul i32 %88, %89*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_59))
begin
calc_value4_87_90_reg <= calc_value4_87_90;
if (reset == 1'b0 && ^(calc_value4_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_90_reg"); $finish; end
end
/* calc_value4: %87*/
/*   %90 = mul i32 %88, %89*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_59))
begin
calc_value4_87_90_reg <= calc_value4_87_90;
if (reset == 1'b0 && ^(calc_value4_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_90_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %87*/
/*   %91 = lshr i32 %90, 1*/
begin
calc_value4_87_91 = (calc_value4_87_90 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %91 = lshr i32 %90, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_59))
begin
calc_value4_87_91_reg <= calc_value4_87_91;
if (reset == 1'b0 && ^(calc_value4_87_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_91_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %87*/
/*   %92 = sub i32 %83, %91*/
begin
calc_value4_87_92 = (calc_value4_77_83_reg - calc_value4_87_91);
end
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %92 = sub i32 %83, %91*/
if ((cur_state == LEGUP_F_calc_value4_BB_87_59))
begin
calc_value4_87_92_reg <= calc_value4_87_92;
if (reset == 1'b0 && ^(calc_value4_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_87_92_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %93*/
/*   %v.3 = phi i32 [ %83, %77 ], [ %92, %87 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_77_57) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_77_or_cond7_reg == 1'd0)))
begin
calc_value4_93_v_3 = calc_value4_77_83;
end
/* calc_value4: %93*/
/*   %v.3 = phi i32 [ %83, %77 ], [ %92, %87 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_87_59) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_93_v_3 = calc_value4_87_92;
end
end
always @(posedge clk) begin
/* calc_value4: %93*/
/*   %v.3 = phi i32 [ %83, %77 ], [ %92, %87 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_77_57) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_77_or_cond7_reg == 1'd0)))
begin
calc_value4_93_v_3_reg <= calc_value4_93_v_3;
if (reset == 1'b0 && ^(calc_value4_93_v_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_93_v_3_reg"); $finish; end
end
/* calc_value4: %93*/
/*   %v.3 = phi i32 [ %83, %77 ], [ %92, %87 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_87_59) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_93_v_3_reg <= calc_value4_93_v_3;
if (reset == 1'b0 && ^(calc_value4_93_v_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_93_v_3_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %93*/
/*   %94 = add i32 %.pre-phi15, -1*/
begin
calc_value4_93_94 = (calc_value4_71__pre_phi15_reg + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %93*/
/*   %94 = add i32 %.pre-phi15, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_93_60))
begin
calc_value4_93_94_reg <= calc_value4_93_94;
if (reset == 1'b0 && ^(calc_value4_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_93_94_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %93*/
/*   %95 = icmp ugt i32 %94, %wmax*/
begin
calc_value4_93_95 = (calc_value4_93_94 > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %93*/
/*   %95 = icmp ugt i32 %94, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_93_60))
begin
calc_value4_93_95_reg <= calc_value4_93_95;
if (reset == 1'b0 && ^(calc_value4_93_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_93_95_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %96*/
/*   %97 = sub i32 %.pre-phi15, %73*/
begin
calc_value4_96_97 = (calc_value4_71__pre_phi15_reg - calc_value4_71_73_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %96*/
/*   %97 = sub i32 %.pre-phi15, %73*/
if ((cur_state == LEGUP_F_calc_value4_BB_96_61))
begin
calc_value4_96_97_reg <= calc_value4_96_97;
if (reset == 1'b0 && ^(calc_value4_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_96_97_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %96*/
/*   %98 = icmp ugt i32 %97, %wmax*/
begin
calc_value4_96_98 = (calc_value4_96_97 > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %96*/
/*   %98 = icmp ugt i32 %97, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_96_61))
begin
calc_value4_96_98_reg <= calc_value4_96_98;
if (reset == 1'b0 && ^(calc_value4_96_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_96_98_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %99*/
/*   %100 = shl i32 %wmax, 1*/
begin
calc_value4_99_100 = (arg_wmax <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %99*/
/*   %100 = shl i32 %wmax, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_99_62))
begin
calc_value4_99_100_reg <= calc_value4_99_100;
if (reset == 1'b0 && ^(calc_value4_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_99_100_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %99*/
/*   %101 = sub i32 %79, %100*/
begin
calc_value4_99_101 = (calc_value4_77_79_reg - calc_value4_99_100);
end
end
always @(posedge clk) begin
/* calc_value4: %99*/
/*   %101 = sub i32 %79, %100*/
if ((cur_state == LEGUP_F_calc_value4_BB_99_62))
begin
calc_value4_99_101_reg <= calc_value4_99_101;
if (reset == 1'b0 && ^(calc_value4_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_99_101_reg"); $finish; end
end
end
always @(*) begin
calc_value4_99_102 = calc_value4_99_102_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %99*/
/*   %102 = mul i32 %101, %80*/
if ((cur_state == LEGUP_F_calc_value4_BB_99_63))
begin
calc_value4_99_102_reg <= calc_value4_99_102;
if (reset == 1'b0 && ^(calc_value4_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_99_102_reg"); $finish; end
end
/* calc_value4: %99*/
/*   %102 = mul i32 %101, %80*/
if ((cur_state == LEGUP_F_calc_value4_BB_99_63))
begin
calc_value4_99_102_reg <= calc_value4_99_102;
if (reset == 1'b0 && ^(calc_value4_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_99_102_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %99*/
/*   %103 = sub i32 %v.3, %102*/
begin
calc_value4_99_103 = (calc_value4_93_v_3_reg - calc_value4_99_102);
end
end
always @(posedge clk) begin
/* calc_value4: %99*/
/*   %103 = sub i32 %v.3, %102*/
if ((cur_state == LEGUP_F_calc_value4_BB_99_63))
begin
calc_value4_99_103_reg <= calc_value4_99_103;
if (reset == 1'b0 && ^(calc_value4_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_99_103_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %104*/
/*   %105 = sub i32 %.pre-phi15, %wmax*/
begin
calc_value4_104_105 = (calc_value4_71__pre_phi15_reg - arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %104*/
/*   %105 = sub i32 %.pre-phi15, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_104_64))
begin
calc_value4_104_105_reg <= calc_value4_104_105;
if (reset == 1'b0 && ^(calc_value4_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_104_105_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %104*/
/*   %106 = add i32 %105, -1*/
begin
calc_value4_104_106 = (calc_value4_104_105 + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %104*/
/*   %106 = add i32 %105, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_104_64))
begin
calc_value4_104_106_reg <= calc_value4_104_106;
if (reset == 1'b0 && ^(calc_value4_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_104_106_reg"); $finish; end
end
end
always @(*) begin
calc_value4_104_107 = calc_value4_104_107_stage0_reg;
end
always @(posedge clk) begin
/* calc_value4: %104*/
/*   %107 = mul i32 %106, %105*/
if ((cur_state == LEGUP_F_calc_value4_BB_104_65))
begin
calc_value4_104_107_reg <= calc_value4_104_107;
if (reset == 1'b0 && ^(calc_value4_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_104_107_reg"); $finish; end
end
/* calc_value4: %104*/
/*   %107 = mul i32 %106, %105*/
if ((cur_state == LEGUP_F_calc_value4_BB_104_65))
begin
calc_value4_104_107_reg <= calc_value4_104_107;
if (reset == 1'b0 && ^(calc_value4_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_104_107_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %104*/
/*   %108 = sub i32 %v.3, %107*/
begin
calc_value4_104_108 = (calc_value4_93_v_3_reg - calc_value4_104_107);
end
end
always @(posedge clk) begin
/* calc_value4: %104*/
/*   %108 = sub i32 %v.3, %107*/
if ((cur_state == LEGUP_F_calc_value4_BB_104_65))
begin
calc_value4_104_108_reg <= calc_value4_104_108;
if (reset == 1'b0 && ^(calc_value4_104_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_104_108_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd0)))
begin
calc_value4_109__1 = 32'd1;
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd0)))
begin
calc_value4_109__1 = calc_value4_71__02_reg;
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
else if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109__1 = calc_value4_71__02_reg;
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_109__1 = calc_value4_71__02_reg;
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd0)))
begin
calc_value4_109__1_reg <= calc_value4_109__1;
if (reset == 1'b0 && ^(calc_value4_109__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109__1_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd0)))
begin
calc_value4_109__1_reg <= calc_value4_109__1;
if (reset == 1'b0 && ^(calc_value4_109__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109__1_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109__1_reg <= calc_value4_109__1;
if (reset == 1'b0 && ^(calc_value4_109__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109__1_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %.1 = phi i32 [ %.02, %99 ], [ %.02, %104 ], [ %.02, %93 ], [ 1, %71 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109__1_reg <= calc_value4_109__1;
if (reset == 1'b0 && ^(calc_value4_109__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109__1_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd0)))
begin
calc_value4_109_v_4 = calc_value4_71_v_2_reg;
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd0)))
begin
calc_value4_109_v_4 = calc_value4_93_v_3_reg;
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
else if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109_v_4 = calc_value4_99_103;
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_109_v_4 = calc_value4_104_108;
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_71_54) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_71_74 == 1'd0)))
begin
calc_value4_109_v_4_reg <= calc_value4_109_v_4;
if (reset == 1'b0 && ^(calc_value4_109_v_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_v_4_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_93_60) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_93_95 == 1'd0)))
begin
calc_value4_109_v_4_reg <= calc_value4_109_v_4;
if (reset == 1'b0 && ^(calc_value4_109_v_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_v_4_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_99_63) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109_v_4_reg <= calc_value4_109_v_4;
if (reset == 1'b0 && ^(calc_value4_109_v_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_v_4_reg"); $finish; end
end
/* calc_value4: %109*/
/*   %v.4 = phi i32 [ %103, %99 ], [ %108, %104 ], [ %v.3, %93 ], [ %v.2, %71 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_104_65) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_109_v_4_reg <= calc_value4_109_v_4;
if (reset == 1'b0 && ^(calc_value4_109_v_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_v_4_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %110 = sub i32 %.pre-phi15, %73*/
begin
calc_value4_109_110 = (calc_value4_71__pre_phi15_reg - calc_value4_71_73_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %110 = sub i32 %.pre-phi15, %73*/
if ((cur_state == LEGUP_F_calc_value4_BB_109_66))
begin
calc_value4_109_110_reg <= calc_value4_109_110;
if (reset == 1'b0 && ^(calc_value4_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_110_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %111 = lshr i32 %sig, 4*/
begin
calc_value4_109_111 = (arg_sig >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %111 = lshr i32 %sig, 4*/
if ((cur_state == LEGUP_F_calc_value4_BB_109_66))
begin
calc_value4_109_111_reg <= calc_value4_109_111;
if (reset == 1'b0 && ^(calc_value4_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_111_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %112 = and i32 %111, 15*/
begin
calc_value4_109_112 = (calc_value4_109_111 & 32'd15);
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %112 = and i32 %111, 15*/
if ((cur_state == LEGUP_F_calc_value4_BB_109_66))
begin
calc_value4_109_112_reg <= calc_value4_109_112;
if (reset == 1'b0 && ^(calc_value4_109_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_112_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %109*/
/*   %113 = icmp ugt i32 %112, 1*/
begin
calc_value4_109_113 = (calc_value4_109_112 > 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %109*/
/*   %113 = icmp ugt i32 %112, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_109_66))
begin
calc_value4_109_113_reg <= calc_value4_109_113;
if (reset == 1'b0 && ^(calc_value4_109_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_109_113_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %114*/
/*   %115 = icmp ugt i32 %112, %wmax*/
begin
calc_value4_114_115 = (calc_value4_109_112_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %114*/
/*   %115 = icmp ugt i32 %112, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_114_67))
begin
calc_value4_114_115_reg <= calc_value4_114_115;
if (reset == 1'b0 && ^(calc_value4_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_114_115_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %117 = add i32 %112, -1*/
begin
calc_value4_116_117 = (calc_value4_109_112_reg + -32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %117 = add i32 %112, -1*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_117_reg <= calc_value4_116_117;
if (reset == 1'b0 && ^(calc_value4_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_117_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %118 = add i32 %117, %v.4*/
begin
calc_value4_116_118 = (calc_value4_116_117 + calc_value4_109_v_4_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %118 = add i32 %117, %v.4*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_118_reg <= calc_value4_116_118;
if (reset == 1'b0 && ^(calc_value4_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_118_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %119 = icmp eq i32 %.1, 0*/
begin
calc_value4_116_119 = (calc_value4_109__1_reg == 32'd0);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %119 = icmp eq i32 %.1, 0*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_119_reg <= calc_value4_116_119;
if (reset == 1'b0 && ^(calc_value4_116_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_119_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %120 = icmp ugt i32 %112, 2*/
begin
calc_value4_116_120 = (calc_value4_109_112_reg > 32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %120 = icmp ugt i32 %112, 2*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_120_reg <= calc_value4_116_120;
if (reset == 1'b0 && ^(calc_value4_116_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_120_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %or.cond8 = and i1 %119, %120*/
begin
calc_value4_116_or_cond8 = (calc_value4_116_119 & calc_value4_116_120);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %or.cond8 = and i1 %119, %120*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_or_cond8_reg <= calc_value4_116_or_cond8;
if (reset == 1'b0 && ^(calc_value4_116_or_cond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_or_cond8_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %121 = icmp ugt i32 %110, 2*/
begin
calc_value4_116_121 = (calc_value4_109_110_reg > 32'd2);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %121 = icmp ugt i32 %110, 2*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_121_reg <= calc_value4_116_121;
if (reset == 1'b0 && ^(calc_value4_116_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_121_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %116*/
/*   %or.cond9 = and i1 %or.cond8, %121*/
begin
calc_value4_116_or_cond9 = (calc_value4_116_or_cond8 & calc_value4_116_121);
end
end
always @(posedge clk) begin
/* calc_value4: %116*/
/*   %or.cond9 = and i1 %or.cond8, %121*/
if ((cur_state == LEGUP_F_calc_value4_BB_116_68))
begin
calc_value4_116_or_cond9_reg <= calc_value4_116_or_cond9;
if (reset == 1'b0 && ^(calc_value4_116_or_cond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_116_or_cond9_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %122*/
/*   %.neg12 = sub i32 2, %110*/
begin
calc_value4_122__neg12 = (32'd2 - calc_value4_109_110_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %122*/
/*   %.neg12 = sub i32 2, %110*/
if ((cur_state == LEGUP_F_calc_value4_BB_122_69))
begin
calc_value4_122__neg12_reg <= calc_value4_122__neg12;
if (reset == 1'b0 && ^(calc_value4_122__neg12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_122__neg12_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %122*/
/*   %123 = add i32 %.neg12, %118*/
begin
calc_value4_122_123 = (calc_value4_122__neg12 + calc_value4_116_118_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %122*/
/*   %123 = add i32 %.neg12, %118*/
if ((cur_state == LEGUP_F_calc_value4_BB_122_69))
begin
calc_value4_122_123_reg <= calc_value4_122_123;
if (reset == 1'b0 && ^(calc_value4_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_122_123_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %124*/
/*   %v.5 = phi i32 [ %118, %116 ], [ %123, %122 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_116_68) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_116_or_cond9 == 1'd0)))
begin
calc_value4_124_v_5 = calc_value4_116_118;
end
/* calc_value4: %124*/
/*   %v.5 = phi i32 [ %118, %116 ], [ %123, %122 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_122_69) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_124_v_5 = calc_value4_122_123;
end
end
always @(posedge clk) begin
/* calc_value4: %124*/
/*   %v.5 = phi i32 [ %118, %116 ], [ %123, %122 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_116_68) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_116_or_cond9 == 1'd0)))
begin
calc_value4_124_v_5_reg <= calc_value4_124_v_5;
if (reset == 1'b0 && ^(calc_value4_124_v_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_124_v_5_reg"); $finish; end
end
/* calc_value4: %124*/
/*   %v.5 = phi i32 [ %118, %116 ], [ %123, %122 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_122_69) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_124_v_5_reg <= calc_value4_124_v_5;
if (reset == 1'b0 && ^(calc_value4_124_v_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_124_v_5_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %124*/
/*   %125 = icmp ugt i32 %110, %wmax*/
begin
calc_value4_124_125 = (calc_value4_109_110_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %124*/
/*   %125 = icmp ugt i32 %110, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_124_70))
begin
calc_value4_124_125_reg <= calc_value4_124_125;
if (reset == 1'b0 && ^(calc_value4_124_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_124_125_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %126*/
/*   %127 = sub i32 %wmax, %110*/
begin
calc_value4_126_127 = (arg_wmax - calc_value4_109_110_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %126*/
/*   %127 = sub i32 %wmax, %110*/
if ((cur_state == LEGUP_F_calc_value4_BB_126_71))
begin
calc_value4_126_127_reg <= calc_value4_126_127;
if (reset == 1'b0 && ^(calc_value4_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_126_127_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %126*/
/*   %128 = add i32 %127, %v.5*/
begin
calc_value4_126_128 = (calc_value4_126_127 + calc_value4_124_v_5_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %126*/
/*   %128 = add i32 %127, %v.5*/
if ((cur_state == LEGUP_F_calc_value4_BB_126_71))
begin
calc_value4_126_128_reg <= calc_value4_126_128;
if (reset == 1'b0 && ^(calc_value4_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_126_128_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd0)))
begin
calc_value4_129__2 = 32'd1;
end
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd0)))
begin
calc_value4_129__2 = calc_value4_109__1_reg;
end
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_129__2 = calc_value4_109__1_reg;
end
end
always @(posedge clk) begin
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd0)))
begin
calc_value4_129__2_reg <= calc_value4_129__2;
if (reset == 1'b0 && ^(calc_value4_129__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129__2_reg"); $finish; end
end
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd0)))
begin
calc_value4_129__2_reg <= calc_value4_129__2;
if (reset == 1'b0 && ^(calc_value4_129__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129__2_reg"); $finish; end
end
/* calc_value4: %129*/
/*   %.2 = phi i32 [ %.1, %126 ], [ %.1, %124 ], [ 1, %109 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_129__2_reg <= calc_value4_129__2;
if (reset == 1'b0 && ^(calc_value4_129__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129__2_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd0)))
begin
calc_value4_129_v_6 = calc_value4_109_v_4_reg;
end
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd0)))
begin
calc_value4_129_v_6 = calc_value4_124_v_5_reg;
end
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_129_v_6 = calc_value4_126_128;
end
end
always @(posedge clk) begin
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_109_66) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_109_113 == 1'd0)))
begin
calc_value4_129_v_6_reg <= calc_value4_129_v_6;
if (reset == 1'b0 && ^(calc_value4_129_v_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129_v_6_reg"); $finish; end
end
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_124_70) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_124_125 == 1'd0)))
begin
calc_value4_129_v_6_reg <= calc_value4_129_v_6;
if (reset == 1'b0 && ^(calc_value4_129_v_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129_v_6_reg"); $finish; end
end
/* calc_value4: %129*/
/*   %v.6 = phi i32 [ %128, %126 ], [ %v.5, %124 ], [ %v.4, %109 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_126_71) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_129_v_6_reg <= calc_value4_129_v_6;
if (reset == 1'b0 && ^(calc_value4_129_v_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129_v_6_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %129*/
/*   %130 = and i32 %sig, 15*/
begin
calc_value4_129_130 = (arg_sig & 32'd15);
end
end
always @(posedge clk) begin
/* calc_value4: %129*/
/*   %130 = and i32 %sig, 15*/
if ((cur_state == LEGUP_F_calc_value4_BB_129_72))
begin
calc_value4_129_130_reg <= calc_value4_129_130;
if (reset == 1'b0 && ^(calc_value4_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129_130_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %129*/
/*   %131 = icmp eq i32 %130, 1*/
begin
calc_value4_129_131 = (calc_value4_129_130 == 32'd1);
end
end
always @(posedge clk) begin
/* calc_value4: %129*/
/*   %131 = icmp eq i32 %130, 1*/
if ((cur_state == LEGUP_F_calc_value4_BB_129_72))
begin
calc_value4_129_131_reg <= calc_value4_129_131;
if (reset == 1'b0 && ^(calc_value4_129_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_129_131_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %132*/
/*   %133 = icmp ugt i32 %130, %wmax*/
begin
calc_value4_132_133 = (calc_value4_129_130_reg > arg_wmax);
end
end
always @(posedge clk) begin
/* calc_value4: %132*/
/*   %133 = icmp ugt i32 %130, %wmax*/
if ((cur_state == LEGUP_F_calc_value4_BB_132_73))
begin
calc_value4_132_133_reg <= calc_value4_132_133;
if (reset == 1'b0 && ^(calc_value4_132_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_132_133_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %134*/
/*   %.3 = phi i32 [ %.2, %132 ], [ 1, %129 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_129_72) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_129_131 == 1'd1)))
begin
calc_value4_134__3 = 32'd1;
end
/* calc_value4: %134*/
/*   %.3 = phi i32 [ %.2, %132 ], [ 1, %129 ]*/
else /* if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd0))) */
begin
calc_value4_134__3 = calc_value4_129__2_reg;
end
end
always @(posedge clk) begin
/* calc_value4: %134*/
/*   %.3 = phi i32 [ %.2, %132 ], [ 1, %129 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_129_72) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_129_131 == 1'd1)))
begin
calc_value4_134__3_reg <= calc_value4_134__3;
if (reset == 1'b0 && ^(calc_value4_134__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_134__3_reg"); $finish; end
end
/* calc_value4: %134*/
/*   %.3 = phi i32 [ %.2, %132 ], [ 1, %129 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd0)))
begin
calc_value4_134__3_reg <= calc_value4_134__3;
if (reset == 1'b0 && ^(calc_value4_134__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_134__3_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %134*/
/*   %135 = icmp eq i32 %.3, 0*/
begin
calc_value4_134_135 = (calc_value4_134__3_reg == 32'd0);
end
end
always @(posedge clk) begin
/* calc_value4: %134*/
/*   %135 = icmp eq i32 %.3, 0*/
if ((cur_state == LEGUP_F_calc_value4_BB_134_74))
begin
calc_value4_134_135_reg <= calc_value4_134_135;
if (reset == 1'b0 && ^(calc_value4_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_134_135_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %134*/
/*   %.v.6 = select i1 %135, i32 -1, i32 %v.6*/
begin
calc_value4_134__v_6 = (calc_value4_134_135 ? -32'd1 : calc_value4_129_v_6_reg);
end
end
always @(posedge clk) begin
/* calc_value4: %134*/
/*   %.v.6 = select i1 %135, i32 -1, i32 %v.6*/
if ((cur_state == LEGUP_F_calc_value4_BB_134_74))
begin
calc_value4_134__v_6_reg <= calc_value4_134__v_6;
if (reset == 1'b0 && ^(calc_value4_134__v_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_134__v_6_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_5_3) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_5_6 == 1'd1)))
begin
calc_value4_136__0 = -32'd1;
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_75_55) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_75_76 == 1'd1)))
begin
calc_value4_136__0 = -32'd1;
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_114_67) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_114_115 == 1'd1)))
begin
calc_value4_136__0 = -32'd1;
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
else if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd1)))
begin
calc_value4_136__0 = -32'd1;
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
else /* if (((cur_state == LEGUP_F_calc_value4_BB_134_74) & (memory_controller_waitrequest == 1'd0))) */
begin
calc_value4_136__0 = calc_value4_134__v_6;
end
end
always @(posedge clk) begin
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_5_3) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_5_6 == 1'd1)))
begin
calc_value4_136__0_reg <= calc_value4_136__0;
if (reset == 1'b0 && ^(calc_value4_136__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_136__0_reg"); $finish; end
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_75_55) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_75_76 == 1'd1)))
begin
calc_value4_136__0_reg <= calc_value4_136__0;
if (reset == 1'b0 && ^(calc_value4_136__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_136__0_reg"); $finish; end
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_114_67) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_114_115 == 1'd1)))
begin
calc_value4_136__0_reg <= calc_value4_136__0;
if (reset == 1'b0 && ^(calc_value4_136__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_136__0_reg"); $finish; end
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if ((((cur_state == LEGUP_F_calc_value4_BB_132_73) & (memory_controller_waitrequest == 1'd0)) & (calc_value4_132_133 == 1'd1)))
begin
calc_value4_136__0_reg <= calc_value4_136__0;
if (reset == 1'b0 && ^(calc_value4_136__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_136__0_reg"); $finish; end
end
/* calc_value4: %136*/
/*   %.0 = phi i32 [ -1, %5 ], [ -1, %75 ], [ -1, %114 ], [ -1, %132 ], [ %.v.6, %134 ]*/
if (((cur_state == LEGUP_F_calc_value4_BB_134_74) & (memory_controller_waitrequest == 1'd0)))
begin
calc_value4_136__0_reg <= calc_value4_136__0;
if (reset == 1'b0 && ^(calc_value4_136__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_value4_136__0_reg"); $finish; end
end
end
always @(*) begin
/* calc_value4: %69*/
/*   %70 = udiv i32 %v.1, 12*/
begin
calc_value4_unsigned_divide_32_0_op0 = calc_value4_69_v_1_reg;
end
end
always @(*) begin
/* calc_value4: %69*/
/*   %70 = udiv i32 %v.1, 12*/
if (reset) begin calc_value4_unsigned_divide_32_0_op1 = 0; end
begin
calc_value4_unsigned_divide_32_0_op1 = 32'd12;
end
end
always @(*) begin
lpm_divide_calc_value4_69_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_calc_value4_69_70_out = lpm_divide_calc_value4_69_70_temp_out;
end
always @(*) begin
calc_value4_unsigned_divide_32_0 = lpm_divide_calc_value4_69_70_out;
end
always @(*) begin
lpm_mult_calc_value4_7_12_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %12 = mul i32 %9, %1*/
if ((lpm_mult_calc_value4_7_12_en == 1'd1))
begin
calc_value4_7_12_stage0_reg <= (calc_value4_7_9 * calc_value4_0_1_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_7_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %17 = mul i32 %14, %8*/
if ((lpm_mult_calc_value4_7_17_en == 1'd1))
begin
calc_value4_7_17_stage0_reg <= (calc_value4_7_14 * calc_value4_7_8);
end
end
always @(*) begin
lpm_mult_calc_value4_7_tmp_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %tmp = mul i32 %3, 3*/
if ((lpm_mult_calc_value4_7_tmp_en == 1'd1))
begin
calc_value4_7_tmp_stage0_reg <= (calc_value4_0_3_reg * 32'd3);
end
end
always @(*) begin
lpm_mult_calc_value4_7_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %13 = mul i32 %12, %11*/
if ((lpm_mult_calc_value4_7_13_en == 1'd1))
begin
calc_value4_7_13_stage0_reg <= (calc_value4_7_12 * calc_value4_7_11_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_7_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %18 = mul i32 %17, %16*/
if ((lpm_mult_calc_value4_7_18_en == 1'd1))
begin
calc_value4_7_18_stage0_reg <= (calc_value4_7_17 * calc_value4_7_16_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_7_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %7*/
/*   %22 = mul i32 %20, %21*/
if ((lpm_mult_calc_value4_7_22_en == 1'd1))
begin
calc_value4_7_22_stage0_reg <= (calc_value4_7_20 * calc_value4_7_21_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_28_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %30 = mul i32 %27, %9*/
if ((lpm_mult_calc_value4_28_30_en == 1'd1))
begin
calc_value4_28_30_stage0_reg <= (calc_value4_7_27_reg * calc_value4_7_9_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_28_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %33 = mul i32 %1, 14*/
if ((lpm_mult_calc_value4_28_33_en == 1'd1))
begin
calc_value4_28_33_stage0_reg <= (calc_value4_0_1_reg * 32'd14);
end
end
always @(*) begin
lpm_mult_calc_value4_28_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %34 = mul i32 %3, -7*/
if ((lpm_mult_calc_value4_28_34_en == 1'd1))
begin
calc_value4_28_34_stage0_reg <= (calc_value4_0_3_reg * -32'd7);
end
end
always @(*) begin
lpm_mult_calc_value4_28_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %31 = mul i32 %30, %29*/
if ((lpm_mult_calc_value4_28_31_en == 1'd1))
begin
calc_value4_28_31_stage0_reg <= (calc_value4_28_30 * calc_value4_28_29_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_28_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %28*/
/*   %37 = mul i32 %36, %32*/
if ((lpm_mult_calc_value4_28_37_en == 1'd1))
begin
calc_value4_28_37_stage0_reg <= (calc_value4_28_36 * calc_value4_28_32_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_42_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %42*/
/*   %45 = mul i32 %43, %44*/
if ((lpm_mult_calc_value4_42_45_en == 1'd1))
begin
calc_value4_42_45_stage0_reg <= (calc_value4_42_43 * calc_value4_42_44);
end
end
always @(*) begin
lpm_mult_calc_value4_48_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %49 = mul i32 %46, %21*/
if ((lpm_mult_calc_value4_48_49_en == 1'd1))
begin
calc_value4_48_49_stage0_reg <= (calc_value4_42_46_reg * calc_value4_7_21_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_48_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %48*/
/*   %51 = mul i32 %50, %20*/
if ((lpm_mult_calc_value4_48_51_en == 1'd1))
begin
calc_value4_48_51_stage0_reg <= (calc_value4_48_50 * calc_value4_7_20_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_53_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %56 = mul i32 %44, %54*/
if ((lpm_mult_calc_value4_53_56_en == 1'd1))
begin
calc_value4_53_56_stage0_reg <= (calc_value4_42_44_reg * calc_value4_53_54);
end
end
always @(*) begin
lpm_mult_calc_value4_53_tmp3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %tmp3 = mul i32 %58, 3*/
if ((lpm_mult_calc_value4_53_tmp3_en == 1'd1))
begin
calc_value4_53_tmp3_stage0_reg <= (calc_value4_53_58 * 32'd3);
end
end
always @(*) begin
lpm_mult_calc_value4_53_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %61 = mul i32 %46, %60*/
if ((lpm_mult_calc_value4_53_61_en == 1'd1))
begin
calc_value4_53_61_stage0_reg <= (calc_value4_42_46_reg * calc_value4_53_60);
end
end
always @(*) begin
lpm_mult_calc_value4_53_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %57 = mul i32 %56, %55*/
if ((lpm_mult_calc_value4_53_57_en == 1'd1))
begin
calc_value4_53_57_stage0_reg <= (calc_value4_53_56 * calc_value4_53_55_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_53_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %53*/
/*   %63 = mul i32 %62, %59*/
if ((lpm_mult_calc_value4_53_63_en == 1'd1))
begin
calc_value4_53_63_stage0_reg <= (calc_value4_53_62 * calc_value4_53_59);
end
end
always @(*) begin
lpm_mult_calc_value4_66_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %66*/
/*   %67 = mul i32 %k1.0, -3*/
if ((lpm_mult_calc_value4_66_67_en == 1'd1))
begin
calc_value4_66_67_stage0_reg <= (calc_value4_66_k1_0_reg * -32'd3);
end
end
always @(*) begin
lpm_mult_calc_value4_77_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %77*/
/*   %81 = mul i32 %79, %80*/
if ((lpm_mult_calc_value4_77_81_en == 1'd1))
begin
calc_value4_77_81_stage0_reg <= (calc_value4_77_79 * calc_value4_77_80);
end
end
always @(*) begin
lpm_mult_calc_value4_87_90_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %87*/
/*   %90 = mul i32 %88, %89*/
if ((lpm_mult_calc_value4_87_90_en == 1'd1))
begin
calc_value4_87_90_stage0_reg <= (calc_value4_87_88 * calc_value4_87_89);
end
end
always @(*) begin
lpm_mult_calc_value4_99_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %99*/
/*   %102 = mul i32 %101, %80*/
if ((lpm_mult_calc_value4_99_102_en == 1'd1))
begin
calc_value4_99_102_stage0_reg <= (calc_value4_99_101 * calc_value4_77_80_reg);
end
end
always @(*) begin
lpm_mult_calc_value4_104_107_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calc_value4: %104*/
/*   %107 = mul i32 %106, %105*/
if ((lpm_mult_calc_value4_104_107_en == 1'd1))
begin
calc_value4_104_107_stage0_reg <= (calc_value4_104_106 * calc_value4_104_105);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* calc_value4: %136*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_calc_value4_BB_136_75))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* calc_value4: %136*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_calc_value4_BB_136_75))
begin
return_val <= calc_value4_136__0_reg;
if (reset == 1'b0 && ^(calc_value4_136__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_main_BB_0_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg  cur_state;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
