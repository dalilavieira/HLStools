//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:59 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module ixgbe_copy_dcb_cfg
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_adapter,
	arg_tc_max
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2 = 6'd2;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3 = 6'd3;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4 = 6'd4;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5 = 6'd5;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6 = 6'd6;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7 = 6'd7;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8 = 6'd8;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9 = 6'd9;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10 = 6'd10;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11 = 6'd11;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12 = 6'd12;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13 = 6'd13;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14 = 6'd14;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15 = 6'd15;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16 = 6'd16;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17 = 6'd17;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18 = 6'd18;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19 = 6'd19;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20 = 6'd20;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21 = 6'd21;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22 = 6'd22;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23 = 6'd23;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24 = 6'd24;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25 = 6'd25;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26 = 6'd26;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27 = 6'd27;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28 = 6'd28;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29 = 6'd29;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30 = 6'd30;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31 = 6'd31;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32 = 6'd32;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33 = 6'd33;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34 = 6'd34;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35 = 6'd35;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36 = 6'd36;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37 = 6'd37;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38 = 6'd38;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39 = 6'd39;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40 = 6'd40;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41 = 6'd41;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42 = 6'd42;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43 = 6'd43;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44 = 6'd44;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45 = 6'd45;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46 = 6'd46;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47 = 6'd47;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48 = 6'd48;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49 = 6'd49;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50 = 6'd50;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51 = 6'd51;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52 = 6'd52;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53 = 6'd53;
parameter [5:0] LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54 = 6'd54;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_adapter;
input [31:0] arg_tc_max;
reg [5:0] cur_state;
reg  ixgbe_copy_dcb_cfg_0_1;
reg  ixgbe_copy_dcb_cfg_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg__lr_ph12_5_reg;
reg [31:0] ixgbe_copy_dcb_cfg_6_indvar28;
reg [31:0] ixgbe_copy_dcb_cfg_6_indvar28_reg;
reg [31:0] ixgbe_copy_dcb_cfg_6_tmp34;
reg [31:0] ixgbe_copy_dcb_cfg_6_tmp34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_9_reg;
reg [31:0] ixgbe_copy_dcb_cfg_6_10;
reg [31:0] ixgbe_copy_dcb_cfg_6_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_6_13_reg;
reg [31:0] ixgbe_copy_dcb_cfg_6_14;
reg [31:0] ixgbe_copy_dcb_cfg_6_14_reg;
reg  ixgbe_copy_dcb_cfg_6_15;
reg  ixgbe_copy_dcb_cfg_6_15_reg;
reg [31:0] ixgbe_copy_dcb_cfg_17_18;
reg [31:0] ixgbe_copy_dcb_cfg_17_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_17_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_17_19_reg;
reg [31:0] ixgbe_copy_dcb_cfg_17_20;
reg [31:0] ixgbe_copy_dcb_cfg_17_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_17_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_17_21_reg;
reg [31:0] ixgbe_copy_dcb_cfg_17_22;
reg [31:0] ixgbe_copy_dcb_cfg_17_22_reg;
reg  ixgbe_copy_dcb_cfg_17_23;
reg  ixgbe_copy_dcb_cfg_17_23_reg;
reg [31:0] ixgbe_copy_dcb_cfg_25_26;
reg [31:0] ixgbe_copy_dcb_cfg_25_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_25_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_25_27_reg;
reg [31:0] ixgbe_copy_dcb_cfg_25_28;
reg [31:0] ixgbe_copy_dcb_cfg_25_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_25_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_25_29_reg;
reg [31:0] ixgbe_copy_dcb_cfg_25_30;
reg [31:0] ixgbe_copy_dcb_cfg_25_30_reg;
reg  ixgbe_copy_dcb_cfg_25_31;
reg  ixgbe_copy_dcb_cfg_25_31_reg;
reg [31:0] ixgbe_copy_dcb_cfg_33_34;
reg [31:0] ixgbe_copy_dcb_cfg_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_33_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_33_35_reg;
reg [31:0] ixgbe_copy_dcb_cfg_33_36;
reg [31:0] ixgbe_copy_dcb_cfg_33_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_33_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_33_37_reg;
reg [31:0] ixgbe_copy_dcb_cfg_33_38;
reg [31:0] ixgbe_copy_dcb_cfg_33_38_reg;
reg  ixgbe_copy_dcb_cfg_33_39;
reg  ixgbe_copy_dcb_cfg_33_39_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge4_41;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge4_41_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge4_42;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge4_42_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge4_43;
reg  ixgbe_copy_dcb_cfg___crit_edge4_43_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge3_45;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge3_45_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge3_46;
reg  ixgbe_copy_dcb_cfg___crit_edge3_46_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge2_48;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge2_48_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge2_49;
reg  ixgbe_copy_dcb_cfg___crit_edge2_49_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge1_51;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge1_51_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge1_52;
reg  ixgbe_copy_dcb_cfg___crit_edge1_52_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge35_54;
reg  ixgbe_copy_dcb_cfg___crit_edge35_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg___crit_edge_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg___crit_edge_55_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge_56;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg___crit_edge_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg___crit_edge_57_reg;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge_58;
reg [31:0] ixgbe_copy_dcb_cfg___crit_edge_58_reg;
reg  ixgbe_copy_dcb_cfg___crit_edge_59;
reg  ixgbe_copy_dcb_cfg___crit_edge_59_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_6_15 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_6_15 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_17_23 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_17_23 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_25_31 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_25_31 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_33_39 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_33_39 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge4_43 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge4_43 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge3_46 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge3_46 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge2_49 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge2_49 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge1_52 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge1_52 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge35_54 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge35_54 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_loopexit_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge_59 == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge_59 == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54;
if (reset == 1'b0 && ^(LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %0*/
/*   %1 = icmp sgt i32 %tc_max, 0*/
begin
ixgbe_copy_dcb_cfg_0_1 = ($signed(arg_tc_max) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %0*/
/*   %1 = icmp sgt i32 %tc_max, 0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_0_1))
begin
ixgbe_copy_dcb_cfg_0_1_reg <= ixgbe_copy_dcb_cfg_0_1;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_0_1_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %2 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 1, i32 2*/
begin
ixgbe_copy_dcb_cfg__lr_ph12_2 = (arg_adapter + (12 + 8));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %2 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
ixgbe_copy_dcb_cfg__lr_ph12_2_reg <= ixgbe_copy_dcb_cfg__lr_ph12_2;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg__lr_ph12_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg__lr_ph12_2_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
begin
ixgbe_copy_dcb_cfg__lr_ph12_3 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4))
begin
ixgbe_copy_dcb_cfg__lr_ph12_3_reg <= ixgbe_copy_dcb_cfg__lr_ph12_3;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg__lr_ph12_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg__lr_ph12_3_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %4 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 0, i32 2*/
begin
ixgbe_copy_dcb_cfg__lr_ph12_4 = (arg_adapter + 8);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %4 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
ixgbe_copy_dcb_cfg__lr_ph12_4_reg <= ixgbe_copy_dcb_cfg__lr_ph12_4;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg__lr_ph12_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg__lr_ph12_4_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
begin
ixgbe_copy_dcb_cfg__lr_ph12_5 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4))
begin
ixgbe_copy_dcb_cfg__lr_ph12_5_reg <= ixgbe_copy_dcb_cfg__lr_ph12_5;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg__lr_ph12_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg__lr_ph12_5_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %indvar28 = phi i32 [ 0, %.lr.ph12 ], [ %tmp34, %._crit_edge35 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg_6_indvar28 = 32'd0;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %indvar28 = phi i32 [ 0, %.lr.ph12 ], [ %tmp34, %._crit_edge35 ]*/
else /* if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge35_54 == 1'd1))) */
begin
ixgbe_copy_dcb_cfg_6_indvar28 = ixgbe_copy_dcb_cfg_6_tmp34_reg;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %indvar28 = phi i32 [ 0, %.lr.ph12 ], [ %tmp34, %._crit_edge35 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_4) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg_6_indvar28_reg <= ixgbe_copy_dcb_cfg_6_indvar28;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_indvar28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_indvar28_reg"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %indvar28 = phi i32 [ 0, %.lr.ph12 ], [ %tmp34, %._crit_edge35 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg___crit_edge35_54 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_6_indvar28_reg <= ixgbe_copy_dcb_cfg_6_indvar28;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_indvar28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_indvar28_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %tmp34 = add i32 %indvar28, 1*/
begin
ixgbe_copy_dcb_cfg_6_tmp34 = (ixgbe_copy_dcb_cfg_6_indvar28_reg + 32'd1);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %tmp34 = add i32 %indvar28, 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
ixgbe_copy_dcb_cfg_6_tmp34_reg <= ixgbe_copy_dcb_cfg_6_tmp34;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_tmp34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_tmp34_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %7 = getelementptr inbounds %struct.tc_configuration* %5, i32 %indvar28, i32 1*/
begin
ixgbe_copy_dcb_cfg_6_7 = (ixgbe_copy_dcb_cfg__lr_ph12_5_reg + ((8 * ixgbe_copy_dcb_cfg_6_indvar28_reg) + 4));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %7 = getelementptr inbounds %struct.tc_configuration* %5, i32 %indvar28, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
ixgbe_copy_dcb_cfg_6_7_reg <= ixgbe_copy_dcb_cfg_6_7;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_7_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
begin
ixgbe_copy_dcb_cfg_6_8 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
ixgbe_copy_dcb_cfg_6_8_reg <= ixgbe_copy_dcb_cfg_6_8;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_8_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %9 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 0*/
begin
ixgbe_copy_dcb_cfg_6_9 = ixgbe_copy_dcb_cfg_6_8;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %9 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
ixgbe_copy_dcb_cfg_6_9_reg <= ixgbe_copy_dcb_cfg_6_9;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_9_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_6_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9))
begin
ixgbe_copy_dcb_cfg_6_10_reg <= ixgbe_copy_dcb_cfg_6_10;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_10_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %11 = getelementptr inbounds %struct.tc_configuration* %3, i32 %indvar28, i32 1*/
begin
ixgbe_copy_dcb_cfg_6_11 = (ixgbe_copy_dcb_cfg__lr_ph12_3_reg + ((8 * ixgbe_copy_dcb_cfg_6_indvar28_reg) + 4));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %11 = getelementptr inbounds %struct.tc_configuration* %3, i32 %indvar28, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
ixgbe_copy_dcb_cfg_6_11_reg <= ixgbe_copy_dcb_cfg_6_11;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_11_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
begin
ixgbe_copy_dcb_cfg_6_12 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
ixgbe_copy_dcb_cfg_6_12_reg <= ixgbe_copy_dcb_cfg_6_12;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_12_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %13 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 0*/
begin
ixgbe_copy_dcb_cfg_6_13 = ixgbe_copy_dcb_cfg_6_12;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %13 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
ixgbe_copy_dcb_cfg_6_13_reg <= ixgbe_copy_dcb_cfg_6_13;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_13_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_6_14 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9))
begin
ixgbe_copy_dcb_cfg_6_14_reg <= ixgbe_copy_dcb_cfg_6_14;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_14_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %15 = icmp eq i32 %10, %14*/
begin
ixgbe_copy_dcb_cfg_6_15 = (ixgbe_copy_dcb_cfg_6_10 == ixgbe_copy_dcb_cfg_6_14);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %6*/
/*   %15 = icmp eq i32 %10, %14*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9))
begin
ixgbe_copy_dcb_cfg_6_15_reg <= ixgbe_copy_dcb_cfg_6_15;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_6_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_6_15_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %18 = phi i32 [ %14, %16 ], [ %10, %6 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_6_15 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_17_18 = ixgbe_copy_dcb_cfg_6_10;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %18 = phi i32 [ %14, %16 ], [ %10, %6 ]*/
else /* if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) & (memory_controller_waitrequest == 1'd0))) */
begin
ixgbe_copy_dcb_cfg_17_18 = ixgbe_copy_dcb_cfg_6_14_reg;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %18 = phi i32 [ %14, %16 ], [ %10, %6 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_6_15 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_17_18_reg <= ixgbe_copy_dcb_cfg_17_18;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_18_reg"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %18 = phi i32 [ %14, %16 ], [ %10, %6 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_11) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg_17_18_reg <= ixgbe_copy_dcb_cfg_17_18;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_18_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %19 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 1*/
begin
ixgbe_copy_dcb_cfg_17_19 = (ixgbe_copy_dcb_cfg_6_8_reg + 4);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %19 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
ixgbe_copy_dcb_cfg_17_19_reg <= ixgbe_copy_dcb_cfg_17_19;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_19_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_17_20 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14))
begin
ixgbe_copy_dcb_cfg_17_20_reg <= ixgbe_copy_dcb_cfg_17_20;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_20_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %21 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 1*/
begin
ixgbe_copy_dcb_cfg_17_21 = (ixgbe_copy_dcb_cfg_6_12_reg + 4);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %21 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
ixgbe_copy_dcb_cfg_17_21_reg <= ixgbe_copy_dcb_cfg_17_21;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_21_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_17_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14))
begin
ixgbe_copy_dcb_cfg_17_22_reg <= ixgbe_copy_dcb_cfg_17_22;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_22_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %23 = icmp eq i32 %20, %22*/
begin
ixgbe_copy_dcb_cfg_17_23 = (ixgbe_copy_dcb_cfg_17_20 == ixgbe_copy_dcb_cfg_17_22);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %17*/
/*   %23 = icmp eq i32 %20, %22*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14))
begin
ixgbe_copy_dcb_cfg_17_23_reg <= ixgbe_copy_dcb_cfg_17_23;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_17_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_17_23_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %26 = phi i32 [ %22, %24 ], [ %20, %17 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_17_23 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_25_26 = ixgbe_copy_dcb_cfg_17_20;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %26 = phi i32 [ %22, %24 ], [ %20, %17 ]*/
else /* if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) & (memory_controller_waitrequest == 1'd0))) */
begin
ixgbe_copy_dcb_cfg_25_26 = ixgbe_copy_dcb_cfg_17_22_reg;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %26 = phi i32 [ %22, %24 ], [ %20, %17 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_14) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_17_23 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_25_26_reg <= ixgbe_copy_dcb_cfg_25_26;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_26_reg"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %26 = phi i32 [ %22, %24 ], [ %20, %17 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_16) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg_25_26_reg <= ixgbe_copy_dcb_cfg_25_26;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_26_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %27 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 2*/
begin
ixgbe_copy_dcb_cfg_25_27 = (ixgbe_copy_dcb_cfg_6_8_reg + 8);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %27 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
ixgbe_copy_dcb_cfg_25_27_reg <= ixgbe_copy_dcb_cfg_25_27;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_27_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_25_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19))
begin
ixgbe_copy_dcb_cfg_25_28_reg <= ixgbe_copy_dcb_cfg_25_28;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_28_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %29 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 2*/
begin
ixgbe_copy_dcb_cfg_25_29 = (ixgbe_copy_dcb_cfg_6_12_reg + 8);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %29 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
ixgbe_copy_dcb_cfg_25_29_reg <= ixgbe_copy_dcb_cfg_25_29;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_29_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_25_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19))
begin
ixgbe_copy_dcb_cfg_25_30_reg <= ixgbe_copy_dcb_cfg_25_30;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_30_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %31 = icmp eq i32 %28, %30*/
begin
ixgbe_copy_dcb_cfg_25_31 = (ixgbe_copy_dcb_cfg_25_28 == ixgbe_copy_dcb_cfg_25_30);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %25*/
/*   %31 = icmp eq i32 %28, %30*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19))
begin
ixgbe_copy_dcb_cfg_25_31_reg <= ixgbe_copy_dcb_cfg_25_31;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_25_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_25_31_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %34 = phi i32 [ %30, %32 ], [ %28, %25 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_25_31 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_33_34 = ixgbe_copy_dcb_cfg_25_28;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %34 = phi i32 [ %30, %32 ], [ %28, %25 ]*/
else /* if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) & (memory_controller_waitrequest == 1'd0))) */
begin
ixgbe_copy_dcb_cfg_33_34 = ixgbe_copy_dcb_cfg_25_30_reg;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %34 = phi i32 [ %30, %32 ], [ %28, %25 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_19) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_25_31 == 1'd1)))
begin
ixgbe_copy_dcb_cfg_33_34_reg <= ixgbe_copy_dcb_cfg_33_34;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_34_reg"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %34 = phi i32 [ %30, %32 ], [ %28, %25 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_21) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg_33_34_reg <= ixgbe_copy_dcb_cfg_33_34;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_34_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %35 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 3*/
begin
ixgbe_copy_dcb_cfg_33_35 = (ixgbe_copy_dcb_cfg_6_8_reg + 12);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %35 = getelementptr inbounds %struct.TYPE_2__* %8, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
ixgbe_copy_dcb_cfg_33_35_reg <= ixgbe_copy_dcb_cfg_33_35;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_35_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_33_36 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24))
begin
ixgbe_copy_dcb_cfg_33_36_reg <= ixgbe_copy_dcb_cfg_33_36;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_36_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %37 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 3*/
begin
ixgbe_copy_dcb_cfg_33_37 = (ixgbe_copy_dcb_cfg_6_12_reg + 12);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %37 = getelementptr inbounds %struct.TYPE_2__* %12, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
ixgbe_copy_dcb_cfg_33_37_reg <= ixgbe_copy_dcb_cfg_33_37;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_37_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg_33_38 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24))
begin
ixgbe_copy_dcb_cfg_33_38_reg <= ixgbe_copy_dcb_cfg_33_38;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_38_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %39 = icmp eq i32 %36, %38*/
begin
ixgbe_copy_dcb_cfg_33_39 = (ixgbe_copy_dcb_cfg_33_36 == ixgbe_copy_dcb_cfg_33_38);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %33*/
/*   %39 = icmp eq i32 %36, %38*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24))
begin
ixgbe_copy_dcb_cfg_33_39_reg <= ixgbe_copy_dcb_cfg_33_39;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg_33_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_33_39_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %41 = phi i32 [ %38, %40 ], [ %36, %33 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_33_39 == 1'd1)))
begin
ixgbe_copy_dcb_cfg___crit_edge4_41 = ixgbe_copy_dcb_cfg_33_36;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %41 = phi i32 [ %38, %40 ], [ %36, %33 ]*/
else /* if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) & (memory_controller_waitrequest == 1'd0))) */
begin
ixgbe_copy_dcb_cfg___crit_edge4_41 = ixgbe_copy_dcb_cfg_33_38_reg;
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %41 = phi i32 [ %38, %40 ], [ %36, %33 ]*/
if ((((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_24) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_33_39 == 1'd1)))
begin
ixgbe_copy_dcb_cfg___crit_edge4_41_reg <= ixgbe_copy_dcb_cfg___crit_edge4_41;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge4_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge4_41_reg"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %41 = phi i32 [ %38, %40 ], [ %36, %33 ]*/
if (((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_26) & (memory_controller_waitrequest == 1'd0)))
begin
ixgbe_copy_dcb_cfg___crit_edge4_41_reg <= ixgbe_copy_dcb_cfg___crit_edge4_41;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge4_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge4_41_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge4_42 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29))
begin
ixgbe_copy_dcb_cfg___crit_edge4_42_reg <= ixgbe_copy_dcb_cfg___crit_edge4_42;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge4_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge4_42_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %43 = icmp eq i32 %18, %42*/
begin
ixgbe_copy_dcb_cfg___crit_edge4_43 = (ixgbe_copy_dcb_cfg_17_18_reg == ixgbe_copy_dcb_cfg___crit_edge4_42);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %43 = icmp eq i32 %18, %42*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_29))
begin
ixgbe_copy_dcb_cfg___crit_edge4_43_reg <= ixgbe_copy_dcb_cfg___crit_edge4_43;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge4_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge4_43_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge3_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34))
begin
ixgbe_copy_dcb_cfg___crit_edge3_45_reg <= ixgbe_copy_dcb_cfg___crit_edge3_45;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge3_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge3_45_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %46 = icmp eq i32 %26, %45*/
begin
ixgbe_copy_dcb_cfg___crit_edge3_46 = (ixgbe_copy_dcb_cfg_25_26_reg == ixgbe_copy_dcb_cfg___crit_edge3_45);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %46 = icmp eq i32 %26, %45*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_34))
begin
ixgbe_copy_dcb_cfg___crit_edge3_46_reg <= ixgbe_copy_dcb_cfg___crit_edge3_46;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge3_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge3_46_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge2_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39))
begin
ixgbe_copy_dcb_cfg___crit_edge2_48_reg <= ixgbe_copy_dcb_cfg___crit_edge2_48;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge2_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge2_48_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %49 = icmp eq i32 %34, %48*/
begin
ixgbe_copy_dcb_cfg___crit_edge2_49 = (ixgbe_copy_dcb_cfg_33_34_reg == ixgbe_copy_dcb_cfg___crit_edge2_48);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %49 = icmp eq i32 %34, %48*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_39))
begin
ixgbe_copy_dcb_cfg___crit_edge2_49_reg <= ixgbe_copy_dcb_cfg___crit_edge2_49;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge2_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge2_49_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge1_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44))
begin
ixgbe_copy_dcb_cfg___crit_edge1_51_reg <= ixgbe_copy_dcb_cfg___crit_edge1_51;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge1_51_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %52 = icmp eq i32 %41, %51*/
begin
ixgbe_copy_dcb_cfg___crit_edge1_52 = (ixgbe_copy_dcb_cfg___crit_edge4_41_reg == ixgbe_copy_dcb_cfg___crit_edge1_51);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %52 = icmp eq i32 %41, %51*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_44))
begin
ixgbe_copy_dcb_cfg___crit_edge1_52_reg <= ixgbe_copy_dcb_cfg___crit_edge1_52;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge1_52_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge35*/
/*   %54 = icmp slt i32 %tmp34, %tc_max*/
begin
ixgbe_copy_dcb_cfg___crit_edge35_54 = ($signed(ixgbe_copy_dcb_cfg_6_tmp34_reg) < $signed(arg_tc_max));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge35*/
/*   %54 = icmp slt i32 %tmp34, %tc_max*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge35_47))
begin
ixgbe_copy_dcb_cfg___crit_edge35_54_reg <= ixgbe_copy_dcb_cfg___crit_edge35_54;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge35_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge35_54_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %55 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 0, i32 1*/
begin
ixgbe_copy_dcb_cfg___crit_edge_55 = (arg_adapter + 4);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %55 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
ixgbe_copy_dcb_cfg___crit_edge_55_reg <= ixgbe_copy_dcb_cfg___crit_edge_55;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge_55_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge_56 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51))
begin
ixgbe_copy_dcb_cfg___crit_edge_56_reg <= ixgbe_copy_dcb_cfg___crit_edge_56;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge_56_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %57 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 1, i32 1*/
begin
ixgbe_copy_dcb_cfg___crit_edge_57 = (arg_adapter + (12 + 4));
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %57 = getelementptr inbounds %struct.ixgbe_adapter* %adapter, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
ixgbe_copy_dcb_cfg___crit_edge_57_reg <= ixgbe_copy_dcb_cfg___crit_edge_57;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge_57_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
begin
ixgbe_copy_dcb_cfg___crit_edge_58 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51))
begin
ixgbe_copy_dcb_cfg___crit_edge_58_reg <= ixgbe_copy_dcb_cfg___crit_edge_58;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge_58_reg"); $finish; end
end
end
always @(*) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %59 = icmp eq i32 %56, %58*/
begin
ixgbe_copy_dcb_cfg___crit_edge_59 = (ixgbe_copy_dcb_cfg___crit_edge_56 == ixgbe_copy_dcb_cfg___crit_edge_58);
end
end
always @(posedge clk) begin
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %59 = icmp eq i32 %56, %58*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_51))
begin
ixgbe_copy_dcb_cfg___crit_edge_59_reg <= ixgbe_copy_dcb_cfg___crit_edge_59;
if (reset == 1'b0 && ^(ixgbe_copy_dcb_cfg___crit_edge_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg___crit_edge_59_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %61*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %16*/
/*   store i32 %14, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %32*/
/*   store i32 %30, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %40*/
/*   store i32 %38, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %44*/
/*   store i32 %42, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %47*/
/*   store i32 %45, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %50*/
/*   store i32 %48, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %53*/
/*   store i32 %51, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %60*/
/*   store i32 %58, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg__lr_ph12_2;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_6_7;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_6_9;
end
/* ixgbe_copy_dcb_cfg: %16*/
/*   store i32 %14, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_6_9_reg;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_17_19;
end
/* ixgbe_copy_dcb_cfg: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_17_19_reg;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_25_27;
end
/* ixgbe_copy_dcb_cfg: %32*/
/*   store i32 %30, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_25_27_reg;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_33_35;
end
/* ixgbe_copy_dcb_cfg: %40*/
/*   store i32 %38, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_33_35_reg;
end
/* ixgbe_copy_dcb_cfg: %44*/
/*   store i32 %42, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_6_9_reg;
end
/* ixgbe_copy_dcb_cfg: %47*/
/*   store i32 %45, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_17_19_reg;
end
/* ixgbe_copy_dcb_cfg: %50*/
/*   store i32 %48, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_25_27_reg;
end
/* ixgbe_copy_dcb_cfg: %53*/
/*   store i32 %51, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg_33_35_reg;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg___crit_edge_55;
end
/* ixgbe_copy_dcb_cfg: %60*/
/*   store i32 %58, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52))
begin
memory_controller_address_a = ixgbe_copy_dcb_cfg___crit_edge_55_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %16*/
/*   store i32 %14, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %32*/
/*   store i32 %30, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %40*/
/*   store i32 %38, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %44*/
/*   store i32 %42, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %47*/
/*   store i32 %45, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %50*/
/*   store i32 %48, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %53*/
/*   store i32 %51, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %60*/
/*   store i32 %58, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %16*/
/*   store i32 %14, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg_6_14_reg;
end
/* ixgbe_copy_dcb_cfg: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg_17_22_reg;
end
/* ixgbe_copy_dcb_cfg: %32*/
/*   store i32 %30, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg_25_30_reg;
end
/* ixgbe_copy_dcb_cfg: %40*/
/*   store i32 %38, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg_33_38_reg;
end
/* ixgbe_copy_dcb_cfg: %44*/
/*   store i32 %42, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg___crit_edge4_42_reg;
end
/* ixgbe_copy_dcb_cfg: %47*/
/*   store i32 %45, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg___crit_edge3_45_reg;
end
/* ixgbe_copy_dcb_cfg: %50*/
/*   store i32 %48, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg___crit_edge2_48_reg;
end
/* ixgbe_copy_dcb_cfg: %53*/
/*   store i32 %51, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg___crit_edge1_51_reg;
end
/* ixgbe_copy_dcb_cfg: %60*/
/*   store i32 %58, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52))
begin
memory_controller_in_a = ixgbe_copy_dcb_cfg___crit_edge_58_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %3 = load %struct.tc_configuration** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %8 = load %struct.TYPE_2__** %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %16*/
/*   store i32 %14, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_16_10))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_24_15))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %32*/
/*   store i32 %30, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_32_20))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %40*/
/*   store i32 %38, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_40_25))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %44*/
/*   store i32 %42, i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_44_30))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %47*/
/*   store i32 %45, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_47_35))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %50*/
/*   store i32 %48, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_50_40))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %53*/
/*   store i32 %51, i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_53_45))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_size_a = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %60*/
/*   store i32 %58, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_60_52))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42))
begin
memory_controller_enable_b = 1'd1;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg__lr_ph12_4;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_6_11;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_6_13;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_17_21;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_25_29;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_33_37;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_6_13_reg;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_17_21_reg;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_25_29_reg;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg_33_37_reg;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_address_b = ixgbe_copy_dcb_cfg___crit_edge_57;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* ixgbe_copy_dcb_cfg: %.lr.ph12*/
/*   %5 = load %struct.tc_configuration** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB__lr_ph12_2))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %12 = load %struct.TYPE_2__** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_5))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %6*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_6_7))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %17*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_17_12))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %25*/
/*   %30 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_25_17))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %33*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_33_22))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge4*/
/*   %42 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge4_27))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge3*/
/*   %45 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge3_32))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge2*/
/*   %48 = load i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge2_37))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge1*/
/*   %51 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge1_42))
begin
memory_controller_size_b = 2'd2;
end
/* ixgbe_copy_dcb_cfg: %._crit_edge*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB___crit_edge_49))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* ixgbe_copy_dcb_cfg: %61*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_ixgbe_copy_dcb_cfg_BB_61_54))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  ixgbe_copy_dcb_cfg_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_arg_adapter;
reg [31:0] ixgbe_copy_dcb_cfg_arg_tc_max;
wire  ixgbe_copy_dcb_cfg_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_address_a;
wire  ixgbe_copy_dcb_cfg_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_out_a;
wire [1:0] ixgbe_copy_dcb_cfg_memory_controller_size_a;
wire  ixgbe_copy_dcb_cfg_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_address_b;
wire  ixgbe_copy_dcb_cfg_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ixgbe_copy_dcb_cfg_memory_controller_out_b;
wire [1:0] ixgbe_copy_dcb_cfg_memory_controller_size_b;
reg  ixgbe_copy_dcb_cfg_memory_controller_waitrequest;
wire  ixgbe_copy_dcb_cfg_finish;
reg  ixgbe_copy_dcb_cfg_finish_final;
wire [31:0] ixgbe_copy_dcb_cfg_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


ixgbe_copy_dcb_cfg ixgbe_copy_dcb_cfg_inst (
	.memory_controller_enable_a (ixgbe_copy_dcb_cfg_memory_controller_enable_a),
	.memory_controller_address_a (ixgbe_copy_dcb_cfg_memory_controller_address_a),
	.memory_controller_write_enable_a (ixgbe_copy_dcb_cfg_memory_controller_write_enable_a),
	.memory_controller_in_a (ixgbe_copy_dcb_cfg_memory_controller_in_a),
	.memory_controller_size_a (ixgbe_copy_dcb_cfg_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ixgbe_copy_dcb_cfg_memory_controller_enable_b),
	.memory_controller_address_b (ixgbe_copy_dcb_cfg_memory_controller_address_b),
	.memory_controller_write_enable_b (ixgbe_copy_dcb_cfg_memory_controller_write_enable_b),
	.memory_controller_in_b (ixgbe_copy_dcb_cfg_memory_controller_in_b),
	.memory_controller_size_b (ixgbe_copy_dcb_cfg_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ixgbe_copy_dcb_cfg_start),
	.finish (ixgbe_copy_dcb_cfg_finish),
	.return_val (ixgbe_copy_dcb_cfg_return_val),
	.arg_adapter (ixgbe_copy_dcb_cfg_arg_adapter),
	.arg_tc_max (ixgbe_copy_dcb_cfg_arg_tc_max)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ixgbe_copy_dcb_cfg_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
begin
main_0_1 = ixgbe_copy_dcb_cfg_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ixgbe_copy_dcb_cfg_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
ixgbe_copy_dcb_cfg_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ixgbe_copy_dcb_cfg_arg_adapter <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_arg_adapter"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ixgbe_copy_dcb_cfg_arg_tc_max <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ixgbe_copy_dcb_cfg_arg_tc_max"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
begin
ixgbe_copy_dcb_cfg_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
begin
ixgbe_copy_dcb_cfg_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
ixgbe_copy_dcb_cfg_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
ixgbe_copy_dcb_cfg_finish_final = ixgbe_copy_dcb_cfg_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ixgbe_copy_dcb_cfg_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ixgbe_copy_dcb_cfg_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ixgbe_copy_dcb_cfg_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ixgbe_copy_dcb_cfg_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ixgbe_copy_dcb_cfg_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ixgbe_copy_dcb_cfg_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ixgbe_copy_dcb_cfg_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ixgbe_copy_dcb_cfg_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ixgbe_copy_dcb_cfg_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ixgbe_copy_dcb_cfg_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ixgbe_copy_dcb_cfg_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ixgbe_copy_dcb_cfg_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ixgbe_copy_dcb_cfg(%struct.ixgbe_adapter* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ixgbe_copy_dcb_cfg_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
