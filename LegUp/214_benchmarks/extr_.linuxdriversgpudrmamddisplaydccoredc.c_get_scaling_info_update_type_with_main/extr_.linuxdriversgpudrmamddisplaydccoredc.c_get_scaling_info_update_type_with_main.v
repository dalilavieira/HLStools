//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:54:51 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module get_scaling_info_update_type
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_u
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_6_4 = 7'd4;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_6_5 = 7'd5;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_6_6 = 7'd6;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_12_7 = 7'd7;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_12_8 = 7'd8;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_12_9 = 7'd9;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_18_10 = 7'd10;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_18_11 = 7'd11;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_18_12 = 7'd12;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_24_13 = 7'd13;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_24_14 = 7'd14;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_24_15 = 7'd15;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16 = 7'd16;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17 = 7'd17;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18 = 7'd18;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19 = 7'd19;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_36_20 = 7'd20;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_36_21 = 7'd21;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_36_22 = 7'd22;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_42_23 = 7'd23;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_42_24 = 7'd24;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_42_25 = 7'd25;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_46_26 = 7'd26;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_46_27 = 7'd27;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_46_28 = 7'd28;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_52_29 = 7'd29;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_52_30 = 7'd30;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31 = 7'd31;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32 = 7'd32;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33 = 7'd33;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_59_34 = 7'd34;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_59_35 = 7'd35;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_59_36 = 7'd36;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_65_37 = 7'd37;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_65_38 = 7'd38;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_65_39 = 7'd39;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_65_40 = 7'd40;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_69_41 = 7'd41;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_69_42 = 7'd42;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_69_43 = 7'd43;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_75_44 = 7'd44;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_75_45 = 7'd45;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_77_46 = 7'd46;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_77_47 = 7'd47;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_77_48 = 7'd48;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_83_49 = 7'd49;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_83_50 = 7'd50;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_83_51 = 7'd51;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_89_52 = 7'd52;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_89_53 = 7'd53;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_89_54 = 7'd54;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_95_55 = 7'd55;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_95_56 = 7'd56;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_95_57 = 7'd57;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_101_58 = 7'd58;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_101_59 = 7'd59;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_101_60 = 7'd60;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_107_61 = 7'd61;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_107_62 = 7'd62;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_107_63 = 7'd63;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_113_64 = 7'd64;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB_113_65 = 7'd65;
parameter [6:0] LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66 = 7'd66;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_u;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_0_4_reg;
reg  get_scaling_info_update_type_0_5;
reg  get_scaling_info_update_type_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_6_7_reg;
reg [31:0] get_scaling_info_update_type_6_8;
reg [31:0] get_scaling_info_update_type_6_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_6_9_reg;
reg [31:0] get_scaling_info_update_type_6_10;
reg [31:0] get_scaling_info_update_type_6_10_reg;
reg  get_scaling_info_update_type_6_11;
reg  get_scaling_info_update_type_6_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_12_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_12_13_reg;
reg [31:0] get_scaling_info_update_type_12_14;
reg [31:0] get_scaling_info_update_type_12_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_12_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_12_15_reg;
reg [31:0] get_scaling_info_update_type_12_16;
reg [31:0] get_scaling_info_update_type_12_16_reg;
reg  get_scaling_info_update_type_12_17;
reg  get_scaling_info_update_type_12_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_18_19_reg;
reg [31:0] get_scaling_info_update_type_18_20;
reg [31:0] get_scaling_info_update_type_18_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_18_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_18_21_reg;
reg [31:0] get_scaling_info_update_type_18_22;
reg [31:0] get_scaling_info_update_type_18_22_reg;
reg  get_scaling_info_update_type_18_23;
reg  get_scaling_info_update_type_18_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_24_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_24_25_reg;
reg [31:0] get_scaling_info_update_type_24_26;
reg [31:0] get_scaling_info_update_type_24_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_24_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_24_27_reg;
reg [31:0] get_scaling_info_update_type_24_28;
reg [31:0] get_scaling_info_update_type_24_28_reg;
reg  get_scaling_info_update_type_24_29;
reg  get_scaling_info_update_type_24_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_31_reg;
reg [31:0] get_scaling_info_update_type___crit_edge_32;
reg [31:0] get_scaling_info_update_type___crit_edge_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge_33_reg;
reg [31:0] get_scaling_info_update_type___crit_edge_34;
reg [31:0] get_scaling_info_update_type___crit_edge_34_reg;
reg  get_scaling_info_update_type___crit_edge_35;
reg  get_scaling_info_update_type___crit_edge_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_36_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_36_37_reg;
reg [31:0] get_scaling_info_update_type_36_38;
reg [31:0] get_scaling_info_update_type_36_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_36_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_36_39_reg;
reg [31:0] get_scaling_info_update_type_36_40;
reg [31:0] get_scaling_info_update_type_36_40_reg;
reg  get_scaling_info_update_type_36_41;
reg  get_scaling_info_update_type_36_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_42_43_reg;
reg [31:0] get_scaling_info_update_type_42_44;
reg [31:0] get_scaling_info_update_type_42_44_reg;
reg  get_scaling_info_update_type_42_45;
reg  get_scaling_info_update_type_42_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_46_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_46_47_reg;
reg [31:0] get_scaling_info_update_type_46_48;
reg [31:0] get_scaling_info_update_type_46_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_46_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_46_49_reg;
reg [31:0] get_scaling_info_update_type_46_50;
reg [31:0] get_scaling_info_update_type_46_50_reg;
reg  get_scaling_info_update_type_46_51;
reg  get_scaling_info_update_type_46_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_52_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_52_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge4_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge4_54_reg;
reg [31:0] get_scaling_info_update_type___crit_edge4_55;
reg [31:0] get_scaling_info_update_type___crit_edge4_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge4_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type___crit_edge4_56_reg;
reg [31:0] get_scaling_info_update_type___crit_edge4_57;
reg [31:0] get_scaling_info_update_type___crit_edge4_57_reg;
reg  get_scaling_info_update_type___crit_edge4_58;
reg  get_scaling_info_update_type___crit_edge4_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_59_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_59_60_reg;
reg [31:0] get_scaling_info_update_type_59_61;
reg [31:0] get_scaling_info_update_type_59_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_59_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_59_62_reg;
reg [31:0] get_scaling_info_update_type_59_63;
reg [31:0] get_scaling_info_update_type_59_63_reg;
reg  get_scaling_info_update_type_59_64;
reg  get_scaling_info_update_type_59_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_65_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_65_66_reg;
reg [31:0] get_scaling_info_update_type_65_67;
reg [31:0] get_scaling_info_update_type_65_67_reg;
reg  get_scaling_info_update_type_65_68;
reg  get_scaling_info_update_type_65_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_69_70_reg;
reg [31:0] get_scaling_info_update_type_69_71;
reg [31:0] get_scaling_info_update_type_69_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_69_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_69_72_reg;
reg [31:0] get_scaling_info_update_type_69_73;
reg [31:0] get_scaling_info_update_type_69_73_reg;
reg  get_scaling_info_update_type_69_74;
reg  get_scaling_info_update_type_69_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_75_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_75_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_77_78_reg;
reg [31:0] get_scaling_info_update_type_77_79;
reg [31:0] get_scaling_info_update_type_77_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_77_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_77_80_reg;
reg [31:0] get_scaling_info_update_type_77_81;
reg [31:0] get_scaling_info_update_type_77_81_reg;
reg  get_scaling_info_update_type_77_82;
reg  get_scaling_info_update_type_77_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_83_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_83_84_reg;
reg [31:0] get_scaling_info_update_type_83_85;
reg [31:0] get_scaling_info_update_type_83_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_83_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_83_86_reg;
reg [31:0] get_scaling_info_update_type_83_87;
reg [31:0] get_scaling_info_update_type_83_87_reg;
reg  get_scaling_info_update_type_83_88;
reg  get_scaling_info_update_type_83_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_89_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_89_90_reg;
reg [31:0] get_scaling_info_update_type_89_91;
reg [31:0] get_scaling_info_update_type_89_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_89_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_89_92_reg;
reg [31:0] get_scaling_info_update_type_89_93;
reg [31:0] get_scaling_info_update_type_89_93_reg;
reg  get_scaling_info_update_type_89_94;
reg  get_scaling_info_update_type_89_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_95_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_95_96_reg;
reg [31:0] get_scaling_info_update_type_95_97;
reg [31:0] get_scaling_info_update_type_95_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_95_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_95_98_reg;
reg [31:0] get_scaling_info_update_type_95_99;
reg [31:0] get_scaling_info_update_type_95_99_reg;
reg  get_scaling_info_update_type_95_100;
reg  get_scaling_info_update_type_95_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_101_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_101_102_reg;
reg [31:0] get_scaling_info_update_type_101_103;
reg [31:0] get_scaling_info_update_type_101_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_101_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_101_104_reg;
reg [31:0] get_scaling_info_update_type_101_105;
reg [31:0] get_scaling_info_update_type_101_105_reg;
reg  get_scaling_info_update_type_101_106;
reg  get_scaling_info_update_type_101_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_107_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_107_108_reg;
reg [31:0] get_scaling_info_update_type_107_109;
reg [31:0] get_scaling_info_update_type_107_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_107_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_107_110_reg;
reg [31:0] get_scaling_info_update_type_107_111;
reg [31:0] get_scaling_info_update_type_107_111_reg;
reg  get_scaling_info_update_type_107_112;
reg  get_scaling_info_update_type_107_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_113_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_113_114_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_0_5 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_0_5 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_6_11 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_6_11 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_12_17 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_10;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_12_17 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_10;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_11;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_11;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_12;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_18_12;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_18_23 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_13;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_18_23 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_13;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_14;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_14;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_15;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_24_15;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_24_29 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_24_29 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type___crit_edge_35 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_23;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type___crit_edge_35 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_20;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_20;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_21;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_21;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_22;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_36_22;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_36_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_36_41 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_23;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_36_41 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_23;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_24;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_24;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_25;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_42_25;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_42_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_25) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_42_45 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_52_29;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_52_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_25) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_42_45 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_26;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_26;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_27;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_27;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_28;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_46_28;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_46_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_46_51 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_52_29;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_52_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_46_51 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_52_29;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_52_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_52_30;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_52_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_52_30;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_52_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type___crit_edge4_58 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_34;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type___crit_edge4_58 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_37;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_34;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_35;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_35;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_36;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_59_36;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_59_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_59_64 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_59_64 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_37;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_37;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_38;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_38;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_39;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_39;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_40;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_65_40;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_65_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_40) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_65_68 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_40) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_65_68 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_69_74 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_75_44;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_75_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_69_74 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_75_44;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_75_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_75_45;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_75_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_75_45;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_75_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_46;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_47;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_47;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_48;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_77_48;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_77_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_77_82 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_49;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_77_82 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_49;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_50;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_50;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_51;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_83_51;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_83_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_83_88 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_52;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_83_88 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_52;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_53;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_53;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_54;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_89_54;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_89_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_89_94 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_55;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_89_94 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_55;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_56;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_56;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_57;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_95_57;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_95_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_95_100 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_58;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_95_100 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_58;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_59;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_59;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_60;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_101_60;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_101_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_101_106 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_61;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_101_106 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_61;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_62;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_62;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_63;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_107_63;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_107_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_107_112 == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_107_112 == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_64;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_65;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB_113_65;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB_113_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66;
if (reset == 1'b0 && ^(LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %0*/
/*   %1 = getelementptr inbounds %struct.dc_surface_update* %u, i32 0, i32 0*/
begin
get_scaling_info_update_type_0_1 = arg_u;
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %0*/
/*   %1 = getelementptr inbounds %struct.dc_surface_update* %u, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
get_scaling_info_update_type_0_1_reg <= get_scaling_info_update_type_0_1;
if (reset == 1'b0 && ^(get_scaling_info_update_type_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_0_1_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
begin
get_scaling_info_update_type_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3))
begin
get_scaling_info_update_type_0_2_reg <= get_scaling_info_update_type_0_2;
if (reset == 1'b0 && ^(get_scaling_info_update_type_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_0_2_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %0*/
/*   %3 = getelementptr inbounds %struct.dc_surface_update* %u, i32 0, i32 1*/
begin
get_scaling_info_update_type_0_3 = (arg_u + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %0*/
/*   %3 = getelementptr inbounds %struct.dc_surface_update* %u, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
get_scaling_info_update_type_0_3_reg <= get_scaling_info_update_type_0_3;
if (reset == 1'b0 && ^(get_scaling_info_update_type_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_0_3_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
begin
get_scaling_info_update_type_0_4 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3))
begin
get_scaling_info_update_type_0_4_reg <= get_scaling_info_update_type_0_4;
if (reset == 1'b0 && ^(get_scaling_info_update_type_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_0_4_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %0*/
/*   %5 = icmp eq %struct.TYPE_15__* %4, null*/
begin
get_scaling_info_update_type_0_5 = (get_scaling_info_update_type_0_4 == 0);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %0*/
/*   %5 = icmp eq %struct.TYPE_15__* %4, null*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_3))
begin
get_scaling_info_update_type_0_5_reg <= get_scaling_info_update_type_0_5;
if (reset == 1'b0 && ^(get_scaling_info_update_type_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_0_5_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %6*/
/*   %7 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 0*/
begin
get_scaling_info_update_type_6_7 = (get_scaling_info_update_type_0_4_reg + 16);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %6*/
/*   %7 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
get_scaling_info_update_type_6_7_reg <= get_scaling_info_update_type_6_7;
if (reset == 1'b0 && ^(get_scaling_info_update_type_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_6_7_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_6_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6))
begin
get_scaling_info_update_type_6_8_reg <= get_scaling_info_update_type_6_8;
if (reset == 1'b0 && ^(get_scaling_info_update_type_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_6_8_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %6*/
/*   %9 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 0*/
begin
get_scaling_info_update_type_6_9 = (get_scaling_info_update_type_0_2_reg + 16);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %6*/
/*   %9 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
get_scaling_info_update_type_6_9_reg <= get_scaling_info_update_type_6_9;
if (reset == 1'b0 && ^(get_scaling_info_update_type_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_6_9_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_6_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6))
begin
get_scaling_info_update_type_6_10_reg <= get_scaling_info_update_type_6_10;
if (reset == 1'b0 && ^(get_scaling_info_update_type_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_6_10_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %6*/
/*   %11 = icmp eq i32 %8, %10*/
begin
get_scaling_info_update_type_6_11 = (get_scaling_info_update_type_6_8 == get_scaling_info_update_type_6_10);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %6*/
/*   %11 = icmp eq i32 %8, %10*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_6))
begin
get_scaling_info_update_type_6_11_reg <= get_scaling_info_update_type_6_11;
if (reset == 1'b0 && ^(get_scaling_info_update_type_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_6_11_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %12*/
/*   %13 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 1*/
begin
get_scaling_info_update_type_12_13 = (get_scaling_info_update_type_0_4_reg + (16 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %12*/
/*   %13 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
get_scaling_info_update_type_12_13_reg <= get_scaling_info_update_type_12_13;
if (reset == 1'b0 && ^(get_scaling_info_update_type_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_12_13_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_12_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9))
begin
get_scaling_info_update_type_12_14_reg <= get_scaling_info_update_type_12_14;
if (reset == 1'b0 && ^(get_scaling_info_update_type_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_12_14_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %12*/
/*   %15 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 1*/
begin
get_scaling_info_update_type_12_15 = (get_scaling_info_update_type_0_2_reg + (16 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %12*/
/*   %15 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
get_scaling_info_update_type_12_15_reg <= get_scaling_info_update_type_12_15;
if (reset == 1'b0 && ^(get_scaling_info_update_type_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_12_15_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_12_16 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9))
begin
get_scaling_info_update_type_12_16_reg <= get_scaling_info_update_type_12_16;
if (reset == 1'b0 && ^(get_scaling_info_update_type_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_12_16_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %12*/
/*   %17 = icmp eq i32 %14, %16*/
begin
get_scaling_info_update_type_12_17 = (get_scaling_info_update_type_12_14 == get_scaling_info_update_type_12_16);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %12*/
/*   %17 = icmp eq i32 %14, %16*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_9))
begin
get_scaling_info_update_type_12_17_reg <= get_scaling_info_update_type_12_17;
if (reset == 1'b0 && ^(get_scaling_info_update_type_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_12_17_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %18*/
/*   %19 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 0*/
begin
get_scaling_info_update_type_18_19 = get_scaling_info_update_type_0_4_reg;
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %18*/
/*   %19 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
get_scaling_info_update_type_18_19_reg <= get_scaling_info_update_type_18_19;
if (reset == 1'b0 && ^(get_scaling_info_update_type_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_18_19_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_18_20 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12))
begin
get_scaling_info_update_type_18_20_reg <= get_scaling_info_update_type_18_20;
if (reset == 1'b0 && ^(get_scaling_info_update_type_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_18_20_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %18*/
/*   %21 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 0*/
begin
get_scaling_info_update_type_18_21 = get_scaling_info_update_type_0_2_reg;
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %18*/
/*   %21 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
get_scaling_info_update_type_18_21_reg <= get_scaling_info_update_type_18_21;
if (reset == 1'b0 && ^(get_scaling_info_update_type_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_18_21_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_18_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12))
begin
get_scaling_info_update_type_18_22_reg <= get_scaling_info_update_type_18_22;
if (reset == 1'b0 && ^(get_scaling_info_update_type_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_18_22_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %18*/
/*   %23 = icmp eq i32 %20, %22*/
begin
get_scaling_info_update_type_18_23 = (get_scaling_info_update_type_18_20 == get_scaling_info_update_type_18_22);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %18*/
/*   %23 = icmp eq i32 %20, %22*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_12))
begin
get_scaling_info_update_type_18_23_reg <= get_scaling_info_update_type_18_23;
if (reset == 1'b0 && ^(get_scaling_info_update_type_18_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_18_23_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %24*/
/*   %25 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
begin
get_scaling_info_update_type_24_25 = (get_scaling_info_update_type_0_4_reg + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %24*/
/*   %25 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
get_scaling_info_update_type_24_25_reg <= get_scaling_info_update_type_24_25;
if (reset == 1'b0 && ^(get_scaling_info_update_type_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_24_25_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_24_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15))
begin
get_scaling_info_update_type_24_26_reg <= get_scaling_info_update_type_24_26;
if (reset == 1'b0 && ^(get_scaling_info_update_type_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_24_26_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %24*/
/*   %27 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 1*/
begin
get_scaling_info_update_type_24_27 = (get_scaling_info_update_type_0_2_reg + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %24*/
/*   %27 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
get_scaling_info_update_type_24_27_reg <= get_scaling_info_update_type_24_27;
if (reset == 1'b0 && ^(get_scaling_info_update_type_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_24_27_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_24_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15))
begin
get_scaling_info_update_type_24_28_reg <= get_scaling_info_update_type_24_28;
if (reset == 1'b0 && ^(get_scaling_info_update_type_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_24_28_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %24*/
/*   %29 = icmp eq i32 %26, %28*/
begin
get_scaling_info_update_type_24_29 = (get_scaling_info_update_type_24_26 == get_scaling_info_update_type_24_28);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %24*/
/*   %29 = icmp eq i32 %26, %28*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_15))
begin
get_scaling_info_update_type_24_29_reg <= get_scaling_info_update_type_24_29;
if (reset == 1'b0 && ^(get_scaling_info_update_type_24_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_24_29_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %30 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 0*/
begin
get_scaling_info_update_type___crit_edge_30 = (get_scaling_info_update_type_0_2_reg + 48);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %30 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
get_scaling_info_update_type___crit_edge_30_reg <= get_scaling_info_update_type___crit_edge_30;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_30_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %31 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 0*/
begin
get_scaling_info_update_type___crit_edge_31 = get_scaling_info_update_type_0_4_reg;
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %31 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
get_scaling_info_update_type___crit_edge_31_reg <= get_scaling_info_update_type___crit_edge_31;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_31_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
begin
get_scaling_info_update_type___crit_edge_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19))
begin
get_scaling_info_update_type___crit_edge_32_reg <= get_scaling_info_update_type___crit_edge_32;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_32_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %33 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 0*/
begin
get_scaling_info_update_type___crit_edge_33 = get_scaling_info_update_type_0_2_reg;
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %33 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
get_scaling_info_update_type___crit_edge_33_reg <= get_scaling_info_update_type___crit_edge_33;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_33_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
begin
get_scaling_info_update_type___crit_edge_34 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19))
begin
get_scaling_info_update_type___crit_edge_34_reg <= get_scaling_info_update_type___crit_edge_34;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_34_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %35 = icmp slt i32 %32, %34*/
begin
get_scaling_info_update_type___crit_edge_35 = ($signed(get_scaling_info_update_type___crit_edge_32) < $signed(get_scaling_info_update_type___crit_edge_34));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge*/
/*   %35 = icmp slt i32 %32, %34*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_19))
begin
get_scaling_info_update_type___crit_edge_35_reg <= get_scaling_info_update_type___crit_edge_35;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge_35_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %36*/
/*   %37 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
begin
get_scaling_info_update_type_36_37 = (get_scaling_info_update_type_0_4_reg + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %36*/
/*   %37 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
get_scaling_info_update_type_36_37_reg <= get_scaling_info_update_type_36_37;
if (reset == 1'b0 && ^(get_scaling_info_update_type_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_36_37_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_36_38 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22))
begin
get_scaling_info_update_type_36_38_reg <= get_scaling_info_update_type_36_38;
if (reset == 1'b0 && ^(get_scaling_info_update_type_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_36_38_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %36*/
/*   %39 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 1*/
begin
get_scaling_info_update_type_36_39 = (get_scaling_info_update_type_0_2_reg + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %36*/
/*   %39 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
get_scaling_info_update_type_36_39_reg <= get_scaling_info_update_type_36_39;
if (reset == 1'b0 && ^(get_scaling_info_update_type_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_36_39_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_36_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22))
begin
get_scaling_info_update_type_36_40_reg <= get_scaling_info_update_type_36_40;
if (reset == 1'b0 && ^(get_scaling_info_update_type_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_36_40_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %36*/
/*   %41 = icmp slt i32 %38, %40*/
begin
get_scaling_info_update_type_36_41 = ($signed(get_scaling_info_update_type_36_38) < $signed(get_scaling_info_update_type_36_40));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %36*/
/*   %41 = icmp slt i32 %38, %40*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_22))
begin
get_scaling_info_update_type_36_41_reg <= get_scaling_info_update_type_36_41;
if (reset == 1'b0 && ^(get_scaling_info_update_type_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_36_41_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %42*/
/*   %43 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 0*/
begin
get_scaling_info_update_type_42_43 = (get_scaling_info_update_type_0_2_reg + 32);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %42*/
/*   %43 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23))
begin
get_scaling_info_update_type_42_43_reg <= get_scaling_info_update_type_42_43;
if (reset == 1'b0 && ^(get_scaling_info_update_type_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_42_43_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_42_44 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_25))
begin
get_scaling_info_update_type_42_44_reg <= get_scaling_info_update_type_42_44;
if (reset == 1'b0 && ^(get_scaling_info_update_type_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_42_44_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %42*/
/*   %45 = icmp slt i32 %32, %44*/
begin
get_scaling_info_update_type_42_45 = ($signed(get_scaling_info_update_type___crit_edge_32_reg) < $signed(get_scaling_info_update_type_42_44));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %42*/
/*   %45 = icmp slt i32 %32, %44*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_25))
begin
get_scaling_info_update_type_42_45_reg <= get_scaling_info_update_type_42_45;
if (reset == 1'b0 && ^(get_scaling_info_update_type_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_42_45_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %46*/
/*   %47 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
begin
get_scaling_info_update_type_46_47 = (get_scaling_info_update_type_0_4_reg + 4);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %46*/
/*   %47 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
get_scaling_info_update_type_46_47_reg <= get_scaling_info_update_type_46_47;
if (reset == 1'b0 && ^(get_scaling_info_update_type_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_46_47_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_46_48 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28))
begin
get_scaling_info_update_type_46_48_reg <= get_scaling_info_update_type_46_48;
if (reset == 1'b0 && ^(get_scaling_info_update_type_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_46_48_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %46*/
/*   %49 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
begin
get_scaling_info_update_type_46_49 = (get_scaling_info_update_type_0_2_reg + (32 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %46*/
/*   %49 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
get_scaling_info_update_type_46_49_reg <= get_scaling_info_update_type_46_49;
if (reset == 1'b0 && ^(get_scaling_info_update_type_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_46_49_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_46_50 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28))
begin
get_scaling_info_update_type_46_50_reg <= get_scaling_info_update_type_46_50;
if (reset == 1'b0 && ^(get_scaling_info_update_type_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_46_50_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %46*/
/*   %51 = icmp slt i32 %48, %50*/
begin
get_scaling_info_update_type_46_51 = ($signed(get_scaling_info_update_type_46_48) < $signed(get_scaling_info_update_type_46_50));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %46*/
/*   %51 = icmp slt i32 %48, %50*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_28))
begin
get_scaling_info_update_type_46_51_reg <= get_scaling_info_update_type_46_51;
if (reset == 1'b0 && ^(get_scaling_info_update_type_46_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_46_51_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %52*/
/*   %53 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 1*/
begin
get_scaling_info_update_type_52_53 = (get_scaling_info_update_type_0_2_reg + (48 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %52*/
/*   %53 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
get_scaling_info_update_type_52_53_reg <= get_scaling_info_update_type_52_53;
if (reset == 1'b0 && ^(get_scaling_info_update_type_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_52_53_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %54 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 0*/
begin
get_scaling_info_update_type___crit_edge4_54 = (get_scaling_info_update_type_0_4_reg + 32);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %54 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
get_scaling_info_update_type___crit_edge4_54_reg <= get_scaling_info_update_type___crit_edge4_54;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge4_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge4_54_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
begin
get_scaling_info_update_type___crit_edge4_55 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33))
begin
get_scaling_info_update_type___crit_edge4_55_reg <= get_scaling_info_update_type___crit_edge4_55;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge4_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge4_55_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %56 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 0*/
begin
get_scaling_info_update_type___crit_edge4_56 = (get_scaling_info_update_type_0_2_reg + 32);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %56 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
get_scaling_info_update_type___crit_edge4_56_reg <= get_scaling_info_update_type___crit_edge4_56;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge4_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge4_56_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
begin
get_scaling_info_update_type___crit_edge4_57 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33))
begin
get_scaling_info_update_type___crit_edge4_57_reg <= get_scaling_info_update_type___crit_edge4_57;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge4_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge4_57_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %58 = icmp eq i32 %55, %57*/
begin
get_scaling_info_update_type___crit_edge4_58 = (get_scaling_info_update_type___crit_edge4_55 == get_scaling_info_update_type___crit_edge4_57);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %58 = icmp eq i32 %55, %57*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_33))
begin
get_scaling_info_update_type___crit_edge4_58_reg <= get_scaling_info_update_type___crit_edge4_58;
if (reset == 1'b0 && ^(get_scaling_info_update_type___crit_edge4_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type___crit_edge4_58_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %59*/
/*   %60 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 1*/
begin
get_scaling_info_update_type_59_60 = (get_scaling_info_update_type_0_4_reg + (32 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %59*/
/*   %60 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
get_scaling_info_update_type_59_60_reg <= get_scaling_info_update_type_59_60;
if (reset == 1'b0 && ^(get_scaling_info_update_type_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_59_60_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_59_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36))
begin
get_scaling_info_update_type_59_61_reg <= get_scaling_info_update_type_59_61;
if (reset == 1'b0 && ^(get_scaling_info_update_type_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_59_61_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %59*/
/*   %62 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
begin
get_scaling_info_update_type_59_62 = (get_scaling_info_update_type_0_2_reg + (32 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %59*/
/*   %62 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
get_scaling_info_update_type_59_62_reg <= get_scaling_info_update_type_59_62;
if (reset == 1'b0 && ^(get_scaling_info_update_type_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_59_62_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_59_63 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36))
begin
get_scaling_info_update_type_59_63_reg <= get_scaling_info_update_type_59_63;
if (reset == 1'b0 && ^(get_scaling_info_update_type_59_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_59_63_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %59*/
/*   %64 = icmp eq i32 %61, %63*/
begin
get_scaling_info_update_type_59_64 = (get_scaling_info_update_type_59_61 == get_scaling_info_update_type_59_63);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %59*/
/*   %64 = icmp eq i32 %61, %63*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_36))
begin
get_scaling_info_update_type_59_64_reg <= get_scaling_info_update_type_59_64;
if (reset == 1'b0 && ^(get_scaling_info_update_type_59_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_59_64_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %65*/
/*   %66 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 0*/
begin
get_scaling_info_update_type_65_66 = (get_scaling_info_update_type_0_2_reg + 48);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %65*/
/*   %66 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
get_scaling_info_update_type_65_66_reg <= get_scaling_info_update_type_65_66;
if (reset == 1'b0 && ^(get_scaling_info_update_type_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_65_66_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_65_67 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_40))
begin
get_scaling_info_update_type_65_67_reg <= get_scaling_info_update_type_65_67;
if (reset == 1'b0 && ^(get_scaling_info_update_type_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_65_67_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %65*/
/*   %68 = icmp sgt i32 %67, %57*/
begin
get_scaling_info_update_type_65_68 = ($signed(get_scaling_info_update_type_65_67) > $signed(get_scaling_info_update_type___crit_edge4_57_reg));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %65*/
/*   %68 = icmp sgt i32 %67, %57*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_40))
begin
get_scaling_info_update_type_65_68_reg <= get_scaling_info_update_type_65_68;
if (reset == 1'b0 && ^(get_scaling_info_update_type_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_65_68_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %69*/
/*   %70 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 1*/
begin
get_scaling_info_update_type_69_70 = (get_scaling_info_update_type_0_4_reg + (32 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %69*/
/*   %70 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
get_scaling_info_update_type_69_70_reg <= get_scaling_info_update_type_69_70;
if (reset == 1'b0 && ^(get_scaling_info_update_type_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_69_70_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_69_71 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43))
begin
get_scaling_info_update_type_69_71_reg <= get_scaling_info_update_type_69_71;
if (reset == 1'b0 && ^(get_scaling_info_update_type_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_69_71_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %69*/
/*   %72 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
begin
get_scaling_info_update_type_69_72 = (get_scaling_info_update_type_0_2_reg + (32 + 4));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %69*/
/*   %72 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
get_scaling_info_update_type_69_72_reg <= get_scaling_info_update_type_69_72;
if (reset == 1'b0 && ^(get_scaling_info_update_type_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_69_72_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_69_73 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43))
begin
get_scaling_info_update_type_69_73_reg <= get_scaling_info_update_type_69_73;
if (reset == 1'b0 && ^(get_scaling_info_update_type_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_69_73_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %69*/
/*   %74 = icmp sgt i32 %71, %73*/
begin
get_scaling_info_update_type_69_74 = ($signed(get_scaling_info_update_type_69_71) > $signed(get_scaling_info_update_type_69_73));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %69*/
/*   %74 = icmp sgt i32 %71, %73*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_43))
begin
get_scaling_info_update_type_69_74_reg <= get_scaling_info_update_type_69_74;
if (reset == 1'b0 && ^(get_scaling_info_update_type_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_69_74_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %75*/
/*   %76 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 2*/
begin
get_scaling_info_update_type_75_76 = (get_scaling_info_update_type_0_2_reg + (48 + 8));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %75*/
/*   %76 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
get_scaling_info_update_type_75_76_reg <= get_scaling_info_update_type_75_76;
if (reset == 1'b0 && ^(get_scaling_info_update_type_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_75_76_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %77*/
/*   %78 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 2*/
begin
get_scaling_info_update_type_77_78 = (get_scaling_info_update_type_0_4_reg + (32 + 8));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %77*/
/*   %78 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
get_scaling_info_update_type_77_78_reg <= get_scaling_info_update_type_77_78;
if (reset == 1'b0 && ^(get_scaling_info_update_type_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_77_78_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_77_79 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48))
begin
get_scaling_info_update_type_77_79_reg <= get_scaling_info_update_type_77_79;
if (reset == 1'b0 && ^(get_scaling_info_update_type_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_77_79_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %77*/
/*   %80 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 2*/
begin
get_scaling_info_update_type_77_80 = (get_scaling_info_update_type_0_2_reg + (32 + 8));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %77*/
/*   %80 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
get_scaling_info_update_type_77_80_reg <= get_scaling_info_update_type_77_80;
if (reset == 1'b0 && ^(get_scaling_info_update_type_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_77_80_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_77_81 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48))
begin
get_scaling_info_update_type_77_81_reg <= get_scaling_info_update_type_77_81;
if (reset == 1'b0 && ^(get_scaling_info_update_type_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_77_81_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %77*/
/*   %82 = icmp eq i32 %79, %81*/
begin
get_scaling_info_update_type_77_82 = (get_scaling_info_update_type_77_79 == get_scaling_info_update_type_77_81);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %77*/
/*   %82 = icmp eq i32 %79, %81*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_48))
begin
get_scaling_info_update_type_77_82_reg <= get_scaling_info_update_type_77_82;
if (reset == 1'b0 && ^(get_scaling_info_update_type_77_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_77_82_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %83*/
/*   %84 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 3*/
begin
get_scaling_info_update_type_83_84 = (get_scaling_info_update_type_0_4_reg + (32 + 12));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %83*/
/*   %84 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 2, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
get_scaling_info_update_type_83_84_reg <= get_scaling_info_update_type_83_84;
if (reset == 1'b0 && ^(get_scaling_info_update_type_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_83_84_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_83_85 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51))
begin
get_scaling_info_update_type_83_85_reg <= get_scaling_info_update_type_83_85;
if (reset == 1'b0 && ^(get_scaling_info_update_type_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_83_85_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %83*/
/*   %86 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 3*/
begin
get_scaling_info_update_type_83_86 = (get_scaling_info_update_type_0_2_reg + (32 + 12));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %83*/
/*   %86 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 2, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
get_scaling_info_update_type_83_86_reg <= get_scaling_info_update_type_83_86;
if (reset == 1'b0 && ^(get_scaling_info_update_type_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_83_86_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_83_87 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51))
begin
get_scaling_info_update_type_83_87_reg <= get_scaling_info_update_type_83_87;
if (reset == 1'b0 && ^(get_scaling_info_update_type_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_83_87_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %83*/
/*   %88 = icmp eq i32 %85, %87*/
begin
get_scaling_info_update_type_83_88 = (get_scaling_info_update_type_83_85 == get_scaling_info_update_type_83_87);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %83*/
/*   %88 = icmp eq i32 %85, %87*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_51))
begin
get_scaling_info_update_type_83_88_reg <= get_scaling_info_update_type_83_88;
if (reset == 1'b0 && ^(get_scaling_info_update_type_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_83_88_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %89*/
/*   %90 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 2*/
begin
get_scaling_info_update_type_89_90 = (get_scaling_info_update_type_0_4_reg + (16 + 8));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %89*/
/*   %90 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
get_scaling_info_update_type_89_90_reg <= get_scaling_info_update_type_89_90;
if (reset == 1'b0 && ^(get_scaling_info_update_type_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_89_90_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_89_91 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54))
begin
get_scaling_info_update_type_89_91_reg <= get_scaling_info_update_type_89_91;
if (reset == 1'b0 && ^(get_scaling_info_update_type_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_89_91_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %89*/
/*   %92 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 2*/
begin
get_scaling_info_update_type_89_92 = (get_scaling_info_update_type_0_2_reg + (16 + 8));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %89*/
/*   %92 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
get_scaling_info_update_type_89_92_reg <= get_scaling_info_update_type_89_92;
if (reset == 1'b0 && ^(get_scaling_info_update_type_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_89_92_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_89_93 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54))
begin
get_scaling_info_update_type_89_93_reg <= get_scaling_info_update_type_89_93;
if (reset == 1'b0 && ^(get_scaling_info_update_type_89_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_89_93_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %89*/
/*   %94 = icmp eq i32 %91, %93*/
begin
get_scaling_info_update_type_89_94 = (get_scaling_info_update_type_89_91 == get_scaling_info_update_type_89_93);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %89*/
/*   %94 = icmp eq i32 %91, %93*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_54))
begin
get_scaling_info_update_type_89_94_reg <= get_scaling_info_update_type_89_94;
if (reset == 1'b0 && ^(get_scaling_info_update_type_89_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_89_94_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %95*/
/*   %96 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 3*/
begin
get_scaling_info_update_type_95_96 = (get_scaling_info_update_type_0_4_reg + (16 + 12));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %95*/
/*   %96 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 1, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
get_scaling_info_update_type_95_96_reg <= get_scaling_info_update_type_95_96;
if (reset == 1'b0 && ^(get_scaling_info_update_type_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_95_96_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_95_97 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57))
begin
get_scaling_info_update_type_95_97_reg <= get_scaling_info_update_type_95_97;
if (reset == 1'b0 && ^(get_scaling_info_update_type_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_95_97_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %95*/
/*   %98 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 3*/
begin
get_scaling_info_update_type_95_98 = (get_scaling_info_update_type_0_2_reg + (16 + 12));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %95*/
/*   %98 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 1, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
get_scaling_info_update_type_95_98_reg <= get_scaling_info_update_type_95_98;
if (reset == 1'b0 && ^(get_scaling_info_update_type_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_95_98_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_95_99 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57))
begin
get_scaling_info_update_type_95_99_reg <= get_scaling_info_update_type_95_99;
if (reset == 1'b0 && ^(get_scaling_info_update_type_95_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_95_99_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %95*/
/*   %100 = icmp eq i32 %97, %99*/
begin
get_scaling_info_update_type_95_100 = (get_scaling_info_update_type_95_97 == get_scaling_info_update_type_95_99);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %95*/
/*   %100 = icmp eq i32 %97, %99*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_57))
begin
get_scaling_info_update_type_95_100_reg <= get_scaling_info_update_type_95_100;
if (reset == 1'b0 && ^(get_scaling_info_update_type_95_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_95_100_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %101*/
/*   %102 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 2*/
begin
get_scaling_info_update_type_101_102 = (get_scaling_info_update_type_0_4_reg + 8);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %101*/
/*   %102 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
get_scaling_info_update_type_101_102_reg <= get_scaling_info_update_type_101_102;
if (reset == 1'b0 && ^(get_scaling_info_update_type_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_101_102_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_101_103 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60))
begin
get_scaling_info_update_type_101_103_reg <= get_scaling_info_update_type_101_103;
if (reset == 1'b0 && ^(get_scaling_info_update_type_101_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_101_103_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %101*/
/*   %104 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 2*/
begin
get_scaling_info_update_type_101_104 = (get_scaling_info_update_type_0_2_reg + 8);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %101*/
/*   %104 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
get_scaling_info_update_type_101_104_reg <= get_scaling_info_update_type_101_104;
if (reset == 1'b0 && ^(get_scaling_info_update_type_101_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_101_104_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_101_105 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60))
begin
get_scaling_info_update_type_101_105_reg <= get_scaling_info_update_type_101_105;
if (reset == 1'b0 && ^(get_scaling_info_update_type_101_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_101_105_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %101*/
/*   %106 = icmp eq i32 %103, %105*/
begin
get_scaling_info_update_type_101_106 = (get_scaling_info_update_type_101_103 == get_scaling_info_update_type_101_105);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %101*/
/*   %106 = icmp eq i32 %103, %105*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_60))
begin
get_scaling_info_update_type_101_106_reg <= get_scaling_info_update_type_101_106;
if (reset == 1'b0 && ^(get_scaling_info_update_type_101_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_101_106_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %107*/
/*   %108 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 3*/
begin
get_scaling_info_update_type_107_108 = (get_scaling_info_update_type_0_4_reg + 12);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %107*/
/*   %108 = getelementptr inbounds %struct.TYPE_15__* %4, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
get_scaling_info_update_type_107_108_reg <= get_scaling_info_update_type_107_108;
if (reset == 1'b0 && ^(get_scaling_info_update_type_107_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_107_108_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_107_109 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63))
begin
get_scaling_info_update_type_107_109_reg <= get_scaling_info_update_type_107_109;
if (reset == 1'b0 && ^(get_scaling_info_update_type_107_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_107_109_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %107*/
/*   %110 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 3*/
begin
get_scaling_info_update_type_107_110 = (get_scaling_info_update_type_0_2_reg + 12);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %107*/
/*   %110 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
get_scaling_info_update_type_107_110_reg <= get_scaling_info_update_type_107_110;
if (reset == 1'b0 && ^(get_scaling_info_update_type_107_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_107_110_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
begin
get_scaling_info_update_type_107_111 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63))
begin
get_scaling_info_update_type_107_111_reg <= get_scaling_info_update_type_107_111;
if (reset == 1'b0 && ^(get_scaling_info_update_type_107_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_107_111_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %107*/
/*   %112 = icmp eq i32 %109, %111*/
begin
get_scaling_info_update_type_107_112 = (get_scaling_info_update_type_107_109 == get_scaling_info_update_type_107_111);
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %107*/
/*   %112 = icmp eq i32 %109, %111*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_63))
begin
get_scaling_info_update_type_107_112_reg <= get_scaling_info_update_type_107_112;
if (reset == 1'b0 && ^(get_scaling_info_update_type_107_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_107_112_reg"); $finish; end
end
end
always @(*) begin
/* get_scaling_info_update_type: %113*/
/*   %114 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 3*/
begin
get_scaling_info_update_type_113_114 = (get_scaling_info_update_type_0_2_reg + (48 + 12));
end
end
always @(posedge clk) begin
/* get_scaling_info_update_type: %113*/
/*   %114 = getelementptr inbounds %struct.TYPE_17__* %2, i32 0, i32 3, i32 0, i32 3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
get_scaling_info_update_type_113_114_reg <= get_scaling_info_update_type_113_114;
if (reset == 1'b0 && ^(get_scaling_info_update_type_113_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_113_114_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* get_scaling_info_update_type: %._crit_edge2*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   store i32 1, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %52*/
/*   store i32 1, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_address_a = get_scaling_info_update_type_0_1;
end
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_address_a = get_scaling_info_update_type_6_7;
end
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_address_a = get_scaling_info_update_type_12_13;
end
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_address_a = get_scaling_info_update_type_18_19;
end
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_address_a = get_scaling_info_update_type_24_25;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   store i32 1, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
memory_controller_address_a = get_scaling_info_update_type___crit_edge_30;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_address_a = get_scaling_info_update_type___crit_edge_31_reg;
end
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_address_a = get_scaling_info_update_type_36_37;
end
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_address_a = get_scaling_info_update_type_46_47;
end
/* get_scaling_info_update_type: %52*/
/*   store i32 1, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
memory_controller_address_a = get_scaling_info_update_type_52_53;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_address_a = get_scaling_info_update_type___crit_edge4_56;
end
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_address_a = get_scaling_info_update_type_59_60;
end
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_address_a = get_scaling_info_update_type_69_70;
end
/* get_scaling_info_update_type: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
memory_controller_address_a = get_scaling_info_update_type_75_76;
end
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_address_a = get_scaling_info_update_type_77_78;
end
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_address_a = get_scaling_info_update_type_83_84;
end
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_address_a = get_scaling_info_update_type_89_90;
end
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_address_a = get_scaling_info_update_type_95_96;
end
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_address_a = get_scaling_info_update_type_101_102;
end
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_address_a = get_scaling_info_update_type_107_108;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   store i32 1, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %52*/
/*   store i32 1, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   store i32 1, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
memory_controller_in_a = 32'd1;
end
/* get_scaling_info_update_type: %52*/
/*   store i32 1, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
memory_controller_in_a = 32'd1;
end
/* get_scaling_info_update_type: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
memory_controller_in_a = 32'd1;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %2 = load %struct.TYPE_17__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %18*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   store i32 1, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_16))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %46*/
/*   %48 = load i32* %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %52*/
/*   store i32 1, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_52_29))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_75_44))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %83*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %89*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %95*/
/*   %97 = load i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %101*/
/*   %103 = load i32* %102, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_size_a = 2'd2;
end
/* get_scaling_info_update_type: %107*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %65*/
/*   store i32 1, i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %113*/
/*   store i32 1, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_address_b = get_scaling_info_update_type_0_3;
end
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_address_b = get_scaling_info_update_type_6_9;
end
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_address_b = get_scaling_info_update_type_12_15;
end
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_address_b = get_scaling_info_update_type_18_21;
end
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_address_b = get_scaling_info_update_type_24_27;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_address_b = get_scaling_info_update_type___crit_edge_33_reg;
end
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_address_b = get_scaling_info_update_type_36_39;
end
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23))
begin
memory_controller_address_b = get_scaling_info_update_type_42_43;
end
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_address_b = get_scaling_info_update_type_46_49;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_address_b = get_scaling_info_update_type___crit_edge4_54;
end
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_address_b = get_scaling_info_update_type_59_62;
end
/* get_scaling_info_update_type: %65*/
/*   store i32 1, i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
memory_controller_address_b = get_scaling_info_update_type_65_66;
end
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38))
begin
memory_controller_address_b = get_scaling_info_update_type___crit_edge4_54_reg;
end
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_address_b = get_scaling_info_update_type_69_72;
end
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_address_b = get_scaling_info_update_type_77_80;
end
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_address_b = get_scaling_info_update_type_83_86;
end
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_address_b = get_scaling_info_update_type_89_92;
end
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_address_b = get_scaling_info_update_type_95_98;
end
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_address_b = get_scaling_info_update_type_101_104;
end
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_address_b = get_scaling_info_update_type_107_110;
end
/* get_scaling_info_update_type: %113*/
/*   store i32 1, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
memory_controller_address_b = get_scaling_info_update_type_113_114;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %65*/
/*   store i32 1, i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* get_scaling_info_update_type: %113*/
/*   store i32 1, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* get_scaling_info_update_type: %65*/
/*   store i32 1, i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
memory_controller_in_b = 32'd1;
end
/* get_scaling_info_update_type: %113*/
/*   store i32 1, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
memory_controller_in_b = 32'd1;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* get_scaling_info_update_type: %0*/
/*   %4 = load %struct.TYPE_15__** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %6*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_6_4))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_12_7))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %18*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_18_10))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %24*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_24_13))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %._crit_edge*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge_17))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %36*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_36_20))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %42*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_42_23))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %46*/
/*   %50 = load i32* %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_46_26))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %._crit_edge4*/
/*   %55 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge4_31))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %59*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_59_34))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %65*/
/*   store i32 1, i32* %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_37))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %65*/
/*   %67 = load i32* %54, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_65_38))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_69_41))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %77*/
/*   %81 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_77_46))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %83*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_83_49))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %89*/
/*   %93 = load i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_89_52))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %95*/
/*   %99 = load i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_95_55))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %101*/
/*   %105 = load i32* %104, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_101_58))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %107*/
/*   %111 = load i32* %110, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_107_61))
begin
memory_controller_size_b = 2'd2;
end
/* get_scaling_info_update_type: %113*/
/*   store i32 1, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB_113_64))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* get_scaling_info_update_type: %._crit_edge2*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_get_scaling_info_update_type_BB___crit_edge2_66))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  get_scaling_info_update_type_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_arg_u;
wire  get_scaling_info_update_type_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_memory_controller_address_a;
wire  get_scaling_info_update_type_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_scaling_info_update_type_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_scaling_info_update_type_memory_controller_out_a;
wire [1:0] get_scaling_info_update_type_memory_controller_size_a;
wire  get_scaling_info_update_type_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_scaling_info_update_type_memory_controller_address_b;
wire  get_scaling_info_update_type_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_scaling_info_update_type_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_scaling_info_update_type_memory_controller_out_b;
wire [1:0] get_scaling_info_update_type_memory_controller_size_b;
reg  get_scaling_info_update_type_memory_controller_waitrequest;
wire  get_scaling_info_update_type_finish;
reg  get_scaling_info_update_type_finish_final;
wire [31:0] get_scaling_info_update_type_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


get_scaling_info_update_type get_scaling_info_update_type_inst (
	.memory_controller_enable_a (get_scaling_info_update_type_memory_controller_enable_a),
	.memory_controller_address_a (get_scaling_info_update_type_memory_controller_address_a),
	.memory_controller_write_enable_a (get_scaling_info_update_type_memory_controller_write_enable_a),
	.memory_controller_in_a (get_scaling_info_update_type_memory_controller_in_a),
	.memory_controller_size_a (get_scaling_info_update_type_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (get_scaling_info_update_type_memory_controller_enable_b),
	.memory_controller_address_b (get_scaling_info_update_type_memory_controller_address_b),
	.memory_controller_write_enable_b (get_scaling_info_update_type_memory_controller_write_enable_b),
	.memory_controller_in_b (get_scaling_info_update_type_memory_controller_in_b),
	.memory_controller_size_b (get_scaling_info_update_type_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (get_scaling_info_update_type_start),
	.finish (get_scaling_info_update_type_finish),
	.return_val (get_scaling_info_update_type_return_val),
	.arg_u (get_scaling_info_update_type_arg_u)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_scaling_info_update_type_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
begin
main_0_1 = get_scaling_info_update_type_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_scaling_info_update_type_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
get_scaling_info_update_type_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_scaling_info_update_type_arg_u <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_scaling_info_update_type_arg_u"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
begin
get_scaling_info_update_type_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
begin
get_scaling_info_update_type_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
get_scaling_info_update_type_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
get_scaling_info_update_type_finish_final = get_scaling_info_update_type_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_scaling_info_update_type_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_scaling_info_update_type_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_scaling_info_update_type_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_scaling_info_update_type_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_scaling_info_update_type_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_scaling_info_update_type_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_scaling_info_update_type_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_scaling_info_update_type_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_scaling_info_update_type_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_scaling_info_update_type_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_scaling_info_update_type_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_scaling_info_update_type_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_scaling_info_update_type_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_scaling_info_update_type_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_scaling_info_update_type_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_scaling_info_update_type_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_scaling_info_update_type_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_scaling_info_update_type_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_scaling_info_update_type_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @get_scaling_info_update_type(%struct.dc_surface_update* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_scaling_info_update_type_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
