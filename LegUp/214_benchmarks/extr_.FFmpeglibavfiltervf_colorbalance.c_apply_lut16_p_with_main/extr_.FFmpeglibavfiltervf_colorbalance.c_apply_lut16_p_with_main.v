//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:17 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module apply_lut16_p
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_ctx,
	arg_arg,
	arg_jobnr,
	arg_nb_jobs
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40 = 8'd40;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41 = 8'd41;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42 = 8'd42;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43 = 8'd43;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44 = 8'd44;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45 = 8'd45;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46 = 8'd46;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47 = 8'd47;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48 = 8'd48;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49 = 8'd49;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50 = 8'd50;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51 = 8'd51;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52 = 8'd52;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53 = 8'd53;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54 = 8'd54;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55 = 8'd55;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56 = 8'd56;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57 = 8'd57;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58 = 8'd58;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59 = 8'd59;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60 = 8'd60;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61 = 8'd61;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62 = 8'd62;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63 = 8'd63;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64 = 8'd64;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65 = 8'd65;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66 = 8'd66;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67 = 8'd67;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68 = 8'd68;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69 = 8'd69;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70 = 8'd70;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71 = 8'd71;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72 = 8'd72;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73 = 8'd73;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74 = 8'd74;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75 = 8'd75;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76 = 8'd76;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77 = 8'd77;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78 = 8'd78;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79 = 8'd79;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80 = 8'd80;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81 = 8'd81;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82 = 8'd82;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83 = 8'd83;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84 = 8'd84;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85 = 8'd85;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86 = 8'd86;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87 = 8'd87;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88 = 8'd88;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89 = 8'd89;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90 = 8'd90;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_91 = 8'd91;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__preheader_92 = 8'd92;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_93 = 8'd93;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_94 = 8'd94;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_95 = 8'd95;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_96 = 8'd96;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_97 = 8'd97;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98 = 8'd98;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99 = 8'd99;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100 = 8'd100;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101 = 8'd101;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102 = 8'd102;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103 = 8'd103;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104 = 8'd104;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105 = 8'd105;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106 = 8'd106;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107 = 8'd107;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108 = 8'd108;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109 = 8'd109;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110 = 8'd110;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111 = 8'd111;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112 = 8'd112;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113 = 8'd113;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114 = 8'd114;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115 = 8'd115;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116 = 8'd116;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117 = 8'd117;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118 = 8'd118;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119 = 8'd119;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120 = 8'd120;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121 = 8'd121;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122 = 8'd122;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123 = 8'd123;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124 = 8'd124;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125 = 8'd125;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126 = 8'd126;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127 = 8'd127;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128 = 8'd128;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129 = 8'd129;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130 = 8'd130;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131 = 8'd131;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132 = 8'd132;
parameter [7:0] LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133 = 8'd133;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_103_134 = 8'd134;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_103_135 = 8'd135;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_103_136 = 8'd136;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_103_137 = 8'd137;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_103_138 = 8'd138;
parameter [7:0] LEGUP_F_apply_lut16_p_BB_105_139 = 8'd139;
parameter [7:0] LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140 = 8'd140;
parameter [7:0] LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141 = 8'd141;
parameter [7:0] LEGUP_F_apply_lut16_p_BB___crit_edge_142 = 8'd142;
parameter [7:0] LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143 = 8'd143;
parameter [7:0] LEGUP_F_apply_lut16_p_BB___crit_edge27_144 = 8'd144;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ctx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_arg;
input [31:0] arg_jobnr;
input [31:0] arg_nb_jobs;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_6_reg;
reg [31:0] apply_lut16_p_0_7;
reg [31:0] apply_lut16_p_0_7_reg;
reg [31:0] apply_lut16_p_0_8;
reg [31:0] apply_lut16_p_0_8_reg;
reg [31:0] apply_lut16_p_0_9;
reg [31:0] apply_lut16_p_0_9_reg;
reg [31:0] apply_lut16_p_0_10;
reg [31:0] apply_lut16_p_0_10_reg;
reg [31:0] apply_lut16_p_0_11;
reg [31:0] apply_lut16_p_0_11_reg;
reg [31:0] apply_lut16_p_0_12;
reg [31:0] apply_lut16_p_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_0_20_reg;
reg  apply_lut16_p_0_21;
reg  apply_lut16_p_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_27_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_28;
reg [31:0] apply_lut16_p__preheader_lr_ph_28_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_29;
reg [31:0] apply_lut16_p__preheader_lr_ph_29_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_30;
reg [31:0] apply_lut16_p__preheader_lr_ph_30_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_31;
reg [31:0] apply_lut16_p__preheader_lr_ph_31_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_32;
reg [31:0] apply_lut16_p__preheader_lr_ph_32_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_33;
reg [31:0] apply_lut16_p__preheader_lr_ph_33_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_34;
reg [31:0] apply_lut16_p__preheader_lr_ph_34_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_35;
reg [31:0] apply_lut16_p__preheader_lr_ph_35_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_36;
reg [31:0] apply_lut16_p__preheader_lr_ph_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_37_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_38;
reg [31:0] apply_lut16_p__preheader_lr_ph_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_39_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_40;
reg [31:0] apply_lut16_p__preheader_lr_ph_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_41_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_42;
reg [31:0] apply_lut16_p__preheader_lr_ph_42_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_43;
reg [31:0] apply_lut16_p__preheader_lr_ph_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_44_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_45;
reg [31:0] apply_lut16_p__preheader_lr_ph_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_46_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_47;
reg [31:0] apply_lut16_p__preheader_lr_ph_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_48_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_49;
reg [31:0] apply_lut16_p__preheader_lr_ph_49_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_50;
reg [31:0] apply_lut16_p__preheader_lr_ph_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_51_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_52;
reg [31:0] apply_lut16_p__preheader_lr_ph_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_53_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_54;
reg [31:0] apply_lut16_p__preheader_lr_ph_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_55_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_56;
reg [31:0] apply_lut16_p__preheader_lr_ph_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_57_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_58;
reg [31:0] apply_lut16_p__preheader_lr_ph_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_59_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_60;
reg [31:0] apply_lut16_p__preheader_lr_ph_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_61_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_62;
reg [31:0] apply_lut16_p__preheader_lr_ph_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_63_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_64;
reg [31:0] apply_lut16_p__preheader_lr_ph_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_68_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_69;
reg [31:0] apply_lut16_p__preheader_lr_ph_69_reg;
reg  apply_lut16_p__preheader_lr_ph_70;
reg  apply_lut16_p__preheader_lr_ph_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__preheader_lr_ph_71_reg;
reg  apply_lut16_p__preheader_lr_ph_72;
reg  apply_lut16_p__preheader_lr_ph_72_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_73;
reg [31:0] apply_lut16_p__preheader_lr_ph_73_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_74;
reg [31:0] apply_lut16_p__preheader_lr_ph_74_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_75;
reg [31:0] apply_lut16_p__preheader_lr_ph_75_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_76;
reg [31:0] apply_lut16_p__preheader_lr_ph_76_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_77;
reg [31:0] apply_lut16_p__preheader_lr_ph_77_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_78;
reg [31:0] apply_lut16_p__preheader_lr_ph_78_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_79;
reg [31:0] apply_lut16_p__preheader_lr_ph_79_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_80;
reg [31:0] apply_lut16_p__preheader_lr_ph_80_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_tmp86;
reg [31:0] apply_lut16_p__preheader_lr_ph_tmp86_reg;
reg  apply_lut16_p__preheader_lr_ph_tmp;
reg  apply_lut16_p__preheader_lr_ph_tmp_reg;
reg [31:0] apply_lut16_p__preheader_lr_ph_smax;
reg [31:0] apply_lut16_p__preheader_lr_ph_smax_reg;
reg  apply_lut16_p__preheader_lr_ph_81;
reg  apply_lut16_p__preheader_lr_ph_81_reg;
reg [31:0] apply_lut16_p__preheader_indvar;
reg [31:0] apply_lut16_p__preheader_indvar_reg;
reg [31:0] apply_lut16_p__preheader_tmp88;
reg [31:0] apply_lut16_p__preheader_tmp88_reg;
reg [31:0] apply_lut16_p__preheader_tmp89;
reg [31:0] apply_lut16_p__preheader_tmp89_reg;
reg [31:0] apply_lut16_p__preheader_tmp92;
reg [31:0] apply_lut16_p__preheader_tmp92_reg;
reg [31:0] apply_lut16_p__preheader_tmp93;
reg [31:0] apply_lut16_p__preheader_tmp93_reg;
reg [31:0] apply_lut16_p__preheader_tmp96;
reg [31:0] apply_lut16_p__preheader_tmp96_reg;
reg [31:0] apply_lut16_p__preheader_tmp97;
reg [31:0] apply_lut16_p__preheader_tmp97_reg;
reg [31:0] apply_lut16_p__preheader_tmp100;
reg [31:0] apply_lut16_p__preheader_tmp100_reg;
reg [31:0] apply_lut16_p__preheader_tmp101;
reg [31:0] apply_lut16_p__preheader_tmp101_reg;
reg [31:0] apply_lut16_p__preheader_tmp104;
reg [31:0] apply_lut16_p__preheader_tmp104_reg;
reg [31:0] apply_lut16_p__preheader_tmp105;
reg [31:0] apply_lut16_p__preheader_tmp105_reg;
reg [31:0] apply_lut16_p__preheader_tmp108;
reg [31:0] apply_lut16_p__preheader_tmp108_reg;
reg [31:0] apply_lut16_p__preheader_tmp109;
reg [31:0] apply_lut16_p__preheader_tmp109_reg;
reg [31:0] apply_lut16_p__preheader_tmp112;
reg [31:0] apply_lut16_p__preheader_tmp112_reg;
reg [31:0] apply_lut16_p__preheader_tmp113;
reg [31:0] apply_lut16_p__preheader_tmp113_reg;
reg [31:0] apply_lut16_p__preheader_tmp116;
reg [31:0] apply_lut16_p__preheader_tmp116_reg;
reg [31:0] apply_lut16_p__preheader_tmp117;
reg [31:0] apply_lut16_p__preheader_tmp117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_83_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_j_01_us;
reg [31:0] apply_lut16_p__lr_ph_split_us_j_01_us_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp120;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep50_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp122;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep46_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp124;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep42_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp126;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep38_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp128;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep34_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp130;
reg [31:0] apply_lut16_p__lr_ph_split_us_tmp130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_scevgep_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_84;
reg [31:0] apply_lut16_p__lr_ph_split_us_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_85_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_86;
reg [31:0] apply_lut16_p__lr_ph_split_us_86_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_87;
reg [31:0] apply_lut16_p__lr_ph_split_us_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_88_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_89;
reg [31:0] apply_lut16_p__lr_ph_split_us_89_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_90;
reg [31:0] apply_lut16_p__lr_ph_split_us_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph_split_us_91_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_92;
reg [31:0] apply_lut16_p__lr_ph_split_us_92_reg;
reg [31:0] apply_lut16_p__lr_ph_split_us_93;
reg [31:0] apply_lut16_p__lr_ph_split_us_93_reg;
reg  apply_lut16_p__lr_ph_split_us_exitcond;
reg  apply_lut16_p__lr_ph_split_us_exitcond_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101_reg;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102;
reg [31:0] apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102_reg;
reg [31:0] apply_lut16_p_103_tmp94;
reg [31:0] apply_lut16_p_103_tmp94_reg;
reg [31:0] apply_lut16_p_103_tmp90;
reg [31:0] apply_lut16_p_103_tmp90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_103_scevgep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_103_scevgep81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_103_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_103_scevgep85_reg;
reg [31:0] apply_lut16_p_103_104;
reg [31:0] apply_lut16_p_103_104_reg;
reg [31:0] apply_lut16_p_105_106;
reg [31:0] apply_lut16_p_105_106_reg;
reg  apply_lut16_p_105_exitcond53;
reg  apply_lut16_p_105_exitcond53_reg;
reg [31:0] apply_lut16_p___crit_edge_indvar_next;
reg [31:0] apply_lut16_p___crit_edge_indvar_next_reg;
reg  apply_lut16_p___crit_edge_exitcond87;
reg  apply_lut16_p___crit_edge_exitcond87_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] apply_lut16_p_signed_divide_32_0_op0;
reg [31:0] apply_lut16_p_signed_divide_32_0_op1;
wire [31:0] lpm_divide_apply_lut16_p_0_9_temp_out;
wire [31:0] apply_lut16_p_0_9_unused;
reg  lpm_divide_apply_lut16_p_0_9_en;
reg [31:0] lpm_divide_apply_lut16_p_0_9_out;
reg [31:0] apply_lut16_p_signed_divide_32_0;
reg  lpm_mult_apply_lut16_p_0_8_en;
reg [31:0] apply_lut16_p_0_8_stage0_reg;
reg  lpm_mult_apply_lut16_p_0_11_en;
reg [31:0] apply_lut16_p_0_11_stage0_reg;
reg  lpm_divide_apply_lut16_p_0_12_en;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_36_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_36_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_38_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_38_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_40_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_40_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_42_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_42_stage0_reg;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_50_en;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_43_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_43_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_45_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_45_stage0_reg;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_52_en;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_47_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_47_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_lr_ph_49_en;
reg [31:0] apply_lut16_p__preheader_lr_ph_49_stage0_reg;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_54_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_56_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_58_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_60_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_62_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_64_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_73_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_74_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_75_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_76_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_77_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_78_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_79_en;
reg  lpm_divide_apply_lut16_p__preheader_lr_ph_80_en;
reg  lpm_mult_apply_lut16_p__preheader_tmp88_en;
reg [31:0] apply_lut16_p__preheader_tmp88_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp92_en;
reg [31:0] apply_lut16_p__preheader_tmp92_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp96_en;
reg [31:0] apply_lut16_p__preheader_tmp96_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp100_en;
reg [31:0] apply_lut16_p__preheader_tmp100_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp104_en;
reg [31:0] apply_lut16_p__preheader_tmp104_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp108_en;
reg [31:0] apply_lut16_p__preheader_tmp108_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp112_en;
reg [31:0] apply_lut16_p__preheader_tmp112_stage0_reg;
reg  lpm_mult_apply_lut16_p__preheader_tmp116_en;
reg [31:0] apply_lut16_p__preheader_tmp116_stage0_reg;

/*   %9 = sdiv i32 %8, %nb_jobs*/
lpm_divide lpm_divide_apply_lut16_p_0_9 (
	.quotient (lpm_divide_apply_lut16_p_0_9_temp_out),
	.remain (apply_lut16_p_0_9_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_apply_lut16_p_0_9_en),
	.numer (apply_lut16_p_signed_divide_32_0_op0),
	.denom (apply_lut16_p_signed_divide_32_0_op1)
);

defparam
	lpm_divide_apply_lut16_p_0_9.lpm_pipeline = 32,
	lpm_divide_apply_lut16_p_0_9.lpm_widthn = 32,
	lpm_divide_apply_lut16_p_0_9.lpm_widthd = 32,
	lpm_divide_apply_lut16_p_0_9.lpm_drepresentation = "SIGNED",
	lpm_divide_apply_lut16_p_0_9.lpm_nrepresentation = "SIGNED",
	lpm_divide_apply_lut16_p_0_9.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_0_21 == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_0_21 == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge27_144;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge27_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_91;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_91;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_92;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_92;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_70_reg == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_93;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_70_reg == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_93;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_94;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_94;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_95;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_95;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_96;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_96;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_97;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_97;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_97) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_72_reg == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_97) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_72_reg == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__lr_ph_split_us_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__lr_ph_split_us_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_81_reg == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_105_139;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_105_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_133) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__preheader_lr_ph_81_reg == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_134;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_134;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_135;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_135;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_136;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_136;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_137;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_137;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_138;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_103_138;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_103_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_103_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_105_139;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_105_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB_105_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB_105_139;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB_105_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB_105_139) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_105_exitcond53 == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB_105_139) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_105_exitcond53 == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_loopexit1_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p___crit_edge_exitcond87 == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p___crit_edge_exitcond87 == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB__preheader_91;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB__preheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_loopexit_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge27_144;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge27_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_apply_lut16_p_BB___crit_edge27_144;
if (reset == 1'b0 && ^(LEGUP_F_apply_lut16_p_BB___crit_edge27_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %1 = getelementptr inbounds i8* %arg, i32 4*/
begin
apply_lut16_p_0_1 = (arg_arg + (1 * 32'd4));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %1 = getelementptr inbounds i8* %arg, i32 4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
apply_lut16_p_0_1_reg <= apply_lut16_p_0_1;
if (reset == 1'b0 && ^(apply_lut16_p_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_1_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %2 = bitcast i8* %1 to %struct.TYPE_9__***/
begin
apply_lut16_p_0_2 = apply_lut16_p_0_1;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %2 = bitcast i8* %1 to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
apply_lut16_p_0_2_reg <= apply_lut16_p_0_2;
if (reset == 1'b0 && ^(apply_lut16_p_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_2_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
begin
apply_lut16_p_0_3 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
apply_lut16_p_0_3_reg <= apply_lut16_p_0_3;
if (reset == 1'b0 && ^(apply_lut16_p_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_3_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %4 = bitcast i8* %arg to %struct.TYPE_9__***/
begin
apply_lut16_p_0_4 = arg_arg;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %4 = bitcast i8* %arg to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
apply_lut16_p_0_4_reg <= apply_lut16_p_0_4;
if (reset == 1'b0 && ^(apply_lut16_p_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_4_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
begin
apply_lut16_p_0_5 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
apply_lut16_p_0_5_reg <= apply_lut16_p_0_5;
if (reset == 1'b0 && ^(apply_lut16_p_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_5_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
begin
apply_lut16_p_0_6 = apply_lut16_p_0_5;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
apply_lut16_p_0_6_reg <= apply_lut16_p_0_6;
if (reset == 1'b0 && ^(apply_lut16_p_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_6_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
begin
apply_lut16_p_0_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
apply_lut16_p_0_7_reg <= apply_lut16_p_0_7;
if (reset == 1'b0 && ^(apply_lut16_p_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_7_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p_0_8 = apply_lut16_p_0_8_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %8 = mul nsw i32 %7, %jobnr*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_8_reg <= apply_lut16_p_0_8;
if (reset == 1'b0 && ^(apply_lut16_p_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_8_reg"); $finish; end
end
/* apply_lut16_p: %0*/
/*   %8 = mul nsw i32 %7, %jobnr*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_8_reg <= apply_lut16_p_0_8;
if (reset == 1'b0 && ^(apply_lut16_p_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_8_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p_0_9 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %9 = sdiv i32 %8, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_38))
begin
apply_lut16_p_0_9_reg <= apply_lut16_p_0_9;
if (reset == 1'b0 && ^(apply_lut16_p_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_9_reg"); $finish; end
end
/* apply_lut16_p: %0*/
/*   %9 = sdiv i32 %8, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_38))
begin
apply_lut16_p_0_9_reg <= apply_lut16_p_0_9;
if (reset == 1'b0 && ^(apply_lut16_p_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_9_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %10 = add nsw i32 %jobnr, 1*/
begin
apply_lut16_p_0_10 = (arg_jobnr + 32'd1);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %10 = add nsw i32 %jobnr, 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
apply_lut16_p_0_10_reg <= apply_lut16_p_0_10;
if (reset == 1'b0 && ^(apply_lut16_p_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_10_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p_0_11 = apply_lut16_p_0_11_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %11 = mul nsw i32 %7, %10*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_11_reg <= apply_lut16_p_0_11;
if (reset == 1'b0 && ^(apply_lut16_p_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_11_reg"); $finish; end
end
/* apply_lut16_p: %0*/
/*   %11 = mul nsw i32 %7, %10*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_11_reg <= apply_lut16_p_0_11;
if (reset == 1'b0 && ^(apply_lut16_p_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_11_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p_0_12 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %12 = sdiv i32 %11, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_39))
begin
apply_lut16_p_0_12_reg <= apply_lut16_p_0_12;
if (reset == 1'b0 && ^(apply_lut16_p_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_12_reg"); $finish; end
end
/* apply_lut16_p: %0*/
/*   %12 = sdiv i32 %11, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_39))
begin
apply_lut16_p_0_12_reg <= apply_lut16_p_0_12;
if (reset == 1'b0 && ^(apply_lut16_p_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_12_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %13 = getelementptr inbounds %struct.TYPE_9__* %3, i32 0, i32 3*/
begin
apply_lut16_p_0_13 = (apply_lut16_p_0_3 + 12);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %13 = getelementptr inbounds %struct.TYPE_9__* %3, i32 0, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
apply_lut16_p_0_13_reg <= apply_lut16_p_0_13;
if (reset == 1'b0 && ^(apply_lut16_p_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_13_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
begin
apply_lut16_p_0_14 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_14_reg <= apply_lut16_p_0_14;
if (reset == 1'b0 && ^(apply_lut16_p_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_14_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %15 = getelementptr inbounds %struct.TYPE_9__* %3, i32 0, i32 1*/
begin
apply_lut16_p_0_15 = (apply_lut16_p_0_3 + 4);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %15 = getelementptr inbounds %struct.TYPE_9__* %3, i32 0, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
apply_lut16_p_0_15_reg <= apply_lut16_p_0_15;
if (reset == 1'b0 && ^(apply_lut16_p_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_15_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
begin
apply_lut16_p_0_16 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_0_16_reg <= apply_lut16_p_0_16;
if (reset == 1'b0 && ^(apply_lut16_p_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_16_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %17 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
begin
apply_lut16_p_0_17 = (apply_lut16_p_0_5 + 12);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %17 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
apply_lut16_p_0_17_reg <= apply_lut16_p_0_17;
if (reset == 1'b0 && ^(apply_lut16_p_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_17_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
begin
apply_lut16_p_0_18 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_7))
begin
apply_lut16_p_0_18_reg <= apply_lut16_p_0_18;
if (reset == 1'b0 && ^(apply_lut16_p_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_18_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %19 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
begin
apply_lut16_p_0_19 = (apply_lut16_p_0_5 + 4);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %19 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
apply_lut16_p_0_19_reg <= apply_lut16_p_0_19;
if (reset == 1'b0 && ^(apply_lut16_p_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_19_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
begin
apply_lut16_p_0_20 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_7))
begin
apply_lut16_p_0_20_reg <= apply_lut16_p_0_20;
if (reset == 1'b0 && ^(apply_lut16_p_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_20_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %21 = icmp slt i32 %9, %12*/
begin
apply_lut16_p_0_21 = ($signed(apply_lut16_p_0_9_reg) < $signed(apply_lut16_p_0_12));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %21 = icmp slt i32 %9, %12*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_39))
begin
apply_lut16_p_0_21_reg <= apply_lut16_p_0_21;
if (reset == 1'b0 && ^(apply_lut16_p_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_0_21_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %22 = getelementptr inbounds i32* %20, i32 3*/
begin
apply_lut16_p__preheader_lr_ph_22 = (apply_lut16_p_0_20_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %22 = getelementptr inbounds i32* %20, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_22_reg <= apply_lut16_p__preheader_lr_ph_22;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_22_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %23 = getelementptr inbounds i32* %20, i32 2*/
begin
apply_lut16_p__preheader_lr_ph_23 = (apply_lut16_p_0_20_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %23 = getelementptr inbounds i32* %20, i32 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_23_reg <= apply_lut16_p__preheader_lr_ph_23;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_23_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %24 = getelementptr inbounds i32* %20, i32 1*/
begin
apply_lut16_p__preheader_lr_ph_24 = (apply_lut16_p_0_20_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %24 = getelementptr inbounds i32* %20, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_24_reg <= apply_lut16_p__preheader_lr_ph_24;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_24_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %25 = getelementptr inbounds i32* %16, i32 3*/
begin
apply_lut16_p__preheader_lr_ph_25 = (apply_lut16_p_0_16_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %25 = getelementptr inbounds i32* %16, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_25_reg <= apply_lut16_p__preheader_lr_ph_25;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_25_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %26 = getelementptr inbounds i32* %16, i32 2*/
begin
apply_lut16_p__preheader_lr_ph_26 = (apply_lut16_p_0_16_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %26 = getelementptr inbounds i32* %16, i32 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_26_reg <= apply_lut16_p__preheader_lr_ph_26;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_26_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %27 = getelementptr inbounds i32* %16, i32 1*/
begin
apply_lut16_p__preheader_lr_ph_27 = (apply_lut16_p_0_16_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %27 = getelementptr inbounds i32* %16, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_27_reg <= apply_lut16_p__preheader_lr_ph_27;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_27_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
apply_lut16_p__preheader_lr_ph_28_reg <= apply_lut16_p__preheader_lr_ph_28;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_28_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_29 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
apply_lut16_p__preheader_lr_ph_29_reg <= apply_lut16_p__preheader_lr_ph_29;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_29_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_30_reg <= apply_lut16_p__preheader_lr_ph_30;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_30_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_31_reg <= apply_lut16_p__preheader_lr_ph_31;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_31_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_32_reg <= apply_lut16_p__preheader_lr_ph_32;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_32_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_33 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_33_reg <= apply_lut16_p__preheader_lr_ph_33;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_33_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_34 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_34_reg <= apply_lut16_p__preheader_lr_ph_34;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_34_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_35_reg <= apply_lut16_p__preheader_lr_ph_35;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_35_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_36 = apply_lut16_p__preheader_lr_ph_36_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %36 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_36_reg <= apply_lut16_p__preheader_lr_ph_36;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_36_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %36 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_36_reg <= apply_lut16_p__preheader_lr_ph_36;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_36_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %37 = getelementptr inbounds i32** %18, i32 3*/
begin
apply_lut16_p__preheader_lr_ph_37 = (apply_lut16_p_0_18_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %37 = getelementptr inbounds i32** %18, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_37_reg <= apply_lut16_p__preheader_lr_ph_37;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_37_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_38 = apply_lut16_p__preheader_lr_ph_38_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %38 = mul nsw i32 %29, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_38_reg <= apply_lut16_p__preheader_lr_ph_38;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_38_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %38 = mul nsw i32 %29, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p__preheader_lr_ph_38_reg <= apply_lut16_p__preheader_lr_ph_38;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_38_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %39 = getelementptr inbounds i32** %18, i32 2*/
begin
apply_lut16_p__preheader_lr_ph_39 = (apply_lut16_p_0_18_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %39 = getelementptr inbounds i32** %18, i32 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_39_reg <= apply_lut16_p__preheader_lr_ph_39;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_39_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_40 = apply_lut16_p__preheader_lr_ph_40_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %40 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_40_reg <= apply_lut16_p__preheader_lr_ph_40;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_40_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %40 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_40_reg <= apply_lut16_p__preheader_lr_ph_40;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_40_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %41 = getelementptr inbounds i32** %18, i32 1*/
begin
apply_lut16_p__preheader_lr_ph_41 = (apply_lut16_p_0_18_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %41 = getelementptr inbounds i32** %18, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_41_reg <= apply_lut16_p__preheader_lr_ph_41;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_41_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_42 = apply_lut16_p__preheader_lr_ph_42_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %42 = mul nsw i32 %31, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_42_reg <= apply_lut16_p__preheader_lr_ph_42;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_42_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %42 = mul nsw i32 %31, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p__preheader_lr_ph_42_reg <= apply_lut16_p__preheader_lr_ph_42;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_42_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_43 = apply_lut16_p__preheader_lr_ph_43_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %43 = mul nsw i32 %32, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_43_reg <= apply_lut16_p__preheader_lr_ph_43;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_43_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %43 = mul nsw i32 %32, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_43_reg <= apply_lut16_p__preheader_lr_ph_43;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_43_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %44 = getelementptr inbounds i32** %14, i32 3*/
begin
apply_lut16_p__preheader_lr_ph_44 = (apply_lut16_p_0_14_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %44 = getelementptr inbounds i32** %14, i32 3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_44_reg <= apply_lut16_p__preheader_lr_ph_44;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_44_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_45 = apply_lut16_p__preheader_lr_ph_45_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %45 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_45_reg <= apply_lut16_p__preheader_lr_ph_45;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_45_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %45 = mul nsw i32 %33, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p__preheader_lr_ph_45_reg <= apply_lut16_p__preheader_lr_ph_45;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_45_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %46 = getelementptr inbounds i32** %14, i32 2*/
begin
apply_lut16_p__preheader_lr_ph_46 = (apply_lut16_p_0_14_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %46 = getelementptr inbounds i32** %14, i32 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_46_reg <= apply_lut16_p__preheader_lr_ph_46;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_46_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_47 = apply_lut16_p__preheader_lr_ph_47_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %47 = mul nsw i32 %34, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_47_reg <= apply_lut16_p__preheader_lr_ph_47;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_47_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %47 = mul nsw i32 %34, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_47_reg <= apply_lut16_p__preheader_lr_ph_47;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_47_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %48 = getelementptr inbounds i32** %14, i32 1*/
begin
apply_lut16_p__preheader_lr_ph_48 = (apply_lut16_p_0_14_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %48 = getelementptr inbounds i32** %14, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_48_reg <= apply_lut16_p__preheader_lr_ph_48;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_48_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_49 = apply_lut16_p__preheader_lr_ph_49_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %49 = mul nsw i32 %35, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_49_reg <= apply_lut16_p__preheader_lr_ph_49;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_49_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %49 = mul nsw i32 %35, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_49_reg <= apply_lut16_p__preheader_lr_ph_49;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_49_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_50 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %50 = sdiv i32 %36, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75))
begin
apply_lut16_p__preheader_lr_ph_50_reg <= apply_lut16_p__preheader_lr_ph_50;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_50_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %50 = sdiv i32 %36, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_75))
begin
apply_lut16_p__preheader_lr_ph_50_reg <= apply_lut16_p__preheader_lr_ph_50;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_50_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_51 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
apply_lut16_p__preheader_lr_ph_51_reg <= apply_lut16_p__preheader_lr_ph_51;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_51_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_52 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %52 = sdiv i32 %38, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76))
begin
apply_lut16_p__preheader_lr_ph_52_reg <= apply_lut16_p__preheader_lr_ph_52;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_52_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %52 = sdiv i32 %38, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_76))
begin
apply_lut16_p__preheader_lr_ph_52_reg <= apply_lut16_p__preheader_lr_ph_52;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_52_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_53 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
apply_lut16_p__preheader_lr_ph_53_reg <= apply_lut16_p__preheader_lr_ph_53;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_53_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_54 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %54 = sdiv i32 %40, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77))
begin
apply_lut16_p__preheader_lr_ph_54_reg <= apply_lut16_p__preheader_lr_ph_54;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_54_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %54 = sdiv i32 %40, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_77))
begin
apply_lut16_p__preheader_lr_ph_54_reg <= apply_lut16_p__preheader_lr_ph_54;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_54_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_55 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
apply_lut16_p__preheader_lr_ph_55_reg <= apply_lut16_p__preheader_lr_ph_55;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_55_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_56 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %56 = sdiv i32 %42, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78))
begin
apply_lut16_p__preheader_lr_ph_56_reg <= apply_lut16_p__preheader_lr_ph_56;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_56_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %56 = sdiv i32 %42, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_78))
begin
apply_lut16_p__preheader_lr_ph_56_reg <= apply_lut16_p__preheader_lr_ph_56;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_56_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_57 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_57_reg <= apply_lut16_p__preheader_lr_ph_57;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_57_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_58 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %58 = sdiv i32 %43, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79))
begin
apply_lut16_p__preheader_lr_ph_58_reg <= apply_lut16_p__preheader_lr_ph_58;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_58_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %58 = sdiv i32 %43, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_79))
begin
apply_lut16_p__preheader_lr_ph_58_reg <= apply_lut16_p__preheader_lr_ph_58;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_58_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_59 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
apply_lut16_p__preheader_lr_ph_59_reg <= apply_lut16_p__preheader_lr_ph_59;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_59_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_60 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %60 = sdiv i32 %45, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80))
begin
apply_lut16_p__preheader_lr_ph_60_reg <= apply_lut16_p__preheader_lr_ph_60;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_60_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %60 = sdiv i32 %45, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_80))
begin
apply_lut16_p__preheader_lr_ph_60_reg <= apply_lut16_p__preheader_lr_ph_60;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_60_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_61 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49))
begin
apply_lut16_p__preheader_lr_ph_61_reg <= apply_lut16_p__preheader_lr_ph_61;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_61_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_62 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %62 = sdiv i32 %47, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81))
begin
apply_lut16_p__preheader_lr_ph_62_reg <= apply_lut16_p__preheader_lr_ph_62;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_62_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %62 = sdiv i32 %47, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_81))
begin
apply_lut16_p__preheader_lr_ph_62_reg <= apply_lut16_p__preheader_lr_ph_62;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_62_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_63 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49))
begin
apply_lut16_p__preheader_lr_ph_63_reg <= apply_lut16_p__preheader_lr_ph_63;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_63_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_64 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %64 = sdiv i32 %49, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82))
begin
apply_lut16_p__preheader_lr_ph_64_reg <= apply_lut16_p__preheader_lr_ph_64;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_64_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %64 = sdiv i32 %49, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_82))
begin
apply_lut16_p__preheader_lr_ph_64_reg <= apply_lut16_p__preheader_lr_ph_64;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_64_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_65 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p__preheader_lr_ph_65_reg <= apply_lut16_p__preheader_lr_ph_65;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_65_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %66 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
begin
apply_lut16_p__preheader_lr_ph_66 = arg_ctx;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %66 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_66_reg <= apply_lut16_p__preheader_lr_ph_66;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_66_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
begin
apply_lut16_p__preheader_lr_ph_67 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_67_reg <= apply_lut16_p__preheader_lr_ph_67;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_67_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %68 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
begin
apply_lut16_p__preheader_lr_ph_68 = (apply_lut16_p_0_5_reg + 8);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %68 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_68_reg <= apply_lut16_p__preheader_lr_ph_68;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_68_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
begin
apply_lut16_p__preheader_lr_ph_69 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_69_reg <= apply_lut16_p__preheader_lr_ph_69;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_69_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %70 = icmp sgt i32 %69, 0*/
begin
apply_lut16_p__preheader_lr_ph_70 = ($signed(apply_lut16_p__preheader_lr_ph_69) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %70 = icmp sgt i32 %69, 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_70_reg <= apply_lut16_p__preheader_lr_ph_70;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_70_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_8__* %67, i32 0, i32 0*/
begin
apply_lut16_p__preheader_lr_ph_71 = apply_lut16_p__preheader_lr_ph_67;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_8__* %67, i32 0, i32 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_71_reg <= apply_lut16_p__preheader_lr_ph_71;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_71_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %72 = icmp eq %struct.TYPE_9__* %3, %5*/
begin
apply_lut16_p__preheader_lr_ph_72 = (apply_lut16_p_0_3_reg == apply_lut16_p_0_5_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %72 = icmp eq %struct.TYPE_9__* %3, %5*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_72_reg <= apply_lut16_p__preheader_lr_ph_72;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_72_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_73 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %73 = sdiv i32 %35, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83))
begin
apply_lut16_p__preheader_lr_ph_73_reg <= apply_lut16_p__preheader_lr_ph_73;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_73_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %73 = sdiv i32 %35, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_83))
begin
apply_lut16_p__preheader_lr_ph_73_reg <= apply_lut16_p__preheader_lr_ph_73;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_73_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_74 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %74 = sdiv i32 %34, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84))
begin
apply_lut16_p__preheader_lr_ph_74_reg <= apply_lut16_p__preheader_lr_ph_74;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_74_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %74 = sdiv i32 %34, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_84))
begin
apply_lut16_p__preheader_lr_ph_74_reg <= apply_lut16_p__preheader_lr_ph_74;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_74_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_75 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %75 = sdiv i32 %33, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85))
begin
apply_lut16_p__preheader_lr_ph_75_reg <= apply_lut16_p__preheader_lr_ph_75;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_75_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %75 = sdiv i32 %33, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_85))
begin
apply_lut16_p__preheader_lr_ph_75_reg <= apply_lut16_p__preheader_lr_ph_75;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_75_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_76 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %76 = sdiv i32 %32, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86))
begin
apply_lut16_p__preheader_lr_ph_76_reg <= apply_lut16_p__preheader_lr_ph_76;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_76_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %76 = sdiv i32 %32, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_86))
begin
apply_lut16_p__preheader_lr_ph_76_reg <= apply_lut16_p__preheader_lr_ph_76;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_76_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_77 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %77 = sdiv i32 %31, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87))
begin
apply_lut16_p__preheader_lr_ph_77_reg <= apply_lut16_p__preheader_lr_ph_77;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_77_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %77 = sdiv i32 %31, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_87))
begin
apply_lut16_p__preheader_lr_ph_77_reg <= apply_lut16_p__preheader_lr_ph_77;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_77_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_78 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %78 = sdiv i32 %30, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88))
begin
apply_lut16_p__preheader_lr_ph_78_reg <= apply_lut16_p__preheader_lr_ph_78;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_78_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %78 = sdiv i32 %30, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_88))
begin
apply_lut16_p__preheader_lr_ph_78_reg <= apply_lut16_p__preheader_lr_ph_78;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_78_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_79 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %79 = sdiv i32 %29, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89))
begin
apply_lut16_p__preheader_lr_ph_79_reg <= apply_lut16_p__preheader_lr_ph_79;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_79_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %79 = sdiv i32 %29, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_89))
begin
apply_lut16_p__preheader_lr_ph_79_reg <= apply_lut16_p__preheader_lr_ph_79;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_79_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_lr_ph_80 = apply_lut16_p_signed_divide_32_0;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %80 = sdiv i32 %28, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90))
begin
apply_lut16_p__preheader_lr_ph_80_reg <= apply_lut16_p__preheader_lr_ph_80;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_80_reg"); $finish; end
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %80 = sdiv i32 %28, 2*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90))
begin
apply_lut16_p__preheader_lr_ph_80_reg <= apply_lut16_p__preheader_lr_ph_80;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_80_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %tmp86 = sub i32 %12, %9*/
begin
apply_lut16_p__preheader_lr_ph_tmp86 = (apply_lut16_p_0_12_reg - apply_lut16_p_0_9_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %tmp86 = sub i32 %12, %9*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
apply_lut16_p__preheader_lr_ph_tmp86_reg <= apply_lut16_p__preheader_lr_ph_tmp86;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_tmp86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_tmp86_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %tmp = icmp sgt i32 %69, 1*/
begin
apply_lut16_p__preheader_lr_ph_tmp = ($signed(apply_lut16_p__preheader_lr_ph_69) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %tmp = icmp sgt i32 %69, 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_tmp_reg <= apply_lut16_p__preheader_lr_ph_tmp;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %smax = select i1 %tmp, i32 %69, i32 1*/
begin
apply_lut16_p__preheader_lr_ph_smax = (apply_lut16_p__preheader_lr_ph_tmp ? apply_lut16_p__preheader_lr_ph_69 : 32'd1);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %smax = select i1 %tmp, i32 %69, i32 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p__preheader_lr_ph_smax_reg <= apply_lut16_p__preheader_lr_ph_smax;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_smax_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %81 = icmp eq i32 %28, 0*/
begin
apply_lut16_p__preheader_lr_ph_81 = (apply_lut16_p__preheader_lr_ph_28 == 32'd0);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %81 = icmp eq i32 %28, 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
apply_lut16_p__preheader_lr_ph_81_reg <= apply_lut16_p__preheader_lr_ph_81;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_lr_ph_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_lr_ph_81_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.lr.ph ], [ %indvar.next, %._crit_edge ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__preheader_indvar = 32'd0;
end
/* apply_lut16_p: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.lr.ph ], [ %indvar.next, %._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p___crit_edge_exitcond87 == 1'd0))) */
begin
apply_lut16_p__preheader_indvar = apply_lut16_p___crit_edge_indvar_next;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.lr.ph ], [ %indvar.next, %._crit_edge ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_90) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__preheader_indvar_reg <= apply_lut16_p__preheader_indvar;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_indvar_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.lr.ph ], [ %indvar.next, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p___crit_edge_exitcond87 == 1'd0)))
begin
apply_lut16_p__preheader_indvar_reg <= apply_lut16_p__preheader_indvar;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_indvar_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp88 = apply_lut16_p__preheader_tmp88_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp88 = mul i32 %80, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp88_reg <= apply_lut16_p__preheader_tmp88;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp88_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp88 = mul i32 %80, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp88_reg <= apply_lut16_p__preheader_tmp88;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp88_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp89 = add i32 %50, %tmp88*/
begin
apply_lut16_p__preheader_tmp89 = (apply_lut16_p__preheader_lr_ph_50_reg + apply_lut16_p__preheader_tmp88);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp89 = add i32 %50, %tmp88*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp89_reg <= apply_lut16_p__preheader_tmp89;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp89_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp92 = apply_lut16_p__preheader_tmp92_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp92 = mul i32 %76, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp92_reg <= apply_lut16_p__preheader_tmp92;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp92_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp92 = mul i32 %76, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp92_reg <= apply_lut16_p__preheader_tmp92;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp92_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp93 = add i32 %58, %tmp92*/
begin
apply_lut16_p__preheader_tmp93 = (apply_lut16_p__preheader_lr_ph_58_reg + apply_lut16_p__preheader_tmp92);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp93 = add i32 %58, %tmp92*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp93_reg <= apply_lut16_p__preheader_tmp93;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp93_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp96 = apply_lut16_p__preheader_tmp96_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp96 = mul i32 %79, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp96_reg <= apply_lut16_p__preheader_tmp96;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp96_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp96 = mul i32 %79, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp96_reg <= apply_lut16_p__preheader_tmp96;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp96_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp97 = add i32 %52, %tmp96*/
begin
apply_lut16_p__preheader_tmp97 = (apply_lut16_p__preheader_lr_ph_52_reg + apply_lut16_p__preheader_tmp96);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp97 = add i32 %52, %tmp96*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp97_reg <= apply_lut16_p__preheader_tmp97;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp97_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp100 = apply_lut16_p__preheader_tmp100_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp100 = mul i32 %75, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp100_reg <= apply_lut16_p__preheader_tmp100;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp100_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp100 = mul i32 %75, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp100_reg <= apply_lut16_p__preheader_tmp100;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp100_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp101 = add i32 %60, %tmp100*/
begin
apply_lut16_p__preheader_tmp101 = (apply_lut16_p__preheader_lr_ph_60_reg + apply_lut16_p__preheader_tmp100);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp101 = add i32 %60, %tmp100*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp101_reg <= apply_lut16_p__preheader_tmp101;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp101_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp104 = apply_lut16_p__preheader_tmp104_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp104 = mul i32 %78, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp104_reg <= apply_lut16_p__preheader_tmp104;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp104_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp104 = mul i32 %78, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp104_reg <= apply_lut16_p__preheader_tmp104;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp104_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp105 = add i32 %54, %tmp104*/
begin
apply_lut16_p__preheader_tmp105 = (apply_lut16_p__preheader_lr_ph_54_reg + apply_lut16_p__preheader_tmp104);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp105 = add i32 %54, %tmp104*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp105_reg <= apply_lut16_p__preheader_tmp105;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp105_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp108 = apply_lut16_p__preheader_tmp108_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp108 = mul i32 %74, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp108_reg <= apply_lut16_p__preheader_tmp108;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp108_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp108 = mul i32 %74, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp108_reg <= apply_lut16_p__preheader_tmp108;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp108_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp109 = add i32 %62, %tmp108*/
begin
apply_lut16_p__preheader_tmp109 = (apply_lut16_p__preheader_lr_ph_62_reg + apply_lut16_p__preheader_tmp108);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp109 = add i32 %62, %tmp108*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp109_reg <= apply_lut16_p__preheader_tmp109;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp109_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp112 = apply_lut16_p__preheader_tmp112_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp112 = mul i32 %77, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp112_reg <= apply_lut16_p__preheader_tmp112;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp112_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp112 = mul i32 %77, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp112_reg <= apply_lut16_p__preheader_tmp112;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp112_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp113 = add i32 %56, %tmp112*/
begin
apply_lut16_p__preheader_tmp113 = (apply_lut16_p__preheader_lr_ph_56_reg + apply_lut16_p__preheader_tmp112);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp113 = add i32 %56, %tmp112*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp113_reg <= apply_lut16_p__preheader_tmp113;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp113_reg"); $finish; end
end
end
always @(*) begin
apply_lut16_p__preheader_tmp116 = apply_lut16_p__preheader_tmp116_stage0_reg;
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp116 = mul i32 %73, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp116_reg <= apply_lut16_p__preheader_tmp116;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp116_reg"); $finish; end
end
/* apply_lut16_p: %.preheader*/
/*   %tmp116 = mul i32 %73, %indvar*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp116_reg <= apply_lut16_p__preheader_tmp116;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp116_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp117 = add i32 %64, %tmp116*/
begin
apply_lut16_p__preheader_tmp117 = (apply_lut16_p__preheader_lr_ph_64_reg + apply_lut16_p__preheader_tmp116);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp117 = add i32 %64, %tmp116*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_92))
begin
apply_lut16_p__preheader_tmp117_reg <= apply_lut16_p__preheader_tmp117;
if (reset == 1'b0 && ^(apply_lut16_p__preheader_tmp117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__preheader_tmp117_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
begin
apply_lut16_p__lr_ph_82 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95))
begin
apply_lut16_p__lr_ph_82_reg <= apply_lut16_p__lr_ph_82;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_82_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
begin
apply_lut16_p__lr_ph_83 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_97))
begin
apply_lut16_p__lr_ph_83_reg <= apply_lut16_p__lr_ph_83;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_83_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %j.01.us = phi i32 [ %93, %.lr.ph.split.us ], [ 0, %.lr.ph.split.us.preheader ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__lr_ph_split_us_j_01_us = 32'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %j.01.us = phi i32 [ %93, %.lr.ph.split.us ], [ 0, %.lr.ph.split.us.preheader ]*/
else /* if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__lr_ph_split_us_exitcond_reg == 1'd0))) */
begin
apply_lut16_p__lr_ph_split_us_j_01_us = apply_lut16_p__lr_ph_split_us_93_reg;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %j.01.us = phi i32 [ %93, %.lr.ph.split.us ], [ 0, %.lr.ph.split.us.preheader ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_preheader_98) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__lr_ph_split_us_j_01_us_reg <= apply_lut16_p__lr_ph_split_us_j_01_us;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_j_01_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_j_01_us_reg"); $finish; end
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %j.01.us = phi i32 [ %93, %.lr.ph.split.us ], [ 0, %.lr.ph.split.us.preheader ]*/
if ((((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_116) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p__lr_ph_split_us_exitcond_reg == 1'd0)))
begin
apply_lut16_p__lr_ph_split_us_j_01_us_reg <= apply_lut16_p__lr_ph_split_us_j_01_us;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_j_01_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_j_01_us_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp120 = add i32 %tmp117, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp120 = (apply_lut16_p__preheader_tmp117_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp120 = add i32 %tmp117, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp120_reg <= apply_lut16_p__lr_ph_split_us_tmp120;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp120_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep50 = getelementptr i32* %65, i32 %tmp120*/
begin
apply_lut16_p__lr_ph_split_us_scevgep50 = (apply_lut16_p__preheader_lr_ph_65_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp120_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep50 = getelementptr i32* %65, i32 %tmp120*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep50_reg <= apply_lut16_p__lr_ph_split_us_scevgep50;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp122 = add i32 %tmp113, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp122 = (apply_lut16_p__preheader_tmp113_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp122 = add i32 %tmp113, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp122_reg <= apply_lut16_p__lr_ph_split_us_tmp122;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp122_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep46 = getelementptr i32* %57, i32 %tmp122*/
begin
apply_lut16_p__lr_ph_split_us_scevgep46 = (apply_lut16_p__preheader_lr_ph_57_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp122_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep46 = getelementptr i32* %57, i32 %tmp122*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep46_reg <= apply_lut16_p__lr_ph_split_us_scevgep46;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp124 = add i32 %tmp109, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp124 = (apply_lut16_p__preheader_tmp109_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp124 = add i32 %tmp109, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp124_reg <= apply_lut16_p__lr_ph_split_us_tmp124;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp124_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep42 = getelementptr i32* %63, i32 %tmp124*/
begin
apply_lut16_p__lr_ph_split_us_scevgep42 = (apply_lut16_p__preheader_lr_ph_63_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp124_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep42 = getelementptr i32* %63, i32 %tmp124*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep42_reg <= apply_lut16_p__lr_ph_split_us_scevgep42;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep42_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp126 = add i32 %tmp105, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp126 = (apply_lut16_p__preheader_tmp105_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp126 = add i32 %tmp105, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp126_reg <= apply_lut16_p__lr_ph_split_us_tmp126;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep38 = getelementptr i32* %55, i32 %tmp126*/
begin
apply_lut16_p__lr_ph_split_us_scevgep38 = (apply_lut16_p__preheader_lr_ph_55_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp126_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep38 = getelementptr i32* %55, i32 %tmp126*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep38_reg <= apply_lut16_p__lr_ph_split_us_scevgep38;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep38_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp128 = add i32 %tmp101, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp128 = (apply_lut16_p__preheader_tmp101_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp128 = add i32 %tmp101, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp128_reg <= apply_lut16_p__lr_ph_split_us_tmp128;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp128_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep34 = getelementptr i32* %61, i32 %tmp128*/
begin
apply_lut16_p__lr_ph_split_us_scevgep34 = (apply_lut16_p__preheader_lr_ph_61_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp128_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep34 = getelementptr i32* %61, i32 %tmp128*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep34_reg <= apply_lut16_p__lr_ph_split_us_scevgep34;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp130 = add i32 %tmp97, %j.01.us*/
begin
apply_lut16_p__lr_ph_split_us_tmp130 = (apply_lut16_p__preheader_tmp97_reg + apply_lut16_p__lr_ph_split_us_j_01_us_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %tmp130 = add i32 %tmp97, %j.01.us*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_tmp130_reg <= apply_lut16_p__lr_ph_split_us_tmp130;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep = getelementptr i32* %53, i32 %tmp130*/
begin
apply_lut16_p__lr_ph_split_us_scevgep = (apply_lut16_p__preheader_lr_ph_53_reg + (4 * apply_lut16_p__lr_ph_split_us_tmp130_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %scevgep = getelementptr i32* %53, i32 %tmp130*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
apply_lut16_p__lr_ph_split_us_scevgep_reg <= apply_lut16_p__lr_ph_split_us_scevgep;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_84 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
apply_lut16_p__lr_ph_split_us_84_reg <= apply_lut16_p__lr_ph_split_us_84;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_84_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %85 = getelementptr inbounds i32* %83, i32 %84*/
begin
apply_lut16_p__lr_ph_split_us_85 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph_split_us_84));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %85 = getelementptr inbounds i32* %83, i32 %84*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
apply_lut16_p__lr_ph_split_us_85_reg <= apply_lut16_p__lr_ph_split_us_85;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_85_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_86 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
apply_lut16_p__lr_ph_split_us_86_reg <= apply_lut16_p__lr_ph_split_us_86;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_86_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_87 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
apply_lut16_p__lr_ph_split_us_87_reg <= apply_lut16_p__lr_ph_split_us_87;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_87_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %88 = getelementptr inbounds i32* %83, i32 %87*/
begin
apply_lut16_p__lr_ph_split_us_88 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph_split_us_87));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %88 = getelementptr inbounds i32* %83, i32 %87*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
apply_lut16_p__lr_ph_split_us_88_reg <= apply_lut16_p__lr_ph_split_us_88;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_88_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_89 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
apply_lut16_p__lr_ph_split_us_89_reg <= apply_lut16_p__lr_ph_split_us_89;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_89_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_90 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
apply_lut16_p__lr_ph_split_us_90_reg <= apply_lut16_p__lr_ph_split_us_90;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_90_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %91 = getelementptr inbounds i32* %83, i32 %90*/
begin
apply_lut16_p__lr_ph_split_us_91 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph_split_us_90));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %91 = getelementptr inbounds i32* %83, i32 %90*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
apply_lut16_p__lr_ph_split_us_91_reg <= apply_lut16_p__lr_ph_split_us_91;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_91_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph_split_us_92 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
apply_lut16_p__lr_ph_split_us_92_reg <= apply_lut16_p__lr_ph_split_us_92;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_92_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %93 = add nsw i32 %j.01.us, 1*/
begin
apply_lut16_p__lr_ph_split_us_93 = (apply_lut16_p__lr_ph_split_us_j_01_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %93 = add nsw i32 %j.01.us, 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_93_reg <= apply_lut16_p__lr_ph_split_us_93;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_93_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %exitcond = icmp eq i32 %93, %smax*/
begin
apply_lut16_p__lr_ph_split_us_exitcond = (apply_lut16_p__lr_ph_split_us_93 == apply_lut16_p__preheader_lr_ph_smax_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %exitcond = icmp eq i32 %93, %smax*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_100))
begin
apply_lut16_p__lr_ph_split_us_exitcond_reg <= apply_lut16_p__lr_ph_split_us_exitcond;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph_split_us_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph_split_us_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %j.01 = phi i32 [ %106, %105 ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01 = 32'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %j.01 = phi i32 [ %106, %105 ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
else /* if ((((cur_state == LEGUP_F_apply_lut16_p_BB_105_139) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_105_exitcond53 == 1'd0))) */
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01 = apply_lut16_p_105_106;
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %j.01 = phi i32 [ %106, %105 ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
if (((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_preheader_99) & (memory_controller_waitrequest == 1'd0)))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg"); $finish; end
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %j.01 = phi i32 [ %106, %105 ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
if ((((cur_state == LEGUP_F_apply_lut16_p_BB_105_139) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_105_exitcond53 == 1'd0)))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp98 = add i32 %tmp97, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98 = (apply_lut16_p__preheader_tmp97_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp98 = add i32 %tmp97, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep77 = getelementptr i32* %53, i32 %tmp98*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77 = (apply_lut16_p__preheader_lr_ph_53_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp98_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep77 = getelementptr i32* %53, i32 %tmp98*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp102 = add i32 %tmp101, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102 = (apply_lut16_p__preheader_tmp101_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp102 = add i32 %tmp101, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep73 = getelementptr i32* %61, i32 %tmp102*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73 = (apply_lut16_p__preheader_lr_ph_61_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp102_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep73 = getelementptr i32* %61, i32 %tmp102*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp106 = add i32 %tmp105, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106 = (apply_lut16_p__preheader_tmp105_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp106 = add i32 %tmp105, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep69 = getelementptr i32* %55, i32 %tmp106*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69 = (apply_lut16_p__preheader_lr_ph_55_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp106_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep69 = getelementptr i32* %55, i32 %tmp106*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp110 = add i32 %tmp109, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110 = (apply_lut16_p__preheader_tmp109_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp110 = add i32 %tmp109, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep65 = getelementptr i32* %63, i32 %tmp110*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65 = (apply_lut16_p__preheader_lr_ph_63_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp110_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep65 = getelementptr i32* %63, i32 %tmp110*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp114 = add i32 %tmp113, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114 = (apply_lut16_p__preheader_tmp113_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp114 = add i32 %tmp113, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep61 = getelementptr i32* %57, i32 %tmp114*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61 = (apply_lut16_p__preheader_lr_ph_57_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp114_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep61 = getelementptr i32* %57, i32 %tmp114*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp118 = add i32 %tmp117, %j.01*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118 = (apply_lut16_p__preheader_tmp117_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %tmp118 = add i32 %tmp117, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_117))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep57 = getelementptr i32* %65, i32 %tmp118*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57 = (apply_lut16_p__preheader_lr_ph_65_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_tmp118_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %scevgep57 = getelementptr i32* %65, i32 %tmp118*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %95 = getelementptr inbounds i32* %83, i32 %94*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_94));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %95 = getelementptr inbounds i32* %83, i32 %94*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %98 = getelementptr inbounds i32* %83, i32 %97*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_97));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %98 = getelementptr inbounds i32* %83, i32 %97*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %101 = getelementptr inbounds i32* %83, i32 %100*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101 = (apply_lut16_p__lr_ph_83_reg + (4 * apply_lut16_p__lr_ph__lr_ph_split_crit_edge_100));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %101 = getelementptr inbounds i32* %83, i32 %100*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102_reg <= apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102;
if (reset == 1'b0 && ^(apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %103*/
/*   %tmp94 = add i32 %tmp93, %j.01*/
begin
apply_lut16_p_103_tmp94 = (apply_lut16_p__preheader_tmp93_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %103*/
/*   %tmp94 = add i32 %tmp93, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_134))
begin
apply_lut16_p_103_tmp94_reg <= apply_lut16_p_103_tmp94;
if (reset == 1'b0 && ^(apply_lut16_p_103_tmp94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_103_tmp94_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %103*/
/*   %tmp90 = add i32 %tmp89, %j.01*/
begin
apply_lut16_p_103_tmp90 = (apply_lut16_p__preheader_tmp89_reg + apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %103*/
/*   %tmp90 = add i32 %tmp89, %j.01*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_134))
begin
apply_lut16_p_103_tmp90_reg <= apply_lut16_p_103_tmp90;
if (reset == 1'b0 && ^(apply_lut16_p_103_tmp90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_103_tmp90_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %103*/
/*   %scevgep81 = getelementptr i32* %59, i32 %tmp94*/
begin
apply_lut16_p_103_scevgep81 = (apply_lut16_p__preheader_lr_ph_59_reg + (4 * apply_lut16_p_103_tmp94_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %103*/
/*   %scevgep81 = getelementptr i32* %59, i32 %tmp94*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
apply_lut16_p_103_scevgep81_reg <= apply_lut16_p_103_scevgep81;
if (reset == 1'b0 && ^(apply_lut16_p_103_scevgep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_103_scevgep81_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %103*/
/*   %scevgep85 = getelementptr i32* %51, i32 %tmp90*/
begin
apply_lut16_p_103_scevgep85 = (apply_lut16_p__preheader_lr_ph_51_reg + (4 * apply_lut16_p_103_tmp90_reg));
end
end
always @(posedge clk) begin
/* apply_lut16_p: %103*/
/*   %scevgep85 = getelementptr i32* %51, i32 %tmp90*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
apply_lut16_p_103_scevgep85_reg <= apply_lut16_p_103_scevgep85;
if (reset == 1'b0 && ^(apply_lut16_p_103_scevgep85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_103_scevgep85_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
begin
apply_lut16_p_103_104 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
apply_lut16_p_103_104_reg <= apply_lut16_p_103_104;
if (reset == 1'b0 && ^(apply_lut16_p_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_103_104_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %105*/
/*   %106 = add nsw i32 %j.01, 1*/
begin
apply_lut16_p_105_106 = (apply_lut16_p__lr_ph__lr_ph_split_crit_edge_j_01_reg + 32'd1);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %105*/
/*   %106 = add nsw i32 %j.01, 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_105_139))
begin
apply_lut16_p_105_106_reg <= apply_lut16_p_105_106;
if (reset == 1'b0 && ^(apply_lut16_p_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_105_106_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %105*/
/*   %exitcond53 = icmp eq i32 %106, %smax*/
begin
apply_lut16_p_105_exitcond53 = (apply_lut16_p_105_106 == apply_lut16_p__preheader_lr_ph_smax_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %105*/
/*   %exitcond53 = icmp eq i32 %106, %smax*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_105_139))
begin
apply_lut16_p_105_exitcond53_reg <= apply_lut16_p_105_exitcond53;
if (reset == 1'b0 && ^(apply_lut16_p_105_exitcond53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_105_exitcond53_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %._crit_edge*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
apply_lut16_p___crit_edge_indvar_next = (apply_lut16_p__preheader_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %._crit_edge*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142))
begin
apply_lut16_p___crit_edge_indvar_next_reg <= apply_lut16_p___crit_edge_indvar_next;
if (reset == 1'b0 && ^(apply_lut16_p___crit_edge_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p___crit_edge_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %._crit_edge*/
/*   %exitcond87 = icmp eq i32 %indvar.next, %tmp86*/
begin
apply_lut16_p___crit_edge_exitcond87 = (apply_lut16_p___crit_edge_indvar_next == apply_lut16_p__preheader_lr_ph_tmp86_reg);
end
end
always @(posedge clk) begin
/* apply_lut16_p: %._crit_edge*/
/*   %exitcond87 = icmp eq i32 %indvar.next, %tmp86*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge_142))
begin
apply_lut16_p___crit_edge_exitcond87_reg <= apply_lut16_p___crit_edge_exitcond87;
if (reset == 1'b0 && ^(apply_lut16_p___crit_edge_exitcond87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p___crit_edge_exitcond87_reg"); $finish; end
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %9 = sdiv i32 %8, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p_0_8;
end
/* apply_lut16_p: %0*/
/*   %12 = sdiv i32 %11, %nb_jobs*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_7))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p_0_11_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %50 = sdiv i32 %36, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_36;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %52 = sdiv i32 %38, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_38_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %54 = sdiv i32 %40, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_40_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %56 = sdiv i32 %42, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_42_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %58 = sdiv i32 %43, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_43_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %60 = sdiv i32 %45, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_45_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %62 = sdiv i32 %47, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_47_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %64 = sdiv i32 %49, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_49_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %73 = sdiv i32 %35, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_35_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %74 = sdiv i32 %34, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_34_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %75 = sdiv i32 %33, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_33_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %76 = sdiv i32 %32, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_32_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %77 = sdiv i32 %31, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_31_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %78 = sdiv i32 %30, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_30_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %79 = sdiv i32 %29, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57))
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_29_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %80 = sdiv i32 %28, 2*/
else /* if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58)) */
begin
apply_lut16_p_signed_divide_32_0_op0 = apply_lut16_p__preheader_lr_ph_28_reg;
end
end
always @(*) begin
/* apply_lut16_p: %0*/
/*   %9 = sdiv i32 %8, %nb_jobs*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_6))
begin
apply_lut16_p_signed_divide_32_0_op1 = arg_nb_jobs;
end
/* apply_lut16_p: %0*/
/*   %12 = sdiv i32 %11, %nb_jobs*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_7))
begin
apply_lut16_p_signed_divide_32_0_op1 = arg_nb_jobs;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %50 = sdiv i32 %36, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %52 = sdiv i32 %38, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %54 = sdiv i32 %40, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %56 = sdiv i32 %42, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %58 = sdiv i32 %43, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %60 = sdiv i32 %45, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %62 = sdiv i32 %47, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_49))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %64 = sdiv i32 %49, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_50))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %73 = sdiv i32 %35, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_51))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %74 = sdiv i32 %34, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_52))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %75 = sdiv i32 %33, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_53))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %76 = sdiv i32 %32, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_54))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %77 = sdiv i32 %31, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_55))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %78 = sdiv i32 %30, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_56))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %79 = sdiv i32 %29, 2*/
else if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_57))
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %80 = sdiv i32 %28, 2*/
else /* if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_58)) */
begin
apply_lut16_p_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_apply_lut16_p_0_9_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p_0_9_out = lpm_divide_apply_lut16_p_0_9_temp_out;
end
always @(*) begin
apply_lut16_p_signed_divide_32_0 = lpm_divide_apply_lut16_p_0_9_out;
end
always @(*) begin
lpm_mult_apply_lut16_p_0_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %8 = mul nsw i32 %7, %jobnr*/
if ((lpm_mult_apply_lut16_p_0_8_en == 1'd1))
begin
apply_lut16_p_0_8_stage0_reg <= (apply_lut16_p_0_7 * arg_jobnr);
end
end
always @(*) begin
lpm_mult_apply_lut16_p_0_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %0*/
/*   %11 = mul nsw i32 %7, %10*/
if ((lpm_mult_apply_lut16_p_0_11_en == 1'd1))
begin
apply_lut16_p_0_11_stage0_reg <= (apply_lut16_p_0_7 * apply_lut16_p_0_10_reg);
end
end
always @(*) begin
lpm_divide_apply_lut16_p_0_12_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %36 = mul nsw i32 %28, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_36_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_36_stage0_reg <= (apply_lut16_p__preheader_lr_ph_28 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %38 = mul nsw i32 %29, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_38_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_38_stage0_reg <= (apply_lut16_p__preheader_lr_ph_29 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %40 = mul nsw i32 %30, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_40_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_40_stage0_reg <= (apply_lut16_p__preheader_lr_ph_30 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %42 = mul nsw i32 %31, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_42_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_42_stage0_reg <= (apply_lut16_p__preheader_lr_ph_31 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %43 = mul nsw i32 %32, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_43_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_43_stage0_reg <= (apply_lut16_p__preheader_lr_ph_32 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %45 = mul nsw i32 %33, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_45_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_45_stage0_reg <= (apply_lut16_p__preheader_lr_ph_33 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_47_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %47 = mul nsw i32 %34, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_47_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_47_stage0_reg <= (apply_lut16_p__preheader_lr_ph_34 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_lr_ph_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %49 = mul nsw i32 %35, %9*/
if ((lpm_mult_apply_lut16_p__preheader_lr_ph_49_en == 1'd1))
begin
apply_lut16_p__preheader_lr_ph_49_stage0_reg <= (apply_lut16_p__preheader_lr_ph_35 * apply_lut16_p_0_9_reg);
end
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_apply_lut16_p__preheader_lr_ph_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp88_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp88 = mul i32 %80, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp88_en == 1'd1))
begin
apply_lut16_p__preheader_tmp88_stage0_reg <= (apply_lut16_p__preheader_lr_ph_80_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp92_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp92 = mul i32 %76, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp92_en == 1'd1))
begin
apply_lut16_p__preheader_tmp92_stage0_reg <= (apply_lut16_p__preheader_lr_ph_76_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp96 = mul i32 %79, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp96_en == 1'd1))
begin
apply_lut16_p__preheader_tmp96_stage0_reg <= (apply_lut16_p__preheader_lr_ph_79_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp100_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp100 = mul i32 %75, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp100_en == 1'd1))
begin
apply_lut16_p__preheader_tmp100_stage0_reg <= (apply_lut16_p__preheader_lr_ph_75_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp104_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp104 = mul i32 %78, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp104_en == 1'd1))
begin
apply_lut16_p__preheader_tmp104_stage0_reg <= (apply_lut16_p__preheader_lr_ph_78_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp108_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp108 = mul i32 %74, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp108_en == 1'd1))
begin
apply_lut16_p__preheader_tmp108_stage0_reg <= (apply_lut16_p__preheader_lr_ph_74_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp112 = mul i32 %77, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp112_en == 1'd1))
begin
apply_lut16_p__preheader_tmp112_stage0_reg <= (apply_lut16_p__preheader_lr_ph_77_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(*) begin
lpm_mult_apply_lut16_p__preheader_tmp116_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* apply_lut16_p: %.preheader*/
/*   %tmp116 = mul i32 %73, %indvar*/
if ((lpm_mult_apply_lut16_p__preheader_tmp116_en == 1'd1))
begin
apply_lut16_p__preheader_tmp116_stage0_reg <= (apply_lut16_p__preheader_lr_ph_73_reg * apply_lut16_p__preheader_indvar_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* apply_lut16_p: %._crit_edge27*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_144))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
memory_controller_enable_a = 1'd1;
end
/* apply_lut16_p: %103*/
/*   store i32 %104, i32* %scevgep85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
memory_controller_address_a = apply_lut16_p_0_4;
end
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
memory_controller_address_a = apply_lut16_p_0_6;
end
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_address_a = apply_lut16_p_0_13;
end
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_address_a = apply_lut16_p_0_17_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_22;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_24_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_25_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_27_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_address_a = apply_lut16_p_0_18_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_37_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_41_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_46_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_address_a = apply_lut16_p__preheader_lr_ph_66_reg;
end
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_82;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_split_us_85;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_split_us_scevgep42_reg;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_split_us_88;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_split_us_scevgep34_reg;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
memory_controller_address_a = apply_lut16_p__lr_ph_split_us_91;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep57;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_95;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep65_reg;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_98;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep73_reg;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
memory_controller_address_a = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_101;
end
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
memory_controller_address_a = apply_lut16_p_103_scevgep81;
end
/* apply_lut16_p: %103*/
/*   store i32 %104, i32* %scevgep85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
memory_controller_address_a = apply_lut16_p_103_scevgep85_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
memory_controller_write_enable_a = 1'd0;
end
/* apply_lut16_p: %103*/
/*   store i32 %104, i32* %scevgep85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* apply_lut16_p: %103*/
/*   store i32 %104, i32* %scevgep85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
memory_controller_in_a = apply_lut16_p_103_104;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %0*/
/*   %14 = load i32*** %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %0*/
/*   %18 = load i32*** %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %28 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %30 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %32 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %34 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %57 = load i32** %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %51 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %55 = load i32** %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %61 = load i32** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %67 = load %struct.TYPE_8__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph*/
/*   %83 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_95))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %86 = load i32* %85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_103))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %87 = load i32* %scevgep42, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_106))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %89 = load i32* %88, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_108))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %90 = load i32* %scevgep34, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_111))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %92 = load i32* %91, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_113))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %94 = load i32* %scevgep57, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_118))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_120))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %97 = load i32* %scevgep65, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_123))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_125))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %100 = load i32* %scevgep73, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_128))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_130))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %103*/
/*   %104 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_135))
begin
memory_controller_size_a = 2'd2;
end
/* apply_lut16_p: %103*/
/*   store i32 %104, i32* %scevgep85, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_103_137))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %86, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %89, i32* %scevgep38, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %92, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %96, i32* %scevgep61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %99, i32* %scevgep69, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
memory_controller_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %102, i32* %scevgep77, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_2))
begin
memory_controller_address_b = apply_lut16_p_0_2_reg;
end
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_address_b = apply_lut16_p_0_15;
end
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_address_b = apply_lut16_p_0_19_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_23;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_address_b = apply_lut16_p_0_20_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_26_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_address_b = apply_lut16_p_0_16_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_address_b = apply_lut16_p_0_14_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_39_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_44_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_48_reg;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_68_reg;
end
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93))
begin
memory_controller_address_b = apply_lut16_p__preheader_lr_ph_71_reg;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
memory_controller_address_b = apply_lut16_p__lr_ph_split_us_scevgep50;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %86, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
memory_controller_address_b = apply_lut16_p__lr_ph_split_us_scevgep46_reg;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %89, i32* %scevgep38, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
memory_controller_address_b = apply_lut16_p__lr_ph_split_us_scevgep38_reg;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %92, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
memory_controller_address_b = apply_lut16_p__lr_ph_split_us_scevgep_reg;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %96, i32* %scevgep61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
memory_controller_address_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep61_reg;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %99, i32* %scevgep69, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
memory_controller_address_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep69_reg;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %102, i32* %scevgep77, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
memory_controller_address_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_scevgep77_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %86, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
memory_controller_write_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %89, i32* %scevgep38, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
memory_controller_write_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %92, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
memory_controller_write_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %96, i32* %scevgep61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
memory_controller_write_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %99, i32* %scevgep69, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
memory_controller_write_enable_b = 1'd1;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %102, i32* %scevgep77, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %86, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
memory_controller_in_b = apply_lut16_p__lr_ph_split_us_86;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %89, i32* %scevgep38, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
memory_controller_in_b = apply_lut16_p__lr_ph_split_us_89;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %92, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
memory_controller_in_b = apply_lut16_p__lr_ph_split_us_92;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %96, i32* %scevgep61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
memory_controller_in_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_96;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %99, i32* %scevgep69, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
memory_controller_in_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_99;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %102, i32* %scevgep77, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
memory_controller_in_b = apply_lut16_p__lr_ph__lr_ph_split_crit_edge_102;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* apply_lut16_p: %0*/
/*   %3 = load %struct.TYPE_9__** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %0*/
/*   %16 = load i32** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %0*/
/*   %20 = load i32** %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %29 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_40))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %31 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_41))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %33 = load i32* %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_42))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %35 = load i32* %16, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_43))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %65 = load i32** %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_44))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %53 = load i32** %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_45))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %59 = load i32** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_46))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %63 = load i32** %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_47))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.preheader.lr.ph*/
/*   %69 = load i32* %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__preheader_lr_ph_48))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph*/
/*   %82 = load i32*** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_93))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   %84 = load i32* %scevgep50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_101))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %86, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_105))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %89, i32* %scevgep38, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_110))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph.split.us*/
/*   store i32 %92, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph_split_us_115))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %96, i32* %scevgep61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_122))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %99, i32* %scevgep69, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_127))
begin
memory_controller_size_b = 2'd2;
end
/* apply_lut16_p: %.lr.ph..lr.ph.split_crit_edge*/
/*   store i32 %102, i32* %scevgep77, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB__lr_ph__lr_ph_split_crit_edge_132))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* apply_lut16_p: %._crit_edge27*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_apply_lut16_p_BB___crit_edge27_144))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  apply_lut16_p_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_arg_ctx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_arg_arg;
reg [31:0] apply_lut16_p_arg_jobnr;
reg [31:0] apply_lut16_p_arg_nb_jobs;
wire  apply_lut16_p_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_memory_controller_address_a;
wire  apply_lut16_p_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] apply_lut16_p_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] apply_lut16_p_memory_controller_out_a;
wire [1:0] apply_lut16_p_memory_controller_size_a;
wire  apply_lut16_p_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] apply_lut16_p_memory_controller_address_b;
wire  apply_lut16_p_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] apply_lut16_p_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] apply_lut16_p_memory_controller_out_b;
wire [1:0] apply_lut16_p_memory_controller_size_b;
reg  apply_lut16_p_memory_controller_waitrequest;
wire  apply_lut16_p_finish;
reg  apply_lut16_p_finish_final;
wire [31:0] apply_lut16_p_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


apply_lut16_p apply_lut16_p_inst (
	.memory_controller_enable_a (apply_lut16_p_memory_controller_enable_a),
	.memory_controller_address_a (apply_lut16_p_memory_controller_address_a),
	.memory_controller_write_enable_a (apply_lut16_p_memory_controller_write_enable_a),
	.memory_controller_in_a (apply_lut16_p_memory_controller_in_a),
	.memory_controller_size_a (apply_lut16_p_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (apply_lut16_p_memory_controller_enable_b),
	.memory_controller_address_b (apply_lut16_p_memory_controller_address_b),
	.memory_controller_write_enable_b (apply_lut16_p_memory_controller_write_enable_b),
	.memory_controller_in_b (apply_lut16_p_memory_controller_in_b),
	.memory_controller_size_b (apply_lut16_p_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (apply_lut16_p_start),
	.finish (apply_lut16_p_finish),
	.return_val (apply_lut16_p_return_val),
	.arg_ctx (apply_lut16_p_arg_ctx),
	.arg_arg (apply_lut16_p_arg_arg),
	.arg_jobnr (apply_lut16_p_arg_jobnr),
	.arg_nb_jobs (apply_lut16_p_arg_nb_jobs)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (apply_lut16_p_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
main_0_1 = apply_lut16_p_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
apply_lut16_p_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
apply_lut16_p_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
apply_lut16_p_arg_ctx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_arg_ctx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
apply_lut16_p_arg_arg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_arg_arg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
apply_lut16_p_arg_jobnr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_arg_jobnr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
apply_lut16_p_arg_nb_jobs <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to apply_lut16_p_arg_nb_jobs"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
apply_lut16_p_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
apply_lut16_p_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
apply_lut16_p_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
apply_lut16_p_finish_final = apply_lut16_p_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = apply_lut16_p_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = apply_lut16_p_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = apply_lut16_p_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = apply_lut16_p_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = apply_lut16_p_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = apply_lut16_p_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = apply_lut16_p_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = apply_lut16_p_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = apply_lut16_p_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = apply_lut16_p_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = apply_lut16_p_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = apply_lut16_p_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = apply_lut16_p_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = apply_lut16_p_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = apply_lut16_p_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = apply_lut16_p_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = apply_lut16_p_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = apply_lut16_p_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = apply_lut16_p_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @apply_lut16_p(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = apply_lut16_p_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
