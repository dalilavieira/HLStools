//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:09 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module chi_to_channel
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_chi,
	arg_pchannelmap
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_chi_to_channel_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_chi_to_channel_BB_2_2 = 7'd2;
parameter [6:0] LEGUP_F_chi_to_channel_BB_2_3 = 7'd3;
parameter [6:0] LEGUP_F_chi_to_channel_BB_3_4 = 7'd4;
parameter [6:0] LEGUP_F_chi_to_channel_BB_3_5 = 7'd5;
parameter [6:0] LEGUP_F_chi_to_channel_BB_3_6 = 7'd6;
parameter [6:0] LEGUP_F_chi_to_channel_BB_6_7 = 7'd7;
parameter [6:0] LEGUP_F_chi_to_channel_BB_6_8 = 7'd8;
parameter [6:0] LEGUP_F_chi_to_channel_BB_6_9 = 7'd9;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader13_preheader_10 = 7'd10;
parameter [6:0] LEGUP_F_chi_to_channel_BB_11_11 = 7'd11;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader12_preheader_12 = 7'd12;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader12_13 = 7'd13;
parameter [6:0] LEGUP_F_chi_to_channel_BB_16_14 = 7'd14;
parameter [6:0] LEGUP_F_chi_to_channel_BB_16_15 = 7'd15;
parameter [6:0] LEGUP_F_chi_to_channel_BB_16_16 = 7'd16;
parameter [6:0] LEGUP_F_chi_to_channel_BB__critedge_17 = 7'd17;
parameter [6:0] LEGUP_F_chi_to_channel_BB_21_18 = 7'd18;
parameter [6:0] LEGUP_F_chi_to_channel_BB_21_19 = 7'd19;
parameter [6:0] LEGUP_F_chi_to_channel_BB_21_20 = 7'd20;
parameter [6:0] LEGUP_F_chi_to_channel_BB_26_21 = 7'd21;
parameter [6:0] LEGUP_F_chi_to_channel_BB_29_22 = 7'd22;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader_23 = 7'd23;
parameter [6:0] LEGUP_F_chi_to_channel_BB_34_24 = 7'd24;
parameter [6:0] LEGUP_F_chi_to_channel_BB_36_25 = 7'd25;
parameter [6:0] LEGUP_F_chi_to_channel_BB_36_26 = 7'd26;
parameter [6:0] LEGUP_F_chi_to_channel_BB_36_27 = 7'd27;
parameter [6:0] LEGUP_F_chi_to_channel_BB__critedge1_28 = 7'd28;
parameter [6:0] LEGUP_F_chi_to_channel_BB_41_29 = 7'd29;
parameter [6:0] LEGUP_F_chi_to_channel_BB_41_30 = 7'd30;
parameter [6:0] LEGUP_F_chi_to_channel_BB_41_31 = 7'd31;
parameter [6:0] LEGUP_F_chi_to_channel_BB_46_32 = 7'd32;
parameter [6:0] LEGUP_F_chi_to_channel_BB_48_33 = 7'd33;
parameter [6:0] LEGUP_F_chi_to_channel_BB_51_34 = 7'd34;
parameter [6:0] LEGUP_F_chi_to_channel_BB_51_35 = 7'd35;
parameter [6:0] LEGUP_F_chi_to_channel_BB_51_36 = 7'd36;
parameter [6:0] LEGUP_F_chi_to_channel_BB_55_37 = 7'd37;
parameter [6:0] LEGUP_F_chi_to_channel_BB__critedge2_38 = 7'd38;
parameter [6:0] LEGUP_F_chi_to_channel_BB_57_39 = 7'd39;
parameter [6:0] LEGUP_F_chi_to_channel_BB_57_40 = 7'd40;
parameter [6:0] LEGUP_F_chi_to_channel_BB_57_41 = 7'd41;
parameter [6:0] LEGUP_F_chi_to_channel_BB_62_42 = 7'd42;
parameter [6:0] LEGUP_F_chi_to_channel_BB_62_43 = 7'd43;
parameter [6:0] LEGUP_F_chi_to_channel_BB_62_44 = 7'd44;
parameter [6:0] LEGUP_F_chi_to_channel_BB_67_45 = 7'd45;
parameter [6:0] LEGUP_F_chi_to_channel_BB_70_46 = 7'd46;
parameter [6:0] LEGUP_F_chi_to_channel_BB_72_47 = 7'd47;
parameter [6:0] LEGUP_F_chi_to_channel_BB_73_48 = 7'd48;
parameter [6:0] LEGUP_F_chi_to_channel_BB_74_49 = 7'd49;
parameter [6:0] LEGUP_F_chi_to_channel_BB_74_50 = 7'd50;
parameter [6:0] LEGUP_F_chi_to_channel_BB_77_51 = 7'd51;
parameter [6:0] LEGUP_F_chi_to_channel_BB_79_52 = 7'd52;
parameter [6:0] LEGUP_F_chi_to_channel_BB_79_53 = 7'd53;
parameter [6:0] LEGUP_F_chi_to_channel_BB_79_54 = 7'd54;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader6_55 = 7'd55;
parameter [6:0] LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56 = 7'd56;
parameter [6:0] LEGUP_F_chi_to_channel_BB__lr_ph_57 = 7'd57;
parameter [6:0] LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58 = 7'd58;
parameter [6:0] LEGUP_F_chi_to_channel_BB___crit_edge_59 = 7'd59;
parameter [6:0] LEGUP_F_chi_to_channel_BB_90_60 = 7'd60;
parameter [6:0] LEGUP_F_chi_to_channel_BB__critedge3_61 = 7'd61;
parameter [6:0] LEGUP_F_chi_to_channel_BB_94_62 = 7'd62;
parameter [6:0] LEGUP_F_chi_to_channel_BB_94_63 = 7'd63;
parameter [6:0] LEGUP_F_chi_to_channel_BB_94_64 = 7'd64;
parameter [6:0] LEGUP_F_chi_to_channel_BB_94_65 = 7'd65;
parameter [6:0] LEGUP_F_chi_to_channel_BB_99_66 = 7'd66;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader9_67 = 7'd67;
parameter [6:0] LEGUP_F_chi_to_channel_BB_102_68 = 7'd68;
parameter [6:0] LEGUP_F_chi_to_channel_BB_104_69 = 7'd69;
parameter [6:0] LEGUP_F_chi_to_channel_BB_104_70 = 7'd70;
parameter [6:0] LEGUP_F_chi_to_channel_BB_104_71 = 7'd71;
parameter [6:0] LEGUP_F_chi_to_channel_BB_108_72 = 7'd72;
parameter [6:0] LEGUP_F_chi_to_channel_BB_111_73 = 7'd73;
parameter [6:0] LEGUP_F_chi_to_channel_BB_114_74 = 7'd74;
parameter [6:0] LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75 = 7'd75;
parameter [6:0] LEGUP_F_chi_to_channel_BB__loopexit_76 = 7'd76;
parameter [6:0] LEGUP_F_chi_to_channel_BB_118_77 = 7'd77;
parameter [6:0] LEGUP_F_chi_to_channel_BB_119_78 = 7'd78;
parameter [6:0] LEGUP_F_chi_to_channel_BB_119_79 = 7'd79;
parameter [6:0] LEGUP_F_chi_to_channel_BB_120_80 = 7'd80;
parameter [6:0] LEGUP_F_chi_to_channel_BB_123_81 = 7'd81;
parameter [6:0] LEGUP_F_chi_to_channel_BB__preheader13_82 = 7'd82;
parameter [6:0] LEGUP_F_chi_to_channel_BB_126_83 = 7'd83;
parameter [6:0] LEGUP_F_chi_to_channel_BB_126_84 = 7'd84;
parameter [6:0] LEGUP_F_chi_to_channel_BB_126_85 = 7'd85;
parameter [6:0] LEGUP_F_chi_to_channel_BB_130_86 = 7'd86;
parameter [6:0] LEGUP_F_chi_to_channel_BB__critedge4_87 = 7'd87;
parameter [6:0] LEGUP_F_chi_to_channel_BB_132_88 = 7'd88;
parameter [6:0] LEGUP_F_chi_to_channel_BB_132_89 = 7'd89;
parameter [6:0] LEGUP_F_chi_to_channel_BB_132_90 = 7'd90;
parameter [6:0] LEGUP_F_chi_to_channel_BB_137_91 = 7'd91;
parameter [6:0] LEGUP_F_chi_to_channel_BB_141_92 = 7'd92;
parameter [6:0] LEGUP_F_chi_to_channel_BB_142_93 = 7'd93;
parameter [6:0] LEGUP_F_chi_to_channel_BB_142_94 = 7'd94;
parameter [6:0] LEGUP_F_chi_to_channel_BB_143_95 = 7'd95;
parameter [6:0] LEGUP_F_chi_to_channel_BB_145_96 = 7'd96;
parameter [6:0] LEGUP_F_chi_to_channel_BB_146_97 = 7'd97;
parameter [6:0] LEGUP_F_chi_to_channel_BB_146_98 = 7'd98;
parameter [6:0] LEGUP_F_chi_to_channel_BB_147_99 = 7'd99;
parameter [6:0] LEGUP_F_chi_to_channel_BB_149_100 = 7'd100;
parameter [6:0] LEGUP_F_chi_to_channel_BB_150_101 = 7'd101;
parameter [6:0] LEGUP_F_chi_to_channel_BB_151_102 = 7'd102;
parameter [6:0] LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103 = 7'd103;
parameter [6:0] LEGUP_F_chi_to_channel_BB__loopexit10_104 = 7'd104;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_chi;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_pchannelmap;
reg [6:0] cur_state;
reg  chi_to_channel_0_1;
reg  chi_to_channel_0_1_reg;
reg [31:0] chi_to_channel_3_4;
reg [31:0] chi_to_channel_3_4_reg;
reg  chi_to_channel_3_5;
reg  chi_to_channel_3_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_6_7_reg;
reg [31:0] chi_to_channel_6_8;
reg [31:0] chi_to_channel_6_8_reg;
reg [31:0] chi_to_channel_6_9;
reg [31:0] chi_to_channel_6_9_reg;
reg  chi_to_channel_6_10;
reg  chi_to_channel_6_10_reg;
reg  chi_to_channel_11_12;
reg  chi_to_channel_11_12_reg;
reg  chi_to_channel_11_13;
reg  chi_to_channel_11_13_reg;
reg  chi_to_channel_11_or_cond;
reg  chi_to_channel_11_or_cond_reg;
reg [31:0] chi_to_channel__preheader12_14;
reg [31:0] chi_to_channel__preheader12_14_reg;
reg [31:0] chi_to_channel__preheader12_i_0;
reg [31:0] chi_to_channel__preheader12_i_0_reg;
reg  chi_to_channel__preheader12_15;
reg  chi_to_channel__preheader12_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_16_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_16_scevgep36_reg;
reg [31:0] chi_to_channel_16_17;
reg [31:0] chi_to_channel_16_17_reg;
reg [31:0] chi_to_channel_16_18;
reg [31:0] chi_to_channel_16_18_reg;
reg  chi_to_channel_16_19;
reg  chi_to_channel_16_19_reg;
reg  chi_to_channel__critedge_20;
reg  chi_to_channel__critedge_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_21_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_21_22_reg;
reg [31:0] chi_to_channel_21_23;
reg [31:0] chi_to_channel_21_23_reg;
reg [31:0] chi_to_channel_21_24;
reg [31:0] chi_to_channel_21_24_reg;
reg  chi_to_channel_21_25;
reg  chi_to_channel_21_25_reg;
reg [31:0] chi_to_channel_26_27;
reg [31:0] chi_to_channel_26_27_reg;
reg  chi_to_channel_26_28;
reg  chi_to_channel_26_28_reg;
reg [31:0] chi_to_channel_29_30;
reg [31:0] chi_to_channel_29_30_reg;
reg [31:0] chi_to_channel_29_31;
reg [31:0] chi_to_channel_29_31_reg;
reg [31:0] chi_to_channel_29_32;
reg [31:0] chi_to_channel_29_32_reg;
reg  chi_to_channel_29_33;
reg  chi_to_channel_29_33_reg;
reg [31:0] chi_to_channel__preheader_tmp;
reg [31:0] chi_to_channel__preheader_tmp_reg;
reg [31:0] chi_to_channel_34_indvar;
reg [31:0] chi_to_channel_34_indvar_reg;
reg [31:0] chi_to_channel_34_i_1;
reg [31:0] chi_to_channel_34_i_1_reg;
reg  chi_to_channel_34_35;
reg  chi_to_channel_34_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_36_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_36_scevgep_reg;
reg [31:0] chi_to_channel_36_37;
reg [31:0] chi_to_channel_36_37_reg;
reg [31:0] chi_to_channel_36_38;
reg [31:0] chi_to_channel_36_38_reg;
reg  chi_to_channel_36_39;
reg  chi_to_channel_36_39_reg;
reg [31:0] chi_to_channel_36_indvar_next;
reg [31:0] chi_to_channel_36_indvar_next_reg;
reg  chi_to_channel__critedge1_40;
reg  chi_to_channel__critedge1_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_41_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_41_42_reg;
reg [31:0] chi_to_channel_41_43;
reg [31:0] chi_to_channel_41_43_reg;
reg [31:0] chi_to_channel_41_44;
reg [31:0] chi_to_channel_41_44_reg;
reg  chi_to_channel_41_45;
reg  chi_to_channel_41_45_reg;
reg [31:0] chi_to_channel_46_i_2;
reg [31:0] chi_to_channel_46_i_2_reg;
reg [31:0] chi_to_channel_46_47;
reg [31:0] chi_to_channel_46_47_reg;
reg [31:0] chi_to_channel_48_49;
reg [31:0] chi_to_channel_48_49_reg;
reg [31:0] chi_to_channel_48_i_3;
reg [31:0] chi_to_channel_48_i_3_reg;
reg  chi_to_channel_48_50;
reg  chi_to_channel_48_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_51_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_51_scevgep34_reg;
reg [31:0] chi_to_channel_51_52;
reg [31:0] chi_to_channel_51_52_reg;
reg [31:0] chi_to_channel_51_53;
reg [31:0] chi_to_channel_51_53_reg;
reg  chi_to_channel_51_54;
reg  chi_to_channel_51_54_reg;
reg [31:0] chi_to_channel_55_indvar_next28;
reg [31:0] chi_to_channel_55_indvar_next28_reg;
reg  chi_to_channel__critedge2_56;
reg  chi_to_channel__critedge2_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_57_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_57_58_reg;
reg [31:0] chi_to_channel_57_59;
reg [31:0] chi_to_channel_57_59_reg;
reg [31:0] chi_to_channel_57_60;
reg [31:0] chi_to_channel_57_60_reg;
reg  chi_to_channel_57_61;
reg  chi_to_channel_57_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_62_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_62_63_reg;
reg [31:0] chi_to_channel_62_64;
reg [31:0] chi_to_channel_62_64_reg;
reg [31:0] chi_to_channel_62_65;
reg [31:0] chi_to_channel_62_65_reg;
reg  chi_to_channel_62_66;
reg  chi_to_channel_62_66_reg;
reg [31:0] chi_to_channel_67_68;
reg [31:0] chi_to_channel_67_68_reg;
reg  chi_to_channel_67_69;
reg  chi_to_channel_67_69_reg;
reg [31:0] chi_to_channel_70_71;
reg [31:0] chi_to_channel_70_71_reg;
reg [31:0] chi_to_channel_73_ofs_0;
reg [31:0] chi_to_channel_73_ofs_0_reg;
reg [31:0] chi_to_channel_73_tmp19;
reg [31:0] chi_to_channel_73_tmp19_reg;
reg [31:0] chi_to_channel_74_map_0;
reg [31:0] chi_to_channel_74_map_0_reg;
reg [31:0] chi_to_channel_74_75;
reg [31:0] chi_to_channel_74_75_reg;
reg [31:0] chi_to_channel_74_ch_0;
reg [31:0] chi_to_channel_74_ch_0_reg;
reg [31:0] chi_to_channel_74_tmp20;
reg [31:0] chi_to_channel_74_tmp20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_74_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_74_scevgep21_reg;
reg  chi_to_channel_74_76;
reg  chi_to_channel_74_76_reg;
reg [31:0] chi_to_channel_77_p_0;
reg [31:0] chi_to_channel_77_p_0_reg;
reg  chi_to_channel_77_78;
reg  chi_to_channel_77_78_reg;
reg [31:0] chi_to_channel_79_80;
reg [31:0] chi_to_channel_79_80_reg;
reg [31:0] chi_to_channel_79_81;
reg [31:0] chi_to_channel_79_81_reg;
reg [31:0] chi_to_channel_79_82;
reg [31:0] chi_to_channel_79_82_reg;
reg  chi_to_channel_79_83;
reg  chi_to_channel_79_83_reg;
reg [31:0] chi_to_channel__preheader6_84;
reg [31:0] chi_to_channel__preheader6_84_reg;
reg  chi_to_channel__preheader6_85;
reg  chi_to_channel__preheader6_85_reg;
reg [31:0] chi_to_channel__lr_ph_ch_17;
reg [31:0] chi_to_channel__lr_ph_ch_17_reg;
reg [31:0] chi_to_channel__lr_ph_tmp18;
reg [31:0] chi_to_channel__lr_ph_tmp18_reg;
reg [31:0] chi_to_channel__lr_ph_86;
reg [31:0] chi_to_channel__lr_ph_86_reg;
reg [31:0] chi_to_channel__lr_ph_87;
reg [31:0] chi_to_channel__lr_ph_87_reg;
reg  chi_to_channel__lr_ph_88;
reg  chi_to_channel__lr_ph_88_reg;
reg [31:0] chi_to_channel___crit_edge_ch_1_lcssa;
reg [31:0] chi_to_channel___crit_edge_ch_1_lcssa_reg;
reg [31:0] chi_to_channel___crit_edge_89;
reg [31:0] chi_to_channel___crit_edge_89_reg;
reg [31:0] chi_to_channel_90_map_1;
reg [31:0] chi_to_channel_90_map_1_reg;
reg [31:0] chi_to_channel_90_ch_2;
reg [31:0] chi_to_channel_90_ch_2_reg;
reg [31:0] chi_to_channel_90_91;
reg [31:0] chi_to_channel_90_91_reg;
reg [31:0] chi_to_channel__critedge3_92;
reg [31:0] chi_to_channel__critedge3_92_reg;
reg [31:0] chi_to_channel__critedge3_93;
reg [31:0] chi_to_channel__critedge3_93_reg;
reg [31:0] chi_to_channel_94_95;
reg [31:0] chi_to_channel_94_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_94_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_94_96_reg;
reg [31:0] chi_to_channel_94_97;
reg [31:0] chi_to_channel_94_97_reg;
reg [31:0] chi_to_channel_94_98;
reg [31:0] chi_to_channel_94_98_reg;
reg [31:0] chi_to_channel_99_100;
reg [31:0] chi_to_channel_99_100_reg;
reg  chi_to_channel_99_101;
reg  chi_to_channel_99_101_reg;
reg [31:0] chi_to_channel__preheader9_tmp29;
reg [31:0] chi_to_channel__preheader9_tmp29_reg;
reg [31:0] chi_to_channel__preheader9_tmp30;
reg [31:0] chi_to_channel__preheader9_tmp30_reg;
reg [31:0] chi_to_channel_102_indvar25;
reg [31:0] chi_to_channel_102_indvar25_reg;
reg [31:0] chi_to_channel_102_map_2;
reg [31:0] chi_to_channel_102_map_2_reg;
reg [31:0] chi_to_channel_102_i_5;
reg [31:0] chi_to_channel_102_i_5_reg;
reg  chi_to_channel_102_103;
reg  chi_to_channel_102_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_104_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_104_scevgep32_reg;
reg [31:0] chi_to_channel_104_105;
reg [31:0] chi_to_channel_104_105_reg;
reg [31:0] chi_to_channel_104_106;
reg [31:0] chi_to_channel_104_106_reg;
reg  chi_to_channel_104_107;
reg  chi_to_channel_104_107_reg;
reg [31:0] chi_to_channel_108_109;
reg [31:0] chi_to_channel_108_109_reg;
reg [31:0] chi_to_channel_108_110;
reg [31:0] chi_to_channel_108_110_reg;
reg [31:0] chi_to_channel_108_indvar_next26;
reg [31:0] chi_to_channel_108_indvar_next26_reg;
reg  chi_to_channel_111_112;
reg  chi_to_channel_111_112_reg;
reg  chi_to_channel_111_113;
reg  chi_to_channel_111_113_reg;
reg  chi_to_channel_111_or_cond5;
reg  chi_to_channel_111_or_cond5_reg;
reg [31:0] chi_to_channel_114_115;
reg [31:0] chi_to_channel_114_115_reg;
reg [31:0] chi_to_channel__loopexit_map_3;
reg [31:0] chi_to_channel__loopexit_map_3_reg;
reg [31:0] chi_to_channel__loopexit_116;
reg [31:0] chi_to_channel__loopexit_116_reg;
reg  chi_to_channel__loopexit_117;
reg  chi_to_channel__loopexit_117_reg;
reg [31:0] chi_to_channel_118_map_4;
reg [31:0] chi_to_channel_118_map_4_reg;
reg [31:0] chi_to_channel_118_ch_3;
reg [31:0] chi_to_channel_118_ch_3_reg;
reg [31:0] chi_to_channel_120_121;
reg [31:0] chi_to_channel_120_121_reg;
reg  chi_to_channel_120_122;
reg  chi_to_channel_120_122_reg;
reg [31:0] chi_to_channel_123_124;
reg [31:0] chi_to_channel_123_124_reg;
reg [31:0] chi_to_channel__preheader13_indvar37;
reg [31:0] chi_to_channel__preheader13_indvar37_reg;
reg  chi_to_channel__preheader13_125;
reg  chi_to_channel__preheader13_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_126_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_126_scevgep40_reg;
reg [31:0] chi_to_channel_126_127;
reg [31:0] chi_to_channel_126_127_reg;
reg [31:0] chi_to_channel_126_128;
reg [31:0] chi_to_channel_126_128_reg;
reg  chi_to_channel_126_129;
reg  chi_to_channel_126_129_reg;
reg [31:0] chi_to_channel_130_phitmp;
reg [31:0] chi_to_channel_130_phitmp_reg;
reg  chi_to_channel__critedge4_131;
reg  chi_to_channel__critedge4_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_132_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_132_133_reg;
reg [31:0] chi_to_channel_132_134;
reg [31:0] chi_to_channel_132_134_reg;
reg [31:0] chi_to_channel_132_135;
reg [31:0] chi_to_channel_132_135_reg;
reg  chi_to_channel_132_136;
reg  chi_to_channel_132_136_reg;
reg [31:0] chi_to_channel_137_138;
reg [31:0] chi_to_channel_137_138_reg;
reg [31:0] chi_to_channel_137_139;
reg [31:0] chi_to_channel_137_139_reg;
reg [31:0] chi_to_channel_137_140;
reg [31:0] chi_to_channel_137_140_reg;
reg [31:0] chi_to_channel_143_144;
reg [31:0] chi_to_channel_143_144_reg;
reg [31:0] chi_to_channel_147_148;
reg [31:0] chi_to_channel_147_148_reg;
reg [31:0] chi_to_channel__loopexit10__0;
reg [31:0] chi_to_channel__loopexit10__0_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_3_5 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_3_5 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_6_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_6_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_6_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_6_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_6_10 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader13_preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_6_9) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_6_10 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader13_preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader13_82;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader13_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_11_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_11_11) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_11_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_11_11) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_11_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader12_preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader12_preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader12_13;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader12_13;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_13) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader12_15 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_14;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_13) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader12_15 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge_17;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_16_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_14;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_16_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_16_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_16_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_16_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_16_16) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_16_19 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader12_13;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_16_16) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_16_19 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge_17;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge_17;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge_20 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge_20 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_18;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_21_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_18;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_21_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_19;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_21_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_19;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_21_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_20;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_21_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_21_20;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_21_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_21_20) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_21_25 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_21_20) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_21_25 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_26_21;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_26_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_26_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_26_21;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_26_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_26_21) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_26_28 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_29_22;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_29_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_26_21) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_26_28 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_29_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_29_22;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_29_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_29_22) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_29_33 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_46_32;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_46_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_29_22) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_29_33 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_34_24;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_34_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_34_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_34_24;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_34_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_34_24) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_34_35 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_25;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_34_24) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_34_35 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge1_28;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_36_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_25;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_36_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_26;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_36_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_26;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_36_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_27;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_36_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_36_27;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_36_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_36_27) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_36_39 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_34_24;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_34_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_36_27) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_36_39 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge1_28;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge1_28;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge1_40 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge1_40 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_29;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_41_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_29;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_41_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_30;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_41_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_30;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_41_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_31;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_41_31;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_41_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_46_32;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_46_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_46_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_46_32;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_46_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_46_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_48_33;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_48_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_48_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_48_33;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_48_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_48_33) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_48_50 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_34;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_48_33) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_48_50 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge2_38;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_51_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_34;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_51_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_35;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_51_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_35;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_51_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_36;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_51_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_51_36;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_51_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_51_36) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_51_54 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_55_37;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_55_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_51_36) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_51_54 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge2_38;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_55_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_55_37;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_55_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_55_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_48_33;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_48_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge2_38;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge2_56 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge2_56 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_39;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_57_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_39;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_57_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_40;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_57_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_40;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_57_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_41;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_57_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_57_41;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_57_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_57_41) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_57_61 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_57_41) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_57_61 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_42;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_62_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_42;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_62_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_43;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_62_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_43;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_62_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_44;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_62_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_62_44;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_62_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_62_44) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_62_66 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_67_45;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_67_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_62_44) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_62_66 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_67_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_67_45;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_67_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_67_45) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_67_69 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_62;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_67_45) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_67_69 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_70_46;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_70_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_70_46;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_70_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 == 32'd4)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_73_48;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_73_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 == 32'd3)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_72_47;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_72_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 != 32'd4)) & (chi_to_channel_70_71 != 32'd3)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_72_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_72_47;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_72_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_72_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_73_48;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_73_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_73_48;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_73_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_74_49;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_74_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_74_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_74_49;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_74_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_74_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_74_50;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_74_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_74_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_74_50;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_74_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_74_50) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_74_76_reg == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_77_51;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_77_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_74_50) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_74_76_reg == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge3_61;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_77_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_77_51;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_77_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_77_51) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_77_78 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_52;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_77_51) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_77_78 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge3_61;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_79_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_52;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_79_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_53;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_79_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_53;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_79_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_54;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_79_54;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_79_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_90_60;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_90_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader6_55;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader6_55;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader6_85 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader6_85 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB___crit_edge_59;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB___crit_edge_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__lr_ph_57;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__lr_ph_57;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__lr_ph_88 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__lr_ph_57;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__lr_ph_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__lr_ph_88 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB___crit_edge_59;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB___crit_edge_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB___crit_edge_59;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB___crit_edge_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_90_60;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_90_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_90_60;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_90_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_74_49;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_74_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge3_61;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_118_77;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_118_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_62;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_63;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_63;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_64;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_64;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_65;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_94_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_94_65;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_94_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_94_65) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_99_66;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_99_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_94_65) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_111_73;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_111_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_99_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_99_66;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_99_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_99_66) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_99_101 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_99_66) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_99_101 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader9_67;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader9_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader9_67;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader9_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_102_68;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_102_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_102_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_102_68;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_102_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_102_68) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_102_103 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_102_68) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_102_103 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_69;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_104_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_69;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_104_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_70;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_104_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_70;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_104_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_71;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_104_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_104_71;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_104_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_104_71) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_104_107 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_104_71) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_104_107 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_108_72;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_108_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_108_72;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_108_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_102_68;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_102_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_111_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_111_73;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_111_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_111_73) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_111_or_cond5 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_111_73) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_111_or_cond5 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_114_74;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_114_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_114_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_114_74;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_114_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_114_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit_76;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit_76;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit_76;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_118_77;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_118_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_118_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_118_77;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_118_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_118_77) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_119_78;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_119_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_118_77) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_120_80;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_120_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_119_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_119_78;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_119_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_119_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_119_79;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_119_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_119_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_119_79;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_119_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_119_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_123_81;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_123_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_120_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_120_80;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_120_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_120_80) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_120_122 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_123_81;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_123_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_120_80) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_120_122 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_123_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_123_81;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_123_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_123_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader13_82;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader13_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_82) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader13_125 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_83;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_82) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader13_125 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge4_87;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge4_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_126_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_83;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_126_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_84;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_126_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_84;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_126_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_85;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_126_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_126_85;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_126_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_126_85) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_126_129 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_130_86;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_130_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_126_85) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_126_129 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge4_87;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge4_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_130_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_130_86;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_130_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_130_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__preheader13_82;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__preheader13_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__critedge4_87;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__critedge4_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge4_131 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_88;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge4_131 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_132_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_88;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_132_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_89;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_132_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_89;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_132_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_90;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_132_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_132_90;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_132_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_132_90) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_132_136 == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_132_90) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_132_136 == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_137_91;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_137_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_137_91;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_137_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd152)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd153)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_141_92;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_141_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd154)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_145_96;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_145_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd155)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_149_100;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_149_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd156)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_150_101;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_150_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 != 32'd152)) & (chi_to_channel_137_140 != 32'd153)) & (chi_to_channel_137_140 != 32'd154)) & (chi_to_channel_137_140 != 32'd155)) & (chi_to_channel_137_140 != 32'd156)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_151_102;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_151_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_141_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_141_92;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_141_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_141_92) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_142_93;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_142_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_141_92) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_143_95;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_143_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_142_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_142_93;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_142_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_142_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_142_94;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_142_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_142_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_142_94;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_142_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_142_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_143_95;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_143_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_143_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_143_95;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_143_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_143_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_145_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_145_96;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_145_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_145_96) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_146_97;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_146_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_chi_to_channel_BB_145_96) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_0_1_reg == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_147_99;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_147_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_146_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_146_97;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_146_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_146_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_146_98;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_146_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_146_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_146_98;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_146_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_146_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_147_99;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_147_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_147_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_147_99;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_147_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_147_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_149_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_149_100;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_149_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_149_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_150_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_150_101;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_150_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_150_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_151_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB_151_102;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB_151_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB_151_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_chi_to_channel_BB__loopexit10_104;
if (reset == 1'b0 && ^(LEGUP_F_chi_to_channel_BB__loopexit10_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %0*/
/*   %1 = icmp ne i32* %pchannelmap, null*/
begin
chi_to_channel_0_1 = (arg_pchannelmap != 0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %0*/
/*   %1 = icmp ne i32* %pchannelmap, null*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_0_1))
begin
chi_to_channel_0_1_reg <= chi_to_channel_0_1;
if (reset == 1'b0 && ^(chi_to_channel_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_0_1_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
begin
chi_to_channel_3_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_6))
begin
chi_to_channel_3_4_reg <= chi_to_channel_3_4;
if (reset == 1'b0 && ^(chi_to_channel_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_3_4_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %3*/
/*   %5 = icmp eq i32 %4, 0*/
begin
chi_to_channel_3_5 = (chi_to_channel_3_4 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %3*/
/*   %5 = icmp eq i32 %4, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_6))
begin
chi_to_channel_3_5_reg <= chi_to_channel_3_5;
if (reset == 1'b0 && ^(chi_to_channel_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_3_5_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %6*/
/*   %7 = getelementptr inbounds i32* %chi, i32 1*/
begin
chi_to_channel_6_7 = (arg_chi + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* chi_to_channel: %6*/
/*   %7 = getelementptr inbounds i32* %chi, i32 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_7))
begin
chi_to_channel_6_7_reg <= chi_to_channel_6_7;
if (reset == 1'b0 && ^(chi_to_channel_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_6_7_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
begin
chi_to_channel_6_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_9))
begin
chi_to_channel_6_8_reg <= chi_to_channel_6_8;
if (reset == 1'b0 && ^(chi_to_channel_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_6_8_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %6*/
/*   %9 = and i32 %8, 32*/
begin
chi_to_channel_6_9 = (chi_to_channel_6_8 & 32'd32);
end
end
always @(posedge clk) begin
/* chi_to_channel: %6*/
/*   %9 = and i32 %8, 32*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_9))
begin
chi_to_channel_6_9_reg <= chi_to_channel_6_9;
if (reset == 1'b0 && ^(chi_to_channel_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_6_9_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %6*/
/*   %10 = icmp eq i32 %9, 0*/
begin
chi_to_channel_6_10 = (chi_to_channel_6_9 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %6*/
/*   %10 = icmp eq i32 %9, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_9))
begin
chi_to_channel_6_10_reg <= chi_to_channel_6_10;
if (reset == 1'b0 && ^(chi_to_channel_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_6_10_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %11*/
/*   %12 = icmp eq i32 %4, 1*/
begin
chi_to_channel_11_12 = (chi_to_channel_3_4_reg == 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %11*/
/*   %12 = icmp eq i32 %4, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_11_11))
begin
chi_to_channel_11_12_reg <= chi_to_channel_11_12;
if (reset == 1'b0 && ^(chi_to_channel_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_11_12_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %11*/
/*   %13 = icmp eq i32 %8, 172*/
begin
chi_to_channel_11_13 = (chi_to_channel_6_8_reg == 32'd172);
end
end
always @(posedge clk) begin
/* chi_to_channel: %11*/
/*   %13 = icmp eq i32 %8, 172*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_11_11))
begin
chi_to_channel_11_13_reg <= chi_to_channel_11_13;
if (reset == 1'b0 && ^(chi_to_channel_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_11_13_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %11*/
/*   %or.cond = and i1 %12, %13*/
begin
chi_to_channel_11_or_cond = (chi_to_channel_11_12 & chi_to_channel_11_13);
end
end
always @(posedge clk) begin
/* chi_to_channel: %11*/
/*   %or.cond = and i1 %12, %13*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_11_11))
begin
chi_to_channel_11_or_cond_reg <= chi_to_channel_11_or_cond;
if (reset == 1'b0 && ^(chi_to_channel_11_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_11_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader12*/
/*   %14 = phi i32 [ %i.0, %16 ], [ 0, %.preheader12.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__preheader12_14 = 32'd0;
end
/* chi_to_channel: %.preheader12*/
/*   %14 = phi i32 [ %i.0, %16 ], [ 0, %.preheader12.preheader ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB_16_16) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_16_19 == 1'd1))) */
begin
chi_to_channel__preheader12_14 = chi_to_channel__preheader12_i_0_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader12*/
/*   %14 = phi i32 [ %i.0, %16 ], [ 0, %.preheader12.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_preheader_12) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__preheader12_14_reg <= chi_to_channel__preheader12_14;
if (reset == 1'b0 && ^(chi_to_channel__preheader12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader12_14_reg"); $finish; end
end
/* chi_to_channel: %.preheader12*/
/*   %14 = phi i32 [ %i.0, %16 ], [ 0, %.preheader12.preheader ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_16_16) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_16_19 == 1'd1)))
begin
chi_to_channel__preheader12_14_reg <= chi_to_channel__preheader12_14;
if (reset == 1'b0 && ^(chi_to_channel__preheader12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader12_14_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader12*/
/*   %i.0 = add i32 %14, 1*/
begin
chi_to_channel__preheader12_i_0 = (chi_to_channel__preheader12_14_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader12*/
/*   %i.0 = add i32 %14, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_13))
begin
chi_to_channel__preheader12_i_0_reg <= chi_to_channel__preheader12_i_0;
if (reset == 1'b0 && ^(chi_to_channel__preheader12_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader12_i_0_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader12*/
/*   %15 = icmp slt i32 %i.0, %4*/
begin
chi_to_channel__preheader12_15 = ($signed(chi_to_channel__preheader12_i_0) < $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader12*/
/*   %15 = icmp slt i32 %i.0, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader12_13))
begin
chi_to_channel__preheader12_15_reg <= chi_to_channel__preheader12_15;
if (reset == 1'b0 && ^(chi_to_channel__preheader12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader12_15_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %16*/
/*   %scevgep36 = getelementptr i32* %chi, i32 %i.0*/
begin
chi_to_channel_16_scevgep36 = (arg_chi + (4 * chi_to_channel__preheader12_i_0_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %16*/
/*   %scevgep36 = getelementptr i32* %chi, i32 %i.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_14))
begin
chi_to_channel_16_scevgep36_reg <= chi_to_channel_16_scevgep36;
if (reset == 1'b0 && ^(chi_to_channel_16_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_16_scevgep36_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
begin
chi_to_channel_16_17 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_16))
begin
chi_to_channel_16_17_reg <= chi_to_channel_16_17;
if (reset == 1'b0 && ^(chi_to_channel_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_16_17_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %16*/
/*   %18 = and i32 %17, 128*/
begin
chi_to_channel_16_18 = (chi_to_channel_16_17 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %16*/
/*   %18 = and i32 %17, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_16))
begin
chi_to_channel_16_18_reg <= chi_to_channel_16_18;
if (reset == 1'b0 && ^(chi_to_channel_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_16_18_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %16*/
/*   %19 = icmp eq i32 %18, 0*/
begin
chi_to_channel_16_19 = (chi_to_channel_16_18 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %16*/
/*   %19 = icmp eq i32 %18, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_16))
begin
chi_to_channel_16_19_reg <= chi_to_channel_16_19;
if (reset == 1'b0 && ^(chi_to_channel_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_16_19_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge*/
/*   %20 = icmp eq i32 %i.0, %4*/
begin
chi_to_channel__critedge_20 = (chi_to_channel__preheader12_i_0_reg == chi_to_channel_3_4_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge*/
/*   %20 = icmp eq i32 %i.0, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17))
begin
chi_to_channel__critedge_20_reg <= chi_to_channel__critedge_20;
if (reset == 1'b0 && ^(chi_to_channel__critedge_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge_20_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %21*/
/*   %22 = getelementptr inbounds i32* %chi, i32 %i.0*/
begin
chi_to_channel_21_22 = (arg_chi + (4 * chi_to_channel__preheader12_i_0_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %21*/
/*   %22 = getelementptr inbounds i32* %chi, i32 %i.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_18))
begin
chi_to_channel_21_22_reg <= chi_to_channel_21_22;
if (reset == 1'b0 && ^(chi_to_channel_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_21_22_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
chi_to_channel_21_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_20))
begin
chi_to_channel_21_23_reg <= chi_to_channel_21_23;
if (reset == 1'b0 && ^(chi_to_channel_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_21_23_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %21*/
/*   %24 = and i32 %23, 128*/
begin
chi_to_channel_21_24 = (chi_to_channel_21_23 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %21*/
/*   %24 = and i32 %23, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_20))
begin
chi_to_channel_21_24_reg <= chi_to_channel_21_24;
if (reset == 1'b0 && ^(chi_to_channel_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_21_24_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %21*/
/*   %25 = icmp eq i32 %24, 0*/
begin
chi_to_channel_21_25 = (chi_to_channel_21_24 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %21*/
/*   %25 = icmp eq i32 %24, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_20))
begin
chi_to_channel_21_25_reg <= chi_to_channel_21_25;
if (reset == 1'b0 && ^(chi_to_channel_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_21_25_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %26*/
/*   %27 = or i32 %8, 200*/
begin
chi_to_channel_26_27 = (chi_to_channel_6_8_reg | 32'd200);
end
end
always @(posedge clk) begin
/* chi_to_channel: %26*/
/*   %27 = or i32 %8, 200*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_26_21))
begin
chi_to_channel_26_27_reg <= chi_to_channel_26_27;
if (reset == 1'b0 && ^(chi_to_channel_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_26_27_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %26*/
/*   %28 = icmp eq i32 %27, 233*/
begin
chi_to_channel_26_28 = (chi_to_channel_26_27 == 32'd233);
end
end
always @(posedge clk) begin
/* chi_to_channel: %26*/
/*   %28 = icmp eq i32 %27, 233*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_26_21))
begin
chi_to_channel_26_28_reg <= chi_to_channel_26_28;
if (reset == 1'b0 && ^(chi_to_channel_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_26_28_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %29*/
/*   %30 = shl i32 %8, 3*/
begin
chi_to_channel_29_30 = (chi_to_channel_6_8_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %29*/
/*   %30 = shl i32 %8, 3*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_29_22))
begin
chi_to_channel_29_30_reg <= chi_to_channel_29_30;
if (reset == 1'b0 && ^(chi_to_channel_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_29_30_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %29*/
/*   %31 = and i32 %30, 64*/
begin
chi_to_channel_29_31 = (chi_to_channel_29_30 & 32'd64);
end
end
always @(posedge clk) begin
/* chi_to_channel: %29*/
/*   %31 = and i32 %30, 64*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_29_22))
begin
chi_to_channel_29_31_reg <= chi_to_channel_29_31;
if (reset == 1'b0 && ^(chi_to_channel_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_29_31_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %29*/
/*   %32 = and i32 %8, 64*/
begin
chi_to_channel_29_32 = (chi_to_channel_6_8_reg & 32'd64);
end
end
always @(posedge clk) begin
/* chi_to_channel: %29*/
/*   %32 = and i32 %8, 64*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_29_22))
begin
chi_to_channel_29_32_reg <= chi_to_channel_29_32;
if (reset == 1'b0 && ^(chi_to_channel_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_29_32_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %29*/
/*   %33 = icmp eq i32 %32, 0*/
begin
chi_to_channel_29_33 = (chi_to_channel_29_32 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %29*/
/*   %33 = icmp eq i32 %32, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_29_22))
begin
chi_to_channel_29_33_reg <= chi_to_channel_29_33;
if (reset == 1'b0 && ^(chi_to_channel_29_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_29_33_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader*/
/*   %tmp = add i32 %14, 2*/
begin
chi_to_channel__preheader_tmp = (chi_to_channel__preheader12_14_reg + 32'd2);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader*/
/*   %tmp = add i32 %14, 2*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader_23))
begin
chi_to_channel__preheader_tmp_reg <= chi_to_channel__preheader_tmp;
if (reset == 1'b0 && ^(chi_to_channel__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %34*/
/*   %indvar = phi i32 [ 0, %.preheader ], [ %indvar.next, %36 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_34_indvar = 32'd0;
end
/* chi_to_channel: %34*/
/*   %indvar = phi i32 [ 0, %.preheader ], [ %indvar.next, %36 ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB_36_27) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_36_39 == 1'd1))) */
begin
chi_to_channel_34_indvar = chi_to_channel_36_indvar_next_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %34*/
/*   %indvar = phi i32 [ 0, %.preheader ], [ %indvar.next, %36 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_34_indvar_reg <= chi_to_channel_34_indvar;
if (reset == 1'b0 && ^(chi_to_channel_34_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_34_indvar_reg"); $finish; end
end
/* chi_to_channel: %34*/
/*   %indvar = phi i32 [ 0, %.preheader ], [ %indvar.next, %36 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_36_27) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_36_39 == 1'd1)))
begin
chi_to_channel_34_indvar_reg <= chi_to_channel_34_indvar;
if (reset == 1'b0 && ^(chi_to_channel_34_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_34_indvar_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %34*/
/*   %i.1 = add i32 %tmp, %indvar*/
begin
chi_to_channel_34_i_1 = (chi_to_channel__preheader_tmp_reg + chi_to_channel_34_indvar_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %34*/
/*   %i.1 = add i32 %tmp, %indvar*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_34_24))
begin
chi_to_channel_34_i_1_reg <= chi_to_channel_34_i_1;
if (reset == 1'b0 && ^(chi_to_channel_34_i_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_34_i_1_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %34*/
/*   %35 = icmp slt i32 %i.1, %4*/
begin
chi_to_channel_34_35 = ($signed(chi_to_channel_34_i_1) < $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %34*/
/*   %35 = icmp slt i32 %i.1, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_34_24))
begin
chi_to_channel_34_35_reg <= chi_to_channel_34_35;
if (reset == 1'b0 && ^(chi_to_channel_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_34_35_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %36*/
/*   %scevgep = getelementptr i32* %chi, i32 %i.1*/
begin
chi_to_channel_36_scevgep = (arg_chi + (4 * chi_to_channel_34_i_1_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %36*/
/*   %scevgep = getelementptr i32* %chi, i32 %i.1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
chi_to_channel_36_scevgep_reg <= chi_to_channel_36_scevgep;
if (reset == 1'b0 && ^(chi_to_channel_36_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_36_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
begin
chi_to_channel_36_37 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_27))
begin
chi_to_channel_36_37_reg <= chi_to_channel_36_37;
if (reset == 1'b0 && ^(chi_to_channel_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_36_37_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %36*/
/*   %38 = and i32 %37, 128*/
begin
chi_to_channel_36_38 = (chi_to_channel_36_37 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %36*/
/*   %38 = and i32 %37, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_27))
begin
chi_to_channel_36_38_reg <= chi_to_channel_36_38;
if (reset == 1'b0 && ^(chi_to_channel_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_36_38_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %36*/
/*   %39 = icmp eq i32 %38, 0*/
begin
chi_to_channel_36_39 = (chi_to_channel_36_38 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %36*/
/*   %39 = icmp eq i32 %38, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_27))
begin
chi_to_channel_36_39_reg <= chi_to_channel_36_39;
if (reset == 1'b0 && ^(chi_to_channel_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_36_39_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %36*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
chi_to_channel_36_indvar_next = (chi_to_channel_34_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %36*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
chi_to_channel_36_indvar_next_reg <= chi_to_channel_36_indvar_next;
if (reset == 1'b0 && ^(chi_to_channel_36_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_36_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge1*/
/*   %40 = icmp eq i32 %i.1, %4*/
begin
chi_to_channel__critedge1_40 = (chi_to_channel_34_i_1_reg == chi_to_channel_3_4_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge1*/
/*   %40 = icmp eq i32 %i.1, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28))
begin
chi_to_channel__critedge1_40_reg <= chi_to_channel__critedge1_40;
if (reset == 1'b0 && ^(chi_to_channel__critedge1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge1_40_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %41*/
/*   %42 = getelementptr inbounds i32* %chi, i32 %i.1*/
begin
chi_to_channel_41_42 = (arg_chi + (4 * chi_to_channel_34_i_1_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %41*/
/*   %42 = getelementptr inbounds i32* %chi, i32 %i.1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_29))
begin
chi_to_channel_41_42_reg <= chi_to_channel_41_42;
if (reset == 1'b0 && ^(chi_to_channel_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_41_42_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
begin
chi_to_channel_41_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_31))
begin
chi_to_channel_41_43_reg <= chi_to_channel_41_43;
if (reset == 1'b0 && ^(chi_to_channel_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_41_43_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %41*/
/*   %44 = and i32 %43, 128*/
begin
chi_to_channel_41_44 = (chi_to_channel_41_43 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %41*/
/*   %44 = and i32 %43, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_31))
begin
chi_to_channel_41_44_reg <= chi_to_channel_41_44;
if (reset == 1'b0 && ^(chi_to_channel_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_41_44_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %41*/
/*   %45 = icmp eq i32 %44, 0*/
begin
chi_to_channel_41_45 = (chi_to_channel_41_44 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %41*/
/*   %45 = icmp eq i32 %44, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_31))
begin
chi_to_channel_41_45_reg <= chi_to_channel_41_45;
if (reset == 1'b0 && ^(chi_to_channel_41_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_41_45_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %46*/
/*   %i.2 = phi i32 [ %i.1, %41 ], [ %i.0, %29 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_29_22) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_29_33 == 1'd1)))
begin
chi_to_channel_46_i_2 = chi_to_channel__preheader12_i_0_reg;
end
/* chi_to_channel: %46*/
/*   %i.2 = phi i32 [ %i.1, %41 ], [ %i.0, %29 ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd0))) */
begin
chi_to_channel_46_i_2 = chi_to_channel_34_i_1_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %46*/
/*   %i.2 = phi i32 [ %i.1, %41 ], [ %i.0, %29 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_29_22) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_29_33 == 1'd1)))
begin
chi_to_channel_46_i_2_reg <= chi_to_channel_46_i_2;
if (reset == 1'b0 && ^(chi_to_channel_46_i_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_46_i_2_reg"); $finish; end
end
/* chi_to_channel: %46*/
/*   %i.2 = phi i32 [ %i.1, %41 ], [ %i.0, %29 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd0)))
begin
chi_to_channel_46_i_2_reg <= chi_to_channel_46_i_2;
if (reset == 1'b0 && ^(chi_to_channel_46_i_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_46_i_2_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %46*/
/*   %47 = add nsw i32 %i.2, 1*/
begin
chi_to_channel_46_47 = (chi_to_channel_46_i_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %46*/
/*   %47 = add nsw i32 %i.2, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_46_32))
begin
chi_to_channel_46_47_reg <= chi_to_channel_46_47;
if (reset == 1'b0 && ^(chi_to_channel_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_46_47_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %48*/
/*   %49 = phi i32 [ %indvar.next28, %55 ], [ 0, %46 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_46_32) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_48_49 = 32'd0;
end
/* chi_to_channel: %48*/
/*   %49 = phi i32 [ %indvar.next28, %55 ], [ 0, %46 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_55_37) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_48_49 = chi_to_channel_55_indvar_next28;
end
end
always @(posedge clk) begin
/* chi_to_channel: %48*/
/*   %49 = phi i32 [ %indvar.next28, %55 ], [ 0, %46 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_46_32) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_48_49_reg <= chi_to_channel_48_49;
if (reset == 1'b0 && ^(chi_to_channel_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_48_49_reg"); $finish; end
end
/* chi_to_channel: %48*/
/*   %49 = phi i32 [ %indvar.next28, %55 ], [ 0, %46 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_55_37) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_48_49_reg <= chi_to_channel_48_49;
if (reset == 1'b0 && ^(chi_to_channel_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_48_49_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %48*/
/*   %i.3 = add i32 %47, %49*/
begin
chi_to_channel_48_i_3 = (chi_to_channel_46_47_reg + chi_to_channel_48_49_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %48*/
/*   %i.3 = add i32 %47, %49*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_48_33))
begin
chi_to_channel_48_i_3_reg <= chi_to_channel_48_i_3;
if (reset == 1'b0 && ^(chi_to_channel_48_i_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_48_i_3_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %48*/
/*   %50 = icmp slt i32 %i.3, %4*/
begin
chi_to_channel_48_50 = ($signed(chi_to_channel_48_i_3) < $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %48*/
/*   %50 = icmp slt i32 %i.3, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_48_33))
begin
chi_to_channel_48_50_reg <= chi_to_channel_48_50;
if (reset == 1'b0 && ^(chi_to_channel_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_48_50_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %51*/
/*   %scevgep34 = getelementptr i32* %chi, i32 %i.3*/
begin
chi_to_channel_51_scevgep34 = (arg_chi + (4 * chi_to_channel_48_i_3_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %51*/
/*   %scevgep34 = getelementptr i32* %chi, i32 %i.3*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_34))
begin
chi_to_channel_51_scevgep34_reg <= chi_to_channel_51_scevgep34;
if (reset == 1'b0 && ^(chi_to_channel_51_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_51_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
begin
chi_to_channel_51_52 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_36))
begin
chi_to_channel_51_52_reg <= chi_to_channel_51_52;
if (reset == 1'b0 && ^(chi_to_channel_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_51_52_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %51*/
/*   %53 = and i32 %52, 128*/
begin
chi_to_channel_51_53 = (chi_to_channel_51_52 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %51*/
/*   %53 = and i32 %52, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_36))
begin
chi_to_channel_51_53_reg <= chi_to_channel_51_53;
if (reset == 1'b0 && ^(chi_to_channel_51_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_51_53_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %51*/
/*   %54 = icmp eq i32 %53, 0*/
begin
chi_to_channel_51_54 = (chi_to_channel_51_53 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %51*/
/*   %54 = icmp eq i32 %53, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_36))
begin
chi_to_channel_51_54_reg <= chi_to_channel_51_54;
if (reset == 1'b0 && ^(chi_to_channel_51_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_51_54_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %55*/
/*   %indvar.next28 = add i32 %49, 1*/
begin
chi_to_channel_55_indvar_next28 = (chi_to_channel_48_49_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %55*/
/*   %indvar.next28 = add i32 %49, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_55_37))
begin
chi_to_channel_55_indvar_next28_reg <= chi_to_channel_55_indvar_next28;
if (reset == 1'b0 && ^(chi_to_channel_55_indvar_next28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_55_indvar_next28_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge2*/
/*   %56 = icmp eq i32 %i.3, %4*/
begin
chi_to_channel__critedge2_56 = (chi_to_channel_48_i_3_reg == chi_to_channel_3_4_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge2*/
/*   %56 = icmp eq i32 %i.3, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38))
begin
chi_to_channel__critedge2_56_reg <= chi_to_channel__critedge2_56;
if (reset == 1'b0 && ^(chi_to_channel__critedge2_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge2_56_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %57*/
/*   %58 = getelementptr inbounds i32* %chi, i32 %i.3*/
begin
chi_to_channel_57_58 = (arg_chi + (4 * chi_to_channel_48_i_3_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %57*/
/*   %58 = getelementptr inbounds i32* %chi, i32 %i.3*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_39))
begin
chi_to_channel_57_58_reg <= chi_to_channel_57_58;
if (reset == 1'b0 && ^(chi_to_channel_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_57_58_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
begin
chi_to_channel_57_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_41))
begin
chi_to_channel_57_59_reg <= chi_to_channel_57_59;
if (reset == 1'b0 && ^(chi_to_channel_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_57_59_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %57*/
/*   %60 = and i32 %59, 128*/
begin
chi_to_channel_57_60 = (chi_to_channel_57_59 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %57*/
/*   %60 = and i32 %59, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_41))
begin
chi_to_channel_57_60_reg <= chi_to_channel_57_60;
if (reset == 1'b0 && ^(chi_to_channel_57_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_57_60_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %57*/
/*   %61 = icmp eq i32 %60, 0*/
begin
chi_to_channel_57_61 = (chi_to_channel_57_60 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %57*/
/*   %61 = icmp eq i32 %60, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_41))
begin
chi_to_channel_57_61_reg <= chi_to_channel_57_61;
if (reset == 1'b0 && ^(chi_to_channel_57_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_57_61_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %62*/
/*   %63 = getelementptr inbounds i32* %chi, i32 %47*/
begin
chi_to_channel_62_63 = (arg_chi + (4 * chi_to_channel_46_47_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %62*/
/*   %63 = getelementptr inbounds i32* %chi, i32 %47*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_42))
begin
chi_to_channel_62_63_reg <= chi_to_channel_62_63;
if (reset == 1'b0 && ^(chi_to_channel_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_62_63_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
begin
chi_to_channel_62_64 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_44))
begin
chi_to_channel_62_64_reg <= chi_to_channel_62_64;
if (reset == 1'b0 && ^(chi_to_channel_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_62_64_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %62*/
/*   %65 = or i32 %64, 208*/
begin
chi_to_channel_62_65 = (chi_to_channel_62_64 | 32'd208);
end
end
always @(posedge clk) begin
/* chi_to_channel: %62*/
/*   %65 = or i32 %64, 208*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_44))
begin
chi_to_channel_62_65_reg <= chi_to_channel_62_65;
if (reset == 1'b0 && ^(chi_to_channel_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_62_65_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %62*/
/*   %66 = icmp eq i32 %65, 211*/
begin
chi_to_channel_62_66 = (chi_to_channel_62_65 == 32'd211);
end
end
always @(posedge clk) begin
/* chi_to_channel: %62*/
/*   %66 = icmp eq i32 %65, 211*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_44))
begin
chi_to_channel_62_66_reg <= chi_to_channel_62_66;
if (reset == 1'b0 && ^(chi_to_channel_62_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_62_66_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %67*/
/*   %68 = and i32 %64, 16*/
begin
chi_to_channel_67_68 = (chi_to_channel_62_64_reg & 32'd16);
end
end
always @(posedge clk) begin
/* chi_to_channel: %67*/
/*   %68 = and i32 %64, 16*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_67_45))
begin
chi_to_channel_67_68_reg <= chi_to_channel_67_68;
if (reset == 1'b0 && ^(chi_to_channel_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_67_68_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %67*/
/*   %69 = icmp eq i32 %68, 0*/
begin
chi_to_channel_67_69 = (chi_to_channel_67_68 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %67*/
/*   %69 = icmp eq i32 %68, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_67_45))
begin
chi_to_channel_67_69_reg <= chi_to_channel_67_69;
if (reset == 1'b0 && ^(chi_to_channel_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_67_69_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %70*/
/*   %71 = sub nsw i32 %4, %47*/
begin
chi_to_channel_70_71 = (chi_to_channel_3_4_reg - chi_to_channel_46_47_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %70*/
/*   %71 = sub nsw i32 %4, %47*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_70_46))
begin
chi_to_channel_70_71_reg <= chi_to_channel_70_71;
if (reset == 1'b0 && ^(chi_to_channel_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_70_71_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %73*/
/*   %ofs.0 = phi i32 [ 1, %72 ], [ 0, %70 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 == 32'd4)))
begin
chi_to_channel_73_ofs_0 = 32'd0;
end
/* chi_to_channel: %73*/
/*   %ofs.0 = phi i32 [ 1, %72 ], [ 0, %70 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_72_47) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_73_ofs_0 = 32'd1;
end
end
always @(posedge clk) begin
/* chi_to_channel: %73*/
/*   %ofs.0 = phi i32 [ 1, %72 ], [ 0, %70 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 == 32'd4)))
begin
chi_to_channel_73_ofs_0_reg <= chi_to_channel_73_ofs_0;
if (reset == 1'b0 && ^(chi_to_channel_73_ofs_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_73_ofs_0_reg"); $finish; end
end
/* chi_to_channel: %73*/
/*   %ofs.0 = phi i32 [ 1, %72 ], [ 0, %70 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_72_47) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_73_ofs_0_reg <= chi_to_channel_73_ofs_0;
if (reset == 1'b0 && ^(chi_to_channel_73_ofs_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_73_ofs_0_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %73*/
/*   %tmp19 = add i32 %i.2, 2*/
begin
chi_to_channel_73_tmp19 = (chi_to_channel_46_i_2_reg + 32'd2);
end
end
always @(posedge clk) begin
/* chi_to_channel: %73*/
/*   %tmp19 = add i32 %i.2, 2*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_73_48))
begin
chi_to_channel_73_tmp19_reg <= chi_to_channel_73_tmp19;
if (reset == 1'b0 && ^(chi_to_channel_73_tmp19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_73_tmp19_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %map.0 = phi i32 [ 0, %73 ], [ %map.1, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_map_0 = 32'd0;
end
/* chi_to_channel: %74*/
/*   %map.0 = phi i32 [ 0, %73 ], [ %map.1, %90 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_74_map_0 = chi_to_channel_90_map_1_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %map.0 = phi i32 [ 0, %73 ], [ %map.1, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_map_0_reg <= chi_to_channel_74_map_0;
if (reset == 1'b0 && ^(chi_to_channel_74_map_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_map_0_reg"); $finish; end
end
/* chi_to_channel: %74*/
/*   %map.0 = phi i32 [ 0, %73 ], [ %map.1, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_map_0_reg <= chi_to_channel_74_map_0;
if (reset == 1'b0 && ^(chi_to_channel_74_map_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_map_0_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %75 = phi i32 [ 0, %73 ], [ %91, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_75 = 32'd0;
end
/* chi_to_channel: %74*/
/*   %75 = phi i32 [ 0, %73 ], [ %91, %90 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_74_75 = chi_to_channel_90_91;
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %75 = phi i32 [ 0, %73 ], [ %91, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_75_reg <= chi_to_channel_74_75;
if (reset == 1'b0 && ^(chi_to_channel_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_75_reg"); $finish; end
end
/* chi_to_channel: %74*/
/*   %75 = phi i32 [ 0, %73 ], [ %91, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_75_reg <= chi_to_channel_74_75;
if (reset == 1'b0 && ^(chi_to_channel_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_75_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %ch.0 = phi i32 [ 0, %73 ], [ %ch.2, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_ch_0 = 32'd0;
end
/* chi_to_channel: %74*/
/*   %ch.0 = phi i32 [ 0, %73 ], [ %ch.2, %90 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_74_ch_0 = chi_to_channel_90_ch_2_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %ch.0 = phi i32 [ 0, %73 ], [ %ch.2, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_73_48) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_ch_0_reg <= chi_to_channel_74_ch_0;
if (reset == 1'b0 && ^(chi_to_channel_74_ch_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_ch_0_reg"); $finish; end
end
/* chi_to_channel: %74*/
/*   %ch.0 = phi i32 [ 0, %73 ], [ %ch.2, %90 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_90_60) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_74_ch_0_reg <= chi_to_channel_74_ch_0;
if (reset == 1'b0 && ^(chi_to_channel_74_ch_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_ch_0_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %tmp20 = add i32 %tmp19, %75*/
begin
chi_to_channel_74_tmp20 = (chi_to_channel_73_tmp19_reg + chi_to_channel_74_75_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %tmp20 = add i32 %tmp19, %75*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_74_49))
begin
chi_to_channel_74_tmp20_reg <= chi_to_channel_74_tmp20;
if (reset == 1'b0 && ^(chi_to_channel_74_tmp20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_tmp20_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %scevgep21 = getelementptr i32* %chi, i32 %tmp20*/
begin
chi_to_channel_74_scevgep21 = (arg_chi + (4 * chi_to_channel_74_tmp20_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %scevgep21 = getelementptr i32* %chi, i32 %tmp20*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_74_50))
begin
chi_to_channel_74_scevgep21_reg <= chi_to_channel_74_scevgep21;
if (reset == 1'b0 && ^(chi_to_channel_74_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_scevgep21_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %74*/
/*   %76 = icmp slt i32 %75, 4*/
begin
chi_to_channel_74_76 = ($signed(chi_to_channel_74_75_reg) < $signed(32'd4));
end
end
always @(posedge clk) begin
/* chi_to_channel: %74*/
/*   %76 = icmp slt i32 %75, 4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_74_49))
begin
chi_to_channel_74_76_reg <= chi_to_channel_74_76;
if (reset == 1'b0 && ^(chi_to_channel_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_74_76_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %77*/
/*   %p.0 = add i32 %47, %75*/
begin
chi_to_channel_77_p_0 = (chi_to_channel_46_47_reg + chi_to_channel_74_75_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %77*/
/*   %p.0 = add i32 %47, %75*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_77_51))
begin
chi_to_channel_77_p_0_reg <= chi_to_channel_77_p_0;
if (reset == 1'b0 && ^(chi_to_channel_77_p_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_77_p_0_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %77*/
/*   %78 = icmp slt i32 %p.0, %4*/
begin
chi_to_channel_77_78 = ($signed(chi_to_channel_77_p_0) < $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %77*/
/*   %78 = icmp slt i32 %p.0, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_77_51))
begin
chi_to_channel_77_78_reg <= chi_to_channel_77_78;
if (reset == 1'b0 && ^(chi_to_channel_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_77_78_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %79*/
/*   %80 = add nsw i32 %ch.0, 8*/
begin
chi_to_channel_79_80 = (chi_to_channel_74_ch_0_reg + 32'd8);
end
end
always @(posedge clk) begin
/* chi_to_channel: %79*/
/*   %80 = add nsw i32 %ch.0, 8*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
chi_to_channel_79_80_reg <= chi_to_channel_79_80;
if (reset == 1'b0 && ^(chi_to_channel_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_79_80_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %79*/
/*   %81 = shl i32 %map.0, 8*/
begin
chi_to_channel_79_81 = (chi_to_channel_74_map_0_reg <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %79*/
/*   %81 = shl i32 %map.0, 8*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
chi_to_channel_79_81_reg <= chi_to_channel_79_81;
if (reset == 1'b0 && ^(chi_to_channel_79_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_79_81_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
begin
chi_to_channel_79_82 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_54))
begin
chi_to_channel_79_82_reg <= chi_to_channel_79_82;
if (reset == 1'b0 && ^(chi_to_channel_79_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_79_82_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %79*/
/*   %83 = icmp eq i32 %82, 0*/
begin
chi_to_channel_79_83 = (chi_to_channel_79_82 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %79*/
/*   %83 = icmp eq i32 %82, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_54))
begin
chi_to_channel_79_83_reg <= chi_to_channel_79_83;
if (reset == 1'b0 && ^(chi_to_channel_79_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_79_83_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader6*/
/*   %84 = and i32 %82, 1*/
begin
chi_to_channel__preheader6_84 = (chi_to_channel_79_82_reg & 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader6*/
/*   %84 = and i32 %82, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55))
begin
chi_to_channel__preheader6_84_reg <= chi_to_channel__preheader6_84;
if (reset == 1'b0 && ^(chi_to_channel__preheader6_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader6_84_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader6*/
/*   %85 = icmp eq i32 %84, 0*/
begin
chi_to_channel__preheader6_85 = (chi_to_channel__preheader6_84 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader6*/
/*   %85 = icmp eq i32 %84, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55))
begin
chi_to_channel__preheader6_85_reg <= chi_to_channel__preheader6_85;
if (reset == 1'b0 && ^(chi_to_channel__preheader6_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader6_85_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.lr.ph*/
/*   %ch.17 = phi i32 [ %tmp18, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__lr_ph_ch_17 = 32'd0;
end
/* chi_to_channel: %.lr.ph*/
/*   %ch.17 = phi i32 [ %tmp18, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__lr_ph_88 == 1'd1))) */
begin
chi_to_channel__lr_ph_ch_17 = chi_to_channel__lr_ph_tmp18;
end
end
always @(posedge clk) begin
/* chi_to_channel: %.lr.ph*/
/*   %ch.17 = phi i32 [ %tmp18, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__lr_ph_ch_17_reg <= chi_to_channel__lr_ph_ch_17;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_ch_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_ch_17_reg"); $finish; end
end
/* chi_to_channel: %.lr.ph*/
/*   %ch.17 = phi i32 [ %tmp18, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__lr_ph_88 == 1'd1)))
begin
chi_to_channel__lr_ph_ch_17_reg <= chi_to_channel__lr_ph_ch_17;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_ch_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_ch_17_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.lr.ph*/
/*   %tmp18 = add i32 %ch.17, 1*/
begin
chi_to_channel__lr_ph_tmp18 = (chi_to_channel__lr_ph_ch_17_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.lr.ph*/
/*   %tmp18 = add i32 %ch.17, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57))
begin
chi_to_channel__lr_ph_tmp18_reg <= chi_to_channel__lr_ph_tmp18;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_tmp18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_tmp18_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.lr.ph*/
/*   %86 = shl i32 1, %tmp18*/
begin
chi_to_channel__lr_ph_86 = (32'd1 <<< (chi_to_channel__lr_ph_tmp18 % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %.lr.ph*/
/*   %86 = shl i32 1, %tmp18*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57))
begin
chi_to_channel__lr_ph_86_reg <= chi_to_channel__lr_ph_86;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_86_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.lr.ph*/
/*   %87 = and i32 %82, %86*/
begin
chi_to_channel__lr_ph_87 = (chi_to_channel_79_82_reg & chi_to_channel__lr_ph_86);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.lr.ph*/
/*   %87 = and i32 %82, %86*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57))
begin
chi_to_channel__lr_ph_87_reg <= chi_to_channel__lr_ph_87;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_87_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.lr.ph*/
/*   %88 = icmp eq i32 %87, 0*/
begin
chi_to_channel__lr_ph_88 = (chi_to_channel__lr_ph_87 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.lr.ph*/
/*   %88 = icmp eq i32 %87, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__lr_ph_57))
begin
chi_to_channel__lr_ph_88_reg <= chi_to_channel__lr_ph_88;
if (reset == 1'b0 && ^(chi_to_channel__lr_ph_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__lr_ph_88_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %._crit_edge*/
/*   %ch.1.lcssa = phi i32 [ 0, %.preheader6 ], [ %tmp18, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader6_85 == 1'd0)))
begin
chi_to_channel___crit_edge_ch_1_lcssa = 32'd0;
end
/* chi_to_channel: %._crit_edge*/
/*   %ch.1.lcssa = phi i32 [ 0, %.preheader6 ], [ %tmp18, %._crit_edge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel___crit_edge_ch_1_lcssa = chi_to_channel__lr_ph_tmp18_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %._crit_edge*/
/*   %ch.1.lcssa = phi i32 [ 0, %.preheader6 ], [ %tmp18, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__preheader6_55) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__preheader6_85 == 1'd0)))
begin
chi_to_channel___crit_edge_ch_1_lcssa_reg <= chi_to_channel___crit_edge_ch_1_lcssa;
if (reset == 1'b0 && ^(chi_to_channel___crit_edge_ch_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel___crit_edge_ch_1_lcssa_reg"); $finish; end
end
/* chi_to_channel: %._crit_edge*/
/*   %ch.1.lcssa = phi i32 [ 0, %.preheader6 ], [ %tmp18, %._crit_edge.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_loopexit_58) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel___crit_edge_ch_1_lcssa_reg <= chi_to_channel___crit_edge_ch_1_lcssa;
if (reset == 1'b0 && ^(chi_to_channel___crit_edge_ch_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel___crit_edge_ch_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %._crit_edge*/
/*   %89 = or i32 %82, %81*/
begin
chi_to_channel___crit_edge_89 = (chi_to_channel_79_82_reg | chi_to_channel_79_81_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %._crit_edge*/
/*   %89 = or i32 %82, %81*/
if ((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59))
begin
chi_to_channel___crit_edge_89_reg <= chi_to_channel___crit_edge_89;
if (reset == 1'b0 && ^(chi_to_channel___crit_edge_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel___crit_edge_89_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %90*/
/*   %map.1 = phi i32 [ %89, %._crit_edge ], [ %81, %79 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd1)))
begin
chi_to_channel_90_map_1 = chi_to_channel_79_81_reg;
end
/* chi_to_channel: %90*/
/*   %map.1 = phi i32 [ %89, %._crit_edge ], [ %81, %79 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_90_map_1 = chi_to_channel___crit_edge_89;
end
end
always @(posedge clk) begin
/* chi_to_channel: %90*/
/*   %map.1 = phi i32 [ %89, %._crit_edge ], [ %81, %79 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd1)))
begin
chi_to_channel_90_map_1_reg <= chi_to_channel_90_map_1;
if (reset == 1'b0 && ^(chi_to_channel_90_map_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_90_map_1_reg"); $finish; end
end
/* chi_to_channel: %90*/
/*   %map.1 = phi i32 [ %89, %._crit_edge ], [ %81, %79 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_90_map_1_reg <= chi_to_channel_90_map_1;
if (reset == 1'b0 && ^(chi_to_channel_90_map_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_90_map_1_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %90*/
/*   %ch.2 = phi i32 [ %ch.1.lcssa, %._crit_edge ], [ %80, %79 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd1)))
begin
chi_to_channel_90_ch_2 = chi_to_channel_79_80_reg;
end
/* chi_to_channel: %90*/
/*   %ch.2 = phi i32 [ %ch.1.lcssa, %._crit_edge ], [ %80, %79 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_90_ch_2 = chi_to_channel___crit_edge_ch_1_lcssa_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %90*/
/*   %ch.2 = phi i32 [ %ch.1.lcssa, %._crit_edge ], [ %80, %79 ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_79_54) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_79_83 == 1'd1)))
begin
chi_to_channel_90_ch_2_reg <= chi_to_channel_90_ch_2;
if (reset == 1'b0 && ^(chi_to_channel_90_ch_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_90_ch_2_reg"); $finish; end
end
/* chi_to_channel: %90*/
/*   %ch.2 = phi i32 [ %ch.1.lcssa, %._crit_edge ], [ %80, %79 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB___crit_edge_59) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_90_ch_2_reg <= chi_to_channel_90_ch_2;
if (reset == 1'b0 && ^(chi_to_channel_90_ch_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_90_ch_2_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %90*/
/*   %91 = add nsw i32 %75, 1*/
begin
chi_to_channel_90_91 = (chi_to_channel_74_75_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %90*/
/*   %91 = add nsw i32 %75, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_90_60))
begin
chi_to_channel_90_91_reg <= chi_to_channel_90_91;
if (reset == 1'b0 && ^(chi_to_channel_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_90_91_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge3*/
/*   %92 = add nsw i32 %ch.0, %ofs.0*/
begin
chi_to_channel__critedge3_92 = (chi_to_channel_74_ch_0_reg + chi_to_channel_73_ofs_0_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge3*/
/*   %92 = add nsw i32 %ch.0, %ofs.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61))
begin
chi_to_channel__critedge3_92_reg <= chi_to_channel__critedge3_92;
if (reset == 1'b0 && ^(chi_to_channel__critedge3_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge3_92_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge3*/
/*   %93 = shl i32 %map.0, %ofs.0*/
begin
chi_to_channel__critedge3_93 = (chi_to_channel_74_map_0_reg <<< (chi_to_channel_73_ofs_0_reg % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge3*/
/*   %93 = shl i32 %map.0, %ofs.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61))
begin
chi_to_channel__critedge3_93_reg <= chi_to_channel__critedge3_93;
if (reset == 1'b0 && ^(chi_to_channel__critedge3_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge3_93_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %94*/
/*   %95 = add nsw i32 %i.3, 1*/
begin
chi_to_channel_94_95 = (chi_to_channel_48_i_3_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %94*/
/*   %95 = add nsw i32 %i.3, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_62))
begin
chi_to_channel_94_95_reg <= chi_to_channel_94_95;
if (reset == 1'b0 && ^(chi_to_channel_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_94_95_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %94*/
/*   %96 = getelementptr inbounds i32* %chi, i32 %95*/
begin
chi_to_channel_94_96 = (arg_chi + (4 * chi_to_channel_94_95_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %94*/
/*   %96 = getelementptr inbounds i32* %chi, i32 %95*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_63))
begin
chi_to_channel_94_96_reg <= chi_to_channel_94_96;
if (reset == 1'b0 && ^(chi_to_channel_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_94_96_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
begin
chi_to_channel_94_97 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_65))
begin
chi_to_channel_94_97_reg <= chi_to_channel_94_97;
if (reset == 1'b0 && ^(chi_to_channel_94_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_94_97_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %94*/
/*   %98 = and i32 %97, 63*/
begin
chi_to_channel_94_98 = (chi_to_channel_94_97 & 32'd63);
end
end
always @(posedge clk) begin
/* chi_to_channel: %94*/
/*   %98 = and i32 %97, 63*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_65))
begin
chi_to_channel_94_98_reg <= chi_to_channel_94_98;
if (reset == 1'b0 && ^(chi_to_channel_94_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_94_98_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %99*/
/*   %100 = sub nsw i32 %4, %95*/
begin
chi_to_channel_99_100 = (chi_to_channel_3_4_reg - chi_to_channel_94_95_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %99*/
/*   %100 = sub nsw i32 %4, %95*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_99_66))
begin
chi_to_channel_99_100_reg <= chi_to_channel_99_100;
if (reset == 1'b0 && ^(chi_to_channel_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_99_100_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %99*/
/*   %101 = icmp sgt i32 %100, 30*/
begin
chi_to_channel_99_101 = ($signed(chi_to_channel_99_100) > $signed(32'd30));
end
end
always @(posedge clk) begin
/* chi_to_channel: %99*/
/*   %101 = icmp sgt i32 %100, 30*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_99_66))
begin
chi_to_channel_99_101_reg <= chi_to_channel_99_101;
if (reset == 1'b0 && ^(chi_to_channel_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_99_101_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader9*/
/*   %tmp29 = add i32 %i.2, 2*/
begin
chi_to_channel__preheader9_tmp29 = (chi_to_channel_46_i_2_reg + 32'd2);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader9*/
/*   %tmp29 = add i32 %i.2, 2*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67))
begin
chi_to_channel__preheader9_tmp29_reg <= chi_to_channel__preheader9_tmp29;
if (reset == 1'b0 && ^(chi_to_channel__preheader9_tmp29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader9_tmp29_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader9*/
/*   %tmp30 = add i32 %tmp29, %49*/
begin
chi_to_channel__preheader9_tmp30 = (chi_to_channel__preheader9_tmp29 + chi_to_channel_48_49_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader9*/
/*   %tmp30 = add i32 %tmp29, %49*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67))
begin
chi_to_channel__preheader9_tmp30_reg <= chi_to_channel__preheader9_tmp30;
if (reset == 1'b0 && ^(chi_to_channel__preheader9_tmp30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader9_tmp30_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %102*/
/*   %indvar25 = phi i32 [ 0, %.preheader9 ], [ %indvar.next26, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_indvar25 = 32'd0;
end
/* chi_to_channel: %102*/
/*   %indvar25 = phi i32 [ 0, %.preheader9 ], [ %indvar.next26, %108 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_102_indvar25 = chi_to_channel_108_indvar_next26;
end
end
always @(posedge clk) begin
/* chi_to_channel: %102*/
/*   %indvar25 = phi i32 [ 0, %.preheader9 ], [ %indvar.next26, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_indvar25_reg <= chi_to_channel_102_indvar25;
if (reset == 1'b0 && ^(chi_to_channel_102_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_indvar25_reg"); $finish; end
end
/* chi_to_channel: %102*/
/*   %indvar25 = phi i32 [ 0, %.preheader9 ], [ %indvar.next26, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_indvar25_reg <= chi_to_channel_102_indvar25;
if (reset == 1'b0 && ^(chi_to_channel_102_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_indvar25_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %102*/
/*   %map.2 = phi i32 [ 0, %.preheader9 ], [ %110, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_map_2 = 32'd0;
end
/* chi_to_channel: %102*/
/*   %map.2 = phi i32 [ 0, %.preheader9 ], [ %110, %108 ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel_102_map_2 = chi_to_channel_108_110;
end
end
always @(posedge clk) begin
/* chi_to_channel: %102*/
/*   %map.2 = phi i32 [ 0, %.preheader9 ], [ %110, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader9_67) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_map_2_reg <= chi_to_channel_102_map_2;
if (reset == 1'b0 && ^(chi_to_channel_102_map_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_map_2_reg"); $finish; end
end
/* chi_to_channel: %102*/
/*   %map.2 = phi i32 [ 0, %.preheader9 ], [ %110, %108 ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_108_72) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_102_map_2_reg <= chi_to_channel_102_map_2;
if (reset == 1'b0 && ^(chi_to_channel_102_map_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_map_2_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %102*/
/*   %i.5 = add i32 %tmp30, %indvar25*/
begin
chi_to_channel_102_i_5 = (chi_to_channel__preheader9_tmp30_reg + chi_to_channel_102_indvar25_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %102*/
/*   %i.5 = add i32 %tmp30, %indvar25*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_102_68))
begin
chi_to_channel_102_i_5_reg <= chi_to_channel_102_i_5;
if (reset == 1'b0 && ^(chi_to_channel_102_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_i_5_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %102*/
/*   %103 = icmp sgt i32 %i.5, %4*/
begin
chi_to_channel_102_103 = ($signed(chi_to_channel_102_i_5) > $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %102*/
/*   %103 = icmp sgt i32 %i.5, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_102_68))
begin
chi_to_channel_102_103_reg <= chi_to_channel_102_103;
if (reset == 1'b0 && ^(chi_to_channel_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_102_103_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %104*/
/*   %scevgep32 = getelementptr i32* %chi, i32 %i.5*/
begin
chi_to_channel_104_scevgep32 = (arg_chi + (4 * chi_to_channel_102_i_5_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %104*/
/*   %scevgep32 = getelementptr i32* %chi, i32 %i.5*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_69))
begin
chi_to_channel_104_scevgep32_reg <= chi_to_channel_104_scevgep32;
if (reset == 1'b0 && ^(chi_to_channel_104_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_104_scevgep32_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
begin
chi_to_channel_104_105 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_71))
begin
chi_to_channel_104_105_reg <= chi_to_channel_104_105;
if (reset == 1'b0 && ^(chi_to_channel_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_104_105_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %104*/
/*   %106 = and i32 %105, 127*/
begin
chi_to_channel_104_106 = (chi_to_channel_104_105 & 32'd127);
end
end
always @(posedge clk) begin
/* chi_to_channel: %104*/
/*   %106 = and i32 %105, 127*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_71))
begin
chi_to_channel_104_106_reg <= chi_to_channel_104_106;
if (reset == 1'b0 && ^(chi_to_channel_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_104_106_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %104*/
/*   %107 = icmp ugt i32 %106, 31*/
begin
chi_to_channel_104_107 = (chi_to_channel_104_106 > 32'd31);
end
end
always @(posedge clk) begin
/* chi_to_channel: %104*/
/*   %107 = icmp ugt i32 %106, 31*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_71))
begin
chi_to_channel_104_107_reg <= chi_to_channel_104_107;
if (reset == 1'b0 && ^(chi_to_channel_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_104_107_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %108*/
/*   %109 = shl i32 1, %106*/
begin
chi_to_channel_108_109 = (32'd1 <<< (chi_to_channel_104_106_reg % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %108*/
/*   %109 = shl i32 1, %106*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_108_72))
begin
chi_to_channel_108_109_reg <= chi_to_channel_108_109;
if (reset == 1'b0 && ^(chi_to_channel_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_108_109_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %108*/
/*   %110 = or i32 %109, %map.2*/
begin
chi_to_channel_108_110 = (chi_to_channel_108_109 | chi_to_channel_102_map_2_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %108*/
/*   %110 = or i32 %109, %map.2*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_108_72))
begin
chi_to_channel_108_110_reg <= chi_to_channel_108_110;
if (reset == 1'b0 && ^(chi_to_channel_108_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_108_110_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %108*/
/*   %indvar.next26 = add i32 %indvar25, 1*/
begin
chi_to_channel_108_indvar_next26 = (chi_to_channel_102_indvar25_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %108*/
/*   %indvar.next26 = add i32 %indvar25, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_108_72))
begin
chi_to_channel_108_indvar_next26_reg <= chi_to_channel_108_indvar_next26;
if (reset == 1'b0 && ^(chi_to_channel_108_indvar_next26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_108_indvar_next26_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %111*/
/*   %112 = icmp ne i32 %95, %4*/
begin
chi_to_channel_111_112 = (chi_to_channel_94_95_reg != chi_to_channel_3_4_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %111*/
/*   %112 = icmp ne i32 %95, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_111_73))
begin
chi_to_channel_111_112_reg <= chi_to_channel_111_112;
if (reset == 1'b0 && ^(chi_to_channel_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_111_112_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %111*/
/*   %113 = icmp ugt i32 %98, 31*/
begin
chi_to_channel_111_113 = (chi_to_channel_94_98_reg > 32'd31);
end
end
always @(posedge clk) begin
/* chi_to_channel: %111*/
/*   %113 = icmp ugt i32 %98, 31*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_111_73))
begin
chi_to_channel_111_113_reg <= chi_to_channel_111_113;
if (reset == 1'b0 && ^(chi_to_channel_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_111_113_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %111*/
/*   %or.cond5 = or i1 %112, %113*/
begin
chi_to_channel_111_or_cond5 = (chi_to_channel_111_112 | chi_to_channel_111_113);
end
end
always @(posedge clk) begin
/* chi_to_channel: %111*/
/*   %or.cond5 = or i1 %112, %113*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_111_73))
begin
chi_to_channel_111_or_cond5_reg <= chi_to_channel_111_or_cond5;
if (reset == 1'b0 && ^(chi_to_channel_111_or_cond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_111_or_cond5_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %114*/
/*   %115 = shl i32 1, %98*/
begin
chi_to_channel_114_115 = (32'd1 <<< (chi_to_channel_94_98_reg % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %114*/
/*   %115 = shl i32 1, %98*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_114_74))
begin
chi_to_channel_114_115_reg <= chi_to_channel_114_115;
if (reset == 1'b0 && ^(chi_to_channel_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_114_115_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.loopexit*/
/*   %map.3 = phi i32 [ %115, %114 ], [ %map.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_114_74) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit_map_3 = chi_to_channel_114_115;
end
/* chi_to_channel: %.loopexit*/
/*   %map.3 = phi i32 [ %115, %114 ], [ %map.2, %.loopexit.loopexit ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel__loopexit_map_3 = chi_to_channel_102_map_2_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %.loopexit*/
/*   %map.3 = phi i32 [ %115, %114 ], [ %map.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_114_74) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit_map_3_reg <= chi_to_channel__loopexit_map_3;
if (reset == 1'b0 && ^(chi_to_channel__loopexit_map_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit_map_3_reg"); $finish; end
end
/* chi_to_channel: %.loopexit*/
/*   %map.3 = phi i32 [ %115, %114 ], [ %map.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_loopexit_75) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit_map_3_reg <= chi_to_channel__loopexit_map_3;
if (reset == 1'b0 && ^(chi_to_channel__loopexit_map_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit_map_3_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.loopexit*/
/*   %116 = and i32 %97, 64*/
begin
chi_to_channel__loopexit_116 = (chi_to_channel_94_97_reg & 32'd64);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.loopexit*/
/*   %116 = and i32 %97, 64*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76))
begin
chi_to_channel__loopexit_116_reg <= chi_to_channel__loopexit_116;
if (reset == 1'b0 && ^(chi_to_channel__loopexit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit_116_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.loopexit*/
/*   %117 = icmp eq i32 %116, 0*/
begin
chi_to_channel__loopexit_117 = (chi_to_channel__loopexit_116 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.loopexit*/
/*   %117 = icmp eq i32 %116, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76))
begin
chi_to_channel__loopexit_117_reg <= chi_to_channel__loopexit_117;
if (reset == 1'b0 && ^(chi_to_channel__loopexit_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit_117_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %118*/
/*   %map.4 = phi i32 [ %93, %.critedge3 ], [ %map.3, %.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_118_map_4 = chi_to_channel__critedge3_93;
end
/* chi_to_channel: %118*/
/*   %map.4 = phi i32 [ %93, %.critedge3 ], [ %map.3, %.loopexit ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd1))) */
begin
chi_to_channel_118_map_4 = chi_to_channel__loopexit_map_3_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %118*/
/*   %map.4 = phi i32 [ %93, %.critedge3 ], [ %map.3, %.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_118_map_4_reg <= chi_to_channel_118_map_4;
if (reset == 1'b0 && ^(chi_to_channel_118_map_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_118_map_4_reg"); $finish; end
end
/* chi_to_channel: %118*/
/*   %map.4 = phi i32 [ %93, %.critedge3 ], [ %map.3, %.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd1)))
begin
chi_to_channel_118_map_4_reg <= chi_to_channel_118_map_4;
if (reset == 1'b0 && ^(chi_to_channel_118_map_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_118_map_4_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %118*/
/*   %ch.3 = phi i32 [ %92, %.critedge3 ], [ %98, %.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_118_ch_3 = chi_to_channel__critedge3_92;
end
/* chi_to_channel: %118*/
/*   %ch.3 = phi i32 [ %92, %.critedge3 ], [ %98, %.loopexit ]*/
else /* if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd1))) */
begin
chi_to_channel_118_ch_3 = chi_to_channel_94_98_reg;
end
end
always @(posedge clk) begin
/* chi_to_channel: %118*/
/*   %ch.3 = phi i32 [ %92, %.critedge3 ], [ %98, %.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__critedge3_61) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel_118_ch_3_reg <= chi_to_channel_118_ch_3;
if (reset == 1'b0 && ^(chi_to_channel_118_ch_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_118_ch_3_reg"); $finish; end
end
/* chi_to_channel: %118*/
/*   %ch.3 = phi i32 [ %92, %.critedge3 ], [ %98, %.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd1)))
begin
chi_to_channel_118_ch_3_reg <= chi_to_channel_118_ch_3;
if (reset == 1'b0 && ^(chi_to_channel_118_ch_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_118_ch_3_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %120*/
/*   %121 = shl i32 1, %ch.3*/
begin
chi_to_channel_120_121 = (32'd1 <<< (chi_to_channel_118_ch_3_reg % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %120*/
/*   %121 = shl i32 1, %ch.3*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_120_80))
begin
chi_to_channel_120_121_reg <= chi_to_channel_120_121;
if (reset == 1'b0 && ^(chi_to_channel_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_120_121_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %120*/
/*   %122 = icmp eq i32 %map.4, %121*/
begin
chi_to_channel_120_122 = (chi_to_channel_118_map_4_reg == chi_to_channel_120_121);
end
end
always @(posedge clk) begin
/* chi_to_channel: %120*/
/*   %122 = icmp eq i32 %map.4, %121*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_120_80))
begin
chi_to_channel_120_122_reg <= chi_to_channel_120_122;
if (reset == 1'b0 && ^(chi_to_channel_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_120_122_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %123*/
/*   %124 = or i32 %ch.3, %31*/
begin
chi_to_channel_123_124 = (chi_to_channel_118_ch_3_reg | chi_to_channel_29_31_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %123*/
/*   %124 = or i32 %ch.3, %31*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_123_81))
begin
chi_to_channel_123_124_reg <= chi_to_channel_123_124;
if (reset == 1'b0 && ^(chi_to_channel_123_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_123_124_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader13*/
/*   %indvar37 = phi i32 [ %phitmp, %130 ], [ 1, %.preheader13.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__preheader13_indvar37 = 32'd1;
end
/* chi_to_channel: %.preheader13*/
/*   %indvar37 = phi i32 [ %phitmp, %130 ], [ 1, %.preheader13.preheader ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB_130_86) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel__preheader13_indvar37 = chi_to_channel_130_phitmp;
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader13*/
/*   %indvar37 = phi i32 [ %phitmp, %130 ], [ 1, %.preheader13.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__preheader13_indvar37_reg <= chi_to_channel__preheader13_indvar37;
if (reset == 1'b0 && ^(chi_to_channel__preheader13_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader13_indvar37_reg"); $finish; end
end
/* chi_to_channel: %.preheader13*/
/*   %indvar37 = phi i32 [ %phitmp, %130 ], [ 1, %.preheader13.preheader ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_130_86) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__preheader13_indvar37_reg <= chi_to_channel__preheader13_indvar37;
if (reset == 1'b0 && ^(chi_to_channel__preheader13_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader13_indvar37_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.preheader13*/
/*   %125 = icmp slt i32 %indvar37, %4*/
begin
chi_to_channel__preheader13_125 = ($signed(chi_to_channel__preheader13_indvar37_reg) < $signed(chi_to_channel_3_4_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %.preheader13*/
/*   %125 = icmp slt i32 %indvar37, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__preheader13_82))
begin
chi_to_channel__preheader13_125_reg <= chi_to_channel__preheader13_125;
if (reset == 1'b0 && ^(chi_to_channel__preheader13_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__preheader13_125_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %126*/
/*   %scevgep40 = getelementptr i32* %chi, i32 %indvar37*/
begin
chi_to_channel_126_scevgep40 = (arg_chi + (4 * chi_to_channel__preheader13_indvar37_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %126*/
/*   %scevgep40 = getelementptr i32* %chi, i32 %indvar37*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_83))
begin
chi_to_channel_126_scevgep40_reg <= chi_to_channel_126_scevgep40;
if (reset == 1'b0 && ^(chi_to_channel_126_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_126_scevgep40_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
begin
chi_to_channel_126_127 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_85))
begin
chi_to_channel_126_127_reg <= chi_to_channel_126_127;
if (reset == 1'b0 && ^(chi_to_channel_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_126_127_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %126*/
/*   %128 = and i32 %127, 128*/
begin
chi_to_channel_126_128 = (chi_to_channel_126_127 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %126*/
/*   %128 = and i32 %127, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_85))
begin
chi_to_channel_126_128_reg <= chi_to_channel_126_128;
if (reset == 1'b0 && ^(chi_to_channel_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_126_128_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %126*/
/*   %129 = icmp eq i32 %128, 0*/
begin
chi_to_channel_126_129 = (chi_to_channel_126_128 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %126*/
/*   %129 = icmp eq i32 %128, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_85))
begin
chi_to_channel_126_129_reg <= chi_to_channel_126_129;
if (reset == 1'b0 && ^(chi_to_channel_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_126_129_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %130*/
/*   %phitmp = add i32 %indvar37, 1*/
begin
chi_to_channel_130_phitmp = (chi_to_channel__preheader13_indvar37_reg + 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %130*/
/*   %phitmp = add i32 %indvar37, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_130_86))
begin
chi_to_channel_130_phitmp_reg <= chi_to_channel_130_phitmp;
if (reset == 1'b0 && ^(chi_to_channel_130_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_130_phitmp_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.critedge4*/
/*   %131 = icmp eq i32 %indvar37, %4*/
begin
chi_to_channel__critedge4_131 = (chi_to_channel__preheader13_indvar37_reg == chi_to_channel_3_4_reg);
end
end
always @(posedge clk) begin
/* chi_to_channel: %.critedge4*/
/*   %131 = icmp eq i32 %indvar37, %4*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87))
begin
chi_to_channel__critedge4_131_reg <= chi_to_channel__critedge4_131;
if (reset == 1'b0 && ^(chi_to_channel__critedge4_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__critedge4_131_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %132*/
/*   %133 = getelementptr inbounds i32* %chi, i32 %indvar37*/
begin
chi_to_channel_132_133 = (arg_chi + (4 * chi_to_channel__preheader13_indvar37_reg));
end
end
always @(posedge clk) begin
/* chi_to_channel: %132*/
/*   %133 = getelementptr inbounds i32* %chi, i32 %indvar37*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_88))
begin
chi_to_channel_132_133_reg <= chi_to_channel_132_133;
if (reset == 1'b0 && ^(chi_to_channel_132_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_132_133_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
begin
chi_to_channel_132_134 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_90))
begin
chi_to_channel_132_134_reg <= chi_to_channel_132_134;
if (reset == 1'b0 && ^(chi_to_channel_132_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_132_134_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %132*/
/*   %135 = and i32 %134, 128*/
begin
chi_to_channel_132_135 = (chi_to_channel_132_134 & 32'd128);
end
end
always @(posedge clk) begin
/* chi_to_channel: %132*/
/*   %135 = and i32 %134, 128*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_90))
begin
chi_to_channel_132_135_reg <= chi_to_channel_132_135;
if (reset == 1'b0 && ^(chi_to_channel_132_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_132_135_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %132*/
/*   %136 = icmp eq i32 %135, 0*/
begin
chi_to_channel_132_136 = (chi_to_channel_132_135 == 32'd0);
end
end
always @(posedge clk) begin
/* chi_to_channel: %132*/
/*   %136 = icmp eq i32 %135, 0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_90))
begin
chi_to_channel_132_136_reg <= chi_to_channel_132_136;
if (reset == 1'b0 && ^(chi_to_channel_132_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_132_136_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %137*/
/*   %138 = shl i32 %8, 3*/
begin
chi_to_channel_137_138 = (chi_to_channel_6_8_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* chi_to_channel: %137*/
/*   %138 = shl i32 %8, 3*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_137_91))
begin
chi_to_channel_137_138_reg <= chi_to_channel_137_138;
if (reset == 1'b0 && ^(chi_to_channel_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_137_138_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %137*/
/*   %139 = and i32 %138, 64*/
begin
chi_to_channel_137_139 = (chi_to_channel_137_138 & 32'd64);
end
end
always @(posedge clk) begin
/* chi_to_channel: %137*/
/*   %139 = and i32 %138, 64*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_137_91))
begin
chi_to_channel_137_139_reg <= chi_to_channel_137_139;
if (reset == 1'b0 && ^(chi_to_channel_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_137_139_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %137*/
/*   %140 = or i32 %8, 152*/
begin
chi_to_channel_137_140 = (chi_to_channel_6_8_reg | 32'd152);
end
end
always @(posedge clk) begin
/* chi_to_channel: %137*/
/*   %140 = or i32 %8, 152*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_137_91))
begin
chi_to_channel_137_140_reg <= chi_to_channel_137_140;
if (reset == 1'b0 && ^(chi_to_channel_137_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_137_140_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %143*/
/*   %144 = or i32 %139, 1*/
begin
chi_to_channel_143_144 = (chi_to_channel_137_139_reg | 32'd1);
end
end
always @(posedge clk) begin
/* chi_to_channel: %143*/
/*   %144 = or i32 %139, 1*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_143_95))
begin
chi_to_channel_143_144_reg <= chi_to_channel_143_144;
if (reset == 1'b0 && ^(chi_to_channel_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_143_144_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %147*/
/*   %148 = or i32 %139, 2*/
begin
chi_to_channel_147_148 = (chi_to_channel_137_139_reg | 32'd2);
end
end
always @(posedge clk) begin
/* chi_to_channel: %147*/
/*   %148 = or i32 %139, 2*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_147_99))
begin
chi_to_channel_147_148_reg <= chi_to_channel_147_148;
if (reset == 1'b0 && ^(chi_to_channel_147_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_147_148_reg"); $finish; end
end
end
always @(*) begin
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_3_5 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd255;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_11_11) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_11_or_cond == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd253;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge_20 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_21_20) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_21_25 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_26_21) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_26_28 == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge1_40 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge2_56 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_57_41) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_57_61 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_62_44) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_62_66 == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 != 32'd4)) & (chi_to_channel_70_71 != 32'd3)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_99_66) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_99_101 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_111_73) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_111_or_cond5 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_120_80) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_120_122 == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_123_81) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = chi_to_channel_123_124;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge4_131 == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_132_90) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_132_136 == 1'd1)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd152)))
begin
chi_to_channel__loopexit10__0 = 32'd0;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_143_95) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = chi_to_channel_143_144;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_147_99) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = chi_to_channel_147_148;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_149_100) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd255;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_150_101) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd253;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else if (((cur_state == LEGUP_F_chi_to_channel_BB_151_102) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
else /* if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) & (memory_controller_waitrequest == 1'd0))) */
begin
chi_to_channel__loopexit10__0 = 32'd254;
end
end
always @(posedge clk) begin
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_3_5 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_11_11) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_11_or_cond == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge_17) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge_20 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_21_20) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_21_25 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_26_21) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_26_28 == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge1_28) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge1_40 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_41_31) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_41_45 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge2_38) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge2_56 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_57_41) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_57_61 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_62_44) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_62_66 == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((((cur_state == LEGUP_F_chi_to_channel_BB_70_46) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_70_71 != 32'd4)) & (chi_to_channel_70_71 != 32'd3)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_99_66) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_99_101 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_111_73) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_111_or_cond5 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__loopexit_76) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__loopexit_117 == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_120_80) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_120_122 == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_123_81) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB__critedge4_87) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel__critedge4_131 == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_132_90) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_132_136 == 1'd1)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if ((((cur_state == LEGUP_F_chi_to_channel_BB_137_91) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_137_140 == 32'd152)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_143_95) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_147_99) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_149_100) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_150_101) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB_151_102) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   %.0 = phi i32 [ %124, %123 ], [ 254, %151 ], [ 253, %150 ], [ 255, %149 ], [ %148, %147 ], [ %144, %143 ], [ 255, %3 ], [ 253, %11 ], [ 254, %21 ], [ 254, %.critedge ], [ 254, %26 ], [ 254, %41 ], [ 254, %.critedge1 ], [ 254, %57 ], [ 254, %.critedge2 ], [ 254, %62 ], [ 254, %70 ], [ 254, %99 ], [ 254, %111 ], [ 254, %.loopexit ], [ 254, %120 ], [ 254, %132 ], [ 254, %.critedge4 ], [ 0, %137 ], [ 254, %.loopexit10.loopexit ]*/
if (((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_loopexit_103) & (memory_controller_waitrequest == 1'd0)))
begin
chi_to_channel__loopexit10__0_reg <= chi_to_channel__loopexit10__0;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel__loopexit10__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_104))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* chi_to_channel: %2*/
/*   store i32 0, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_2_2))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_4))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_7))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_14))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_18))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_29))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_34))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_39))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_42))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_63))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_69))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %119*/
/*   store i32 %map.4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_119_78))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_83))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_88))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %142*/
/*   store i32 2, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_142_93))
begin
memory_controller_enable_a = 1'd1;
end
/* chi_to_channel: %146*/
/*   store i32 4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_146_97))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* chi_to_channel: %2*/
/*   store i32 0, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_2_2))
begin
memory_controller_address_a = arg_pchannelmap;
end
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_4))
begin
memory_controller_address_a = arg_chi;
end
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_7))
begin
memory_controller_address_a = chi_to_channel_6_7;
end
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_14))
begin
memory_controller_address_a = chi_to_channel_16_scevgep36;
end
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_18))
begin
memory_controller_address_a = chi_to_channel_21_22;
end
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
memory_controller_address_a = chi_to_channel_36_scevgep;
end
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_29))
begin
memory_controller_address_a = chi_to_channel_41_42;
end
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_34))
begin
memory_controller_address_a = chi_to_channel_51_scevgep34;
end
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_39))
begin
memory_controller_address_a = chi_to_channel_57_58;
end
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_42))
begin
memory_controller_address_a = chi_to_channel_62_63;
end
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
memory_controller_address_a = chi_to_channel_74_scevgep21_reg;
end
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_63))
begin
memory_controller_address_a = chi_to_channel_94_96;
end
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_69))
begin
memory_controller_address_a = chi_to_channel_104_scevgep32;
end
/* chi_to_channel: %119*/
/*   store i32 %map.4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_119_78))
begin
memory_controller_address_a = arg_pchannelmap;
end
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_83))
begin
memory_controller_address_a = chi_to_channel_126_scevgep40;
end
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_88))
begin
memory_controller_address_a = chi_to_channel_132_133;
end
/* chi_to_channel: %142*/
/*   store i32 2, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_142_93))
begin
memory_controller_address_a = arg_pchannelmap;
end
/* chi_to_channel: %146*/
/*   store i32 4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_146_97))
begin
memory_controller_address_a = arg_pchannelmap;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %2*/
/*   store i32 0, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_2_2))
begin
memory_controller_write_enable_a = 1'd1;
end
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_18))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_34))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_39))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %119*/
/*   store i32 %map.4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_119_78))
begin
memory_controller_write_enable_a = 1'd1;
end
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* chi_to_channel: %142*/
/*   store i32 2, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_142_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* chi_to_channel: %146*/
/*   store i32 4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_146_97))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* chi_to_channel: %2*/
/*   store i32 0, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_2_2))
begin
memory_controller_in_a = 32'd0;
end
/* chi_to_channel: %119*/
/*   store i32 %map.4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_119_78))
begin
memory_controller_in_a = chi_to_channel_118_map_4_reg;
end
/* chi_to_channel: %142*/
/*   store i32 2, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_142_93))
begin
memory_controller_in_a = 32'd2;
end
/* chi_to_channel: %146*/
/*   store i32 4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_146_97))
begin
memory_controller_in_a = 32'd4;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* chi_to_channel: %2*/
/*   store i32 0, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_2_2))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %3*/
/*   %4 = load i32* %chi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_3_4))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_6_7))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %16*/
/*   %17 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_16_14))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %21*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_21_18))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %36*/
/*   %37 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_36_25))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %41*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_41_29))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %51*/
/*   %52 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_51_34))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_57_39))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %62*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_62_42))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %79*/
/*   %82 = load i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_79_52))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %94*/
/*   %97 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_94_63))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %104*/
/*   %105 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_104_69))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %119*/
/*   store i32 %map.4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_119_78))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %126*/
/*   %127 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_126_83))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %132*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_132_88))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %142*/
/*   store i32 2, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_142_93))
begin
memory_controller_size_a = 2'd2;
end
/* chi_to_channel: %146*/
/*   store i32 4, i32* %pchannelmap, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB_146_97))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* chi_to_channel: %.loopexit10*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_chi_to_channel_BB__loopexit10_104))
begin
return_val <= chi_to_channel__loopexit10__0_reg;
if (reset == 1'b0 && ^(chi_to_channel__loopexit10__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  chi_to_channel_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_arg_chi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_arg_pchannelmap;
wire  chi_to_channel_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_memory_controller_address_a;
wire  chi_to_channel_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] chi_to_channel_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] chi_to_channel_memory_controller_out_a;
wire [1:0] chi_to_channel_memory_controller_size_a;
wire  chi_to_channel_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] chi_to_channel_memory_controller_address_b;
wire  chi_to_channel_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] chi_to_channel_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] chi_to_channel_memory_controller_out_b;
wire [1:0] chi_to_channel_memory_controller_size_b;
reg  chi_to_channel_memory_controller_waitrequest;
wire  chi_to_channel_finish;
reg  chi_to_channel_finish_final;
wire [31:0] chi_to_channel_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


chi_to_channel chi_to_channel_inst (
	.memory_controller_enable_a (chi_to_channel_memory_controller_enable_a),
	.memory_controller_address_a (chi_to_channel_memory_controller_address_a),
	.memory_controller_write_enable_a (chi_to_channel_memory_controller_write_enable_a),
	.memory_controller_in_a (chi_to_channel_memory_controller_in_a),
	.memory_controller_size_a (chi_to_channel_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (chi_to_channel_memory_controller_enable_b),
	.memory_controller_address_b (chi_to_channel_memory_controller_address_b),
	.memory_controller_write_enable_b (chi_to_channel_memory_controller_write_enable_b),
	.memory_controller_in_b (chi_to_channel_memory_controller_in_b),
	.memory_controller_size_b (chi_to_channel_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (chi_to_channel_start),
	.finish (chi_to_channel_finish),
	.return_val (chi_to_channel_return_val),
	.arg_chi (chi_to_channel_arg_chi),
	.arg_pchannelmap (chi_to_channel_arg_pchannelmap)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (chi_to_channel_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
begin
main_0_1 = chi_to_channel_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
chi_to_channel_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
chi_to_channel_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
chi_to_channel_arg_chi <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_arg_chi"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
chi_to_channel_arg_pchannelmap <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to chi_to_channel_arg_pchannelmap"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
begin
chi_to_channel_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
begin
chi_to_channel_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
chi_to_channel_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
chi_to_channel_finish_final = chi_to_channel_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = chi_to_channel_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = chi_to_channel_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = chi_to_channel_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = chi_to_channel_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = chi_to_channel_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = chi_to_channel_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = chi_to_channel_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = chi_to_channel_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = chi_to_channel_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = chi_to_channel_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = chi_to_channel_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = chi_to_channel_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = chi_to_channel_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = chi_to_channel_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = chi_to_channel_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = chi_to_channel_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = chi_to_channel_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = chi_to_channel_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = chi_to_channel_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @chi_to_channel(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = chi_to_channel_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
