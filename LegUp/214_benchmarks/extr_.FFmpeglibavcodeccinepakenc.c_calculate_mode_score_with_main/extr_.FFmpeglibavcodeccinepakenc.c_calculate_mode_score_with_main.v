//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:40 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module calculate_mode_score
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_s,
	arg_h,
	arg_info,
	arg_report,
	arg_training_set_v1_shrunk,
	arg_training_set_v4_shrunk
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_6 = 7'd6;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_7 = 7'd7;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_8 = 7'd8;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_9 = 7'd9;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_10 = 7'd10;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_11 = 7'd11;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_12 = 7'd12;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_13 = 7'd13;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_14 = 7'd14;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_15 = 7'd15;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_16 = 7'd16;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_17 = 7'd17;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_18 = 7'd18;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_19 = 7'd19;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_20 = 7'd20;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_21 = 7'd21;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_22 = 7'd22;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_23 = 7'd23;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_24 = 7'd24;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_25 = 7'd25;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_26 = 7'd26;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_27 = 7'd27;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_28 = 7'd28;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_29 = 7'd29;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_30 = 7'd30;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_31 = 7'd31;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_32 = 7'd32;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_33 = 7'd33;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_34 = 7'd34;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_35 = 7'd35;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_0_36 = 7'd36;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_14_37 = 7'd37;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_14_38 = 7'd38;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_16_39 = 7'd39;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_16_40 = 7'd40;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_16_41 = 7'd41;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_21_42 = 7'd42;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_21_43 = 7'd43;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge63_44 = 7'd44;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge63_45 = 7'd45;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge63_46 = 7'd46;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_29_47 = 7'd47;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_29_48 = 7'd48;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph30_49 = 7'd49;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_35_50 = 7'd50;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_35_51 = 7'd51;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_35_52 = 7'd52;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_35_53 = 7'd53;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_38_54 = 7'd54;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__preheader20_55 = 7'd55;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph24_56 = 7'd56;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph24_57 = 7'd57;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_45_58 = 7'd58;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_45_59 = 7'd59;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_45_60 = 7'd60;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph18_61 = 7'd61;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph18_62 = 7'd62;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph18_63 = 7'd63;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_50_64 = 7'd64;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_50_65 = 7'd65;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_50_66 = 7'd66;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_50_67 = 7'd67;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_50_68 = 7'd68;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_55_69 = 7'd69;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_55_70 = 7'd70;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_55_71 = 7'd71;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_55_72 = 7'd72;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_58_73 = 7'd73;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__preheader9_74 = 7'd74;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph12_75 = 7'd75;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph12_76 = 7'd76;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__preheader_77 = 7'd77;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph_78 = 7'd78;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__lr_ph_79 = 7'd79;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_80 = 7'd80;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_81 = 7'd81;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_82 = 7'd82;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_83 = 7'd83;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_84 = 7'd84;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge62_85 = 7'd85;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_73_86 = 7'd86;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_73_87 = 7'd87;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_75_88 = 7'd88;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89 = 7'd89;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge_90 = 7'd90;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge_91 = 7'd91;
parameter [6:0] LEGUP_F_calculate_mode_score_BB___crit_edge_92 = 7'd92;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_77_93 = 7'd93;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_77_94 = 7'd94;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_77_95 = 7'd95;
parameter [6:0] LEGUP_F_calculate_mode_score_BB_77_96 = 7'd96;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97 = 7'd97;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98 = 7'd98;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99 = 7'd99;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100 = 7'd100;
parameter [6:0] LEGUP_F_calculate_mode_score_BB__loopexit_101 = 7'd101;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_h;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_info;
input [31:0] arg_report;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_training_set_v1_shrunk;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_training_set_v4_shrunk;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_1_reg;
reg [31:0] calculate_mode_score_0_2;
reg [31:0] calculate_mode_score_0_2_reg;
reg  calculate_mode_score_0_3;
reg  calculate_mode_score_0_3_reg;
reg [31:0] calculate_mode_score_0_4;
reg [31:0] calculate_mode_score_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_5_reg;
reg [31:0] calculate_mode_score_0_6;
reg [31:0] calculate_mode_score_0_6_reg;
reg [31:0] calculate_mode_score_0_7;
reg [31:0] calculate_mode_score_0_7_reg;
reg [31:0] calculate_mode_score_0_8;
reg [31:0] calculate_mode_score_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_9_reg;
reg [31:0] calculate_mode_score_0_10;
reg [31:0] calculate_mode_score_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_0_11_reg;
reg [31:0] calculate_mode_score_0_12;
reg [31:0] calculate_mode_score_0_12_reg;
reg  calculate_mode_score_0_13;
reg  calculate_mode_score_0_13_reg;
reg [31:0] calculate_mode_score_14_15;
reg [31:0] calculate_mode_score_14_15_reg;
reg [31:0] calculate_mode_score_16_17;
reg [31:0] calculate_mode_score_16_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_16_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_16_18_reg;
reg [31:0] calculate_mode_score_16_19;
reg [31:0] calculate_mode_score_16_19_reg;
reg  calculate_mode_score_16_20;
reg  calculate_mode_score_16_20_reg;
reg [31:0] calculate_mode_score_21_22;
reg [31:0] calculate_mode_score_21_22_reg;
reg [31:0] calculate_mode_score___crit_edge63_23;
reg [31:0] calculate_mode_score___crit_edge63_23_reg;
reg [31:0] calculate_mode_score___crit_edge63_24;
reg [31:0] calculate_mode_score___crit_edge63_24_reg;
reg [31:0] calculate_mode_score___crit_edge63_25;
reg [31:0] calculate_mode_score___crit_edge63_25_reg;
reg [31:0] calculate_mode_score___crit_edge63_26;
reg [31:0] calculate_mode_score___crit_edge63_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge63_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge63_27_reg;
reg [31:0] calculate_mode_score___crit_edge63_28;
reg [31:0] calculate_mode_score___crit_edge63_28_reg;
reg [31:0] calculate_mode_score_29_30;
reg [31:0] calculate_mode_score_29_30_reg;
reg [31:0] calculate_mode_score_29_31;
reg [31:0] calculate_mode_score_29_31_reg;
reg [31:0] calculate_mode_score_29_32;
reg [31:0] calculate_mode_score_29_32_reg;
reg  calculate_mode_score_29_33;
reg  calculate_mode_score_29_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph30_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph30_34_reg;
reg [31:0] calculate_mode_score_35_x_027;
reg [31:0] calculate_mode_score_35_x_027_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_35_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_35_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_35_scevgep61_reg;
reg [31:0] calculate_mode_score_35_37;
reg [31:0] calculate_mode_score_35_37_reg;
reg  calculate_mode_score_35_exitcond58;
reg  calculate_mode_score_35_exitcond58_reg;
reg  calculate_mode_score_38_39;
reg  calculate_mode_score_38_39_reg;
reg  calculate_mode_score__preheader20_40;
reg  calculate_mode_score__preheader20_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph24_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph24_41_reg;
reg [31:0] calculate_mode_score__lr_ph24_42;
reg [31:0] calculate_mode_score__lr_ph24_42_reg;
reg [31:0] calculate_mode_score__lr_ph24_43;
reg [31:0] calculate_mode_score__lr_ph24_43_reg;
reg  calculate_mode_score__lr_ph24_44;
reg  calculate_mode_score__lr_ph24_44_reg;
reg [31:0] calculate_mode_score__lr_ph24__;
reg [31:0] calculate_mode_score__lr_ph24___reg;
reg  calculate_mode_score_45_46;
reg  calculate_mode_score_45_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph18_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph18_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph18_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph18_48_reg;
reg [31:0] calculate_mode_score__lr_ph18_49;
reg [31:0] calculate_mode_score__lr_ph18_49_reg;
reg [31:0] calculate_mode_score_50_ret_116;
reg [31:0] calculate_mode_score_50_ret_116_reg;
reg [31:0] calculate_mode_score_50_x_115;
reg [31:0] calculate_mode_score_50_x_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_50_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_50_scevgep47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_50_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_50_51_reg;
reg  calculate_mode_score_50_52;
reg  calculate_mode_score_50_52_reg;
reg [31:0] calculate_mode_score_50_score1_0_v;
reg [31:0] calculate_mode_score_50_score1_0_v_reg;
reg [31:0] calculate_mode_score_50_score1_0;
reg [31:0] calculate_mode_score_50_score1_0_reg;
reg [31:0] calculate_mode_score_50_53;
reg [31:0] calculate_mode_score_50_53_reg;
reg [31:0] calculate_mode_score_50_54;
reg [31:0] calculate_mode_score_50_54_reg;
reg  calculate_mode_score_50_exitcond46;
reg  calculate_mode_score_50_exitcond46_reg;
reg [31:0] calculate_mode_score_55_ret_223;
reg [31:0] calculate_mode_score_55_ret_223_reg;
reg [31:0] calculate_mode_score_55_x_222;
reg [31:0] calculate_mode_score_55_x_222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_55_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_55_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_55_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_55_scevgep55_reg;
reg [31:0] calculate_mode_score_55_ret_3;
reg [31:0] calculate_mode_score_55_ret_3_reg;
reg [31:0] calculate_mode_score_55_57;
reg [31:0] calculate_mode_score_55_57_reg;
reg  calculate_mode_score_55_exitcond51;
reg  calculate_mode_score_55_exitcond51_reg;
reg  calculate_mode_score_58_59;
reg  calculate_mode_score_58_59_reg;
reg  calculate_mode_score_58_60;
reg  calculate_mode_score_58_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph12_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph12_61_reg;
reg [31:0] calculate_mode_score__lr_ph12_62;
reg [31:0] calculate_mode_score__lr_ph12_62_reg;
reg [31:0] calculate_mode_score__lr_ph12_63;
reg [31:0] calculate_mode_score__lr_ph12_63_reg;
reg  calculate_mode_score__lr_ph12_64;
reg  calculate_mode_score__lr_ph12_64_reg;
reg  calculate_mode_score__lr_ph12_65;
reg  calculate_mode_score__lr_ph12_65_reg;
reg  calculate_mode_score__lr_ph12_or_cond;
reg  calculate_mode_score__lr_ph12_or_cond_reg;
reg  calculate_mode_score__lr_ph12_66;
reg  calculate_mode_score__lr_ph12_66_reg;
reg [31:0] calculate_mode_score__lr_ph12__4;
reg [31:0] calculate_mode_score__lr_ph12__4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score__lr_ph_67_reg;
reg [31:0] calculate_mode_score__lr_ph_68;
reg [31:0] calculate_mode_score__lr_ph_68_reg;
reg  calculate_mode_score__lr_ph_69;
reg  calculate_mode_score__lr_ph_69_reg;
reg [31:0] calculate_mode_score___crit_edge62_v4_shrunk_06;
reg [31:0] calculate_mode_score___crit_edge62_v4_shrunk_06_reg;
reg [31:0] calculate_mode_score___crit_edge62_ret_44;
reg [31:0] calculate_mode_score___crit_edge62_ret_44_reg;
reg [31:0] calculate_mode_score___crit_edge62_x_33;
reg [31:0] calculate_mode_score___crit_edge62_x_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score___crit_edge62_71_reg;
reg  calculate_mode_score___crit_edge62_72;
reg  calculate_mode_score___crit_edge62_72_reg;
reg  calculate_mode_score___crit_edge62_brmerge;
reg  calculate_mode_score___crit_edge62_brmerge_reg;
reg [31:0] calculate_mode_score___crit_edge62__mux;
reg [31:0] calculate_mode_score___crit_edge62__mux_reg;
reg [31:0] calculate_mode_score_73_74;
reg [31:0] calculate_mode_score_73_74_reg;
reg [31:0] calculate_mode_score_75__pn1;
reg [31:0] calculate_mode_score_75__pn1_reg;
reg [31:0] calculate_mode_score_75_v4_shrunk_1;
reg [31:0] calculate_mode_score_75_v4_shrunk_1_reg;
reg [31:0] calculate_mode_score_75_ret_5;
reg [31:0] calculate_mode_score_75_ret_5_reg;
reg [31:0] calculate_mode_score_75_76;
reg [31:0] calculate_mode_score_75_76_reg;
reg  calculate_mode_score_75_exitcond;
reg  calculate_mode_score_75_exitcond_reg;
reg [31:0] calculate_mode_score___crit_edge_v4_shrunk_0_lcssa;
reg [31:0] calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg;
reg [31:0] calculate_mode_score___crit_edge_ret_4_lcssa;
reg [31:0] calculate_mode_score___crit_edge_ret_4_lcssa_reg;
reg [31:0] calculate_mode_score_77_ret_611;
reg [31:0] calculate_mode_score_77_ret_611_reg;
reg [31:0] calculate_mode_score_77_x_410;
reg [31:0] calculate_mode_score_77_x_410_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_77_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_77_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_77_scevgep43_reg;
reg [31:0] calculate_mode_score_77__pn;
reg [31:0] calculate_mode_score_77__pn_reg;
reg [31:0] calculate_mode_score_77_ret_7;
reg [31:0] calculate_mode_score_77_ret_7_reg;
reg [31:0] calculate_mode_score_77_79;
reg [31:0] calculate_mode_score_77_79_reg;
reg  calculate_mode_score_77_exitcond38;
reg  calculate_mode_score_77_exitcond38_reg;
reg [31:0] calculate_mode_score__loopexit_ret_8;
reg [31:0] calculate_mode_score__loopexit_ret_8_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] calculate_mode_score_signed_divide_32_0_op0;
reg [31:0] calculate_mode_score_signed_divide_32_0_op1;
wire [31:0] lpm_divide_calculate_mode_score_0_8_temp_out;
wire [31:0] calculate_mode_score_0_8_unused;
reg  lpm_divide_calculate_mode_score_0_8_en;
reg [31:0] lpm_divide_calculate_mode_score_0_8_out;
reg [31:0] calculate_mode_score_signed_divide_32_0;
reg  lpm_mult_calculate_mode_score_0_7_en;
reg [31:0] calculate_mode_score_0_7_stage0_reg;
reg  lpm_mult_calculate_mode_score_14_15_en;
reg [31:0] calculate_mode_score_14_15_stage0_reg;
reg  lpm_mult_calculate_mode_score_21_22_en;
reg [31:0] calculate_mode_score_21_22_stage0_reg;
reg  lpm_mult_calculate_mode_score___crit_edge63_26_en;
reg [31:0] calculate_mode_score___crit_edge63_26_stage0_reg;
reg  lpm_mult_calculate_mode_score_29_31_en;
reg [31:0] calculate_mode_score_29_31_stage0_reg;
reg  lpm_mult_calculate_mode_score__lr_ph24_42_en;
reg [31:0] calculate_mode_score__lr_ph24_42_stage0_reg;
reg  lpm_mult_calculate_mode_score__lr_ph24_43_en;
reg [31:0] calculate_mode_score__lr_ph24_43_stage0_reg;
reg  lpm_mult_calculate_mode_score_50_score1_0_en;
reg [31:0] calculate_mode_score_50_score1_0_stage0_reg;
reg  lpm_mult_calculate_mode_score__lr_ph12_62_en;
reg [31:0] calculate_mode_score__lr_ph12_62_stage0_reg;
reg  lpm_mult_calculate_mode_score__lr_ph12_63_en;
reg [31:0] calculate_mode_score__lr_ph12_63_stage0_reg;
reg  lpm_mult_calculate_mode_score__lr_ph_68_en;
reg [31:0] calculate_mode_score__lr_ph_68_stage0_reg;

/*   %8 = sdiv i32 %7, 0*/
lpm_divide lpm_divide_calculate_mode_score_0_8 (
	.quotient (lpm_divide_calculate_mode_score_0_8_temp_out),
	.remain (calculate_mode_score_0_8_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_calculate_mode_score_0_8_en),
	.numer (calculate_mode_score_signed_divide_32_0_op0),
	.denom (calculate_mode_score_signed_divide_32_0_op1)
);

defparam
	lpm_divide_calculate_mode_score_0_8.lpm_pipeline = 32,
	lpm_divide_calculate_mode_score_0_8.lpm_widthn = 32,
	lpm_divide_calculate_mode_score_0_8.lpm_widthd = 32,
	lpm_divide_calculate_mode_score_0_8.lpm_drepresentation = "SIGNED",
	lpm_divide_calculate_mode_score_0_8.lpm_nrepresentation = "SIGNED",
	lpm_divide_calculate_mode_score_0_8.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_0_13_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_0_13_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_14_37;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_14_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_14_37;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_14_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_14_38;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_14_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_14_38;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_14_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_16_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_16_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_40;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_16_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_40;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_16_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_41;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_16_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_16_41;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_16_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_16_41) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_16_20 == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_44;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_16_41) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_16_20 == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_21_42;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_21_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_21_42;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_21_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_21_43;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_21_43;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_44;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_44;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_45;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_45;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_46;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge63_46;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge63_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 == 32'd129)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_29_47;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_29_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 == 32'd128)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_38_54;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_38_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 == 32'd130)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_58_73;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_58_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 != 32'd129)) & (calculate_mode_score___crit_edge63_28 != 32'd128)) & (calculate_mode_score___crit_edge63_28 != 32'd130)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_29_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_29_47;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_29_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_29_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_29_48;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_29_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_29_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_29_48;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_29_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_29_48) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_29_33_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph30_49;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph30_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_29_48) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_29_33_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph30_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph30_49;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph30_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph30_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_50;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_50;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_51;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_51;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_52;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_52;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_53;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_35_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_53;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_35_53) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_35_exitcond58_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_35_53) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_35_exitcond58_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_35_50;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_35_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_38_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_38_54;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_38_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_38_54) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_38_39 == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader20_55;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader20_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_38_54) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_38_39 == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_58;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader20_55;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader20_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score__preheader20_40 == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph24_56;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph24_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score__preheader20_40 == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph24_56;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph24_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph24_57;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph24_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph24_57;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph24_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_69;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_45_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_58;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_45_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_59;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_45_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_59;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_45_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_60;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_45_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_45_60;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_45_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_45_60) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_45_46_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_61;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_45_60) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_45_46_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_61;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_62;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_62;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_63;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph18_63;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph18_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_64;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_64;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_65;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_65;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_66;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_66;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_67;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_67;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_68;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_68;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_50_64;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_50_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_69;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_70;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_70;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_71;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_71;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_72;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_72;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_55_69;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_55_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_58_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_58_73;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_58_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_58_73) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_59 == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader9_74;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader9_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_58_73) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_59 == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader_77;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__preheader9_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader9_74;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader9_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader9_74) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph12_75;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph12_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader9_74) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph12_75;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph12_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph12_76;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph12_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph12_76;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph12_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_93;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__preheader_77;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph_78;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_90;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph_78;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph_79;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__lr_ph_79;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_80;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_80;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_81;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_81;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_82;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_82;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_83;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_83;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_84;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_84;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_85;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_85;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_75_88;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_75_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_73_86;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_73_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_73_86;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_73_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_73_87;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_73_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_73_87;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_73_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_75_88;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_75_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_75_88;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_75_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge62_80;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge62_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_90;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_90;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_91;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_91;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_92;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB___crit_edge_92;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB___crit_edge_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_93;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_94;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_94;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_95;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_95;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_96;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_96;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB_77_93;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB_77_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calculate_mode_score_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_calculate_mode_score_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
begin
calculate_mode_score_0_1 = arg_s;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
calculate_mode_score_0_1_reg <= calculate_mode_score_0_1;
if (reset == 1'b0 && ^(calculate_mode_score_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_1_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
calculate_mode_score_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_3))
begin
calculate_mode_score_0_2_reg <= calculate_mode_score_0_2;
if (reset == 1'b0 && ^(calculate_mode_score_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_2_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %3 = icmp eq i32 %2, 0*/
begin
calculate_mode_score_0_3 = (calculate_mode_score_0_2 == 32'd0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %3 = icmp eq i32 %2, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_3))
begin
calculate_mode_score_0_3_reg <= calculate_mode_score_0_3;
if (reset == 1'b0 && ^(calculate_mode_score_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_3_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %4 = select i1 %3, i32 6, i32 4*/
begin
calculate_mode_score_0_4 = (calculate_mode_score_0_3 ? 32'd6 : 32'd4);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %4 = select i1 %3, i32 6, i32 4*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_3))
begin
calculate_mode_score_0_4_reg <= calculate_mode_score_0_4;
if (reset == 1'b0 && ^(calculate_mode_score_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_4_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 1*/
begin
calculate_mode_score_0_5 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
calculate_mode_score_0_5_reg <= calculate_mode_score_0_5;
if (reset == 1'b0 && ^(calculate_mode_score_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_5_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
calculate_mode_score_0_6 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_3))
begin
calculate_mode_score_0_6_reg <= calculate_mode_score_0_6;
if (reset == 1'b0 && ^(calculate_mode_score_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_6_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_0_7 = calculate_mode_score_0_7_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %7 = mul nsw i32 %6, %h*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_4))
begin
calculate_mode_score_0_7_reg <= calculate_mode_score_0_7;
if (reset == 1'b0 && ^(calculate_mode_score_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_7_reg"); $finish; end
end
/* calculate_mode_score: %0*/
/*   %7 = mul nsw i32 %6, %h*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_4))
begin
calculate_mode_score_0_7_reg <= calculate_mode_score_0_7;
if (reset == 1'b0 && ^(calculate_mode_score_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_7_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_0_8 = calculate_mode_score_signed_divide_32_0;
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %8 = sdiv i32 %7, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_36))
begin
calculate_mode_score_0_8_reg <= calculate_mode_score_0_8;
if (reset == 1'b0 && ^(calculate_mode_score_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_8_reg"); $finish; end
end
/* calculate_mode_score: %0*/
/*   %8 = sdiv i32 %7, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_36))
begin
calculate_mode_score_0_8_reg <= calculate_mode_score_0_8;
if (reset == 1'b0 && ^(calculate_mode_score_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_8_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 2*/
begin
calculate_mode_score_0_9 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
calculate_mode_score_0_9_reg <= calculate_mode_score_0_9;
if (reset == 1'b0 && ^(calculate_mode_score_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_9_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
begin
calculate_mode_score_0_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_4))
begin
calculate_mode_score_0_10_reg <= calculate_mode_score_0_10;
if (reset == 1'b0 && ^(calculate_mode_score_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_10_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 0*/
begin
calculate_mode_score_0_11 = arg_info;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
calculate_mode_score_0_11_reg <= calculate_mode_score_0_11;
if (reset == 1'b0 && ^(calculate_mode_score_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_11_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
begin
calculate_mode_score_0_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_4))
begin
calculate_mode_score_0_12_reg <= calculate_mode_score_0_12;
if (reset == 1'b0 && ^(calculate_mode_score_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_12_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %13 = icmp eq i32 %12, 0*/
begin
calculate_mode_score_0_13 = (calculate_mode_score_0_12 == 32'd0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %13 = icmp eq i32 %12, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_4))
begin
calculate_mode_score_0_13_reg <= calculate_mode_score_0_13;
if (reset == 1'b0 && ^(calculate_mode_score_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_0_13_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_14_15 = calculate_mode_score_14_15_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %14*/
/*   %15 = mul nsw i32 %12, %4*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_14_38))
begin
calculate_mode_score_14_15_reg <= calculate_mode_score_14_15;
if (reset == 1'b0 && ^(calculate_mode_score_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_14_15_reg"); $finish; end
end
/* calculate_mode_score: %14*/
/*   %15 = mul nsw i32 %12, %4*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_14_38))
begin
calculate_mode_score_14_15_reg <= calculate_mode_score_14_15;
if (reset == 1'b0 && ^(calculate_mode_score_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_14_15_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %16*/
/*   %17 = phi i32 [ %15, %14 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_0_13_reg == 1'd1)))
begin
calculate_mode_score_16_17 = 32'd0;
end
/* calculate_mode_score: %16*/
/*   %17 = phi i32 [ %15, %14 ], [ 0, %0 ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_38) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score_16_17 = calculate_mode_score_14_15;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %16*/
/*   %17 = phi i32 [ %15, %14 ], [ 0, %0 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_0_13_reg == 1'd1)))
begin
calculate_mode_score_16_17_reg <= calculate_mode_score_16_17;
if (reset == 1'b0 && ^(calculate_mode_score_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_16_17_reg"); $finish; end
end
/* calculate_mode_score: %16*/
/*   %17 = phi i32 [ %15, %14 ], [ 0, %0 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB_14_38) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_16_17_reg <= calculate_mode_score_16_17;
if (reset == 1'b0 && ^(calculate_mode_score_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_16_17_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %16*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 1*/
begin
calculate_mode_score_16_18 = (arg_info + 4);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %16*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_39))
begin
calculate_mode_score_16_18_reg <= calculate_mode_score_16_18;
if (reset == 1'b0 && ^(calculate_mode_score_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_16_18_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
calculate_mode_score_16_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_41))
begin
calculate_mode_score_16_19_reg <= calculate_mode_score_16_19;
if (reset == 1'b0 && ^(calculate_mode_score_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_16_19_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %16*/
/*   %20 = icmp eq i32 %19, 0*/
begin
calculate_mode_score_16_20 = (calculate_mode_score_16_19 == 32'd0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %16*/
/*   %20 = icmp eq i32 %19, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_41))
begin
calculate_mode_score_16_20_reg <= calculate_mode_score_16_20;
if (reset == 1'b0 && ^(calculate_mode_score_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_16_20_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_21_22 = calculate_mode_score_21_22_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %21*/
/*   %22 = mul nsw i32 %19, %4*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_21_43))
begin
calculate_mode_score_21_22_reg <= calculate_mode_score_21_22;
if (reset == 1'b0 && ^(calculate_mode_score_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_21_22_reg"); $finish; end
end
/* calculate_mode_score: %21*/
/*   %22 = mul nsw i32 %19, %4*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_21_43))
begin
calculate_mode_score_21_22_reg <= calculate_mode_score_21_22;
if (reset == 1'b0 && ^(calculate_mode_score_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_21_22_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %23 = phi i32 [ %22, %21 ], [ 0, %16 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_16_41) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_16_20 == 1'd1)))
begin
calculate_mode_score___crit_edge63_23 = 32'd0;
end
/* calculate_mode_score: %._crit_edge63*/
/*   %23 = phi i32 [ %22, %21 ], [ 0, %16 ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_43) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score___crit_edge63_23 = calculate_mode_score_21_22;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %23 = phi i32 [ %22, %21 ], [ 0, %16 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_16_41) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_16_20 == 1'd1)))
begin
calculate_mode_score___crit_edge63_23_reg <= calculate_mode_score___crit_edge63_23;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_23_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge63*/
/*   %23 = phi i32 [ %22, %21 ], [ 0, %16 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB_21_43) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge63_23_reg <= calculate_mode_score___crit_edge63_23;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_23_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %24 = add i32 %23, %17*/
begin
calculate_mode_score___crit_edge63_24 = (calculate_mode_score___crit_edge63_23_reg + calculate_mode_score_16_17_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %24 = add i32 %23, %17*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
calculate_mode_score___crit_edge63_24_reg <= calculate_mode_score___crit_edge63_24;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_24_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %25 = shl i32 %10, 3*/
begin
calculate_mode_score___crit_edge63_25 = (calculate_mode_score_0_10_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %25 = shl i32 %10, 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
calculate_mode_score___crit_edge63_25_reg <= calculate_mode_score___crit_edge63_25;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_25_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score___crit_edge63_26 = calculate_mode_score___crit_edge63_26_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %26 = mul i32 %25, %24*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_45))
begin
calculate_mode_score___crit_edge63_26_reg <= calculate_mode_score___crit_edge63_26;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_26_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge63*/
/*   %26 = mul i32 %25, %24*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_45))
begin
calculate_mode_score___crit_edge63_26_reg <= calculate_mode_score___crit_edge63_26;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_26_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %27 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 2*/
begin
calculate_mode_score___crit_edge63_27 = (arg_info + 8);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %27 = getelementptr inbounds %struct.TYPE_6__* %info, i32 0, i32 2*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
calculate_mode_score___crit_edge63_27_reg <= calculate_mode_score___crit_edge63_27;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_27_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
begin
calculate_mode_score___crit_edge63_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46))
begin
calculate_mode_score___crit_edge63_28_reg <= calculate_mode_score___crit_edge63_28;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge63_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge63_28_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %29*/
/*   %30 = shl i32 %8, 3*/
begin
calculate_mode_score_29_30 = (calculate_mode_score_0_8_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %29*/
/*   %30 = shl i32 %8, 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_29_47))
begin
calculate_mode_score_29_30_reg <= calculate_mode_score_29_30;
if (reset == 1'b0 && ^(calculate_mode_score_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_29_30_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_29_31 = calculate_mode_score_29_31_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %29*/
/*   %31 = mul i32 %30, %10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_29_48))
begin
calculate_mode_score_29_31_reg <= calculate_mode_score_29_31;
if (reset == 1'b0 && ^(calculate_mode_score_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_29_31_reg"); $finish; end
end
/* calculate_mode_score: %29*/
/*   %31 = mul i32 %30, %10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_29_48))
begin
calculate_mode_score_29_31_reg <= calculate_mode_score_29_31;
if (reset == 1'b0 && ^(calculate_mode_score_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_29_31_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %29*/
/*   %32 = add nsw i32 %31, %26*/
begin
calculate_mode_score_29_32 = (calculate_mode_score_29_31 + calculate_mode_score___crit_edge63_26_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %29*/
/*   %32 = add nsw i32 %31, %26*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_29_48))
begin
calculate_mode_score_29_32_reg <= calculate_mode_score_29_32;
if (reset == 1'b0 && ^(calculate_mode_score_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_29_32_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %29*/
/*   %33 = icmp sgt i32 %8, 0*/
begin
calculate_mode_score_29_33 = ($signed(calculate_mode_score_0_8_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %29*/
/*   %33 = icmp sgt i32 %8, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_29_47))
begin
calculate_mode_score_29_33_reg <= calculate_mode_score_29_33;
if (reset == 1'b0 && ^(calculate_mode_score_29_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_29_33_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph30*/
/*   %34 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
calculate_mode_score__lr_ph30_34 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph30*/
/*   %34 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph30_49))
begin
calculate_mode_score__lr_ph30_34_reg <= calculate_mode_score__lr_ph30_34;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph30_34_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %35*/
/*   %x.027 = phi i32 [ 0, %.lr.ph30 ], [ %37, %35 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph30_49) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_35_x_027 = 32'd0;
end
/* calculate_mode_score: %35*/
/*   %x.027 = phi i32 [ 0, %.lr.ph30 ], [ %37, %35 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_35_53) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_35_exitcond58_reg == 1'd0))) */
begin
calculate_mode_score_35_x_027 = calculate_mode_score_35_37_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %35*/
/*   %x.027 = phi i32 [ 0, %.lr.ph30 ], [ %37, %35 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph30_49) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_35_x_027_reg <= calculate_mode_score_35_x_027;
if (reset == 1'b0 && ^(calculate_mode_score_35_x_027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_x_027_reg"); $finish; end
end
/* calculate_mode_score: %35*/
/*   %x.027 = phi i32 [ 0, %.lr.ph30 ], [ %37, %35 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_35_53) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_35_exitcond58_reg == 1'd0)))
begin
calculate_mode_score_35_x_027_reg <= calculate_mode_score_35_x_027;
if (reset == 1'b0 && ^(calculate_mode_score_35_x_027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_x_027_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
begin
calculate_mode_score_35_36 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
calculate_mode_score_35_36_reg <= calculate_mode_score_35_36;
if (reset == 1'b0 && ^(calculate_mode_score_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_36_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %35*/
/*   %scevgep61 = getelementptr %struct.TYPE_7__* %36, i32 %x.027, i32 1*/
begin
calculate_mode_score_35_scevgep61 = (calculate_mode_score_35_36 + ((16 * calculate_mode_score_35_x_027_reg) + 4));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %35*/
/*   %scevgep61 = getelementptr %struct.TYPE_7__* %36, i32 %x.027, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
calculate_mode_score_35_scevgep61_reg <= calculate_mode_score_35_scevgep61;
if (reset == 1'b0 && ^(calculate_mode_score_35_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %35*/
/*   %37 = add nsw i32 %x.027, 1*/
begin
calculate_mode_score_35_37 = (calculate_mode_score_35_x_027_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %35*/
/*   %37 = add nsw i32 %x.027, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
calculate_mode_score_35_37_reg <= calculate_mode_score_35_37;
if (reset == 1'b0 && ^(calculate_mode_score_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_37_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %35*/
/*   %exitcond58 = icmp eq i32 %37, %8*/
begin
calculate_mode_score_35_exitcond58 = (calculate_mode_score_35_37 == calculate_mode_score_0_8_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %35*/
/*   %exitcond58 = icmp eq i32 %37, %8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
calculate_mode_score_35_exitcond58_reg <= calculate_mode_score_35_exitcond58;
if (reset == 1'b0 && ^(calculate_mode_score_35_exitcond58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_35_exitcond58_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %38*/
/*   %39 = icmp eq i32 %report, 0*/
begin
calculate_mode_score_38_39 = (arg_report == 32'd0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %38*/
/*   %39 = icmp eq i32 %report, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_38_54))
begin
calculate_mode_score_38_39_reg <= calculate_mode_score_38_39;
if (reset == 1'b0 && ^(calculate_mode_score_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_38_39_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.preheader20*/
/*   %40 = icmp sgt i32 %8, 0*/
begin
calculate_mode_score__preheader20_40 = ($signed(calculate_mode_score_0_8_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.preheader20*/
/*   %40 = icmp sgt i32 %8, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55))
begin
calculate_mode_score__preheader20_40_reg <= calculate_mode_score__preheader20_40;
if (reset == 1'b0 && ^(calculate_mode_score__preheader20_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__preheader20_40_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %41 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
calculate_mode_score__lr_ph24_41 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %41 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_56))
begin
calculate_mode_score__lr_ph24_41_reg <= calculate_mode_score__lr_ph24_41;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_41_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score__lr_ph24_42 = calculate_mode_score__lr_ph24_42_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %42 = mul nsw i32 %10, 9*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24_42_reg <= calculate_mode_score__lr_ph24_42;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_42_reg"); $finish; end
end
/* calculate_mode_score: %.lr.ph24*/
/*   %42 = mul nsw i32 %10, 9*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24_42_reg <= calculate_mode_score__lr_ph24_42;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_42_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score__lr_ph24_43 = calculate_mode_score__lr_ph24_43_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %43 = mul nsw i32 %10, 33*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24_43_reg <= calculate_mode_score__lr_ph24_43;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_43_reg"); $finish; end
end
/* calculate_mode_score: %.lr.ph24*/
/*   %43 = mul nsw i32 %10, 33*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24_43_reg <= calculate_mode_score__lr_ph24_43;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_43_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %44 = icmp sgt i32 %42, %43*/
begin
calculate_mode_score__lr_ph24_44 = ($signed(calculate_mode_score__lr_ph24_42) > $signed(calculate_mode_score__lr_ph24_43));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %44 = icmp sgt i32 %42, %43*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24_44_reg <= calculate_mode_score__lr_ph24_44;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24_44_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %. = select i1 %44, i32 %43, i32 %42*/
begin
calculate_mode_score__lr_ph24__ = (calculate_mode_score__lr_ph24_44 ? calculate_mode_score__lr_ph24_43 : calculate_mode_score__lr_ph24_42);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %. = select i1 %44, i32 %43, i32 %42*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57))
begin
calculate_mode_score__lr_ph24___reg <= calculate_mode_score__lr_ph24__;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph24__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph24___reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %45*/
/*   %46 = icmp sgt i32 %8, 0*/
begin
calculate_mode_score_45_46 = ($signed(calculate_mode_score_0_8_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %45*/
/*   %46 = icmp sgt i32 %8, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
calculate_mode_score_45_46_reg <= calculate_mode_score_45_46;
if (reset == 1'b0 && ^(calculate_mode_score_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_45_46_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %47 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
calculate_mode_score__lr_ph18_47 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %47 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
calculate_mode_score__lr_ph18_47_reg <= calculate_mode_score__lr_ph18_47;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph18_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph18_47_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
begin
calculate_mode_score__lr_ph18_48 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63))
begin
calculate_mode_score__lr_ph18_48_reg <= calculate_mode_score__lr_ph18_48;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph18_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph18_48_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
begin
calculate_mode_score__lr_ph18_49 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63))
begin
calculate_mode_score__lr_ph18_49_reg <= calculate_mode_score__lr_ph18_49;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph18_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph18_49_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %ret.116 = phi i32 [ %26, %.lr.ph18 ], [ %53, %50 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_50_ret_116 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %50*/
/*   %ret.116 = phi i32 [ %26, %.lr.ph18 ], [ %53, %50 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd0))) */
begin
calculate_mode_score_50_ret_116 = calculate_mode_score_50_53;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %ret.116 = phi i32 [ %26, %.lr.ph18 ], [ %53, %50 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_50_ret_116_reg <= calculate_mode_score_50_ret_116;
if (reset == 1'b0 && ^(calculate_mode_score_50_ret_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_ret_116_reg"); $finish; end
end
/* calculate_mode_score: %50*/
/*   %ret.116 = phi i32 [ %26, %.lr.ph18 ], [ %53, %50 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd0)))
begin
calculate_mode_score_50_ret_116_reg <= calculate_mode_score_50_ret_116;
if (reset == 1'b0 && ^(calculate_mode_score_50_ret_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_ret_116_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %x.115 = phi i32 [ 0, %.lr.ph18 ], [ %54, %50 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_50_x_115 = 32'd0;
end
/* calculate_mode_score: %50*/
/*   %x.115 = phi i32 [ 0, %.lr.ph18 ], [ %54, %50 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd0))) */
begin
calculate_mode_score_50_x_115 = calculate_mode_score_50_54_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %x.115 = phi i32 [ 0, %.lr.ph18 ], [ %54, %50 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_63) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_50_x_115_reg <= calculate_mode_score_50_x_115;
if (reset == 1'b0 && ^(calculate_mode_score_50_x_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_x_115_reg"); $finish; end
end
/* calculate_mode_score: %50*/
/*   %x.115 = phi i32 [ 0, %.lr.ph18 ], [ %54, %50 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_50_68) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_50_exitcond46_reg == 1'd0)))
begin
calculate_mode_score_50_x_115_reg <= calculate_mode_score_50_x_115;
if (reset == 1'b0 && ^(calculate_mode_score_50_x_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_x_115_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %scevgep47 = getelementptr %struct.TYPE_7__* %48, i32 %x.115, i32 1*/
begin
calculate_mode_score_50_scevgep47 = (calculate_mode_score__lr_ph18_48_reg + ((16 * calculate_mode_score_50_x_115_reg) + 4));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %scevgep47 = getelementptr %struct.TYPE_7__* %48, i32 %x.115, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
calculate_mode_score_50_scevgep47_reg <= calculate_mode_score_50_scevgep47;
if (reset == 1'b0 && ^(calculate_mode_score_50_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_scevgep47_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
begin
calculate_mode_score_50_51 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_66))
begin
calculate_mode_score_50_51_reg <= calculate_mode_score_50_51;
if (reset == 1'b0 && ^(calculate_mode_score_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_51_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %52 = icmp eq i8* %51, null*/
begin
calculate_mode_score_50_52 = (calculate_mode_score_50_51 == 0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %52 = icmp eq i8* %51, null*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_66))
begin
calculate_mode_score_50_52_reg <= calculate_mode_score_50_52;
if (reset == 1'b0 && ^(calculate_mode_score_50_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_52_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %score1.0.v = select i1 %52, i32 9, i32 33*/
begin
calculate_mode_score_50_score1_0_v = (calculate_mode_score_50_52_reg ? 32'd9 : 32'd33);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %score1.0.v = select i1 %52, i32 9, i32 33*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_67))
begin
calculate_mode_score_50_score1_0_v_reg <= calculate_mode_score_50_score1_0_v;
if (reset == 1'b0 && ^(calculate_mode_score_50_score1_0_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_score1_0_v_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score_50_score1_0 = calculate_mode_score_50_score1_0_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %score1.0 = mul i32 %49, %score1.0.v*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_68))
begin
calculate_mode_score_50_score1_0_reg <= calculate_mode_score_50_score1_0;
if (reset == 1'b0 && ^(calculate_mode_score_50_score1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_score1_0_reg"); $finish; end
end
/* calculate_mode_score: %50*/
/*   %score1.0 = mul i32 %49, %score1.0.v*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_68))
begin
calculate_mode_score_50_score1_0_reg <= calculate_mode_score_50_score1_0;
if (reset == 1'b0 && ^(calculate_mode_score_50_score1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_score1_0_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %53 = add nsw i32 %score1.0, %ret.116*/
begin
calculate_mode_score_50_53 = (calculate_mode_score_50_score1_0 + calculate_mode_score_50_ret_116_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %53 = add nsw i32 %score1.0, %ret.116*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_68))
begin
calculate_mode_score_50_53_reg <= calculate_mode_score_50_53;
if (reset == 1'b0 && ^(calculate_mode_score_50_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_53_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %54 = add nsw i32 %x.115, 1*/
begin
calculate_mode_score_50_54 = (calculate_mode_score_50_x_115_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %54 = add nsw i32 %x.115, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
calculate_mode_score_50_54_reg <= calculate_mode_score_50_54;
if (reset == 1'b0 && ^(calculate_mode_score_50_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_54_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %50*/
/*   %exitcond46 = icmp eq i32 %54, %8*/
begin
calculate_mode_score_50_exitcond46 = (calculate_mode_score_50_54 == calculate_mode_score_0_8_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %exitcond46 = icmp eq i32 %54, %8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
calculate_mode_score_50_exitcond46_reg <= calculate_mode_score_50_exitcond46;
if (reset == 1'b0 && ^(calculate_mode_score_50_exitcond46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_50_exitcond46_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %ret.223 = phi i32 [ %26, %.lr.ph24 ], [ %ret.3, %55 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_55_ret_223 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %55*/
/*   %ret.223 = phi i32 [ %26, %.lr.ph24 ], [ %ret.3, %55 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd0))) */
begin
calculate_mode_score_55_ret_223 = calculate_mode_score_55_ret_3_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %ret.223 = phi i32 [ %26, %.lr.ph24 ], [ %ret.3, %55 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_55_ret_223_reg <= calculate_mode_score_55_ret_223;
if (reset == 1'b0 && ^(calculate_mode_score_55_ret_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_ret_223_reg"); $finish; end
end
/* calculate_mode_score: %55*/
/*   %ret.223 = phi i32 [ %26, %.lr.ph24 ], [ %ret.3, %55 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd0)))
begin
calculate_mode_score_55_ret_223_reg <= calculate_mode_score_55_ret_223;
if (reset == 1'b0 && ^(calculate_mode_score_55_ret_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_ret_223_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %x.222 = phi i32 [ 0, %.lr.ph24 ], [ %57, %55 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_55_x_222 = 32'd0;
end
/* calculate_mode_score: %55*/
/*   %x.222 = phi i32 [ 0, %.lr.ph24 ], [ %57, %55 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd0))) */
begin
calculate_mode_score_55_x_222 = calculate_mode_score_55_57_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %x.222 = phi i32 [ 0, %.lr.ph24 ], [ %57, %55 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph24_57) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_55_x_222_reg <= calculate_mode_score_55_x_222;
if (reset == 1'b0 && ^(calculate_mode_score_55_x_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_x_222_reg"); $finish; end
end
/* calculate_mode_score: %55*/
/*   %x.222 = phi i32 [ 0, %.lr.ph24 ], [ %57, %55 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_55_72) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_55_exitcond51_reg == 1'd0)))
begin
calculate_mode_score_55_x_222_reg <= calculate_mode_score_55_x_222;
if (reset == 1'b0 && ^(calculate_mode_score_55_x_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_x_222_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
begin
calculate_mode_score_55_56 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
calculate_mode_score_55_56_reg <= calculate_mode_score_55_56;
if (reset == 1'b0 && ^(calculate_mode_score_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_56_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %scevgep55 = getelementptr %struct.TYPE_7__* %56, i32 %x.222, i32 1*/
begin
calculate_mode_score_55_scevgep55 = (calculate_mode_score_55_56 + ((16 * calculate_mode_score_55_x_222_reg) + 4));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %scevgep55 = getelementptr %struct.TYPE_7__* %56, i32 %x.222, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
calculate_mode_score_55_scevgep55_reg <= calculate_mode_score_55_scevgep55;
if (reset == 1'b0 && ^(calculate_mode_score_55_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_scevgep55_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %ret.3 = add nsw i32 %., %ret.223*/
begin
calculate_mode_score_55_ret_3 = (calculate_mode_score__lr_ph24___reg + calculate_mode_score_55_ret_223_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %ret.3 = add nsw i32 %., %ret.223*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
calculate_mode_score_55_ret_3_reg <= calculate_mode_score_55_ret_3;
if (reset == 1'b0 && ^(calculate_mode_score_55_ret_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_ret_3_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %57 = add nsw i32 %x.222, 1*/
begin
calculate_mode_score_55_57 = (calculate_mode_score_55_x_222_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %57 = add nsw i32 %x.222, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
calculate_mode_score_55_57_reg <= calculate_mode_score_55_57;
if (reset == 1'b0 && ^(calculate_mode_score_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_57_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %55*/
/*   %exitcond51 = icmp eq i32 %57, %8*/
begin
calculate_mode_score_55_exitcond51 = (calculate_mode_score_55_57 == calculate_mode_score_0_8_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %55*/
/*   %exitcond51 = icmp eq i32 %57, %8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
calculate_mode_score_55_exitcond51_reg <= calculate_mode_score_55_exitcond51;
if (reset == 1'b0 && ^(calculate_mode_score_55_exitcond51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_55_exitcond51_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %58*/
/*   %59 = icmp eq i32 %report, 0*/
begin
calculate_mode_score_58_59 = (arg_report == 32'd0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %58*/
/*   %59 = icmp eq i32 %report, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_58_73))
begin
calculate_mode_score_58_59_reg <= calculate_mode_score_58_59;
if (reset == 1'b0 && ^(calculate_mode_score_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_58_59_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %58*/
/*   %60 = icmp sgt i32 %8, 0*/
begin
calculate_mode_score_58_60 = ($signed(calculate_mode_score_0_8_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %58*/
/*   %60 = icmp sgt i32 %8, 0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_58_73))
begin
calculate_mode_score_58_60_reg <= calculate_mode_score_58_60;
if (reset == 1'b0 && ^(calculate_mode_score_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_58_60_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %61 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
calculate_mode_score__lr_ph12_61 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %61 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_75))
begin
calculate_mode_score__lr_ph12_61_reg <= calculate_mode_score__lr_ph12_61;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_61_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score__lr_ph12_62 = calculate_mode_score__lr_ph12_62_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %62 = mul nsw i32 %10, 10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_62_reg <= calculate_mode_score__lr_ph12_62;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_62_reg"); $finish; end
end
/* calculate_mode_score: %.lr.ph12*/
/*   %62 = mul nsw i32 %10, 10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_62_reg <= calculate_mode_score__lr_ph12_62;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_62_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score__lr_ph12_63 = calculate_mode_score__lr_ph12_63_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %63 = mul nsw i32 %10, 34*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_63_reg <= calculate_mode_score__lr_ph12_63;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_63_reg"); $finish; end
end
/* calculate_mode_score: %.lr.ph12*/
/*   %63 = mul nsw i32 %10, 34*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_63_reg <= calculate_mode_score__lr_ph12_63;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_63_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %64 = icmp sgt i32 %10, %62*/
begin
calculate_mode_score__lr_ph12_64 = ($signed(calculate_mode_score_0_10_reg) > $signed(calculate_mode_score__lr_ph12_62));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %64 = icmp sgt i32 %10, %62*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_64_reg <= calculate_mode_score__lr_ph12_64;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_64_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %65 = icmp sgt i32 %10, %63*/
begin
calculate_mode_score__lr_ph12_65 = ($signed(calculate_mode_score_0_10_reg) > $signed(calculate_mode_score__lr_ph12_63));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %65 = icmp sgt i32 %10, %63*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_65_reg <= calculate_mode_score__lr_ph12_65;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_65_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %or.cond = or i1 %64, %65*/
begin
calculate_mode_score__lr_ph12_or_cond = (calculate_mode_score__lr_ph12_64 | calculate_mode_score__lr_ph12_65);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %or.cond = or i1 %64, %65*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_or_cond_reg <= calculate_mode_score__lr_ph12_or_cond;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %66 = icmp sgt i32 %62, %63*/
begin
calculate_mode_score__lr_ph12_66 = ($signed(calculate_mode_score__lr_ph12_62) > $signed(calculate_mode_score__lr_ph12_63));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %66 = icmp sgt i32 %62, %63*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12_66_reg <= calculate_mode_score__lr_ph12_66;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12_66_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %.4 = select i1 %66, i32 %63, i32 %62*/
begin
calculate_mode_score__lr_ph12__4 = (calculate_mode_score__lr_ph12_66 ? calculate_mode_score__lr_ph12_63 : calculate_mode_score__lr_ph12_62);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %.4 = select i1 %66, i32 %63, i32 %62*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76))
begin
calculate_mode_score__lr_ph12__4_reg <= calculate_mode_score__lr_ph12__4;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph12__4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph12__4_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph*/
/*   %67 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
calculate_mode_score__lr_ph_67 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph*/
/*   %67 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_78))
begin
calculate_mode_score__lr_ph_67_reg <= calculate_mode_score__lr_ph_67;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph_67_reg"); $finish; end
end
end
always @(*) begin
calculate_mode_score__lr_ph_68 = calculate_mode_score__lr_ph_68_stage0_reg;
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph*/
/*   %68 = mul nsw i32 %10, 34*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79))
begin
calculate_mode_score__lr_ph_68_reg <= calculate_mode_score__lr_ph_68;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph_68_reg"); $finish; end
end
/* calculate_mode_score: %.lr.ph*/
/*   %68 = mul nsw i32 %10, 34*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79))
begin
calculate_mode_score__lr_ph_68_reg <= calculate_mode_score__lr_ph_68;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph_68_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.lr.ph*/
/*   %69 = icmp slt i32 %68, %10*/
begin
calculate_mode_score__lr_ph_69 = ($signed(calculate_mode_score__lr_ph_68) < $signed(calculate_mode_score_0_10_reg));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph*/
/*   %69 = icmp slt i32 %68, %10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79))
begin
calculate_mode_score__lr_ph_69_reg <= calculate_mode_score__lr_ph_69;
if (reset == 1'b0 && ^(calculate_mode_score__lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__lr_ph_69_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %v4_shrunk.06 = phi i32 [ 0, %.lr.ph ], [ %v4_shrunk.1, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_v4_shrunk_06 = 32'd0;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %v4_shrunk.06 = phi i32 [ 0, %.lr.ph ], [ %v4_shrunk.1, %75 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0))) */
begin
calculate_mode_score___crit_edge62_v4_shrunk_06 = calculate_mode_score_75_v4_shrunk_1_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %v4_shrunk.06 = phi i32 [ 0, %.lr.ph ], [ %v4_shrunk.1, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_v4_shrunk_06_reg <= calculate_mode_score___crit_edge62_v4_shrunk_06;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_v4_shrunk_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_v4_shrunk_06_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge62*/
/*   %v4_shrunk.06 = phi i32 [ 0, %.lr.ph ], [ %v4_shrunk.1, %75 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0)))
begin
calculate_mode_score___crit_edge62_v4_shrunk_06_reg <= calculate_mode_score___crit_edge62_v4_shrunk_06;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_v4_shrunk_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_v4_shrunk_06_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %ret.44 = phi i32 [ %26, %.lr.ph ], [ %ret.5, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_ret_44 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %ret.44 = phi i32 [ %26, %.lr.ph ], [ %ret.5, %75 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0))) */
begin
calculate_mode_score___crit_edge62_ret_44 = calculate_mode_score_75_ret_5;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %ret.44 = phi i32 [ %26, %.lr.ph ], [ %ret.5, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_ret_44_reg <= calculate_mode_score___crit_edge62_ret_44;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_ret_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_ret_44_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge62*/
/*   %ret.44 = phi i32 [ %26, %.lr.ph ], [ %ret.5, %75 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0)))
begin
calculate_mode_score___crit_edge62_ret_44_reg <= calculate_mode_score___crit_edge62_ret_44;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_ret_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_ret_44_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %x.33 = phi i32 [ 0, %.lr.ph ], [ %76, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_x_33 = 32'd0;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %x.33 = phi i32 [ 0, %.lr.ph ], [ %76, %75 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0))) */
begin
calculate_mode_score___crit_edge62_x_33 = calculate_mode_score_75_76;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %x.33 = phi i32 [ 0, %.lr.ph ], [ %76, %75 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph_79) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge62_x_33_reg <= calculate_mode_score___crit_edge62_x_33;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_x_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_x_33_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge62*/
/*   %x.33 = phi i32 [ 0, %.lr.ph ], [ %76, %75 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_75_88) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_75_exitcond == 1'd0)))
begin
calculate_mode_score___crit_edge62_x_33_reg <= calculate_mode_score___crit_edge62_x_33;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_x_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_x_33_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
begin
calculate_mode_score___crit_edge62_70 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
calculate_mode_score___crit_edge62_70_reg <= calculate_mode_score___crit_edge62_70;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_70_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %scevgep34 = getelementptr %struct.TYPE_7__* %70, i32 %x.33, i32 1*/
begin
calculate_mode_score___crit_edge62_scevgep34 = (calculate_mode_score___crit_edge62_70 + ((16 * calculate_mode_score___crit_edge62_x_33_reg) + 4));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %scevgep34 = getelementptr %struct.TYPE_7__* %70, i32 %x.33, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
calculate_mode_score___crit_edge62_scevgep34_reg <= calculate_mode_score___crit_edge62_scevgep34;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
begin
calculate_mode_score___crit_edge62_71 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_84))
begin
calculate_mode_score___crit_edge62_71_reg <= calculate_mode_score___crit_edge62_71;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_71_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %72 = icmp eq i8* %71, null*/
begin
calculate_mode_score___crit_edge62_72 = (calculate_mode_score___crit_edge62_71 == 0);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %72 = icmp eq i8* %71, null*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_84))
begin
calculate_mode_score___crit_edge62_72_reg <= calculate_mode_score___crit_edge62_72;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_72_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %brmerge = or i1 %72, %69*/
begin
calculate_mode_score___crit_edge62_brmerge = (calculate_mode_score___crit_edge62_72 | calculate_mode_score__lr_ph_69_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %brmerge = or i1 %72, %69*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_84))
begin
calculate_mode_score___crit_edge62_brmerge_reg <= calculate_mode_score___crit_edge62_brmerge;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62_brmerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62_brmerge_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %.mux = select i1 %72, i32 %10, i32 %68*/
begin
calculate_mode_score___crit_edge62__mux = (calculate_mode_score___crit_edge62_72_reg ? calculate_mode_score_0_10_reg : calculate_mode_score__lr_ph_68_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge62*/
/*   %.mux = select i1 %72, i32 %10, i32 %68*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85))
begin
calculate_mode_score___crit_edge62__mux_reg <= calculate_mode_score___crit_edge62__mux;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge62__mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge62__mux_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %73*/
/*   %74 = add nsw i32 %v4_shrunk.06, 1*/
begin
calculate_mode_score_73_74 = (calculate_mode_score___crit_edge62_v4_shrunk_06_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %73*/
/*   %74 = add nsw i32 %v4_shrunk.06, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
calculate_mode_score_73_74_reg <= calculate_mode_score_73_74;
if (reset == 1'b0 && ^(calculate_mode_score_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_73_74_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %75*/
/*   %.pn1 = phi i32 [ %10, %73 ], [ %.mux, %._crit_edge62 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd1)))
begin
calculate_mode_score_75__pn1 = calculate_mode_score___crit_edge62__mux;
end
/* calculate_mode_score: %75*/
/*   %.pn1 = phi i32 [ %10, %73 ], [ %.mux, %._crit_edge62 ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score_75__pn1 = calculate_mode_score_0_10_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %75*/
/*   %.pn1 = phi i32 [ %10, %73 ], [ %.mux, %._crit_edge62 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd1)))
begin
calculate_mode_score_75__pn1_reg <= calculate_mode_score_75__pn1;
if (reset == 1'b0 && ^(calculate_mode_score_75__pn1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75__pn1_reg"); $finish; end
end
/* calculate_mode_score: %75*/
/*   %.pn1 = phi i32 [ %10, %73 ], [ %.mux, %._crit_edge62 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_75__pn1_reg <= calculate_mode_score_75__pn1;
if (reset == 1'b0 && ^(calculate_mode_score_75__pn1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75__pn1_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %75*/
/*   %v4_shrunk.1 = phi i32 [ %74, %73 ], [ %v4_shrunk.06, %._crit_edge62 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd1)))
begin
calculate_mode_score_75_v4_shrunk_1 = calculate_mode_score___crit_edge62_v4_shrunk_06_reg;
end
/* calculate_mode_score: %75*/
/*   %v4_shrunk.1 = phi i32 [ %74, %73 ], [ %v4_shrunk.06, %._crit_edge62 ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score_75_v4_shrunk_1 = calculate_mode_score_73_74_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %75*/
/*   %v4_shrunk.1 = phi i32 [ %74, %73 ], [ %v4_shrunk.06, %._crit_edge62 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_85) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge62_brmerge_reg == 1'd1)))
begin
calculate_mode_score_75_v4_shrunk_1_reg <= calculate_mode_score_75_v4_shrunk_1;
if (reset == 1'b0 && ^(calculate_mode_score_75_v4_shrunk_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75_v4_shrunk_1_reg"); $finish; end
end
/* calculate_mode_score: %75*/
/*   %v4_shrunk.1 = phi i32 [ %74, %73 ], [ %v4_shrunk.06, %._crit_edge62 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB_73_87) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_75_v4_shrunk_1_reg <= calculate_mode_score_75_v4_shrunk_1;
if (reset == 1'b0 && ^(calculate_mode_score_75_v4_shrunk_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75_v4_shrunk_1_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %75*/
/*   %ret.5 = add nsw i32 %.pn1, %ret.44*/
begin
calculate_mode_score_75_ret_5 = (calculate_mode_score_75__pn1_reg + calculate_mode_score___crit_edge62_ret_44_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %75*/
/*   %ret.5 = add nsw i32 %.pn1, %ret.44*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_75_88))
begin
calculate_mode_score_75_ret_5_reg <= calculate_mode_score_75_ret_5;
if (reset == 1'b0 && ^(calculate_mode_score_75_ret_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75_ret_5_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %75*/
/*   %76 = add nsw i32 %x.33, 1*/
begin
calculate_mode_score_75_76 = (calculate_mode_score___crit_edge62_x_33_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %75*/
/*   %76 = add nsw i32 %x.33, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_75_88))
begin
calculate_mode_score_75_76_reg <= calculate_mode_score_75_76;
if (reset == 1'b0 && ^(calculate_mode_score_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75_76_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %75*/
/*   %exitcond = icmp eq i32 %76, %8*/
begin
calculate_mode_score_75_exitcond = (calculate_mode_score_75_76 == calculate_mode_score_0_8_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %75*/
/*   %exitcond = icmp eq i32 %76, %8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_75_88))
begin
calculate_mode_score_75_exitcond_reg <= calculate_mode_score_75_exitcond;
if (reset == 1'b0 && ^(calculate_mode_score_75_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_75_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge*/
/*   %v4_shrunk.0.lcssa = phi i32 [ 0, %.preheader ], [ %v4_shrunk.1, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score___crit_edge_v4_shrunk_0_lcssa = 32'd0;
end
/* calculate_mode_score: %._crit_edge*/
/*   %v4_shrunk.0.lcssa = phi i32 [ 0, %.preheader ], [ %v4_shrunk.1, %._crit_edge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score___crit_edge_v4_shrunk_0_lcssa = calculate_mode_score_75_v4_shrunk_1_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge*/
/*   %v4_shrunk.0.lcssa = phi i32 [ 0, %.preheader ], [ %v4_shrunk.1, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg <= calculate_mode_score___crit_edge_v4_shrunk_0_lcssa;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge_v4_shrunk_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge*/
/*   %v4_shrunk.0.lcssa = phi i32 [ 0, %.preheader ], [ %v4_shrunk.1, %._crit_edge.loopexit ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg <= calculate_mode_score___crit_edge_v4_shrunk_0_lcssa;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge_v4_shrunk_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %._crit_edge*/
/*   %ret.4.lcssa = phi i32 [ %26, %.preheader ], [ %ret.5, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score___crit_edge_ret_4_lcssa = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %._crit_edge*/
/*   %ret.4.lcssa = phi i32 [ %26, %.preheader ], [ %ret.5, %._crit_edge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score___crit_edge_ret_4_lcssa = calculate_mode_score_75_ret_5_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge*/
/*   %ret.4.lcssa = phi i32 [ %26, %.preheader ], [ %ret.5, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader_77) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score___crit_edge_ret_4_lcssa_reg <= calculate_mode_score___crit_edge_ret_4_lcssa;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge_ret_4_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge_ret_4_lcssa_reg"); $finish; end
end
/* calculate_mode_score: %._crit_edge*/
/*   %ret.4.lcssa = phi i32 [ %26, %.preheader ], [ %ret.5, %._crit_edge.loopexit ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_loopexit_89) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score___crit_edge_ret_4_lcssa_reg <= calculate_mode_score___crit_edge_ret_4_lcssa;
if (reset == 1'b0 && ^(calculate_mode_score___crit_edge_ret_4_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score___crit_edge_ret_4_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %ret.611 = phi i32 [ %26, %.lr.ph12 ], [ %ret.7, %77 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_77_ret_611 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %77*/
/*   %ret.611 = phi i32 [ %26, %.lr.ph12 ], [ %ret.7, %77 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd0))) */
begin
calculate_mode_score_77_ret_611 = calculate_mode_score_77_ret_7_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %ret.611 = phi i32 [ %26, %.lr.ph12 ], [ %ret.7, %77 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_77_ret_611_reg <= calculate_mode_score_77_ret_611;
if (reset == 1'b0 && ^(calculate_mode_score_77_ret_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_ret_611_reg"); $finish; end
end
/* calculate_mode_score: %77*/
/*   %ret.611 = phi i32 [ %26, %.lr.ph12 ], [ %ret.7, %77 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd0)))
begin
calculate_mode_score_77_ret_611_reg <= calculate_mode_score_77_ret_611;
if (reset == 1'b0 && ^(calculate_mode_score_77_ret_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_ret_611_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %x.410 = phi i32 [ 0, %.lr.ph12 ], [ %79, %77 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_77_x_410 = 32'd0;
end
/* calculate_mode_score: %77*/
/*   %x.410 = phi i32 [ 0, %.lr.ph12 ], [ %79, %77 ]*/
else /* if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd0))) */
begin
calculate_mode_score_77_x_410 = calculate_mode_score_77_79_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %x.410 = phi i32 [ 0, %.lr.ph12 ], [ %79, %77 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph12_76) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score_77_x_410_reg <= calculate_mode_score_77_x_410;
if (reset == 1'b0 && ^(calculate_mode_score_77_x_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_x_410_reg"); $finish; end
end
/* calculate_mode_score: %77*/
/*   %x.410 = phi i32 [ 0, %.lr.ph12 ], [ %79, %77 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_77_96) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_77_exitcond38_reg == 1'd0)))
begin
calculate_mode_score_77_x_410_reg <= calculate_mode_score_77_x_410;
if (reset == 1'b0 && ^(calculate_mode_score_77_x_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_x_410_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
begin
calculate_mode_score_77_78 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
calculate_mode_score_77_78_reg <= calculate_mode_score_77_78;
if (reset == 1'b0 && ^(calculate_mode_score_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_78_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %scevgep43 = getelementptr %struct.TYPE_7__* %78, i32 %x.410, i32 1*/
begin
calculate_mode_score_77_scevgep43 = (calculate_mode_score_77_78 + ((16 * calculate_mode_score_77_x_410_reg) + 4));
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %scevgep43 = getelementptr %struct.TYPE_7__* %78, i32 %x.410, i32 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
calculate_mode_score_77_scevgep43_reg <= calculate_mode_score_77_scevgep43;
if (reset == 1'b0 && ^(calculate_mode_score_77_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_scevgep43_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %.pn = select i1 %or.cond, i32 %.4, i32 %10*/
begin
calculate_mode_score_77__pn = (calculate_mode_score__lr_ph12_or_cond_reg ? calculate_mode_score__lr_ph12__4_reg : calculate_mode_score_0_10_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %.pn = select i1 %or.cond, i32 %.4, i32 %10*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
calculate_mode_score_77__pn_reg <= calculate_mode_score_77__pn;
if (reset == 1'b0 && ^(calculate_mode_score_77__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77__pn_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %ret.7 = add nsw i32 %.pn, %ret.611*/
begin
calculate_mode_score_77_ret_7 = (calculate_mode_score_77__pn + calculate_mode_score_77_ret_611_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %ret.7 = add nsw i32 %.pn, %ret.611*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
calculate_mode_score_77_ret_7_reg <= calculate_mode_score_77_ret_7;
if (reset == 1'b0 && ^(calculate_mode_score_77_ret_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_ret_7_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %79 = add nsw i32 %x.410, 1*/
begin
calculate_mode_score_77_79 = (calculate_mode_score_77_x_410_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %79 = add nsw i32 %x.410, 1*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
calculate_mode_score_77_79_reg <= calculate_mode_score_77_79;
if (reset == 1'b0 && ^(calculate_mode_score_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_79_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %77*/
/*   %exitcond38 = icmp eq i32 %79, %8*/
begin
calculate_mode_score_77_exitcond38 = (calculate_mode_score_77_79 == calculate_mode_score_0_8_reg);
end
end
always @(posedge clk) begin
/* calculate_mode_score: %77*/
/*   %exitcond38 = icmp eq i32 %79, %8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
calculate_mode_score_77_exitcond38_reg <= calculate_mode_score_77_exitcond38;
if (reset == 1'b0 && ^(calculate_mode_score_77_exitcond38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_77_exitcond38_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 != 32'd129)) & (calculate_mode_score___crit_edge63_28 != 32'd128)) & (calculate_mode_score___crit_edge63_28 != 32'd130)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if ((((cur_state == LEGUP_F_calculate_mode_score_BB_29_48) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_29_33_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score_29_32;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score__preheader20_40 == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if ((((cur_state == LEGUP_F_calculate_mode_score_BB_45_60) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_45_46_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader9_74) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score___crit_edge63_26_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_92) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score___crit_edge_ret_4_lcssa_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score_77_ret_7_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score_50_53_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score_55_ret_3_reg;
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
else /* if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) & (memory_controller_waitrequest == 1'd0))) */
begin
calculate_mode_score__loopexit_ret_8 = calculate_mode_score_29_32_reg;
end
end
always @(posedge clk) begin
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_46) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score___crit_edge63_28 != 32'd129)) & (calculate_mode_score___crit_edge63_28 != 32'd128)) & (calculate_mode_score___crit_edge63_28 != 32'd130)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_29_48) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_29_33_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader20_55) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score__preheader20_40 == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB_45_60) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_45_46_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if ((((cur_state == LEGUP_F_calculate_mode_score_BB__preheader9_74) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_58_60_reg == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_92) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit_97) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit1_98) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit2_99) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   %ret.8 = phi i32 [ %26, %._crit_edge63 ], [ %ret.4.lcssa, %._crit_edge ], [ %26, %.preheader9 ], [ %26, %45 ], [ %26, %.preheader20 ], [ %32, %29 ], [ %ret.7, %.loopexit.loopexit ], [ %53, %.loopexit.loopexit1 ], [ %ret.3, %.loopexit.loopexit2 ], [ %32, %.loopexit.loopexit3 ]*/
if (((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_loopexit3_100) & (memory_controller_waitrequest == 1'd0)))
begin
calculate_mode_score__loopexit_ret_8_reg <= calculate_mode_score__loopexit_ret_8;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score__loopexit_ret_8_reg"); $finish; end
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %8 = sdiv i32 %7, 0*/
begin
calculate_mode_score_signed_divide_32_0_op0 = calculate_mode_score_0_7;
end
end
always @(*) begin
/* calculate_mode_score: %0*/
/*   %8 = sdiv i32 %7, 0*/
if (reset) begin calculate_mode_score_signed_divide_32_0_op1 = 0; end
begin
calculate_mode_score_signed_divide_32_0_op1 = 32'd0;
end
end
always @(*) begin
lpm_divide_calculate_mode_score_0_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_calculate_mode_score_0_8_out = lpm_divide_calculate_mode_score_0_8_temp_out;
end
always @(*) begin
calculate_mode_score_signed_divide_32_0 = lpm_divide_calculate_mode_score_0_8_out;
end
always @(*) begin
lpm_mult_calculate_mode_score_0_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %0*/
/*   %7 = mul nsw i32 %6, %h*/
if ((lpm_mult_calculate_mode_score_0_7_en == 1'd1))
begin
calculate_mode_score_0_7_stage0_reg <= (calculate_mode_score_0_6 * arg_h);
end
end
always @(*) begin
lpm_mult_calculate_mode_score_14_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %14*/
/*   %15 = mul nsw i32 %12, %4*/
if ((lpm_mult_calculate_mode_score_14_15_en == 1'd1))
begin
calculate_mode_score_14_15_stage0_reg <= (calculate_mode_score_0_12_reg * calculate_mode_score_0_4_reg);
end
end
always @(*) begin
lpm_mult_calculate_mode_score_21_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %21*/
/*   %22 = mul nsw i32 %19, %4*/
if ((lpm_mult_calculate_mode_score_21_22_en == 1'd1))
begin
calculate_mode_score_21_22_stage0_reg <= (calculate_mode_score_16_19_reg * calculate_mode_score_0_4_reg);
end
end
always @(*) begin
lpm_mult_calculate_mode_score___crit_edge63_26_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %._crit_edge63*/
/*   %26 = mul i32 %25, %24*/
if ((lpm_mult_calculate_mode_score___crit_edge63_26_en == 1'd1))
begin
calculate_mode_score___crit_edge63_26_stage0_reg <= (calculate_mode_score___crit_edge63_25 * calculate_mode_score___crit_edge63_24);
end
end
always @(*) begin
lpm_mult_calculate_mode_score_29_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %29*/
/*   %31 = mul i32 %30, %10*/
if ((lpm_mult_calculate_mode_score_29_31_en == 1'd1))
begin
calculate_mode_score_29_31_stage0_reg <= (calculate_mode_score_29_30 * calculate_mode_score_0_10_reg);
end
end
always @(*) begin
lpm_mult_calculate_mode_score__lr_ph24_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %42 = mul nsw i32 %10, 9*/
if ((lpm_mult_calculate_mode_score__lr_ph24_42_en == 1'd1))
begin
calculate_mode_score__lr_ph24_42_stage0_reg <= (calculate_mode_score_0_10_reg * 32'd9);
end
end
always @(*) begin
lpm_mult_calculate_mode_score__lr_ph24_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph24*/
/*   %43 = mul nsw i32 %10, 33*/
if ((lpm_mult_calculate_mode_score__lr_ph24_43_en == 1'd1))
begin
calculate_mode_score__lr_ph24_43_stage0_reg <= (calculate_mode_score_0_10_reg * 32'd33);
end
end
always @(*) begin
lpm_mult_calculate_mode_score_50_score1_0_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %50*/
/*   %score1.0 = mul i32 %49, %score1.0.v*/
if ((lpm_mult_calculate_mode_score_50_score1_0_en == 1'd1))
begin
calculate_mode_score_50_score1_0_stage0_reg <= (calculate_mode_score__lr_ph18_49_reg * calculate_mode_score_50_score1_0_v);
end
end
always @(*) begin
lpm_mult_calculate_mode_score__lr_ph12_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %62 = mul nsw i32 %10, 10*/
if ((lpm_mult_calculate_mode_score__lr_ph12_62_en == 1'd1))
begin
calculate_mode_score__lr_ph12_62_stage0_reg <= (calculate_mode_score_0_10_reg * 32'd10);
end
end
always @(*) begin
lpm_mult_calculate_mode_score__lr_ph12_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph12*/
/*   %63 = mul nsw i32 %10, 34*/
if ((lpm_mult_calculate_mode_score__lr_ph12_63_en == 1'd1))
begin
calculate_mode_score__lr_ph12_63_stage0_reg <= (calculate_mode_score_0_10_reg * 32'd34);
end
end
always @(*) begin
lpm_mult_calculate_mode_score__lr_ph_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* calculate_mode_score: %.lr.ph*/
/*   %68 = mul nsw i32 %10, 34*/
if ((lpm_mult_calculate_mode_score__lr_ph_68_en == 1'd1))
begin
calculate_mode_score__lr_ph_68_stage0_reg <= (calculate_mode_score_0_10_reg * 32'd34);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   ret i32 %ret.8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_101))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %35*/
/*   store i8* null, i8** %scevgep61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_59))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %55*/
/*   store i8* null, i8** %scevgep55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
memory_controller_enable_a = 1'd1;
end
/* calculate_mode_score: %73*/
/*   store i8* null, i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_address_a = calculate_mode_score_0_1;
end
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_address_a = calculate_mode_score_0_9_reg;
end
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
memory_controller_address_a = calculate_mode_score___crit_edge63_27;
end
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
memory_controller_address_a = calculate_mode_score__lr_ph30_34_reg;
end
/* calculate_mode_score: %35*/
/*   store i8* null, i8** %scevgep61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
memory_controller_address_a = calculate_mode_score_35_scevgep61;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
memory_controller_address_a = arg_training_set_v4_shrunk;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_59))
begin
memory_controller_address_a = arg_training_set_v1_shrunk;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_address_a = calculate_mode_score_0_9_reg;
end
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
memory_controller_address_a = calculate_mode_score_50_scevgep47;
end
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
memory_controller_address_a = calculate_mode_score__lr_ph24_41_reg;
end
/* calculate_mode_score: %55*/
/*   store i8* null, i8** %scevgep55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
memory_controller_address_a = calculate_mode_score_55_scevgep55;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80))
begin
memory_controller_address_a = calculate_mode_score__lr_ph_67_reg;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
memory_controller_address_a = calculate_mode_score___crit_edge62_scevgep34;
end
/* calculate_mode_score: %73*/
/*   store i8* null, i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
memory_controller_address_a = calculate_mode_score___crit_edge62_scevgep34_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %35*/
/*   store i8* null, i8** %scevgep61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
memory_controller_write_enable_a = 1'd1;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
memory_controller_write_enable_a = 1'd1;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %55*/
/*   store i8* null, i8** %scevgep55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
memory_controller_write_enable_a = 1'd1;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* calculate_mode_score: %73*/
/*   store i8* null, i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* calculate_mode_score: %35*/
/*   store i8* null, i8** %scevgep61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
memory_controller_in_a = 0;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
memory_controller_in_a = 32'd0;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_59))
begin
memory_controller_in_a = 32'd0;
end
/* calculate_mode_score: %55*/
/*   store i8* null, i8** %scevgep55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
memory_controller_in_a = 0;
end
/* calculate_mode_score: %73*/
/*   store i8* null, i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
memory_controller_in_a = 0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %._crit_edge63*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge63_44))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %35*/
/*   %36 = load %struct.TYPE_7__** %34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_50))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %35*/
/*   store i8* null, i8** %scevgep61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_35_52))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_58))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %45*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_45_59))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %49 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %50*/
/*   %51 = load i8** %scevgep47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_50_64))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %55*/
/*   %56 = load %struct.TYPE_7__** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_69))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %55*/
/*   store i8* null, i8** %scevgep55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_55_71))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %70 = load %struct.TYPE_7__** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_80))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %._crit_edge62*/
/*   %71 = load i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge62_82))
begin
memory_controller_size_a = 2'd2;
end
/* calculate_mode_score: %73*/
/*   store i8* null, i8** %scevgep34, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_73_86))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_39))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 %v4_shrunk.0.lcssa, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
memory_controller_enable_b = 1'd1;
end
/* calculate_mode_score: %77*/
/*   store i8* null, i8** %scevgep43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_address_b = calculate_mode_score_0_5;
end
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_address_b = calculate_mode_score_0_11_reg;
end
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_39))
begin
memory_controller_address_b = calculate_mode_score_16_18;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_address_b = calculate_mode_score__lr_ph18_47;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90))
begin
memory_controller_address_b = arg_training_set_v1_shrunk;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 %v4_shrunk.0.lcssa, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91))
begin
memory_controller_address_b = arg_training_set_v4_shrunk;
end
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
memory_controller_address_b = calculate_mode_score__lr_ph12_61_reg;
end
/* calculate_mode_score: %77*/
/*   store i8* null, i8** %scevgep43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
memory_controller_address_b = calculate_mode_score_77_scevgep43;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90))
begin
memory_controller_write_enable_b = 1'd1;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 %v4_shrunk.0.lcssa, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91))
begin
memory_controller_write_enable_b = 1'd1;
end
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* calculate_mode_score: %77*/
/*   store i8* null, i8** %scevgep43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90))
begin
memory_controller_in_b = 32'd0;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 %v4_shrunk.0.lcssa, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91))
begin
memory_controller_in_b = calculate_mode_score___crit_edge_v4_shrunk_0_lcssa_reg;
end
/* calculate_mode_score: %77*/
/*   store i8* null, i8** %scevgep43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
memory_controller_in_b = 0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* calculate_mode_score: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %16*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_16_39))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %.lr.ph18*/
/*   %48 = load %struct.TYPE_7__** %47, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__lr_ph18_61))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 0, i32* %training_set_v1_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_90))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %._crit_edge*/
/*   store i32 %v4_shrunk.0.lcssa, i32* %training_set_v4_shrunk, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB___crit_edge_91))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %77*/
/*   %78 = load %struct.TYPE_7__** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_93))
begin
memory_controller_size_b = 2'd2;
end
/* calculate_mode_score: %77*/
/*   store i8* null, i8** %scevgep43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB_77_95))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* calculate_mode_score: %.loopexit*/
/*   ret i32 %ret.8*/
if ((cur_state == LEGUP_F_calculate_mode_score_BB__loopexit_101))
begin
return_val <= calculate_mode_score__loopexit_ret_8_reg;
if (reset == 1'b0 && ^(calculate_mode_score__loopexit_ret_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  calculate_mode_score_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_arg_s;
reg [31:0] calculate_mode_score_arg_h;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_arg_info;
reg [31:0] calculate_mode_score_arg_report;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_arg_training_set_v1_shrunk;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_arg_training_set_v4_shrunk;
wire  calculate_mode_score_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_memory_controller_address_a;
wire  calculate_mode_score_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] calculate_mode_score_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] calculate_mode_score_memory_controller_out_a;
wire [1:0] calculate_mode_score_memory_controller_size_a;
wire  calculate_mode_score_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calculate_mode_score_memory_controller_address_b;
wire  calculate_mode_score_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] calculate_mode_score_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] calculate_mode_score_memory_controller_out_b;
wire [1:0] calculate_mode_score_memory_controller_size_b;
reg  calculate_mode_score_memory_controller_waitrequest;
wire  calculate_mode_score_finish;
reg  calculate_mode_score_finish_final;
wire [31:0] calculate_mode_score_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


calculate_mode_score calculate_mode_score_inst (
	.memory_controller_enable_a (calculate_mode_score_memory_controller_enable_a),
	.memory_controller_address_a (calculate_mode_score_memory_controller_address_a),
	.memory_controller_write_enable_a (calculate_mode_score_memory_controller_write_enable_a),
	.memory_controller_in_a (calculate_mode_score_memory_controller_in_a),
	.memory_controller_size_a (calculate_mode_score_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (calculate_mode_score_memory_controller_enable_b),
	.memory_controller_address_b (calculate_mode_score_memory_controller_address_b),
	.memory_controller_write_enable_b (calculate_mode_score_memory_controller_write_enable_b),
	.memory_controller_in_b (calculate_mode_score_memory_controller_in_b),
	.memory_controller_size_b (calculate_mode_score_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (calculate_mode_score_start),
	.finish (calculate_mode_score_finish),
	.return_val (calculate_mode_score_return_val),
	.arg_s (calculate_mode_score_arg_s),
	.arg_h (calculate_mode_score_arg_h),
	.arg_info (calculate_mode_score_arg_info),
	.arg_report (calculate_mode_score_arg_report),
	.arg_training_set_v1_shrunk (calculate_mode_score_arg_training_set_v1_shrunk),
	.arg_training_set_v4_shrunk (calculate_mode_score_arg_training_set_v4_shrunk)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (calculate_mode_score_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
begin
main_0_1 = calculate_mode_score_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
calculate_mode_score_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_s <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_s"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_h <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_h"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_info <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_info"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_report <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_report"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_training_set_v1_shrunk <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_training_set_v1_shrunk"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
calculate_mode_score_arg_training_set_v4_shrunk <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calculate_mode_score_arg_training_set_v4_shrunk"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
begin
calculate_mode_score_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
begin
calculate_mode_score_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
calculate_mode_score_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
calculate_mode_score_finish_final = calculate_mode_score_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = calculate_mode_score_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = calculate_mode_score_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = calculate_mode_score_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = calculate_mode_score_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = calculate_mode_score_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = calculate_mode_score_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = calculate_mode_score_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = calculate_mode_score_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = calculate_mode_score_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = calculate_mode_score_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = calculate_mode_score_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = calculate_mode_score_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = calculate_mode_score_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = calculate_mode_score_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = calculate_mode_score_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = calculate_mode_score_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = calculate_mode_score_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = calculate_mode_score_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = calculate_mode_score_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @calculate_mode_score(%struct.TYPE_8__* undef, i32 undef, %struct.TYPE_6__* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = calculate_mode_score_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
