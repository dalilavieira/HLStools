//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:22 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module swp_freq_calcuation
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_state,
	arg_i,
	arg_v,
	arg_V,
	arg_vmax,
	arg_vmin,
	arg_SIGMIN,
	arg_fOSC,
	arg_afcex_freq,
	arg_swp_ofs,
	arg_SIG1
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_4_34 = 8'd34;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_4_35 = 8'd35;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_4_36 = 8'd36;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_4_37 = 8'd37;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_10_38 = 8'd38;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_10_39 = 8'd39;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_10_40 = 8'd40;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_10_41 = 8'd41;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_16_42 = 8'd42;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_16_43 = 8'd43;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44 = 8'd44;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_22_45 = 8'd45;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_24_46 = 8'd46;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_24_47 = 8'd47;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_24_48 = 8'd48;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_24_49 = 8'd49;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_30_50 = 8'd50;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_30_51 = 8'd51;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB___crit_edge_52 = 8'd52;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_35_53 = 8'd53;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_35_54 = 8'd54;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_35_55 = 8'd55;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_35_56 = 8'd56;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_39_57 = 8'd57;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_39_58 = 8'd58;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_39_59 = 8'd59;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_39_60 = 8'd60;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_43_61 = 8'd61;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_43_62 = 8'd62;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_43_63 = 8'd63;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_43_64 = 8'd64;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_49_65 = 8'd65;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_52_66 = 8'd66;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_52_67 = 8'd67;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_56_68 = 8'd68;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_56_69 = 8'd69;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_59_70 = 8'd70;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_59_71 = 8'd71;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_63_72 = 8'd72;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_65_73 = 8'd73;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_65_74 = 8'd74;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_65_75 = 8'd75;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_65_76 = 8'd76;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_69_77 = 8'd77;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_69_78 = 8'd78;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_69_79 = 8'd79;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_69_80 = 8'd80;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_75_81 = 8'd81;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_78_82 = 8'd82;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_78_83 = 8'd83;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_82_84 = 8'd84;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_82_85 = 8'd85;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_84_86 = 8'd86;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_84_87 = 8'd87;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_87_88 = 8'd88;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_90_89 = 8'd89;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_90_90 = 8'd90;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_90_91 = 8'd91;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_90_92 = 8'd92;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_94_93 = 8'd93;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_94_94 = 8'd94;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_94_95 = 8'd95;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_94_96 = 8'd96;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_98_97 = 8'd97;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_98_98 = 8'd98;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_98_99 = 8'd99;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_98_100 = 8'd100;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_105_101 = 8'd101;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_105_102 = 8'd102;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_110_103 = 8'd103;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_114_104 = 8'd104;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_114_105 = 8'd105;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_114_106 = 8'd106;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_114_107 = 8'd107;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_120_108 = 8'd108;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_120_109 = 8'd109;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_125_110 = 8'd110;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_126_111 = 8'd111;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_126_112 = 8'd112;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_126_113 = 8'd113;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_126_114 = 8'd114;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_130_115 = 8'd115;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_130_116 = 8'd116;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_130_117 = 8'd117;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_130_118 = 8'd118;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_137_119 = 8'd119;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_137_120 = 8'd120;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121 = 8'd121;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_141_122 = 8'd122;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_141_123 = 8'd123;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_141_124 = 8'd124;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_141_125 = 8'd125;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_145_126 = 8'd126;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_145_127 = 8'd127;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_145_128 = 8'd128;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_145_129 = 8'd129;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_149_130 = 8'd130;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_149_131 = 8'd131;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_149_132 = 8'd132;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_149_133 = 8'd133;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_155_134 = 8'd134;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_158_135 = 8'd135;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_158_136 = 8'd136;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_162_137 = 8'd137;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_162_138 = 8'd138;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_165_139 = 8'd139;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_165_140 = 8'd140;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_169_141 = 8'd141;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_171_142 = 8'd142;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_172_143 = 8'd143;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_172_144 = 8'd144;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_172_145 = 8'd145;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_172_146 = 8'd146;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_180_147 = 8'd147;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_183_148 = 8'd148;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_183_149 = 8'd149;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_187_150 = 8'd150;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_187_151 = 8'd151;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_189_152 = 8'd152;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_189_153 = 8'd153;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB__thread55_154 = 8'd154;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_193_155 = 8'd155;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_196_156 = 8'd156;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_199_157 = 8'd157;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_199_158 = 8'd158;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_203_159 = 8'd159;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_203_160 = 8'd160;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_206_161 = 8'd161;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_206_162 = 8'd162;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163 = 8'd163;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_213_164 = 8'd164;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB_213_165 = 8'd165;
parameter [7:0] LEGUP_F_swp_freq_calcuation_BB__thread1_166 = 8'd166;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_state;
input [31:0] arg_i;
input [31:0] arg_v;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_V;
input [31:0] arg_vmax;
input [31:0] arg_vmin;
input [31:0] arg_SIGMIN;
input [31:0] arg_fOSC;
input [31:0] arg_afcex_freq;
input [31:0] arg_swp_ofs;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_SIG1;
reg [7:0] cur_state;
reg [31:0] swp_freq_calcuation_0_1;
reg [31:0] swp_freq_calcuation_0_1_reg;
reg  swp_freq_calcuation_0_2;
reg  swp_freq_calcuation_0_2_reg;
reg  swp_freq_calcuation_0_3;
reg  swp_freq_calcuation_0_3_reg;
reg  swp_freq_calcuation_0_or_cond;
reg  swp_freq_calcuation_0_or_cond_reg;
reg [31:0] swp_freq_calcuation_4_5;
reg [31:0] swp_freq_calcuation_4_5_reg;
reg  swp_freq_calcuation_4_6;
reg  swp_freq_calcuation_4_6_reg;
reg [31:0] swp_freq_calcuation_4__sum22;
reg [31:0] swp_freq_calcuation_4__sum22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_4_7_reg;
reg [31:0] swp_freq_calcuation_4_8;
reg [31:0] swp_freq_calcuation_4_8_reg;
reg  swp_freq_calcuation_4_9;
reg  swp_freq_calcuation_4_9_reg;
reg  swp_freq_calcuation_4_or_cond8;
reg  swp_freq_calcuation_4_or_cond8_reg;
reg [31:0] swp_freq_calcuation_10__sum23;
reg [31:0] swp_freq_calcuation_10__sum23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_10_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_10_11_reg;
reg [31:0] swp_freq_calcuation_10_12;
reg [31:0] swp_freq_calcuation_10_12_reg;
reg  swp_freq_calcuation_10_13;
reg  swp_freq_calcuation_10_13_reg;
reg  swp_freq_calcuation_10_14;
reg  swp_freq_calcuation_10_14_reg;
reg  swp_freq_calcuation_10_or_cond24;
reg  swp_freq_calcuation_10_or_cond24_reg;
reg  swp_freq_calcuation_10_15;
reg  swp_freq_calcuation_10_15_reg;
reg  swp_freq_calcuation_10_or_cond25;
reg  swp_freq_calcuation_10_or_cond25_reg;
reg [31:0] swp_freq_calcuation_16_17;
reg [31:0] swp_freq_calcuation_16_17_reg;
reg [31:0] swp_freq_calcuation_16_18;
reg [31:0] swp_freq_calcuation_16_18_reg;
reg [31:0] swp_freq_calcuation_16_19;
reg [31:0] swp_freq_calcuation_16_19_reg;
reg [7:0] swp_freq_calcuation_16_20;
reg [7:0] swp_freq_calcuation_16_20_reg;
reg  swp_freq_calcuation___crit_edge7_21;
reg  swp_freq_calcuation___crit_edge7_21_reg;
reg  swp_freq_calcuation_22_23;
reg  swp_freq_calcuation_22_23_reg;
reg [31:0] swp_freq_calcuation_24__sum21;
reg [31:0] swp_freq_calcuation_24__sum21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_24_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_24_25_reg;
reg [31:0] swp_freq_calcuation_24_26;
reg [31:0] swp_freq_calcuation_24_26_reg;
reg  swp_freq_calcuation_24_27;
reg  swp_freq_calcuation_24_27_reg;
reg  swp_freq_calcuation_24_28;
reg  swp_freq_calcuation_24_28_reg;
reg  swp_freq_calcuation_24_or_cond26;
reg  swp_freq_calcuation_24_or_cond26_reg;
reg  swp_freq_calcuation_24_29;
reg  swp_freq_calcuation_24_29_reg;
reg  swp_freq_calcuation_24_or_cond27;
reg  swp_freq_calcuation_24_or_cond27_reg;
reg [31:0] swp_freq_calcuation_30_31;
reg [31:0] swp_freq_calcuation_30_31_reg;
reg [31:0] swp_freq_calcuation_30_32;
reg [31:0] swp_freq_calcuation_30_32_reg;
reg [7:0] swp_freq_calcuation_30_33;
reg [7:0] swp_freq_calcuation_30_33_reg;
reg  swp_freq_calcuation___crit_edge_34;
reg  swp_freq_calcuation___crit_edge_34_reg;
reg [31:0] swp_freq_calcuation_35__sum17;
reg [31:0] swp_freq_calcuation_35__sum17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_35_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_35_36_reg;
reg [31:0] swp_freq_calcuation_35_37;
reg [31:0] swp_freq_calcuation_35_37_reg;
reg  swp_freq_calcuation_35_38;
reg  swp_freq_calcuation_35_38_reg;
reg [31:0] swp_freq_calcuation_39__sum18;
reg [31:0] swp_freq_calcuation_39__sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_39_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_39_40_reg;
reg [31:0] swp_freq_calcuation_39_41;
reg [31:0] swp_freq_calcuation_39_41_reg;
reg  swp_freq_calcuation_39_42;
reg  swp_freq_calcuation_39_42_reg;
reg [31:0] swp_freq_calcuation_43__sum19;
reg [31:0] swp_freq_calcuation_43__sum19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_43_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_43_44_reg;
reg [31:0] swp_freq_calcuation_43_45;
reg [31:0] swp_freq_calcuation_43_45_reg;
reg  swp_freq_calcuation_43_46;
reg  swp_freq_calcuation_43_46_reg;
reg  swp_freq_calcuation_43_47;
reg  swp_freq_calcuation_43_47_reg;
reg  swp_freq_calcuation_43_or_cond28;
reg  swp_freq_calcuation_43_or_cond28_reg;
reg  swp_freq_calcuation_43_48;
reg  swp_freq_calcuation_43_48_reg;
reg  swp_freq_calcuation_43_or_cond29;
reg  swp_freq_calcuation_43_or_cond29_reg;
reg  swp_freq_calcuation_49_50;
reg  swp_freq_calcuation_49_50_reg;
reg  swp_freq_calcuation_49_51;
reg  swp_freq_calcuation_49_51_reg;
reg  swp_freq_calcuation_49_or_cond30;
reg  swp_freq_calcuation_49_or_cond30_reg;
reg  swp_freq_calcuation_52_53;
reg  swp_freq_calcuation_52_53_reg;
reg [31:0] swp_freq_calcuation_52_54;
reg [31:0] swp_freq_calcuation_52_54_reg;
reg [31:0] swp_freq_calcuation_52_55;
reg [31:0] swp_freq_calcuation_52_55_reg;
reg [31:0] swp_freq_calcuation_56_57;
reg [31:0] swp_freq_calcuation_56_57_reg;
reg [7:0] swp_freq_calcuation_56_58;
reg [7:0] swp_freq_calcuation_56_58_reg;
reg [31:0] swp_freq_calcuation_59_60;
reg [31:0] swp_freq_calcuation_59_60_reg;
reg [31:0] swp_freq_calcuation_59_61;
reg [31:0] swp_freq_calcuation_59_61_reg;
reg [7:0] swp_freq_calcuation_59_62;
reg [7:0] swp_freq_calcuation_59_62_reg;
reg  swp_freq_calcuation_63_64;
reg  swp_freq_calcuation_63_64_reg;
reg  swp_freq_calcuation_63_or_cond56;
reg  swp_freq_calcuation_63_or_cond56_reg;
reg [31:0] swp_freq_calcuation_65__sum15;
reg [31:0] swp_freq_calcuation_65__sum15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_65_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_65_66_reg;
reg [31:0] swp_freq_calcuation_65_67;
reg [31:0] swp_freq_calcuation_65_67_reg;
reg  swp_freq_calcuation_65_68;
reg  swp_freq_calcuation_65_68_reg;
reg [31:0] swp_freq_calcuation_69__sum16;
reg [31:0] swp_freq_calcuation_69__sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_69_70_reg;
reg [31:0] swp_freq_calcuation_69_71;
reg [31:0] swp_freq_calcuation_69_71_reg;
reg  swp_freq_calcuation_69_72;
reg  swp_freq_calcuation_69_72_reg;
reg  swp_freq_calcuation_69_73;
reg  swp_freq_calcuation_69_73_reg;
reg  swp_freq_calcuation_69_or_cond31;
reg  swp_freq_calcuation_69_or_cond31_reg;
reg  swp_freq_calcuation_69_74;
reg  swp_freq_calcuation_69_74_reg;
reg  swp_freq_calcuation_69_or_cond32;
reg  swp_freq_calcuation_69_or_cond32_reg;
reg  swp_freq_calcuation_75_76;
reg  swp_freq_calcuation_75_76_reg;
reg  swp_freq_calcuation_75_77;
reg  swp_freq_calcuation_75_77_reg;
reg  swp_freq_calcuation_75_or_cond33;
reg  swp_freq_calcuation_75_or_cond33_reg;
reg  swp_freq_calcuation_78_79;
reg  swp_freq_calcuation_78_79_reg;
reg [31:0] swp_freq_calcuation_78_80;
reg [31:0] swp_freq_calcuation_78_80_reg;
reg [31:0] swp_freq_calcuation_78_81;
reg [31:0] swp_freq_calcuation_78_81_reg;
reg [7:0] swp_freq_calcuation_82_83;
reg [7:0] swp_freq_calcuation_82_83_reg;
reg [31:0] swp_freq_calcuation_84_85;
reg [31:0] swp_freq_calcuation_84_85_reg;
reg [7:0] swp_freq_calcuation_84_86;
reg [7:0] swp_freq_calcuation_84_86_reg;
reg  swp_freq_calcuation_87_88;
reg  swp_freq_calcuation_87_88_reg;
reg  swp_freq_calcuation_87_89;
reg  swp_freq_calcuation_87_89_reg;
reg  swp_freq_calcuation_87_or_cond34;
reg  swp_freq_calcuation_87_or_cond34_reg;
reg [31:0] swp_freq_calcuation_90__sum;
reg [31:0] swp_freq_calcuation_90__sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_90_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_90_91_reg;
reg [31:0] swp_freq_calcuation_90_92;
reg [31:0] swp_freq_calcuation_90_92_reg;
reg  swp_freq_calcuation_90_93;
reg  swp_freq_calcuation_90_93_reg;
reg [31:0] swp_freq_calcuation_94__sum12;
reg [31:0] swp_freq_calcuation_94__sum12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_94_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_94_95_reg;
reg [31:0] swp_freq_calcuation_94_96;
reg [31:0] swp_freq_calcuation_94_96_reg;
reg  swp_freq_calcuation_94_97;
reg  swp_freq_calcuation_94_97_reg;
reg [31:0] swp_freq_calcuation_98__sum13;
reg [31:0] swp_freq_calcuation_98__sum13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_98_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_98_99_reg;
reg [31:0] swp_freq_calcuation_98_100;
reg [31:0] swp_freq_calcuation_98_100_reg;
reg  swp_freq_calcuation_98_101;
reg  swp_freq_calcuation_98_101_reg;
reg  swp_freq_calcuation_98_102;
reg  swp_freq_calcuation_98_102_reg;
reg  swp_freq_calcuation_98_or_cond35;
reg  swp_freq_calcuation_98_or_cond35_reg;
reg  swp_freq_calcuation_98_103;
reg  swp_freq_calcuation_98_103_reg;
reg  swp_freq_calcuation_98_or_cond36;
reg  swp_freq_calcuation_98_or_cond36_reg;
reg  swp_freq_calcuation_98_104;
reg  swp_freq_calcuation_98_104_reg;
reg  swp_freq_calcuation_98_or_cond37;
reg  swp_freq_calcuation_98_or_cond37_reg;
reg [31:0] swp_freq_calcuation_105_106;
reg [31:0] swp_freq_calcuation_105_106_reg;
reg [31:0] swp_freq_calcuation_105_107;
reg [31:0] swp_freq_calcuation_105_107_reg;
reg [31:0] swp_freq_calcuation_105_108;
reg [31:0] swp_freq_calcuation_105_108_reg;
reg [7:0] swp_freq_calcuation_105_109;
reg [7:0] swp_freq_calcuation_105_109_reg;
reg [31:0] swp_freq_calcuation_110_111;
reg [31:0] swp_freq_calcuation_110_111_reg;
reg  swp_freq_calcuation_110_112;
reg  swp_freq_calcuation_110_112_reg;
reg  swp_freq_calcuation_110_113;
reg  swp_freq_calcuation_110_113_reg;
reg  swp_freq_calcuation_110_or_cond57;
reg  swp_freq_calcuation_110_or_cond57_reg;
reg [31:0] swp_freq_calcuation_114__sum11;
reg [31:0] swp_freq_calcuation_114__sum11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_114_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_114_115_reg;
reg [31:0] swp_freq_calcuation_114_116;
reg [31:0] swp_freq_calcuation_114_116_reg;
reg  swp_freq_calcuation_114_117;
reg  swp_freq_calcuation_114_117_reg;
reg  swp_freq_calcuation_114_118;
reg  swp_freq_calcuation_114_118_reg;
reg  swp_freq_calcuation_114_or_cond38;
reg  swp_freq_calcuation_114_or_cond38_reg;
reg  swp_freq_calcuation_114_119;
reg  swp_freq_calcuation_114_119_reg;
reg  swp_freq_calcuation_114_or_cond39;
reg  swp_freq_calcuation_114_or_cond39_reg;
reg [31:0] swp_freq_calcuation_120_121;
reg [31:0] swp_freq_calcuation_120_121_reg;
reg [31:0] swp_freq_calcuation_120_122;
reg [31:0] swp_freq_calcuation_120_122_reg;
reg [31:0] swp_freq_calcuation_120_123;
reg [31:0] swp_freq_calcuation_120_123_reg;
reg [7:0] swp_freq_calcuation_120_124;
reg [7:0] swp_freq_calcuation_120_124_reg;
reg  swp_freq_calcuation_125__not;
reg  swp_freq_calcuation_125__not_reg;
reg  swp_freq_calcuation_125__not58;
reg  swp_freq_calcuation_125__not58_reg;
reg  swp_freq_calcuation_125_brmerge;
reg  swp_freq_calcuation_125_brmerge_reg;
reg [31:0] swp_freq_calcuation_126__sum9;
reg [31:0] swp_freq_calcuation_126__sum9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_126_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_126_127_reg;
reg [31:0] swp_freq_calcuation_126_128;
reg [31:0] swp_freq_calcuation_126_128_reg;
reg  swp_freq_calcuation_126_129;
reg  swp_freq_calcuation_126_129_reg;
reg [31:0] swp_freq_calcuation_130__sum10;
reg [31:0] swp_freq_calcuation_130__sum10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_130_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_130_131_reg;
reg [31:0] swp_freq_calcuation_130_132;
reg [31:0] swp_freq_calcuation_130_132_reg;
reg  swp_freq_calcuation_130_133;
reg  swp_freq_calcuation_130_133_reg;
reg  swp_freq_calcuation_130_134;
reg  swp_freq_calcuation_130_134_reg;
reg  swp_freq_calcuation_130_or_cond40;
reg  swp_freq_calcuation_130_or_cond40_reg;
reg  swp_freq_calcuation_130_135;
reg  swp_freq_calcuation_130_135_reg;
reg  swp_freq_calcuation_130_or_cond41;
reg  swp_freq_calcuation_130_or_cond41_reg;
reg  swp_freq_calcuation_130_136;
reg  swp_freq_calcuation_130_136_reg;
reg  swp_freq_calcuation_130_or_cond42;
reg  swp_freq_calcuation_130_or_cond42_reg;
reg [31:0] swp_freq_calcuation_137_138;
reg [31:0] swp_freq_calcuation_137_138_reg;
reg [31:0] swp_freq_calcuation_137_139;
reg [31:0] swp_freq_calcuation_137_139_reg;
reg [7:0] swp_freq_calcuation_137_140;
reg [7:0] swp_freq_calcuation_137_140_reg;
reg [31:0] swp_freq_calcuation_141__sum6;
reg [31:0] swp_freq_calcuation_141__sum6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_141_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_141_142_reg;
reg [31:0] swp_freq_calcuation_141_143;
reg [31:0] swp_freq_calcuation_141_143_reg;
reg  swp_freq_calcuation_141_144;
reg  swp_freq_calcuation_141_144_reg;
reg [31:0] swp_freq_calcuation_145__sum7;
reg [31:0] swp_freq_calcuation_145__sum7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_145_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_145_146_reg;
reg [31:0] swp_freq_calcuation_145_147;
reg [31:0] swp_freq_calcuation_145_147_reg;
reg  swp_freq_calcuation_145_148;
reg  swp_freq_calcuation_145_148_reg;
reg [31:0] swp_freq_calcuation_149__sum8;
reg [31:0] swp_freq_calcuation_149__sum8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_149_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_149_150_reg;
reg [31:0] swp_freq_calcuation_149_151;
reg [31:0] swp_freq_calcuation_149_151_reg;
reg  swp_freq_calcuation_149_152;
reg  swp_freq_calcuation_149_152_reg;
reg  swp_freq_calcuation_149_153;
reg  swp_freq_calcuation_149_153_reg;
reg  swp_freq_calcuation_149_or_cond43;
reg  swp_freq_calcuation_149_or_cond43_reg;
reg  swp_freq_calcuation_149_154;
reg  swp_freq_calcuation_149_154_reg;
reg  swp_freq_calcuation_149_or_cond44;
reg  swp_freq_calcuation_149_or_cond44_reg;
reg  swp_freq_calcuation_155_156;
reg  swp_freq_calcuation_155_156_reg;
reg  swp_freq_calcuation_155_157;
reg  swp_freq_calcuation_155_157_reg;
reg  swp_freq_calcuation_155_or_cond45;
reg  swp_freq_calcuation_155_or_cond45_reg;
reg  swp_freq_calcuation_158_159;
reg  swp_freq_calcuation_158_159_reg;
reg [31:0] swp_freq_calcuation_158_160;
reg [31:0] swp_freq_calcuation_158_160_reg;
reg [31:0] swp_freq_calcuation_158_161;
reg [31:0] swp_freq_calcuation_158_161_reg;
reg [31:0] swp_freq_calcuation_162_163;
reg [31:0] swp_freq_calcuation_162_163_reg;
reg [7:0] swp_freq_calcuation_162_164;
reg [7:0] swp_freq_calcuation_162_164_reg;
reg [31:0] swp_freq_calcuation_165_166;
reg [31:0] swp_freq_calcuation_165_166_reg;
reg [31:0] swp_freq_calcuation_165_167;
reg [31:0] swp_freq_calcuation_165_167_reg;
reg [7:0] swp_freq_calcuation_165_168;
reg [7:0] swp_freq_calcuation_165_168_reg;
reg [31:0] swp_freq_calcuation_169_170;
reg [31:0] swp_freq_calcuation_169_170_reg;
reg  swp_freq_calcuation_169_brmerge11;
reg  swp_freq_calcuation_169_brmerge11_reg;
reg [31:0] swp_freq_calcuation_172__sum5;
reg [31:0] swp_freq_calcuation_172__sum5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_172_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_172_173_reg;
reg [31:0] swp_freq_calcuation_172_174;
reg [31:0] swp_freq_calcuation_172_174_reg;
reg  swp_freq_calcuation_172_175;
reg  swp_freq_calcuation_172_175_reg;
reg  swp_freq_calcuation_172_176;
reg  swp_freq_calcuation_172_176_reg;
reg  swp_freq_calcuation_172_or_cond46;
reg  swp_freq_calcuation_172_or_cond46_reg;
reg  swp_freq_calcuation_172_177;
reg  swp_freq_calcuation_172_177_reg;
reg  swp_freq_calcuation_172_or_cond47;
reg  swp_freq_calcuation_172_or_cond47_reg;
reg  swp_freq_calcuation_172_178;
reg  swp_freq_calcuation_172_178_reg;
reg  swp_freq_calcuation_172_or_cond48;
reg  swp_freq_calcuation_172_or_cond48_reg;
reg  swp_freq_calcuation_172_179;
reg  swp_freq_calcuation_172_179_reg;
reg  swp_freq_calcuation_172_or_cond49;
reg  swp_freq_calcuation_172_or_cond49_reg;
reg  swp_freq_calcuation_180_181;
reg  swp_freq_calcuation_180_181_reg;
reg  swp_freq_calcuation_180_182;
reg  swp_freq_calcuation_180_182_reg;
reg  swp_freq_calcuation_180_or_cond50;
reg  swp_freq_calcuation_180_or_cond50_reg;
reg  swp_freq_calcuation_183_184;
reg  swp_freq_calcuation_183_184_reg;
reg [31:0] swp_freq_calcuation_183_185;
reg [31:0] swp_freq_calcuation_183_185_reg;
reg [31:0] swp_freq_calcuation_183_186;
reg [31:0] swp_freq_calcuation_183_186_reg;
reg [7:0] swp_freq_calcuation_187_188;
reg [7:0] swp_freq_calcuation_187_188_reg;
reg [31:0] swp_freq_calcuation_189_190;
reg [31:0] swp_freq_calcuation_189_190_reg;
reg [7:0] swp_freq_calcuation_189_191;
reg [7:0] swp_freq_calcuation_189_191_reg;
reg [31:0] swp_freq_calcuation__thread55_192;
reg [31:0] swp_freq_calcuation__thread55_192_reg;
reg  swp_freq_calcuation__thread55__not59;
reg  swp_freq_calcuation__thread55__not59_reg;
reg  swp_freq_calcuation__thread55__not60;
reg  swp_freq_calcuation__thread55__not60_reg;
reg  swp_freq_calcuation__thread55_brmerge61;
reg  swp_freq_calcuation__thread55_brmerge61_reg;
reg  swp_freq_calcuation__thread55__not8;
reg  swp_freq_calcuation__thread55__not8_reg;
reg  swp_freq_calcuation__thread55_brmerge9;
reg  swp_freq_calcuation__thread55_brmerge9_reg;
reg  swp_freq_calcuation_193_194;
reg  swp_freq_calcuation_193_194_reg;
reg  swp_freq_calcuation_193_or_cond51;
reg  swp_freq_calcuation_193_or_cond51_reg;
reg  swp_freq_calcuation_193_195;
reg  swp_freq_calcuation_193_195_reg;
reg  swp_freq_calcuation_193_or_cond52;
reg  swp_freq_calcuation_193_or_cond52_reg;
reg  swp_freq_calcuation_196_197;
reg  swp_freq_calcuation_196_197_reg;
reg  swp_freq_calcuation_196_198;
reg  swp_freq_calcuation_196_198_reg;
reg  swp_freq_calcuation_196_or_cond53;
reg  swp_freq_calcuation_196_or_cond53_reg;
reg  swp_freq_calcuation_199_200;
reg  swp_freq_calcuation_199_200_reg;
reg [31:0] swp_freq_calcuation_199_201;
reg [31:0] swp_freq_calcuation_199_201_reg;
reg [31:0] swp_freq_calcuation_199_202;
reg [31:0] swp_freq_calcuation_199_202_reg;
reg [31:0] swp_freq_calcuation_203_204;
reg [31:0] swp_freq_calcuation_203_204_reg;
reg [7:0] swp_freq_calcuation_203_205;
reg [7:0] swp_freq_calcuation_203_205_reg;
reg [31:0] swp_freq_calcuation_206_207;
reg [31:0] swp_freq_calcuation_206_207_reg;
reg [31:0] swp_freq_calcuation_206_208;
reg [31:0] swp_freq_calcuation_206_208_reg;
reg [7:0] swp_freq_calcuation_206_209;
reg [7:0] swp_freq_calcuation_206_209_reg;
reg [31:0] swp_freq_calcuation__thread55_thread_210;
reg [31:0] swp_freq_calcuation__thread55_thread_210_reg;
reg  swp_freq_calcuation__thread55_thread_211;
reg  swp_freq_calcuation__thread55_thread_211_reg;
reg  swp_freq_calcuation__thread55_thread_212;
reg  swp_freq_calcuation__thread55_thread_212_reg;
reg  swp_freq_calcuation__thread55_thread_or_cond62;
reg  swp_freq_calcuation__thread55_thread_or_cond62_reg;
reg [31:0] swp_freq_calcuation_213_214;
reg [31:0] swp_freq_calcuation_213_214_reg;
reg [7:0] swp_freq_calcuation_213_215;
reg [7:0] swp_freq_calcuation_213_215_reg;
reg [31:0] swp_freq_calcuation__thread1_swp_freq_0;
reg [31:0] swp_freq_calcuation__thread1_swp_freq_0_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] swp_freq_calcuation_signed_modulus_32_0_op0;
reg [31:0] swp_freq_calcuation_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_swp_freq_calcuation_0_1_temp_out;
wire [31:0] swp_freq_calcuation_0_1_unused;
reg  lpm_divide_swp_freq_calcuation_0_1_en;
reg [31:0] lpm_divide_swp_freq_calcuation_0_1_out;
reg [31:0] swp_freq_calcuation_signed_modulus_32_0;
reg  lpm_mult_swp_freq_calcuation_16_17_en;
reg [31:0] swp_freq_calcuation_16_17_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_30_31_en;
reg [31:0] swp_freq_calcuation_30_31_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_52_54_en;
reg [31:0] swp_freq_calcuation_52_54_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_78_80_en;
reg [31:0] swp_freq_calcuation_78_80_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_105_106_en;
reg [31:0] swp_freq_calcuation_105_106_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_120_121_en;
reg [31:0] swp_freq_calcuation_120_121_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_137_138_en;
reg [31:0] swp_freq_calcuation_137_138_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_158_160_en;
reg [31:0] swp_freq_calcuation_158_160_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_183_185_en;
reg [31:0] swp_freq_calcuation_183_185_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_199_201_en;
reg [31:0] swp_freq_calcuation_199_201_stage0_reg;
reg  lpm_mult_swp_freq_calcuation_213_214_en;
reg [31:0] swp_freq_calcuation_213_214_stage0_reg;

/*   %1 = srem i32 %i, 2*/
lpm_divide lpm_divide_swp_freq_calcuation_0_1 (
	.quotient (swp_freq_calcuation_0_1_unused),
	.remain (lpm_divide_swp_freq_calcuation_0_1_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_swp_freq_calcuation_0_1_en),
	.numer (swp_freq_calcuation_signed_modulus_32_0_op0),
	.denom (swp_freq_calcuation_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_swp_freq_calcuation_0_1.lpm_pipeline = 32,
	lpm_divide_swp_freq_calcuation_0_1.lpm_widthn = 32,
	lpm_divide_swp_freq_calcuation_0_1.lpm_widthd = 32,
	lpm_divide_swp_freq_calcuation_0_1.lpm_drepresentation = "SIGNED",
	lpm_divide_swp_freq_calcuation_0_1.lpm_nrepresentation = "SIGNED",
	lpm_divide_swp_freq_calcuation_0_1.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_0_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_87_88;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_0_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_34;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_34;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_35;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_35;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_36;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_36;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_37;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_4_37;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_4_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_4_or_cond8 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_38;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_4_or_cond8 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_38;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_39;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_39;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_40;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_40;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_41;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_10_41;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_10_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_10_or_cond25 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_16_42;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_16_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_10_or_cond25 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_16_42;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_16_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_16_43;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_16_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_16_43;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_16_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation___crit_edge7_21 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_22_45;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_22_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation___crit_edge7_21 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge_52;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_22_45;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_22_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_22_23 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_46;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_22_23 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_46;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_47;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_47;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_48;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_48;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_49;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_24_49;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_24_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_24_or_cond27 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_30_50;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_30_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_24_or_cond27 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge_52;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_30_50;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_30_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_30_51;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_30_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_30_51;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_30_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB___crit_edge_52;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation___crit_edge_34 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_53;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge_52) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation___crit_edge_34 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_53;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_54;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_54;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_55;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_55;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_56;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_35_56;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_35_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_56) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_35_38 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_57;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_56) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_35_38 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_57;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_58;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_58;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_59;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_59;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_60;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_39_60;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_39_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_60) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_39_42 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_61;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_60) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_39_42 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_61;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_62;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_62;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_63;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_63;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_64;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_43_64;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_43_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_43_or_cond29 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_49_65;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_49_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_43_or_cond29 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_49_65;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_49_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_49_or_cond30 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_52_66;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_52_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_49_or_cond30 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_52_66;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_52_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_52_67;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_52_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_52_67;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_52_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_52_53_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_59_70;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_59_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_52_53_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_56_68;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_56_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_56_68;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_56_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_56_69;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_56_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_56_69;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_56_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_59_70;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_59_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_59_71;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_59_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_59_71;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_59_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_63_72;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_63_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_63_or_cond56 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_73;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_63_or_cond56 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_73;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_74;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_74;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_75;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_75;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_76;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_65_76;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_65_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_65_68 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_77;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_65_68 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_77;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_78;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_78;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_79;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_79;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_80;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_69_80;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_69_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_69_or_cond32 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_75_81;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_69_or_cond32 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_75_81;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_75_or_cond33 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_78_82;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_78_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_75_or_cond33 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_78_82;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_78_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_78_83;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_78_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_78_83;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_78_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_78_79_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_84_86;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_78_79_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_82_84;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_82_84;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_82_85;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_82_85;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_84_86;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_84_87;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_84_87;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_87_88;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_87_or_cond34 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_87_or_cond34 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_89;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_89;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_90;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_90;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_91;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_91;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_92;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_90_92;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_92) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_90_93 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_93;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_92) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_90_93 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_110_103;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_110_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_93;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_94;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_94;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_95;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_95;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_96;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_94_96;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_96) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_94_97 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_97;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_96) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_94_97 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_110_103;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_110_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_97;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_98;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_98;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_99;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_99;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_100;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_98_100;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_98_or_cond37 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_105_101;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_105_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_98_or_cond37 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_110_103;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_110_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_105_101;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_105_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_105_102;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_105_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_105_102;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_105_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_110_103;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_110_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_110_or_cond57 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_104;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_110_or_cond57 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_125_110;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_125_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_104;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_105;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_105;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_106;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_106;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_107;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_114_107;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_114_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_114_or_cond39 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_120_108;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_120_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_114_or_cond39 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_125_110;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_125_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_120_108;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_120_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_120_109;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_120_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_120_109;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_120_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_125_110;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_125_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_125_brmerge == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_125_brmerge == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_111;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_111;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_112;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_112;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_113;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_113;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_114;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_126_114;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_126_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_114) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_126_129 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_115;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_114) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_126_129 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_115;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_116;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_116;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_117;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_117;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_118;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_130_118;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_130_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_130_or_cond42 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_137_119;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_137_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_130_or_cond42 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_137_119;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_137_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_137_120;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_137_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_137_120;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_137_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_110_113_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_122;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_thread_pre_split_121) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_110_113_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_122;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_123;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_123;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_124;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_124;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_125;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_141_125;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_141_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_125) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_141_144 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_126;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_125) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_141_144 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_126;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_127;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_127;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_128;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_128;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_129;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_145_129;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_145_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_129) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_145_148 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_130;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_129) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_145_148 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_169_141;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_169_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_130;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_131;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_131;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_132;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_132;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_133;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_149_133;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_149_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_149_or_cond44 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_155_134;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_155_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_149_or_cond44 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_169_141;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_169_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_155_134;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_155_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_155_or_cond45 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_158_135;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_158_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_155_or_cond45 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_169_141;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_169_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_158_135;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_158_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_158_136;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_158_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_158_136;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_158_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_158_159_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_165_139;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_165_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_158_159_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_162_138;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_162_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_162_138;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_162_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_165_139;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_165_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_165_140;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_165_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_165_140;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_165_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_169_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_169_141;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_169_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_169_141) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_169_brmerge11 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_169_141) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_169_brmerge11 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_171_142;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_171_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_171_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_171_142;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_171_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_171_142) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_145_148_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_143;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_171_142) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_145_148_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_154;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_143;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_144;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_144;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_145;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_145;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_146;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_172_146;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_172_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_172_or_cond49 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_180_147;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_180_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_172_or_cond49 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_154;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_180_147;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_180_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_180_or_cond50 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_183_148;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_183_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_180_or_cond50 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_154;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_183_148;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_183_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_183_149;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_183_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_183_149;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_183_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_183_184_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_189_152;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_189_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_183_184_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_187_150;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_187_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_187_150;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_187_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_187_151;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_187_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_187_151;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_187_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_189_152;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_189_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_189_153;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_189_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_189_153;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_189_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_154;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_brmerge9 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_brmerge9 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_193_155;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_193_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_193_155;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_193_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_193_or_cond52 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_196_156;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_196_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_193_or_cond52 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_196_156;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_196_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_196_or_cond53 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_199_157;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_199_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_196_or_cond53 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_199_157;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_199_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_199_158;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_199_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_199_158;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_199_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_199_200_reg == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_206_161;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_206_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_199_200_reg == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_203_159;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_203_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_203_159;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_203_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_203_160;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_203_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_203_160;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_203_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_206_161;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_206_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_206_162;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_206_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_206_162;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_206_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_thread_or_cond62 == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_213_164;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_213_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_thread_or_cond62 == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_213_164;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_213_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_213_165;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_213_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB_213_165;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB_213_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread1_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_swp_freq_calcuation_BB__thread1_166;
if (reset == 1'b0 && ^(LEGUP_F_swp_freq_calcuation_BB__thread1_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread1_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_0_1 = swp_freq_calcuation_signed_modulus_32_0;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %0*/
/*   %1 = srem i32 %i, 2*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33))
begin
swp_freq_calcuation_0_1_reg <= swp_freq_calcuation_0_1;
if (reset == 1'b0 && ^(swp_freq_calcuation_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_0_1_reg"); $finish; end
end
/* swp_freq_calcuation: %0*/
/*   %1 = srem i32 %i, 2*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33))
begin
swp_freq_calcuation_0_1_reg <= swp_freq_calcuation_0_1;
if (reset == 1'b0 && ^(swp_freq_calcuation_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_0_1_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %0*/
/*   %2 = icmp ne i32 %1, 1*/
begin
swp_freq_calcuation_0_2 = (swp_freq_calcuation_0_1 != 32'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %0*/
/*   %2 = icmp ne i32 %1, 1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33))
begin
swp_freq_calcuation_0_2_reg <= swp_freq_calcuation_0_2;
if (reset == 1'b0 && ^(swp_freq_calcuation_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_0_2_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %0*/
/*   %3 = icmp sgt i32 %v, %vmax*/
begin
swp_freq_calcuation_0_3 = ($signed(arg_v) > $signed(arg_vmax));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %0*/
/*   %3 = icmp sgt i32 %v, %vmax*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_1))
begin
swp_freq_calcuation_0_3_reg <= swp_freq_calcuation_0_3;
if (reset == 1'b0 && ^(swp_freq_calcuation_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_0_3_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %0*/
/*   %or.cond = or i1 %2, %3*/
begin
swp_freq_calcuation_0_or_cond = (swp_freq_calcuation_0_2 | swp_freq_calcuation_0_3_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %0*/
/*   %or.cond = or i1 %2, %3*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_0_33))
begin
swp_freq_calcuation_0_or_cond_reg <= swp_freq_calcuation_0_or_cond;
if (reset == 1'b0 && ^(swp_freq_calcuation_0_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_0_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %5 = add nsw i32 %v, -1*/
begin
swp_freq_calcuation_4_5 = (arg_v + -32'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %5 = add nsw i32 %v, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_34))
begin
swp_freq_calcuation_4_5_reg <= swp_freq_calcuation_4_5;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_5_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %6 = icmp eq i32 %5, %vmin*/
begin
swp_freq_calcuation_4_6 = (swp_freq_calcuation_4_5 == arg_vmin);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %6 = icmp eq i32 %5, %vmin*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_34))
begin
swp_freq_calcuation_4_6_reg <= swp_freq_calcuation_4_6;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_6_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %.sum22 = add i32 %v, 30*/
begin
swp_freq_calcuation_4__sum22 = (arg_v + 32'd30);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %.sum22 = add i32 %v, 30*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_34))
begin
swp_freq_calcuation_4__sum22_reg <= swp_freq_calcuation_4__sum22;
if (reset == 1'b0 && ^(swp_freq_calcuation_4__sum22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4__sum22_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %7 = getelementptr inbounds i32* %V, i32 %.sum22*/
begin
swp_freq_calcuation_4_7 = (arg_V + (4 * swp_freq_calcuation_4__sum22_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %7 = getelementptr inbounds i32* %V, i32 %.sum22*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35))
begin
swp_freq_calcuation_4_7_reg <= swp_freq_calcuation_4_7;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_7_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
begin
swp_freq_calcuation_4_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37))
begin
swp_freq_calcuation_4_8_reg <= swp_freq_calcuation_4_8;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_8_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %9 = icmp sgt i32 %8, -1*/
begin
swp_freq_calcuation_4_9 = ($signed(swp_freq_calcuation_4_8) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %9 = icmp sgt i32 %8, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37))
begin
swp_freq_calcuation_4_9_reg <= swp_freq_calcuation_4_9;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_9_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %4*/
/*   %or.cond8 = and i1 %6, %9*/
begin
swp_freq_calcuation_4_or_cond8 = (swp_freq_calcuation_4_6_reg & swp_freq_calcuation_4_9);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %4*/
/*   %or.cond8 = and i1 %6, %9*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_37))
begin
swp_freq_calcuation_4_or_cond8_reg <= swp_freq_calcuation_4_or_cond8;
if (reset == 1'b0 && ^(swp_freq_calcuation_4_or_cond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_4_or_cond8_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %.sum23 = add i32 %v, 29*/
begin
swp_freq_calcuation_10__sum23 = (arg_v + 32'd29);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %.sum23 = add i32 %v, 29*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_38))
begin
swp_freq_calcuation_10__sum23_reg <= swp_freq_calcuation_10__sum23;
if (reset == 1'b0 && ^(swp_freq_calcuation_10__sum23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10__sum23_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %11 = getelementptr inbounds i32* %V, i32 %.sum23*/
begin
swp_freq_calcuation_10_11 = (arg_V + (4 * swp_freq_calcuation_10__sum23_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %11 = getelementptr inbounds i32* %V, i32 %.sum23*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39))
begin
swp_freq_calcuation_10_11_reg <= swp_freq_calcuation_10_11;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_11_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
begin
swp_freq_calcuation_10_12 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_12_reg <= swp_freq_calcuation_10_12;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_12_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %13 = icmp sgt i32 %12, -1*/
begin
swp_freq_calcuation_10_13 = ($signed(swp_freq_calcuation_10_12) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %13 = icmp sgt i32 %12, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_13_reg <= swp_freq_calcuation_10_13;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_13_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %14 = icmp sgt i32 %12, %8*/
begin
swp_freq_calcuation_10_14 = ($signed(swp_freq_calcuation_10_12) > $signed(swp_freq_calcuation_4_8_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %14 = icmp sgt i32 %12, %8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_14_reg <= swp_freq_calcuation_10_14;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_14_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %or.cond24 = and i1 %13, %14*/
begin
swp_freq_calcuation_10_or_cond24 = (swp_freq_calcuation_10_13 & swp_freq_calcuation_10_14);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %or.cond24 = and i1 %13, %14*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_or_cond24_reg <= swp_freq_calcuation_10_or_cond24;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_or_cond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_or_cond24_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %15 = icmp sgt i32 %12, %SIGMIN*/
begin
swp_freq_calcuation_10_15 = ($signed(swp_freq_calcuation_10_12) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %15 = icmp sgt i32 %12, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_15_reg <= swp_freq_calcuation_10_15;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_15_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %10*/
/*   %or.cond25 = and i1 %or.cond24, %15*/
begin
swp_freq_calcuation_10_or_cond25 = (swp_freq_calcuation_10_or_cond24 & swp_freq_calcuation_10_15);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %10*/
/*   %or.cond25 = and i1 %or.cond24, %15*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_41))
begin
swp_freq_calcuation_10_or_cond25_reg <= swp_freq_calcuation_10_or_cond25;
if (reset == 1'b0 && ^(swp_freq_calcuation_10_or_cond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_10_or_cond25_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_16_17 = swp_freq_calcuation_16_17_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %16*/
/*   %17 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43))
begin
swp_freq_calcuation_16_17_reg <= swp_freq_calcuation_16_17;
if (reset == 1'b0 && ^(swp_freq_calcuation_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_16_17_reg"); $finish; end
end
/* swp_freq_calcuation: %16*/
/*   %17 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43))
begin
swp_freq_calcuation_16_17_reg <= swp_freq_calcuation_16_17;
if (reset == 1'b0 && ^(swp_freq_calcuation_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_16_17_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %16*/
/*   %18 = add i32 %17, %afcex_freq*/
begin
swp_freq_calcuation_16_18 = (swp_freq_calcuation_16_17 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %16*/
/*   %18 = add i32 %17, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43))
begin
swp_freq_calcuation_16_18_reg <= swp_freq_calcuation_16_18;
if (reset == 1'b0 && ^(swp_freq_calcuation_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_16_18_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %16*/
/*   %19 = sub i32 %18, %swp_ofs*/
begin
swp_freq_calcuation_16_19 = (swp_freq_calcuation_16_18 - arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %16*/
/*   %19 = sub i32 %18, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43))
begin
swp_freq_calcuation_16_19_reg <= swp_freq_calcuation_16_19;
if (reset == 1'b0 && ^(swp_freq_calcuation_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_16_19_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %16*/
/*   %20 = trunc i32 %12 to i8*/
begin
swp_freq_calcuation_16_20 = swp_freq_calcuation_10_12_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %16*/
/*   %20 = trunc i32 %12 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
swp_freq_calcuation_16_20_reg <= swp_freq_calcuation_16_20;
if (reset == 1'b0 && ^(swp_freq_calcuation_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_16_20_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %._crit_edge7*/
/*   %21 = icmp eq i32 %v, %vmax*/
begin
swp_freq_calcuation___crit_edge7_21 = (arg_v == arg_vmax);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %._crit_edge7*/
/*   %21 = icmp eq i32 %v, %vmax*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge7_44))
begin
swp_freq_calcuation___crit_edge7_21_reg <= swp_freq_calcuation___crit_edge7_21;
if (reset == 1'b0 && ^(swp_freq_calcuation___crit_edge7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation___crit_edge7_21_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %22*/
/*   %23 = icmp sgt i32 %8, -1*/
begin
swp_freq_calcuation_22_23 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %22*/
/*   %23 = icmp sgt i32 %8, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45))
begin
swp_freq_calcuation_22_23_reg <= swp_freq_calcuation_22_23;
if (reset == 1'b0 && ^(swp_freq_calcuation_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_22_23_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %.sum21 = add i32 %v, 29*/
begin
swp_freq_calcuation_24__sum21 = (arg_v + 32'd29);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %.sum21 = add i32 %v, 29*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_46))
begin
swp_freq_calcuation_24__sum21_reg <= swp_freq_calcuation_24__sum21;
if (reset == 1'b0 && ^(swp_freq_calcuation_24__sum21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24__sum21_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %25 = getelementptr inbounds i32* %V, i32 %.sum21*/
begin
swp_freq_calcuation_24_25 = (arg_V + (4 * swp_freq_calcuation_24__sum21_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %25 = getelementptr inbounds i32* %V, i32 %.sum21*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47))
begin
swp_freq_calcuation_24_25_reg <= swp_freq_calcuation_24_25;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_25_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
begin
swp_freq_calcuation_24_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49))
begin
swp_freq_calcuation_24_26_reg <= swp_freq_calcuation_24_26;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_26_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %27 = icmp sgt i32 %26, -1*/
begin
swp_freq_calcuation_24_27 = ($signed(swp_freq_calcuation_24_26) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %27 = icmp sgt i32 %26, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49))
begin
swp_freq_calcuation_24_27_reg <= swp_freq_calcuation_24_27;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_27_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %28 = icmp sgt i32 %8, %26*/
begin
swp_freq_calcuation_24_28 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(swp_freq_calcuation_24_26));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %28 = icmp sgt i32 %8, %26*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49))
begin
swp_freq_calcuation_24_28_reg <= swp_freq_calcuation_24_28;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_28_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %or.cond26 = and i1 %27, %28*/
begin
swp_freq_calcuation_24_or_cond26 = (swp_freq_calcuation_24_27 & swp_freq_calcuation_24_28);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %or.cond26 = and i1 %27, %28*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49))
begin
swp_freq_calcuation_24_or_cond26_reg <= swp_freq_calcuation_24_or_cond26;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_or_cond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_or_cond26_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %29 = icmp sgt i32 %8, %SIGMIN*/
begin
swp_freq_calcuation_24_29 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %29 = icmp sgt i32 %8, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_46))
begin
swp_freq_calcuation_24_29_reg <= swp_freq_calcuation_24_29;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_29_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %24*/
/*   %or.cond27 = and i1 %or.cond26, %29*/
begin
swp_freq_calcuation_24_or_cond27 = (swp_freq_calcuation_24_or_cond26 & swp_freq_calcuation_24_29_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %24*/
/*   %or.cond27 = and i1 %or.cond26, %29*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_49))
begin
swp_freq_calcuation_24_or_cond27_reg <= swp_freq_calcuation_24_or_cond27;
if (reset == 1'b0 && ^(swp_freq_calcuation_24_or_cond27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_24_or_cond27_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_30_31 = swp_freq_calcuation_30_31_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %30*/
/*   %31 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51))
begin
swp_freq_calcuation_30_31_reg <= swp_freq_calcuation_30_31;
if (reset == 1'b0 && ^(swp_freq_calcuation_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_30_31_reg"); $finish; end
end
/* swp_freq_calcuation: %30*/
/*   %31 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51))
begin
swp_freq_calcuation_30_31_reg <= swp_freq_calcuation_30_31;
if (reset == 1'b0 && ^(swp_freq_calcuation_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_30_31_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %30*/
/*   %32 = add nsw i32 %31, %afcex_freq*/
begin
swp_freq_calcuation_30_32 = (swp_freq_calcuation_30_31 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %30*/
/*   %32 = add nsw i32 %31, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51))
begin
swp_freq_calcuation_30_32_reg <= swp_freq_calcuation_30_32;
if (reset == 1'b0 && ^(swp_freq_calcuation_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_30_32_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %30*/
/*   %33 = trunc i32 %8 to i8*/
begin
swp_freq_calcuation_30_33 = swp_freq_calcuation_4_8_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %30*/
/*   %33 = trunc i32 %8 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
swp_freq_calcuation_30_33_reg <= swp_freq_calcuation_30_33;
if (reset == 1'b0 && ^(swp_freq_calcuation_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_30_33_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %._crit_edge*/
/*   %34 = icmp sgt i32 %8, 0*/
begin
swp_freq_calcuation___crit_edge_34 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %._crit_edge*/
/*   %34 = icmp sgt i32 %8, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB___crit_edge_52))
begin
swp_freq_calcuation___crit_edge_34_reg <= swp_freq_calcuation___crit_edge_34;
if (reset == 1'b0 && ^(swp_freq_calcuation___crit_edge_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation___crit_edge_34_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %35*/
/*   %.sum17 = add i32 %v, 29*/
begin
swp_freq_calcuation_35__sum17 = (arg_v + 32'd29);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %35*/
/*   %.sum17 = add i32 %v, 29*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_53))
begin
swp_freq_calcuation_35__sum17_reg <= swp_freq_calcuation_35__sum17;
if (reset == 1'b0 && ^(swp_freq_calcuation_35__sum17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_35__sum17_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %35*/
/*   %36 = getelementptr inbounds i32* %V, i32 %.sum17*/
begin
swp_freq_calcuation_35_36 = (arg_V + (4 * swp_freq_calcuation_35__sum17_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %35*/
/*   %36 = getelementptr inbounds i32* %V, i32 %.sum17*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54))
begin
swp_freq_calcuation_35_36_reg <= swp_freq_calcuation_35_36;
if (reset == 1'b0 && ^(swp_freq_calcuation_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_35_36_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
begin
swp_freq_calcuation_35_37 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_56))
begin
swp_freq_calcuation_35_37_reg <= swp_freq_calcuation_35_37;
if (reset == 1'b0 && ^(swp_freq_calcuation_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_35_37_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %35*/
/*   %38 = icmp sgt i32 %37, 0*/
begin
swp_freq_calcuation_35_38 = ($signed(swp_freq_calcuation_35_37) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %35*/
/*   %38 = icmp sgt i32 %37, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_56))
begin
swp_freq_calcuation_35_38_reg <= swp_freq_calcuation_35_38;
if (reset == 1'b0 && ^(swp_freq_calcuation_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_35_38_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %39*/
/*   %.sum18 = add i32 %v, 28*/
begin
swp_freq_calcuation_39__sum18 = (arg_v + 32'd28);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %39*/
/*   %.sum18 = add i32 %v, 28*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_57))
begin
swp_freq_calcuation_39__sum18_reg <= swp_freq_calcuation_39__sum18;
if (reset == 1'b0 && ^(swp_freq_calcuation_39__sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_39__sum18_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %39*/
/*   %40 = getelementptr inbounds i32* %V, i32 %.sum18*/
begin
swp_freq_calcuation_39_40 = (arg_V + (4 * swp_freq_calcuation_39__sum18_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %39*/
/*   %40 = getelementptr inbounds i32* %V, i32 %.sum18*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58))
begin
swp_freq_calcuation_39_40_reg <= swp_freq_calcuation_39_40;
if (reset == 1'b0 && ^(swp_freq_calcuation_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_39_40_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
begin
swp_freq_calcuation_39_41 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_60))
begin
swp_freq_calcuation_39_41_reg <= swp_freq_calcuation_39_41;
if (reset == 1'b0 && ^(swp_freq_calcuation_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_39_41_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %39*/
/*   %42 = icmp sgt i32 %41, 0*/
begin
swp_freq_calcuation_39_42 = ($signed(swp_freq_calcuation_39_41) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %39*/
/*   %42 = icmp sgt i32 %41, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_60))
begin
swp_freq_calcuation_39_42_reg <= swp_freq_calcuation_39_42;
if (reset == 1'b0 && ^(swp_freq_calcuation_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_39_42_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %.sum19 = add i32 %v, 27*/
begin
swp_freq_calcuation_43__sum19 = (arg_v + 32'd27);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %.sum19 = add i32 %v, 27*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_61))
begin
swp_freq_calcuation_43__sum19_reg <= swp_freq_calcuation_43__sum19;
if (reset == 1'b0 && ^(swp_freq_calcuation_43__sum19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43__sum19_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %44 = getelementptr inbounds i32* %V, i32 %.sum19*/
begin
swp_freq_calcuation_43_44 = (arg_V + (4 * swp_freq_calcuation_43__sum19_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %44 = getelementptr inbounds i32* %V, i32 %.sum19*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62))
begin
swp_freq_calcuation_43_44_reg <= swp_freq_calcuation_43_44;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_44_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
begin
swp_freq_calcuation_43_45 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64))
begin
swp_freq_calcuation_43_45_reg <= swp_freq_calcuation_43_45;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_45_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %46 = icmp sgt i32 %45, 0*/
begin
swp_freq_calcuation_43_46 = ($signed(swp_freq_calcuation_43_45) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %46 = icmp sgt i32 %45, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64))
begin
swp_freq_calcuation_43_46_reg <= swp_freq_calcuation_43_46;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_46_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %47 = icmp sgt i32 %37, %8*/
begin
swp_freq_calcuation_43_47 = ($signed(swp_freq_calcuation_35_37_reg) > $signed(swp_freq_calcuation_4_8_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %47 = icmp sgt i32 %37, %8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_61))
begin
swp_freq_calcuation_43_47_reg <= swp_freq_calcuation_43_47;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_47_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %or.cond28 = and i1 %46, %47*/
begin
swp_freq_calcuation_43_or_cond28 = (swp_freq_calcuation_43_46 & swp_freq_calcuation_43_47_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %or.cond28 = and i1 %46, %47*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64))
begin
swp_freq_calcuation_43_or_cond28_reg <= swp_freq_calcuation_43_or_cond28;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_or_cond28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_or_cond28_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %48 = icmp sgt i32 %41, %45*/
begin
swp_freq_calcuation_43_48 = ($signed(swp_freq_calcuation_39_41_reg) > $signed(swp_freq_calcuation_43_45));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %48 = icmp sgt i32 %41, %45*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64))
begin
swp_freq_calcuation_43_48_reg <= swp_freq_calcuation_43_48;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_48_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %43*/
/*   %or.cond29 = and i1 %or.cond28, %48*/
begin
swp_freq_calcuation_43_or_cond29 = (swp_freq_calcuation_43_or_cond28 & swp_freq_calcuation_43_48);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %43*/
/*   %or.cond29 = and i1 %or.cond28, %48*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_64))
begin
swp_freq_calcuation_43_or_cond29_reg <= swp_freq_calcuation_43_or_cond29;
if (reset == 1'b0 && ^(swp_freq_calcuation_43_or_cond29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_43_or_cond29_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %49*/
/*   %50 = icmp sgt i32 %37, %SIGMIN*/
begin
swp_freq_calcuation_49_50 = ($signed(swp_freq_calcuation_35_37_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %49*/
/*   %50 = icmp sgt i32 %37, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65))
begin
swp_freq_calcuation_49_50_reg <= swp_freq_calcuation_49_50;
if (reset == 1'b0 && ^(swp_freq_calcuation_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_49_50_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %49*/
/*   %51 = icmp sgt i32 %41, %SIGMIN*/
begin
swp_freq_calcuation_49_51 = ($signed(swp_freq_calcuation_39_41_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %49*/
/*   %51 = icmp sgt i32 %41, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65))
begin
swp_freq_calcuation_49_51_reg <= swp_freq_calcuation_49_51;
if (reset == 1'b0 && ^(swp_freq_calcuation_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_49_51_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %49*/
/*   %or.cond30 = or i1 %50, %51*/
begin
swp_freq_calcuation_49_or_cond30 = (swp_freq_calcuation_49_50 | swp_freq_calcuation_49_51);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %49*/
/*   %or.cond30 = or i1 %50, %51*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_49_65))
begin
swp_freq_calcuation_49_or_cond30_reg <= swp_freq_calcuation_49_or_cond30;
if (reset == 1'b0 && ^(swp_freq_calcuation_49_or_cond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_49_or_cond30_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %52*/
/*   %53 = icmp slt i32 %37, %41*/
begin
swp_freq_calcuation_52_53 = ($signed(swp_freq_calcuation_35_37_reg) < $signed(swp_freq_calcuation_39_41_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %52*/
/*   %53 = icmp slt i32 %37, %41*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_66))
begin
swp_freq_calcuation_52_53_reg <= swp_freq_calcuation_52_53;
if (reset == 1'b0 && ^(swp_freq_calcuation_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_52_53_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_52_54 = swp_freq_calcuation_52_54_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %52*/
/*   %54 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67))
begin
swp_freq_calcuation_52_54_reg <= swp_freq_calcuation_52_54;
if (reset == 1'b0 && ^(swp_freq_calcuation_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_52_54_reg"); $finish; end
end
/* swp_freq_calcuation: %52*/
/*   %54 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67))
begin
swp_freq_calcuation_52_54_reg <= swp_freq_calcuation_52_54;
if (reset == 1'b0 && ^(swp_freq_calcuation_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_52_54_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %52*/
/*   %55 = add nsw i32 %54, %afcex_freq*/
begin
swp_freq_calcuation_52_55 = (swp_freq_calcuation_52_54 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %52*/
/*   %55 = add nsw i32 %54, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_52_67))
begin
swp_freq_calcuation_52_55_reg <= swp_freq_calcuation_52_55;
if (reset == 1'b0 && ^(swp_freq_calcuation_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_52_55_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %56*/
/*   %57 = sub nsw i32 %55, %swp_ofs*/
begin
swp_freq_calcuation_56_57 = (swp_freq_calcuation_52_55_reg - arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %56*/
/*   %57 = sub nsw i32 %55, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
swp_freq_calcuation_56_57_reg <= swp_freq_calcuation_56_57;
if (reset == 1'b0 && ^(swp_freq_calcuation_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_56_57_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %56*/
/*   %58 = trunc i32 %37 to i8*/
begin
swp_freq_calcuation_56_58 = swp_freq_calcuation_35_37_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %56*/
/*   %58 = trunc i32 %37 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
swp_freq_calcuation_56_58_reg <= swp_freq_calcuation_56_58;
if (reset == 1'b0 && ^(swp_freq_calcuation_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_56_58_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %59*/
/*   %60 = shl nsw i32 %swp_ofs, 1*/
begin
swp_freq_calcuation_59_60 = (arg_swp_ofs <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %59*/
/*   %60 = shl nsw i32 %swp_ofs, 1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
swp_freq_calcuation_59_60_reg <= swp_freq_calcuation_59_60;
if (reset == 1'b0 && ^(swp_freq_calcuation_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_59_60_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %59*/
/*   %61 = sub nsw i32 %55, %60*/
begin
swp_freq_calcuation_59_61 = (swp_freq_calcuation_52_55_reg - swp_freq_calcuation_59_60);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %59*/
/*   %61 = sub nsw i32 %55, %60*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
swp_freq_calcuation_59_61_reg <= swp_freq_calcuation_59_61;
if (reset == 1'b0 && ^(swp_freq_calcuation_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_59_61_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %59*/
/*   %62 = trunc i32 %41 to i8*/
begin
swp_freq_calcuation_59_62 = swp_freq_calcuation_39_41_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %59*/
/*   %62 = trunc i32 %41 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
swp_freq_calcuation_59_62_reg <= swp_freq_calcuation_59_62;
if (reset == 1'b0 && ^(swp_freq_calcuation_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_59_62_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %63*/
/*   %64 = icmp sgt i32 %8, -1*/
begin
swp_freq_calcuation_63_64 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %63*/
/*   %64 = icmp sgt i32 %8, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72))
begin
swp_freq_calcuation_63_64_reg <= swp_freq_calcuation_63_64;
if (reset == 1'b0 && ^(swp_freq_calcuation_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_63_64_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %63*/
/*   %or.cond56 = and i1 %21, %64*/
begin
swp_freq_calcuation_63_or_cond56 = (swp_freq_calcuation___crit_edge7_21_reg & swp_freq_calcuation_63_64);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %63*/
/*   %or.cond56 = and i1 %21, %64*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72))
begin
swp_freq_calcuation_63_or_cond56_reg <= swp_freq_calcuation_63_or_cond56;
if (reset == 1'b0 && ^(swp_freq_calcuation_63_or_cond56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_63_or_cond56_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %65*/
/*   %.sum15 = add i32 %v, 29*/
begin
swp_freq_calcuation_65__sum15 = (arg_v + 32'd29);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %65*/
/*   %.sum15 = add i32 %v, 29*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_73))
begin
swp_freq_calcuation_65__sum15_reg <= swp_freq_calcuation_65__sum15;
if (reset == 1'b0 && ^(swp_freq_calcuation_65__sum15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_65__sum15_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %65*/
/*   %66 = getelementptr inbounds i32* %V, i32 %.sum15*/
begin
swp_freq_calcuation_65_66 = (arg_V + (4 * swp_freq_calcuation_65__sum15_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %65*/
/*   %66 = getelementptr inbounds i32* %V, i32 %.sum15*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74))
begin
swp_freq_calcuation_65_66_reg <= swp_freq_calcuation_65_66;
if (reset == 1'b0 && ^(swp_freq_calcuation_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_65_66_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
begin
swp_freq_calcuation_65_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76))
begin
swp_freq_calcuation_65_67_reg <= swp_freq_calcuation_65_67;
if (reset == 1'b0 && ^(swp_freq_calcuation_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_65_67_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %65*/
/*   %68 = icmp sgt i32 %67, -1*/
begin
swp_freq_calcuation_65_68 = ($signed(swp_freq_calcuation_65_67) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %65*/
/*   %68 = icmp sgt i32 %67, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76))
begin
swp_freq_calcuation_65_68_reg <= swp_freq_calcuation_65_68;
if (reset == 1'b0 && ^(swp_freq_calcuation_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_65_68_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %.sum16 = add i32 %v, 28*/
begin
swp_freq_calcuation_69__sum16 = (arg_v + 32'd28);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %.sum16 = add i32 %v, 28*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_77))
begin
swp_freq_calcuation_69__sum16_reg <= swp_freq_calcuation_69__sum16;
if (reset == 1'b0 && ^(swp_freq_calcuation_69__sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69__sum16_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %70 = getelementptr inbounds i32* %V, i32 %.sum16*/
begin
swp_freq_calcuation_69_70 = (arg_V + (4 * swp_freq_calcuation_69__sum16_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %70 = getelementptr inbounds i32* %V, i32 %.sum16*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78))
begin
swp_freq_calcuation_69_70_reg <= swp_freq_calcuation_69_70;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_70_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
begin
swp_freq_calcuation_69_71 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_71_reg <= swp_freq_calcuation_69_71;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_71_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %72 = icmp sgt i32 %71, -1*/
begin
swp_freq_calcuation_69_72 = ($signed(swp_freq_calcuation_69_71) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %72 = icmp sgt i32 %71, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_72_reg <= swp_freq_calcuation_69_72;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_72_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %73 = icmp sgt i32 %8, %71*/
begin
swp_freq_calcuation_69_73 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(swp_freq_calcuation_69_71));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %73 = icmp sgt i32 %8, %71*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_73_reg <= swp_freq_calcuation_69_73;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_73_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %or.cond31 = and i1 %72, %73*/
begin
swp_freq_calcuation_69_or_cond31 = (swp_freq_calcuation_69_72 & swp_freq_calcuation_69_73);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %or.cond31 = and i1 %72, %73*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_or_cond31_reg <= swp_freq_calcuation_69_or_cond31;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_or_cond31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_or_cond31_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %74 = icmp sgt i32 %67, %71*/
begin
swp_freq_calcuation_69_74 = ($signed(swp_freq_calcuation_65_67_reg) > $signed(swp_freq_calcuation_69_71));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %74 = icmp sgt i32 %67, %71*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_74_reg <= swp_freq_calcuation_69_74;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_74_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %69*/
/*   %or.cond32 = and i1 %or.cond31, %74*/
begin
swp_freq_calcuation_69_or_cond32 = (swp_freq_calcuation_69_or_cond31 & swp_freq_calcuation_69_74);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %69*/
/*   %or.cond32 = and i1 %or.cond31, %74*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80))
begin
swp_freq_calcuation_69_or_cond32_reg <= swp_freq_calcuation_69_or_cond32;
if (reset == 1'b0 && ^(swp_freq_calcuation_69_or_cond32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_69_or_cond32_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %75*/
/*   %76 = icmp sgt i32 %8, %SIGMIN*/
begin
swp_freq_calcuation_75_76 = ($signed(swp_freq_calcuation_4_8_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %75*/
/*   %76 = icmp sgt i32 %8, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81))
begin
swp_freq_calcuation_75_76_reg <= swp_freq_calcuation_75_76;
if (reset == 1'b0 && ^(swp_freq_calcuation_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_75_76_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %75*/
/*   %77 = icmp sgt i32 %67, %SIGMIN*/
begin
swp_freq_calcuation_75_77 = ($signed(swp_freq_calcuation_65_67_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %75*/
/*   %77 = icmp sgt i32 %67, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81))
begin
swp_freq_calcuation_75_77_reg <= swp_freq_calcuation_75_77;
if (reset == 1'b0 && ^(swp_freq_calcuation_75_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_75_77_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %75*/
/*   %or.cond33 = or i1 %76, %77*/
begin
swp_freq_calcuation_75_or_cond33 = (swp_freq_calcuation_75_76 | swp_freq_calcuation_75_77);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %75*/
/*   %or.cond33 = or i1 %76, %77*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81))
begin
swp_freq_calcuation_75_or_cond33_reg <= swp_freq_calcuation_75_or_cond33;
if (reset == 1'b0 && ^(swp_freq_calcuation_75_or_cond33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_75_or_cond33_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %78*/
/*   %79 = icmp slt i32 %8, %67*/
begin
swp_freq_calcuation_78_79 = ($signed(swp_freq_calcuation_4_8_reg) < $signed(swp_freq_calcuation_65_67_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %78*/
/*   %79 = icmp slt i32 %8, %67*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_82))
begin
swp_freq_calcuation_78_79_reg <= swp_freq_calcuation_78_79;
if (reset == 1'b0 && ^(swp_freq_calcuation_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_78_79_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_78_80 = swp_freq_calcuation_78_80_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %78*/
/*   %80 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83))
begin
swp_freq_calcuation_78_80_reg <= swp_freq_calcuation_78_80;
if (reset == 1'b0 && ^(swp_freq_calcuation_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_78_80_reg"); $finish; end
end
/* swp_freq_calcuation: %78*/
/*   %80 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83))
begin
swp_freq_calcuation_78_80_reg <= swp_freq_calcuation_78_80;
if (reset == 1'b0 && ^(swp_freq_calcuation_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_78_80_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %78*/
/*   %81 = add nsw i32 %80, %afcex_freq*/
begin
swp_freq_calcuation_78_81 = (swp_freq_calcuation_78_80 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %78*/
/*   %81 = add nsw i32 %80, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_78_83))
begin
swp_freq_calcuation_78_81_reg <= swp_freq_calcuation_78_81;
if (reset == 1'b0 && ^(swp_freq_calcuation_78_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_78_81_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %82*/
/*   %83 = trunc i32 %8 to i8*/
begin
swp_freq_calcuation_82_83 = swp_freq_calcuation_4_8_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %82*/
/*   %83 = trunc i32 %8 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
swp_freq_calcuation_82_83_reg <= swp_freq_calcuation_82_83;
if (reset == 1'b0 && ^(swp_freq_calcuation_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_82_83_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %84*/
/*   %85 = sub nsw i32 %81, %swp_ofs*/
begin
swp_freq_calcuation_84_85 = (swp_freq_calcuation_78_81_reg - arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %84*/
/*   %85 = sub nsw i32 %81, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
swp_freq_calcuation_84_85_reg <= swp_freq_calcuation_84_85;
if (reset == 1'b0 && ^(swp_freq_calcuation_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_84_85_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %84*/
/*   %86 = trunc i32 %67 to i8*/
begin
swp_freq_calcuation_84_86 = swp_freq_calcuation_65_67_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %84*/
/*   %86 = trunc i32 %67 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
swp_freq_calcuation_84_86_reg <= swp_freq_calcuation_84_86;
if (reset == 1'b0 && ^(swp_freq_calcuation_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_84_86_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %87*/
/*   %88 = icmp ne i32 %1, 0*/
begin
swp_freq_calcuation_87_88 = (swp_freq_calcuation_0_1_reg != 32'd0);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %87*/
/*   %88 = icmp ne i32 %1, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88))
begin
swp_freq_calcuation_87_88_reg <= swp_freq_calcuation_87_88;
if (reset == 1'b0 && ^(swp_freq_calcuation_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_87_88_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %87*/
/*   %89 = icmp slt i32 %v, %vmin*/
begin
swp_freq_calcuation_87_89 = ($signed(arg_v) < $signed(arg_vmin));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %87*/
/*   %89 = icmp slt i32 %v, %vmin*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88))
begin
swp_freq_calcuation_87_89_reg <= swp_freq_calcuation_87_89;
if (reset == 1'b0 && ^(swp_freq_calcuation_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_87_89_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %87*/
/*   %or.cond34 = or i1 %88, %89*/
begin
swp_freq_calcuation_87_or_cond34 = (swp_freq_calcuation_87_88 | swp_freq_calcuation_87_89);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %87*/
/*   %or.cond34 = or i1 %88, %89*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88))
begin
swp_freq_calcuation_87_or_cond34_reg <= swp_freq_calcuation_87_or_cond34;
if (reset == 1'b0 && ^(swp_freq_calcuation_87_or_cond34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_87_or_cond34_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %90*/
/*   %.sum = add i32 %v, 30*/
begin
swp_freq_calcuation_90__sum = (arg_v + 32'd30);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %90*/
/*   %.sum = add i32 %v, 30*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_89))
begin
swp_freq_calcuation_90__sum_reg <= swp_freq_calcuation_90__sum;
if (reset == 1'b0 && ^(swp_freq_calcuation_90__sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_90__sum_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %90*/
/*   %91 = getelementptr inbounds i32* %V, i32 %.sum*/
begin
swp_freq_calcuation_90_91 = (arg_V + (4 * swp_freq_calcuation_90__sum_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %90*/
/*   %91 = getelementptr inbounds i32* %V, i32 %.sum*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90))
begin
swp_freq_calcuation_90_91_reg <= swp_freq_calcuation_90_91;
if (reset == 1'b0 && ^(swp_freq_calcuation_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_90_91_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
begin
swp_freq_calcuation_90_92 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_92))
begin
swp_freq_calcuation_90_92_reg <= swp_freq_calcuation_90_92;
if (reset == 1'b0 && ^(swp_freq_calcuation_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_90_92_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %90*/
/*   %93 = icmp sgt i32 %92, 0*/
begin
swp_freq_calcuation_90_93 = ($signed(swp_freq_calcuation_90_92) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %90*/
/*   %93 = icmp sgt i32 %92, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_92))
begin
swp_freq_calcuation_90_93_reg <= swp_freq_calcuation_90_93;
if (reset == 1'b0 && ^(swp_freq_calcuation_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_90_93_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %94*/
/*   %.sum12 = add i32 %v, 31*/
begin
swp_freq_calcuation_94__sum12 = (arg_v + 32'd31);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %94*/
/*   %.sum12 = add i32 %v, 31*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_93))
begin
swp_freq_calcuation_94__sum12_reg <= swp_freq_calcuation_94__sum12;
if (reset == 1'b0 && ^(swp_freq_calcuation_94__sum12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_94__sum12_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %94*/
/*   %95 = getelementptr inbounds i32* %V, i32 %.sum12*/
begin
swp_freq_calcuation_94_95 = (arg_V + (4 * swp_freq_calcuation_94__sum12_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %94*/
/*   %95 = getelementptr inbounds i32* %V, i32 %.sum12*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94))
begin
swp_freq_calcuation_94_95_reg <= swp_freq_calcuation_94_95;
if (reset == 1'b0 && ^(swp_freq_calcuation_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_94_95_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
begin
swp_freq_calcuation_94_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_96))
begin
swp_freq_calcuation_94_96_reg <= swp_freq_calcuation_94_96;
if (reset == 1'b0 && ^(swp_freq_calcuation_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_94_96_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %94*/
/*   %97 = icmp sgt i32 %96, 0*/
begin
swp_freq_calcuation_94_97 = ($signed(swp_freq_calcuation_94_96) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %94*/
/*   %97 = icmp sgt i32 %96, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_96))
begin
swp_freq_calcuation_94_97_reg <= swp_freq_calcuation_94_97;
if (reset == 1'b0 && ^(swp_freq_calcuation_94_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_94_97_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %.sum13 = add i32 %v, 32*/
begin
swp_freq_calcuation_98__sum13 = (arg_v + 32'd32);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %.sum13 = add i32 %v, 32*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_97))
begin
swp_freq_calcuation_98__sum13_reg <= swp_freq_calcuation_98__sum13;
if (reset == 1'b0 && ^(swp_freq_calcuation_98__sum13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98__sum13_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %99 = getelementptr inbounds i32* %V, i32 %.sum13*/
begin
swp_freq_calcuation_98_99 = (arg_V + (4 * swp_freq_calcuation_98__sum13_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %99 = getelementptr inbounds i32* %V, i32 %.sum13*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98))
begin
swp_freq_calcuation_98_99_reg <= swp_freq_calcuation_98_99;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_99_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
begin
swp_freq_calcuation_98_100 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_100_reg <= swp_freq_calcuation_98_100;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_100_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %101 = icmp sgt i32 %100, 0*/
begin
swp_freq_calcuation_98_101 = ($signed(swp_freq_calcuation_98_100) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %101 = icmp sgt i32 %100, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_101_reg <= swp_freq_calcuation_98_101;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_101_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %102 = icmp sgt i32 %96, %92*/
begin
swp_freq_calcuation_98_102 = ($signed(swp_freq_calcuation_94_96_reg) > $signed(swp_freq_calcuation_90_92_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %102 = icmp sgt i32 %96, %92*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_97))
begin
swp_freq_calcuation_98_102_reg <= swp_freq_calcuation_98_102;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_102_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond35 = and i1 %101, %102*/
begin
swp_freq_calcuation_98_or_cond35 = (swp_freq_calcuation_98_101 & swp_freq_calcuation_98_102_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond35 = and i1 %101, %102*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_or_cond35_reg <= swp_freq_calcuation_98_or_cond35;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_or_cond35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_or_cond35_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %103 = icmp sgt i32 %96, %100*/
begin
swp_freq_calcuation_98_103 = ($signed(swp_freq_calcuation_94_96_reg) > $signed(swp_freq_calcuation_98_100));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %103 = icmp sgt i32 %96, %100*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_103_reg <= swp_freq_calcuation_98_103;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_103_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond36 = and i1 %or.cond35, %103*/
begin
swp_freq_calcuation_98_or_cond36 = (swp_freq_calcuation_98_or_cond35 & swp_freq_calcuation_98_103);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond36 = and i1 %or.cond35, %103*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_or_cond36_reg <= swp_freq_calcuation_98_or_cond36;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_or_cond36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_or_cond36_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %104 = icmp sgt i32 %96, %SIGMIN*/
begin
swp_freq_calcuation_98_104 = ($signed(swp_freq_calcuation_94_96_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %104 = icmp sgt i32 %96, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_97))
begin
swp_freq_calcuation_98_104_reg <= swp_freq_calcuation_98_104;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_104_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond37 = and i1 %or.cond36, %104*/
begin
swp_freq_calcuation_98_or_cond37 = (swp_freq_calcuation_98_or_cond36 & swp_freq_calcuation_98_104_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %98*/
/*   %or.cond37 = and i1 %or.cond36, %104*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_100))
begin
swp_freq_calcuation_98_or_cond37_reg <= swp_freq_calcuation_98_or_cond37;
if (reset == 1'b0 && ^(swp_freq_calcuation_98_or_cond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_98_or_cond37_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_105_106 = swp_freq_calcuation_105_106_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %105*/
/*   %106 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102))
begin
swp_freq_calcuation_105_106_reg <= swp_freq_calcuation_105_106;
if (reset == 1'b0 && ^(swp_freq_calcuation_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_105_106_reg"); $finish; end
end
/* swp_freq_calcuation: %105*/
/*   %106 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102))
begin
swp_freq_calcuation_105_106_reg <= swp_freq_calcuation_105_106;
if (reset == 1'b0 && ^(swp_freq_calcuation_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_105_106_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %105*/
/*   %107 = add i32 %106, %afcex_freq*/
begin
swp_freq_calcuation_105_107 = (swp_freq_calcuation_105_106 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %105*/
/*   %107 = add i32 %106, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102))
begin
swp_freq_calcuation_105_107_reg <= swp_freq_calcuation_105_107;
if (reset == 1'b0 && ^(swp_freq_calcuation_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_105_107_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %105*/
/*   %108 = add i32 %107, %swp_ofs*/
begin
swp_freq_calcuation_105_108 = (swp_freq_calcuation_105_107 + arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %105*/
/*   %108 = add i32 %107, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102))
begin
swp_freq_calcuation_105_108_reg <= swp_freq_calcuation_105_108;
if (reset == 1'b0 && ^(swp_freq_calcuation_105_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_105_108_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %105*/
/*   %109 = trunc i32 %96 to i8*/
begin
swp_freq_calcuation_105_109 = swp_freq_calcuation_94_96_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %105*/
/*   %109 = trunc i32 %96 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
swp_freq_calcuation_105_109_reg <= swp_freq_calcuation_105_109;
if (reset == 1'b0 && ^(swp_freq_calcuation_105_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_105_109_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %110*/
/*   %111 = add nsw i32 %v, 1*/
begin
swp_freq_calcuation_110_111 = (arg_v + 32'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %110*/
/*   %111 = add nsw i32 %v, 1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103))
begin
swp_freq_calcuation_110_111_reg <= swp_freq_calcuation_110_111;
if (reset == 1'b0 && ^(swp_freq_calcuation_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_110_111_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %110*/
/*   %112 = icmp eq i32 %111, %vmax*/
begin
swp_freq_calcuation_110_112 = (swp_freq_calcuation_110_111 == arg_vmax);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %110*/
/*   %112 = icmp eq i32 %111, %vmax*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103))
begin
swp_freq_calcuation_110_112_reg <= swp_freq_calcuation_110_112;
if (reset == 1'b0 && ^(swp_freq_calcuation_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_110_112_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %110*/
/*   %113 = icmp sgt i32 %92, -1*/
begin
swp_freq_calcuation_110_113 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %110*/
/*   %113 = icmp sgt i32 %92, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103))
begin
swp_freq_calcuation_110_113_reg <= swp_freq_calcuation_110_113;
if (reset == 1'b0 && ^(swp_freq_calcuation_110_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_110_113_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %110*/
/*   %or.cond57 = and i1 %112, %113*/
begin
swp_freq_calcuation_110_or_cond57 = (swp_freq_calcuation_110_112 & swp_freq_calcuation_110_113);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %110*/
/*   %or.cond57 = and i1 %112, %113*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_110_103))
begin
swp_freq_calcuation_110_or_cond57_reg <= swp_freq_calcuation_110_or_cond57;
if (reset == 1'b0 && ^(swp_freq_calcuation_110_or_cond57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_110_or_cond57_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %.sum11 = add i32 %v, 31*/
begin
swp_freq_calcuation_114__sum11 = (arg_v + 32'd31);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %.sum11 = add i32 %v, 31*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_104))
begin
swp_freq_calcuation_114__sum11_reg <= swp_freq_calcuation_114__sum11;
if (reset == 1'b0 && ^(swp_freq_calcuation_114__sum11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114__sum11_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %115 = getelementptr inbounds i32* %V, i32 %.sum11*/
begin
swp_freq_calcuation_114_115 = (arg_V + (4 * swp_freq_calcuation_114__sum11_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %115 = getelementptr inbounds i32* %V, i32 %.sum11*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105))
begin
swp_freq_calcuation_114_115_reg <= swp_freq_calcuation_114_115;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_115_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
begin
swp_freq_calcuation_114_116 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_116_reg <= swp_freq_calcuation_114_116;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_116_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %117 = icmp sgt i32 %116, -1*/
begin
swp_freq_calcuation_114_117 = ($signed(swp_freq_calcuation_114_116) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %117 = icmp sgt i32 %116, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_117_reg <= swp_freq_calcuation_114_117;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_117_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %118 = icmp sgt i32 %116, %92*/
begin
swp_freq_calcuation_114_118 = ($signed(swp_freq_calcuation_114_116) > $signed(swp_freq_calcuation_90_92_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %118 = icmp sgt i32 %116, %92*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_118_reg <= swp_freq_calcuation_114_118;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_118_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %or.cond38 = and i1 %117, %118*/
begin
swp_freq_calcuation_114_or_cond38 = (swp_freq_calcuation_114_117 & swp_freq_calcuation_114_118);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %or.cond38 = and i1 %117, %118*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_or_cond38_reg <= swp_freq_calcuation_114_or_cond38;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_or_cond38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_or_cond38_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %119 = icmp sgt i32 %116, %SIGMIN*/
begin
swp_freq_calcuation_114_119 = ($signed(swp_freq_calcuation_114_116) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %119 = icmp sgt i32 %116, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_119_reg <= swp_freq_calcuation_114_119;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_119_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %114*/
/*   %or.cond39 = and i1 %or.cond38, %119*/
begin
swp_freq_calcuation_114_or_cond39 = (swp_freq_calcuation_114_or_cond38 & swp_freq_calcuation_114_119);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %114*/
/*   %or.cond39 = and i1 %or.cond38, %119*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_107))
begin
swp_freq_calcuation_114_or_cond39_reg <= swp_freq_calcuation_114_or_cond39;
if (reset == 1'b0 && ^(swp_freq_calcuation_114_or_cond39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_114_or_cond39_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_120_121 = swp_freq_calcuation_120_121_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %120*/
/*   %121 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109))
begin
swp_freq_calcuation_120_121_reg <= swp_freq_calcuation_120_121;
if (reset == 1'b0 && ^(swp_freq_calcuation_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_120_121_reg"); $finish; end
end
/* swp_freq_calcuation: %120*/
/*   %121 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109))
begin
swp_freq_calcuation_120_121_reg <= swp_freq_calcuation_120_121;
if (reset == 1'b0 && ^(swp_freq_calcuation_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_120_121_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %120*/
/*   %122 = add i32 %121, %afcex_freq*/
begin
swp_freq_calcuation_120_122 = (swp_freq_calcuation_120_121 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %120*/
/*   %122 = add i32 %121, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109))
begin
swp_freq_calcuation_120_122_reg <= swp_freq_calcuation_120_122;
if (reset == 1'b0 && ^(swp_freq_calcuation_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_120_122_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %120*/
/*   %123 = add i32 %122, %swp_ofs*/
begin
swp_freq_calcuation_120_123 = (swp_freq_calcuation_120_122 + arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %120*/
/*   %123 = add i32 %122, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109))
begin
swp_freq_calcuation_120_123_reg <= swp_freq_calcuation_120_123;
if (reset == 1'b0 && ^(swp_freq_calcuation_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_120_123_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %120*/
/*   %124 = trunc i32 %92 to i8*/
begin
swp_freq_calcuation_120_124 = swp_freq_calcuation_90_92_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %120*/
/*   %124 = trunc i32 %92 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
swp_freq_calcuation_120_124_reg <= swp_freq_calcuation_120_124;
if (reset == 1'b0 && ^(swp_freq_calcuation_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_120_124_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %125*/
/*   %.not = icmp ne i32 %v, %vmin*/
begin
swp_freq_calcuation_125__not = (arg_v != arg_vmin);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %125*/
/*   %.not = icmp ne i32 %v, %vmin*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110))
begin
swp_freq_calcuation_125__not_reg <= swp_freq_calcuation_125__not;
if (reset == 1'b0 && ^(swp_freq_calcuation_125__not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_125__not_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %125*/
/*   %.not58 = xor i1 %93, true*/
begin
swp_freq_calcuation_125__not58 = (swp_freq_calcuation_90_93_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %125*/
/*   %.not58 = xor i1 %93, true*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110))
begin
swp_freq_calcuation_125__not58_reg <= swp_freq_calcuation_125__not58;
if (reset == 1'b0 && ^(swp_freq_calcuation_125__not58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_125__not58_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %125*/
/*   %brmerge = or i1 %.not, %.not58*/
begin
swp_freq_calcuation_125_brmerge = (swp_freq_calcuation_125__not | swp_freq_calcuation_125__not58);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %125*/
/*   %brmerge = or i1 %.not, %.not58*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_125_110))
begin
swp_freq_calcuation_125_brmerge_reg <= swp_freq_calcuation_125_brmerge;
if (reset == 1'b0 && ^(swp_freq_calcuation_125_brmerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_125_brmerge_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %126*/
/*   %.sum9 = add i32 %v, 31*/
begin
swp_freq_calcuation_126__sum9 = (arg_v + 32'd31);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %126*/
/*   %.sum9 = add i32 %v, 31*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_111))
begin
swp_freq_calcuation_126__sum9_reg <= swp_freq_calcuation_126__sum9;
if (reset == 1'b0 && ^(swp_freq_calcuation_126__sum9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_126__sum9_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %126*/
/*   %127 = getelementptr inbounds i32* %V, i32 %.sum9*/
begin
swp_freq_calcuation_126_127 = (arg_V + (4 * swp_freq_calcuation_126__sum9_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %126*/
/*   %127 = getelementptr inbounds i32* %V, i32 %.sum9*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112))
begin
swp_freq_calcuation_126_127_reg <= swp_freq_calcuation_126_127;
if (reset == 1'b0 && ^(swp_freq_calcuation_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_126_127_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
begin
swp_freq_calcuation_126_128 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_114))
begin
swp_freq_calcuation_126_128_reg <= swp_freq_calcuation_126_128;
if (reset == 1'b0 && ^(swp_freq_calcuation_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_126_128_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %126*/
/*   %129 = icmp sgt i32 %128, 0*/
begin
swp_freq_calcuation_126_129 = ($signed(swp_freq_calcuation_126_128) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %126*/
/*   %129 = icmp sgt i32 %128, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_114))
begin
swp_freq_calcuation_126_129_reg <= swp_freq_calcuation_126_129;
if (reset == 1'b0 && ^(swp_freq_calcuation_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_126_129_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %.sum10 = add i32 %v, 32*/
begin
swp_freq_calcuation_130__sum10 = (arg_v + 32'd32);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %.sum10 = add i32 %v, 32*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_115))
begin
swp_freq_calcuation_130__sum10_reg <= swp_freq_calcuation_130__sum10;
if (reset == 1'b0 && ^(swp_freq_calcuation_130__sum10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130__sum10_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %131 = getelementptr inbounds i32* %V, i32 %.sum10*/
begin
swp_freq_calcuation_130_131 = (arg_V + (4 * swp_freq_calcuation_130__sum10_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %131 = getelementptr inbounds i32* %V, i32 %.sum10*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116))
begin
swp_freq_calcuation_130_131_reg <= swp_freq_calcuation_130_131;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_131_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
begin
swp_freq_calcuation_130_132 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_132_reg <= swp_freq_calcuation_130_132;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_132_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %133 = icmp sgt i32 %132, 0*/
begin
swp_freq_calcuation_130_133 = ($signed(swp_freq_calcuation_130_132) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %133 = icmp sgt i32 %132, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_133_reg <= swp_freq_calcuation_130_133;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_133_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %134 = icmp sgt i32 %92, %128*/
begin
swp_freq_calcuation_130_134 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(swp_freq_calcuation_126_128_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %134 = icmp sgt i32 %92, %128*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_115))
begin
swp_freq_calcuation_130_134_reg <= swp_freq_calcuation_130_134;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_134_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond40 = and i1 %133, %134*/
begin
swp_freq_calcuation_130_or_cond40 = (swp_freq_calcuation_130_133 & swp_freq_calcuation_130_134_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond40 = and i1 %133, %134*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_or_cond40_reg <= swp_freq_calcuation_130_or_cond40;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_or_cond40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_or_cond40_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %135 = icmp sgt i32 %92, %132*/
begin
swp_freq_calcuation_130_135 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(swp_freq_calcuation_130_132));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %135 = icmp sgt i32 %92, %132*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_135_reg <= swp_freq_calcuation_130_135;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_135_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond41 = and i1 %or.cond40, %135*/
begin
swp_freq_calcuation_130_or_cond41 = (swp_freq_calcuation_130_or_cond40 & swp_freq_calcuation_130_135);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond41 = and i1 %or.cond40, %135*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_or_cond41_reg <= swp_freq_calcuation_130_or_cond41;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_or_cond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_or_cond41_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %136 = icmp sgt i32 %92, %SIGMIN*/
begin
swp_freq_calcuation_130_136 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %136 = icmp sgt i32 %92, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_115))
begin
swp_freq_calcuation_130_136_reg <= swp_freq_calcuation_130_136;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_136_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond42 = and i1 %or.cond41, %136*/
begin
swp_freq_calcuation_130_or_cond42 = (swp_freq_calcuation_130_or_cond41 & swp_freq_calcuation_130_136_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %130*/
/*   %or.cond42 = and i1 %or.cond41, %136*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_118))
begin
swp_freq_calcuation_130_or_cond42_reg <= swp_freq_calcuation_130_or_cond42;
if (reset == 1'b0 && ^(swp_freq_calcuation_130_or_cond42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_130_or_cond42_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_137_138 = swp_freq_calcuation_137_138_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %137*/
/*   %138 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120))
begin
swp_freq_calcuation_137_138_reg <= swp_freq_calcuation_137_138;
if (reset == 1'b0 && ^(swp_freq_calcuation_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_137_138_reg"); $finish; end
end
/* swp_freq_calcuation: %137*/
/*   %138 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120))
begin
swp_freq_calcuation_137_138_reg <= swp_freq_calcuation_137_138;
if (reset == 1'b0 && ^(swp_freq_calcuation_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_137_138_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %137*/
/*   %139 = add nsw i32 %138, %afcex_freq*/
begin
swp_freq_calcuation_137_139 = (swp_freq_calcuation_137_138 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %137*/
/*   %139 = add nsw i32 %138, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120))
begin
swp_freq_calcuation_137_139_reg <= swp_freq_calcuation_137_139;
if (reset == 1'b0 && ^(swp_freq_calcuation_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_137_139_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %137*/
/*   %140 = trunc i32 %92 to i8*/
begin
swp_freq_calcuation_137_140 = swp_freq_calcuation_90_92_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %137*/
/*   %140 = trunc i32 %92 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
swp_freq_calcuation_137_140_reg <= swp_freq_calcuation_137_140;
if (reset == 1'b0 && ^(swp_freq_calcuation_137_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_137_140_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %141*/
/*   %.sum6 = add i32 %v, 31*/
begin
swp_freq_calcuation_141__sum6 = (arg_v + 32'd31);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %141*/
/*   %.sum6 = add i32 %v, 31*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_122))
begin
swp_freq_calcuation_141__sum6_reg <= swp_freq_calcuation_141__sum6;
if (reset == 1'b0 && ^(swp_freq_calcuation_141__sum6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_141__sum6_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %141*/
/*   %142 = getelementptr inbounds i32* %V, i32 %.sum6*/
begin
swp_freq_calcuation_141_142 = (arg_V + (4 * swp_freq_calcuation_141__sum6_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %141*/
/*   %142 = getelementptr inbounds i32* %V, i32 %.sum6*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123))
begin
swp_freq_calcuation_141_142_reg <= swp_freq_calcuation_141_142;
if (reset == 1'b0 && ^(swp_freq_calcuation_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_141_142_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
begin
swp_freq_calcuation_141_143 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_125))
begin
swp_freq_calcuation_141_143_reg <= swp_freq_calcuation_141_143;
if (reset == 1'b0 && ^(swp_freq_calcuation_141_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_141_143_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %141*/
/*   %144 = icmp sgt i32 %143, -1*/
begin
swp_freq_calcuation_141_144 = ($signed(swp_freq_calcuation_141_143) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %141*/
/*   %144 = icmp sgt i32 %143, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_125))
begin
swp_freq_calcuation_141_144_reg <= swp_freq_calcuation_141_144;
if (reset == 1'b0 && ^(swp_freq_calcuation_141_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_141_144_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %145*/
/*   %.sum7 = add i32 %v, 32*/
begin
swp_freq_calcuation_145__sum7 = (arg_v + 32'd32);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %145*/
/*   %.sum7 = add i32 %v, 32*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_126))
begin
swp_freq_calcuation_145__sum7_reg <= swp_freq_calcuation_145__sum7;
if (reset == 1'b0 && ^(swp_freq_calcuation_145__sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_145__sum7_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %145*/
/*   %146 = getelementptr inbounds i32* %V, i32 %.sum7*/
begin
swp_freq_calcuation_145_146 = (arg_V + (4 * swp_freq_calcuation_145__sum7_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %145*/
/*   %146 = getelementptr inbounds i32* %V, i32 %.sum7*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127))
begin
swp_freq_calcuation_145_146_reg <= swp_freq_calcuation_145_146;
if (reset == 1'b0 && ^(swp_freq_calcuation_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_145_146_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
begin
swp_freq_calcuation_145_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_129))
begin
swp_freq_calcuation_145_147_reg <= swp_freq_calcuation_145_147;
if (reset == 1'b0 && ^(swp_freq_calcuation_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_145_147_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %145*/
/*   %148 = icmp sgt i32 %147, -1*/
begin
swp_freq_calcuation_145_148 = ($signed(swp_freq_calcuation_145_147) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %145*/
/*   %148 = icmp sgt i32 %147, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_129))
begin
swp_freq_calcuation_145_148_reg <= swp_freq_calcuation_145_148;
if (reset == 1'b0 && ^(swp_freq_calcuation_145_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_145_148_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %.sum8 = add i32 %v, 33*/
begin
swp_freq_calcuation_149__sum8 = (arg_v + 32'd33);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %.sum8 = add i32 %v, 33*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_130))
begin
swp_freq_calcuation_149__sum8_reg <= swp_freq_calcuation_149__sum8;
if (reset == 1'b0 && ^(swp_freq_calcuation_149__sum8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149__sum8_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %150 = getelementptr inbounds i32* %V, i32 %.sum8*/
begin
swp_freq_calcuation_149_150 = (arg_V + (4 * swp_freq_calcuation_149__sum8_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %150 = getelementptr inbounds i32* %V, i32 %.sum8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131))
begin
swp_freq_calcuation_149_150_reg <= swp_freq_calcuation_149_150;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_150_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
begin
swp_freq_calcuation_149_151 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133))
begin
swp_freq_calcuation_149_151_reg <= swp_freq_calcuation_149_151;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_151_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %152 = icmp sgt i32 %151, -1*/
begin
swp_freq_calcuation_149_152 = ($signed(swp_freq_calcuation_149_151) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %152 = icmp sgt i32 %151, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133))
begin
swp_freq_calcuation_149_152_reg <= swp_freq_calcuation_149_152;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_152_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %153 = icmp sgt i32 %143, %92*/
begin
swp_freq_calcuation_149_153 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(swp_freq_calcuation_90_92_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %153 = icmp sgt i32 %143, %92*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_130))
begin
swp_freq_calcuation_149_153_reg <= swp_freq_calcuation_149_153;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_153_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %or.cond43 = and i1 %152, %153*/
begin
swp_freq_calcuation_149_or_cond43 = (swp_freq_calcuation_149_152 & swp_freq_calcuation_149_153_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %or.cond43 = and i1 %152, %153*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133))
begin
swp_freq_calcuation_149_or_cond43_reg <= swp_freq_calcuation_149_or_cond43;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_or_cond43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_or_cond43_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %154 = icmp sgt i32 %147, %151*/
begin
swp_freq_calcuation_149_154 = ($signed(swp_freq_calcuation_145_147_reg) > $signed(swp_freq_calcuation_149_151));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %154 = icmp sgt i32 %147, %151*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133))
begin
swp_freq_calcuation_149_154_reg <= swp_freq_calcuation_149_154;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_154_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %149*/
/*   %or.cond44 = and i1 %or.cond43, %154*/
begin
swp_freq_calcuation_149_or_cond44 = (swp_freq_calcuation_149_or_cond43 & swp_freq_calcuation_149_154);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %149*/
/*   %or.cond44 = and i1 %or.cond43, %154*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_133))
begin
swp_freq_calcuation_149_or_cond44_reg <= swp_freq_calcuation_149_or_cond44;
if (reset == 1'b0 && ^(swp_freq_calcuation_149_or_cond44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_149_or_cond44_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %155*/
/*   %156 = icmp sgt i32 %143, %SIGMIN*/
begin
swp_freq_calcuation_155_156 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %155*/
/*   %156 = icmp sgt i32 %143, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134))
begin
swp_freq_calcuation_155_156_reg <= swp_freq_calcuation_155_156;
if (reset == 1'b0 && ^(swp_freq_calcuation_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_155_156_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %155*/
/*   %157 = icmp sgt i32 %147, %SIGMIN*/
begin
swp_freq_calcuation_155_157 = ($signed(swp_freq_calcuation_145_147_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %155*/
/*   %157 = icmp sgt i32 %147, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134))
begin
swp_freq_calcuation_155_157_reg <= swp_freq_calcuation_155_157;
if (reset == 1'b0 && ^(swp_freq_calcuation_155_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_155_157_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %155*/
/*   %or.cond45 = or i1 %156, %157*/
begin
swp_freq_calcuation_155_or_cond45 = (swp_freq_calcuation_155_156 | swp_freq_calcuation_155_157);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %155*/
/*   %or.cond45 = or i1 %156, %157*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_155_134))
begin
swp_freq_calcuation_155_or_cond45_reg <= swp_freq_calcuation_155_or_cond45;
if (reset == 1'b0 && ^(swp_freq_calcuation_155_or_cond45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_155_or_cond45_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %158*/
/*   %159 = icmp slt i32 %143, %147*/
begin
swp_freq_calcuation_158_159 = ($signed(swp_freq_calcuation_141_143_reg) < $signed(swp_freq_calcuation_145_147_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %158*/
/*   %159 = icmp slt i32 %143, %147*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_135))
begin
swp_freq_calcuation_158_159_reg <= swp_freq_calcuation_158_159;
if (reset == 1'b0 && ^(swp_freq_calcuation_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_158_159_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_158_160 = swp_freq_calcuation_158_160_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %158*/
/*   %160 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136))
begin
swp_freq_calcuation_158_160_reg <= swp_freq_calcuation_158_160;
if (reset == 1'b0 && ^(swp_freq_calcuation_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_158_160_reg"); $finish; end
end
/* swp_freq_calcuation: %158*/
/*   %160 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136))
begin
swp_freq_calcuation_158_160_reg <= swp_freq_calcuation_158_160;
if (reset == 1'b0 && ^(swp_freq_calcuation_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_158_160_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %158*/
/*   %161 = add nsw i32 %160, %afcex_freq*/
begin
swp_freq_calcuation_158_161 = (swp_freq_calcuation_158_160 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %158*/
/*   %161 = add nsw i32 %160, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_158_136))
begin
swp_freq_calcuation_158_161_reg <= swp_freq_calcuation_158_161;
if (reset == 1'b0 && ^(swp_freq_calcuation_158_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_158_161_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %162*/
/*   %163 = add nsw i32 %161, %swp_ofs*/
begin
swp_freq_calcuation_162_163 = (swp_freq_calcuation_158_161_reg + arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %162*/
/*   %163 = add nsw i32 %161, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
swp_freq_calcuation_162_163_reg <= swp_freq_calcuation_162_163;
if (reset == 1'b0 && ^(swp_freq_calcuation_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_162_163_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %162*/
/*   %164 = trunc i32 %143 to i8*/
begin
swp_freq_calcuation_162_164 = swp_freq_calcuation_141_143_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %162*/
/*   %164 = trunc i32 %143 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
swp_freq_calcuation_162_164_reg <= swp_freq_calcuation_162_164;
if (reset == 1'b0 && ^(swp_freq_calcuation_162_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_162_164_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %165*/
/*   %166 = shl i32 %swp_ofs, 1*/
begin
swp_freq_calcuation_165_166 = (arg_swp_ofs <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %165*/
/*   %166 = shl i32 %swp_ofs, 1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
swp_freq_calcuation_165_166_reg <= swp_freq_calcuation_165_166;
if (reset == 1'b0 && ^(swp_freq_calcuation_165_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_165_166_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %165*/
/*   %167 = add nsw i32 %166, %161*/
begin
swp_freq_calcuation_165_167 = (swp_freq_calcuation_165_166 + swp_freq_calcuation_158_161_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %165*/
/*   %167 = add nsw i32 %166, %161*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
swp_freq_calcuation_165_167_reg <= swp_freq_calcuation_165_167;
if (reset == 1'b0 && ^(swp_freq_calcuation_165_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_165_167_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %165*/
/*   %168 = trunc i32 %147 to i8*/
begin
swp_freq_calcuation_165_168 = swp_freq_calcuation_145_147_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %165*/
/*   %168 = trunc i32 %147 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
swp_freq_calcuation_165_168_reg <= swp_freq_calcuation_165_168;
if (reset == 1'b0 && ^(swp_freq_calcuation_165_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_165_168_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %169*/
/*   %170 = or i32 %92, %143*/
begin
swp_freq_calcuation_169_170 = (swp_freq_calcuation_90_92_reg | swp_freq_calcuation_141_143_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %169*/
/*   %170 = or i32 %92, %143*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_169_141))
begin
swp_freq_calcuation_169_170_reg <= swp_freq_calcuation_169_170;
if (reset == 1'b0 && ^(swp_freq_calcuation_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_169_170_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %169*/
/*   %brmerge11 = icmp slt i32 %170, 0*/
begin
swp_freq_calcuation_169_brmerge11 = ($signed(swp_freq_calcuation_169_170) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %169*/
/*   %brmerge11 = icmp slt i32 %170, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_169_141))
begin
swp_freq_calcuation_169_brmerge11_reg <= swp_freq_calcuation_169_brmerge11;
if (reset == 1'b0 && ^(swp_freq_calcuation_169_brmerge11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_169_brmerge11_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %.sum5 = add i32 %v, 33*/
begin
swp_freq_calcuation_172__sum5 = (arg_v + 32'd33);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %.sum5 = add i32 %v, 33*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_143))
begin
swp_freq_calcuation_172__sum5_reg <= swp_freq_calcuation_172__sum5;
if (reset == 1'b0 && ^(swp_freq_calcuation_172__sum5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172__sum5_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %173 = getelementptr inbounds i32* %V, i32 %.sum5*/
begin
swp_freq_calcuation_172_173 = (arg_V + (4 * swp_freq_calcuation_172__sum5_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %173 = getelementptr inbounds i32* %V, i32 %.sum5*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144))
begin
swp_freq_calcuation_172_173_reg <= swp_freq_calcuation_172_173;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_173_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
begin
swp_freq_calcuation_172_174 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_174_reg <= swp_freq_calcuation_172_174;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_174_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %175 = icmp sgt i32 %174, -1*/
begin
swp_freq_calcuation_172_175 = ($signed(swp_freq_calcuation_172_174) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %175 = icmp sgt i32 %174, -1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_175_reg <= swp_freq_calcuation_172_175;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_175_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %176 = icmp sgt i32 %92, %147*/
begin
swp_freq_calcuation_172_176 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(swp_freq_calcuation_145_147_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %176 = icmp sgt i32 %92, %147*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_143))
begin
swp_freq_calcuation_172_176_reg <= swp_freq_calcuation_172_176;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_176_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond46 = and i1 %175, %176*/
begin
swp_freq_calcuation_172_or_cond46 = (swp_freq_calcuation_172_175 & swp_freq_calcuation_172_176_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond46 = and i1 %175, %176*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_or_cond46_reg <= swp_freq_calcuation_172_or_cond46;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_or_cond46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_or_cond46_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %177 = icmp sgt i32 %143, %147*/
begin
swp_freq_calcuation_172_177 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(swp_freq_calcuation_145_147_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %177 = icmp sgt i32 %143, %147*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_143))
begin
swp_freq_calcuation_172_177_reg <= swp_freq_calcuation_172_177;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_177_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond47 = and i1 %or.cond46, %177*/
begin
swp_freq_calcuation_172_or_cond47 = (swp_freq_calcuation_172_or_cond46 & swp_freq_calcuation_172_177_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond47 = and i1 %or.cond46, %177*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_or_cond47_reg <= swp_freq_calcuation_172_or_cond47;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_or_cond47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_or_cond47_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %178 = icmp sgt i32 %92, %174*/
begin
swp_freq_calcuation_172_178 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(swp_freq_calcuation_172_174));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %178 = icmp sgt i32 %92, %174*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_178_reg <= swp_freq_calcuation_172_178;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_178_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond48 = and i1 %or.cond47, %178*/
begin
swp_freq_calcuation_172_or_cond48 = (swp_freq_calcuation_172_or_cond47 & swp_freq_calcuation_172_178);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond48 = and i1 %or.cond47, %178*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_or_cond48_reg <= swp_freq_calcuation_172_or_cond48;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_or_cond48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_or_cond48_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %179 = icmp sgt i32 %143, %174*/
begin
swp_freq_calcuation_172_179 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(swp_freq_calcuation_172_174));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %179 = icmp sgt i32 %143, %174*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_179_reg <= swp_freq_calcuation_172_179;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_179_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond49 = and i1 %or.cond48, %179*/
begin
swp_freq_calcuation_172_or_cond49 = (swp_freq_calcuation_172_or_cond48 & swp_freq_calcuation_172_179);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %172*/
/*   %or.cond49 = and i1 %or.cond48, %179*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_146))
begin
swp_freq_calcuation_172_or_cond49_reg <= swp_freq_calcuation_172_or_cond49;
if (reset == 1'b0 && ^(swp_freq_calcuation_172_or_cond49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_172_or_cond49_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %180*/
/*   %181 = icmp sgt i32 %92, %SIGMIN*/
begin
swp_freq_calcuation_180_181 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %180*/
/*   %181 = icmp sgt i32 %92, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147))
begin
swp_freq_calcuation_180_181_reg <= swp_freq_calcuation_180_181;
if (reset == 1'b0 && ^(swp_freq_calcuation_180_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_180_181_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %180*/
/*   %182 = icmp sgt i32 %143, %SIGMIN*/
begin
swp_freq_calcuation_180_182 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %180*/
/*   %182 = icmp sgt i32 %143, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147))
begin
swp_freq_calcuation_180_182_reg <= swp_freq_calcuation_180_182;
if (reset == 1'b0 && ^(swp_freq_calcuation_180_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_180_182_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %180*/
/*   %or.cond50 = or i1 %181, %182*/
begin
swp_freq_calcuation_180_or_cond50 = (swp_freq_calcuation_180_181 | swp_freq_calcuation_180_182);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %180*/
/*   %or.cond50 = or i1 %181, %182*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_180_147))
begin
swp_freq_calcuation_180_or_cond50_reg <= swp_freq_calcuation_180_or_cond50;
if (reset == 1'b0 && ^(swp_freq_calcuation_180_or_cond50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_180_or_cond50_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %183*/
/*   %184 = icmp slt i32 %92, %143*/
begin
swp_freq_calcuation_183_184 = ($signed(swp_freq_calcuation_90_92_reg) < $signed(swp_freq_calcuation_141_143_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %183*/
/*   %184 = icmp slt i32 %92, %143*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_148))
begin
swp_freq_calcuation_183_184_reg <= swp_freq_calcuation_183_184;
if (reset == 1'b0 && ^(swp_freq_calcuation_183_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_183_184_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_183_185 = swp_freq_calcuation_183_185_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %183*/
/*   %185 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149))
begin
swp_freq_calcuation_183_185_reg <= swp_freq_calcuation_183_185;
if (reset == 1'b0 && ^(swp_freq_calcuation_183_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_183_185_reg"); $finish; end
end
/* swp_freq_calcuation: %183*/
/*   %185 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149))
begin
swp_freq_calcuation_183_185_reg <= swp_freq_calcuation_183_185;
if (reset == 1'b0 && ^(swp_freq_calcuation_183_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_183_185_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %183*/
/*   %186 = add nsw i32 %185, %afcex_freq*/
begin
swp_freq_calcuation_183_186 = (swp_freq_calcuation_183_185 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %183*/
/*   %186 = add nsw i32 %185, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_183_149))
begin
swp_freq_calcuation_183_186_reg <= swp_freq_calcuation_183_186;
if (reset == 1'b0 && ^(swp_freq_calcuation_183_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_183_186_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %187*/
/*   %188 = trunc i32 %92 to i8*/
begin
swp_freq_calcuation_187_188 = swp_freq_calcuation_90_92_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %187*/
/*   %188 = trunc i32 %92 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
swp_freq_calcuation_187_188_reg <= swp_freq_calcuation_187_188;
if (reset == 1'b0 && ^(swp_freq_calcuation_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_187_188_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %189*/
/*   %190 = add nsw i32 %186, %swp_ofs*/
begin
swp_freq_calcuation_189_190 = (swp_freq_calcuation_183_186_reg + arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %189*/
/*   %190 = add nsw i32 %186, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
swp_freq_calcuation_189_190_reg <= swp_freq_calcuation_189_190;
if (reset == 1'b0 && ^(swp_freq_calcuation_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_189_190_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %189*/
/*   %191 = trunc i32 %143 to i8*/
begin
swp_freq_calcuation_189_191 = swp_freq_calcuation_141_143_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %189*/
/*   %191 = trunc i32 %143 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
swp_freq_calcuation_189_191_reg <= swp_freq_calcuation_189_191;
if (reset == 1'b0 && ^(swp_freq_calcuation_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_189_191_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %192 = add nsw i32 %v, 2*/
begin
swp_freq_calcuation__thread55_192 = (arg_v + 32'd2);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %192 = add nsw i32 %v, 2*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55_192_reg <= swp_freq_calcuation__thread55_192;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_192_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not59 = icmp ne i32 %192, %vmin*/
begin
swp_freq_calcuation__thread55__not59 = (swp_freq_calcuation__thread55_192 != arg_vmin);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not59 = icmp ne i32 %192, %vmin*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55__not59_reg <= swp_freq_calcuation__thread55__not59;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55__not59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55__not59_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not60 = xor i1 %113, true*/
begin
swp_freq_calcuation__thread55__not60 = (swp_freq_calcuation_110_113_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not60 = xor i1 %113, true*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55__not60_reg <= swp_freq_calcuation__thread55__not60;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55__not60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55__not60_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %brmerge61 = or i1 %.not59, %.not60*/
begin
swp_freq_calcuation__thread55_brmerge61 = (swp_freq_calcuation__thread55__not59 | swp_freq_calcuation__thread55__not60);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %brmerge61 = or i1 %.not59, %.not60*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55_brmerge61_reg <= swp_freq_calcuation__thread55_brmerge61;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_brmerge61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_brmerge61_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not8 = xor i1 %144, true*/
begin
swp_freq_calcuation__thread55__not8 = (swp_freq_calcuation_141_144_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %.not8 = xor i1 %144, true*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55__not8_reg <= swp_freq_calcuation__thread55__not8;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55__not8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55__not8_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55*/
/*   %brmerge9 = or i1 %brmerge61, %.not8*/
begin
swp_freq_calcuation__thread55_brmerge9 = (swp_freq_calcuation__thread55_brmerge61 | swp_freq_calcuation__thread55__not8);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55*/
/*   %brmerge9 = or i1 %brmerge61, %.not8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_154))
begin
swp_freq_calcuation__thread55_brmerge9_reg <= swp_freq_calcuation__thread55_brmerge9;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_brmerge9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_brmerge9_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %193*/
/*   %194 = icmp sgt i32 %143, %92*/
begin
swp_freq_calcuation_193_194 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(swp_freq_calcuation_90_92_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %193*/
/*   %194 = icmp sgt i32 %143, %92*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155))
begin
swp_freq_calcuation_193_194_reg <= swp_freq_calcuation_193_194;
if (reset == 1'b0 && ^(swp_freq_calcuation_193_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_193_194_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %193*/
/*   %or.cond51 = and i1 %148, %194*/
begin
swp_freq_calcuation_193_or_cond51 = (swp_freq_calcuation_145_148_reg & swp_freq_calcuation_193_194);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %193*/
/*   %or.cond51 = and i1 %148, %194*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155))
begin
swp_freq_calcuation_193_or_cond51_reg <= swp_freq_calcuation_193_or_cond51;
if (reset == 1'b0 && ^(swp_freq_calcuation_193_or_cond51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_193_or_cond51_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %193*/
/*   %195 = icmp sgt i32 %147, %92*/
begin
swp_freq_calcuation_193_195 = ($signed(swp_freq_calcuation_145_147_reg) > $signed(swp_freq_calcuation_90_92_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %193*/
/*   %195 = icmp sgt i32 %147, %92*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155))
begin
swp_freq_calcuation_193_195_reg <= swp_freq_calcuation_193_195;
if (reset == 1'b0 && ^(swp_freq_calcuation_193_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_193_195_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %193*/
/*   %or.cond52 = and i1 %or.cond51, %195*/
begin
swp_freq_calcuation_193_or_cond52 = (swp_freq_calcuation_193_or_cond51 & swp_freq_calcuation_193_195);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %193*/
/*   %or.cond52 = and i1 %or.cond51, %195*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_193_155))
begin
swp_freq_calcuation_193_or_cond52_reg <= swp_freq_calcuation_193_or_cond52;
if (reset == 1'b0 && ^(swp_freq_calcuation_193_or_cond52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_193_or_cond52_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %196*/
/*   %197 = icmp sgt i32 %143, %SIGMIN*/
begin
swp_freq_calcuation_196_197 = ($signed(swp_freq_calcuation_141_143_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %196*/
/*   %197 = icmp sgt i32 %143, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156))
begin
swp_freq_calcuation_196_197_reg <= swp_freq_calcuation_196_197;
if (reset == 1'b0 && ^(swp_freq_calcuation_196_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_196_197_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %196*/
/*   %198 = icmp sgt i32 %147, %SIGMIN*/
begin
swp_freq_calcuation_196_198 = ($signed(swp_freq_calcuation_145_147_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %196*/
/*   %198 = icmp sgt i32 %147, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156))
begin
swp_freq_calcuation_196_198_reg <= swp_freq_calcuation_196_198;
if (reset == 1'b0 && ^(swp_freq_calcuation_196_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_196_198_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %196*/
/*   %or.cond53 = or i1 %197, %198*/
begin
swp_freq_calcuation_196_or_cond53 = (swp_freq_calcuation_196_197 | swp_freq_calcuation_196_198);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %196*/
/*   %or.cond53 = or i1 %197, %198*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_196_156))
begin
swp_freq_calcuation_196_or_cond53_reg <= swp_freq_calcuation_196_or_cond53;
if (reset == 1'b0 && ^(swp_freq_calcuation_196_or_cond53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_196_or_cond53_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %199*/
/*   %200 = icmp slt i32 %143, %147*/
begin
swp_freq_calcuation_199_200 = ($signed(swp_freq_calcuation_141_143_reg) < $signed(swp_freq_calcuation_145_147_reg));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %199*/
/*   %200 = icmp slt i32 %143, %147*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_157))
begin
swp_freq_calcuation_199_200_reg <= swp_freq_calcuation_199_200;
if (reset == 1'b0 && ^(swp_freq_calcuation_199_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_199_200_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_199_201 = swp_freq_calcuation_199_201_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %199*/
/*   %201 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158))
begin
swp_freq_calcuation_199_201_reg <= swp_freq_calcuation_199_201;
if (reset == 1'b0 && ^(swp_freq_calcuation_199_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_199_201_reg"); $finish; end
end
/* swp_freq_calcuation: %199*/
/*   %201 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158))
begin
swp_freq_calcuation_199_201_reg <= swp_freq_calcuation_199_201;
if (reset == 1'b0 && ^(swp_freq_calcuation_199_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_199_201_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %199*/
/*   %202 = add nsw i32 %201, %afcex_freq*/
begin
swp_freq_calcuation_199_202 = (swp_freq_calcuation_199_201 + arg_afcex_freq);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %199*/
/*   %202 = add nsw i32 %201, %afcex_freq*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_199_158))
begin
swp_freq_calcuation_199_202_reg <= swp_freq_calcuation_199_202;
if (reset == 1'b0 && ^(swp_freq_calcuation_199_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_199_202_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %203*/
/*   %204 = add nsw i32 %202, %swp_ofs*/
begin
swp_freq_calcuation_203_204 = (swp_freq_calcuation_199_202_reg + arg_swp_ofs);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %203*/
/*   %204 = add nsw i32 %202, %swp_ofs*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
swp_freq_calcuation_203_204_reg <= swp_freq_calcuation_203_204;
if (reset == 1'b0 && ^(swp_freq_calcuation_203_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_203_204_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %203*/
/*   %205 = trunc i32 %143 to i8*/
begin
swp_freq_calcuation_203_205 = swp_freq_calcuation_141_143_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %203*/
/*   %205 = trunc i32 %143 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
swp_freq_calcuation_203_205_reg <= swp_freq_calcuation_203_205;
if (reset == 1'b0 && ^(swp_freq_calcuation_203_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_203_205_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %206*/
/*   %207 = shl i32 %swp_ofs, 1*/
begin
swp_freq_calcuation_206_207 = (arg_swp_ofs <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %206*/
/*   %207 = shl i32 %swp_ofs, 1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
swp_freq_calcuation_206_207_reg <= swp_freq_calcuation_206_207;
if (reset == 1'b0 && ^(swp_freq_calcuation_206_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_206_207_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %206*/
/*   %208 = add nsw i32 %207, %202*/
begin
swp_freq_calcuation_206_208 = (swp_freq_calcuation_206_207 + swp_freq_calcuation_199_202_reg);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %206*/
/*   %208 = add nsw i32 %207, %202*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
swp_freq_calcuation_206_208_reg <= swp_freq_calcuation_206_208;
if (reset == 1'b0 && ^(swp_freq_calcuation_206_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_206_208_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %206*/
/*   %209 = trunc i32 %147 to i8*/
begin
swp_freq_calcuation_206_209 = swp_freq_calcuation_145_147_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %206*/
/*   %209 = trunc i32 %147 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
swp_freq_calcuation_206_209_reg <= swp_freq_calcuation_206_209;
if (reset == 1'b0 && ^(swp_freq_calcuation_206_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_206_209_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %210 = or i32 %vmin, %vmax*/
begin
swp_freq_calcuation__thread55_thread_210 = (arg_vmin | arg_vmax);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %210 = or i32 %vmin, %vmax*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163))
begin
swp_freq_calcuation__thread55_thread_210_reg <= swp_freq_calcuation__thread55_thread_210;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_thread_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_thread_210_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %211 = icmp eq i32 %210, 0*/
begin
swp_freq_calcuation__thread55_thread_211 = (swp_freq_calcuation__thread55_thread_210 == 32'd0);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %211 = icmp eq i32 %210, 0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163))
begin
swp_freq_calcuation__thread55_thread_211_reg <= swp_freq_calcuation__thread55_thread_211;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_thread_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_thread_211_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %212 = icmp sgt i32 %92, %SIGMIN*/
begin
swp_freq_calcuation__thread55_thread_212 = ($signed(swp_freq_calcuation_90_92_reg) > $signed(arg_SIGMIN));
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %212 = icmp sgt i32 %92, %SIGMIN*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163))
begin
swp_freq_calcuation__thread55_thread_212_reg <= swp_freq_calcuation__thread55_thread_212;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_thread_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_thread_212_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %or.cond62 = and i1 %211, %212*/
begin
swp_freq_calcuation__thread55_thread_or_cond62 = (swp_freq_calcuation__thread55_thread_211 & swp_freq_calcuation__thread55_thread_212);
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread55.thread*/
/*   %or.cond62 = and i1 %211, %212*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163))
begin
swp_freq_calcuation__thread55_thread_or_cond62_reg <= swp_freq_calcuation__thread55_thread_or_cond62;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread55_thread_or_cond62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread55_thread_or_cond62_reg"); $finish; end
end
end
always @(*) begin
swp_freq_calcuation_213_214 = swp_freq_calcuation_213_214_stage0_reg;
end
always @(posedge clk) begin
/* swp_freq_calcuation: %213*/
/*   %214 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165))
begin
swp_freq_calcuation_213_214_reg <= swp_freq_calcuation_213_214;
if (reset == 1'b0 && ^(swp_freq_calcuation_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_213_214_reg"); $finish; end
end
/* swp_freq_calcuation: %213*/
/*   %214 = mul nsw i32 %fOSC, 1000*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165))
begin
swp_freq_calcuation_213_214_reg <= swp_freq_calcuation_213_214;
if (reset == 1'b0 && ^(swp_freq_calcuation_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_213_214_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %213*/
/*   %215 = trunc i32 %92 to i8*/
begin
swp_freq_calcuation_213_215 = swp_freq_calcuation_90_92_reg[7:0];
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %213*/
/*   %215 = trunc i32 %92 to i8*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
swp_freq_calcuation_213_215_reg <= swp_freq_calcuation_213_215;
if (reset == 1'b0 && ^(swp_freq_calcuation_213_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_213_215_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_16_19;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_22_23 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_30_32;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_69) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_56_57_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_71) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_59_61_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_63_or_cond56 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_65_68 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_69_or_cond32 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_75_or_cond33 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_85) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_78_81_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_87) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_84_85_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_87_or_cond34 == 1'd1)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_105_108;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_120_123;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_137_139;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_138) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_162_163_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_140) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_165_167_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_151) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_183_186_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_153) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_189_190_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_160) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_203_204_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_162) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_206_208_reg;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_thread_or_cond62 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0 = -32'd1;
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
else /* if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165) & (memory_controller_waitrequest == 1'd0))) */
begin
swp_freq_calcuation__thread1_swp_freq_0 = swp_freq_calcuation_213_214;
end
end
always @(posedge clk) begin
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_43) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_22_45) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_22_23 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_51) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_69) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_71) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_63_72) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_63_or_cond56 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_76) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_65_68 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_80) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_69_or_cond32 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_75_81) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_75_or_cond33 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_85) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_87) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB_87_88) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_87_or_cond34 == 1'd1)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_102) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_109) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_120) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_138) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_140) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_151) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_153) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_160) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_162) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if ((((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread55_thread_163) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation__thread55_thread_or_cond62 == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   %swp_freq.0 = phi i32 [ %19, %16 ], [ %32, %30 ], [ %57, %56 ], [ %61, %59 ], [ %81, %82 ], [ %85, %84 ], [ %108, %105 ], [ %123, %120 ], [ %139, %137 ], [ %163, %162 ], [ %167, %165 ], [ %186, %187 ], [ %190, %189 ], [ %204, %203 ], [ %208, %206 ], [ %214, %213 ], [ -1, %75 ], [ -1, %69 ], [ -1, %65 ], [ -1, %63 ], [ -1, %.thread55.thread ], [ -1, %87 ], [ -1, %22 ]*/
if (((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_165) & (memory_controller_waitrequest == 1'd0)))
begin
swp_freq_calcuation__thread1_swp_freq_0_reg <= swp_freq_calcuation__thread1_swp_freq_0;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation__thread1_swp_freq_0_reg"); $finish; end
end
end
always @(*) begin
/* swp_freq_calcuation: %0*/
/*   %1 = srem i32 %i, 2*/
begin
swp_freq_calcuation_signed_modulus_32_0_op0 = arg_i;
end
end
always @(*) begin
/* swp_freq_calcuation: %0*/
/*   %1 = srem i32 %i, 2*/
if (reset) begin swp_freq_calcuation_signed_modulus_32_0_op1 = 0; end
begin
swp_freq_calcuation_signed_modulus_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_swp_freq_calcuation_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_swp_freq_calcuation_0_1_out = lpm_divide_swp_freq_calcuation_0_1_temp_out;
end
always @(*) begin
swp_freq_calcuation_signed_modulus_32_0 = lpm_divide_swp_freq_calcuation_0_1_out;
end
always @(*) begin
lpm_mult_swp_freq_calcuation_16_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %16*/
/*   %17 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_16_17_en == 1'd1))
begin
swp_freq_calcuation_16_17_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_30_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %30*/
/*   %31 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_30_31_en == 1'd1))
begin
swp_freq_calcuation_30_31_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_52_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %52*/
/*   %54 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_52_54_en == 1'd1))
begin
swp_freq_calcuation_52_54_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_78_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %78*/
/*   %80 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_78_80_en == 1'd1))
begin
swp_freq_calcuation_78_80_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_105_106_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %105*/
/*   %106 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_105_106_en == 1'd1))
begin
swp_freq_calcuation_105_106_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_120_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %120*/
/*   %121 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_120_121_en == 1'd1))
begin
swp_freq_calcuation_120_121_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_137_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %137*/
/*   %138 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_137_138_en == 1'd1))
begin
swp_freq_calcuation_137_138_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_158_160_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %158*/
/*   %160 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_158_160_en == 1'd1))
begin
swp_freq_calcuation_158_160_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_183_185_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %183*/
/*   %185 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_183_185_en == 1'd1))
begin
swp_freq_calcuation_183_185_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_199_201_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %199*/
/*   %201 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_199_201_en == 1'd1))
begin
swp_freq_calcuation_199_201_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(*) begin
lpm_mult_swp_freq_calcuation_213_214_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* swp_freq_calcuation: %213*/
/*   %214 = mul nsw i32 %fOSC, 1000*/
if ((lpm_mult_swp_freq_calcuation_213_214_en == 1'd1))
begin
swp_freq_calcuation_213_214_stage0_reg <= (arg_fOSC * 32'd1000);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   ret i32 %swp_freq.0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread1_166))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %16*/
/*   store i8 %20, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %30*/
/*   store i8 %33, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %56*/
/*   store i8 %58, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %59*/
/*   store i8 %62, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %82*/
/*   store i8 %83, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %84*/
/*   store i8 %86, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %105*/
/*   store i8 %109, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %120*/
/*   store i8 %124, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %137*/
/*   store i8 %140, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %162*/
/*   store i8 %164, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %165*/
/*   store i8 %168, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %187*/
/*   store i8 %188, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %189*/
/*   store i8 %191, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %203*/
/*   store i8 %205, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %206*/
/*   store i8 %209, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
memory_controller_enable_a = 1'd1;
end
/* swp_freq_calcuation: %213*/
/*   store i8 %215, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35))
begin
memory_controller_address_a = swp_freq_calcuation_4_7;
end
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39))
begin
memory_controller_address_a = swp_freq_calcuation_10_11;
end
/* swp_freq_calcuation: %16*/
/*   store i8 %20, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47))
begin
memory_controller_address_a = swp_freq_calcuation_24_25;
end
/* swp_freq_calcuation: %30*/
/*   store i8 %33, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54))
begin
memory_controller_address_a = swp_freq_calcuation_35_36;
end
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58))
begin
memory_controller_address_a = swp_freq_calcuation_39_40;
end
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62))
begin
memory_controller_address_a = swp_freq_calcuation_43_44;
end
/* swp_freq_calcuation: %56*/
/*   store i8 %58, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %59*/
/*   store i8 %62, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74))
begin
memory_controller_address_a = swp_freq_calcuation_65_66;
end
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78))
begin
memory_controller_address_a = swp_freq_calcuation_69_70;
end
/* swp_freq_calcuation: %82*/
/*   store i8 %83, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %84*/
/*   store i8 %86, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90))
begin
memory_controller_address_a = swp_freq_calcuation_90_91;
end
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94))
begin
memory_controller_address_a = swp_freq_calcuation_94_95;
end
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98))
begin
memory_controller_address_a = swp_freq_calcuation_98_99;
end
/* swp_freq_calcuation: %105*/
/*   store i8 %109, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105))
begin
memory_controller_address_a = swp_freq_calcuation_114_115;
end
/* swp_freq_calcuation: %120*/
/*   store i8 %124, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112))
begin
memory_controller_address_a = swp_freq_calcuation_126_127;
end
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116))
begin
memory_controller_address_a = swp_freq_calcuation_130_131;
end
/* swp_freq_calcuation: %137*/
/*   store i8 %140, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123))
begin
memory_controller_address_a = swp_freq_calcuation_141_142;
end
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127))
begin
memory_controller_address_a = swp_freq_calcuation_145_146;
end
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131))
begin
memory_controller_address_a = swp_freq_calcuation_149_150;
end
/* swp_freq_calcuation: %162*/
/*   store i8 %164, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %165*/
/*   store i8 %168, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144))
begin
memory_controller_address_a = swp_freq_calcuation_172_173;
end
/* swp_freq_calcuation: %187*/
/*   store i8 %188, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %189*/
/*   store i8 %191, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %203*/
/*   store i8 %205, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %206*/
/*   store i8 %209, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
memory_controller_address_a = arg_SIG1;
end
/* swp_freq_calcuation: %213*/
/*   store i8 %215, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
memory_controller_address_a = arg_SIG1;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %16*/
/*   store i8 %20, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %30*/
/*   store i8 %33, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %56*/
/*   store i8 %58, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %59*/
/*   store i8 %62, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %82*/
/*   store i8 %83, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %84*/
/*   store i8 %86, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %105*/
/*   store i8 %109, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %120*/
/*   store i8 %124, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %137*/
/*   store i8 %140, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %162*/
/*   store i8 %164, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %165*/
/*   store i8 %168, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144))
begin
memory_controller_write_enable_a = 1'd0;
end
/* swp_freq_calcuation: %187*/
/*   store i8 %188, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %189*/
/*   store i8 %191, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %203*/
/*   store i8 %205, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %206*/
/*   store i8 %209, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
memory_controller_write_enable_a = 1'd1;
end
/* swp_freq_calcuation: %213*/
/*   store i8 %215, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* swp_freq_calcuation: %16*/
/*   store i8 %20, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
memory_controller_in_a = swp_freq_calcuation_16_20;
end
/* swp_freq_calcuation: %30*/
/*   store i8 %33, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
memory_controller_in_a = swp_freq_calcuation_30_33;
end
/* swp_freq_calcuation: %56*/
/*   store i8 %58, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
memory_controller_in_a = swp_freq_calcuation_56_58;
end
/* swp_freq_calcuation: %59*/
/*   store i8 %62, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
memory_controller_in_a = swp_freq_calcuation_59_62;
end
/* swp_freq_calcuation: %82*/
/*   store i8 %83, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
memory_controller_in_a = swp_freq_calcuation_82_83;
end
/* swp_freq_calcuation: %84*/
/*   store i8 %86, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
memory_controller_in_a = swp_freq_calcuation_84_86;
end
/* swp_freq_calcuation: %105*/
/*   store i8 %109, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
memory_controller_in_a = swp_freq_calcuation_105_109;
end
/* swp_freq_calcuation: %120*/
/*   store i8 %124, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
memory_controller_in_a = swp_freq_calcuation_120_124;
end
/* swp_freq_calcuation: %137*/
/*   store i8 %140, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
memory_controller_in_a = swp_freq_calcuation_137_140;
end
/* swp_freq_calcuation: %162*/
/*   store i8 %164, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
memory_controller_in_a = swp_freq_calcuation_162_164;
end
/* swp_freq_calcuation: %165*/
/*   store i8 %168, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
memory_controller_in_a = swp_freq_calcuation_165_168;
end
/* swp_freq_calcuation: %187*/
/*   store i8 %188, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
memory_controller_in_a = swp_freq_calcuation_187_188;
end
/* swp_freq_calcuation: %189*/
/*   store i8 %191, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
memory_controller_in_a = swp_freq_calcuation_189_191;
end
/* swp_freq_calcuation: %203*/
/*   store i8 %205, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
memory_controller_in_a = swp_freq_calcuation_203_205;
end
/* swp_freq_calcuation: %206*/
/*   store i8 %209, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
memory_controller_in_a = swp_freq_calcuation_206_209;
end
/* swp_freq_calcuation: %213*/
/*   store i8 %215, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
memory_controller_in_a = swp_freq_calcuation_213_215;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* swp_freq_calcuation: %4*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_4_35))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %10*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_10_39))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %16*/
/*   store i8 %20, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_16_42))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_24_47))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %30*/
/*   store i8 %33, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_30_50))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %35*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_35_54))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_39_58))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %43*/
/*   %45 = load i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_43_62))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %56*/
/*   store i8 %58, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_56_68))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %59*/
/*   store i8 %62, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_59_70))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_65_74))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_69_78))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %82*/
/*   store i8 %83, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_82_84))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %84*/
/*   store i8 %86, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_84_86))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %90*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_90_90))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %94*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_94_94))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %98*/
/*   %100 = load i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_98_98))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %105*/
/*   store i8 %109, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_105_101))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %114*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_114_105))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %120*/
/*   store i8 %124, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_120_108))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %126*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_126_112))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_130_116))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %137*/
/*   store i8 %140, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_137_119))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %141*/
/*   %143 = load i32* %142, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_141_123))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %145*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_145_127))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %149*/
/*   %151 = load i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_149_131))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %162*/
/*   store i8 %164, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_162_137))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %165*/
/*   store i8 %168, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_165_139))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %172*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_172_144))
begin
memory_controller_size_a = 2'd2;
end
/* swp_freq_calcuation: %187*/
/*   store i8 %188, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_187_150))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %189*/
/*   store i8 %191, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_189_152))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %203*/
/*   store i8 %205, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_203_159))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %206*/
/*   store i8 %209, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_206_161))
begin
memory_controller_size_a = 2'd0;
end
/* swp_freq_calcuation: %213*/
/*   store i8 %215, i8* %SIG1, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB_213_164))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* swp_freq_calcuation: %.thread1*/
/*   ret i32 %swp_freq.0*/
if ((cur_state == LEGUP_F_swp_freq_calcuation_BB__thread1_166))
begin
return_val <= swp_freq_calcuation__thread1_swp_freq_0_reg;
if (reset == 1'b0 && ^(swp_freq_calcuation__thread1_swp_freq_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  swp_freq_calcuation_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_arg_state;
reg [31:0] swp_freq_calcuation_arg_i;
reg [31:0] swp_freq_calcuation_arg_v;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_arg_V;
reg [31:0] swp_freq_calcuation_arg_vmax;
reg [31:0] swp_freq_calcuation_arg_vmin;
reg [31:0] swp_freq_calcuation_arg_SIGMIN;
reg [31:0] swp_freq_calcuation_arg_fOSC;
reg [31:0] swp_freq_calcuation_arg_afcex_freq;
reg [31:0] swp_freq_calcuation_arg_swp_ofs;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_arg_SIG1;
wire  swp_freq_calcuation_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_memory_controller_address_a;
wire  swp_freq_calcuation_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] swp_freq_calcuation_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] swp_freq_calcuation_memory_controller_out_a;
wire [1:0] swp_freq_calcuation_memory_controller_size_a;
wire  swp_freq_calcuation_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] swp_freq_calcuation_memory_controller_address_b;
wire  swp_freq_calcuation_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] swp_freq_calcuation_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] swp_freq_calcuation_memory_controller_out_b;
wire [1:0] swp_freq_calcuation_memory_controller_size_b;
reg  swp_freq_calcuation_memory_controller_waitrequest;
wire  swp_freq_calcuation_finish;
reg  swp_freq_calcuation_finish_final;
wire [31:0] swp_freq_calcuation_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


swp_freq_calcuation swp_freq_calcuation_inst (
	.memory_controller_enable_a (swp_freq_calcuation_memory_controller_enable_a),
	.memory_controller_address_a (swp_freq_calcuation_memory_controller_address_a),
	.memory_controller_write_enable_a (swp_freq_calcuation_memory_controller_write_enable_a),
	.memory_controller_in_a (swp_freq_calcuation_memory_controller_in_a),
	.memory_controller_size_a (swp_freq_calcuation_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (swp_freq_calcuation_memory_controller_enable_b),
	.memory_controller_address_b (swp_freq_calcuation_memory_controller_address_b),
	.memory_controller_write_enable_b (swp_freq_calcuation_memory_controller_write_enable_b),
	.memory_controller_in_b (swp_freq_calcuation_memory_controller_in_b),
	.memory_controller_size_b (swp_freq_calcuation_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (swp_freq_calcuation_start),
	.finish (swp_freq_calcuation_finish),
	.return_val (swp_freq_calcuation_return_val),
	.arg_state (swp_freq_calcuation_arg_state),
	.arg_i (swp_freq_calcuation_arg_i),
	.arg_v (swp_freq_calcuation_arg_v),
	.arg_V (swp_freq_calcuation_arg_V),
	.arg_vmax (swp_freq_calcuation_arg_vmax),
	.arg_vmin (swp_freq_calcuation_arg_vmin),
	.arg_SIGMIN (swp_freq_calcuation_arg_SIGMIN),
	.arg_fOSC (swp_freq_calcuation_arg_fOSC),
	.arg_afcex_freq (swp_freq_calcuation_arg_afcex_freq),
	.arg_swp_ofs (swp_freq_calcuation_arg_swp_ofs),
	.arg_SIG1 (swp_freq_calcuation_arg_SIG1)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (swp_freq_calcuation_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
begin
main_0_1 = swp_freq_calcuation_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
swp_freq_calcuation_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_state <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_i <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_i"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_v <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_v"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_V <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_V"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_vmax <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_vmax"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_vmin <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_vmin"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_SIGMIN <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_SIGMIN"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_fOSC <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_fOSC"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_afcex_freq <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_afcex_freq"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_swp_ofs <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_swp_ofs"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
swp_freq_calcuation_arg_SIG1 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to swp_freq_calcuation_arg_SIG1"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
begin
swp_freq_calcuation_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
begin
swp_freq_calcuation_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
swp_freq_calcuation_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
swp_freq_calcuation_finish_final = swp_freq_calcuation_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = swp_freq_calcuation_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = swp_freq_calcuation_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = swp_freq_calcuation_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = swp_freq_calcuation_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = swp_freq_calcuation_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = swp_freq_calcuation_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = swp_freq_calcuation_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = swp_freq_calcuation_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = swp_freq_calcuation_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = swp_freq_calcuation_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = swp_freq_calcuation_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = swp_freq_calcuation_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = swp_freq_calcuation_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = swp_freq_calcuation_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = swp_freq_calcuation_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = swp_freq_calcuation_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = swp_freq_calcuation_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = swp_freq_calcuation_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = swp_freq_calcuation_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @swp_freq_calcuation(%struct.mb86a16_state* undef, i32 undef, i32 undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i8* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = swp_freq_calcuation_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
