//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:28 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module filter_slice_planar
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_ctx,
	arg_arg,
	arg_jobnr,
	arg_nb_jobs
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader_40 = 8'd40;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_41 = 8'd41;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_42 = 8'd42;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_43 = 8'd43;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_44 = 8'd44;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_45 = 8'd45;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_46 = 8'd46;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph12_47 = 8'd47;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_46_48 = 8'd48;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_46_49 = 8'd49;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph_50 = 8'd50;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph_51 = 8'd51;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph_52 = 8'd52;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph_53 = 8'd53;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph_54 = 8'd54;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55 = 8'd55;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56 = 8'd56;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_57 = 8'd57;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_58 = 8'd58;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_59 = 8'd59;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_60 = 8'd60;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_61 = 8'd61;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_62 = 8'd62;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_63 = 8'd63;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_64 = 8'd64;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_65 = 8'd65;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_66 = 8'd66;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_67 = 8'd67;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_68 = 8'd68;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_69 = 8'd69;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_70 = 8'd70;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_71 = 8'd71;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_72 = 8'd72;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_73 = 8'd73;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_74 = 8'd74;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_75 = 8'd75;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge298_76 = 8'd76;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_77 = 8'd77;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_78 = 8'd78;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_79 = 8'd79;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_80 = 8'd80;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_81 = 8'd81;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_82 = 8'd82;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_83 = 8'd83;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_84 = 8'd84;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_85 = 8'd85;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_86 = 8'd86;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_87 = 8'd87;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_88 = 8'd88;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_89 = 8'd89;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_90 = 8'd90;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_91 = 8'd91;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_92 = 8'd92;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge297_93 = 8'd93;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94 = 8'd94;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95 = 8'd95;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_filter_slice_planar_BB_70_97 = 8'd97;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98 = 8'd98;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99 = 8'd99;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100 = 8'd100;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101 = 8'd101;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102 = 8'd102;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103 = 8'd103;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104 = 8'd104;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105 = 8'd105;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_106 = 8'd106;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__preheader13_107 = 8'd107;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph15_108 = 8'd108;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph15_109 = 8'd109;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph15_110 = 8'd110;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph15_111 = 8'd111;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__lr_ph15_112 = 8'd112;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113 = 8'd113;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114 = 8'd114;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_115 = 8'd115;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_116 = 8'd116;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_117 = 8'd117;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_118 = 8'd118;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_119 = 8'd119;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_120 = 8'd120;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_121 = 8'd121;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_122 = 8'd122;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_123 = 8'd123;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_124 = 8'd124;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_125 = 8'd125;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_126 = 8'd126;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_127 = 8'd127;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_128 = 8'd128;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_129 = 8'd129;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_130 = 8'd130;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_131 = 8'd131;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_132 = 8'd132;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_133 = 8'd133;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge300_134 = 8'd134;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_135 = 8'd135;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_136 = 8'd136;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_137 = 8'd137;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_138 = 8'd138;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_139 = 8'd139;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_140 = 8'd140;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_141 = 8'd141;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_142 = 8'd142;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_143 = 8'd143;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_144 = 8'd144;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_145 = 8'd145;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_146 = 8'd146;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_147 = 8'd147;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_148 = 8'd148;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_149 = 8'd149;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_150 = 8'd150;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge299_151 = 8'd151;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152 = 8'd152;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153 = 8'd153;
parameter [7:0] LEGUP_F_filter_slice_planar_BB___crit_edge16_154 = 8'd154;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155 = 8'd155;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156 = 8'd156;
parameter [7:0] LEGUP_F_filter_slice_planar_BB__loopexit_157 = 8'd157;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ctx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_arg;
input [31:0] arg_jobnr;
input [31:0] arg_nb_jobs;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_7_reg;
reg  filter_slice_planar_0_8;
reg  filter_slice_planar_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_9_reg;
reg [31:0] filter_slice_planar_0_10;
reg [31:0] filter_slice_planar_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_12_reg;
reg [31:0] filter_slice_planar_0_13;
reg [31:0] filter_slice_planar_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_14_reg;
reg [31:0] filter_slice_planar_0_15;
reg [31:0] filter_slice_planar_0_15_reg;
reg [31:0] filter_slice_planar_0_16;
reg [31:0] filter_slice_planar_0_16_reg;
reg [31:0] filter_slice_planar_0_17;
reg [31:0] filter_slice_planar_0_17_reg;
reg [31:0] filter_slice_planar_0_18;
reg [31:0] filter_slice_planar_0_18_reg;
reg [31:0] filter_slice_planar_0_19;
reg [31:0] filter_slice_planar_0_19_reg;
reg [31:0] filter_slice_planar_0_20;
reg [31:0] filter_slice_planar_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_0_21_reg;
reg [31:0] filter_slice_planar_0_22;
reg [31:0] filter_slice_planar_0_22_reg;
reg  filter_slice_planar_0_23;
reg  filter_slice_planar_0_23_reg;
reg  filter_slice_planar_0_24;
reg  filter_slice_planar_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_31_reg;
reg [31:0] filter_slice_planar__lr_ph12_32;
reg [31:0] filter_slice_planar__lr_ph12_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_39_reg;
reg [31:0] filter_slice_planar__lr_ph12_40;
reg [31:0] filter_slice_planar__lr_ph12_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_41_reg;
reg [31:0] filter_slice_planar__lr_ph12_42;
reg [31:0] filter_slice_planar__lr_ph12_42_reg;
reg  filter_slice_planar__lr_ph12_43;
reg  filter_slice_planar__lr_ph12_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph12_44_reg;
reg  filter_slice_planar__lr_ph12__not;
reg  filter_slice_planar__lr_ph12__not_reg;
reg  filter_slice_planar__lr_ph12_45;
reg  filter_slice_planar__lr_ph12_45_reg;
reg  filter_slice_planar__lr_ph12_or_cond;
reg  filter_slice_planar__lr_ph12_or_cond_reg;
reg [31:0] filter_slice_planar__lr_ph12_tmp109;
reg [31:0] filter_slice_planar__lr_ph12_tmp109_reg;
reg  filter_slice_planar__lr_ph12_tmp;
reg  filter_slice_planar__lr_ph12_tmp_reg;
reg [31:0] filter_slice_planar__lr_ph12_smax;
reg [31:0] filter_slice_planar__lr_ph12_smax_reg;
reg [31:0] filter_slice_planar_46_indvar;
reg [31:0] filter_slice_planar_46_indvar_reg;
reg [31:0] filter_slice_planar_46_tmp111289;
reg [31:0] filter_slice_planar_46_tmp111289_reg;
reg [31:0] filter_slice_planar_46_tmp113;
reg [31:0] filter_slice_planar_46_tmp113_reg;
reg [31:0] filter_slice_planar_46_tmp118;
reg [31:0] filter_slice_planar_46_tmp118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph_48_reg;
reg [31:0] filter_slice_planar___crit_edge298_x_010_us;
reg [31:0] filter_slice_planar___crit_edge298_x_010_us_reg;
reg [31:0] filter_slice_planar___crit_edge298_tmp141;
reg [31:0] filter_slice_planar___crit_edge298_tmp141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_scevgep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_scevgep81_reg;
reg [31:0] filter_slice_planar___crit_edge298_tmp143;
reg [31:0] filter_slice_planar___crit_edge298_tmp143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_scevgep76_reg;
reg [31:0] filter_slice_planar___crit_edge298_49;
reg [31:0] filter_slice_planar___crit_edge298_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_50_reg;
reg [31:0] filter_slice_planar___crit_edge298_51;
reg [31:0] filter_slice_planar___crit_edge298_51_reg;
reg [31:0] filter_slice_planar___crit_edge298_52;
reg [31:0] filter_slice_planar___crit_edge298_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_53_reg;
reg [31:0] filter_slice_planar___crit_edge298_54;
reg [31:0] filter_slice_planar___crit_edge298_54_reg;
reg [31:0] filter_slice_planar___crit_edge298_55;
reg [31:0] filter_slice_planar___crit_edge298_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge298_56_reg;
reg [31:0] filter_slice_planar___crit_edge298_57;
reg [31:0] filter_slice_planar___crit_edge298_57_reg;
reg [31:0] filter_slice_planar___crit_edge298_58;
reg [31:0] filter_slice_planar___crit_edge298_58_reg;
reg [31:0] filter_slice_planar___crit_edge298_59;
reg [31:0] filter_slice_planar___crit_edge298_59_reg;
reg  filter_slice_planar___crit_edge298_exitcond;
reg  filter_slice_planar___crit_edge298_exitcond_reg;
reg [31:0] filter_slice_planar___crit_edge297_x_010;
reg [31:0] filter_slice_planar___crit_edge297_x_010_reg;
reg [31:0] filter_slice_planar___crit_edge297_tmp114;
reg [31:0] filter_slice_planar___crit_edge297_tmp114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_scevgep108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_scevgep108_reg;
reg [31:0] filter_slice_planar___crit_edge297_tmp119;
reg [31:0] filter_slice_planar___crit_edge297_tmp119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_scevgep104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_scevgep104_reg;
reg [31:0] filter_slice_planar___crit_edge297_60;
reg [31:0] filter_slice_planar___crit_edge297_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_61_reg;
reg [31:0] filter_slice_planar___crit_edge297_62;
reg [31:0] filter_slice_planar___crit_edge297_62_reg;
reg [31:0] filter_slice_planar___crit_edge297_63;
reg [31:0] filter_slice_planar___crit_edge297_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_64_reg;
reg [31:0] filter_slice_planar___crit_edge297_65;
reg [31:0] filter_slice_planar___crit_edge297_65_reg;
reg [31:0] filter_slice_planar___crit_edge297_66;
reg [31:0] filter_slice_planar___crit_edge297_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge297_67_reg;
reg [31:0] filter_slice_planar___crit_edge297_68;
reg [31:0] filter_slice_planar___crit_edge297_68_reg;
reg [31:0] filter_slice_planar___crit_edge297_69;
reg [31:0] filter_slice_planar___crit_edge297_69_reg;
reg  filter_slice_planar___crit_edge297_exitcond84;
reg  filter_slice_planar___crit_edge297_exitcond84_reg;
reg [31:0] filter_slice_planar___crit_edge_indvar_next;
reg [31:0] filter_slice_planar___crit_edge_indvar_next_reg;
reg  filter_slice_planar___crit_edge_exitcond110;
reg  filter_slice_planar___crit_edge_exitcond110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_80_reg;
reg [31:0] filter_slice_planar__preheader13_lr_ph_81;
reg [31:0] filter_slice_planar__preheader13_lr_ph_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_82_reg;
reg [31:0] filter_slice_planar__preheader13_lr_ph_83;
reg [31:0] filter_slice_planar__preheader13_lr_ph_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_87_reg;
reg [31:0] filter_slice_planar__preheader13_lr_ph_88;
reg [31:0] filter_slice_planar__preheader13_lr_ph_88_reg;
reg  filter_slice_planar__preheader13_lr_ph_89;
reg  filter_slice_planar__preheader13_lr_ph_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__preheader13_lr_ph_90_reg;
reg  filter_slice_planar__preheader13_lr_ph__not8;
reg  filter_slice_planar__preheader13_lr_ph__not8_reg;
reg  filter_slice_planar__preheader13_lr_ph_91;
reg  filter_slice_planar__preheader13_lr_ph_91_reg;
reg  filter_slice_planar__preheader13_lr_ph_or_cond9;
reg  filter_slice_planar__preheader13_lr_ph_or_cond9_reg;
reg [31:0] filter_slice_planar__preheader13_lr_ph_tmp235;
reg [31:0] filter_slice_planar__preheader13_lr_ph_tmp235_reg;
reg  filter_slice_planar__preheader13_lr_ph_tmp163;
reg  filter_slice_planar__preheader13_lr_ph_tmp163_reg;
reg [31:0] filter_slice_planar__preheader13_lr_ph_smax164;
reg [31:0] filter_slice_planar__preheader13_lr_ph_smax164_reg;
reg [31:0] filter_slice_planar__preheader13_indvar166;
reg [31:0] filter_slice_planar__preheader13_indvar166_reg;
reg [31:0] filter_slice_planar__preheader13_tmp237301;
reg [31:0] filter_slice_planar__preheader13_tmp237301_reg;
reg [31:0] filter_slice_planar__preheader13_tmp239;
reg [31:0] filter_slice_planar__preheader13_tmp239_reg;
reg [31:0] filter_slice_planar__preheader13_tmp244;
reg [31:0] filter_slice_planar__preheader13_tmp244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph15_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph15_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph15_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar__lr_ph15_93_reg;
reg [31:0] filter_slice_planar___crit_edge300_x_114_us;
reg [31:0] filter_slice_planar___crit_edge300_x_114_us_reg;
reg [31:0] filter_slice_planar___crit_edge300_tmp267;
reg [31:0] filter_slice_planar___crit_edge300_tmp267_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_scevgep207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_scevgep207_reg;
reg [31:0] filter_slice_planar___crit_edge300_tmp269;
reg [31:0] filter_slice_planar___crit_edge300_tmp269_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_scevgep202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_scevgep202_reg;
reg [31:0] filter_slice_planar___crit_edge300_94;
reg [31:0] filter_slice_planar___crit_edge300_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_95_reg;
reg [31:0] filter_slice_planar___crit_edge300_96;
reg [31:0] filter_slice_planar___crit_edge300_96_reg;
reg [31:0] filter_slice_planar___crit_edge300_97;
reg [31:0] filter_slice_planar___crit_edge300_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_98_reg;
reg [31:0] filter_slice_planar___crit_edge300_99;
reg [31:0] filter_slice_planar___crit_edge300_99_reg;
reg [31:0] filter_slice_planar___crit_edge300_100;
reg [31:0] filter_slice_planar___crit_edge300_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge300_101_reg;
reg [31:0] filter_slice_planar___crit_edge300_102;
reg [31:0] filter_slice_planar___crit_edge300_102_reg;
reg [31:0] filter_slice_planar___crit_edge300_103;
reg [31:0] filter_slice_planar___crit_edge300_103_reg;
reg [31:0] filter_slice_planar___crit_edge300_104;
reg [31:0] filter_slice_planar___crit_edge300_104_reg;
reg  filter_slice_planar___crit_edge300_exitcond165;
reg  filter_slice_planar___crit_edge300_exitcond165_reg;
reg [31:0] filter_slice_planar___crit_edge299_x_114;
reg [31:0] filter_slice_planar___crit_edge299_x_114_reg;
reg [31:0] filter_slice_planar___crit_edge299_tmp240;
reg [31:0] filter_slice_planar___crit_edge299_tmp240_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_scevgep234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_scevgep234_reg;
reg [31:0] filter_slice_planar___crit_edge299_tmp245;
reg [31:0] filter_slice_planar___crit_edge299_tmp245_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_scevgep230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_scevgep230_reg;
reg [31:0] filter_slice_planar___crit_edge299_105;
reg [31:0] filter_slice_planar___crit_edge299_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_106_reg;
reg [31:0] filter_slice_planar___crit_edge299_107;
reg [31:0] filter_slice_planar___crit_edge299_107_reg;
reg [31:0] filter_slice_planar___crit_edge299_108;
reg [31:0] filter_slice_planar___crit_edge299_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_109_reg;
reg [31:0] filter_slice_planar___crit_edge299_110;
reg [31:0] filter_slice_planar___crit_edge299_110_reg;
reg [31:0] filter_slice_planar___crit_edge299_111;
reg [31:0] filter_slice_planar___crit_edge299_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar___crit_edge299_112_reg;
reg [31:0] filter_slice_planar___crit_edge299_113;
reg [31:0] filter_slice_planar___crit_edge299_113_reg;
reg [31:0] filter_slice_planar___crit_edge299_114;
reg [31:0] filter_slice_planar___crit_edge299_114_reg;
reg  filter_slice_planar___crit_edge299_exitcond210;
reg  filter_slice_planar___crit_edge299_exitcond210_reg;
reg [31:0] filter_slice_planar___crit_edge16_indvar_next167;
reg [31:0] filter_slice_planar___crit_edge16_indvar_next167_reg;
reg  filter_slice_planar___crit_edge16_exitcond236;
reg  filter_slice_planar___crit_edge16_exitcond236_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] filter_slice_planar_signed_divide_32_0_op0;
reg [31:0] filter_slice_planar_signed_divide_32_0_op1;
wire [31:0] lpm_divide_filter_slice_planar_0_20_temp_out;
wire [31:0] filter_slice_planar_0_20_unused;
reg  lpm_divide_filter_slice_planar_0_20_en;
reg [31:0] lpm_divide_filter_slice_planar_0_20_out;
reg [31:0] filter_slice_planar_signed_divide_32_0;
reg  lpm_mult_filter_slice_planar_0_16_en;
reg [31:0] filter_slice_planar_0_16_stage0_reg;
reg  lpm_mult_filter_slice_planar_0_19_en;
reg [31:0] filter_slice_planar_0_19_stage0_reg;
reg  lpm_divide_filter_slice_planar_0_17_en;
reg  lpm_mult_filter_slice_planar_46_tmp113_en;
reg [31:0] filter_slice_planar_46_tmp113_stage0_reg;
reg  lpm_mult_filter_slice_planar_46_tmp118_en;
reg [31:0] filter_slice_planar_46_tmp118_stage0_reg;
reg  lpm_mult_filter_slice_planar__preheader13_tmp239_en;
reg [31:0] filter_slice_planar__preheader13_tmp239_stage0_reg;
reg  lpm_mult_filter_slice_planar__preheader13_tmp244_en;
reg [31:0] filter_slice_planar__preheader13_tmp244_stage0_reg;

/*   %20 = sdiv i32 %19, %nb_jobs*/
lpm_divide lpm_divide_filter_slice_planar_0_20 (
	.quotient (lpm_divide_filter_slice_planar_0_20_temp_out),
	.remain (filter_slice_planar_0_20_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_filter_slice_planar_0_20_en),
	.numer (filter_slice_planar_signed_divide_32_0_op0),
	.denom (filter_slice_planar_signed_divide_32_0_op1)
);

defparam
	lpm_divide_filter_slice_planar_0_20.lpm_pipeline = 32,
	lpm_divide_filter_slice_planar_0_20.lpm_widthn = 32,
	lpm_divide_filter_slice_planar_0_20.lpm_widthd = 32,
	lpm_divide_filter_slice_planar_0_20.lpm_drepresentation = "SIGNED",
	lpm_divide_filter_slice_planar_0_20.lpm_nrepresentation = "SIGNED",
	lpm_divide_filter_slice_planar_0_20.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_23_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_70_97;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_70_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_0_39) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_23_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader_40;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader_40;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__preheader_40) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_41;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__preheader_40) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_41;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_42;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_42;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_43;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_43;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_44;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_44;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_45;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_45;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_46;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_46;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_47;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph12_47;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph12_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_46_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_46_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_46_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_46_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_46_49;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_46_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_46_49;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_46_49) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__lr_ph12_43_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_46_49) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__lr_ph12_43_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_50;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_51;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_52;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_53;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph_54;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__lr_ph12_or_cond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_54) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__lr_ph12_or_cond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_77;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_58;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_58;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_59;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_59;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_60;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_60;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_61;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_61;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_62;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_62;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_63;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_63;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_64;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_64;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_65;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_65;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_66;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_66;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_67;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_67;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_68;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_68;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_69;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_69;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_70;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_70;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_71;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_71;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_72;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_72;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_73;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_73;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_74;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_74;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_75;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_75;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_76;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_76;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_76) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge298_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_76) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge298_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge298_57;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge298_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_77;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_78;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_78;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_79;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_79;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_80;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_80;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_81;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_81;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_82;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_82;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_83;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_83;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_84;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_84;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_85;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_85;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_86;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_86;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_87;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_87;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_88;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_88;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_89;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_89;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_90;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_90;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_91;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_91;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_92;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_92;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_93;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_93;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_93) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge297_exitcond84_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_93) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge297_exitcond84_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge297_77;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge297_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_loopexit1_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge_96;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge_exitcond110 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge_exitcond110 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_46_48;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB_70_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB_70_97;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB_70_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_70_97) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB_70_97) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_106;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_106;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_107;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_107;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__preheader13_lr_ph_89_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_108;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__preheader13_lr_ph_89_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_108;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_109;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_109;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_110;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_110;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_111;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_111;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_112;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__lr_ph15_112;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__lr_ph15_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_112) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__preheader13_lr_ph_or_cond9_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_112) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar__preheader13_lr_ph_or_cond9_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_115;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_135;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_115;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_116;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_116;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_117;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_117;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_118;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_118;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_119;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_119;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_120;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_120;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_121;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_121;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_122;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_122;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_123;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_123;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_124;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_124;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_125;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_125;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_126;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_126;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_127;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_127;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_128;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_128;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_129;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_129;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_130;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_130;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_131;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_131;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_132;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_132;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_133;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_133;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_134;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_134;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_134) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge300_exitcond165_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_134) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge300_exitcond165_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge300_115;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge300_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_135;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_136;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_136;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_137;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_137;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_138;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_138;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_139;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_139;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_140;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_140;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_141;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_141;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_142;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_142;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_143;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_143;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_144;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_144;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_145;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_145;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_146;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_146;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_147;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_147;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_148;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_148;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_149;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_149;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_150;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_150;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_151;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_151;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_151) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge299_exitcond210_reg == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_151) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge299_exitcond210_reg == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge299_135;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge299_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_loopexit2_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB___crit_edge16_154;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB___crit_edge16_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge16_exitcond236 == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge16_exitcond236 == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__preheader13_106;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__preheader13_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_loopexit_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_loopexit3_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_filter_slice_planar_BB__loopexit_157;
if (reset == 1'b0 && ^(LEGUP_F_filter_slice_planar_BB__loopexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
begin
filter_slice_planar_0_1 = arg_ctx;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_10__* %ctx, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
filter_slice_planar_0_1_reg <= filter_slice_planar_0_1;
if (reset == 1'b0 && ^(filter_slice_planar_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_1_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
begin
filter_slice_planar_0_2 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
filter_slice_planar_0_2_reg <= filter_slice_planar_0_2;
if (reset == 1'b0 && ^(filter_slice_planar_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_2_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %3 = getelementptr inbounds i8* %arg, i32 4*/
begin
filter_slice_planar_0_3 = (arg_arg + (1 * 32'd4));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %3 = getelementptr inbounds i8* %arg, i32 4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
filter_slice_planar_0_3_reg <= filter_slice_planar_0_3;
if (reset == 1'b0 && ^(filter_slice_planar_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_3_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %4 = bitcast i8* %3 to %struct.TYPE_9__***/
begin
filter_slice_planar_0_4 = filter_slice_planar_0_3;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %4 = bitcast i8* %3 to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
filter_slice_planar_0_4_reg <= filter_slice_planar_0_4;
if (reset == 1'b0 && ^(filter_slice_planar_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_4_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
begin
filter_slice_planar_0_5 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
filter_slice_planar_0_5_reg <= filter_slice_planar_0_5;
if (reset == 1'b0 && ^(filter_slice_planar_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_5_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %6 = bitcast i8* %arg to %struct.TYPE_9__***/
begin
filter_slice_planar_0_6 = arg_arg;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %6 = bitcast i8* %arg to %struct.TYPE_9__***/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
filter_slice_planar_0_6_reg <= filter_slice_planar_0_6;
if (reset == 1'b0 && ^(filter_slice_planar_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_6_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
begin
filter_slice_planar_0_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
filter_slice_planar_0_7_reg <= filter_slice_planar_0_7;
if (reset == 1'b0 && ^(filter_slice_planar_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_7_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %8 = icmp eq %struct.TYPE_9__* %7, %5*/
begin
filter_slice_planar_0_8 = (filter_slice_planar_0_7 == filter_slice_planar_0_5_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %8 = icmp eq %struct.TYPE_9__* %7, %5*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
filter_slice_planar_0_8_reg <= filter_slice_planar_0_8;
if (reset == 1'b0 && ^(filter_slice_planar_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_8_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 0*/
begin
filter_slice_planar_0_9 = filter_slice_planar_0_2;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
filter_slice_planar_0_9_reg <= filter_slice_planar_0_9;
if (reset == 1'b0 && ^(filter_slice_planar_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_9_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
begin
filter_slice_planar_0_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_7))
begin
filter_slice_planar_0_10_reg <= filter_slice_planar_0_10;
if (reset == 1'b0 && ^(filter_slice_planar_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_10_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 1*/
begin
filter_slice_planar_0_11 = (filter_slice_planar_0_2 + 4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
filter_slice_planar_0_11_reg <= filter_slice_planar_0_11;
if (reset == 1'b0 && ^(filter_slice_planar_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_11_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
begin
filter_slice_planar_0_12 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_0_12_reg <= filter_slice_planar_0_12;
if (reset == 1'b0 && ^(filter_slice_planar_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_12_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
begin
filter_slice_planar_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_8))
begin
filter_slice_planar_0_13_reg <= filter_slice_planar_0_13;
if (reset == 1'b0 && ^(filter_slice_planar_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_13_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
begin
filter_slice_planar_0_14 = filter_slice_planar_0_5;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
filter_slice_planar_0_14_reg <= filter_slice_planar_0_14;
if (reset == 1'b0 && ^(filter_slice_planar_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_14_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
begin
filter_slice_planar_0_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
filter_slice_planar_0_15_reg <= filter_slice_planar_0_15;
if (reset == 1'b0 && ^(filter_slice_planar_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_15_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_0_16 = filter_slice_planar_0_16_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_0_16_reg <= filter_slice_planar_0_16;
if (reset == 1'b0 && ^(filter_slice_planar_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_16_reg"); $finish; end
end
/* filter_slice_planar: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_0_16_reg <= filter_slice_planar_0_16;
if (reset == 1'b0 && ^(filter_slice_planar_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_16_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_0_17 = filter_slice_planar_signed_divide_32_0;
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_38))
begin
filter_slice_planar_0_17_reg <= filter_slice_planar_0_17;
if (reset == 1'b0 && ^(filter_slice_planar_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_17_reg"); $finish; end
end
/* filter_slice_planar: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_38))
begin
filter_slice_planar_0_17_reg <= filter_slice_planar_0_17;
if (reset == 1'b0 && ^(filter_slice_planar_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_17_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %18 = add nsw i32 %jobnr, 1*/
begin
filter_slice_planar_0_18 = (arg_jobnr + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %18 = add nsw i32 %jobnr, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
filter_slice_planar_0_18_reg <= filter_slice_planar_0_18;
if (reset == 1'b0 && ^(filter_slice_planar_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_18_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_0_19 = filter_slice_planar_0_19_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_0_19_reg <= filter_slice_planar_0_19;
if (reset == 1'b0 && ^(filter_slice_planar_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_19_reg"); $finish; end
end
/* filter_slice_planar: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_0_19_reg <= filter_slice_planar_0_19;
if (reset == 1'b0 && ^(filter_slice_planar_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_19_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_0_20 = filter_slice_planar_signed_divide_32_0;
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_39))
begin
filter_slice_planar_0_20_reg <= filter_slice_planar_0_20;
if (reset == 1'b0 && ^(filter_slice_planar_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_20_reg"); $finish; end
end
/* filter_slice_planar: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_39))
begin
filter_slice_planar_0_20_reg <= filter_slice_planar_0_20;
if (reset == 1'b0 && ^(filter_slice_planar_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_20_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %21 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 3*/
begin
filter_slice_planar_0_21 = (filter_slice_planar_0_2 + 12);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %21 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
filter_slice_planar_0_21_reg <= filter_slice_planar_0_21;
if (reset == 1'b0 && ^(filter_slice_planar_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_21_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
begin
filter_slice_planar_0_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_8))
begin
filter_slice_planar_0_22_reg <= filter_slice_planar_0_22;
if (reset == 1'b0 && ^(filter_slice_planar_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_22_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %23 = icmp eq i32 %22, 0*/
begin
filter_slice_planar_0_23 = (filter_slice_planar_0_22 == 32'd0);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %23 = icmp eq i32 %22, 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_8))
begin
filter_slice_planar_0_23_reg <= filter_slice_planar_0_23;
if (reset == 1'b0 && ^(filter_slice_planar_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_23_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %24 = icmp slt i32 %17, %20*/
begin
filter_slice_planar_0_24 = ($signed(filter_slice_planar_0_17_reg) < $signed(filter_slice_planar_0_20));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %24 = icmp slt i32 %17, %20*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_39))
begin
filter_slice_planar_0_24_reg <= filter_slice_planar_0_24;
if (reset == 1'b0 && ^(filter_slice_planar_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_0_24_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %25 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
begin
filter_slice_planar__lr_ph12_25 = (filter_slice_planar_0_7_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %25 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_25_reg <= filter_slice_planar__lr_ph12_25;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_25_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_26 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
filter_slice_planar__lr_ph12_26_reg <= filter_slice_planar__lr_ph12_26;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_26_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %27 = getelementptr inbounds i32** %26, i32 %13*/
begin
filter_slice_planar__lr_ph12_27 = (filter_slice_planar__lr_ph12_26 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %27 = getelementptr inbounds i32** %26, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
filter_slice_planar__lr_ph12_27_reg <= filter_slice_planar__lr_ph12_27;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_27_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_28 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
filter_slice_planar__lr_ph12_28_reg <= filter_slice_planar__lr_ph12_28;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_28_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %29 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
begin
filter_slice_planar__lr_ph12_29 = (filter_slice_planar_0_7_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %29 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_29_reg <= filter_slice_planar__lr_ph12_29;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_29_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_30 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
filter_slice_planar__lr_ph12_30_reg <= filter_slice_planar__lr_ph12_30;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_30_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %31 = getelementptr inbounds i32* %30, i32 %13*/
begin
filter_slice_planar__lr_ph12_31 = (filter_slice_planar__lr_ph12_30 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %31 = getelementptr inbounds i32* %30, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
filter_slice_planar__lr_ph12_31_reg <= filter_slice_planar__lr_ph12_31;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_31_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
begin
filter_slice_planar__lr_ph12_32 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
filter_slice_planar__lr_ph12_32_reg <= filter_slice_planar__lr_ph12_32;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_32_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %33 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
begin
filter_slice_planar__lr_ph12_33 = (filter_slice_planar_0_5_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %33 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_33_reg <= filter_slice_planar__lr_ph12_33;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_33_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_34 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
filter_slice_planar__lr_ph12_34_reg <= filter_slice_planar__lr_ph12_34;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_34_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %35 = getelementptr inbounds i32** %34, i32 %13*/
begin
filter_slice_planar__lr_ph12_35 = (filter_slice_planar__lr_ph12_34 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %35 = getelementptr inbounds i32** %34, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
filter_slice_planar__lr_ph12_35_reg <= filter_slice_planar__lr_ph12_35;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_35_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_36 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_46))
begin
filter_slice_planar__lr_ph12_36_reg <= filter_slice_planar__lr_ph12_36;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_36_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %37 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
begin
filter_slice_planar__lr_ph12_37 = (filter_slice_planar_0_5_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %37 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_37_reg <= filter_slice_planar__lr_ph12_37;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_37_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph12_38 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
filter_slice_planar__lr_ph12_38_reg <= filter_slice_planar__lr_ph12_38;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_38_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %39 = getelementptr inbounds i32* %38, i32 %13*/
begin
filter_slice_planar__lr_ph12_39 = (filter_slice_planar__lr_ph12_38 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %39 = getelementptr inbounds i32* %38, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
filter_slice_planar__lr_ph12_39_reg <= filter_slice_planar__lr_ph12_39;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_39_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
begin
filter_slice_planar__lr_ph12_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_46))
begin
filter_slice_planar__lr_ph12_40_reg <= filter_slice_planar__lr_ph12_40;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_40_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %41 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
begin
filter_slice_planar__lr_ph12_41 = (filter_slice_planar_0_5_reg + 12);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %41 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_41_reg <= filter_slice_planar__lr_ph12_41;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_41_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
begin
filter_slice_planar__lr_ph12_42 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47))
begin
filter_slice_planar__lr_ph12_42_reg <= filter_slice_planar__lr_ph12_42;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_42_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %43 = icmp sgt i32 %42, 0*/
begin
filter_slice_planar__lr_ph12_43 = ($signed(filter_slice_planar__lr_ph12_42) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %43 = icmp sgt i32 %42, 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47))
begin
filter_slice_planar__lr_ph12_43_reg <= filter_slice_planar__lr_ph12_43;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_43_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %44 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
begin
filter_slice_planar__lr_ph12_44 = (filter_slice_planar_0_2_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %44 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_44_reg <= filter_slice_planar__lr_ph12_44;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_44_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %.not = xor i1 %8, true*/
begin
filter_slice_planar__lr_ph12__not = (filter_slice_planar_0_8_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %.not = xor i1 %8, true*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12__not_reg <= filter_slice_planar__lr_ph12__not;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12__not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12__not_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %45 = icmp eq i32 %10, 4*/
begin
filter_slice_planar__lr_ph12_45 = (filter_slice_planar_0_10_reg == 32'd4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %45 = icmp eq i32 %10, 4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_45_reg <= filter_slice_planar__lr_ph12_45;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_45_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %or.cond = and i1 %45, %.not*/
begin
filter_slice_planar__lr_ph12_or_cond = (filter_slice_planar__lr_ph12_45 & filter_slice_planar__lr_ph12__not);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %or.cond = and i1 %45, %.not*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_or_cond_reg <= filter_slice_planar__lr_ph12_or_cond;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %tmp109 = sub i32 %20, %17*/
begin
filter_slice_planar__lr_ph12_tmp109 = (filter_slice_planar_0_20_reg - filter_slice_planar_0_17_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %tmp109 = sub i32 %20, %17*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
filter_slice_planar__lr_ph12_tmp109_reg <= filter_slice_planar__lr_ph12_tmp109;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_tmp109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_tmp109_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %tmp = icmp sgt i32 %42, 1*/
begin
filter_slice_planar__lr_ph12_tmp = ($signed(filter_slice_planar__lr_ph12_42) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %tmp = icmp sgt i32 %42, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47))
begin
filter_slice_planar__lr_ph12_tmp_reg <= filter_slice_planar__lr_ph12_tmp;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_tmp_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %smax = select i1 %tmp, i32 %42, i32 1*/
begin
filter_slice_planar__lr_ph12_smax = (filter_slice_planar__lr_ph12_tmp ? filter_slice_planar__lr_ph12_42 : 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph12*/
/*   %smax = select i1 %tmp, i32 %42, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47))
begin
filter_slice_planar__lr_ph12_smax_reg <= filter_slice_planar__lr_ph12_smax;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph12_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph12_smax_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %46*/
/*   %indvar = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next, %._crit_edge ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar_46_indvar = 32'd0;
end
/* filter_slice_planar: %46*/
/*   %indvar = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next, %._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge_exitcond110 == 1'd0))) */
begin
filter_slice_planar_46_indvar = filter_slice_planar___crit_edge_indvar_next;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %indvar = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next, %._crit_edge ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_47) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar_46_indvar_reg <= filter_slice_planar_46_indvar;
if (reset == 1'b0 && ^(filter_slice_planar_46_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_indvar_reg"); $finish; end
end
/* filter_slice_planar: %46*/
/*   %indvar = phi i32 [ 0, %.lr.ph12 ], [ %indvar.next, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge_exitcond110 == 1'd0)))
begin
filter_slice_planar_46_indvar_reg <= filter_slice_planar_46_indvar;
if (reset == 1'b0 && ^(filter_slice_planar_46_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_indvar_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %46*/
/*   %tmp111289 = add i32 %17, %indvar*/
begin
filter_slice_planar_46_tmp111289 = (filter_slice_planar_0_17_reg + filter_slice_planar_46_indvar_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %tmp111289 = add i32 %17, %indvar*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_46_48))
begin
filter_slice_planar_46_tmp111289_reg <= filter_slice_planar_46_tmp111289;
if (reset == 1'b0 && ^(filter_slice_planar_46_tmp111289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_tmp111289_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_46_tmp113 = filter_slice_planar_46_tmp113_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %tmp113 = mul i32 %32, %tmp111289*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_46_49))
begin
filter_slice_planar_46_tmp113_reg <= filter_slice_planar_46_tmp113;
if (reset == 1'b0 && ^(filter_slice_planar_46_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_tmp113_reg"); $finish; end
end
/* filter_slice_planar: %46*/
/*   %tmp113 = mul i32 %32, %tmp111289*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_46_49))
begin
filter_slice_planar_46_tmp113_reg <= filter_slice_planar_46_tmp113;
if (reset == 1'b0 && ^(filter_slice_planar_46_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_tmp113_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar_46_tmp118 = filter_slice_planar_46_tmp118_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %tmp118 = mul i32 %40, %tmp111289*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_46_49))
begin
filter_slice_planar_46_tmp118_reg <= filter_slice_planar_46_tmp118;
if (reset == 1'b0 && ^(filter_slice_planar_46_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_tmp118_reg"); $finish; end
end
/* filter_slice_planar: %46*/
/*   %tmp118 = mul i32 %40, %tmp111289*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_46_49))
begin
filter_slice_planar_46_tmp118_reg <= filter_slice_planar_46_tmp118;
if (reset == 1'b0 && ^(filter_slice_planar_46_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_46_tmp118_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph_47 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52))
begin
filter_slice_planar__lr_ph_47_reg <= filter_slice_planar__lr_ph_47;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph_47_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph_48 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_54))
begin
filter_slice_planar__lr_ph_48_reg <= filter_slice_planar__lr_ph_48;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph_48_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %x.010.us = phi i32 [ %59, %._crit_edge298 ], [ 0, %._crit_edge298.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge298_x_010_us = 32'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %x.010.us = phi i32 [ %59, %._crit_edge298 ], [ 0, %._crit_edge298.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_76) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge298_exitcond_reg == 1'd0))) */
begin
filter_slice_planar___crit_edge298_x_010_us = filter_slice_planar___crit_edge298_59_reg;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %x.010.us = phi i32 [ %59, %._crit_edge298 ], [ 0, %._crit_edge298.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_preheader_55) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge298_x_010_us_reg <= filter_slice_planar___crit_edge298_x_010_us;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_x_010_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_x_010_us_reg"); $finish; end
end
/* filter_slice_planar: %._crit_edge298*/
/*   %x.010.us = phi i32 [ %59, %._crit_edge298 ], [ 0, %._crit_edge298.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_76) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge298_exitcond_reg == 1'd0)))
begin
filter_slice_planar___crit_edge298_x_010_us_reg <= filter_slice_planar___crit_edge298_x_010_us;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_x_010_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_x_010_us_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %tmp141 = add i32 %tmp118, %x.010.us*/
begin
filter_slice_planar___crit_edge298_tmp141 = (filter_slice_planar_46_tmp118_reg + filter_slice_planar___crit_edge298_x_010_us_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %tmp141 = add i32 %tmp118, %x.010.us*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57))
begin
filter_slice_planar___crit_edge298_tmp141_reg <= filter_slice_planar___crit_edge298_tmp141;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_tmp141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_tmp141_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %scevgep81 = getelementptr i32* %36, i32 %tmp141*/
begin
filter_slice_planar___crit_edge298_scevgep81 = (filter_slice_planar__lr_ph12_36_reg + (4 * filter_slice_planar___crit_edge298_tmp141_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %scevgep81 = getelementptr i32* %36, i32 %tmp141*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
filter_slice_planar___crit_edge298_scevgep81_reg <= filter_slice_planar___crit_edge298_scevgep81;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_scevgep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_scevgep81_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %tmp143 = add i32 %tmp113, %x.010.us*/
begin
filter_slice_planar___crit_edge298_tmp143 = (filter_slice_planar_46_tmp113_reg + filter_slice_planar___crit_edge298_x_010_us_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %tmp143 = add i32 %tmp113, %x.010.us*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57))
begin
filter_slice_planar___crit_edge298_tmp143_reg <= filter_slice_planar___crit_edge298_tmp143;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_tmp143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_tmp143_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %scevgep76 = getelementptr i32* %28, i32 %tmp143*/
begin
filter_slice_planar___crit_edge298_scevgep76 = (filter_slice_planar__lr_ph12_28_reg + (4 * filter_slice_planar___crit_edge298_tmp143_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %scevgep76 = getelementptr i32* %28, i32 %tmp143*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
filter_slice_planar___crit_edge298_scevgep76_reg <= filter_slice_planar___crit_edge298_scevgep76;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_scevgep76_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_49 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
filter_slice_planar___crit_edge298_49_reg <= filter_slice_planar___crit_edge298_49;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_49_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %50 = getelementptr inbounds i32* %48, i32 %49*/
begin
filter_slice_planar___crit_edge298_50 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge298_49));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %50 = getelementptr inbounds i32* %48, i32 %49*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
filter_slice_planar___crit_edge298_50_reg <= filter_slice_planar___crit_edge298_50;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_50_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_51 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
filter_slice_planar___crit_edge298_51_reg <= filter_slice_planar___crit_edge298_51;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_51_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_52 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
filter_slice_planar___crit_edge298_52_reg <= filter_slice_planar___crit_edge298_52;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_52_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %53 = getelementptr inbounds i32* %48, i32 %52*/
begin
filter_slice_planar___crit_edge298_53 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge298_52));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %53 = getelementptr inbounds i32* %48, i32 %52*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
filter_slice_planar___crit_edge298_53_reg <= filter_slice_planar___crit_edge298_53;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_53_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
filter_slice_planar___crit_edge298_54_reg <= filter_slice_planar___crit_edge298_54;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_54_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_55 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
filter_slice_planar___crit_edge298_55_reg <= filter_slice_planar___crit_edge298_55;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_55_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %56 = getelementptr inbounds i32* %48, i32 %55*/
begin
filter_slice_planar___crit_edge298_56 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge298_55));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %56 = getelementptr inbounds i32* %48, i32 %55*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
filter_slice_planar___crit_edge298_56_reg <= filter_slice_planar___crit_edge298_56;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_56_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_57 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
filter_slice_planar___crit_edge298_57_reg <= filter_slice_planar___crit_edge298_57;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_57_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge298_58 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
filter_slice_planar___crit_edge298_58_reg <= filter_slice_planar___crit_edge298_58;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_58_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %59 = add nsw i32 %x.010.us, 1*/
begin
filter_slice_planar___crit_edge298_59 = (filter_slice_planar___crit_edge298_x_010_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %59 = add nsw i32 %x.010.us, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57))
begin
filter_slice_planar___crit_edge298_59_reg <= filter_slice_planar___crit_edge298_59;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_59_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %exitcond = icmp eq i32 %59, %smax*/
begin
filter_slice_planar___crit_edge298_exitcond = (filter_slice_planar___crit_edge298_59 == filter_slice_planar__lr_ph12_smax_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge298*/
/*   %exitcond = icmp eq i32 %59, %smax*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_57))
begin
filter_slice_planar___crit_edge298_exitcond_reg <= filter_slice_planar___crit_edge298_exitcond;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge298_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge298_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %x.010 = phi i32 [ %69, %._crit_edge297 ], [ 0, %._crit_edge297.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge297_x_010 = 32'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %x.010 = phi i32 [ %69, %._crit_edge297 ], [ 0, %._crit_edge297.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_93) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge297_exitcond84_reg == 1'd0))) */
begin
filter_slice_planar___crit_edge297_x_010 = filter_slice_planar___crit_edge297_69_reg;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %x.010 = phi i32 [ %69, %._crit_edge297 ], [ 0, %._crit_edge297.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_preheader_56) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge297_x_010_reg <= filter_slice_planar___crit_edge297_x_010;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_x_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_x_010_reg"); $finish; end
end
/* filter_slice_planar: %._crit_edge297*/
/*   %x.010 = phi i32 [ %69, %._crit_edge297 ], [ 0, %._crit_edge297.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_93) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge297_exitcond84_reg == 1'd0)))
begin
filter_slice_planar___crit_edge297_x_010_reg <= filter_slice_planar___crit_edge297_x_010;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_x_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_x_010_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %tmp114 = add i32 %tmp113, %x.010*/
begin
filter_slice_planar___crit_edge297_tmp114 = (filter_slice_planar_46_tmp113_reg + filter_slice_planar___crit_edge297_x_010_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %tmp114 = add i32 %tmp113, %x.010*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77))
begin
filter_slice_planar___crit_edge297_tmp114_reg <= filter_slice_planar___crit_edge297_tmp114;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %scevgep108 = getelementptr i32* %28, i32 %tmp114*/
begin
filter_slice_planar___crit_edge297_scevgep108 = (filter_slice_planar__lr_ph12_28_reg + (4 * filter_slice_planar___crit_edge297_tmp114_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %scevgep108 = getelementptr i32* %28, i32 %tmp114*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
filter_slice_planar___crit_edge297_scevgep108_reg <= filter_slice_planar___crit_edge297_scevgep108;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_scevgep108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_scevgep108_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %tmp119 = add i32 %tmp118, %x.010*/
begin
filter_slice_planar___crit_edge297_tmp119 = (filter_slice_planar_46_tmp118_reg + filter_slice_planar___crit_edge297_x_010_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %tmp119 = add i32 %tmp118, %x.010*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77))
begin
filter_slice_planar___crit_edge297_tmp119_reg <= filter_slice_planar___crit_edge297_tmp119;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_tmp119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_tmp119_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %scevgep104 = getelementptr i32* %36, i32 %tmp119*/
begin
filter_slice_planar___crit_edge297_scevgep104 = (filter_slice_planar__lr_ph12_36_reg + (4 * filter_slice_planar___crit_edge297_tmp119_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %scevgep104 = getelementptr i32* %36, i32 %tmp119*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
filter_slice_planar___crit_edge297_scevgep104_reg <= filter_slice_planar___crit_edge297_scevgep104;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_scevgep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_scevgep104_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_60 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
filter_slice_planar___crit_edge297_60_reg <= filter_slice_planar___crit_edge297_60;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_60_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %61 = getelementptr inbounds i32* %48, i32 %60*/
begin
filter_slice_planar___crit_edge297_61 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge297_60));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %61 = getelementptr inbounds i32* %48, i32 %60*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
filter_slice_planar___crit_edge297_61_reg <= filter_slice_planar___crit_edge297_61;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_61_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_62 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
filter_slice_planar___crit_edge297_62_reg <= filter_slice_planar___crit_edge297_62;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_62_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
filter_slice_planar___crit_edge297_63_reg <= filter_slice_planar___crit_edge297_63;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_63_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %64 = getelementptr inbounds i32* %48, i32 %63*/
begin
filter_slice_planar___crit_edge297_64 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge297_63));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %64 = getelementptr inbounds i32* %48, i32 %63*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
filter_slice_planar___crit_edge297_64_reg <= filter_slice_planar___crit_edge297_64;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_64_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_65 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
filter_slice_planar___crit_edge297_65_reg <= filter_slice_planar___crit_edge297_65;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_65_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_66 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
filter_slice_planar___crit_edge297_66_reg <= filter_slice_planar___crit_edge297_66;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_66_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %67 = getelementptr inbounds i32* %48, i32 %66*/
begin
filter_slice_planar___crit_edge297_67 = (filter_slice_planar__lr_ph_48_reg + (4 * filter_slice_planar___crit_edge297_66));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %67 = getelementptr inbounds i32* %48, i32 %66*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
filter_slice_planar___crit_edge297_67_reg <= filter_slice_planar___crit_edge297_67;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_67_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge297_68 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
filter_slice_planar___crit_edge297_68_reg <= filter_slice_planar___crit_edge297_68;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_68_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %69 = add nsw i32 %x.010, 1*/
begin
filter_slice_planar___crit_edge297_69 = (filter_slice_planar___crit_edge297_x_010_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %69 = add nsw i32 %x.010, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77))
begin
filter_slice_planar___crit_edge297_69_reg <= filter_slice_planar___crit_edge297_69;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_69_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %exitcond84 = icmp eq i32 %69, %smax*/
begin
filter_slice_planar___crit_edge297_exitcond84 = (filter_slice_planar___crit_edge297_69 == filter_slice_planar__lr_ph12_smax_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge297*/
/*   %exitcond84 = icmp eq i32 %69, %smax*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_77))
begin
filter_slice_planar___crit_edge297_exitcond84_reg <= filter_slice_planar___crit_edge297_exitcond84;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge297_exitcond84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge297_exitcond84_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
filter_slice_planar___crit_edge_indvar_next = (filter_slice_planar_46_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96))
begin
filter_slice_planar___crit_edge_indvar_next_reg <= filter_slice_planar___crit_edge_indvar_next;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge*/
/*   %exitcond110 = icmp eq i32 %indvar.next, %tmp109*/
begin
filter_slice_planar___crit_edge_exitcond110 = (filter_slice_planar___crit_edge_indvar_next == filter_slice_planar__lr_ph12_tmp109_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge*/
/*   %exitcond110 = icmp eq i32 %indvar.next, %tmp109*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge_96))
begin
filter_slice_planar___crit_edge_exitcond110_reg <= filter_slice_planar___crit_edge_exitcond110;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge_exitcond110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge_exitcond110_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
begin
filter_slice_planar__preheader13_lr_ph_71 = (filter_slice_planar_0_5_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %71 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_71_reg <= filter_slice_planar__preheader13_lr_ph_71;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_71_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %72 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
begin
filter_slice_planar__preheader13_lr_ph_72 = (filter_slice_planar_0_5_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %72 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_72_reg <= filter_slice_planar__preheader13_lr_ph_72;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_72_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %73 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
begin
filter_slice_planar__preheader13_lr_ph_73 = (filter_slice_planar_0_7_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %73 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_73_reg <= filter_slice_planar__preheader13_lr_ph_73;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_73_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %74 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
begin
filter_slice_planar__preheader13_lr_ph_74 = (filter_slice_planar_0_7_reg + 4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %74 = getelementptr inbounds %struct.TYPE_9__* %7, i32 0, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_74_reg <= filter_slice_planar__preheader13_lr_ph_74;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_74_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_75 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100))
begin
filter_slice_planar__preheader13_lr_ph_75_reg <= filter_slice_planar__preheader13_lr_ph_75;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_75_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_76 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100))
begin
filter_slice_planar__preheader13_lr_ph_76_reg <= filter_slice_planar__preheader13_lr_ph_76;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_76_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_77 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
filter_slice_planar__preheader13_lr_ph_77_reg <= filter_slice_planar__preheader13_lr_ph_77;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_77_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_78 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
filter_slice_planar__preheader13_lr_ph_78_reg <= filter_slice_planar__preheader13_lr_ph_78;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_78_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %79 = getelementptr inbounds i32* %78, i32 %13*/
begin
filter_slice_planar__preheader13_lr_ph_79 = (filter_slice_planar__preheader13_lr_ph_78 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %79 = getelementptr inbounds i32* %78, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
filter_slice_planar__preheader13_lr_ph_79_reg <= filter_slice_planar__preheader13_lr_ph_79;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_79_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %80 = getelementptr inbounds i32* %77, i32 %13*/
begin
filter_slice_planar__preheader13_lr_ph_80 = (filter_slice_planar__preheader13_lr_ph_77 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %80 = getelementptr inbounds i32* %77, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
filter_slice_planar__preheader13_lr_ph_80_reg <= filter_slice_planar__preheader13_lr_ph_80;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_80_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
begin
filter_slice_planar__preheader13_lr_ph_81 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
filter_slice_planar__preheader13_lr_ph_81_reg <= filter_slice_planar__preheader13_lr_ph_81;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_81_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %82 = getelementptr inbounds i32** %76, i32 %13*/
begin
filter_slice_planar__preheader13_lr_ph_82 = (filter_slice_planar__preheader13_lr_ph_76 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %82 = getelementptr inbounds i32** %76, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100))
begin
filter_slice_planar__preheader13_lr_ph_82_reg <= filter_slice_planar__preheader13_lr_ph_82;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_82_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
begin
filter_slice_planar__preheader13_lr_ph_83 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
filter_slice_planar__preheader13_lr_ph_83_reg <= filter_slice_planar__preheader13_lr_ph_83;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_83_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %84 = getelementptr inbounds i32** %75, i32 %13*/
begin
filter_slice_planar__preheader13_lr_ph_84 = (filter_slice_planar__preheader13_lr_ph_75 + (4 * filter_slice_planar_0_13_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %84 = getelementptr inbounds i32** %75, i32 %13*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_100))
begin
filter_slice_planar__preheader13_lr_ph_84_reg <= filter_slice_planar__preheader13_lr_ph_84;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_84_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_85 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104))
begin
filter_slice_planar__preheader13_lr_ph_85_reg <= filter_slice_planar__preheader13_lr_ph_85;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_85_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
begin
filter_slice_planar__preheader13_lr_ph_86 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_104))
begin
filter_slice_planar__preheader13_lr_ph_86_reg <= filter_slice_planar__preheader13_lr_ph_86;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_86_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %87 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
begin
filter_slice_planar__preheader13_lr_ph_87 = (filter_slice_planar_0_5_reg + 12);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %87 = getelementptr inbounds %struct.TYPE_9__* %5, i32 0, i32 3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_87_reg <= filter_slice_planar__preheader13_lr_ph_87;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_87_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
begin
filter_slice_planar__preheader13_lr_ph_88 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105))
begin
filter_slice_planar__preheader13_lr_ph_88_reg <= filter_slice_planar__preheader13_lr_ph_88;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_88_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %89 = icmp sgt i32 %88, 0*/
begin
filter_slice_planar__preheader13_lr_ph_89 = ($signed(filter_slice_planar__preheader13_lr_ph_88) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %89 = icmp sgt i32 %88, 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105))
begin
filter_slice_planar__preheader13_lr_ph_89_reg <= filter_slice_planar__preheader13_lr_ph_89;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_89_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %90 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
begin
filter_slice_planar__preheader13_lr_ph_90 = (filter_slice_planar_0_2_reg + 8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %90 = getelementptr inbounds %struct.TYPE_8__* %2, i32 0, i32 2*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_90_reg <= filter_slice_planar__preheader13_lr_ph_90;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_90_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %.not8 = xor i1 %8, true*/
begin
filter_slice_planar__preheader13_lr_ph__not8 = (filter_slice_planar_0_8_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %.not8 = xor i1 %8, true*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph__not8_reg <= filter_slice_planar__preheader13_lr_ph__not8;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph__not8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph__not8_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %91 = icmp eq i32 %10, 4*/
begin
filter_slice_planar__preheader13_lr_ph_91 = (filter_slice_planar_0_10_reg == 32'd4);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %91 = icmp eq i32 %10, 4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_91_reg <= filter_slice_planar__preheader13_lr_ph_91;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_91_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %or.cond9 = and i1 %91, %.not8*/
begin
filter_slice_planar__preheader13_lr_ph_or_cond9 = (filter_slice_planar__preheader13_lr_ph_91 & filter_slice_planar__preheader13_lr_ph__not8);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %or.cond9 = and i1 %91, %.not8*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_or_cond9_reg <= filter_slice_planar__preheader13_lr_ph_or_cond9;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_or_cond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_or_cond9_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %tmp235 = sub i32 %20, %17*/
begin
filter_slice_planar__preheader13_lr_ph_tmp235 = (filter_slice_planar_0_20_reg - filter_slice_planar_0_17_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %tmp235 = sub i32 %20, %17*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
filter_slice_planar__preheader13_lr_ph_tmp235_reg <= filter_slice_planar__preheader13_lr_ph_tmp235;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_tmp235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_tmp235_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %tmp163 = icmp sgt i32 %88, 1*/
begin
filter_slice_planar__preheader13_lr_ph_tmp163 = ($signed(filter_slice_planar__preheader13_lr_ph_88) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %tmp163 = icmp sgt i32 %88, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105))
begin
filter_slice_planar__preheader13_lr_ph_tmp163_reg <= filter_slice_planar__preheader13_lr_ph_tmp163;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_tmp163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_tmp163_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %smax164 = select i1 %tmp163, i32 %88, i32 1*/
begin
filter_slice_planar__preheader13_lr_ph_smax164 = (filter_slice_planar__preheader13_lr_ph_tmp163 ? filter_slice_planar__preheader13_lr_ph_88 : 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %smax164 = select i1 %tmp163, i32 %88, i32 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105))
begin
filter_slice_planar__preheader13_lr_ph_smax164_reg <= filter_slice_planar__preheader13_lr_ph_smax164;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_lr_ph_smax164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_lr_ph_smax164_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13*/
/*   %indvar166 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next167, %._crit_edge16 ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar__preheader13_indvar166 = 32'd0;
end
/* filter_slice_planar: %.preheader13*/
/*   %indvar166 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next167, %._crit_edge16 ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge16_exitcond236 == 1'd0))) */
begin
filter_slice_planar__preheader13_indvar166 = filter_slice_planar___crit_edge16_indvar_next167;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %indvar166 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next167, %._crit_edge16 ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_105) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar__preheader13_indvar166_reg <= filter_slice_planar__preheader13_indvar166;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_indvar166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_indvar166_reg"); $finish; end
end
/* filter_slice_planar: %.preheader13*/
/*   %indvar166 = phi i32 [ 0, %.preheader13.lr.ph ], [ %indvar.next167, %._crit_edge16 ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge16_exitcond236 == 1'd0)))
begin
filter_slice_planar__preheader13_indvar166_reg <= filter_slice_planar__preheader13_indvar166;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_indvar166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_indvar166_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp237301 = add i32 %17, %indvar166*/
begin
filter_slice_planar__preheader13_tmp237301 = (filter_slice_planar_0_17_reg + filter_slice_planar__preheader13_indvar166_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp237301 = add i32 %17, %indvar166*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_106))
begin
filter_slice_planar__preheader13_tmp237301_reg <= filter_slice_planar__preheader13_tmp237301;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_tmp237301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_tmp237301_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar__preheader13_tmp239 = filter_slice_planar__preheader13_tmp239_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp239 = mul i32 %83, %tmp237301*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107))
begin
filter_slice_planar__preheader13_tmp239_reg <= filter_slice_planar__preheader13_tmp239;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_tmp239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_tmp239_reg"); $finish; end
end
/* filter_slice_planar: %.preheader13*/
/*   %tmp239 = mul i32 %83, %tmp237301*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107))
begin
filter_slice_planar__preheader13_tmp239_reg <= filter_slice_planar__preheader13_tmp239;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_tmp239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_tmp239_reg"); $finish; end
end
end
always @(*) begin
filter_slice_planar__preheader13_tmp244 = filter_slice_planar__preheader13_tmp244_stage0_reg;
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp244 = mul i32 %81, %tmp237301*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107))
begin
filter_slice_planar__preheader13_tmp244_reg <= filter_slice_planar__preheader13_tmp244;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_tmp244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_tmp244_reg"); $finish; end
end
/* filter_slice_planar: %.preheader13*/
/*   %tmp244 = mul i32 %81, %tmp237301*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_107))
begin
filter_slice_planar__preheader13_tmp244_reg <= filter_slice_planar__preheader13_tmp244;
if (reset == 1'b0 && ^(filter_slice_planar__preheader13_tmp244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__preheader13_tmp244_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph15_92 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110))
begin
filter_slice_planar__lr_ph15_92_reg <= filter_slice_planar__lr_ph15_92;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph15_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph15_92_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
begin
filter_slice_planar__lr_ph15_93 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_112))
begin
filter_slice_planar__lr_ph15_93_reg <= filter_slice_planar__lr_ph15_93;
if (reset == 1'b0 && ^(filter_slice_planar__lr_ph15_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar__lr_ph15_93_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %x.114.us = phi i32 [ %104, %._crit_edge300 ], [ 0, %._crit_edge300.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge300_x_114_us = 32'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %x.114.us = phi i32 [ %104, %._crit_edge300 ], [ 0, %._crit_edge300.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_134) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge300_exitcond165_reg == 1'd0))) */
begin
filter_slice_planar___crit_edge300_x_114_us = filter_slice_planar___crit_edge300_104_reg;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %x.114.us = phi i32 [ %104, %._crit_edge300 ], [ 0, %._crit_edge300.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_preheader_113) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge300_x_114_us_reg <= filter_slice_planar___crit_edge300_x_114_us;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_x_114_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_x_114_us_reg"); $finish; end
end
/* filter_slice_planar: %._crit_edge300*/
/*   %x.114.us = phi i32 [ %104, %._crit_edge300 ], [ 0, %._crit_edge300.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_134) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge300_exitcond165_reg == 1'd0)))
begin
filter_slice_planar___crit_edge300_x_114_us_reg <= filter_slice_planar___crit_edge300_x_114_us;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_x_114_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_x_114_us_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %tmp267 = add i32 %tmp244, %x.114.us*/
begin
filter_slice_planar___crit_edge300_tmp267 = (filter_slice_planar__preheader13_tmp244_reg + filter_slice_planar___crit_edge300_x_114_us_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %tmp267 = add i32 %tmp244, %x.114.us*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115))
begin
filter_slice_planar___crit_edge300_tmp267_reg <= filter_slice_planar___crit_edge300_tmp267;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_tmp267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_tmp267_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %scevgep207 = getelementptr i32* %85, i32 %tmp267*/
begin
filter_slice_planar___crit_edge300_scevgep207 = (filter_slice_planar__preheader13_lr_ph_85_reg + (4 * filter_slice_planar___crit_edge300_tmp267_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %scevgep207 = getelementptr i32* %85, i32 %tmp267*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
filter_slice_planar___crit_edge300_scevgep207_reg <= filter_slice_planar___crit_edge300_scevgep207;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_scevgep207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_scevgep207_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %tmp269 = add i32 %tmp239, %x.114.us*/
begin
filter_slice_planar___crit_edge300_tmp269 = (filter_slice_planar__preheader13_tmp239_reg + filter_slice_planar___crit_edge300_x_114_us_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %tmp269 = add i32 %tmp239, %x.114.us*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115))
begin
filter_slice_planar___crit_edge300_tmp269_reg <= filter_slice_planar___crit_edge300_tmp269;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_tmp269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_tmp269_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %scevgep202 = getelementptr i32* %86, i32 %tmp269*/
begin
filter_slice_planar___crit_edge300_scevgep202 = (filter_slice_planar__preheader13_lr_ph_86_reg + (4 * filter_slice_planar___crit_edge300_tmp269_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %scevgep202 = getelementptr i32* %86, i32 %tmp269*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
filter_slice_planar___crit_edge300_scevgep202_reg <= filter_slice_planar___crit_edge300_scevgep202;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_scevgep202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_scevgep202_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_94 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
filter_slice_planar___crit_edge300_94_reg <= filter_slice_planar___crit_edge300_94;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_94_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %95 = getelementptr inbounds i32* %93, i32 %94*/
begin
filter_slice_planar___crit_edge300_95 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge300_94));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %95 = getelementptr inbounds i32* %93, i32 %94*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
filter_slice_planar___crit_edge300_95_reg <= filter_slice_planar___crit_edge300_95;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_95_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
filter_slice_planar___crit_edge300_96_reg <= filter_slice_planar___crit_edge300_96;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_96_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
filter_slice_planar___crit_edge300_97_reg <= filter_slice_planar___crit_edge300_97;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_97_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %98 = getelementptr inbounds i32* %93, i32 %97*/
begin
filter_slice_planar___crit_edge300_98 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge300_97));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %98 = getelementptr inbounds i32* %93, i32 %97*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
filter_slice_planar___crit_edge300_98_reg <= filter_slice_planar___crit_edge300_98;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_98_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_99 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
filter_slice_planar___crit_edge300_99_reg <= filter_slice_planar___crit_edge300_99;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_99_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_100 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
filter_slice_planar___crit_edge300_100_reg <= filter_slice_planar___crit_edge300_100;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_100_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %101 = getelementptr inbounds i32* %93, i32 %100*/
begin
filter_slice_planar___crit_edge300_101 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge300_100));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %101 = getelementptr inbounds i32* %93, i32 %100*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
filter_slice_planar___crit_edge300_101_reg <= filter_slice_planar___crit_edge300_101;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_101_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_102 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
filter_slice_planar___crit_edge300_102_reg <= filter_slice_planar___crit_edge300_102;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_102_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge300_103 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
filter_slice_planar___crit_edge300_103_reg <= filter_slice_planar___crit_edge300_103;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_103_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %104 = add nsw i32 %x.114.us, 1*/
begin
filter_slice_planar___crit_edge300_104 = (filter_slice_planar___crit_edge300_x_114_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %104 = add nsw i32 %x.114.us, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115))
begin
filter_slice_planar___crit_edge300_104_reg <= filter_slice_planar___crit_edge300_104;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_104_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %exitcond165 = icmp eq i32 %104, %smax164*/
begin
filter_slice_planar___crit_edge300_exitcond165 = (filter_slice_planar___crit_edge300_104 == filter_slice_planar__preheader13_lr_ph_smax164_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge300*/
/*   %exitcond165 = icmp eq i32 %104, %smax164*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_115))
begin
filter_slice_planar___crit_edge300_exitcond165_reg <= filter_slice_planar___crit_edge300_exitcond165;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge300_exitcond165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge300_exitcond165_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %x.114 = phi i32 [ %114, %._crit_edge299 ], [ 0, %._crit_edge299.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge299_x_114 = 32'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %x.114 = phi i32 [ %114, %._crit_edge299 ], [ 0, %._crit_edge299.preheader ]*/
else /* if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_151) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge299_exitcond210_reg == 1'd0))) */
begin
filter_slice_planar___crit_edge299_x_114 = filter_slice_planar___crit_edge299_114_reg;
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %x.114 = phi i32 [ %114, %._crit_edge299 ], [ 0, %._crit_edge299.preheader ]*/
if (((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_preheader_114) & (memory_controller_waitrequest == 1'd0)))
begin
filter_slice_planar___crit_edge299_x_114_reg <= filter_slice_planar___crit_edge299_x_114;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_x_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_x_114_reg"); $finish; end
end
/* filter_slice_planar: %._crit_edge299*/
/*   %x.114 = phi i32 [ %114, %._crit_edge299 ], [ 0, %._crit_edge299.preheader ]*/
if ((((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_151) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar___crit_edge299_exitcond210_reg == 1'd0)))
begin
filter_slice_planar___crit_edge299_x_114_reg <= filter_slice_planar___crit_edge299_x_114;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_x_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_x_114_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %tmp240 = add i32 %tmp239, %x.114*/
begin
filter_slice_planar___crit_edge299_tmp240 = (filter_slice_planar__preheader13_tmp239_reg + filter_slice_planar___crit_edge299_x_114_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %tmp240 = add i32 %tmp239, %x.114*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135))
begin
filter_slice_planar___crit_edge299_tmp240_reg <= filter_slice_planar___crit_edge299_tmp240;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_tmp240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_tmp240_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %scevgep234 = getelementptr i32* %86, i32 %tmp240*/
begin
filter_slice_planar___crit_edge299_scevgep234 = (filter_slice_planar__preheader13_lr_ph_86_reg + (4 * filter_slice_planar___crit_edge299_tmp240_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %scevgep234 = getelementptr i32* %86, i32 %tmp240*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
filter_slice_planar___crit_edge299_scevgep234_reg <= filter_slice_planar___crit_edge299_scevgep234;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_scevgep234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_scevgep234_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %tmp245 = add i32 %tmp244, %x.114*/
begin
filter_slice_planar___crit_edge299_tmp245 = (filter_slice_planar__preheader13_tmp244_reg + filter_slice_planar___crit_edge299_x_114_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %tmp245 = add i32 %tmp244, %x.114*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135))
begin
filter_slice_planar___crit_edge299_tmp245_reg <= filter_slice_planar___crit_edge299_tmp245;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_tmp245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_tmp245_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %scevgep230 = getelementptr i32* %85, i32 %tmp245*/
begin
filter_slice_planar___crit_edge299_scevgep230 = (filter_slice_planar__preheader13_lr_ph_85_reg + (4 * filter_slice_planar___crit_edge299_tmp245_reg));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %scevgep230 = getelementptr i32* %85, i32 %tmp245*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
filter_slice_planar___crit_edge299_scevgep230_reg <= filter_slice_planar___crit_edge299_scevgep230;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_scevgep230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_scevgep230_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_105 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
filter_slice_planar___crit_edge299_105_reg <= filter_slice_planar___crit_edge299_105;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_105_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %106 = getelementptr inbounds i32* %93, i32 %105*/
begin
filter_slice_planar___crit_edge299_106 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge299_105));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %106 = getelementptr inbounds i32* %93, i32 %105*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
filter_slice_planar___crit_edge299_106_reg <= filter_slice_planar___crit_edge299_106;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_106_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_107 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
filter_slice_planar___crit_edge299_107_reg <= filter_slice_planar___crit_edge299_107;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_107_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_108 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
filter_slice_planar___crit_edge299_108_reg <= filter_slice_planar___crit_edge299_108;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_108_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %109 = getelementptr inbounds i32* %93, i32 %108*/
begin
filter_slice_planar___crit_edge299_109 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge299_108));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %109 = getelementptr inbounds i32* %93, i32 %108*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
filter_slice_planar___crit_edge299_109_reg <= filter_slice_planar___crit_edge299_109;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_109_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_110 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
filter_slice_planar___crit_edge299_110_reg <= filter_slice_planar___crit_edge299_110;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_110_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_111 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
filter_slice_planar___crit_edge299_111_reg <= filter_slice_planar___crit_edge299_111;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_111_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %112 = getelementptr inbounds i32* %93, i32 %111*/
begin
filter_slice_planar___crit_edge299_112 = (filter_slice_planar__lr_ph15_93_reg + (4 * filter_slice_planar___crit_edge299_111));
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %112 = getelementptr inbounds i32* %93, i32 %111*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
filter_slice_planar___crit_edge299_112_reg <= filter_slice_planar___crit_edge299_112;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_112_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
begin
filter_slice_planar___crit_edge299_113 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
filter_slice_planar___crit_edge299_113_reg <= filter_slice_planar___crit_edge299_113;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_113_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %114 = add nsw i32 %x.114, 1*/
begin
filter_slice_planar___crit_edge299_114 = (filter_slice_planar___crit_edge299_x_114_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %114 = add nsw i32 %x.114, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135))
begin
filter_slice_planar___crit_edge299_114_reg <= filter_slice_planar___crit_edge299_114;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_114_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %exitcond210 = icmp eq i32 %114, %smax164*/
begin
filter_slice_planar___crit_edge299_exitcond210 = (filter_slice_planar___crit_edge299_114 == filter_slice_planar__preheader13_lr_ph_smax164_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge299*/
/*   %exitcond210 = icmp eq i32 %114, %smax164*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_135))
begin
filter_slice_planar___crit_edge299_exitcond210_reg <= filter_slice_planar___crit_edge299_exitcond210;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge299_exitcond210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge299_exitcond210_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge16*/
/*   %indvar.next167 = add i32 %indvar166, 1*/
begin
filter_slice_planar___crit_edge16_indvar_next167 = (filter_slice_planar__preheader13_indvar166_reg + 32'd1);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge16*/
/*   %indvar.next167 = add i32 %indvar166, 1*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154))
begin
filter_slice_planar___crit_edge16_indvar_next167_reg <= filter_slice_planar___crit_edge16_indvar_next167;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge16_indvar_next167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge16_indvar_next167_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %._crit_edge16*/
/*   %exitcond236 = icmp eq i32 %indvar.next167, %tmp235*/
begin
filter_slice_planar___crit_edge16_exitcond236 = (filter_slice_planar___crit_edge16_indvar_next167 == filter_slice_planar__preheader13_lr_ph_tmp235_reg);
end
end
always @(posedge clk) begin
/* filter_slice_planar: %._crit_edge16*/
/*   %exitcond236 = icmp eq i32 %indvar.next167, %tmp235*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge16_154))
begin
filter_slice_planar___crit_edge16_exitcond236_reg <= filter_slice_planar___crit_edge16_exitcond236;
if (reset == 1'b0 && ^(filter_slice_planar___crit_edge16_exitcond236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar___crit_edge16_exitcond236_reg"); $finish; end
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_signed_divide_32_0_op0 = filter_slice_planar_0_16;
end
/* filter_slice_planar: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
else /* if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_7)) */
begin
filter_slice_planar_signed_divide_32_0_op0 = filter_slice_planar_0_19_reg;
end
end
always @(*) begin
/* filter_slice_planar: %0*/
/*   %17 = sdiv i32 %16, %nb_jobs*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
filter_slice_planar_signed_divide_32_0_op1 = arg_nb_jobs;
end
/* filter_slice_planar: %0*/
/*   %20 = sdiv i32 %19, %nb_jobs*/
else /* if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_7)) */
begin
filter_slice_planar_signed_divide_32_0_op1 = arg_nb_jobs;
end
end
always @(*) begin
lpm_divide_filter_slice_planar_0_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_filter_slice_planar_0_20_out = lpm_divide_filter_slice_planar_0_20_temp_out;
end
always @(*) begin
filter_slice_planar_signed_divide_32_0 = lpm_divide_filter_slice_planar_0_20_out;
end
always @(*) begin
lpm_mult_filter_slice_planar_0_16_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %16 = mul nsw i32 %15, %jobnr*/
if ((lpm_mult_filter_slice_planar_0_16_en == 1'd1))
begin
filter_slice_planar_0_16_stage0_reg <= (filter_slice_planar_0_15 * arg_jobnr);
end
end
always @(*) begin
lpm_mult_filter_slice_planar_0_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %0*/
/*   %19 = mul nsw i32 %15, %18*/
if ((lpm_mult_filter_slice_planar_0_19_en == 1'd1))
begin
filter_slice_planar_0_19_stage0_reg <= (filter_slice_planar_0_15 * filter_slice_planar_0_18_reg);
end
end
always @(*) begin
lpm_divide_filter_slice_planar_0_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_filter_slice_planar_46_tmp113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %tmp113 = mul i32 %32, %tmp111289*/
if ((lpm_mult_filter_slice_planar_46_tmp113_en == 1'd1))
begin
filter_slice_planar_46_tmp113_stage0_reg <= (filter_slice_planar__lr_ph12_32_reg * filter_slice_planar_46_tmp111289);
end
end
always @(*) begin
lpm_mult_filter_slice_planar_46_tmp118_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %46*/
/*   %tmp118 = mul i32 %40, %tmp111289*/
if ((lpm_mult_filter_slice_planar_46_tmp118_en == 1'd1))
begin
filter_slice_planar_46_tmp118_stage0_reg <= (filter_slice_planar__lr_ph12_40_reg * filter_slice_planar_46_tmp111289);
end
end
always @(*) begin
lpm_mult_filter_slice_planar__preheader13_tmp239_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp239 = mul i32 %83, %tmp237301*/
if ((lpm_mult_filter_slice_planar__preheader13_tmp239_en == 1'd1))
begin
filter_slice_planar__preheader13_tmp239_stage0_reg <= (filter_slice_planar__preheader13_lr_ph_83_reg * filter_slice_planar__preheader13_tmp237301);
end
end
always @(*) begin
lpm_mult_filter_slice_planar__preheader13_tmp244_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* filter_slice_planar: %.preheader13*/
/*   %tmp244 = mul i32 %81, %tmp237301*/
if ((lpm_mult_filter_slice_planar__preheader13_tmp244_en == 1'd1))
begin
filter_slice_planar__preheader13_tmp244_stage0_reg <= (filter_slice_planar__preheader13_lr_ph_81_reg * filter_slice_planar__preheader13_tmp237301);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* filter_slice_planar: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_157))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %62, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %65, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %68, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %107, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %110, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146))
begin
memory_controller_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %113, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
memory_controller_address_a = filter_slice_planar_0_4;
end
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_address_a = filter_slice_planar_0_6_reg;
end
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
memory_controller_address_a = filter_slice_planar_0_11;
end
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_address_a = filter_slice_planar_0_12;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_address_a = filter_slice_planar__lr_ph12_25;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_address_a = filter_slice_planar__lr_ph12_33_reg;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_address_a = filter_slice_planar__lr_ph12_27;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_address_a = filter_slice_planar__lr_ph12_35;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
memory_controller_address_a = filter_slice_planar__lr_ph12_41_reg;
end
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52))
begin
memory_controller_address_a = filter_slice_planar__lr_ph_47;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
memory_controller_address_a = filter_slice_planar___crit_edge298_50;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
memory_controller_address_a = filter_slice_planar___crit_edge298_53;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
memory_controller_address_a = filter_slice_planar___crit_edge298_56;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep104;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_61;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %62, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep108_reg;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep104_reg;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %65, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep108_reg;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep104_reg;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %68, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
memory_controller_address_a = filter_slice_planar___crit_edge297_scevgep108_reg;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_address_a = filter_slice_planar__preheader13_lr_ph_74;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_address_a = filter_slice_planar__preheader13_lr_ph_73_reg;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_address_a = filter_slice_planar__preheader13_lr_ph_79;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_address_a = filter_slice_planar__preheader13_lr_ph_82_reg;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110))
begin
memory_controller_address_a = filter_slice_planar__lr_ph15_92;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
memory_controller_address_a = filter_slice_planar___crit_edge300_95;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
memory_controller_address_a = filter_slice_planar___crit_edge300_98;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
memory_controller_address_a = filter_slice_planar___crit_edge300_101;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep230;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_106;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %107, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep234_reg;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep230_reg;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %110, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep234_reg;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep230_reg;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %113, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
memory_controller_address_a = filter_slice_planar___crit_edge299_scevgep234_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %62, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %65, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %68, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %107, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %110, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
memory_controller_write_enable_a = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146))
begin
memory_controller_write_enable_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %113, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %62, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
memory_controller_in_a = filter_slice_planar___crit_edge297_62;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %65, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
memory_controller_in_a = filter_slice_planar___crit_edge297_65;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %68, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
memory_controller_in_a = filter_slice_planar___crit_edge297_68;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %107, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
memory_controller_in_a = filter_slice_planar___crit_edge299_107;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %110, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
memory_controller_in_a = filter_slice_planar___crit_edge299_110;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %113, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
memory_controller_in_a = filter_slice_planar___crit_edge299_113;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %5 = load %struct.TYPE_9__** %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %7 = load %struct.TYPE_9__** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %12 = load i32** %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %26 = load i32*** %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %34 = load i32*** %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %28 = load i32** %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %36 = load i32** %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %42 = load i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_45))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph*/
/*   %48 = load i32** %47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_52))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %51 = load i32* %50, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_60))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %54 = load i32* %53, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_65))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %57 = load i32* %56, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_70))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %60 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_78))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %62 = load i32* %61, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_80))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %62, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_82))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %63 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_83))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %65, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_87))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %66 = load i32* %scevgep104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_88))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   store i32 %68, i32* %scevgep108, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_92))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %75 = load i32*** %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %77 = load i32** %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %81 = load i32* %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %85 = load i32** %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %93 = load i32** %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_110))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %96 = load i32* %95, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_118))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %99 = load i32* %98, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_123))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %102 = load i32* %101, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_128))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %105 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_136))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %107 = load i32* %106, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_138))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %107, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_140))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %108 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_141))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %110, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_145))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %111 = load i32* %scevgep230, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_146))
begin
memory_controller_size_a = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   store i32 %113, i32* %scevgep234, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_150))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %51, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %54, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %57, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %58, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %96, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %99, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %102, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %103, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
memory_controller_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_2))
begin
memory_controller_address_b = filter_slice_planar_0_1_reg;
end
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_address_b = filter_slice_planar_0_14;
end
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
memory_controller_address_b = filter_slice_planar_0_9_reg;
end
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_address_b = filter_slice_planar_0_21_reg;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_address_b = filter_slice_planar__lr_ph12_29;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_address_b = filter_slice_planar__lr_ph12_37_reg;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_address_b = filter_slice_planar__lr_ph12_31;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_address_b = filter_slice_planar__lr_ph12_39;
end
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50))
begin
memory_controller_address_b = filter_slice_planar__lr_ph12_44_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep81;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %51, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep76_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep81_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %54, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep76_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep81_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %57, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep76_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep81_reg;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %58, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
memory_controller_address_b = filter_slice_planar___crit_edge298_scevgep76_reg;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
memory_controller_address_b = filter_slice_planar___crit_edge297_64;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
memory_controller_address_b = filter_slice_planar___crit_edge297_67;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_72;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_71_reg;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_80;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_84_reg;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_87_reg;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108))
begin
memory_controller_address_b = filter_slice_planar__preheader13_lr_ph_90_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep207;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %96, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep202_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep207_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %99, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep202_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep207_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %102, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep202_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep207_reg;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %103, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
memory_controller_address_b = filter_slice_planar___crit_edge300_scevgep202_reg;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
memory_controller_address_b = filter_slice_planar___crit_edge299_109;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
memory_controller_address_b = filter_slice_planar___crit_edge299_112;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %51, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %54, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %57, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %58, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %96, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %99, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %102, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %103, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
memory_controller_write_enable_b = 1'd1;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
memory_controller_write_enable_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %51, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
memory_controller_in_b = filter_slice_planar___crit_edge298_51;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %54, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
memory_controller_in_b = filter_slice_planar___crit_edge298_54;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %57, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
memory_controller_in_b = filter_slice_planar___crit_edge298_57;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %58, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
memory_controller_in_b = filter_slice_planar___crit_edge298_58;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %96, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
memory_controller_in_b = filter_slice_planar___crit_edge300_96;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %99, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
memory_controller_in_b = filter_slice_planar___crit_edge300_99;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %102, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
memory_controller_in_b = filter_slice_planar___crit_edge300_102;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %103, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
memory_controller_in_b = filter_slice_planar___crit_edge300_103;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* filter_slice_planar: %0*/
/*   %2 = load %struct.TYPE_8__** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %30 = load i32** %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_41))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %38 = load i32** %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_42))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %32 = load i32* %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_43))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph12*/
/*   %40 = load i32* %39, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph12_44))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph*/
/*   %47 = load i32*** %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph_50))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %49 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_58))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %51, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_62))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %52 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_63))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %54, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_67))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %55 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_68))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %57, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_72))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   %58 = load i32* %scevgep81, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_73))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge298*/
/*   store i32 %58, i32* %scevgep76, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge298_75))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %65 = load i32* %64, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_85))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge297*/
/*   %68 = load i32* %67, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge297_90))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %76 = load i32*** %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_98))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %78 = load i32** %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_99))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %83 = load i32* %80, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_101))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %86 = load i32** %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_102))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.preheader13.lr.ph*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__preheader13_lr_ph_103))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %.lr.ph15*/
/*   %92 = load i32*** %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__lr_ph15_108))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %94 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_116))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %96, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_120))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %97 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_121))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %99, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_125))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %100 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_126))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %102, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_130))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   %103 = load i32* %scevgep207, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_131))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge300*/
/*   store i32 %103, i32* %scevgep202, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge300_133))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %110 = load i32* %109, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_143))
begin
memory_controller_size_b = 2'd2;
end
/* filter_slice_planar: %._crit_edge299*/
/*   %113 = load i32* %112, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB___crit_edge299_148))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* filter_slice_planar: %.loopexit*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_filter_slice_planar_BB__loopexit_157))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  filter_slice_planar_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_arg_ctx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_arg_arg;
reg [31:0] filter_slice_planar_arg_jobnr;
reg [31:0] filter_slice_planar_arg_nb_jobs;
wire  filter_slice_planar_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_memory_controller_address_a;
wire  filter_slice_planar_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_planar_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_planar_memory_controller_out_a;
wire [1:0] filter_slice_planar_memory_controller_size_a;
wire  filter_slice_planar_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] filter_slice_planar_memory_controller_address_b;
wire  filter_slice_planar_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_planar_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] filter_slice_planar_memory_controller_out_b;
wire [1:0] filter_slice_planar_memory_controller_size_b;
reg  filter_slice_planar_memory_controller_waitrequest;
wire  filter_slice_planar_finish;
reg  filter_slice_planar_finish_final;
wire [31:0] filter_slice_planar_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


filter_slice_planar filter_slice_planar_inst (
	.memory_controller_enable_a (filter_slice_planar_memory_controller_enable_a),
	.memory_controller_address_a (filter_slice_planar_memory_controller_address_a),
	.memory_controller_write_enable_a (filter_slice_planar_memory_controller_write_enable_a),
	.memory_controller_in_a (filter_slice_planar_memory_controller_in_a),
	.memory_controller_size_a (filter_slice_planar_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (filter_slice_planar_memory_controller_enable_b),
	.memory_controller_address_b (filter_slice_planar_memory_controller_address_b),
	.memory_controller_write_enable_b (filter_slice_planar_memory_controller_write_enable_b),
	.memory_controller_in_b (filter_slice_planar_memory_controller_in_b),
	.memory_controller_size_b (filter_slice_planar_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (filter_slice_planar_start),
	.finish (filter_slice_planar_finish),
	.return_val (filter_slice_planar_return_val),
	.arg_ctx (filter_slice_planar_arg_ctx),
	.arg_arg (filter_slice_planar_arg_arg),
	.arg_jobnr (filter_slice_planar_arg_jobnr),
	.arg_nb_jobs (filter_slice_planar_arg_nb_jobs)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (filter_slice_planar_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
main_0_1 = filter_slice_planar_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_planar_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
filter_slice_planar_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_planar_arg_ctx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_arg_ctx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_planar_arg_arg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_arg_arg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_planar_arg_jobnr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_arg_jobnr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
filter_slice_planar_arg_nb_jobs <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to filter_slice_planar_arg_nb_jobs"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
filter_slice_planar_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
begin
filter_slice_planar_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
filter_slice_planar_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
filter_slice_planar_finish_final = filter_slice_planar_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = filter_slice_planar_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = filter_slice_planar_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_planar_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_planar_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = filter_slice_planar_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = filter_slice_planar_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_planar_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_planar_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = filter_slice_planar_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = filter_slice_planar_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = filter_slice_planar_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = filter_slice_planar_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_planar_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = filter_slice_planar_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = filter_slice_planar_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = filter_slice_planar_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_planar_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = filter_slice_planar_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = filter_slice_planar_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @filter_slice_planar(%struct.TYPE_10__* undef, i8* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = filter_slice_planar_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
