//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:57 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module wcstombs_sbcs
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_table,
	arg_src,
	arg_srclen,
	arg_dst,
	arg_dstlen
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB__preheader_1 = 9'd1;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB__preheader_2 = 9'd2;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB__preheader_3 = 9'd3;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB__lr_ph_4 = 9'd4;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_5 = 9'd5;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_6 = 9'd6;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_7 = 9'd7;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_8 = 9'd8;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_9 = 9'd9;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_10 = 9'd10;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_11 = 9'd11;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_12 = 9'd12;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_13 = 9'd13;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_14 = 9'd14;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_15 = 9'd15;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_16 = 9'd16;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_17 = 9'd17;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_18 = 9'd18;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_19 = 9'd19;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_20 = 9'd20;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_21 = 9'd21;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_22 = 9'd22;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_23 = 9'd23;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_24 = 9'd24;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_25 = 9'd25;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_26 = 9'd26;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_27 = 9'd27;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_28 = 9'd28;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_29 = 9'd29;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_30 = 9'd30;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_31 = 9'd31;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_32 = 9'd32;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_33 = 9'd33;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_34 = 9'd34;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_35 = 9'd35;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_36 = 9'd36;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_37 = 9'd37;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_38 = 9'd38;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_39 = 9'd39;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_40 = 9'd40;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_41 = 9'd41;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_42 = 9'd42;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_43 = 9'd43;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_44 = 9'd44;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_45 = 9'd45;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_46 = 9'd46;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_47 = 9'd47;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_48 = 9'd48;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_49 = 9'd49;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_50 = 9'd50;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_51 = 9'd51;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_52 = 9'd52;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_53 = 9'd53;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_54 = 9'd54;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_55 = 9'd55;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_56 = 9'd56;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_57 = 9'd57;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_58 = 9'd58;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_59 = 9'd59;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_60 = 9'd60;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_61 = 9'd61;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_62 = 9'd62;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_63 = 9'd63;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_64 = 9'd64;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_65 = 9'd65;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_66 = 9'd66;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_67 = 9'd67;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_68 = 9'd68;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_69 = 9'd69;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_70 = 9'd70;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_71 = 9'd71;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_72 = 9'd72;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_73 = 9'd73;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_74 = 9'd74;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_75 = 9'd75;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_76 = 9'd76;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_77 = 9'd77;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_78 = 9'd78;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_79 = 9'd79;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_80 = 9'd80;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_81 = 9'd81;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_82 = 9'd82;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_83 = 9'd83;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_84 = 9'd84;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_85 = 9'd85;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_86 = 9'd86;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_87 = 9'd87;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_88 = 9'd88;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_89 = 9'd89;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_90 = 9'd90;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_91 = 9'd91;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_92 = 9'd92;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_93 = 9'd93;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_94 = 9'd94;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_95 = 9'd95;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_96 = 9'd96;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_97 = 9'd97;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_98 = 9'd98;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_99 = 9'd99;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_100 = 9'd100;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_101 = 9'd101;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_102 = 9'd102;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_103 = 9'd103;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_104 = 9'd104;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_105 = 9'd105;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_106 = 9'd106;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_107 = 9'd107;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_108 = 9'd108;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_109 = 9'd109;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_110 = 9'd110;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_111 = 9'd111;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_112 = 9'd112;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_113 = 9'd113;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_114 = 9'd114;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_115 = 9'd115;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_116 = 9'd116;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_117 = 9'd117;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_118 = 9'd118;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_119 = 9'd119;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_120 = 9'd120;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_121 = 9'd121;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_122 = 9'd122;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_123 = 9'd123;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_124 = 9'd124;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_125 = 9'd125;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_126 = 9'd126;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_127 = 9'd127;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_128 = 9'd128;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_129 = 9'd129;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_130 = 9'd130;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_131 = 9'd131;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_132 = 9'd132;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_6_133 = 9'd133;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB___crit_edge_134 = 9'd134;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB___crit_edge_135 = 9'd135;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_152_136 = 9'd136;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_137 = 9'd137;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_138 = 9'd138;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_139 = 9'd139;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_140 = 9'd140;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_141 = 9'd141;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_142 = 9'd142;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_143 = 9'd143;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_144 = 9'd144;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_145 = 9'd145;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_153_146 = 9'd146;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_147 = 9'd147;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_148 = 9'd148;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_149 = 9'd149;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_150 = 9'd150;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_151 = 9'd151;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_152 = 9'd152;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_153 = 9'd153;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_154 = 9'd154;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_155 = 9'd155;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_165_156 = 9'd156;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_157 = 9'd157;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_158 = 9'd158;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_159 = 9'd159;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_160 = 9'd160;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_161 = 9'd161;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_162 = 9'd162;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_163 = 9'd163;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_164 = 9'd164;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_165 = 9'd165;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_177_166 = 9'd166;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_167 = 9'd167;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_168 = 9'd168;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_169 = 9'd169;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_170 = 9'd170;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_171 = 9'd171;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_172 = 9'd172;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_173 = 9'd173;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_174 = 9'd174;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_175 = 9'd175;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_189_176 = 9'd176;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_177 = 9'd177;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_178 = 9'd178;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_179 = 9'd179;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_180 = 9'd180;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_181 = 9'd181;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_182 = 9'd182;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_183 = 9'd183;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_184 = 9'd184;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_185 = 9'd185;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_201_186 = 9'd186;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_187 = 9'd187;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_188 = 9'd188;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_189 = 9'd189;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_190 = 9'd190;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_191 = 9'd191;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_192 = 9'd192;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_193 = 9'd193;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_194 = 9'd194;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_195 = 9'd195;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_213_196 = 9'd196;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_197 = 9'd197;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_198 = 9'd198;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_199 = 9'd199;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_200 = 9'd200;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_201 = 9'd201;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_202 = 9'd202;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_203 = 9'd203;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_204 = 9'd204;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_205 = 9'd205;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_225_206 = 9'd206;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_207 = 9'd207;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_208 = 9'd208;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_209 = 9'd209;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_210 = 9'd210;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_211 = 9'd211;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_212 = 9'd212;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_213 = 9'd213;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_214 = 9'd214;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_215 = 9'd215;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_237_216 = 9'd216;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_217 = 9'd217;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_218 = 9'd218;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_219 = 9'd219;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_220 = 9'd220;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_221 = 9'd221;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_222 = 9'd222;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_223 = 9'd223;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_224 = 9'd224;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_225 = 9'd225;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_249_226 = 9'd226;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_227 = 9'd227;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_228 = 9'd228;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_229 = 9'd229;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_230 = 9'd230;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_231 = 9'd231;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_232 = 9'd232;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_233 = 9'd233;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_234 = 9'd234;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_235 = 9'd235;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_261_236 = 9'd236;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_237 = 9'd237;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_238 = 9'd238;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_239 = 9'd239;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_240 = 9'd240;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_241 = 9'd241;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_242 = 9'd242;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_243 = 9'd243;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_244 = 9'd244;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_245 = 9'd245;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_273_246 = 9'd246;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_247 = 9'd247;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_248 = 9'd248;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_249 = 9'd249;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_250 = 9'd250;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_251 = 9'd251;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_252 = 9'd252;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_253 = 9'd253;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_254 = 9'd254;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_255 = 9'd255;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_285_256 = 9'd256;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_257 = 9'd257;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_258 = 9'd258;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_259 = 9'd259;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_260 = 9'd260;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_261 = 9'd261;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_262 = 9'd262;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_263 = 9'd263;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_264 = 9'd264;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_265 = 9'd265;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_297_266 = 9'd266;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_267 = 9'd267;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_268 = 9'd268;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_269 = 9'd269;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_270 = 9'd270;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_271 = 9'd271;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_272 = 9'd272;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_273 = 9'd273;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_274 = 9'd274;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_275 = 9'd275;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_309_276 = 9'd276;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_277 = 9'd277;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_278 = 9'd278;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_279 = 9'd279;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_280 = 9'd280;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_281 = 9'd281;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_282 = 9'd282;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_283 = 9'd283;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_284 = 9'd284;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_285 = 9'd285;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_321_286 = 9'd286;
parameter [8:0] LEGUP_F_wcstombs_sbcs_BB_333_287 = 9'd287;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_table;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_src;
input [31:0] arg_srclen;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dst;
input [31:0] arg_dstlen;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs__preheader_3_reg;
reg  wcstombs_sbcs__preheader_4;
reg  wcstombs_sbcs__preheader_4_reg;
reg [31:0] wcstombs_sbcs__preheader__01_ph;
reg [31:0] wcstombs_sbcs__preheader__01_ph_reg;
reg [31:0] wcstombs_sbcs__preheader_ret_0_ph;
reg [31:0] wcstombs_sbcs__preheader_ret_0_ph_reg;
reg  wcstombs_sbcs__preheader_5;
reg  wcstombs_sbcs__preheader_5_reg;
reg [31:0] wcstombs_sbcs__lr_ph_tmp98;
reg [31:0] wcstombs_sbcs__lr_ph_tmp98_reg;
reg [31:0] wcstombs_sbcs_6_indvar;
reg [31:0] wcstombs_sbcs_6_indvar_reg;
reg [31:0] wcstombs_sbcs_6_tmp;
reg [31:0] wcstombs_sbcs_6_tmp_reg;
reg [31:0] wcstombs_sbcs_6_tmp65117;
reg [31:0] wcstombs_sbcs_6_tmp65117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep_reg;
reg [31:0] wcstombs_sbcs_6_tmp66118;
reg [31:0] wcstombs_sbcs_6_tmp66118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep67_reg;
reg [31:0] wcstombs_sbcs_6_tmp68119;
reg [31:0] wcstombs_sbcs_6_tmp68119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep69_reg;
reg [31:0] wcstombs_sbcs_6_tmp70120;
reg [31:0] wcstombs_sbcs_6_tmp70120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep71_reg;
reg [31:0] wcstombs_sbcs_6_tmp72121;
reg [31:0] wcstombs_sbcs_6_tmp72121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep73_reg;
reg [31:0] wcstombs_sbcs_6_tmp74122;
reg [31:0] wcstombs_sbcs_6_tmp74122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep75_reg;
reg [31:0] wcstombs_sbcs_6_tmp76123;
reg [31:0] wcstombs_sbcs_6_tmp76123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep77_reg;
reg [31:0] wcstombs_sbcs_6_tmp78124;
reg [31:0] wcstombs_sbcs_6_tmp78124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep79_reg;
reg [31:0] wcstombs_sbcs_6_tmp80125;
reg [31:0] wcstombs_sbcs_6_tmp80125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep81_reg;
reg [31:0] wcstombs_sbcs_6_tmp82126;
reg [31:0] wcstombs_sbcs_6_tmp82126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep83_reg;
reg [31:0] wcstombs_sbcs_6_tmp84127;
reg [31:0] wcstombs_sbcs_6_tmp84127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep85_reg;
reg [31:0] wcstombs_sbcs_6_tmp86128;
reg [31:0] wcstombs_sbcs_6_tmp86128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep87_reg;
reg [31:0] wcstombs_sbcs_6_tmp88129;
reg [31:0] wcstombs_sbcs_6_tmp88129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep89_reg;
reg [31:0] wcstombs_sbcs_6_tmp90130;
reg [31:0] wcstombs_sbcs_6_tmp90130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep91_reg;
reg [31:0] wcstombs_sbcs_6_tmp92131;
reg [31:0] wcstombs_sbcs_6_tmp92131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6__060;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6__060_reg;
reg [31:0] wcstombs_sbcs_6_tmp97;
reg [31:0] wcstombs_sbcs_6_tmp97_reg;
reg [31:0] wcstombs_sbcs_6_tmp99;
reg [31:0] wcstombs_sbcs_6_tmp99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_scevgep114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6__0258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6__0258_reg;
reg [31:0] wcstombs_sbcs_6_7;
reg [31:0] wcstombs_sbcs_6_7_reg;
reg [31:0] wcstombs_sbcs_6_8;
reg [31:0] wcstombs_sbcs_6_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_9_reg;
reg [15:0] wcstombs_sbcs_6_10;
reg [15:0] wcstombs_sbcs_6_10_reg;
reg [31:0] wcstombs_sbcs_6_11;
reg [31:0] wcstombs_sbcs_6_11_reg;
reg [31:0] wcstombs_sbcs_6_12;
reg [31:0] wcstombs_sbcs_6_12_reg;
reg [31:0] wcstombs_sbcs_6_13;
reg [31:0] wcstombs_sbcs_6_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_14_reg;
reg [7:0] wcstombs_sbcs_6_15;
reg [7:0] wcstombs_sbcs_6_15_reg;
reg [31:0] wcstombs_sbcs_6_16;
reg [31:0] wcstombs_sbcs_6_16_reg;
reg [31:0] wcstombs_sbcs_6_17;
reg [31:0] wcstombs_sbcs_6_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_18_reg;
reg [15:0] wcstombs_sbcs_6_19;
reg [15:0] wcstombs_sbcs_6_19_reg;
reg [31:0] wcstombs_sbcs_6_20;
reg [31:0] wcstombs_sbcs_6_20_reg;
reg [31:0] wcstombs_sbcs_6_21;
reg [31:0] wcstombs_sbcs_6_21_reg;
reg [31:0] wcstombs_sbcs_6_22;
reg [31:0] wcstombs_sbcs_6_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_23_reg;
reg [7:0] wcstombs_sbcs_6_24;
reg [7:0] wcstombs_sbcs_6_24_reg;
reg [31:0] wcstombs_sbcs_6_25;
reg [31:0] wcstombs_sbcs_6_25_reg;
reg [31:0] wcstombs_sbcs_6_26;
reg [31:0] wcstombs_sbcs_6_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_27_reg;
reg [15:0] wcstombs_sbcs_6_28;
reg [15:0] wcstombs_sbcs_6_28_reg;
reg [31:0] wcstombs_sbcs_6_29;
reg [31:0] wcstombs_sbcs_6_29_reg;
reg [31:0] wcstombs_sbcs_6_30;
reg [31:0] wcstombs_sbcs_6_30_reg;
reg [31:0] wcstombs_sbcs_6_31;
reg [31:0] wcstombs_sbcs_6_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_32_reg;
reg [7:0] wcstombs_sbcs_6_33;
reg [7:0] wcstombs_sbcs_6_33_reg;
reg [31:0] wcstombs_sbcs_6_34;
reg [31:0] wcstombs_sbcs_6_34_reg;
reg [31:0] wcstombs_sbcs_6_35;
reg [31:0] wcstombs_sbcs_6_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_36_reg;
reg [15:0] wcstombs_sbcs_6_37;
reg [15:0] wcstombs_sbcs_6_37_reg;
reg [31:0] wcstombs_sbcs_6_38;
reg [31:0] wcstombs_sbcs_6_38_reg;
reg [31:0] wcstombs_sbcs_6_39;
reg [31:0] wcstombs_sbcs_6_39_reg;
reg [31:0] wcstombs_sbcs_6_40;
reg [31:0] wcstombs_sbcs_6_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_41_reg;
reg [7:0] wcstombs_sbcs_6_42;
reg [7:0] wcstombs_sbcs_6_42_reg;
reg [31:0] wcstombs_sbcs_6_43;
reg [31:0] wcstombs_sbcs_6_43_reg;
reg [31:0] wcstombs_sbcs_6_44;
reg [31:0] wcstombs_sbcs_6_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_45_reg;
reg [15:0] wcstombs_sbcs_6_46;
reg [15:0] wcstombs_sbcs_6_46_reg;
reg [31:0] wcstombs_sbcs_6_47;
reg [31:0] wcstombs_sbcs_6_47_reg;
reg [31:0] wcstombs_sbcs_6_48;
reg [31:0] wcstombs_sbcs_6_48_reg;
reg [31:0] wcstombs_sbcs_6_49;
reg [31:0] wcstombs_sbcs_6_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_50_reg;
reg [7:0] wcstombs_sbcs_6_51;
reg [7:0] wcstombs_sbcs_6_51_reg;
reg [31:0] wcstombs_sbcs_6_52;
reg [31:0] wcstombs_sbcs_6_52_reg;
reg [31:0] wcstombs_sbcs_6_53;
reg [31:0] wcstombs_sbcs_6_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_54_reg;
reg [15:0] wcstombs_sbcs_6_55;
reg [15:0] wcstombs_sbcs_6_55_reg;
reg [31:0] wcstombs_sbcs_6_56;
reg [31:0] wcstombs_sbcs_6_56_reg;
reg [31:0] wcstombs_sbcs_6_57;
reg [31:0] wcstombs_sbcs_6_57_reg;
reg [31:0] wcstombs_sbcs_6_58;
reg [31:0] wcstombs_sbcs_6_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_59_reg;
reg [7:0] wcstombs_sbcs_6_60;
reg [7:0] wcstombs_sbcs_6_60_reg;
reg [31:0] wcstombs_sbcs_6_61;
reg [31:0] wcstombs_sbcs_6_61_reg;
reg [31:0] wcstombs_sbcs_6_62;
reg [31:0] wcstombs_sbcs_6_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_63_reg;
reg [15:0] wcstombs_sbcs_6_64;
reg [15:0] wcstombs_sbcs_6_64_reg;
reg [31:0] wcstombs_sbcs_6_65;
reg [31:0] wcstombs_sbcs_6_65_reg;
reg [31:0] wcstombs_sbcs_6_66;
reg [31:0] wcstombs_sbcs_6_66_reg;
reg [31:0] wcstombs_sbcs_6_67;
reg [31:0] wcstombs_sbcs_6_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_68_reg;
reg [7:0] wcstombs_sbcs_6_69;
reg [7:0] wcstombs_sbcs_6_69_reg;
reg [31:0] wcstombs_sbcs_6_70;
reg [31:0] wcstombs_sbcs_6_70_reg;
reg [31:0] wcstombs_sbcs_6_71;
reg [31:0] wcstombs_sbcs_6_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_72_reg;
reg [15:0] wcstombs_sbcs_6_73;
reg [15:0] wcstombs_sbcs_6_73_reg;
reg [31:0] wcstombs_sbcs_6_74;
reg [31:0] wcstombs_sbcs_6_74_reg;
reg [31:0] wcstombs_sbcs_6_75;
reg [31:0] wcstombs_sbcs_6_75_reg;
reg [31:0] wcstombs_sbcs_6_76;
reg [31:0] wcstombs_sbcs_6_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_77_reg;
reg [7:0] wcstombs_sbcs_6_78;
reg [7:0] wcstombs_sbcs_6_78_reg;
reg [31:0] wcstombs_sbcs_6_79;
reg [31:0] wcstombs_sbcs_6_79_reg;
reg [31:0] wcstombs_sbcs_6_80;
reg [31:0] wcstombs_sbcs_6_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_81_reg;
reg [15:0] wcstombs_sbcs_6_82;
reg [15:0] wcstombs_sbcs_6_82_reg;
reg [31:0] wcstombs_sbcs_6_83;
reg [31:0] wcstombs_sbcs_6_83_reg;
reg [31:0] wcstombs_sbcs_6_84;
reg [31:0] wcstombs_sbcs_6_84_reg;
reg [31:0] wcstombs_sbcs_6_85;
reg [31:0] wcstombs_sbcs_6_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_86_reg;
reg [7:0] wcstombs_sbcs_6_87;
reg [7:0] wcstombs_sbcs_6_87_reg;
reg [31:0] wcstombs_sbcs_6_88;
reg [31:0] wcstombs_sbcs_6_88_reg;
reg [31:0] wcstombs_sbcs_6_89;
reg [31:0] wcstombs_sbcs_6_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_90_reg;
reg [15:0] wcstombs_sbcs_6_91;
reg [15:0] wcstombs_sbcs_6_91_reg;
reg [31:0] wcstombs_sbcs_6_92;
reg [31:0] wcstombs_sbcs_6_92_reg;
reg [31:0] wcstombs_sbcs_6_93;
reg [31:0] wcstombs_sbcs_6_93_reg;
reg [31:0] wcstombs_sbcs_6_94;
reg [31:0] wcstombs_sbcs_6_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_95_reg;
reg [7:0] wcstombs_sbcs_6_96;
reg [7:0] wcstombs_sbcs_6_96_reg;
reg [31:0] wcstombs_sbcs_6_97;
reg [31:0] wcstombs_sbcs_6_97_reg;
reg [31:0] wcstombs_sbcs_6_98;
reg [31:0] wcstombs_sbcs_6_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_99_reg;
reg [15:0] wcstombs_sbcs_6_100;
reg [15:0] wcstombs_sbcs_6_100_reg;
reg [31:0] wcstombs_sbcs_6_101;
reg [31:0] wcstombs_sbcs_6_101_reg;
reg [31:0] wcstombs_sbcs_6_102;
reg [31:0] wcstombs_sbcs_6_102_reg;
reg [31:0] wcstombs_sbcs_6_103;
reg [31:0] wcstombs_sbcs_6_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_104_reg;
reg [7:0] wcstombs_sbcs_6_105;
reg [7:0] wcstombs_sbcs_6_105_reg;
reg [31:0] wcstombs_sbcs_6_106;
reg [31:0] wcstombs_sbcs_6_106_reg;
reg [31:0] wcstombs_sbcs_6_107;
reg [31:0] wcstombs_sbcs_6_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_108_reg;
reg [15:0] wcstombs_sbcs_6_109;
reg [15:0] wcstombs_sbcs_6_109_reg;
reg [31:0] wcstombs_sbcs_6_110;
reg [31:0] wcstombs_sbcs_6_110_reg;
reg [31:0] wcstombs_sbcs_6_111;
reg [31:0] wcstombs_sbcs_6_111_reg;
reg [31:0] wcstombs_sbcs_6_112;
reg [31:0] wcstombs_sbcs_6_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_113_reg;
reg [7:0] wcstombs_sbcs_6_114;
reg [7:0] wcstombs_sbcs_6_114_reg;
reg [31:0] wcstombs_sbcs_6_115;
reg [31:0] wcstombs_sbcs_6_115_reg;
reg [31:0] wcstombs_sbcs_6_116;
reg [31:0] wcstombs_sbcs_6_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_117_reg;
reg [15:0] wcstombs_sbcs_6_118;
reg [15:0] wcstombs_sbcs_6_118_reg;
reg [31:0] wcstombs_sbcs_6_119;
reg [31:0] wcstombs_sbcs_6_119_reg;
reg [31:0] wcstombs_sbcs_6_120;
reg [31:0] wcstombs_sbcs_6_120_reg;
reg [31:0] wcstombs_sbcs_6_121;
reg [31:0] wcstombs_sbcs_6_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_122_reg;
reg [7:0] wcstombs_sbcs_6_123;
reg [7:0] wcstombs_sbcs_6_123_reg;
reg [31:0] wcstombs_sbcs_6_124;
reg [31:0] wcstombs_sbcs_6_124_reg;
reg [31:0] wcstombs_sbcs_6_125;
reg [31:0] wcstombs_sbcs_6_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_126_reg;
reg [15:0] wcstombs_sbcs_6_127;
reg [15:0] wcstombs_sbcs_6_127_reg;
reg [31:0] wcstombs_sbcs_6_128;
reg [31:0] wcstombs_sbcs_6_128_reg;
reg [31:0] wcstombs_sbcs_6_129;
reg [31:0] wcstombs_sbcs_6_129_reg;
reg [31:0] wcstombs_sbcs_6_130;
reg [31:0] wcstombs_sbcs_6_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_131_reg;
reg [7:0] wcstombs_sbcs_6_132;
reg [7:0] wcstombs_sbcs_6_132_reg;
reg [31:0] wcstombs_sbcs_6_133;
reg [31:0] wcstombs_sbcs_6_133_reg;
reg [31:0] wcstombs_sbcs_6_134;
reg [31:0] wcstombs_sbcs_6_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_135_reg;
reg [15:0] wcstombs_sbcs_6_136;
reg [15:0] wcstombs_sbcs_6_136_reg;
reg [31:0] wcstombs_sbcs_6_137;
reg [31:0] wcstombs_sbcs_6_137_reg;
reg [31:0] wcstombs_sbcs_6_138;
reg [31:0] wcstombs_sbcs_6_138_reg;
reg [31:0] wcstombs_sbcs_6_139;
reg [31:0] wcstombs_sbcs_6_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_140_reg;
reg [7:0] wcstombs_sbcs_6_141;
reg [7:0] wcstombs_sbcs_6_141_reg;
reg [31:0] wcstombs_sbcs_6_142;
reg [31:0] wcstombs_sbcs_6_142_reg;
reg [31:0] wcstombs_sbcs_6_143;
reg [31:0] wcstombs_sbcs_6_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_144_reg;
reg [15:0] wcstombs_sbcs_6_145;
reg [15:0] wcstombs_sbcs_6_145_reg;
reg [31:0] wcstombs_sbcs_6_146;
reg [31:0] wcstombs_sbcs_6_146_reg;
reg [31:0] wcstombs_sbcs_6_147;
reg [31:0] wcstombs_sbcs_6_147_reg;
reg [31:0] wcstombs_sbcs_6_148;
reg [31:0] wcstombs_sbcs_6_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_6_149_reg;
reg [7:0] wcstombs_sbcs_6_150;
reg [7:0] wcstombs_sbcs_6_150_reg;
reg  wcstombs_sbcs_6_151;
reg  wcstombs_sbcs_6_151_reg;
reg [31:0] wcstombs_sbcs_6_indvar_next;
reg [31:0] wcstombs_sbcs_6_indvar_next_reg;
reg [31:0] wcstombs_sbcs___crit_edge_tmp94;
reg [31:0] wcstombs_sbcs___crit_edge_tmp94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs___crit_edge_scevgep95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs___crit_edge_scevgep95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs___crit_edge_scevgep115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs___crit_edge_scevgep115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_152__0_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_152__0_lcssa_reg;
reg [31:0] wcstombs_sbcs_152__01_lcssa;
reg [31:0] wcstombs_sbcs_152__01_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_152__02_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_152__02_lcssa_reg;
reg [31:0] wcstombs_sbcs_153__sum30;
reg [31:0] wcstombs_sbcs_153__sum30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_154_reg;
reg [31:0] wcstombs_sbcs_153_155;
reg [31:0] wcstombs_sbcs_153_155_reg;
reg [31:0] wcstombs_sbcs_153_156;
reg [31:0] wcstombs_sbcs_153_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_157_reg;
reg [15:0] wcstombs_sbcs_153_158;
reg [15:0] wcstombs_sbcs_153_158_reg;
reg [31:0] wcstombs_sbcs_153_159;
reg [31:0] wcstombs_sbcs_153_159_reg;
reg [31:0] wcstombs_sbcs_153_160;
reg [31:0] wcstombs_sbcs_153_160_reg;
reg [31:0] wcstombs_sbcs_153_161;
reg [31:0] wcstombs_sbcs_153_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_162_reg;
reg [7:0] wcstombs_sbcs_153_163;
reg [7:0] wcstombs_sbcs_153_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_153_164_reg;
reg [31:0] wcstombs_sbcs_165__sum28;
reg [31:0] wcstombs_sbcs_165__sum28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_166_reg;
reg [31:0] wcstombs_sbcs_165_167;
reg [31:0] wcstombs_sbcs_165_167_reg;
reg [31:0] wcstombs_sbcs_165_168;
reg [31:0] wcstombs_sbcs_165_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_169_reg;
reg [15:0] wcstombs_sbcs_165_170;
reg [15:0] wcstombs_sbcs_165_170_reg;
reg [31:0] wcstombs_sbcs_165_171;
reg [31:0] wcstombs_sbcs_165_171_reg;
reg [31:0] wcstombs_sbcs_165_172;
reg [31:0] wcstombs_sbcs_165_172_reg;
reg [31:0] wcstombs_sbcs_165_173;
reg [31:0] wcstombs_sbcs_165_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_174_reg;
reg [7:0] wcstombs_sbcs_165_175;
reg [7:0] wcstombs_sbcs_165_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_165_176_reg;
reg [31:0] wcstombs_sbcs_177__sum26;
reg [31:0] wcstombs_sbcs_177__sum26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_178_reg;
reg [31:0] wcstombs_sbcs_177_179;
reg [31:0] wcstombs_sbcs_177_179_reg;
reg [31:0] wcstombs_sbcs_177_180;
reg [31:0] wcstombs_sbcs_177_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_181_reg;
reg [15:0] wcstombs_sbcs_177_182;
reg [15:0] wcstombs_sbcs_177_182_reg;
reg [31:0] wcstombs_sbcs_177_183;
reg [31:0] wcstombs_sbcs_177_183_reg;
reg [31:0] wcstombs_sbcs_177_184;
reg [31:0] wcstombs_sbcs_177_184_reg;
reg [31:0] wcstombs_sbcs_177_185;
reg [31:0] wcstombs_sbcs_177_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_186_reg;
reg [7:0] wcstombs_sbcs_177_187;
reg [7:0] wcstombs_sbcs_177_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_177_188_reg;
reg [31:0] wcstombs_sbcs_189__sum24;
reg [31:0] wcstombs_sbcs_189__sum24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_190_reg;
reg [31:0] wcstombs_sbcs_189_191;
reg [31:0] wcstombs_sbcs_189_191_reg;
reg [31:0] wcstombs_sbcs_189_192;
reg [31:0] wcstombs_sbcs_189_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_193_reg;
reg [15:0] wcstombs_sbcs_189_194;
reg [15:0] wcstombs_sbcs_189_194_reg;
reg [31:0] wcstombs_sbcs_189_195;
reg [31:0] wcstombs_sbcs_189_195_reg;
reg [31:0] wcstombs_sbcs_189_196;
reg [31:0] wcstombs_sbcs_189_196_reg;
reg [31:0] wcstombs_sbcs_189_197;
reg [31:0] wcstombs_sbcs_189_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_198_reg;
reg [7:0] wcstombs_sbcs_189_199;
reg [7:0] wcstombs_sbcs_189_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_189_200_reg;
reg [31:0] wcstombs_sbcs_201__sum22;
reg [31:0] wcstombs_sbcs_201__sum22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_202_reg;
reg [31:0] wcstombs_sbcs_201_203;
reg [31:0] wcstombs_sbcs_201_203_reg;
reg [31:0] wcstombs_sbcs_201_204;
reg [31:0] wcstombs_sbcs_201_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_205_reg;
reg [15:0] wcstombs_sbcs_201_206;
reg [15:0] wcstombs_sbcs_201_206_reg;
reg [31:0] wcstombs_sbcs_201_207;
reg [31:0] wcstombs_sbcs_201_207_reg;
reg [31:0] wcstombs_sbcs_201_208;
reg [31:0] wcstombs_sbcs_201_208_reg;
reg [31:0] wcstombs_sbcs_201_209;
reg [31:0] wcstombs_sbcs_201_209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_210_reg;
reg [7:0] wcstombs_sbcs_201_211;
reg [7:0] wcstombs_sbcs_201_211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_201_212_reg;
reg [31:0] wcstombs_sbcs_213__sum20;
reg [31:0] wcstombs_sbcs_213__sum20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_214_reg;
reg [31:0] wcstombs_sbcs_213_215;
reg [31:0] wcstombs_sbcs_213_215_reg;
reg [31:0] wcstombs_sbcs_213_216;
reg [31:0] wcstombs_sbcs_213_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_217_reg;
reg [15:0] wcstombs_sbcs_213_218;
reg [15:0] wcstombs_sbcs_213_218_reg;
reg [31:0] wcstombs_sbcs_213_219;
reg [31:0] wcstombs_sbcs_213_219_reg;
reg [31:0] wcstombs_sbcs_213_220;
reg [31:0] wcstombs_sbcs_213_220_reg;
reg [31:0] wcstombs_sbcs_213_221;
reg [31:0] wcstombs_sbcs_213_221_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_222;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_222_reg;
reg [7:0] wcstombs_sbcs_213_223;
reg [7:0] wcstombs_sbcs_213_223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_224;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_213_224_reg;
reg [31:0] wcstombs_sbcs_225__sum18;
reg [31:0] wcstombs_sbcs_225__sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_226_reg;
reg [31:0] wcstombs_sbcs_225_227;
reg [31:0] wcstombs_sbcs_225_227_reg;
reg [31:0] wcstombs_sbcs_225_228;
reg [31:0] wcstombs_sbcs_225_228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_229_reg;
reg [15:0] wcstombs_sbcs_225_230;
reg [15:0] wcstombs_sbcs_225_230_reg;
reg [31:0] wcstombs_sbcs_225_231;
reg [31:0] wcstombs_sbcs_225_231_reg;
reg [31:0] wcstombs_sbcs_225_232;
reg [31:0] wcstombs_sbcs_225_232_reg;
reg [31:0] wcstombs_sbcs_225_233;
reg [31:0] wcstombs_sbcs_225_233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_234_reg;
reg [7:0] wcstombs_sbcs_225_235;
reg [7:0] wcstombs_sbcs_225_235_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_225_236_reg;
reg [31:0] wcstombs_sbcs_237__sum16;
reg [31:0] wcstombs_sbcs_237__sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_238_reg;
reg [31:0] wcstombs_sbcs_237_239;
reg [31:0] wcstombs_sbcs_237_239_reg;
reg [31:0] wcstombs_sbcs_237_240;
reg [31:0] wcstombs_sbcs_237_240_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_241_reg;
reg [15:0] wcstombs_sbcs_237_242;
reg [15:0] wcstombs_sbcs_237_242_reg;
reg [31:0] wcstombs_sbcs_237_243;
reg [31:0] wcstombs_sbcs_237_243_reg;
reg [31:0] wcstombs_sbcs_237_244;
reg [31:0] wcstombs_sbcs_237_244_reg;
reg [31:0] wcstombs_sbcs_237_245;
reg [31:0] wcstombs_sbcs_237_245_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_246;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_246_reg;
reg [7:0] wcstombs_sbcs_237_247;
reg [7:0] wcstombs_sbcs_237_247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_248;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_237_248_reg;
reg [31:0] wcstombs_sbcs_249__sum14;
reg [31:0] wcstombs_sbcs_249__sum14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_250_reg;
reg [31:0] wcstombs_sbcs_249_251;
reg [31:0] wcstombs_sbcs_249_251_reg;
reg [31:0] wcstombs_sbcs_249_252;
reg [31:0] wcstombs_sbcs_249_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_253_reg;
reg [15:0] wcstombs_sbcs_249_254;
reg [15:0] wcstombs_sbcs_249_254_reg;
reg [31:0] wcstombs_sbcs_249_255;
reg [31:0] wcstombs_sbcs_249_255_reg;
reg [31:0] wcstombs_sbcs_249_256;
reg [31:0] wcstombs_sbcs_249_256_reg;
reg [31:0] wcstombs_sbcs_249_257;
reg [31:0] wcstombs_sbcs_249_257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_258_reg;
reg [7:0] wcstombs_sbcs_249_259;
reg [7:0] wcstombs_sbcs_249_259_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_260;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_249_260_reg;
reg [31:0] wcstombs_sbcs_261__sum12;
reg [31:0] wcstombs_sbcs_261__sum12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_262_reg;
reg [31:0] wcstombs_sbcs_261_263;
reg [31:0] wcstombs_sbcs_261_263_reg;
reg [31:0] wcstombs_sbcs_261_264;
reg [31:0] wcstombs_sbcs_261_264_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_265;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_265_reg;
reg [15:0] wcstombs_sbcs_261_266;
reg [15:0] wcstombs_sbcs_261_266_reg;
reg [31:0] wcstombs_sbcs_261_267;
reg [31:0] wcstombs_sbcs_261_267_reg;
reg [31:0] wcstombs_sbcs_261_268;
reg [31:0] wcstombs_sbcs_261_268_reg;
reg [31:0] wcstombs_sbcs_261_269;
reg [31:0] wcstombs_sbcs_261_269_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_270_reg;
reg [7:0] wcstombs_sbcs_261_271;
reg [7:0] wcstombs_sbcs_261_271_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_272;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_261_272_reg;
reg [31:0] wcstombs_sbcs_273__sum10;
reg [31:0] wcstombs_sbcs_273__sum10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_274;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_274_reg;
reg [31:0] wcstombs_sbcs_273_275;
reg [31:0] wcstombs_sbcs_273_275_reg;
reg [31:0] wcstombs_sbcs_273_276;
reg [31:0] wcstombs_sbcs_273_276_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_277;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_277_reg;
reg [15:0] wcstombs_sbcs_273_278;
reg [15:0] wcstombs_sbcs_273_278_reg;
reg [31:0] wcstombs_sbcs_273_279;
reg [31:0] wcstombs_sbcs_273_279_reg;
reg [31:0] wcstombs_sbcs_273_280;
reg [31:0] wcstombs_sbcs_273_280_reg;
reg [31:0] wcstombs_sbcs_273_281;
reg [31:0] wcstombs_sbcs_273_281_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_282_reg;
reg [7:0] wcstombs_sbcs_273_283;
reg [7:0] wcstombs_sbcs_273_283_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_273_284_reg;
reg [31:0] wcstombs_sbcs_285__sum8;
reg [31:0] wcstombs_sbcs_285__sum8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_286_reg;
reg [31:0] wcstombs_sbcs_285_287;
reg [31:0] wcstombs_sbcs_285_287_reg;
reg [31:0] wcstombs_sbcs_285_288;
reg [31:0] wcstombs_sbcs_285_288_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_289;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_289_reg;
reg [15:0] wcstombs_sbcs_285_290;
reg [15:0] wcstombs_sbcs_285_290_reg;
reg [31:0] wcstombs_sbcs_285_291;
reg [31:0] wcstombs_sbcs_285_291_reg;
reg [31:0] wcstombs_sbcs_285_292;
reg [31:0] wcstombs_sbcs_285_292_reg;
reg [31:0] wcstombs_sbcs_285_293;
reg [31:0] wcstombs_sbcs_285_293_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_294;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_294_reg;
reg [7:0] wcstombs_sbcs_285_295;
reg [7:0] wcstombs_sbcs_285_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_285_296_reg;
reg [31:0] wcstombs_sbcs_297__sum6;
reg [31:0] wcstombs_sbcs_297__sum6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_298;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_298_reg;
reg [31:0] wcstombs_sbcs_297_299;
reg [31:0] wcstombs_sbcs_297_299_reg;
reg [31:0] wcstombs_sbcs_297_300;
reg [31:0] wcstombs_sbcs_297_300_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_301_reg;
reg [15:0] wcstombs_sbcs_297_302;
reg [15:0] wcstombs_sbcs_297_302_reg;
reg [31:0] wcstombs_sbcs_297_303;
reg [31:0] wcstombs_sbcs_297_303_reg;
reg [31:0] wcstombs_sbcs_297_304;
reg [31:0] wcstombs_sbcs_297_304_reg;
reg [31:0] wcstombs_sbcs_297_305;
reg [31:0] wcstombs_sbcs_297_305_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_306_reg;
reg [7:0] wcstombs_sbcs_297_307;
reg [7:0] wcstombs_sbcs_297_307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_308;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_297_308_reg;
reg [31:0] wcstombs_sbcs_309__sum4;
reg [31:0] wcstombs_sbcs_309__sum4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_310;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_310_reg;
reg [31:0] wcstombs_sbcs_309_311;
reg [31:0] wcstombs_sbcs_309_311_reg;
reg [31:0] wcstombs_sbcs_309_312;
reg [31:0] wcstombs_sbcs_309_312_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_313_reg;
reg [15:0] wcstombs_sbcs_309_314;
reg [15:0] wcstombs_sbcs_309_314_reg;
reg [31:0] wcstombs_sbcs_309_315;
reg [31:0] wcstombs_sbcs_309_315_reg;
reg [31:0] wcstombs_sbcs_309_316;
reg [31:0] wcstombs_sbcs_309_316_reg;
reg [31:0] wcstombs_sbcs_309_317;
reg [31:0] wcstombs_sbcs_309_317_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_318;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_318_reg;
reg [7:0] wcstombs_sbcs_309_319;
reg [7:0] wcstombs_sbcs_309_319_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_320;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_309_320_reg;
reg [31:0] wcstombs_sbcs_321__sum;
reg [31:0] wcstombs_sbcs_321__sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_322;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_322_reg;
reg [31:0] wcstombs_sbcs_321_323;
reg [31:0] wcstombs_sbcs_321_323_reg;
reg [31:0] wcstombs_sbcs_321_324;
reg [31:0] wcstombs_sbcs_321_324_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_325_reg;
reg [15:0] wcstombs_sbcs_321_326;
reg [15:0] wcstombs_sbcs_321_326_reg;
reg [31:0] wcstombs_sbcs_321_327;
reg [31:0] wcstombs_sbcs_321_327_reg;
reg [31:0] wcstombs_sbcs_321_328;
reg [31:0] wcstombs_sbcs_321_328_reg;
reg [31:0] wcstombs_sbcs_321_329;
reg [31:0] wcstombs_sbcs_321_329_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_330;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_330_reg;
reg [7:0] wcstombs_sbcs_321_331;
reg [7:0] wcstombs_sbcs_321_331_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_332;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_321_332_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_wcstombs_sbcs_6_tmp97_en;
reg [31:0] wcstombs_sbcs_6_tmp97_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_1;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_1;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_3;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__preheader_3;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__lr_ph_4;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_152_136;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_152_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB__lr_ph_4;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_10;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_10;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_11;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_11;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_12;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_12;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_13;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_13;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_14;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_14;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_15;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_15;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_16;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_16;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_17;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_17;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_18;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_18;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_19;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_19;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_20;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_20;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_21;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_21;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_22;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_22;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_23;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_23;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_24;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_24;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_25;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_25;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_26;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_26;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_27;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_27;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_28;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_28;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_29;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_29;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_30;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_30;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_31;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_31;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_32;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_32;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_33;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_33;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_34;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_34;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_35;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_35;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_36;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_36;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_37;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_37;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_38;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_38;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_39;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_39;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_40;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_40;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_41;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_41;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_42;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_42;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_43;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_43;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_44;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_44;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_45;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_45;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_46;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_46;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_47;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_47;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_48;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_48;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_49;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_49;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_50;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_50;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_51;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_51;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_52;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_52;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_53;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_53;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_54;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_54;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_55;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_55;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_56;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_56;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_57;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_57;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_58;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_58;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_59;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_59;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_60;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_60;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_61;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_61;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_62;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_62;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_63;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_63;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_64;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_64;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_65;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_65;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_66;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_66;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_67;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_67;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_68;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_68;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_69;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_69;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_70;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_70;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_71;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_71;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_72;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_72;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_73;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_73;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_74;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_74;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_75;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_75;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_76;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_76;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_77;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_77;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_78;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_78;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_79;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_79;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_80;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_80;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_81;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_81;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_82;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_82;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_83;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_83;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_84;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_84;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_85;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_85;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_86;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_86;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_87;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_87;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_88;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_88;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_89;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_89;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_90;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_90;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_91;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_91;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_92;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_92;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_93;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_93;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_94;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_94;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_95;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_95;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_96;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_96;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_97;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_97;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_98;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_98;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_99;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_99;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_100;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_100;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_101;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_101;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_102;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_102;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_103;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_103;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_104;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_104;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_105;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_105;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_106;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_106;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_107;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_107;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_108;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_108;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_109;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_109;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_110;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_110;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_111;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_111;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_112;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_112;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_113;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_113;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_114;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_114;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_115;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_115;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_116;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_116;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_117;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_117;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_118;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_118;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_119;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_119;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_120;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_120;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_121;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_121;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_122;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_122;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_123;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_123;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_124;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_124;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_125;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_125;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_126;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_126;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_127;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_127;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_128;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_128;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_129;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_129;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_130;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_130;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_131;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_131;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_132;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_132;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_133;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_133;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_133) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_6_151_reg == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_133) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_6_151_reg == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB___crit_edge_134;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB___crit_edge_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB___crit_edge_134;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB___crit_edge_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB___crit_edge_135;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB___crit_edge_135;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_152_136;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_152_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_152_136;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_152_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd15)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_137;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd14)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_147;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd13)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_157;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd12)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_167;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd11)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_177;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd10)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_187;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd9)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_197;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd8)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_207;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd7)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_217;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd6)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_227;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd5)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_237;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd4)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_247;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd3)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_257;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd2)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_267;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg == 32'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_277;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((((((((((((cur_state == LEGUP_F_wcstombs_sbcs_BB_152_136) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd15)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd14)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd13)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd12)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd11)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd10)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd9)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd8)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd7)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd6)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd5)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd4)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd3)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd2)) & (wcstombs_sbcs_152__01_lcssa_reg != 32'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_333_287;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_333_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_137;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_138;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_138;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_139;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_139;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_140;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_140;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_141;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_141;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_142;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_142;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_143;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_143;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_144;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_144;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_145;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_145;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_146;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_153_146;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_153_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_147;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_147;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_148;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_148;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_149;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_149;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_150;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_150;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_151;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_151;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_152;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_152;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_153;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_153;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_154;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_154;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_155;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_155;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_156;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_165_156;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_165_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_157;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_157;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_158;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_158;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_159;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_159;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_160;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_160;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_161;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_161;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_162;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_162;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_163;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_163;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_164;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_164;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_165;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_165;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_166;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_177_166;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_177_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_167;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_167;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_168;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_168;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_169;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_169;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_170;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_170;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_171;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_171;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_172;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_172;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_173;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_173;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_174;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_174;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_175;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_175;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_176;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_189_176;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_189_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_177;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_177;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_178;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_178;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_179;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_179;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_180;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_180;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_181;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_181;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_182;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_182;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_183;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_183;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_184;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_184;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_185;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_185;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_186;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_201_186;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_201_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_187;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_187;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_188;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_188;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_189;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_189;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_190;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_190;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_191;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_191;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_192;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_192;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_193;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_193;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_194;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_194;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_195;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_195;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_196;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_213_196;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_213_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_197;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_197;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_198;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_198;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_199;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_199;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_200;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_200;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_201;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_201;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_202;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_202;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_203;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_203;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_204;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_204;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_205;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_205;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_206;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_225_206;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_225_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_207;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_207;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_208;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_208;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_209;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_209;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_210;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_210;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_211;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_211;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_212;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_212;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_213;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_213;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_214;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_214;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_215;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_215;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_216;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_237_216;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_237_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_217;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_217;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_218;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_218;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_219;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_219;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_220;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_220;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_221;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_221;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_222;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_222;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_223;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_223;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_224;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_224;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_225;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_225;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_226;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_249_226;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_249_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_227;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_227;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_228;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_228;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_229;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_229;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_230;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_230;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_231;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_231;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_232;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_232;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_233;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_233;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_234;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_234;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_235;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_235;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_236;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_261_236;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_261_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_237;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_237;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_238;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_238;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_239;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_239;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_240;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_240;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_241;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_241;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_242;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_242;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_243;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_243;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_244;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_244;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_245;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_245;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_246;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_273_246;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_273_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_247;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_247;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_248;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_248;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_249;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_249;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_250;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_250;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_251;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_251;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_252;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_252;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_253;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_253;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_254;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_254;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_255;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_255;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_256;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_285_256;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_285_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_257;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_257;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_258;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_258;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_259;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_259;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_260;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_260;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_261;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_261) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_261;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_261) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_262;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_262) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_262;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_262) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_263;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_263;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_264;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_264) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_264;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_264) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_265;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_265;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_266;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_266) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_297_266;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_297_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_266) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_267;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_267) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_267;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_267) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_268;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_268;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_269;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_269) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_269;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_269) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_270;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_270;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_271;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_271) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_271;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_271) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_272;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_272) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_272;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_272) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_273;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_273;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_274;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_274) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_274;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_274) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_275;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_275;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_276;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_276) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_309_276;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_309_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_276) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_277;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_277) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_277;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_277) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_278;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_278;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_279;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_279) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_279;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_279) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_280;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_280;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_281;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_281) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_281;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_281) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_282;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_282) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_282;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_282) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_283;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_283;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_284;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_284) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_284;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_284) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_285;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_285;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_286;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_286) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_321_286;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_321_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_286) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_333_287;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_333_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_333_287) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_wcstombs_sbcs_BB_333_287;
if (reset == 1'b0 && ^(LEGUP_F_wcstombs_sbcs_BB_333_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB_333_287) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %0 = getelementptr inbounds %struct.sbcs_table* %table, i32 0, i32 0*/
begin
wcstombs_sbcs__preheader_0 = arg_table;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %0 = getelementptr inbounds %struct.sbcs_table* %table, i32 0, i32 0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader_0_reg <= wcstombs_sbcs__preheader_0;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_0_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
begin
wcstombs_sbcs__preheader_1 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3))
begin
wcstombs_sbcs__preheader_1_reg <= wcstombs_sbcs__preheader_1;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_1_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %2 = getelementptr inbounds %struct.sbcs_table* %table, i32 0, i32 1*/
begin
wcstombs_sbcs__preheader_2 = (arg_table + 4);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %2 = getelementptr inbounds %struct.sbcs_table* %table, i32 0, i32 1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader_2_reg <= wcstombs_sbcs__preheader_2;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_2_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
begin
wcstombs_sbcs__preheader_3 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3))
begin
wcstombs_sbcs__preheader_3_reg <= wcstombs_sbcs__preheader_3;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_3_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %4 = icmp ult i32 %dstlen, %srclen*/
begin
wcstombs_sbcs__preheader_4 = (arg_dstlen < arg_srclen);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %4 = icmp ult i32 %dstlen, %srclen*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader_4_reg <= wcstombs_sbcs__preheader_4;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_4_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %.01.ph = select i1 %4, i32 %dstlen, i32 %srclen*/
begin
wcstombs_sbcs__preheader__01_ph = (wcstombs_sbcs__preheader_4 ? arg_dstlen : arg_srclen);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %.01.ph = select i1 %4, i32 %dstlen, i32 %srclen*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader__01_ph_reg <= wcstombs_sbcs__preheader__01_ph;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader__01_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader__01_ph_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %ret.0.ph = select i1 %4, i32 -1, i32 %srclen*/
begin
wcstombs_sbcs__preheader_ret_0_ph = (wcstombs_sbcs__preheader_4 ? -32'd1 : arg_srclen);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %ret.0.ph = select i1 %4, i32 -1, i32 %srclen*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader_ret_0_ph_reg <= wcstombs_sbcs__preheader_ret_0_ph;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_ret_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_ret_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.preheader*/
/*   %5 = icmp ugt i32 %.01.ph, 15*/
begin
wcstombs_sbcs__preheader_5 = (wcstombs_sbcs__preheader__01_ph > 32'd15);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.preheader*/
/*   %5 = icmp ugt i32 %.01.ph, 15*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
wcstombs_sbcs__preheader_5_reg <= wcstombs_sbcs__preheader_5;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__preheader_5_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %.lr.ph*/
/*   %tmp98 = add i32 %.01.ph, -16*/
begin
wcstombs_sbcs__lr_ph_tmp98 = (wcstombs_sbcs__preheader__01_ph_reg + -32'd16);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %.lr.ph*/
/*   %tmp98 = add i32 %.01.ph, -16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__lr_ph_4))
begin
wcstombs_sbcs__lr_ph_tmp98_reg <= wcstombs_sbcs__lr_ph_tmp98;
if (reset == 1'b0 && ^(wcstombs_sbcs__lr_ph_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs__lr_ph_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %6 ]*/
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
wcstombs_sbcs_6_indvar = 32'd0;
end
/* wcstombs_sbcs: %6*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %6 ]*/
else /* if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_133) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_6_151_reg == 1'd1))) */
begin
wcstombs_sbcs_6_indvar = wcstombs_sbcs_6_indvar_next_reg;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %6 ]*/
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB__lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
wcstombs_sbcs_6_indvar_reg <= wcstombs_sbcs_6_indvar;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_indvar_reg"); $finish; end
end
/* wcstombs_sbcs: %6*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %6 ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_133) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_6_151_reg == 1'd1)))
begin
wcstombs_sbcs_6_indvar_reg <= wcstombs_sbcs_6_indvar;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_indvar_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp = shl i32 %indvar, 4*/
begin
wcstombs_sbcs_6_tmp = (wcstombs_sbcs_6_indvar_reg <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp = shl i32 %indvar, 4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp_reg <= wcstombs_sbcs_6_tmp;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp65117 = or i32 %tmp, 1*/
begin
wcstombs_sbcs_6_tmp65117 = (wcstombs_sbcs_6_tmp | 32'd1);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp65117 = or i32 %tmp, 1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp65117_reg <= wcstombs_sbcs_6_tmp65117;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp65117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp65117_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep = getelementptr i32* %src, i32 %tmp65117*/
begin
wcstombs_sbcs_6_scevgep = (arg_src + (4 * wcstombs_sbcs_6_tmp65117));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep = getelementptr i32* %src, i32 %tmp65117*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep_reg <= wcstombs_sbcs_6_scevgep;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp66118 = or i32 %tmp, 2*/
begin
wcstombs_sbcs_6_tmp66118 = (wcstombs_sbcs_6_tmp | 32'd2);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp66118 = or i32 %tmp, 2*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp66118_reg <= wcstombs_sbcs_6_tmp66118;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp66118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp66118_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep67 = getelementptr i32* %src, i32 %tmp66118*/
begin
wcstombs_sbcs_6_scevgep67 = (arg_src + (4 * wcstombs_sbcs_6_tmp66118));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep67 = getelementptr i32* %src, i32 %tmp66118*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep67_reg <= wcstombs_sbcs_6_scevgep67;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep67_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp68119 = or i32 %tmp, 3*/
begin
wcstombs_sbcs_6_tmp68119 = (wcstombs_sbcs_6_tmp | 32'd3);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp68119 = or i32 %tmp, 3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp68119_reg <= wcstombs_sbcs_6_tmp68119;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp68119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp68119_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep69 = getelementptr i32* %src, i32 %tmp68119*/
begin
wcstombs_sbcs_6_scevgep69 = (arg_src + (4 * wcstombs_sbcs_6_tmp68119));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep69 = getelementptr i32* %src, i32 %tmp68119*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep69_reg <= wcstombs_sbcs_6_scevgep69;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep69_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp70120 = or i32 %tmp, 4*/
begin
wcstombs_sbcs_6_tmp70120 = (wcstombs_sbcs_6_tmp | 32'd4);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp70120 = or i32 %tmp, 4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp70120_reg <= wcstombs_sbcs_6_tmp70120;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp70120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp70120_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep71 = getelementptr i32* %src, i32 %tmp70120*/
begin
wcstombs_sbcs_6_scevgep71 = (arg_src + (4 * wcstombs_sbcs_6_tmp70120));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep71 = getelementptr i32* %src, i32 %tmp70120*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep71_reg <= wcstombs_sbcs_6_scevgep71;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep71_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp72121 = or i32 %tmp, 5*/
begin
wcstombs_sbcs_6_tmp72121 = (wcstombs_sbcs_6_tmp | 32'd5);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp72121 = or i32 %tmp, 5*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp72121_reg <= wcstombs_sbcs_6_tmp72121;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp72121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp72121_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep73 = getelementptr i32* %src, i32 %tmp72121*/
begin
wcstombs_sbcs_6_scevgep73 = (arg_src + (4 * wcstombs_sbcs_6_tmp72121));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep73 = getelementptr i32* %src, i32 %tmp72121*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep73_reg <= wcstombs_sbcs_6_scevgep73;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep73_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp74122 = or i32 %tmp, 6*/
begin
wcstombs_sbcs_6_tmp74122 = (wcstombs_sbcs_6_tmp | 32'd6);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp74122 = or i32 %tmp, 6*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp74122_reg <= wcstombs_sbcs_6_tmp74122;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp74122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp74122_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep75 = getelementptr i32* %src, i32 %tmp74122*/
begin
wcstombs_sbcs_6_scevgep75 = (arg_src + (4 * wcstombs_sbcs_6_tmp74122));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep75 = getelementptr i32* %src, i32 %tmp74122*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep75_reg <= wcstombs_sbcs_6_scevgep75;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep75_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp76123 = or i32 %tmp, 7*/
begin
wcstombs_sbcs_6_tmp76123 = (wcstombs_sbcs_6_tmp | 32'd7);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp76123 = or i32 %tmp, 7*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp76123_reg <= wcstombs_sbcs_6_tmp76123;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp76123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp76123_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep77 = getelementptr i32* %src, i32 %tmp76123*/
begin
wcstombs_sbcs_6_scevgep77 = (arg_src + (4 * wcstombs_sbcs_6_tmp76123));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep77 = getelementptr i32* %src, i32 %tmp76123*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep77_reg <= wcstombs_sbcs_6_scevgep77;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep77_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp78124 = or i32 %tmp, 8*/
begin
wcstombs_sbcs_6_tmp78124 = (wcstombs_sbcs_6_tmp | 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp78124 = or i32 %tmp, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp78124_reg <= wcstombs_sbcs_6_tmp78124;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp78124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp78124_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep79 = getelementptr i32* %src, i32 %tmp78124*/
begin
wcstombs_sbcs_6_scevgep79 = (arg_src + (4 * wcstombs_sbcs_6_tmp78124));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep79 = getelementptr i32* %src, i32 %tmp78124*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep79_reg <= wcstombs_sbcs_6_scevgep79;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep79_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp80125 = or i32 %tmp, 9*/
begin
wcstombs_sbcs_6_tmp80125 = (wcstombs_sbcs_6_tmp | 32'd9);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp80125 = or i32 %tmp, 9*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp80125_reg <= wcstombs_sbcs_6_tmp80125;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp80125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp80125_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep81 = getelementptr i32* %src, i32 %tmp80125*/
begin
wcstombs_sbcs_6_scevgep81 = (arg_src + (4 * wcstombs_sbcs_6_tmp80125));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep81 = getelementptr i32* %src, i32 %tmp80125*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep81_reg <= wcstombs_sbcs_6_scevgep81;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep81_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp82126 = or i32 %tmp, 10*/
begin
wcstombs_sbcs_6_tmp82126 = (wcstombs_sbcs_6_tmp | 32'd10);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp82126 = or i32 %tmp, 10*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp82126_reg <= wcstombs_sbcs_6_tmp82126;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp82126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp82126_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep83 = getelementptr i32* %src, i32 %tmp82126*/
begin
wcstombs_sbcs_6_scevgep83 = (arg_src + (4 * wcstombs_sbcs_6_tmp82126));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep83 = getelementptr i32* %src, i32 %tmp82126*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep83_reg <= wcstombs_sbcs_6_scevgep83;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep83_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp84127 = or i32 %tmp, 11*/
begin
wcstombs_sbcs_6_tmp84127 = (wcstombs_sbcs_6_tmp | 32'd11);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp84127 = or i32 %tmp, 11*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp84127_reg <= wcstombs_sbcs_6_tmp84127;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp84127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp84127_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep85 = getelementptr i32* %src, i32 %tmp84127*/
begin
wcstombs_sbcs_6_scevgep85 = (arg_src + (4 * wcstombs_sbcs_6_tmp84127));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep85 = getelementptr i32* %src, i32 %tmp84127*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep85_reg <= wcstombs_sbcs_6_scevgep85;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep85_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp86128 = or i32 %tmp, 12*/
begin
wcstombs_sbcs_6_tmp86128 = (wcstombs_sbcs_6_tmp | 32'd12);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp86128 = or i32 %tmp, 12*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp86128_reg <= wcstombs_sbcs_6_tmp86128;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp86128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp86128_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep87 = getelementptr i32* %src, i32 %tmp86128*/
begin
wcstombs_sbcs_6_scevgep87 = (arg_src + (4 * wcstombs_sbcs_6_tmp86128));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep87 = getelementptr i32* %src, i32 %tmp86128*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep87_reg <= wcstombs_sbcs_6_scevgep87;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep87_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp88129 = or i32 %tmp, 13*/
begin
wcstombs_sbcs_6_tmp88129 = (wcstombs_sbcs_6_tmp | 32'd13);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp88129 = or i32 %tmp, 13*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp88129_reg <= wcstombs_sbcs_6_tmp88129;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp88129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp88129_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep89 = getelementptr i32* %src, i32 %tmp88129*/
begin
wcstombs_sbcs_6_scevgep89 = (arg_src + (4 * wcstombs_sbcs_6_tmp88129));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep89 = getelementptr i32* %src, i32 %tmp88129*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep89_reg <= wcstombs_sbcs_6_scevgep89;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep89_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp90130 = or i32 %tmp, 14*/
begin
wcstombs_sbcs_6_tmp90130 = (wcstombs_sbcs_6_tmp | 32'd14);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp90130 = or i32 %tmp, 14*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp90130_reg <= wcstombs_sbcs_6_tmp90130;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp90130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp90130_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep91 = getelementptr i32* %src, i32 %tmp90130*/
begin
wcstombs_sbcs_6_scevgep91 = (arg_src + (4 * wcstombs_sbcs_6_tmp90130));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep91 = getelementptr i32* %src, i32 %tmp90130*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep91_reg <= wcstombs_sbcs_6_scevgep91;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep91_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp92131 = or i32 %tmp, 15*/
begin
wcstombs_sbcs_6_tmp92131 = (wcstombs_sbcs_6_tmp | 32'd15);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp92131 = or i32 %tmp, 15*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_tmp92131_reg <= wcstombs_sbcs_6_tmp92131;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp92131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp92131_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep93 = getelementptr i32* %src, i32 %tmp92131*/
begin
wcstombs_sbcs_6_scevgep93 = (arg_src + (4 * wcstombs_sbcs_6_tmp92131));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep93 = getelementptr i32* %src, i32 %tmp92131*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep93_reg <= wcstombs_sbcs_6_scevgep93;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep93_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %.060 = getelementptr i32* %src, i32 %tmp*/
begin
wcstombs_sbcs_6__060 = (arg_src + (4 * wcstombs_sbcs_6_tmp));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %.060 = getelementptr i32* %src, i32 %tmp*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6__060_reg <= wcstombs_sbcs_6__060;
if (reset == 1'b0 && ^(wcstombs_sbcs_6__060) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6__060_reg"); $finish; end
end
end
always @(*) begin
wcstombs_sbcs_6_tmp97 = wcstombs_sbcs_6_tmp97_stage0_reg;
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp97 = mul i32 %indvar, -16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6))
begin
wcstombs_sbcs_6_tmp97_reg <= wcstombs_sbcs_6_tmp97;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp97_reg"); $finish; end
end
/* wcstombs_sbcs: %6*/
/*   %tmp97 = mul i32 %indvar, -16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6))
begin
wcstombs_sbcs_6_tmp97_reg <= wcstombs_sbcs_6_tmp97;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp97_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %tmp99 = add i32 %tmp98, %tmp97*/
begin
wcstombs_sbcs_6_tmp99 = (wcstombs_sbcs__lr_ph_tmp98_reg + wcstombs_sbcs_6_tmp97);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp99 = add i32 %tmp98, %tmp97*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6))
begin
wcstombs_sbcs_6_tmp99_reg <= wcstombs_sbcs_6_tmp99;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_tmp99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_tmp99_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep100 = getelementptr i8* %dst, i32 %tmp65117*/
begin
wcstombs_sbcs_6_scevgep100 = (arg_dst + (1 * wcstombs_sbcs_6_tmp65117));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep100 = getelementptr i8* %dst, i32 %tmp65117*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep100_reg <= wcstombs_sbcs_6_scevgep100;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep100_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep101 = getelementptr i8* %dst, i32 %tmp66118*/
begin
wcstombs_sbcs_6_scevgep101 = (arg_dst + (1 * wcstombs_sbcs_6_tmp66118));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep101 = getelementptr i8* %dst, i32 %tmp66118*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep101_reg <= wcstombs_sbcs_6_scevgep101;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep101_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep102 = getelementptr i8* %dst, i32 %tmp68119*/
begin
wcstombs_sbcs_6_scevgep102 = (arg_dst + (1 * wcstombs_sbcs_6_tmp68119));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep102 = getelementptr i8* %dst, i32 %tmp68119*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep102_reg <= wcstombs_sbcs_6_scevgep102;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep102_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep103 = getelementptr i8* %dst, i32 %tmp70120*/
begin
wcstombs_sbcs_6_scevgep103 = (arg_dst + (1 * wcstombs_sbcs_6_tmp70120));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep103 = getelementptr i8* %dst, i32 %tmp70120*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep103_reg <= wcstombs_sbcs_6_scevgep103;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep103_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep104 = getelementptr i8* %dst, i32 %tmp72121*/
begin
wcstombs_sbcs_6_scevgep104 = (arg_dst + (1 * wcstombs_sbcs_6_tmp72121));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep104 = getelementptr i8* %dst, i32 %tmp72121*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep104_reg <= wcstombs_sbcs_6_scevgep104;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep104_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep105 = getelementptr i8* %dst, i32 %tmp74122*/
begin
wcstombs_sbcs_6_scevgep105 = (arg_dst + (1 * wcstombs_sbcs_6_tmp74122));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep105 = getelementptr i8* %dst, i32 %tmp74122*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep105_reg <= wcstombs_sbcs_6_scevgep105;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep105_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep106 = getelementptr i8* %dst, i32 %tmp76123*/
begin
wcstombs_sbcs_6_scevgep106 = (arg_dst + (1 * wcstombs_sbcs_6_tmp76123));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep106 = getelementptr i8* %dst, i32 %tmp76123*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep106_reg <= wcstombs_sbcs_6_scevgep106;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep106_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep107 = getelementptr i8* %dst, i32 %tmp78124*/
begin
wcstombs_sbcs_6_scevgep107 = (arg_dst + (1 * wcstombs_sbcs_6_tmp78124));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep107 = getelementptr i8* %dst, i32 %tmp78124*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep107_reg <= wcstombs_sbcs_6_scevgep107;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep107_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep108 = getelementptr i8* %dst, i32 %tmp80125*/
begin
wcstombs_sbcs_6_scevgep108 = (arg_dst + (1 * wcstombs_sbcs_6_tmp80125));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep108 = getelementptr i8* %dst, i32 %tmp80125*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep108_reg <= wcstombs_sbcs_6_scevgep108;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep108_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep109 = getelementptr i8* %dst, i32 %tmp82126*/
begin
wcstombs_sbcs_6_scevgep109 = (arg_dst + (1 * wcstombs_sbcs_6_tmp82126));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep109 = getelementptr i8* %dst, i32 %tmp82126*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep109_reg <= wcstombs_sbcs_6_scevgep109;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep109_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep110 = getelementptr i8* %dst, i32 %tmp84127*/
begin
wcstombs_sbcs_6_scevgep110 = (arg_dst + (1 * wcstombs_sbcs_6_tmp84127));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep110 = getelementptr i8* %dst, i32 %tmp84127*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep110_reg <= wcstombs_sbcs_6_scevgep110;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep110_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep111 = getelementptr i8* %dst, i32 %tmp86128*/
begin
wcstombs_sbcs_6_scevgep111 = (arg_dst + (1 * wcstombs_sbcs_6_tmp86128));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep111 = getelementptr i8* %dst, i32 %tmp86128*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep111_reg <= wcstombs_sbcs_6_scevgep111;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep111_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep112 = getelementptr i8* %dst, i32 %tmp88129*/
begin
wcstombs_sbcs_6_scevgep112 = (arg_dst + (1 * wcstombs_sbcs_6_tmp88129));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep112 = getelementptr i8* %dst, i32 %tmp88129*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep112_reg <= wcstombs_sbcs_6_scevgep112;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep112_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep113 = getelementptr i8* %dst, i32 %tmp90130*/
begin
wcstombs_sbcs_6_scevgep113 = (arg_dst + (1 * wcstombs_sbcs_6_tmp90130));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep113 = getelementptr i8* %dst, i32 %tmp90130*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep113_reg <= wcstombs_sbcs_6_scevgep113;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep113_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep114 = getelementptr i8* %dst, i32 %tmp92131*/
begin
wcstombs_sbcs_6_scevgep114 = (arg_dst + (1 * wcstombs_sbcs_6_tmp92131));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %scevgep114 = getelementptr i8* %dst, i32 %tmp92131*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_scevgep114_reg <= wcstombs_sbcs_6_scevgep114;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_scevgep114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_scevgep114_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %.0258 = getelementptr i8* %dst, i32 %tmp*/
begin
wcstombs_sbcs_6__0258 = (arg_dst + (1 * wcstombs_sbcs_6_tmp));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %.0258 = getelementptr i8* %dst, i32 %tmp*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6__0258_reg <= wcstombs_sbcs_6__0258;
if (reset == 1'b0 && ^(wcstombs_sbcs_6__0258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6__0258_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
wcstombs_sbcs_6_7_reg <= wcstombs_sbcs_6_7;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_7_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %8 = ashr i32 %7, 8*/
begin
wcstombs_sbcs_6_8 = ($signed(wcstombs_sbcs_6_7) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %8 = ashr i32 %7, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
wcstombs_sbcs_6_8_reg <= wcstombs_sbcs_6_8;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_8_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %9 = getelementptr inbounds i16* %3, i32 %8*/
begin
wcstombs_sbcs_6_9 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_8));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %9 = getelementptr inbounds i16* %3, i32 %8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
wcstombs_sbcs_6_9_reg <= wcstombs_sbcs_6_9;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_9_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_10 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_9))
begin
wcstombs_sbcs_6_10_reg <= wcstombs_sbcs_6_10;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_10_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %11 = zext i16 %10 to i32*/
begin
wcstombs_sbcs_6_11 = wcstombs_sbcs_6_10;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %11 = zext i16 %10 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_9))
begin
wcstombs_sbcs_6_11_reg <= wcstombs_sbcs_6_11;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_11_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %12 = and i32 %7, 255*/
begin
wcstombs_sbcs_6_12 = (wcstombs_sbcs_6_7 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %12 = and i32 %7, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
wcstombs_sbcs_6_12_reg <= wcstombs_sbcs_6_12;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_12_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %13 = add nsw i32 %11, %12*/
begin
wcstombs_sbcs_6_13 = (wcstombs_sbcs_6_11 + wcstombs_sbcs_6_12_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %13 = add nsw i32 %11, %12*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_9))
begin
wcstombs_sbcs_6_13_reg <= wcstombs_sbcs_6_13;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_13_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %14 = getelementptr inbounds i8* %1, i32 %13*/
begin
wcstombs_sbcs_6_14 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_13_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %14 = getelementptr inbounds i8* %1, i32 %13*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10))
begin
wcstombs_sbcs_6_14_reg <= wcstombs_sbcs_6_14;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_14_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_15 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
wcstombs_sbcs_6_15_reg <= wcstombs_sbcs_6_15;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_15_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_16 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
wcstombs_sbcs_6_16_reg <= wcstombs_sbcs_6_16;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_16_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %17 = ashr i32 %16, 8*/
begin
wcstombs_sbcs_6_17 = ($signed(wcstombs_sbcs_6_16) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %17 = ashr i32 %16, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
wcstombs_sbcs_6_17_reg <= wcstombs_sbcs_6_17;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_17_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %18 = getelementptr inbounds i16* %3, i32 %17*/
begin
wcstombs_sbcs_6_18 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_17));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %18 = getelementptr inbounds i16* %3, i32 %17*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
wcstombs_sbcs_6_18_reg <= wcstombs_sbcs_6_18;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_18_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_19 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_17))
begin
wcstombs_sbcs_6_19_reg <= wcstombs_sbcs_6_19;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_19_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %20 = zext i16 %19 to i32*/
begin
wcstombs_sbcs_6_20 = wcstombs_sbcs_6_19;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %20 = zext i16 %19 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_17))
begin
wcstombs_sbcs_6_20_reg <= wcstombs_sbcs_6_20;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_20_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %21 = and i32 %16, 255*/
begin
wcstombs_sbcs_6_21 = (wcstombs_sbcs_6_16 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %21 = and i32 %16, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
wcstombs_sbcs_6_21_reg <= wcstombs_sbcs_6_21;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_21_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %22 = add nsw i32 %20, %21*/
begin
wcstombs_sbcs_6_22 = (wcstombs_sbcs_6_20 + wcstombs_sbcs_6_21_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %22 = add nsw i32 %20, %21*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_17))
begin
wcstombs_sbcs_6_22_reg <= wcstombs_sbcs_6_22;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_22_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %23 = getelementptr inbounds i8* %1, i32 %22*/
begin
wcstombs_sbcs_6_23 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_22_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %23 = getelementptr inbounds i8* %1, i32 %22*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18))
begin
wcstombs_sbcs_6_23_reg <= wcstombs_sbcs_6_23;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_23_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_24 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
wcstombs_sbcs_6_24_reg <= wcstombs_sbcs_6_24;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_24_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_25 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
wcstombs_sbcs_6_25_reg <= wcstombs_sbcs_6_25;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_25_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %26 = ashr i32 %25, 8*/
begin
wcstombs_sbcs_6_26 = ($signed(wcstombs_sbcs_6_25) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %26 = ashr i32 %25, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
wcstombs_sbcs_6_26_reg <= wcstombs_sbcs_6_26;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_26_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %27 = getelementptr inbounds i16* %3, i32 %26*/
begin
wcstombs_sbcs_6_27 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_26));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %27 = getelementptr inbounds i16* %3, i32 %26*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
wcstombs_sbcs_6_27_reg <= wcstombs_sbcs_6_27;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_27_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_28 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_25))
begin
wcstombs_sbcs_6_28_reg <= wcstombs_sbcs_6_28;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_28_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %29 = zext i16 %28 to i32*/
begin
wcstombs_sbcs_6_29 = wcstombs_sbcs_6_28;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %29 = zext i16 %28 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_25))
begin
wcstombs_sbcs_6_29_reg <= wcstombs_sbcs_6_29;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_29_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %30 = and i32 %25, 255*/
begin
wcstombs_sbcs_6_30 = (wcstombs_sbcs_6_25 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %30 = and i32 %25, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
wcstombs_sbcs_6_30_reg <= wcstombs_sbcs_6_30;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_30_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %31 = add nsw i32 %29, %30*/
begin
wcstombs_sbcs_6_31 = (wcstombs_sbcs_6_29 + wcstombs_sbcs_6_30_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %31 = add nsw i32 %29, %30*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_25))
begin
wcstombs_sbcs_6_31_reg <= wcstombs_sbcs_6_31;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_31_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %32 = getelementptr inbounds i8* %1, i32 %31*/
begin
wcstombs_sbcs_6_32 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_31_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %32 = getelementptr inbounds i8* %1, i32 %31*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26))
begin
wcstombs_sbcs_6_32_reg <= wcstombs_sbcs_6_32;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_32_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_33 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
wcstombs_sbcs_6_33_reg <= wcstombs_sbcs_6_33;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_33_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_34 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
wcstombs_sbcs_6_34_reg <= wcstombs_sbcs_6_34;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_34_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %35 = ashr i32 %34, 8*/
begin
wcstombs_sbcs_6_35 = ($signed(wcstombs_sbcs_6_34) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %35 = ashr i32 %34, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
wcstombs_sbcs_6_35_reg <= wcstombs_sbcs_6_35;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_35_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %36 = getelementptr inbounds i16* %3, i32 %35*/
begin
wcstombs_sbcs_6_36 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_35));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %36 = getelementptr inbounds i16* %3, i32 %35*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
wcstombs_sbcs_6_36_reg <= wcstombs_sbcs_6_36;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_36_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_37 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_33))
begin
wcstombs_sbcs_6_37_reg <= wcstombs_sbcs_6_37;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_37_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %38 = zext i16 %37 to i32*/
begin
wcstombs_sbcs_6_38 = wcstombs_sbcs_6_37;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %38 = zext i16 %37 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_33))
begin
wcstombs_sbcs_6_38_reg <= wcstombs_sbcs_6_38;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_38_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %39 = and i32 %34, 255*/
begin
wcstombs_sbcs_6_39 = (wcstombs_sbcs_6_34 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %39 = and i32 %34, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
wcstombs_sbcs_6_39_reg <= wcstombs_sbcs_6_39;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_39_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %40 = add nsw i32 %38, %39*/
begin
wcstombs_sbcs_6_40 = (wcstombs_sbcs_6_38 + wcstombs_sbcs_6_39_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %40 = add nsw i32 %38, %39*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_33))
begin
wcstombs_sbcs_6_40_reg <= wcstombs_sbcs_6_40;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_40_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %41 = getelementptr inbounds i8* %1, i32 %40*/
begin
wcstombs_sbcs_6_41 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_40_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %41 = getelementptr inbounds i8* %1, i32 %40*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34))
begin
wcstombs_sbcs_6_41_reg <= wcstombs_sbcs_6_41;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_41_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_42 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
wcstombs_sbcs_6_42_reg <= wcstombs_sbcs_6_42;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_42_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
wcstombs_sbcs_6_43_reg <= wcstombs_sbcs_6_43;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_43_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %44 = ashr i32 %43, 8*/
begin
wcstombs_sbcs_6_44 = ($signed(wcstombs_sbcs_6_43) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %44 = ashr i32 %43, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
wcstombs_sbcs_6_44_reg <= wcstombs_sbcs_6_44;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_44_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %45 = getelementptr inbounds i16* %3, i32 %44*/
begin
wcstombs_sbcs_6_45 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_44));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %45 = getelementptr inbounds i16* %3, i32 %44*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
wcstombs_sbcs_6_45_reg <= wcstombs_sbcs_6_45;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_45_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_46 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_41))
begin
wcstombs_sbcs_6_46_reg <= wcstombs_sbcs_6_46;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_46_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %47 = zext i16 %46 to i32*/
begin
wcstombs_sbcs_6_47 = wcstombs_sbcs_6_46;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %47 = zext i16 %46 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_41))
begin
wcstombs_sbcs_6_47_reg <= wcstombs_sbcs_6_47;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_47_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %48 = and i32 %43, 255*/
begin
wcstombs_sbcs_6_48 = (wcstombs_sbcs_6_43 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %48 = and i32 %43, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
wcstombs_sbcs_6_48_reg <= wcstombs_sbcs_6_48;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_48_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %49 = add nsw i32 %47, %48*/
begin
wcstombs_sbcs_6_49 = (wcstombs_sbcs_6_47 + wcstombs_sbcs_6_48_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %49 = add nsw i32 %47, %48*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_41))
begin
wcstombs_sbcs_6_49_reg <= wcstombs_sbcs_6_49;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_49_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %50 = getelementptr inbounds i8* %1, i32 %49*/
begin
wcstombs_sbcs_6_50 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_49_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %50 = getelementptr inbounds i8* %1, i32 %49*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42))
begin
wcstombs_sbcs_6_50_reg <= wcstombs_sbcs_6_50;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_50_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_51 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
wcstombs_sbcs_6_51_reg <= wcstombs_sbcs_6_51;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_51_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_52 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
wcstombs_sbcs_6_52_reg <= wcstombs_sbcs_6_52;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_52_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %53 = ashr i32 %52, 8*/
begin
wcstombs_sbcs_6_53 = ($signed(wcstombs_sbcs_6_52) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %53 = ashr i32 %52, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
wcstombs_sbcs_6_53_reg <= wcstombs_sbcs_6_53;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_53_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %54 = getelementptr inbounds i16* %3, i32 %53*/
begin
wcstombs_sbcs_6_54 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_53));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %54 = getelementptr inbounds i16* %3, i32 %53*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
wcstombs_sbcs_6_54_reg <= wcstombs_sbcs_6_54;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_54_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_55 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_49))
begin
wcstombs_sbcs_6_55_reg <= wcstombs_sbcs_6_55;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_55_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %56 = zext i16 %55 to i32*/
begin
wcstombs_sbcs_6_56 = wcstombs_sbcs_6_55;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %56 = zext i16 %55 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_49))
begin
wcstombs_sbcs_6_56_reg <= wcstombs_sbcs_6_56;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_56_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %57 = and i32 %52, 255*/
begin
wcstombs_sbcs_6_57 = (wcstombs_sbcs_6_52 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %57 = and i32 %52, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
wcstombs_sbcs_6_57_reg <= wcstombs_sbcs_6_57;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_57_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %58 = add nsw i32 %56, %57*/
begin
wcstombs_sbcs_6_58 = (wcstombs_sbcs_6_56 + wcstombs_sbcs_6_57_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %58 = add nsw i32 %56, %57*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_49))
begin
wcstombs_sbcs_6_58_reg <= wcstombs_sbcs_6_58;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_58_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %59 = getelementptr inbounds i8* %1, i32 %58*/
begin
wcstombs_sbcs_6_59 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_58_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %59 = getelementptr inbounds i8* %1, i32 %58*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50))
begin
wcstombs_sbcs_6_59_reg <= wcstombs_sbcs_6_59;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_59_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_60 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
wcstombs_sbcs_6_60_reg <= wcstombs_sbcs_6_60;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_60_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
wcstombs_sbcs_6_61_reg <= wcstombs_sbcs_6_61;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_61_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %62 = ashr i32 %61, 8*/
begin
wcstombs_sbcs_6_62 = ($signed(wcstombs_sbcs_6_61) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %62 = ashr i32 %61, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
wcstombs_sbcs_6_62_reg <= wcstombs_sbcs_6_62;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_62_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %63 = getelementptr inbounds i16* %3, i32 %62*/
begin
wcstombs_sbcs_6_63 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_62));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %63 = getelementptr inbounds i16* %3, i32 %62*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
wcstombs_sbcs_6_63_reg <= wcstombs_sbcs_6_63;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_63_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_64 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_57))
begin
wcstombs_sbcs_6_64_reg <= wcstombs_sbcs_6_64;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_64_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %65 = zext i16 %64 to i32*/
begin
wcstombs_sbcs_6_65 = wcstombs_sbcs_6_64;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %65 = zext i16 %64 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_57))
begin
wcstombs_sbcs_6_65_reg <= wcstombs_sbcs_6_65;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_65_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %66 = and i32 %61, 255*/
begin
wcstombs_sbcs_6_66 = (wcstombs_sbcs_6_61 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %66 = and i32 %61, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
wcstombs_sbcs_6_66_reg <= wcstombs_sbcs_6_66;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_66_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %67 = add nsw i32 %65, %66*/
begin
wcstombs_sbcs_6_67 = (wcstombs_sbcs_6_65 + wcstombs_sbcs_6_66_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %67 = add nsw i32 %65, %66*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_57))
begin
wcstombs_sbcs_6_67_reg <= wcstombs_sbcs_6_67;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_67_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %68 = getelementptr inbounds i8* %1, i32 %67*/
begin
wcstombs_sbcs_6_68 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_67_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %68 = getelementptr inbounds i8* %1, i32 %67*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58))
begin
wcstombs_sbcs_6_68_reg <= wcstombs_sbcs_6_68;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_68_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_69 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
wcstombs_sbcs_6_69_reg <= wcstombs_sbcs_6_69;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_69_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_70 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
wcstombs_sbcs_6_70_reg <= wcstombs_sbcs_6_70;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_70_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %71 = ashr i32 %70, 8*/
begin
wcstombs_sbcs_6_71 = ($signed(wcstombs_sbcs_6_70) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %71 = ashr i32 %70, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
wcstombs_sbcs_6_71_reg <= wcstombs_sbcs_6_71;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_71_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %72 = getelementptr inbounds i16* %3, i32 %71*/
begin
wcstombs_sbcs_6_72 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_71));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %72 = getelementptr inbounds i16* %3, i32 %71*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
wcstombs_sbcs_6_72_reg <= wcstombs_sbcs_6_72;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_72_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_73 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_65))
begin
wcstombs_sbcs_6_73_reg <= wcstombs_sbcs_6_73;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_73_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %74 = zext i16 %73 to i32*/
begin
wcstombs_sbcs_6_74 = wcstombs_sbcs_6_73;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %74 = zext i16 %73 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_65))
begin
wcstombs_sbcs_6_74_reg <= wcstombs_sbcs_6_74;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_74_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %75 = and i32 %70, 255*/
begin
wcstombs_sbcs_6_75 = (wcstombs_sbcs_6_70 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %75 = and i32 %70, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
wcstombs_sbcs_6_75_reg <= wcstombs_sbcs_6_75;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_75_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %76 = add nsw i32 %74, %75*/
begin
wcstombs_sbcs_6_76 = (wcstombs_sbcs_6_74 + wcstombs_sbcs_6_75_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %76 = add nsw i32 %74, %75*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_65))
begin
wcstombs_sbcs_6_76_reg <= wcstombs_sbcs_6_76;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_76_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %77 = getelementptr inbounds i8* %1, i32 %76*/
begin
wcstombs_sbcs_6_77 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_76_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %77 = getelementptr inbounds i8* %1, i32 %76*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66))
begin
wcstombs_sbcs_6_77_reg <= wcstombs_sbcs_6_77;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_77_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_78 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
wcstombs_sbcs_6_78_reg <= wcstombs_sbcs_6_78;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_78_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_79 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
wcstombs_sbcs_6_79_reg <= wcstombs_sbcs_6_79;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_79_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %80 = ashr i32 %79, 8*/
begin
wcstombs_sbcs_6_80 = ($signed(wcstombs_sbcs_6_79) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %80 = ashr i32 %79, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
wcstombs_sbcs_6_80_reg <= wcstombs_sbcs_6_80;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_80_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %81 = getelementptr inbounds i16* %3, i32 %80*/
begin
wcstombs_sbcs_6_81 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_80));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %81 = getelementptr inbounds i16* %3, i32 %80*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
wcstombs_sbcs_6_81_reg <= wcstombs_sbcs_6_81;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_81_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_82 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_73))
begin
wcstombs_sbcs_6_82_reg <= wcstombs_sbcs_6_82;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_82_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %83 = zext i16 %82 to i32*/
begin
wcstombs_sbcs_6_83 = wcstombs_sbcs_6_82;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %83 = zext i16 %82 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_73))
begin
wcstombs_sbcs_6_83_reg <= wcstombs_sbcs_6_83;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_83_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %84 = and i32 %79, 255*/
begin
wcstombs_sbcs_6_84 = (wcstombs_sbcs_6_79 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %84 = and i32 %79, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
wcstombs_sbcs_6_84_reg <= wcstombs_sbcs_6_84;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_84_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %85 = add nsw i32 %83, %84*/
begin
wcstombs_sbcs_6_85 = (wcstombs_sbcs_6_83 + wcstombs_sbcs_6_84_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %85 = add nsw i32 %83, %84*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_73))
begin
wcstombs_sbcs_6_85_reg <= wcstombs_sbcs_6_85;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_85_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %86 = getelementptr inbounds i8* %1, i32 %85*/
begin
wcstombs_sbcs_6_86 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_85_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %86 = getelementptr inbounds i8* %1, i32 %85*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74))
begin
wcstombs_sbcs_6_86_reg <= wcstombs_sbcs_6_86;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_86_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_87 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
wcstombs_sbcs_6_87_reg <= wcstombs_sbcs_6_87;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_87_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_88 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
wcstombs_sbcs_6_88_reg <= wcstombs_sbcs_6_88;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_88_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %89 = ashr i32 %88, 8*/
begin
wcstombs_sbcs_6_89 = ($signed(wcstombs_sbcs_6_88) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %89 = ashr i32 %88, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
wcstombs_sbcs_6_89_reg <= wcstombs_sbcs_6_89;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_89_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %90 = getelementptr inbounds i16* %3, i32 %89*/
begin
wcstombs_sbcs_6_90 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_89));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %90 = getelementptr inbounds i16* %3, i32 %89*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
wcstombs_sbcs_6_90_reg <= wcstombs_sbcs_6_90;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_90_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_91 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_81))
begin
wcstombs_sbcs_6_91_reg <= wcstombs_sbcs_6_91;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_91_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %92 = zext i16 %91 to i32*/
begin
wcstombs_sbcs_6_92 = wcstombs_sbcs_6_91;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %92 = zext i16 %91 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_81))
begin
wcstombs_sbcs_6_92_reg <= wcstombs_sbcs_6_92;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_92_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %93 = and i32 %88, 255*/
begin
wcstombs_sbcs_6_93 = (wcstombs_sbcs_6_88 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %93 = and i32 %88, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
wcstombs_sbcs_6_93_reg <= wcstombs_sbcs_6_93;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_93_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %94 = add nsw i32 %92, %93*/
begin
wcstombs_sbcs_6_94 = (wcstombs_sbcs_6_92 + wcstombs_sbcs_6_93_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %94 = add nsw i32 %92, %93*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_81))
begin
wcstombs_sbcs_6_94_reg <= wcstombs_sbcs_6_94;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_94_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %95 = getelementptr inbounds i8* %1, i32 %94*/
begin
wcstombs_sbcs_6_95 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_94_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %95 = getelementptr inbounds i8* %1, i32 %94*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82))
begin
wcstombs_sbcs_6_95_reg <= wcstombs_sbcs_6_95;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_95_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_96 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
wcstombs_sbcs_6_96_reg <= wcstombs_sbcs_6_96;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_96_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
wcstombs_sbcs_6_97_reg <= wcstombs_sbcs_6_97;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_97_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %98 = ashr i32 %97, 8*/
begin
wcstombs_sbcs_6_98 = ($signed(wcstombs_sbcs_6_97) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %98 = ashr i32 %97, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
wcstombs_sbcs_6_98_reg <= wcstombs_sbcs_6_98;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_98_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %99 = getelementptr inbounds i16* %3, i32 %98*/
begin
wcstombs_sbcs_6_99 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_98));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %99 = getelementptr inbounds i16* %3, i32 %98*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
wcstombs_sbcs_6_99_reg <= wcstombs_sbcs_6_99;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_99_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_100 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_89))
begin
wcstombs_sbcs_6_100_reg <= wcstombs_sbcs_6_100;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_100_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %101 = zext i16 %100 to i32*/
begin
wcstombs_sbcs_6_101 = wcstombs_sbcs_6_100;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %101 = zext i16 %100 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_89))
begin
wcstombs_sbcs_6_101_reg <= wcstombs_sbcs_6_101;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_101_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %102 = and i32 %97, 255*/
begin
wcstombs_sbcs_6_102 = (wcstombs_sbcs_6_97 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %102 = and i32 %97, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
wcstombs_sbcs_6_102_reg <= wcstombs_sbcs_6_102;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_102_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %103 = add nsw i32 %101, %102*/
begin
wcstombs_sbcs_6_103 = (wcstombs_sbcs_6_101 + wcstombs_sbcs_6_102_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %103 = add nsw i32 %101, %102*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_89))
begin
wcstombs_sbcs_6_103_reg <= wcstombs_sbcs_6_103;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_103_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %104 = getelementptr inbounds i8* %1, i32 %103*/
begin
wcstombs_sbcs_6_104 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_103_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %104 = getelementptr inbounds i8* %1, i32 %103*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90))
begin
wcstombs_sbcs_6_104_reg <= wcstombs_sbcs_6_104;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_104_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_105 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
wcstombs_sbcs_6_105_reg <= wcstombs_sbcs_6_105;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_105_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_106 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
wcstombs_sbcs_6_106_reg <= wcstombs_sbcs_6_106;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_106_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %107 = ashr i32 %106, 8*/
begin
wcstombs_sbcs_6_107 = ($signed(wcstombs_sbcs_6_106) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %107 = ashr i32 %106, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
wcstombs_sbcs_6_107_reg <= wcstombs_sbcs_6_107;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_107_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %108 = getelementptr inbounds i16* %3, i32 %107*/
begin
wcstombs_sbcs_6_108 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_107));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %108 = getelementptr inbounds i16* %3, i32 %107*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
wcstombs_sbcs_6_108_reg <= wcstombs_sbcs_6_108;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_108_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_109 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_97))
begin
wcstombs_sbcs_6_109_reg <= wcstombs_sbcs_6_109;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_109_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %110 = zext i16 %109 to i32*/
begin
wcstombs_sbcs_6_110 = wcstombs_sbcs_6_109;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %110 = zext i16 %109 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_97))
begin
wcstombs_sbcs_6_110_reg <= wcstombs_sbcs_6_110;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_110_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %111 = and i32 %106, 255*/
begin
wcstombs_sbcs_6_111 = (wcstombs_sbcs_6_106 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %111 = and i32 %106, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
wcstombs_sbcs_6_111_reg <= wcstombs_sbcs_6_111;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_111_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %112 = add nsw i32 %110, %111*/
begin
wcstombs_sbcs_6_112 = (wcstombs_sbcs_6_110 + wcstombs_sbcs_6_111_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %112 = add nsw i32 %110, %111*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_97))
begin
wcstombs_sbcs_6_112_reg <= wcstombs_sbcs_6_112;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_112_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %113 = getelementptr inbounds i8* %1, i32 %112*/
begin
wcstombs_sbcs_6_113 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_112_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %113 = getelementptr inbounds i8* %1, i32 %112*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98))
begin
wcstombs_sbcs_6_113_reg <= wcstombs_sbcs_6_113;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_113_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_114 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
wcstombs_sbcs_6_114_reg <= wcstombs_sbcs_6_114;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_114_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
wcstombs_sbcs_6_115_reg <= wcstombs_sbcs_6_115;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_115_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %116 = ashr i32 %115, 8*/
begin
wcstombs_sbcs_6_116 = ($signed(wcstombs_sbcs_6_115) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %116 = ashr i32 %115, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
wcstombs_sbcs_6_116_reg <= wcstombs_sbcs_6_116;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_116_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %117 = getelementptr inbounds i16* %3, i32 %116*/
begin
wcstombs_sbcs_6_117 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_116));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %117 = getelementptr inbounds i16* %3, i32 %116*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
wcstombs_sbcs_6_117_reg <= wcstombs_sbcs_6_117;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_117_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_118 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_105))
begin
wcstombs_sbcs_6_118_reg <= wcstombs_sbcs_6_118;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_118_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %119 = zext i16 %118 to i32*/
begin
wcstombs_sbcs_6_119 = wcstombs_sbcs_6_118;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %119 = zext i16 %118 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_105))
begin
wcstombs_sbcs_6_119_reg <= wcstombs_sbcs_6_119;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_119_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %120 = and i32 %115, 255*/
begin
wcstombs_sbcs_6_120 = (wcstombs_sbcs_6_115 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %120 = and i32 %115, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
wcstombs_sbcs_6_120_reg <= wcstombs_sbcs_6_120;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_120_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %121 = add nsw i32 %119, %120*/
begin
wcstombs_sbcs_6_121 = (wcstombs_sbcs_6_119 + wcstombs_sbcs_6_120_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %121 = add nsw i32 %119, %120*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_105))
begin
wcstombs_sbcs_6_121_reg <= wcstombs_sbcs_6_121;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_121_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %122 = getelementptr inbounds i8* %1, i32 %121*/
begin
wcstombs_sbcs_6_122 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_121_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %122 = getelementptr inbounds i8* %1, i32 %121*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106))
begin
wcstombs_sbcs_6_122_reg <= wcstombs_sbcs_6_122;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_122_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_123 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
wcstombs_sbcs_6_123_reg <= wcstombs_sbcs_6_123;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_123_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_124 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
wcstombs_sbcs_6_124_reg <= wcstombs_sbcs_6_124;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_124_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %125 = ashr i32 %124, 8*/
begin
wcstombs_sbcs_6_125 = ($signed(wcstombs_sbcs_6_124) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %125 = ashr i32 %124, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
wcstombs_sbcs_6_125_reg <= wcstombs_sbcs_6_125;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_125_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %126 = getelementptr inbounds i16* %3, i32 %125*/
begin
wcstombs_sbcs_6_126 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_125));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %126 = getelementptr inbounds i16* %3, i32 %125*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
wcstombs_sbcs_6_126_reg <= wcstombs_sbcs_6_126;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_126_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_127 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_113))
begin
wcstombs_sbcs_6_127_reg <= wcstombs_sbcs_6_127;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_127_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %128 = zext i16 %127 to i32*/
begin
wcstombs_sbcs_6_128 = wcstombs_sbcs_6_127;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %128 = zext i16 %127 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_113))
begin
wcstombs_sbcs_6_128_reg <= wcstombs_sbcs_6_128;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_128_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %129 = and i32 %124, 255*/
begin
wcstombs_sbcs_6_129 = (wcstombs_sbcs_6_124 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %129 = and i32 %124, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
wcstombs_sbcs_6_129_reg <= wcstombs_sbcs_6_129;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_129_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %130 = add nsw i32 %128, %129*/
begin
wcstombs_sbcs_6_130 = (wcstombs_sbcs_6_128 + wcstombs_sbcs_6_129_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %130 = add nsw i32 %128, %129*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_113))
begin
wcstombs_sbcs_6_130_reg <= wcstombs_sbcs_6_130;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_130_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %131 = getelementptr inbounds i8* %1, i32 %130*/
begin
wcstombs_sbcs_6_131 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_130_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %131 = getelementptr inbounds i8* %1, i32 %130*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114))
begin
wcstombs_sbcs_6_131_reg <= wcstombs_sbcs_6_131;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_131_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_132 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
wcstombs_sbcs_6_132_reg <= wcstombs_sbcs_6_132;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_132_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_133 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
wcstombs_sbcs_6_133_reg <= wcstombs_sbcs_6_133;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_133_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %134 = ashr i32 %133, 8*/
begin
wcstombs_sbcs_6_134 = ($signed(wcstombs_sbcs_6_133) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %134 = ashr i32 %133, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
wcstombs_sbcs_6_134_reg <= wcstombs_sbcs_6_134;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_134_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %135 = getelementptr inbounds i16* %3, i32 %134*/
begin
wcstombs_sbcs_6_135 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_134));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %135 = getelementptr inbounds i16* %3, i32 %134*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
wcstombs_sbcs_6_135_reg <= wcstombs_sbcs_6_135;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_135_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_136 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_121))
begin
wcstombs_sbcs_6_136_reg <= wcstombs_sbcs_6_136;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_136_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %137 = zext i16 %136 to i32*/
begin
wcstombs_sbcs_6_137 = wcstombs_sbcs_6_136;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %137 = zext i16 %136 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_121))
begin
wcstombs_sbcs_6_137_reg <= wcstombs_sbcs_6_137;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_137_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %138 = and i32 %133, 255*/
begin
wcstombs_sbcs_6_138 = (wcstombs_sbcs_6_133 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %138 = and i32 %133, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
wcstombs_sbcs_6_138_reg <= wcstombs_sbcs_6_138;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_138_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %139 = add nsw i32 %137, %138*/
begin
wcstombs_sbcs_6_139 = (wcstombs_sbcs_6_137 + wcstombs_sbcs_6_138_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %139 = add nsw i32 %137, %138*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_121))
begin
wcstombs_sbcs_6_139_reg <= wcstombs_sbcs_6_139;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_139_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %140 = getelementptr inbounds i8* %1, i32 %139*/
begin
wcstombs_sbcs_6_140 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_139_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %140 = getelementptr inbounds i8* %1, i32 %139*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122))
begin
wcstombs_sbcs_6_140_reg <= wcstombs_sbcs_6_140;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_140_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_141 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
wcstombs_sbcs_6_141_reg <= wcstombs_sbcs_6_141;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_141_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
begin
wcstombs_sbcs_6_142 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
wcstombs_sbcs_6_142_reg <= wcstombs_sbcs_6_142;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_142_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %143 = ashr i32 %142, 8*/
begin
wcstombs_sbcs_6_143 = ($signed(wcstombs_sbcs_6_142) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %143 = ashr i32 %142, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
wcstombs_sbcs_6_143_reg <= wcstombs_sbcs_6_143;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_143_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %144 = getelementptr inbounds i16* %3, i32 %143*/
begin
wcstombs_sbcs_6_144 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_6_143));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %144 = getelementptr inbounds i16* %3, i32 %143*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
wcstombs_sbcs_6_144_reg <= wcstombs_sbcs_6_144;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_144_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
begin
wcstombs_sbcs_6_145 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_129))
begin
wcstombs_sbcs_6_145_reg <= wcstombs_sbcs_6_145;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_145_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %146 = zext i16 %145 to i32*/
begin
wcstombs_sbcs_6_146 = wcstombs_sbcs_6_145;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %146 = zext i16 %145 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_129))
begin
wcstombs_sbcs_6_146_reg <= wcstombs_sbcs_6_146;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_146_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %147 = and i32 %142, 255*/
begin
wcstombs_sbcs_6_147 = (wcstombs_sbcs_6_142 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %147 = and i32 %142, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
wcstombs_sbcs_6_147_reg <= wcstombs_sbcs_6_147;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_147_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %148 = add nsw i32 %146, %147*/
begin
wcstombs_sbcs_6_148 = (wcstombs_sbcs_6_146 + wcstombs_sbcs_6_147_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %148 = add nsw i32 %146, %147*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_129))
begin
wcstombs_sbcs_6_148_reg <= wcstombs_sbcs_6_148;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_148_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %149 = getelementptr inbounds i8* %1, i32 %148*/
begin
wcstombs_sbcs_6_149 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_6_148_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %149 = getelementptr inbounds i8* %1, i32 %148*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130))
begin
wcstombs_sbcs_6_149_reg <= wcstombs_sbcs_6_149;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_149_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
begin
wcstombs_sbcs_6_150 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
wcstombs_sbcs_6_150_reg <= wcstombs_sbcs_6_150;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_150_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %151 = icmp ugt i32 %tmp99, 15*/
begin
wcstombs_sbcs_6_151 = (wcstombs_sbcs_6_tmp99 > 32'd15);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %151 = icmp ugt i32 %tmp99, 15*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_6))
begin
wcstombs_sbcs_6_151_reg <= wcstombs_sbcs_6_151;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_151_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %6*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
wcstombs_sbcs_6_indvar_next = (wcstombs_sbcs_6_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
wcstombs_sbcs_6_indvar_next_reg <= wcstombs_sbcs_6_indvar_next;
if (reset == 1'b0 && ^(wcstombs_sbcs_6_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_6_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %tmp94 = add i32 %tmp, 16*/
begin
wcstombs_sbcs___crit_edge_tmp94 = (wcstombs_sbcs_6_tmp_reg + 32'd16);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %tmp94 = add i32 %tmp, 16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_134))
begin
wcstombs_sbcs___crit_edge_tmp94_reg <= wcstombs_sbcs___crit_edge_tmp94;
if (reset == 1'b0 && ^(wcstombs_sbcs___crit_edge_tmp94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs___crit_edge_tmp94_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %scevgep95 = getelementptr i32* %src, i32 %tmp94*/
begin
wcstombs_sbcs___crit_edge_scevgep95 = (arg_src + (4 * wcstombs_sbcs___crit_edge_tmp94_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %scevgep95 = getelementptr i32* %src, i32 %tmp94*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135))
begin
wcstombs_sbcs___crit_edge_scevgep95_reg <= wcstombs_sbcs___crit_edge_scevgep95;
if (reset == 1'b0 && ^(wcstombs_sbcs___crit_edge_scevgep95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs___crit_edge_scevgep95_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %scevgep115 = getelementptr i8* %dst, i32 %tmp94*/
begin
wcstombs_sbcs___crit_edge_scevgep115 = (arg_dst + (1 * wcstombs_sbcs___crit_edge_tmp94_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %._crit_edge*/
/*   %scevgep115 = getelementptr i8* %dst, i32 %tmp94*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135))
begin
wcstombs_sbcs___crit_edge_scevgep115_reg <= wcstombs_sbcs___crit_edge_scevgep115;
if (reset == 1'b0 && ^(wcstombs_sbcs___crit_edge_scevgep115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs___crit_edge_scevgep115_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %152*/
/*   %.0.lcssa = phi i32* [ %scevgep95, %._crit_edge ], [ %src, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__0_lcssa = arg_src;
end
/* wcstombs_sbcs: %152*/
/*   %.0.lcssa = phi i32* [ %scevgep95, %._crit_edge ], [ %src, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0))) */
begin
wcstombs_sbcs_152__0_lcssa = wcstombs_sbcs___crit_edge_scevgep95;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %152*/
/*   %.0.lcssa = phi i32* [ %scevgep95, %._crit_edge ], [ %src, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__0_lcssa_reg <= wcstombs_sbcs_152__0_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__0_lcssa_reg"); $finish; end
end
/* wcstombs_sbcs: %152*/
/*   %.0.lcssa = phi i32* [ %scevgep95, %._crit_edge ], [ %src, %.preheader ]*/
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0)))
begin
wcstombs_sbcs_152__0_lcssa_reg <= wcstombs_sbcs_152__0_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %152*/
/*   %.01.lcssa = phi i32 [ %tmp99, %._crit_edge ], [ %.01.ph, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__01_lcssa = wcstombs_sbcs__preheader__01_ph_reg;
end
/* wcstombs_sbcs: %152*/
/*   %.01.lcssa = phi i32 [ %tmp99, %._crit_edge ], [ %.01.ph, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0))) */
begin
wcstombs_sbcs_152__01_lcssa = wcstombs_sbcs_6_tmp99_reg;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %152*/
/*   %.01.lcssa = phi i32 [ %tmp99, %._crit_edge ], [ %.01.ph, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__01_lcssa_reg <= wcstombs_sbcs_152__01_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__01_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__01_lcssa_reg"); $finish; end
end
/* wcstombs_sbcs: %152*/
/*   %.01.lcssa = phi i32 [ %tmp99, %._crit_edge ], [ %.01.ph, %.preheader ]*/
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0)))
begin
wcstombs_sbcs_152__01_lcssa_reg <= wcstombs_sbcs_152__01_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__01_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__01_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %152*/
/*   %.02.lcssa = phi i8* [ %scevgep115, %._crit_edge ], [ %dst, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__02_lcssa = arg_dst;
end
/* wcstombs_sbcs: %152*/
/*   %.02.lcssa = phi i8* [ %scevgep115, %._crit_edge ], [ %dst, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0))) */
begin
wcstombs_sbcs_152__02_lcssa = wcstombs_sbcs___crit_edge_scevgep115;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %152*/
/*   %.02.lcssa = phi i8* [ %scevgep115, %._crit_edge ], [ %dst, %.preheader ]*/
if ((((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs__preheader_5_reg == 1'd0)))
begin
wcstombs_sbcs_152__02_lcssa_reg <= wcstombs_sbcs_152__02_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__02_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__02_lcssa_reg"); $finish; end
end
/* wcstombs_sbcs: %152*/
/*   %.02.lcssa = phi i8* [ %scevgep115, %._crit_edge ], [ %dst, %.preheader ]*/
if (((cur_state == LEGUP_F_wcstombs_sbcs_BB___crit_edge_135) & (memory_controller_waitrequest == 1'd0)))
begin
wcstombs_sbcs_152__02_lcssa_reg <= wcstombs_sbcs_152__02_lcssa;
if (reset == 1'b0 && ^(wcstombs_sbcs_152__02_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_152__02_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %.sum30 = add i32 %.01.lcssa, -15*/
begin
wcstombs_sbcs_153__sum30 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd15);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %.sum30 = add i32 %.01.lcssa, -15*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_137))
begin
wcstombs_sbcs_153__sum30_reg <= wcstombs_sbcs_153__sum30;
if (reset == 1'b0 && ^(wcstombs_sbcs_153__sum30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153__sum30_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %154 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum30*/
begin
wcstombs_sbcs_153_154 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_153__sum30_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %154 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum30*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
wcstombs_sbcs_153_154_reg <= wcstombs_sbcs_153_154;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_154_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
begin
wcstombs_sbcs_153_155 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
wcstombs_sbcs_153_155_reg <= wcstombs_sbcs_153_155;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_155_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %156 = ashr i32 %155, 8*/
begin
wcstombs_sbcs_153_156 = ($signed(wcstombs_sbcs_153_155) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %156 = ashr i32 %155, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
wcstombs_sbcs_153_156_reg <= wcstombs_sbcs_153_156;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_156_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %157 = getelementptr inbounds i16* %3, i32 %156*/
begin
wcstombs_sbcs_153_157 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_153_156));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %157 = getelementptr inbounds i16* %3, i32 %156*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
wcstombs_sbcs_153_157_reg <= wcstombs_sbcs_153_157;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_157_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
begin
wcstombs_sbcs_153_158 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_142))
begin
wcstombs_sbcs_153_158_reg <= wcstombs_sbcs_153_158;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_158_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %159 = zext i16 %158 to i32*/
begin
wcstombs_sbcs_153_159 = wcstombs_sbcs_153_158;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %159 = zext i16 %158 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_142))
begin
wcstombs_sbcs_153_159_reg <= wcstombs_sbcs_153_159;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_159_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %160 = and i32 %155, 255*/
begin
wcstombs_sbcs_153_160 = (wcstombs_sbcs_153_155 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %160 = and i32 %155, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
wcstombs_sbcs_153_160_reg <= wcstombs_sbcs_153_160;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_160_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %161 = add nsw i32 %159, %160*/
begin
wcstombs_sbcs_153_161 = (wcstombs_sbcs_153_159 + wcstombs_sbcs_153_160_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %161 = add nsw i32 %159, %160*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_142))
begin
wcstombs_sbcs_153_161_reg <= wcstombs_sbcs_153_161;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_161_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %162 = getelementptr inbounds i8* %1, i32 %161*/
begin
wcstombs_sbcs_153_162 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_153_161_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %162 = getelementptr inbounds i8* %1, i32 %161*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143))
begin
wcstombs_sbcs_153_162_reg <= wcstombs_sbcs_153_162;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_162_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
begin
wcstombs_sbcs_153_163 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
wcstombs_sbcs_153_163_reg <= wcstombs_sbcs_153_163;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_163_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %153*/
/*   %164 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum30*/
begin
wcstombs_sbcs_153_164 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_153__sum30_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %153*/
/*   %164 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum30*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
wcstombs_sbcs_153_164_reg <= wcstombs_sbcs_153_164;
if (reset == 1'b0 && ^(wcstombs_sbcs_153_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_153_164_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %.sum28 = add i32 %.01.lcssa, -14*/
begin
wcstombs_sbcs_165__sum28 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd14);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %.sum28 = add i32 %.01.lcssa, -14*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_147))
begin
wcstombs_sbcs_165__sum28_reg <= wcstombs_sbcs_165__sum28;
if (reset == 1'b0 && ^(wcstombs_sbcs_165__sum28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165__sum28_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %166 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum28*/
begin
wcstombs_sbcs_165_166 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_165__sum28_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %166 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum28*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
wcstombs_sbcs_165_166_reg <= wcstombs_sbcs_165_166;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_166_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
begin
wcstombs_sbcs_165_167 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
wcstombs_sbcs_165_167_reg <= wcstombs_sbcs_165_167;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_167_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %168 = ashr i32 %167, 8*/
begin
wcstombs_sbcs_165_168 = ($signed(wcstombs_sbcs_165_167) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %168 = ashr i32 %167, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
wcstombs_sbcs_165_168_reg <= wcstombs_sbcs_165_168;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_168_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %169 = getelementptr inbounds i16* %3, i32 %168*/
begin
wcstombs_sbcs_165_169 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_165_168));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %169 = getelementptr inbounds i16* %3, i32 %168*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
wcstombs_sbcs_165_169_reg <= wcstombs_sbcs_165_169;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_169_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
begin
wcstombs_sbcs_165_170 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_152))
begin
wcstombs_sbcs_165_170_reg <= wcstombs_sbcs_165_170;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_170_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %171 = zext i16 %170 to i32*/
begin
wcstombs_sbcs_165_171 = wcstombs_sbcs_165_170;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %171 = zext i16 %170 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_152))
begin
wcstombs_sbcs_165_171_reg <= wcstombs_sbcs_165_171;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_171_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %172 = and i32 %167, 255*/
begin
wcstombs_sbcs_165_172 = (wcstombs_sbcs_165_167 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %172 = and i32 %167, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
wcstombs_sbcs_165_172_reg <= wcstombs_sbcs_165_172;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_172_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %173 = add nsw i32 %171, %172*/
begin
wcstombs_sbcs_165_173 = (wcstombs_sbcs_165_171 + wcstombs_sbcs_165_172_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %173 = add nsw i32 %171, %172*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_152))
begin
wcstombs_sbcs_165_173_reg <= wcstombs_sbcs_165_173;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_173_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %174 = getelementptr inbounds i8* %1, i32 %173*/
begin
wcstombs_sbcs_165_174 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_165_173_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %174 = getelementptr inbounds i8* %1, i32 %173*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153))
begin
wcstombs_sbcs_165_174_reg <= wcstombs_sbcs_165_174;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_174_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
begin
wcstombs_sbcs_165_175 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
wcstombs_sbcs_165_175_reg <= wcstombs_sbcs_165_175;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_175_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %165*/
/*   %176 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum28*/
begin
wcstombs_sbcs_165_176 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_165__sum28_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %165*/
/*   %176 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum28*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
wcstombs_sbcs_165_176_reg <= wcstombs_sbcs_165_176;
if (reset == 1'b0 && ^(wcstombs_sbcs_165_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_165_176_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %.sum26 = add i32 %.01.lcssa, -13*/
begin
wcstombs_sbcs_177__sum26 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd13);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %.sum26 = add i32 %.01.lcssa, -13*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_157))
begin
wcstombs_sbcs_177__sum26_reg <= wcstombs_sbcs_177__sum26;
if (reset == 1'b0 && ^(wcstombs_sbcs_177__sum26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177__sum26_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %178 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum26*/
begin
wcstombs_sbcs_177_178 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_177__sum26_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %178 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum26*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
wcstombs_sbcs_177_178_reg <= wcstombs_sbcs_177_178;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_178_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
begin
wcstombs_sbcs_177_179 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
wcstombs_sbcs_177_179_reg <= wcstombs_sbcs_177_179;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_179_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %180 = ashr i32 %179, 8*/
begin
wcstombs_sbcs_177_180 = ($signed(wcstombs_sbcs_177_179) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %180 = ashr i32 %179, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
wcstombs_sbcs_177_180_reg <= wcstombs_sbcs_177_180;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_180_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %181 = getelementptr inbounds i16* %3, i32 %180*/
begin
wcstombs_sbcs_177_181 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_177_180));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %181 = getelementptr inbounds i16* %3, i32 %180*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
wcstombs_sbcs_177_181_reg <= wcstombs_sbcs_177_181;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_181_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
begin
wcstombs_sbcs_177_182 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_162))
begin
wcstombs_sbcs_177_182_reg <= wcstombs_sbcs_177_182;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_182_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %183 = zext i16 %182 to i32*/
begin
wcstombs_sbcs_177_183 = wcstombs_sbcs_177_182;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %183 = zext i16 %182 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_162))
begin
wcstombs_sbcs_177_183_reg <= wcstombs_sbcs_177_183;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_183_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %184 = and i32 %179, 255*/
begin
wcstombs_sbcs_177_184 = (wcstombs_sbcs_177_179 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %184 = and i32 %179, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
wcstombs_sbcs_177_184_reg <= wcstombs_sbcs_177_184;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_184_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %185 = add nsw i32 %183, %184*/
begin
wcstombs_sbcs_177_185 = (wcstombs_sbcs_177_183 + wcstombs_sbcs_177_184_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %185 = add nsw i32 %183, %184*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_162))
begin
wcstombs_sbcs_177_185_reg <= wcstombs_sbcs_177_185;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_185_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %186 = getelementptr inbounds i8* %1, i32 %185*/
begin
wcstombs_sbcs_177_186 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_177_185_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %186 = getelementptr inbounds i8* %1, i32 %185*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163))
begin
wcstombs_sbcs_177_186_reg <= wcstombs_sbcs_177_186;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_186_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
begin
wcstombs_sbcs_177_187 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
wcstombs_sbcs_177_187_reg <= wcstombs_sbcs_177_187;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_187_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %177*/
/*   %188 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum26*/
begin
wcstombs_sbcs_177_188 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_177__sum26_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %177*/
/*   %188 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum26*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
wcstombs_sbcs_177_188_reg <= wcstombs_sbcs_177_188;
if (reset == 1'b0 && ^(wcstombs_sbcs_177_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_177_188_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %.sum24 = add i32 %.01.lcssa, -12*/
begin
wcstombs_sbcs_189__sum24 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd12);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %.sum24 = add i32 %.01.lcssa, -12*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_167))
begin
wcstombs_sbcs_189__sum24_reg <= wcstombs_sbcs_189__sum24;
if (reset == 1'b0 && ^(wcstombs_sbcs_189__sum24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189__sum24_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %190 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum24*/
begin
wcstombs_sbcs_189_190 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_189__sum24_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %190 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum24*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
wcstombs_sbcs_189_190_reg <= wcstombs_sbcs_189_190;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_190_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
begin
wcstombs_sbcs_189_191 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
wcstombs_sbcs_189_191_reg <= wcstombs_sbcs_189_191;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_191_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %192 = ashr i32 %191, 8*/
begin
wcstombs_sbcs_189_192 = ($signed(wcstombs_sbcs_189_191) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %192 = ashr i32 %191, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
wcstombs_sbcs_189_192_reg <= wcstombs_sbcs_189_192;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_192_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %193 = getelementptr inbounds i16* %3, i32 %192*/
begin
wcstombs_sbcs_189_193 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_189_192));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %193 = getelementptr inbounds i16* %3, i32 %192*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
wcstombs_sbcs_189_193_reg <= wcstombs_sbcs_189_193;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_193_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
begin
wcstombs_sbcs_189_194 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_172))
begin
wcstombs_sbcs_189_194_reg <= wcstombs_sbcs_189_194;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_194_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %195 = zext i16 %194 to i32*/
begin
wcstombs_sbcs_189_195 = wcstombs_sbcs_189_194;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %195 = zext i16 %194 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_172))
begin
wcstombs_sbcs_189_195_reg <= wcstombs_sbcs_189_195;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_195_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %196 = and i32 %191, 255*/
begin
wcstombs_sbcs_189_196 = (wcstombs_sbcs_189_191 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %196 = and i32 %191, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
wcstombs_sbcs_189_196_reg <= wcstombs_sbcs_189_196;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_196_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %197 = add nsw i32 %195, %196*/
begin
wcstombs_sbcs_189_197 = (wcstombs_sbcs_189_195 + wcstombs_sbcs_189_196_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %197 = add nsw i32 %195, %196*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_172))
begin
wcstombs_sbcs_189_197_reg <= wcstombs_sbcs_189_197;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_197_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %198 = getelementptr inbounds i8* %1, i32 %197*/
begin
wcstombs_sbcs_189_198 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_189_197_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %198 = getelementptr inbounds i8* %1, i32 %197*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173))
begin
wcstombs_sbcs_189_198_reg <= wcstombs_sbcs_189_198;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_198_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
begin
wcstombs_sbcs_189_199 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
wcstombs_sbcs_189_199_reg <= wcstombs_sbcs_189_199;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_199_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %189*/
/*   %200 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum24*/
begin
wcstombs_sbcs_189_200 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_189__sum24_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %189*/
/*   %200 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum24*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
wcstombs_sbcs_189_200_reg <= wcstombs_sbcs_189_200;
if (reset == 1'b0 && ^(wcstombs_sbcs_189_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_189_200_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %.sum22 = add i32 %.01.lcssa, -11*/
begin
wcstombs_sbcs_201__sum22 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd11);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %.sum22 = add i32 %.01.lcssa, -11*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_177))
begin
wcstombs_sbcs_201__sum22_reg <= wcstombs_sbcs_201__sum22;
if (reset == 1'b0 && ^(wcstombs_sbcs_201__sum22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201__sum22_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %202 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum22*/
begin
wcstombs_sbcs_201_202 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_201__sum22_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %202 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum22*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
wcstombs_sbcs_201_202_reg <= wcstombs_sbcs_201_202;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_202_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
begin
wcstombs_sbcs_201_203 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
wcstombs_sbcs_201_203_reg <= wcstombs_sbcs_201_203;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_203_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %204 = ashr i32 %203, 8*/
begin
wcstombs_sbcs_201_204 = ($signed(wcstombs_sbcs_201_203) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %204 = ashr i32 %203, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
wcstombs_sbcs_201_204_reg <= wcstombs_sbcs_201_204;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_204_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %205 = getelementptr inbounds i16* %3, i32 %204*/
begin
wcstombs_sbcs_201_205 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_201_204));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %205 = getelementptr inbounds i16* %3, i32 %204*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
wcstombs_sbcs_201_205_reg <= wcstombs_sbcs_201_205;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_205_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
begin
wcstombs_sbcs_201_206 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_182))
begin
wcstombs_sbcs_201_206_reg <= wcstombs_sbcs_201_206;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_206_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %207 = zext i16 %206 to i32*/
begin
wcstombs_sbcs_201_207 = wcstombs_sbcs_201_206;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %207 = zext i16 %206 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_182))
begin
wcstombs_sbcs_201_207_reg <= wcstombs_sbcs_201_207;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_207_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %208 = and i32 %203, 255*/
begin
wcstombs_sbcs_201_208 = (wcstombs_sbcs_201_203 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %208 = and i32 %203, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
wcstombs_sbcs_201_208_reg <= wcstombs_sbcs_201_208;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_208_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %209 = add nsw i32 %207, %208*/
begin
wcstombs_sbcs_201_209 = (wcstombs_sbcs_201_207 + wcstombs_sbcs_201_208_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %209 = add nsw i32 %207, %208*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_182))
begin
wcstombs_sbcs_201_209_reg <= wcstombs_sbcs_201_209;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_209_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %210 = getelementptr inbounds i8* %1, i32 %209*/
begin
wcstombs_sbcs_201_210 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_201_209_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %210 = getelementptr inbounds i8* %1, i32 %209*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183))
begin
wcstombs_sbcs_201_210_reg <= wcstombs_sbcs_201_210;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_210_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
begin
wcstombs_sbcs_201_211 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
wcstombs_sbcs_201_211_reg <= wcstombs_sbcs_201_211;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_211_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %201*/
/*   %212 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum22*/
begin
wcstombs_sbcs_201_212 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_201__sum22_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %201*/
/*   %212 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum22*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
wcstombs_sbcs_201_212_reg <= wcstombs_sbcs_201_212;
if (reset == 1'b0 && ^(wcstombs_sbcs_201_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_201_212_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %.sum20 = add i32 %.01.lcssa, -10*/
begin
wcstombs_sbcs_213__sum20 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd10);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %.sum20 = add i32 %.01.lcssa, -10*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_187))
begin
wcstombs_sbcs_213__sum20_reg <= wcstombs_sbcs_213__sum20;
if (reset == 1'b0 && ^(wcstombs_sbcs_213__sum20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213__sum20_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %214 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum20*/
begin
wcstombs_sbcs_213_214 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_213__sum20_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %214 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum20*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
wcstombs_sbcs_213_214_reg <= wcstombs_sbcs_213_214;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_214_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
begin
wcstombs_sbcs_213_215 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
wcstombs_sbcs_213_215_reg <= wcstombs_sbcs_213_215;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_215_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %216 = ashr i32 %215, 8*/
begin
wcstombs_sbcs_213_216 = ($signed(wcstombs_sbcs_213_215) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %216 = ashr i32 %215, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
wcstombs_sbcs_213_216_reg <= wcstombs_sbcs_213_216;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_216_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %217 = getelementptr inbounds i16* %3, i32 %216*/
begin
wcstombs_sbcs_213_217 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_213_216));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %217 = getelementptr inbounds i16* %3, i32 %216*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
wcstombs_sbcs_213_217_reg <= wcstombs_sbcs_213_217;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_217_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
begin
wcstombs_sbcs_213_218 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_192))
begin
wcstombs_sbcs_213_218_reg <= wcstombs_sbcs_213_218;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_218_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %219 = zext i16 %218 to i32*/
begin
wcstombs_sbcs_213_219 = wcstombs_sbcs_213_218;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %219 = zext i16 %218 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_192))
begin
wcstombs_sbcs_213_219_reg <= wcstombs_sbcs_213_219;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_219_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %220 = and i32 %215, 255*/
begin
wcstombs_sbcs_213_220 = (wcstombs_sbcs_213_215 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %220 = and i32 %215, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
wcstombs_sbcs_213_220_reg <= wcstombs_sbcs_213_220;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_220_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %221 = add nsw i32 %219, %220*/
begin
wcstombs_sbcs_213_221 = (wcstombs_sbcs_213_219 + wcstombs_sbcs_213_220_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %221 = add nsw i32 %219, %220*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_192))
begin
wcstombs_sbcs_213_221_reg <= wcstombs_sbcs_213_221;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_221_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %222 = getelementptr inbounds i8* %1, i32 %221*/
begin
wcstombs_sbcs_213_222 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_213_221_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %222 = getelementptr inbounds i8* %1, i32 %221*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193))
begin
wcstombs_sbcs_213_222_reg <= wcstombs_sbcs_213_222;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_222_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
begin
wcstombs_sbcs_213_223 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
wcstombs_sbcs_213_223_reg <= wcstombs_sbcs_213_223;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_223_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %213*/
/*   %224 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum20*/
begin
wcstombs_sbcs_213_224 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_213__sum20_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %213*/
/*   %224 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum20*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
wcstombs_sbcs_213_224_reg <= wcstombs_sbcs_213_224;
if (reset == 1'b0 && ^(wcstombs_sbcs_213_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_213_224_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %.sum18 = add i32 %.01.lcssa, -9*/
begin
wcstombs_sbcs_225__sum18 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd9);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %.sum18 = add i32 %.01.lcssa, -9*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_197))
begin
wcstombs_sbcs_225__sum18_reg <= wcstombs_sbcs_225__sum18;
if (reset == 1'b0 && ^(wcstombs_sbcs_225__sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225__sum18_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %226 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum18*/
begin
wcstombs_sbcs_225_226 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_225__sum18_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %226 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum18*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
wcstombs_sbcs_225_226_reg <= wcstombs_sbcs_225_226;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_226_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
begin
wcstombs_sbcs_225_227 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
wcstombs_sbcs_225_227_reg <= wcstombs_sbcs_225_227;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_227_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %228 = ashr i32 %227, 8*/
begin
wcstombs_sbcs_225_228 = ($signed(wcstombs_sbcs_225_227) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %228 = ashr i32 %227, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
wcstombs_sbcs_225_228_reg <= wcstombs_sbcs_225_228;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_228_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %229 = getelementptr inbounds i16* %3, i32 %228*/
begin
wcstombs_sbcs_225_229 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_225_228));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %229 = getelementptr inbounds i16* %3, i32 %228*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
wcstombs_sbcs_225_229_reg <= wcstombs_sbcs_225_229;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_229_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
begin
wcstombs_sbcs_225_230 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_202))
begin
wcstombs_sbcs_225_230_reg <= wcstombs_sbcs_225_230;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_230_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %231 = zext i16 %230 to i32*/
begin
wcstombs_sbcs_225_231 = wcstombs_sbcs_225_230;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %231 = zext i16 %230 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_202))
begin
wcstombs_sbcs_225_231_reg <= wcstombs_sbcs_225_231;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_231_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %232 = and i32 %227, 255*/
begin
wcstombs_sbcs_225_232 = (wcstombs_sbcs_225_227 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %232 = and i32 %227, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
wcstombs_sbcs_225_232_reg <= wcstombs_sbcs_225_232;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_232_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %233 = add nsw i32 %231, %232*/
begin
wcstombs_sbcs_225_233 = (wcstombs_sbcs_225_231 + wcstombs_sbcs_225_232_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %233 = add nsw i32 %231, %232*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_202))
begin
wcstombs_sbcs_225_233_reg <= wcstombs_sbcs_225_233;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_233_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %234 = getelementptr inbounds i8* %1, i32 %233*/
begin
wcstombs_sbcs_225_234 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_225_233_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %234 = getelementptr inbounds i8* %1, i32 %233*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203))
begin
wcstombs_sbcs_225_234_reg <= wcstombs_sbcs_225_234;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_234_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
begin
wcstombs_sbcs_225_235 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
wcstombs_sbcs_225_235_reg <= wcstombs_sbcs_225_235;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_235_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %225*/
/*   %236 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum18*/
begin
wcstombs_sbcs_225_236 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_225__sum18_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %225*/
/*   %236 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum18*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
wcstombs_sbcs_225_236_reg <= wcstombs_sbcs_225_236;
if (reset == 1'b0 && ^(wcstombs_sbcs_225_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_225_236_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %.sum16 = add i32 %.01.lcssa, -8*/
begin
wcstombs_sbcs_237__sum16 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %.sum16 = add i32 %.01.lcssa, -8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_207))
begin
wcstombs_sbcs_237__sum16_reg <= wcstombs_sbcs_237__sum16;
if (reset == 1'b0 && ^(wcstombs_sbcs_237__sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237__sum16_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %238 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum16*/
begin
wcstombs_sbcs_237_238 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_237__sum16_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %238 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
wcstombs_sbcs_237_238_reg <= wcstombs_sbcs_237_238;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_238_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
begin
wcstombs_sbcs_237_239 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
wcstombs_sbcs_237_239_reg <= wcstombs_sbcs_237_239;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_239_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %240 = ashr i32 %239, 8*/
begin
wcstombs_sbcs_237_240 = ($signed(wcstombs_sbcs_237_239) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %240 = ashr i32 %239, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
wcstombs_sbcs_237_240_reg <= wcstombs_sbcs_237_240;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_240_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %241 = getelementptr inbounds i16* %3, i32 %240*/
begin
wcstombs_sbcs_237_241 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_237_240));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %241 = getelementptr inbounds i16* %3, i32 %240*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
wcstombs_sbcs_237_241_reg <= wcstombs_sbcs_237_241;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_241_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
begin
wcstombs_sbcs_237_242 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_212))
begin
wcstombs_sbcs_237_242_reg <= wcstombs_sbcs_237_242;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_242_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %243 = zext i16 %242 to i32*/
begin
wcstombs_sbcs_237_243 = wcstombs_sbcs_237_242;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %243 = zext i16 %242 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_212))
begin
wcstombs_sbcs_237_243_reg <= wcstombs_sbcs_237_243;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_243_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %244 = and i32 %239, 255*/
begin
wcstombs_sbcs_237_244 = (wcstombs_sbcs_237_239 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %244 = and i32 %239, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
wcstombs_sbcs_237_244_reg <= wcstombs_sbcs_237_244;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_244_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %245 = add nsw i32 %243, %244*/
begin
wcstombs_sbcs_237_245 = (wcstombs_sbcs_237_243 + wcstombs_sbcs_237_244_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %245 = add nsw i32 %243, %244*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_212))
begin
wcstombs_sbcs_237_245_reg <= wcstombs_sbcs_237_245;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_245_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %246 = getelementptr inbounds i8* %1, i32 %245*/
begin
wcstombs_sbcs_237_246 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_237_245_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %246 = getelementptr inbounds i8* %1, i32 %245*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213))
begin
wcstombs_sbcs_237_246_reg <= wcstombs_sbcs_237_246;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_246_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
begin
wcstombs_sbcs_237_247 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
wcstombs_sbcs_237_247_reg <= wcstombs_sbcs_237_247;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_247_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %237*/
/*   %248 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum16*/
begin
wcstombs_sbcs_237_248 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_237__sum16_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %237*/
/*   %248 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum16*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
wcstombs_sbcs_237_248_reg <= wcstombs_sbcs_237_248;
if (reset == 1'b0 && ^(wcstombs_sbcs_237_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_237_248_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %.sum14 = add i32 %.01.lcssa, -7*/
begin
wcstombs_sbcs_249__sum14 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd7);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %.sum14 = add i32 %.01.lcssa, -7*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_217))
begin
wcstombs_sbcs_249__sum14_reg <= wcstombs_sbcs_249__sum14;
if (reset == 1'b0 && ^(wcstombs_sbcs_249__sum14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249__sum14_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %250 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum14*/
begin
wcstombs_sbcs_249_250 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_249__sum14_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %250 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum14*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
wcstombs_sbcs_249_250_reg <= wcstombs_sbcs_249_250;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_250_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
begin
wcstombs_sbcs_249_251 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
wcstombs_sbcs_249_251_reg <= wcstombs_sbcs_249_251;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_251_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %252 = ashr i32 %251, 8*/
begin
wcstombs_sbcs_249_252 = ($signed(wcstombs_sbcs_249_251) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %252 = ashr i32 %251, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
wcstombs_sbcs_249_252_reg <= wcstombs_sbcs_249_252;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_252_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %253 = getelementptr inbounds i16* %3, i32 %252*/
begin
wcstombs_sbcs_249_253 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_249_252));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %253 = getelementptr inbounds i16* %3, i32 %252*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
wcstombs_sbcs_249_253_reg <= wcstombs_sbcs_249_253;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_253_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
begin
wcstombs_sbcs_249_254 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_222))
begin
wcstombs_sbcs_249_254_reg <= wcstombs_sbcs_249_254;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_254_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %255 = zext i16 %254 to i32*/
begin
wcstombs_sbcs_249_255 = wcstombs_sbcs_249_254;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %255 = zext i16 %254 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_222))
begin
wcstombs_sbcs_249_255_reg <= wcstombs_sbcs_249_255;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_255_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %256 = and i32 %251, 255*/
begin
wcstombs_sbcs_249_256 = (wcstombs_sbcs_249_251 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %256 = and i32 %251, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
wcstombs_sbcs_249_256_reg <= wcstombs_sbcs_249_256;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_256_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %257 = add nsw i32 %255, %256*/
begin
wcstombs_sbcs_249_257 = (wcstombs_sbcs_249_255 + wcstombs_sbcs_249_256_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %257 = add nsw i32 %255, %256*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_222))
begin
wcstombs_sbcs_249_257_reg <= wcstombs_sbcs_249_257;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_257_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %258 = getelementptr inbounds i8* %1, i32 %257*/
begin
wcstombs_sbcs_249_258 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_249_257_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %258 = getelementptr inbounds i8* %1, i32 %257*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223))
begin
wcstombs_sbcs_249_258_reg <= wcstombs_sbcs_249_258;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_258_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
begin
wcstombs_sbcs_249_259 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
wcstombs_sbcs_249_259_reg <= wcstombs_sbcs_249_259;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_259_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %249*/
/*   %260 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum14*/
begin
wcstombs_sbcs_249_260 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_249__sum14_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %249*/
/*   %260 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum14*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
wcstombs_sbcs_249_260_reg <= wcstombs_sbcs_249_260;
if (reset == 1'b0 && ^(wcstombs_sbcs_249_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_249_260_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %.sum12 = add i32 %.01.lcssa, -6*/
begin
wcstombs_sbcs_261__sum12 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd6);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %.sum12 = add i32 %.01.lcssa, -6*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_227))
begin
wcstombs_sbcs_261__sum12_reg <= wcstombs_sbcs_261__sum12;
if (reset == 1'b0 && ^(wcstombs_sbcs_261__sum12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261__sum12_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %262 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum12*/
begin
wcstombs_sbcs_261_262 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_261__sum12_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %262 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum12*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
wcstombs_sbcs_261_262_reg <= wcstombs_sbcs_261_262;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_262_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
begin
wcstombs_sbcs_261_263 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
wcstombs_sbcs_261_263_reg <= wcstombs_sbcs_261_263;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_263_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %264 = ashr i32 %263, 8*/
begin
wcstombs_sbcs_261_264 = ($signed(wcstombs_sbcs_261_263) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %264 = ashr i32 %263, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
wcstombs_sbcs_261_264_reg <= wcstombs_sbcs_261_264;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_264_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %265 = getelementptr inbounds i16* %3, i32 %264*/
begin
wcstombs_sbcs_261_265 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_261_264));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %265 = getelementptr inbounds i16* %3, i32 %264*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
wcstombs_sbcs_261_265_reg <= wcstombs_sbcs_261_265;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_265_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
begin
wcstombs_sbcs_261_266 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_232))
begin
wcstombs_sbcs_261_266_reg <= wcstombs_sbcs_261_266;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_266_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %267 = zext i16 %266 to i32*/
begin
wcstombs_sbcs_261_267 = wcstombs_sbcs_261_266;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %267 = zext i16 %266 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_232))
begin
wcstombs_sbcs_261_267_reg <= wcstombs_sbcs_261_267;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_267_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %268 = and i32 %263, 255*/
begin
wcstombs_sbcs_261_268 = (wcstombs_sbcs_261_263 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %268 = and i32 %263, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
wcstombs_sbcs_261_268_reg <= wcstombs_sbcs_261_268;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_268_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %269 = add nsw i32 %267, %268*/
begin
wcstombs_sbcs_261_269 = (wcstombs_sbcs_261_267 + wcstombs_sbcs_261_268_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %269 = add nsw i32 %267, %268*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_232))
begin
wcstombs_sbcs_261_269_reg <= wcstombs_sbcs_261_269;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_269_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %270 = getelementptr inbounds i8* %1, i32 %269*/
begin
wcstombs_sbcs_261_270 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_261_269_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %270 = getelementptr inbounds i8* %1, i32 %269*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233))
begin
wcstombs_sbcs_261_270_reg <= wcstombs_sbcs_261_270;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_270_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
begin
wcstombs_sbcs_261_271 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
wcstombs_sbcs_261_271_reg <= wcstombs_sbcs_261_271;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_271_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %261*/
/*   %272 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum12*/
begin
wcstombs_sbcs_261_272 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_261__sum12_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %261*/
/*   %272 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum12*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
wcstombs_sbcs_261_272_reg <= wcstombs_sbcs_261_272;
if (reset == 1'b0 && ^(wcstombs_sbcs_261_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_261_272_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %.sum10 = add i32 %.01.lcssa, -5*/
begin
wcstombs_sbcs_273__sum10 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd5);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %.sum10 = add i32 %.01.lcssa, -5*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_237))
begin
wcstombs_sbcs_273__sum10_reg <= wcstombs_sbcs_273__sum10;
if (reset == 1'b0 && ^(wcstombs_sbcs_273__sum10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273__sum10_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %274 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum10*/
begin
wcstombs_sbcs_273_274 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_273__sum10_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %274 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum10*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
wcstombs_sbcs_273_274_reg <= wcstombs_sbcs_273_274;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_274_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
begin
wcstombs_sbcs_273_275 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
wcstombs_sbcs_273_275_reg <= wcstombs_sbcs_273_275;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_275_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %276 = ashr i32 %275, 8*/
begin
wcstombs_sbcs_273_276 = ($signed(wcstombs_sbcs_273_275) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %276 = ashr i32 %275, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
wcstombs_sbcs_273_276_reg <= wcstombs_sbcs_273_276;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_276_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %277 = getelementptr inbounds i16* %3, i32 %276*/
begin
wcstombs_sbcs_273_277 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_273_276));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %277 = getelementptr inbounds i16* %3, i32 %276*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
wcstombs_sbcs_273_277_reg <= wcstombs_sbcs_273_277;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_277_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
begin
wcstombs_sbcs_273_278 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_242))
begin
wcstombs_sbcs_273_278_reg <= wcstombs_sbcs_273_278;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_278_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %279 = zext i16 %278 to i32*/
begin
wcstombs_sbcs_273_279 = wcstombs_sbcs_273_278;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %279 = zext i16 %278 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_242))
begin
wcstombs_sbcs_273_279_reg <= wcstombs_sbcs_273_279;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_279_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %280 = and i32 %275, 255*/
begin
wcstombs_sbcs_273_280 = (wcstombs_sbcs_273_275 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %280 = and i32 %275, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
wcstombs_sbcs_273_280_reg <= wcstombs_sbcs_273_280;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_280_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %281 = add nsw i32 %279, %280*/
begin
wcstombs_sbcs_273_281 = (wcstombs_sbcs_273_279 + wcstombs_sbcs_273_280_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %281 = add nsw i32 %279, %280*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_242))
begin
wcstombs_sbcs_273_281_reg <= wcstombs_sbcs_273_281;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_281_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %282 = getelementptr inbounds i8* %1, i32 %281*/
begin
wcstombs_sbcs_273_282 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_273_281_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %282 = getelementptr inbounds i8* %1, i32 %281*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243))
begin
wcstombs_sbcs_273_282_reg <= wcstombs_sbcs_273_282;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_282_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
begin
wcstombs_sbcs_273_283 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
wcstombs_sbcs_273_283_reg <= wcstombs_sbcs_273_283;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_283_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %273*/
/*   %284 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum10*/
begin
wcstombs_sbcs_273_284 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_273__sum10_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %273*/
/*   %284 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum10*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
wcstombs_sbcs_273_284_reg <= wcstombs_sbcs_273_284;
if (reset == 1'b0 && ^(wcstombs_sbcs_273_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_273_284_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %.sum8 = add i32 %.01.lcssa, -4*/
begin
wcstombs_sbcs_285__sum8 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd4);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %.sum8 = add i32 %.01.lcssa, -4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_247))
begin
wcstombs_sbcs_285__sum8_reg <= wcstombs_sbcs_285__sum8;
if (reset == 1'b0 && ^(wcstombs_sbcs_285__sum8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285__sum8_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %286 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum8*/
begin
wcstombs_sbcs_285_286 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_285__sum8_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %286 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
wcstombs_sbcs_285_286_reg <= wcstombs_sbcs_285_286;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_286_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
begin
wcstombs_sbcs_285_287 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
wcstombs_sbcs_285_287_reg <= wcstombs_sbcs_285_287;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_287_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %288 = ashr i32 %287, 8*/
begin
wcstombs_sbcs_285_288 = ($signed(wcstombs_sbcs_285_287) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %288 = ashr i32 %287, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
wcstombs_sbcs_285_288_reg <= wcstombs_sbcs_285_288;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_288_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %289 = getelementptr inbounds i16* %3, i32 %288*/
begin
wcstombs_sbcs_285_289 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_285_288));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %289 = getelementptr inbounds i16* %3, i32 %288*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
wcstombs_sbcs_285_289_reg <= wcstombs_sbcs_285_289;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_289_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
begin
wcstombs_sbcs_285_290 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_252))
begin
wcstombs_sbcs_285_290_reg <= wcstombs_sbcs_285_290;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_290_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %291 = zext i16 %290 to i32*/
begin
wcstombs_sbcs_285_291 = wcstombs_sbcs_285_290;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %291 = zext i16 %290 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_252))
begin
wcstombs_sbcs_285_291_reg <= wcstombs_sbcs_285_291;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_291_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %292 = and i32 %287, 255*/
begin
wcstombs_sbcs_285_292 = (wcstombs_sbcs_285_287 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %292 = and i32 %287, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
wcstombs_sbcs_285_292_reg <= wcstombs_sbcs_285_292;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_292_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %293 = add nsw i32 %291, %292*/
begin
wcstombs_sbcs_285_293 = (wcstombs_sbcs_285_291 + wcstombs_sbcs_285_292_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %293 = add nsw i32 %291, %292*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_252))
begin
wcstombs_sbcs_285_293_reg <= wcstombs_sbcs_285_293;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_293_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %294 = getelementptr inbounds i8* %1, i32 %293*/
begin
wcstombs_sbcs_285_294 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_285_293_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %294 = getelementptr inbounds i8* %1, i32 %293*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253))
begin
wcstombs_sbcs_285_294_reg <= wcstombs_sbcs_285_294;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_294_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
begin
wcstombs_sbcs_285_295 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
wcstombs_sbcs_285_295_reg <= wcstombs_sbcs_285_295;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_295_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %285*/
/*   %296 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum8*/
begin
wcstombs_sbcs_285_296 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_285__sum8_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %285*/
/*   %296 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
wcstombs_sbcs_285_296_reg <= wcstombs_sbcs_285_296;
if (reset == 1'b0 && ^(wcstombs_sbcs_285_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_285_296_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %.sum6 = add i32 %.01.lcssa, -3*/
begin
wcstombs_sbcs_297__sum6 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd3);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %.sum6 = add i32 %.01.lcssa, -3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_257))
begin
wcstombs_sbcs_297__sum6_reg <= wcstombs_sbcs_297__sum6;
if (reset == 1'b0 && ^(wcstombs_sbcs_297__sum6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297__sum6_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %298 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum6*/
begin
wcstombs_sbcs_297_298 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_297__sum6_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %298 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum6*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
wcstombs_sbcs_297_298_reg <= wcstombs_sbcs_297_298;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_298_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
begin
wcstombs_sbcs_297_299 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
wcstombs_sbcs_297_299_reg <= wcstombs_sbcs_297_299;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_299_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %300 = ashr i32 %299, 8*/
begin
wcstombs_sbcs_297_300 = ($signed(wcstombs_sbcs_297_299) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %300 = ashr i32 %299, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
wcstombs_sbcs_297_300_reg <= wcstombs_sbcs_297_300;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_300_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %301 = getelementptr inbounds i16* %3, i32 %300*/
begin
wcstombs_sbcs_297_301 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_297_300));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %301 = getelementptr inbounds i16* %3, i32 %300*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
wcstombs_sbcs_297_301_reg <= wcstombs_sbcs_297_301;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_301_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
begin
wcstombs_sbcs_297_302 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_262))
begin
wcstombs_sbcs_297_302_reg <= wcstombs_sbcs_297_302;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_302_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %303 = zext i16 %302 to i32*/
begin
wcstombs_sbcs_297_303 = wcstombs_sbcs_297_302;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %303 = zext i16 %302 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_262))
begin
wcstombs_sbcs_297_303_reg <= wcstombs_sbcs_297_303;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_303_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %304 = and i32 %299, 255*/
begin
wcstombs_sbcs_297_304 = (wcstombs_sbcs_297_299 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %304 = and i32 %299, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
wcstombs_sbcs_297_304_reg <= wcstombs_sbcs_297_304;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_304_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %305 = add nsw i32 %303, %304*/
begin
wcstombs_sbcs_297_305 = (wcstombs_sbcs_297_303 + wcstombs_sbcs_297_304_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %305 = add nsw i32 %303, %304*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_262))
begin
wcstombs_sbcs_297_305_reg <= wcstombs_sbcs_297_305;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_305_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %306 = getelementptr inbounds i8* %1, i32 %305*/
begin
wcstombs_sbcs_297_306 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_297_305_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %306 = getelementptr inbounds i8* %1, i32 %305*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263))
begin
wcstombs_sbcs_297_306_reg <= wcstombs_sbcs_297_306;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_306_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
begin
wcstombs_sbcs_297_307 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
wcstombs_sbcs_297_307_reg <= wcstombs_sbcs_297_307;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_307_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %297*/
/*   %308 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum6*/
begin
wcstombs_sbcs_297_308 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_297__sum6_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %297*/
/*   %308 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum6*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
wcstombs_sbcs_297_308_reg <= wcstombs_sbcs_297_308;
if (reset == 1'b0 && ^(wcstombs_sbcs_297_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_297_308_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %.sum4 = add i32 %.01.lcssa, -2*/
begin
wcstombs_sbcs_309__sum4 = (wcstombs_sbcs_152__01_lcssa_reg + -32'd2);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %.sum4 = add i32 %.01.lcssa, -2*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_267))
begin
wcstombs_sbcs_309__sum4_reg <= wcstombs_sbcs_309__sum4;
if (reset == 1'b0 && ^(wcstombs_sbcs_309__sum4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309__sum4_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %310 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum4*/
begin
wcstombs_sbcs_309_310 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_309__sum4_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %310 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
wcstombs_sbcs_309_310_reg <= wcstombs_sbcs_309_310;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_310_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
begin
wcstombs_sbcs_309_311 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
wcstombs_sbcs_309_311_reg <= wcstombs_sbcs_309_311;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_311_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %312 = ashr i32 %311, 8*/
begin
wcstombs_sbcs_309_312 = ($signed(wcstombs_sbcs_309_311) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %312 = ashr i32 %311, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
wcstombs_sbcs_309_312_reg <= wcstombs_sbcs_309_312;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_312_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %313 = getelementptr inbounds i16* %3, i32 %312*/
begin
wcstombs_sbcs_309_313 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_309_312));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %313 = getelementptr inbounds i16* %3, i32 %312*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
wcstombs_sbcs_309_313_reg <= wcstombs_sbcs_309_313;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_313_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
begin
wcstombs_sbcs_309_314 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_272))
begin
wcstombs_sbcs_309_314_reg <= wcstombs_sbcs_309_314;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_314_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %315 = zext i16 %314 to i32*/
begin
wcstombs_sbcs_309_315 = wcstombs_sbcs_309_314;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %315 = zext i16 %314 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_272))
begin
wcstombs_sbcs_309_315_reg <= wcstombs_sbcs_309_315;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_315_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %316 = and i32 %311, 255*/
begin
wcstombs_sbcs_309_316 = (wcstombs_sbcs_309_311 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %316 = and i32 %311, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
wcstombs_sbcs_309_316_reg <= wcstombs_sbcs_309_316;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_316_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %317 = add nsw i32 %315, %316*/
begin
wcstombs_sbcs_309_317 = (wcstombs_sbcs_309_315 + wcstombs_sbcs_309_316_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %317 = add nsw i32 %315, %316*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_272))
begin
wcstombs_sbcs_309_317_reg <= wcstombs_sbcs_309_317;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_317_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %318 = getelementptr inbounds i8* %1, i32 %317*/
begin
wcstombs_sbcs_309_318 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_309_317_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %318 = getelementptr inbounds i8* %1, i32 %317*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273))
begin
wcstombs_sbcs_309_318_reg <= wcstombs_sbcs_309_318;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_318_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
begin
wcstombs_sbcs_309_319 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
wcstombs_sbcs_309_319_reg <= wcstombs_sbcs_309_319;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_319_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %309*/
/*   %320 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum4*/
begin
wcstombs_sbcs_309_320 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_309__sum4_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %309*/
/*   %320 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
wcstombs_sbcs_309_320_reg <= wcstombs_sbcs_309_320;
if (reset == 1'b0 && ^(wcstombs_sbcs_309_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_309_320_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %.sum = add i32 %.01.lcssa, -1*/
begin
wcstombs_sbcs_321__sum = (wcstombs_sbcs_152__01_lcssa_reg + -32'd1);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %.sum = add i32 %.01.lcssa, -1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_277))
begin
wcstombs_sbcs_321__sum_reg <= wcstombs_sbcs_321__sum;
if (reset == 1'b0 && ^(wcstombs_sbcs_321__sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321__sum_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %322 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum*/
begin
wcstombs_sbcs_321_322 = (wcstombs_sbcs_152__0_lcssa_reg + (4 * wcstombs_sbcs_321__sum_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %322 = getelementptr inbounds i32* %.0.lcssa, i32 %.sum*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
wcstombs_sbcs_321_322_reg <= wcstombs_sbcs_321_322;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_322_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
begin
wcstombs_sbcs_321_323 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
wcstombs_sbcs_321_323_reg <= wcstombs_sbcs_321_323;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_323_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %324 = ashr i32 %323, 8*/
begin
wcstombs_sbcs_321_324 = ($signed(wcstombs_sbcs_321_323) >>> 32'd8);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %324 = ashr i32 %323, 8*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
wcstombs_sbcs_321_324_reg <= wcstombs_sbcs_321_324;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_324_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %325 = getelementptr inbounds i16* %3, i32 %324*/
begin
wcstombs_sbcs_321_325 = (wcstombs_sbcs__preheader_3_reg + (2 * wcstombs_sbcs_321_324));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %325 = getelementptr inbounds i16* %3, i32 %324*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
wcstombs_sbcs_321_325_reg <= wcstombs_sbcs_321_325;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_325_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
begin
wcstombs_sbcs_321_326 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_282))
begin
wcstombs_sbcs_321_326_reg <= wcstombs_sbcs_321_326;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_326_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %327 = zext i16 %326 to i32*/
begin
wcstombs_sbcs_321_327 = wcstombs_sbcs_321_326;
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %327 = zext i16 %326 to i32*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_282))
begin
wcstombs_sbcs_321_327_reg <= wcstombs_sbcs_321_327;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_327_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %328 = and i32 %323, 255*/
begin
wcstombs_sbcs_321_328 = (wcstombs_sbcs_321_323 & 32'd255);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %328 = and i32 %323, 255*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
wcstombs_sbcs_321_328_reg <= wcstombs_sbcs_321_328;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_328_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %329 = add nsw i32 %327, %328*/
begin
wcstombs_sbcs_321_329 = (wcstombs_sbcs_321_327 + wcstombs_sbcs_321_328_reg);
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %329 = add nsw i32 %327, %328*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_282))
begin
wcstombs_sbcs_321_329_reg <= wcstombs_sbcs_321_329;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_329_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %330 = getelementptr inbounds i8* %1, i32 %329*/
begin
wcstombs_sbcs_321_330 = (wcstombs_sbcs__preheader_1_reg + (1 * wcstombs_sbcs_321_329_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %330 = getelementptr inbounds i8* %1, i32 %329*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283))
begin
wcstombs_sbcs_321_330_reg <= wcstombs_sbcs_321_330;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_330_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
begin
wcstombs_sbcs_321_331 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
wcstombs_sbcs_321_331_reg <= wcstombs_sbcs_321_331;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_331_reg"); $finish; end
end
end
always @(*) begin
/* wcstombs_sbcs: %321*/
/*   %332 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum*/
begin
wcstombs_sbcs_321_332 = (wcstombs_sbcs_152__02_lcssa_reg + (1 * wcstombs_sbcs_321__sum_reg));
end
end
always @(posedge clk) begin
/* wcstombs_sbcs: %321*/
/*   %332 = getelementptr inbounds i8* %.02.lcssa, i32 %.sum*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
wcstombs_sbcs_321_332_reg <= wcstombs_sbcs_321_332;
if (reset == 1'b0 && ^(wcstombs_sbcs_321_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_321_332_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_wcstombs_sbcs_6_tmp97_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* wcstombs_sbcs: %6*/
/*   %tmp97 = mul i32 %indvar, -16*/
if ((lpm_mult_wcstombs_sbcs_6_tmp97_en == 1'd1))
begin
wcstombs_sbcs_6_tmp97_stage0_reg <= (wcstombs_sbcs_6_indvar_reg * -32'd16);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* wcstombs_sbcs: %333*/
/*   ret i32 %ret.0.ph*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_333_287))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %15, i8* %.0258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %24, i8* %scevgep100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %42, i8* %scevgep102, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %51, i8* %scevgep103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %60, i8* %scevgep104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %69, i8* %scevgep105, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %78, i8* %scevgep106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %87, i8* %scevgep107, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %96, i8* %scevgep108, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %105, i8* %scevgep109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %114, i8* %scevgep110, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %123, i8* %scevgep111, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %132, i8* %scevgep112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %141, i8* %scevgep113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %150, i8* %scevgep114, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %153*/
/*   store i8 %163, i8* %164, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %165*/
/*   store i8 %175, i8* %176, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %177*/
/*   store i8 %187, i8* %188, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %189*/
/*   store i8 %199, i8* %200, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %201*/
/*   store i8 %211, i8* %212, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %213*/
/*   store i8 %223, i8* %224, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %225*/
/*   store i8 %235, i8* %236, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %237*/
/*   store i8 %247, i8* %248, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %249*/
/*   store i8 %259, i8* %260, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %261*/
/*   store i8 %271, i8* %272, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %273*/
/*   store i8 %283, i8* %284, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %285*/
/*   store i8 %295, i8* %296, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %297*/
/*   store i8 %307, i8* %308, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %309*/
/*   store i8 %319, i8* %320, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
memory_controller_enable_a = 1'd1;
end
/* wcstombs_sbcs: %321*/
/*   store i8 %331, i8* %332, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_address_a = wcstombs_sbcs__preheader_0;
end
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
memory_controller_address_a = wcstombs_sbcs_6__060;
end
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
memory_controller_address_a = wcstombs_sbcs_6_9;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %15, i8* %.0258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
memory_controller_address_a = wcstombs_sbcs_6__0258_reg;
end
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep_reg;
end
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
memory_controller_address_a = wcstombs_sbcs_6_18;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %24, i8* %scevgep100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep100_reg;
end
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
memory_controller_address_a = wcstombs_sbcs_6_36;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %42, i8* %scevgep102, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep102_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %51, i8* %scevgep103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep103_reg;
end
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
memory_controller_address_a = wcstombs_sbcs_6_54;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %60, i8* %scevgep104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep104_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %69, i8* %scevgep105, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep105_reg;
end
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
memory_controller_address_a = wcstombs_sbcs_6_72;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %78, i8* %scevgep106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep106_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %87, i8* %scevgep107, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep107_reg;
end
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
memory_controller_address_a = wcstombs_sbcs_6_90;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %96, i8* %scevgep108, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep108_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %105, i8* %scevgep109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep109_reg;
end
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
memory_controller_address_a = wcstombs_sbcs_6_108;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %114, i8* %scevgep110, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep110_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %123, i8* %scevgep111, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep111_reg;
end
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
memory_controller_address_a = wcstombs_sbcs_6_126;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %132, i8* %scevgep112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep112_reg;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %141, i8* %scevgep113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep113_reg;
end
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
memory_controller_address_a = wcstombs_sbcs_6_144;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %150, i8* %scevgep114, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
memory_controller_address_a = wcstombs_sbcs_6_scevgep114_reg;
end
/* wcstombs_sbcs: %153*/
/*   store i8 %163, i8* %164, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
memory_controller_address_a = wcstombs_sbcs_153_164_reg;
end
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
memory_controller_address_a = wcstombs_sbcs_165_169;
end
/* wcstombs_sbcs: %165*/
/*   store i8 %175, i8* %176, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
memory_controller_address_a = wcstombs_sbcs_165_176_reg;
end
/* wcstombs_sbcs: %177*/
/*   store i8 %187, i8* %188, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
memory_controller_address_a = wcstombs_sbcs_177_188_reg;
end
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
memory_controller_address_a = wcstombs_sbcs_189_193;
end
/* wcstombs_sbcs: %189*/
/*   store i8 %199, i8* %200, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
memory_controller_address_a = wcstombs_sbcs_189_200_reg;
end
/* wcstombs_sbcs: %201*/
/*   store i8 %211, i8* %212, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
memory_controller_address_a = wcstombs_sbcs_201_212_reg;
end
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
memory_controller_address_a = wcstombs_sbcs_213_217;
end
/* wcstombs_sbcs: %213*/
/*   store i8 %223, i8* %224, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
memory_controller_address_a = wcstombs_sbcs_213_224_reg;
end
/* wcstombs_sbcs: %225*/
/*   store i8 %235, i8* %236, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
memory_controller_address_a = wcstombs_sbcs_225_236_reg;
end
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
memory_controller_address_a = wcstombs_sbcs_237_241;
end
/* wcstombs_sbcs: %237*/
/*   store i8 %247, i8* %248, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
memory_controller_address_a = wcstombs_sbcs_237_248_reg;
end
/* wcstombs_sbcs: %249*/
/*   store i8 %259, i8* %260, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
memory_controller_address_a = wcstombs_sbcs_249_260_reg;
end
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
memory_controller_address_a = wcstombs_sbcs_261_265;
end
/* wcstombs_sbcs: %261*/
/*   store i8 %271, i8* %272, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
memory_controller_address_a = wcstombs_sbcs_261_272_reg;
end
/* wcstombs_sbcs: %273*/
/*   store i8 %283, i8* %284, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
memory_controller_address_a = wcstombs_sbcs_273_284_reg;
end
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
memory_controller_address_a = wcstombs_sbcs_285_289;
end
/* wcstombs_sbcs: %285*/
/*   store i8 %295, i8* %296, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
memory_controller_address_a = wcstombs_sbcs_285_296_reg;
end
/* wcstombs_sbcs: %297*/
/*   store i8 %307, i8* %308, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
memory_controller_address_a = wcstombs_sbcs_297_308_reg;
end
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
memory_controller_address_a = wcstombs_sbcs_309_313;
end
/* wcstombs_sbcs: %309*/
/*   store i8 %319, i8* %320, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
memory_controller_address_a = wcstombs_sbcs_309_320_reg;
end
/* wcstombs_sbcs: %321*/
/*   store i8 %331, i8* %332, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
memory_controller_address_a = wcstombs_sbcs_321_332_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %15, i8* %.0258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %24, i8* %scevgep100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %42, i8* %scevgep102, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %51, i8* %scevgep103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %60, i8* %scevgep104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %69, i8* %scevgep105, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %78, i8* %scevgep106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %87, i8* %scevgep107, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %96, i8* %scevgep108, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %105, i8* %scevgep109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %114, i8* %scevgep110, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %123, i8* %scevgep111, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %132, i8* %scevgep112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %141, i8* %scevgep113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %150, i8* %scevgep114, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %153*/
/*   store i8 %163, i8* %164, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %165*/
/*   store i8 %175, i8* %176, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %177*/
/*   store i8 %187, i8* %188, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %189*/
/*   store i8 %199, i8* %200, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %201*/
/*   store i8 %211, i8* %212, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %213*/
/*   store i8 %223, i8* %224, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %225*/
/*   store i8 %235, i8* %236, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %237*/
/*   store i8 %247, i8* %248, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %249*/
/*   store i8 %259, i8* %260, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %261*/
/*   store i8 %271, i8* %272, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %273*/
/*   store i8 %283, i8* %284, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %285*/
/*   store i8 %295, i8* %296, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %297*/
/*   store i8 %307, i8* %308, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
memory_controller_write_enable_a = 1'd0;
end
/* wcstombs_sbcs: %309*/
/*   store i8 %319, i8* %320, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
memory_controller_write_enable_a = 1'd1;
end
/* wcstombs_sbcs: %321*/
/*   store i8 %331, i8* %332, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %15, i8* %.0258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
memory_controller_in_a = wcstombs_sbcs_6_15;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %24, i8* %scevgep100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
memory_controller_in_a = wcstombs_sbcs_6_24;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %42, i8* %scevgep102, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
memory_controller_in_a = wcstombs_sbcs_6_42;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %51, i8* %scevgep103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
memory_controller_in_a = wcstombs_sbcs_6_51;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %60, i8* %scevgep104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
memory_controller_in_a = wcstombs_sbcs_6_60;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %69, i8* %scevgep105, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
memory_controller_in_a = wcstombs_sbcs_6_69;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %78, i8* %scevgep106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
memory_controller_in_a = wcstombs_sbcs_6_78;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %87, i8* %scevgep107, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
memory_controller_in_a = wcstombs_sbcs_6_87;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %96, i8* %scevgep108, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
memory_controller_in_a = wcstombs_sbcs_6_96;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %105, i8* %scevgep109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
memory_controller_in_a = wcstombs_sbcs_6_105;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %114, i8* %scevgep110, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
memory_controller_in_a = wcstombs_sbcs_6_114;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %123, i8* %scevgep111, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
memory_controller_in_a = wcstombs_sbcs_6_123;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %132, i8* %scevgep112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
memory_controller_in_a = wcstombs_sbcs_6_132;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %141, i8* %scevgep113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
memory_controller_in_a = wcstombs_sbcs_6_141;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %150, i8* %scevgep114, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
memory_controller_in_a = wcstombs_sbcs_6_150;
end
/* wcstombs_sbcs: %153*/
/*   store i8 %163, i8* %164, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
memory_controller_in_a = wcstombs_sbcs_153_163;
end
/* wcstombs_sbcs: %165*/
/*   store i8 %175, i8* %176, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
memory_controller_in_a = wcstombs_sbcs_165_175;
end
/* wcstombs_sbcs: %177*/
/*   store i8 %187, i8* %188, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
memory_controller_in_a = wcstombs_sbcs_177_187;
end
/* wcstombs_sbcs: %189*/
/*   store i8 %199, i8* %200, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
memory_controller_in_a = wcstombs_sbcs_189_199;
end
/* wcstombs_sbcs: %201*/
/*   store i8 %211, i8* %212, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
memory_controller_in_a = wcstombs_sbcs_201_211;
end
/* wcstombs_sbcs: %213*/
/*   store i8 %223, i8* %224, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
memory_controller_in_a = wcstombs_sbcs_213_223;
end
/* wcstombs_sbcs: %225*/
/*   store i8 %235, i8* %236, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
memory_controller_in_a = wcstombs_sbcs_225_235;
end
/* wcstombs_sbcs: %237*/
/*   store i8 %247, i8* %248, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
memory_controller_in_a = wcstombs_sbcs_237_247;
end
/* wcstombs_sbcs: %249*/
/*   store i8 %259, i8* %260, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
memory_controller_in_a = wcstombs_sbcs_249_259;
end
/* wcstombs_sbcs: %261*/
/*   store i8 %271, i8* %272, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
memory_controller_in_a = wcstombs_sbcs_261_271;
end
/* wcstombs_sbcs: %273*/
/*   store i8 %283, i8* %284, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
memory_controller_in_a = wcstombs_sbcs_273_283;
end
/* wcstombs_sbcs: %285*/
/*   store i8 %295, i8* %296, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
memory_controller_in_a = wcstombs_sbcs_285_295;
end
/* wcstombs_sbcs: %297*/
/*   store i8 %307, i8* %308, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
memory_controller_in_a = wcstombs_sbcs_297_307;
end
/* wcstombs_sbcs: %309*/
/*   store i8 %319, i8* %320, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
memory_controller_in_a = wcstombs_sbcs_309_319;
end
/* wcstombs_sbcs: %321*/
/*   store i8 %331, i8* %332, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
memory_controller_in_a = wcstombs_sbcs_321_331;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %1 = load i8** %0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_size_a = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %7 = load i32* %.060, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_5))
begin
memory_controller_size_a = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %10 = load i16* %9, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_7))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %15, i8* %.0258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_12))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_13))
begin
memory_controller_size_a = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %19 = load i16* %18, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_15))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %24, i8* %scevgep100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_20))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %37 = load i16* %36, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_31))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %42, i8* %scevgep102, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_36))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %51, i8* %scevgep103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_44))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %55 = load i16* %54, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_47))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %60, i8* %scevgep104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_52))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %69, i8* %scevgep105, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_60))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %73 = load i16* %72, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_63))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %78, i8* %scevgep106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_68))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %87, i8* %scevgep107, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_76))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %91 = load i16* %90, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_79))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %96, i8* %scevgep108, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_84))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %105, i8* %scevgep109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_92))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %109 = load i16* %108, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_95))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %114, i8* %scevgep110, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_100))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %123, i8* %scevgep111, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_108))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %127 = load i16* %126, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_111))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %132, i8* %scevgep112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_116))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %141, i8* %scevgep113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_124))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %145 = load i16* %144, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_127))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %150, i8* %scevgep114, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_132))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %153*/
/*   store i8 %163, i8* %164, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_145))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %165*/
/*   %170 = load i16* %169, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_150))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %165*/
/*   store i8 %175, i8* %176, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_155))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %177*/
/*   store i8 %187, i8* %188, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_165))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %189*/
/*   %194 = load i16* %193, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_170))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %189*/
/*   store i8 %199, i8* %200, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_175))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %201*/
/*   store i8 %211, i8* %212, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_185))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %213*/
/*   %218 = load i16* %217, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_190))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %213*/
/*   store i8 %223, i8* %224, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_195))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %225*/
/*   store i8 %235, i8* %236, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_205))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %237*/
/*   %242 = load i16* %241, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_210))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %237*/
/*   store i8 %247, i8* %248, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_215))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %249*/
/*   store i8 %259, i8* %260, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_225))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %261*/
/*   %266 = load i16* %265, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_230))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %261*/
/*   store i8 %271, i8* %272, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_235))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %273*/
/*   store i8 %283, i8* %284, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_245))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %285*/
/*   %290 = load i16* %289, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_250))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %285*/
/*   store i8 %295, i8* %296, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_255))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %297*/
/*   store i8 %307, i8* %308, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_265))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %309*/
/*   %314 = load i16* %313, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_270))
begin
memory_controller_size_a = 2'd1;
end
/* wcstombs_sbcs: %309*/
/*   store i8 %319, i8* %320, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_275))
begin
memory_controller_size_a = 2'd0;
end
/* wcstombs_sbcs: %321*/
/*   store i8 %331, i8* %332, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_285))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %33, i8* %scevgep101, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
memory_controller_enable_b = 1'd1;
end
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_address_b = wcstombs_sbcs__preheader_2;
end
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10))
begin
memory_controller_address_b = wcstombs_sbcs_6_14;
end
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18))
begin
memory_controller_address_b = wcstombs_sbcs_6_23;
end
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep67_reg;
end
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
memory_controller_address_b = wcstombs_sbcs_6_27;
end
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26))
begin
memory_controller_address_b = wcstombs_sbcs_6_32;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %33, i8* %scevgep101, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep101_reg;
end
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep69_reg;
end
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34))
begin
memory_controller_address_b = wcstombs_sbcs_6_41;
end
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep71_reg;
end
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
memory_controller_address_b = wcstombs_sbcs_6_45;
end
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42))
begin
memory_controller_address_b = wcstombs_sbcs_6_50;
end
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep73_reg;
end
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50))
begin
memory_controller_address_b = wcstombs_sbcs_6_59;
end
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep75_reg;
end
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
memory_controller_address_b = wcstombs_sbcs_6_63;
end
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58))
begin
memory_controller_address_b = wcstombs_sbcs_6_68;
end
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep77_reg;
end
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66))
begin
memory_controller_address_b = wcstombs_sbcs_6_77;
end
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep79_reg;
end
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
memory_controller_address_b = wcstombs_sbcs_6_81;
end
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74))
begin
memory_controller_address_b = wcstombs_sbcs_6_86;
end
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep81_reg;
end
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82))
begin
memory_controller_address_b = wcstombs_sbcs_6_95;
end
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep83_reg;
end
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
memory_controller_address_b = wcstombs_sbcs_6_99;
end
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90))
begin
memory_controller_address_b = wcstombs_sbcs_6_104;
end
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep85_reg;
end
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98))
begin
memory_controller_address_b = wcstombs_sbcs_6_113;
end
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep87_reg;
end
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
memory_controller_address_b = wcstombs_sbcs_6_117;
end
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106))
begin
memory_controller_address_b = wcstombs_sbcs_6_122;
end
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep89_reg;
end
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114))
begin
memory_controller_address_b = wcstombs_sbcs_6_131;
end
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep91_reg;
end
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
memory_controller_address_b = wcstombs_sbcs_6_135;
end
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122))
begin
memory_controller_address_b = wcstombs_sbcs_6_140;
end
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125))
begin
memory_controller_address_b = wcstombs_sbcs_6_scevgep93_reg;
end
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130))
begin
memory_controller_address_b = wcstombs_sbcs_6_149;
end
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
memory_controller_address_b = wcstombs_sbcs_153_154;
end
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
memory_controller_address_b = wcstombs_sbcs_153_157;
end
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143))
begin
memory_controller_address_b = wcstombs_sbcs_153_162;
end
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
memory_controller_address_b = wcstombs_sbcs_165_166;
end
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153))
begin
memory_controller_address_b = wcstombs_sbcs_165_174;
end
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
memory_controller_address_b = wcstombs_sbcs_177_178;
end
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
memory_controller_address_b = wcstombs_sbcs_177_181;
end
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163))
begin
memory_controller_address_b = wcstombs_sbcs_177_186;
end
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
memory_controller_address_b = wcstombs_sbcs_189_190;
end
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173))
begin
memory_controller_address_b = wcstombs_sbcs_189_198;
end
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
memory_controller_address_b = wcstombs_sbcs_201_202;
end
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
memory_controller_address_b = wcstombs_sbcs_201_205;
end
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183))
begin
memory_controller_address_b = wcstombs_sbcs_201_210;
end
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
memory_controller_address_b = wcstombs_sbcs_213_214;
end
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193))
begin
memory_controller_address_b = wcstombs_sbcs_213_222;
end
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
memory_controller_address_b = wcstombs_sbcs_225_226;
end
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
memory_controller_address_b = wcstombs_sbcs_225_229;
end
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203))
begin
memory_controller_address_b = wcstombs_sbcs_225_234;
end
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
memory_controller_address_b = wcstombs_sbcs_237_238;
end
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213))
begin
memory_controller_address_b = wcstombs_sbcs_237_246;
end
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
memory_controller_address_b = wcstombs_sbcs_249_250;
end
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
memory_controller_address_b = wcstombs_sbcs_249_253;
end
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223))
begin
memory_controller_address_b = wcstombs_sbcs_249_258;
end
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
memory_controller_address_b = wcstombs_sbcs_261_262;
end
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233))
begin
memory_controller_address_b = wcstombs_sbcs_261_270;
end
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
memory_controller_address_b = wcstombs_sbcs_273_274;
end
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
memory_controller_address_b = wcstombs_sbcs_273_277;
end
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243))
begin
memory_controller_address_b = wcstombs_sbcs_273_282;
end
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
memory_controller_address_b = wcstombs_sbcs_285_286;
end
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253))
begin
memory_controller_address_b = wcstombs_sbcs_285_294;
end
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
memory_controller_address_b = wcstombs_sbcs_297_298;
end
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
memory_controller_address_b = wcstombs_sbcs_297_301;
end
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263))
begin
memory_controller_address_b = wcstombs_sbcs_297_306;
end
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
memory_controller_address_b = wcstombs_sbcs_309_310;
end
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273))
begin
memory_controller_address_b = wcstombs_sbcs_309_318;
end
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
memory_controller_address_b = wcstombs_sbcs_321_322;
end
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
memory_controller_address_b = wcstombs_sbcs_321_325;
end
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283))
begin
memory_controller_address_b = wcstombs_sbcs_321_330;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %33, i8* %scevgep101, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
memory_controller_write_enable_b = 1'd0;
end
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %33, i8* %scevgep101, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
memory_controller_in_b = wcstombs_sbcs_6_33;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* wcstombs_sbcs: %.preheader*/
/*   %3 = load i16** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB__preheader_1))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %15 = load i8* %14, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_10))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %24 = load i8* %23, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_18))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %25 = load i32* %scevgep67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_21))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %28 = load i16* %27, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_23))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %33 = load i8* %32, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_26))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   store i8 %33, i8* %scevgep101, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_28))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %34 = load i32* %scevgep69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_29))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %42 = load i8* %41, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_34))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %43 = load i32* %scevgep71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_37))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %46 = load i16* %45, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_39))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_42))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %52 = load i32* %scevgep73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_45))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %60 = load i8* %59, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_50))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %61 = load i32* %scevgep75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_53))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %64 = load i16* %63, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_55))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %69 = load i8* %68, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_58))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %70 = load i32* %scevgep77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_61))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %78 = load i8* %77, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_66))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %79 = load i32* %scevgep79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_69))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %82 = load i16* %81, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_71))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %87 = load i8* %86, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_74))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %88 = load i32* %scevgep81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_77))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %96 = load i8* %95, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_82))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %97 = load i32* %scevgep83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_85))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %100 = load i16* %99, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_87))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %105 = load i8* %104, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_90))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %106 = load i32* %scevgep85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_93))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %114 = load i8* %113, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_98))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %115 = load i32* %scevgep87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_101))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %118 = load i16* %117, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_103))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %123 = load i8* %122, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_106))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %124 = load i32* %scevgep89, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_109))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %132 = load i8* %131, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_114))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %133 = load i32* %scevgep91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_117))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %136 = load i16* %135, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_119))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %6*/
/*   %141 = load i8* %140, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_122))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %6*/
/*   %142 = load i32* %scevgep93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_125))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %6*/
/*   %150 = load i8* %149, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_6_130))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %153*/
/*   %155 = load i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_138))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %153*/
/*   %158 = load i16* %157, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_140))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %153*/
/*   %163 = load i8* %162, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_153_143))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %165*/
/*   %167 = load i32* %166, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_148))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %165*/
/*   %175 = load i8* %174, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_165_153))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %177*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_158))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %177*/
/*   %182 = load i16* %181, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_160))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %177*/
/*   %187 = load i8* %186, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_177_163))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_168))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %189*/
/*   %199 = load i8* %198, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_189_173))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %201*/
/*   %203 = load i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_178))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %201*/
/*   %206 = load i16* %205, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_180))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %201*/
/*   %211 = load i8* %210, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_201_183))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %213*/
/*   %215 = load i32* %214, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_188))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %213*/
/*   %223 = load i8* %222, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_213_193))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %225*/
/*   %227 = load i32* %226, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_198))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %225*/
/*   %230 = load i16* %229, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_200))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %225*/
/*   %235 = load i8* %234, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_225_203))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %237*/
/*   %239 = load i32* %238, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_208))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %237*/
/*   %247 = load i8* %246, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_237_213))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %249*/
/*   %251 = load i32* %250, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_218))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %249*/
/*   %254 = load i16* %253, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_220))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %249*/
/*   %259 = load i8* %258, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_249_223))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %261*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_228))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %261*/
/*   %271 = load i8* %270, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_261_233))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %273*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_238))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %273*/
/*   %278 = load i16* %277, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_240))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %273*/
/*   %283 = load i8* %282, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_273_243))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %285*/
/*   %287 = load i32* %286, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_248))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %285*/
/*   %295 = load i8* %294, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_285_253))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %297*/
/*   %299 = load i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_258))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %297*/
/*   %302 = load i16* %301, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_260))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %297*/
/*   %307 = load i8* %306, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_297_263))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %309*/
/*   %311 = load i32* %310, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_268))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %309*/
/*   %319 = load i8* %318, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_309_273))
begin
memory_controller_size_b = 2'd0;
end
/* wcstombs_sbcs: %321*/
/*   %323 = load i32* %322, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_278))
begin
memory_controller_size_b = 2'd2;
end
/* wcstombs_sbcs: %321*/
/*   %326 = load i16* %325, align 2, !tbaa !4*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_280))
begin
memory_controller_size_b = 2'd1;
end
/* wcstombs_sbcs: %321*/
/*   %331 = load i8* %330, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_321_283))
begin
memory_controller_size_b = 2'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* wcstombs_sbcs: %333*/
/*   ret i32 %ret.0.ph*/
if ((cur_state == LEGUP_F_wcstombs_sbcs_BB_333_287))
begin
return_val <= wcstombs_sbcs__preheader_ret_0_ph_reg;
if (reset == 1'b0 && ^(wcstombs_sbcs__preheader_ret_0_ph_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  wcstombs_sbcs_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_arg_table;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_arg_src;
reg [31:0] wcstombs_sbcs_arg_srclen;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_arg_dst;
reg [31:0] wcstombs_sbcs_arg_dstlen;
wire  wcstombs_sbcs_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_memory_controller_address_a;
wire  wcstombs_sbcs_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] wcstombs_sbcs_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] wcstombs_sbcs_memory_controller_out_a;
wire [1:0] wcstombs_sbcs_memory_controller_size_a;
wire  wcstombs_sbcs_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] wcstombs_sbcs_memory_controller_address_b;
wire  wcstombs_sbcs_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] wcstombs_sbcs_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] wcstombs_sbcs_memory_controller_out_b;
wire [1:0] wcstombs_sbcs_memory_controller_size_b;
reg  wcstombs_sbcs_memory_controller_waitrequest;
wire  wcstombs_sbcs_finish;
reg  wcstombs_sbcs_finish_final;
wire [31:0] wcstombs_sbcs_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


wcstombs_sbcs wcstombs_sbcs_inst (
	.memory_controller_enable_a (wcstombs_sbcs_memory_controller_enable_a),
	.memory_controller_address_a (wcstombs_sbcs_memory_controller_address_a),
	.memory_controller_write_enable_a (wcstombs_sbcs_memory_controller_write_enable_a),
	.memory_controller_in_a (wcstombs_sbcs_memory_controller_in_a),
	.memory_controller_size_a (wcstombs_sbcs_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (wcstombs_sbcs_memory_controller_enable_b),
	.memory_controller_address_b (wcstombs_sbcs_memory_controller_address_b),
	.memory_controller_write_enable_b (wcstombs_sbcs_memory_controller_write_enable_b),
	.memory_controller_in_b (wcstombs_sbcs_memory_controller_in_b),
	.memory_controller_size_b (wcstombs_sbcs_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (wcstombs_sbcs_start),
	.finish (wcstombs_sbcs_finish),
	.return_val (wcstombs_sbcs_return_val),
	.arg_table (wcstombs_sbcs_arg_table),
	.arg_src (wcstombs_sbcs_arg_src),
	.arg_srclen (wcstombs_sbcs_arg_srclen),
	.arg_dst (wcstombs_sbcs_arg_dst),
	.arg_dstlen (wcstombs_sbcs_arg_dstlen)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (wcstombs_sbcs_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
begin
main_0_1 = wcstombs_sbcs_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
wcstombs_sbcs_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_arg_table <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_arg_table"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_arg_src <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_arg_src"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_arg_srclen <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_arg_srclen"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_arg_dst <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_arg_dst"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
wcstombs_sbcs_arg_dstlen <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to wcstombs_sbcs_arg_dstlen"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
begin
wcstombs_sbcs_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
begin
wcstombs_sbcs_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
wcstombs_sbcs_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
wcstombs_sbcs_finish_final = wcstombs_sbcs_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = wcstombs_sbcs_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = wcstombs_sbcs_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = wcstombs_sbcs_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = wcstombs_sbcs_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = wcstombs_sbcs_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = wcstombs_sbcs_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = wcstombs_sbcs_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = wcstombs_sbcs_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = wcstombs_sbcs_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = wcstombs_sbcs_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = wcstombs_sbcs_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = wcstombs_sbcs_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = wcstombs_sbcs_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = wcstombs_sbcs_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = wcstombs_sbcs_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = wcstombs_sbcs_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = wcstombs_sbcs_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = wcstombs_sbcs_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = wcstombs_sbcs_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @wcstombs_sbcs(%struct.sbcs_table* undef, i32* undef, i32 undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = wcstombs_sbcs_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
