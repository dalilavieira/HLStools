//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:44 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module vgaHWInit
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_var,
	arg_par,
	arg_timings,
	arg_reg
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_6 = 7'd6;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_7 = 7'd7;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_8 = 7'd8;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_9 = 7'd9;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_10 = 7'd10;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_11 = 7'd11;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_12 = 7'd12;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_13 = 7'd13;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_14 = 7'd14;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_15 = 7'd15;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_16 = 7'd16;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_17 = 7'd17;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_18 = 7'd18;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_19 = 7'd19;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_20 = 7'd20;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_21 = 7'd21;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_22 = 7'd22;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_23 = 7'd23;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_24 = 7'd24;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_25 = 7'd25;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_26 = 7'd26;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_27 = 7'd27;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_28 = 7'd28;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_29 = 7'd29;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_30 = 7'd30;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_31 = 7'd31;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_32 = 7'd32;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_33 = 7'd33;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_34 = 7'd34;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_35 = 7'd35;
parameter [6:0] LEGUP_F_vgaHWInit_BB_0_36 = 7'd36;
parameter [6:0] LEGUP_F_vgaHWInit_BB_87_37 = 7'd37;
parameter [6:0] LEGUP_F_vgaHWInit_BB_87_38 = 7'd38;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_39 = 7'd39;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_40 = 7'd40;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_41 = 7'd41;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_42 = 7'd42;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_43 = 7'd43;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_44 = 7'd44;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_45 = 7'd45;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_46 = 7'd46;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_47 = 7'd47;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_48 = 7'd48;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_49 = 7'd49;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_50 = 7'd50;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_51 = 7'd51;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_52 = 7'd52;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_53 = 7'd53;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_54 = 7'd54;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_55 = 7'd55;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_56 = 7'd56;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_57 = 7'd57;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_58 = 7'd58;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_59 = 7'd59;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_60 = 7'd60;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_61 = 7'd61;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_62 = 7'd62;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_63 = 7'd63;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_64 = 7'd64;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_65 = 7'd65;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_66 = 7'd66;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_67 = 7'd67;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_68 = 7'd68;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_69 = 7'd69;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_70 = 7'd70;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_71 = 7'd71;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_72 = 7'd72;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_73 = 7'd73;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_74 = 7'd74;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_75 = 7'd75;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_76 = 7'd76;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_77 = 7'd77;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_78 = 7'd78;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_79 = 7'd79;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_80 = 7'd80;
parameter [6:0] LEGUP_F_vgaHWInit_BB_89_81 = 7'd81;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_var;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_par;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_timings;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_reg;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_8_reg;
reg [31:0] vgaHWInit_0_9;
reg [31:0] vgaHWInit_0_9_reg;
reg [31:0] vgaHWInit_0_10;
reg [31:0] vgaHWInit_0_10_reg;
reg [31:0] vgaHWInit_0_11;
reg [31:0] vgaHWInit_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_14_reg;
reg [31:0] vgaHWInit_0_15;
reg [31:0] vgaHWInit_0_15_reg;
reg [31:0] vgaHWInit_0_16;
reg [31:0] vgaHWInit_0_16_reg;
reg [31:0] vgaHWInit_0_17;
reg [31:0] vgaHWInit_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_19_reg;
reg [31:0] vgaHWInit_0_20;
reg [31:0] vgaHWInit_0_20_reg;
reg [31:0] vgaHWInit_0_21;
reg [31:0] vgaHWInit_0_21_reg;
reg [31:0] vgaHWInit_0_22;
reg [31:0] vgaHWInit_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_24_reg;
reg [31:0] vgaHWInit_0_25;
reg [31:0] vgaHWInit_0_25_reg;
reg [31:0] vgaHWInit_0_26;
reg [31:0] vgaHWInit_0_26_reg;
reg [31:0] vgaHWInit_0_27;
reg [31:0] vgaHWInit_0_27_reg;
reg [31:0] vgaHWInit_0_28;
reg [31:0] vgaHWInit_0_28_reg;
reg [31:0] vgaHWInit_0_29;
reg [31:0] vgaHWInit_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_30_reg;
reg [31:0] vgaHWInit_0_31;
reg [31:0] vgaHWInit_0_31_reg;
reg [31:0] vgaHWInit_0_32;
reg [31:0] vgaHWInit_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_33_reg;
reg [31:0] vgaHWInit_0_34;
reg [31:0] vgaHWInit_0_34_reg;
reg [31:0] vgaHWInit_0_35;
reg [31:0] vgaHWInit_0_35_reg;
reg [31:0] vgaHWInit_0_36;
reg [31:0] vgaHWInit_0_36_reg;
reg [31:0] vgaHWInit_0_37;
reg [31:0] vgaHWInit_0_37_reg;
reg [31:0] vgaHWInit_0_38;
reg [31:0] vgaHWInit_0_38_reg;
reg [31:0] vgaHWInit_0_39;
reg [31:0] vgaHWInit_0_39_reg;
reg [31:0] vgaHWInit_0_40;
reg [31:0] vgaHWInit_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_42_reg;
reg [31:0] vgaHWInit_0_43;
reg [31:0] vgaHWInit_0_43_reg;
reg [31:0] vgaHWInit_0_44;
reg [31:0] vgaHWInit_0_44_reg;
reg [31:0] vgaHWInit_0_45;
reg [31:0] vgaHWInit_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_46_reg;
reg [31:0] vgaHWInit_0_47;
reg [31:0] vgaHWInit_0_47_reg;
reg [31:0] vgaHWInit_0_48;
reg [31:0] vgaHWInit_0_48_reg;
reg [31:0] vgaHWInit_0_49;
reg [31:0] vgaHWInit_0_49_reg;
reg [31:0] vgaHWInit_0_50;
reg [31:0] vgaHWInit_0_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_51_reg;
reg [31:0] vgaHWInit_0_52;
reg [31:0] vgaHWInit_0_52_reg;
reg [31:0] vgaHWInit_0_53;
reg [31:0] vgaHWInit_0_53_reg;
reg [31:0] vgaHWInit_0_54;
reg [31:0] vgaHWInit_0_54_reg;
reg [31:0] vgaHWInit_0_55;
reg [31:0] vgaHWInit_0_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_56_reg;
reg [31:0] vgaHWInit_0_57;
reg [31:0] vgaHWInit_0_57_reg;
reg [31:0] vgaHWInit_0_58;
reg [31:0] vgaHWInit_0_58_reg;
reg [31:0] vgaHWInit_0_59;
reg [31:0] vgaHWInit_0_59_reg;
reg [31:0] vgaHWInit_0_60;
reg [31:0] vgaHWInit_0_60_reg;
reg [31:0] vgaHWInit_0_61;
reg [31:0] vgaHWInit_0_61_reg;
reg [31:0] vgaHWInit_0_62;
reg [31:0] vgaHWInit_0_62_reg;
reg [31:0] vgaHWInit_0_63;
reg [31:0] vgaHWInit_0_63_reg;
reg [31:0] vgaHWInit_0_64;
reg [31:0] vgaHWInit_0_64_reg;
reg [31:0] vgaHWInit_0_65;
reg [31:0] vgaHWInit_0_65_reg;
reg [31:0] vgaHWInit_0_66;
reg [31:0] vgaHWInit_0_66_reg;
reg [31:0] vgaHWInit_0_67;
reg [31:0] vgaHWInit_0_67_reg;
reg [31:0] vgaHWInit_0_68;
reg [31:0] vgaHWInit_0_68_reg;
reg [31:0] vgaHWInit_0_69;
reg [31:0] vgaHWInit_0_69_reg;
reg [31:0] vgaHWInit_0_70;
reg [31:0] vgaHWInit_0_70_reg;
reg [31:0] vgaHWInit_0_71;
reg [31:0] vgaHWInit_0_71_reg;
reg [31:0] vgaHWInit_0_72;
reg [31:0] vgaHWInit_0_72_reg;
reg [31:0] vgaHWInit_0_73;
reg [31:0] vgaHWInit_0_73_reg;
reg [31:0] vgaHWInit_0_74;
reg [31:0] vgaHWInit_0_74_reg;
reg [31:0] vgaHWInit_0_75;
reg [31:0] vgaHWInit_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_77_reg;
reg [31:0] vgaHWInit_0_78;
reg [31:0] vgaHWInit_0_78_reg;
reg [31:0] vgaHWInit_0_79;
reg [31:0] vgaHWInit_0_79_reg;
reg [31:0] vgaHWInit_0_80;
reg [31:0] vgaHWInit_0_80_reg;
reg [31:0] vgaHWInit_0_81;
reg [31:0] vgaHWInit_0_81_reg;
reg [31:0] vgaHWInit_0_82;
reg [31:0] vgaHWInit_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_0_84_reg;
reg [31:0] vgaHWInit_0_85;
reg [31:0] vgaHWInit_0_85_reg;
reg  vgaHWInit_0_86;
reg  vgaHWInit_0_86_reg;
reg [31:0] vgaHWInit_87_88;
reg [31:0] vgaHWInit_87_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_95_reg;
reg [31:0] vgaHWInit_89_96;
reg [31:0] vgaHWInit_89_96_reg;
reg [31:0] vgaHWInit_89_97;
reg [31:0] vgaHWInit_89_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_99_reg;
reg [31:0] vgaHWInit_89_100;
reg [31:0] vgaHWInit_89_100_reg;
reg [31:0] vgaHWInit_89_101;
reg [31:0] vgaHWInit_89_101_reg;
reg [31:0] vgaHWInit_89_102;
reg [31:0] vgaHWInit_89_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_103_reg;
reg [31:0] vgaHWInit_89_104;
reg [31:0] vgaHWInit_89_104_reg;
reg [31:0] vgaHWInit_89_105;
reg [31:0] vgaHWInit_89_105_reg;
reg [31:0] vgaHWInit_89_106;
reg [31:0] vgaHWInit_89_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_108_reg;
reg [31:0] vgaHWInit_89_109;
reg [31:0] vgaHWInit_89_109_reg;
reg [31:0] vgaHWInit_89_110;
reg [31:0] vgaHWInit_89_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_112_reg;
reg [31:0] vgaHWInit_89_113;
reg [31:0] vgaHWInit_89_113_reg;
reg [31:0] vgaHWInit_89_114;
reg [31:0] vgaHWInit_89_114_reg;
reg [31:0] vgaHWInit_89_115;
reg [31:0] vgaHWInit_89_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_116_reg;
reg [31:0] vgaHWInit_89_117;
reg [31:0] vgaHWInit_89_117_reg;
reg [31:0] vgaHWInit_89_118;
reg [31:0] vgaHWInit_89_118_reg;
reg [31:0] vgaHWInit_89_119;
reg [31:0] vgaHWInit_89_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_89_154_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vgaHWInit_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (vgaHWInit_0_86 == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_39;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vgaHWInit_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (vgaHWInit_0_86 == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_87_37;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_87_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_87_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_87_37;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_87_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_87_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_87_38;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_87_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_87_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_87_38;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_87_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_87_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_39;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_39;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_40;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_40;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_41;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_41;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_42;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_42;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_43;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_43;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_44;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_44;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_45;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_45;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_46;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_46;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_47;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_47;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_48;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_48;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_49;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_49;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_50;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_50;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_51;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_51;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_52;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_52;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_53;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_53;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_54;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_54;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_55;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_55;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_56;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_56;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_57;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_57;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_58;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_58;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_59;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_59;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_60;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_60;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_61;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_61;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_62;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_62;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_63;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_63;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_64;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_64;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_65;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_65;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_66;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_66;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_67;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_67;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_68;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_68;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_69;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_69;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_70;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_70;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_71;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_71;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_72;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_72;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_73;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_73;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_74;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_74;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_75;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_75;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_76;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_76;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_77;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_77;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_78;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_78;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_79;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_79;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_80;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_80;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_81;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vgaHWInit_BB_89_81;
if (reset == 1'b0 && ^(LEGUP_F_vgaHWInit_BB_89_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vgaHWInit_BB_89_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %1 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 0*/
begin
vgaHWInit_0_1 = arg_reg;
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %1 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_1_reg <= vgaHWInit_0_1;
if (reset == 1'b0 && ^(vgaHWInit_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_1_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %2 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 1*/
begin
vgaHWInit_0_2 = (arg_reg + 4);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %2 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_2_reg <= vgaHWInit_0_2;
if (reset == 1'b0 && ^(vgaHWInit_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_2_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
begin
vgaHWInit_0_3 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
vgaHWInit_0_3_reg <= vgaHWInit_0_3;
if (reset == 1'b0 && ^(vgaHWInit_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_3_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %4 = getelementptr inbounds i32* %3, i32 1*/
begin
vgaHWInit_0_4 = (vgaHWInit_0_3 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %4 = getelementptr inbounds i32* %3, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
vgaHWInit_0_4_reg <= vgaHWInit_0_4;
if (reset == 1'b0 && ^(vgaHWInit_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_4_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %5 = getelementptr inbounds i32* %3, i32 2*/
begin
vgaHWInit_0_5 = (vgaHWInit_0_3 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %5 = getelementptr inbounds i32* %3, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
vgaHWInit_0_5_reg <= vgaHWInit_0_5;
if (reset == 1'b0 && ^(vgaHWInit_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_5_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %6 = getelementptr inbounds i32* %3, i32 3*/
begin
vgaHWInit_0_6 = (vgaHWInit_0_3 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %6 = getelementptr inbounds i32* %3, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
vgaHWInit_0_6_reg <= vgaHWInit_0_6;
if (reset == 1'b0 && ^(vgaHWInit_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_6_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %7 = getelementptr inbounds i32* %3, i32 4*/
begin
vgaHWInit_0_7 = (vgaHWInit_0_3 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %7 = getelementptr inbounds i32* %3, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
vgaHWInit_0_7_reg <= vgaHWInit_0_7;
if (reset == 1'b0 && ^(vgaHWInit_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_7_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %8 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 1*/
begin
vgaHWInit_0_8 = (arg_timings + 4);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %8 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_8_reg <= vgaHWInit_0_8;
if (reset == 1'b0 && ^(vgaHWInit_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_8_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
begin
vgaHWInit_0_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_9_reg <= vgaHWInit_0_9;
if (reset == 1'b0 && ^(vgaHWInit_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_9_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %10 = ashr i32 %9, 3*/
begin
vgaHWInit_0_10 = ($signed(vgaHWInit_0_9) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %10 = ashr i32 %9, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_10_reg <= vgaHWInit_0_10;
if (reset == 1'b0 && ^(vgaHWInit_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_10_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %11 = add nsw i32 %10, -5*/
begin
vgaHWInit_0_11 = (vgaHWInit_0_10 + -32'd5);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %11 = add nsw i32 %10, -5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_11_reg <= vgaHWInit_0_11;
if (reset == 1'b0 && ^(vgaHWInit_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_11_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %12 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 2*/
begin
vgaHWInit_0_12 = (arg_reg + 8);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %12 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_12_reg <= vgaHWInit_0_12;
if (reset == 1'b0 && ^(vgaHWInit_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_12_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
begin
vgaHWInit_0_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_13_reg <= vgaHWInit_0_13;
if (reset == 1'b0 && ^(vgaHWInit_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_13_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %14 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 2*/
begin
vgaHWInit_0_14 = (arg_timings + 8);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %14 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_14_reg <= vgaHWInit_0_14;
if (reset == 1'b0 && ^(vgaHWInit_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_14_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
begin
vgaHWInit_0_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
vgaHWInit_0_15_reg <= vgaHWInit_0_15;
if (reset == 1'b0 && ^(vgaHWInit_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_15_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %16 = ashr i32 %15, 3*/
begin
vgaHWInit_0_16 = ($signed(vgaHWInit_0_15) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %16 = ashr i32 %15, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
vgaHWInit_0_16_reg <= vgaHWInit_0_16;
if (reset == 1'b0 && ^(vgaHWInit_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_16_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %17 = add nsw i32 %16, -1*/
begin
vgaHWInit_0_17 = (vgaHWInit_0_16 + -32'd1);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %17 = add nsw i32 %16, -1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
vgaHWInit_0_17_reg <= vgaHWInit_0_17;
if (reset == 1'b0 && ^(vgaHWInit_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_17_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %18 = getelementptr inbounds i32* %13, i32 1*/
begin
vgaHWInit_0_18 = (vgaHWInit_0_13 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %18 = getelementptr inbounds i32* %13, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_18_reg <= vgaHWInit_0_18;
if (reset == 1'b0 && ^(vgaHWInit_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_18_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %19 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 3*/
begin
vgaHWInit_0_19 = (arg_timings + 12);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %19 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_19_reg <= vgaHWInit_0_19;
if (reset == 1'b0 && ^(vgaHWInit_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_19_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
begin
vgaHWInit_0_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
vgaHWInit_0_20_reg <= vgaHWInit_0_20;
if (reset == 1'b0 && ^(vgaHWInit_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_20_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %21 = ashr i32 %20, 3*/
begin
vgaHWInit_0_21 = ($signed(vgaHWInit_0_20) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %21 = ashr i32 %20, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
vgaHWInit_0_21_reg <= vgaHWInit_0_21;
if (reset == 1'b0 && ^(vgaHWInit_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_21_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %22 = add nsw i32 %21, -1*/
begin
vgaHWInit_0_22 = (vgaHWInit_0_21 + -32'd1);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %22 = add nsw i32 %21, -1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
vgaHWInit_0_22_reg <= vgaHWInit_0_22;
if (reset == 1'b0 && ^(vgaHWInit_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_22_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %23 = getelementptr inbounds i32* %13, i32 2*/
begin
vgaHWInit_0_23 = (vgaHWInit_0_13 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %23 = getelementptr inbounds i32* %13, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_23_reg <= vgaHWInit_0_23;
if (reset == 1'b0 && ^(vgaHWInit_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_23_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %24 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 4*/
begin
vgaHWInit_0_24 = (arg_timings + 16);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %24 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_24_reg <= vgaHWInit_0_24;
if (reset == 1'b0 && ^(vgaHWInit_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_24_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
begin
vgaHWInit_0_25 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
vgaHWInit_0_25_reg <= vgaHWInit_0_25;
if (reset == 1'b0 && ^(vgaHWInit_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_25_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %26 = lshr i32 %25, 3*/
begin
vgaHWInit_0_26 = (vgaHWInit_0_25 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %26 = lshr i32 %25, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
vgaHWInit_0_26_reg <= vgaHWInit_0_26;
if (reset == 1'b0 && ^(vgaHWInit_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_26_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %27 = add nsw i32 %26, 31*/
begin
vgaHWInit_0_27 = (vgaHWInit_0_26 + 32'd31);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %27 = add nsw i32 %26, 31*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
vgaHWInit_0_27_reg <= vgaHWInit_0_27;
if (reset == 1'b0 && ^(vgaHWInit_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_27_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %28 = and i32 %27, 31*/
begin
vgaHWInit_0_28 = (vgaHWInit_0_27 & 32'd31);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %28 = and i32 %27, 31*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
vgaHWInit_0_28_reg <= vgaHWInit_0_28;
if (reset == 1'b0 && ^(vgaHWInit_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_28_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %29 = or i32 %28, 128*/
begin
vgaHWInit_0_29 = (vgaHWInit_0_28 | 32'd128);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %29 = or i32 %28, 128*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
vgaHWInit_0_29_reg <= vgaHWInit_0_29;
if (reset == 1'b0 && ^(vgaHWInit_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_29_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %30 = getelementptr inbounds i32* %13, i32 3*/
begin
vgaHWInit_0_30 = (vgaHWInit_0_13 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %30 = getelementptr inbounds i32* %13, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_30_reg <= vgaHWInit_0_30;
if (reset == 1'b0 && ^(vgaHWInit_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_30_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
begin
vgaHWInit_0_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
vgaHWInit_0_31_reg <= vgaHWInit_0_31;
if (reset == 1'b0 && ^(vgaHWInit_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_31_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %32 = ashr i32 %31, 3*/
begin
vgaHWInit_0_32 = ($signed(vgaHWInit_0_31) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %32 = ashr i32 %31, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
vgaHWInit_0_32_reg <= vgaHWInit_0_32;
if (reset == 1'b0 && ^(vgaHWInit_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_32_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %33 = getelementptr inbounds i32* %13, i32 4*/
begin
vgaHWInit_0_33 = (vgaHWInit_0_13 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %33 = getelementptr inbounds i32* %13, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_33_reg <= vgaHWInit_0_33;
if (reset == 1'b0 && ^(vgaHWInit_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_33_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
begin
vgaHWInit_0_34 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_34_reg <= vgaHWInit_0_34;
if (reset == 1'b0 && ^(vgaHWInit_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_34_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %35 = lshr i32 %34, 3*/
begin
vgaHWInit_0_35 = (vgaHWInit_0_34 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %35 = lshr i32 %34, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_35_reg <= vgaHWInit_0_35;
if (reset == 1'b0 && ^(vgaHWInit_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_35_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %36 = lshr i32 %34, 1*/
begin
vgaHWInit_0_36 = (vgaHWInit_0_34 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %36 = lshr i32 %34, 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_36_reg <= vgaHWInit_0_36;
if (reset == 1'b0 && ^(vgaHWInit_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_36_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %37 = add i32 %36, 252*/
begin
vgaHWInit_0_37 = (vgaHWInit_0_36 + 32'd252);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %37 = add i32 %36, 252*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_37_reg <= vgaHWInit_0_37;
if (reset == 1'b0 && ^(vgaHWInit_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_37_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %38 = and i32 %37, 128*/
begin
vgaHWInit_0_38 = (vgaHWInit_0_37 & 32'd128);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %38 = and i32 %37, 128*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_38_reg <= vgaHWInit_0_38;
if (reset == 1'b0 && ^(vgaHWInit_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_38_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %39 = and i32 %35, 31*/
begin
vgaHWInit_0_39 = (vgaHWInit_0_35 & 32'd31);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %39 = and i32 %35, 31*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_39_reg <= vgaHWInit_0_39;
if (reset == 1'b0 && ^(vgaHWInit_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_39_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %40 = or i32 %38, %39*/
begin
vgaHWInit_0_40 = (vgaHWInit_0_38 | vgaHWInit_0_39);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %40 = or i32 %38, %39*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
vgaHWInit_0_40_reg <= vgaHWInit_0_40;
if (reset == 1'b0 && ^(vgaHWInit_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_40_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %41 = getelementptr inbounds i32* %13, i32 5*/
begin
vgaHWInit_0_41 = (vgaHWInit_0_13 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %41 = getelementptr inbounds i32* %13, i32 5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_41_reg <= vgaHWInit_0_41;
if (reset == 1'b0 && ^(vgaHWInit_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_41_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %42 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 5*/
begin
vgaHWInit_0_42 = (arg_timings + 20);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %42 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_42_reg <= vgaHWInit_0_42;
if (reset == 1'b0 && ^(vgaHWInit_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_42_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
begin
vgaHWInit_0_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
vgaHWInit_0_43_reg <= vgaHWInit_0_43;
if (reset == 1'b0 && ^(vgaHWInit_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_43_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %44 = add nsw i32 %43, 254*/
begin
vgaHWInit_0_44 = (vgaHWInit_0_43 + 32'd254);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %44 = add nsw i32 %43, 254*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
vgaHWInit_0_44_reg <= vgaHWInit_0_44;
if (reset == 1'b0 && ^(vgaHWInit_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_44_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %45 = and i32 %44, 255*/
begin
vgaHWInit_0_45 = (vgaHWInit_0_44 & 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %45 = and i32 %44, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
vgaHWInit_0_45_reg <= vgaHWInit_0_45;
if (reset == 1'b0 && ^(vgaHWInit_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_45_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %46 = getelementptr inbounds i32* %13, i32 6*/
begin
vgaHWInit_0_46 = (vgaHWInit_0_13 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %46 = getelementptr inbounds i32* %13, i32 6*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_46_reg <= vgaHWInit_0_46;
if (reset == 1'b0 && ^(vgaHWInit_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_46_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
begin
vgaHWInit_0_47 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_47_reg <= vgaHWInit_0_47;
if (reset == 1'b0 && ^(vgaHWInit_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_47_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %48 = add nsw i32 %47, -2*/
begin
vgaHWInit_0_48 = (vgaHWInit_0_47 + -32'd2);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %48 = add nsw i32 %47, -2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_48_reg <= vgaHWInit_0_48;
if (reset == 1'b0 && ^(vgaHWInit_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_48_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %49 = lshr i32 %48, 8*/
begin
vgaHWInit_0_49 = (vgaHWInit_0_48 >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %49 = lshr i32 %48, 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_49_reg <= vgaHWInit_0_49;
if (reset == 1'b0 && ^(vgaHWInit_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_49_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %50 = and i32 %49, 1*/
begin
vgaHWInit_0_50 = (vgaHWInit_0_49 & 32'd1);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %50 = and i32 %49, 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_50_reg <= vgaHWInit_0_50;
if (reset == 1'b0 && ^(vgaHWInit_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_50_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %51 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 6*/
begin
vgaHWInit_0_51 = (arg_timings + 24);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %51 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 6*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_51_reg <= vgaHWInit_0_51;
if (reset == 1'b0 && ^(vgaHWInit_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_51_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
begin
vgaHWInit_0_52 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_52_reg <= vgaHWInit_0_52;
if (reset == 1'b0 && ^(vgaHWInit_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_52_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %53 = add nsw i32 %52, -1*/
begin
vgaHWInit_0_53 = (vgaHWInit_0_52 + -32'd1);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %53 = add nsw i32 %52, -1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_53_reg <= vgaHWInit_0_53;
if (reset == 1'b0 && ^(vgaHWInit_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_53_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %54 = lshr i32 %53, 7*/
begin
vgaHWInit_0_54 = (vgaHWInit_0_53 >>> (32'd7 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %54 = lshr i32 %53, 7*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_54_reg <= vgaHWInit_0_54;
if (reset == 1'b0 && ^(vgaHWInit_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_54_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %55 = and i32 %54, 2*/
begin
vgaHWInit_0_55 = (vgaHWInit_0_54 & 32'd2);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %55 = and i32 %54, 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_55_reg <= vgaHWInit_0_55;
if (reset == 1'b0 && ^(vgaHWInit_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_55_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %56 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 7*/
begin
vgaHWInit_0_56 = (arg_timings + 28);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %56 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 7*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_56_reg <= vgaHWInit_0_56;
if (reset == 1'b0 && ^(vgaHWInit_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_56_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
begin
vgaHWInit_0_57 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_57_reg <= vgaHWInit_0_57;
if (reset == 1'b0 && ^(vgaHWInit_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_57_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %58 = lshr i32 %57, 6*/
begin
vgaHWInit_0_58 = (vgaHWInit_0_57 >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %58 = lshr i32 %57, 6*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_58_reg <= vgaHWInit_0_58;
if (reset == 1'b0 && ^(vgaHWInit_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_58_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %59 = and i32 %58, 4*/
begin
vgaHWInit_0_59 = (vgaHWInit_0_58 & 32'd4);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %59 = and i32 %58, 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_59_reg <= vgaHWInit_0_59;
if (reset == 1'b0 && ^(vgaHWInit_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_59_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %60 = add nsw i32 %57, 511*/
begin
vgaHWInit_0_60 = (vgaHWInit_0_57 + 32'd511);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %60 = add nsw i32 %57, 511*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_60_reg <= vgaHWInit_0_60;
if (reset == 1'b0 && ^(vgaHWInit_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_60_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %61 = lshr i32 %60, 5*/
begin
vgaHWInit_0_61 = (vgaHWInit_0_60 >>> (32'd5 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %61 = lshr i32 %60, 5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_61_reg <= vgaHWInit_0_61;
if (reset == 1'b0 && ^(vgaHWInit_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_61_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %62 = and i32 %61, 8*/
begin
vgaHWInit_0_62 = (vgaHWInit_0_61 & 32'd8);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %62 = and i32 %61, 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_62_reg <= vgaHWInit_0_62;
if (reset == 1'b0 && ^(vgaHWInit_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_62_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %63 = lshr i32 %48, 4*/
begin
vgaHWInit_0_63 = (vgaHWInit_0_48 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %63 = lshr i32 %48, 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_63_reg <= vgaHWInit_0_63;
if (reset == 1'b0 && ^(vgaHWInit_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_63_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %64 = and i32 %63, 32*/
begin
vgaHWInit_0_64 = (vgaHWInit_0_63 & 32'd32);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %64 = and i32 %63, 32*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_64_reg <= vgaHWInit_0_64;
if (reset == 1'b0 && ^(vgaHWInit_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_64_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %65 = lshr i32 %53, 3*/
begin
vgaHWInit_0_65 = (vgaHWInit_0_53 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %65 = lshr i32 %53, 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_65_reg <= vgaHWInit_0_65;
if (reset == 1'b0 && ^(vgaHWInit_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_65_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %66 = and i32 %65, 64*/
begin
vgaHWInit_0_66 = (vgaHWInit_0_65 & 32'd64);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %66 = and i32 %65, 64*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_66_reg <= vgaHWInit_0_66;
if (reset == 1'b0 && ^(vgaHWInit_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_66_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %67 = lshr i32 %57, 2*/
begin
vgaHWInit_0_67 = (vgaHWInit_0_57 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %67 = lshr i32 %57, 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_67_reg <= vgaHWInit_0_67;
if (reset == 1'b0 && ^(vgaHWInit_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_67_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %68 = and i32 %67, 128*/
begin
vgaHWInit_0_68 = (vgaHWInit_0_67 & 32'd128);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %68 = and i32 %67, 128*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_68_reg <= vgaHWInit_0_68;
if (reset == 1'b0 && ^(vgaHWInit_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_68_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %69 = or i32 %64, %50*/
begin
vgaHWInit_0_69 = (vgaHWInit_0_64 | vgaHWInit_0_50);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %69 = or i32 %64, %50*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_29))
begin
vgaHWInit_0_69_reg <= vgaHWInit_0_69;
if (reset == 1'b0 && ^(vgaHWInit_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_69_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %70 = or i32 %69, %68*/
begin
vgaHWInit_0_70 = (vgaHWInit_0_69_reg | vgaHWInit_0_68);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %70 = or i32 %69, %68*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_70_reg <= vgaHWInit_0_70;
if (reset == 1'b0 && ^(vgaHWInit_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_70_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %71 = or i32 %70, %66*/
begin
vgaHWInit_0_71 = (vgaHWInit_0_70 | vgaHWInit_0_66_reg);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %71 = or i32 %70, %66*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_71_reg <= vgaHWInit_0_71;
if (reset == 1'b0 && ^(vgaHWInit_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_71_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %72 = or i32 %71, %59*/
begin
vgaHWInit_0_72 = (vgaHWInit_0_71 | vgaHWInit_0_59);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %72 = or i32 %71, %59*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_72_reg <= vgaHWInit_0_72;
if (reset == 1'b0 && ^(vgaHWInit_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_72_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %73 = or i32 %72, %55*/
begin
vgaHWInit_0_73 = (vgaHWInit_0_72 | vgaHWInit_0_55_reg);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %73 = or i32 %72, %55*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_73_reg <= vgaHWInit_0_73;
if (reset == 1'b0 && ^(vgaHWInit_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_73_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %74 = or i32 %73, %62*/
begin
vgaHWInit_0_74 = (vgaHWInit_0_73 | vgaHWInit_0_62);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %74 = or i32 %73, %62*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_74_reg <= vgaHWInit_0_74;
if (reset == 1'b0 && ^(vgaHWInit_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_74_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %75 = or i32 %74, 16*/
begin
vgaHWInit_0_75 = (vgaHWInit_0_74 | 32'd16);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %75 = or i32 %74, 16*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
vgaHWInit_0_75_reg <= vgaHWInit_0_75;
if (reset == 1'b0 && ^(vgaHWInit_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_75_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %76 = getelementptr inbounds i32* %13, i32 7*/
begin
vgaHWInit_0_76 = (vgaHWInit_0_13 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %76 = getelementptr inbounds i32* %13, i32 7*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_76_reg <= vgaHWInit_0_76;
if (reset == 1'b0 && ^(vgaHWInit_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_76_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %77 = getelementptr inbounds i32* %13, i32 8*/
begin
vgaHWInit_0_77 = (vgaHWInit_0_13 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %77 = getelementptr inbounds i32* %13, i32 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_77_reg <= vgaHWInit_0_77;
if (reset == 1'b0 && ^(vgaHWInit_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_77_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
begin
vgaHWInit_0_78 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
vgaHWInit_0_78_reg <= vgaHWInit_0_78;
if (reset == 1'b0 && ^(vgaHWInit_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_78_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %79 = add nsw i32 %78, 1023*/
begin
vgaHWInit_0_79 = (vgaHWInit_0_78 + 32'd1023);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %79 = add nsw i32 %78, 1023*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
vgaHWInit_0_79_reg <= vgaHWInit_0_79;
if (reset == 1'b0 && ^(vgaHWInit_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_79_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %80 = lshr i32 %79, 4*/
begin
vgaHWInit_0_80 = (vgaHWInit_0_79 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %80 = lshr i32 %79, 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
vgaHWInit_0_80_reg <= vgaHWInit_0_80;
if (reset == 1'b0 && ^(vgaHWInit_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_80_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %81 = and i32 %80, 32*/
begin
vgaHWInit_0_81 = (vgaHWInit_0_80 & 32'd32);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %81 = and i32 %80, 32*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
vgaHWInit_0_81_reg <= vgaHWInit_0_81;
if (reset == 1'b0 && ^(vgaHWInit_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_81_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %82 = or i32 %81, 64*/
begin
vgaHWInit_0_82 = (vgaHWInit_0_81 | 32'd64);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %82 = or i32 %81, 64*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
vgaHWInit_0_82_reg <= vgaHWInit_0_82;
if (reset == 1'b0 && ^(vgaHWInit_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_82_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %83 = getelementptr inbounds i32* %13, i32 9*/
begin
vgaHWInit_0_83 = (vgaHWInit_0_13 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %83 = getelementptr inbounds i32* %13, i32 9*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
vgaHWInit_0_83_reg <= vgaHWInit_0_83;
if (reset == 1'b0 && ^(vgaHWInit_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_83_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %84 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 9*/
begin
vgaHWInit_0_84 = (arg_timings + 36);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %84 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 9*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
vgaHWInit_0_84_reg <= vgaHWInit_0_84;
if (reset == 1'b0 && ^(vgaHWInit_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_84_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
begin
vgaHWInit_0_85 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_36))
begin
vgaHWInit_0_85_reg <= vgaHWInit_0_85;
if (reset == 1'b0 && ^(vgaHWInit_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_85_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %0*/
/*   %86 = icmp eq i32 %85, 0*/
begin
vgaHWInit_0_86 = (vgaHWInit_0_85 == 32'd0);
end
end
always @(posedge clk) begin
/* vgaHWInit: %0*/
/*   %86 = icmp eq i32 %85, 0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_36))
begin
vgaHWInit_0_86_reg <= vgaHWInit_0_86;
if (reset == 1'b0 && ^(vgaHWInit_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_0_86_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %87*/
/*   %88 = or i32 %81, 192*/
begin
vgaHWInit_87_88 = (vgaHWInit_0_81_reg | 32'd192);
end
end
always @(posedge clk) begin
/* vgaHWInit: %87*/
/*   %88 = or i32 %81, 192*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
vgaHWInit_87_88_reg <= vgaHWInit_87_88;
if (reset == 1'b0 && ^(vgaHWInit_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_87_88_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %90 = getelementptr inbounds i32* %13, i32 10*/
begin
vgaHWInit_89_90 = (vgaHWInit_0_13_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %90 = getelementptr inbounds i32* %13, i32 10*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_90_reg <= vgaHWInit_89_90;
if (reset == 1'b0 && ^(vgaHWInit_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_90_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %91 = getelementptr inbounds i32* %13, i32 11*/
begin
vgaHWInit_89_91 = (vgaHWInit_0_13_reg + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %91 = getelementptr inbounds i32* %13, i32 11*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_91_reg <= vgaHWInit_89_91;
if (reset == 1'b0 && ^(vgaHWInit_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_91_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %92 = getelementptr inbounds i32* %13, i32 12*/
begin
vgaHWInit_89_92 = (vgaHWInit_0_13_reg + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %92 = getelementptr inbounds i32* %13, i32 12*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_92_reg <= vgaHWInit_89_92;
if (reset == 1'b0 && ^(vgaHWInit_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_92_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %93 = getelementptr inbounds i32* %13, i32 13*/
begin
vgaHWInit_89_93 = (vgaHWInit_0_13_reg + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %93 = getelementptr inbounds i32* %13, i32 13*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_93_reg <= vgaHWInit_89_93;
if (reset == 1'b0 && ^(vgaHWInit_89_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_93_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %94 = getelementptr inbounds i32* %13, i32 14*/
begin
vgaHWInit_89_94 = (vgaHWInit_0_13_reg + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %94 = getelementptr inbounds i32* %13, i32 14*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_94_reg <= vgaHWInit_89_94;
if (reset == 1'b0 && ^(vgaHWInit_89_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_94_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %95 = getelementptr inbounds i32* %13, i32 15*/
begin
vgaHWInit_89_95 = (vgaHWInit_0_13_reg + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %95 = getelementptr inbounds i32* %13, i32 15*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_95_reg <= vgaHWInit_89_95;
if (reset == 1'b0 && ^(vgaHWInit_89_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_95_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
begin
vgaHWInit_89_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
vgaHWInit_89_96_reg <= vgaHWInit_89_96;
if (reset == 1'b0 && ^(vgaHWInit_89_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_96_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %97 = and i32 %96, 255*/
begin
vgaHWInit_89_97 = (vgaHWInit_89_96 & 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %97 = and i32 %96, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
vgaHWInit_89_97_reg <= vgaHWInit_89_97;
if (reset == 1'b0 && ^(vgaHWInit_89_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_97_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %98 = getelementptr inbounds i32* %13, i32 16*/
begin
vgaHWInit_89_98 = (vgaHWInit_0_13_reg + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %98 = getelementptr inbounds i32* %13, i32 16*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_98_reg <= vgaHWInit_89_98;
if (reset == 1'b0 && ^(vgaHWInit_89_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_98_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %99 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 8*/
begin
vgaHWInit_89_99 = (arg_timings + 32);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %99 = getelementptr inbounds %struct.xtimings* %timings, i32 0, i32 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_99_reg <= vgaHWInit_89_99;
if (reset == 1'b0 && ^(vgaHWInit_89_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_99_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
begin
vgaHWInit_89_100 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
vgaHWInit_89_100_reg <= vgaHWInit_89_100;
if (reset == 1'b0 && ^(vgaHWInit_89_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_100_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %101 = and i32 %100, 15*/
begin
vgaHWInit_89_101 = (vgaHWInit_89_100 & 32'd15);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %101 = and i32 %100, 15*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
vgaHWInit_89_101_reg <= vgaHWInit_89_101;
if (reset == 1'b0 && ^(vgaHWInit_89_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_101_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %102 = or i32 %101, 32*/
begin
vgaHWInit_89_102 = (vgaHWInit_89_101 | 32'd32);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %102 = or i32 %101, 32*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
vgaHWInit_89_102_reg <= vgaHWInit_89_102;
if (reset == 1'b0 && ^(vgaHWInit_89_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_102_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %103 = getelementptr inbounds i32* %13, i32 17*/
begin
vgaHWInit_89_103 = (vgaHWInit_0_13_reg + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %103 = getelementptr inbounds i32* %13, i32 17*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_103_reg <= vgaHWInit_89_103;
if (reset == 1'b0 && ^(vgaHWInit_89_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_103_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
begin
vgaHWInit_89_104 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
vgaHWInit_89_104_reg <= vgaHWInit_89_104;
if (reset == 1'b0 && ^(vgaHWInit_89_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_104_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %105 = add nsw i32 %104, 255*/
begin
vgaHWInit_89_105 = (vgaHWInit_89_104 + 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %105 = add nsw i32 %104, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
vgaHWInit_89_105_reg <= vgaHWInit_89_105;
if (reset == 1'b0 && ^(vgaHWInit_89_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_105_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %106 = and i32 %105, 255*/
begin
vgaHWInit_89_106 = (vgaHWInit_89_105 & 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %106 = and i32 %105, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
vgaHWInit_89_106_reg <= vgaHWInit_89_106;
if (reset == 1'b0 && ^(vgaHWInit_89_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_106_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %107 = getelementptr inbounds i32* %13, i32 18*/
begin
vgaHWInit_89_107 = (vgaHWInit_0_13_reg + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %107 = getelementptr inbounds i32* %13, i32 18*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_107_reg <= vgaHWInit_89_107;
if (reset == 1'b0 && ^(vgaHWInit_89_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_107_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %108 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
begin
vgaHWInit_89_108 = arg_var;
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %108 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_108_reg <= vgaHWInit_89_108;
if (reset == 1'b0 && ^(vgaHWInit_89_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_108_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
begin
vgaHWInit_89_109 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
vgaHWInit_89_109_reg <= vgaHWInit_89_109;
if (reset == 1'b0 && ^(vgaHWInit_89_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_109_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %110 = ashr i32 %109, 4*/
begin
vgaHWInit_89_110 = ($signed(vgaHWInit_89_109) >>> 32'd4);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %110 = ashr i32 %109, 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
vgaHWInit_89_110_reg <= vgaHWInit_89_110;
if (reset == 1'b0 && ^(vgaHWInit_89_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_110_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %111 = getelementptr inbounds i32* %13, i32 19*/
begin
vgaHWInit_89_111 = (vgaHWInit_0_13_reg + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %111 = getelementptr inbounds i32* %13, i32 19*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_111_reg <= vgaHWInit_89_111;
if (reset == 1'b0 && ^(vgaHWInit_89_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_111_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %112 = getelementptr inbounds i32* %13, i32 20*/
begin
vgaHWInit_89_112 = (vgaHWInit_0_13_reg + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %112 = getelementptr inbounds i32* %13, i32 20*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_112_reg <= vgaHWInit_89_112;
if (reset == 1'b0 && ^(vgaHWInit_89_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_112_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
begin
vgaHWInit_89_113 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
vgaHWInit_89_113_reg <= vgaHWInit_89_113;
if (reset == 1'b0 && ^(vgaHWInit_89_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_113_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %114 = add nsw i32 %113, 255*/
begin
vgaHWInit_89_114 = (vgaHWInit_89_113 + 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %114 = add nsw i32 %113, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
vgaHWInit_89_114_reg <= vgaHWInit_89_114;
if (reset == 1'b0 && ^(vgaHWInit_89_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_114_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %115 = and i32 %114, 255*/
begin
vgaHWInit_89_115 = (vgaHWInit_89_114 & 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %115 = and i32 %114, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
vgaHWInit_89_115_reg <= vgaHWInit_89_115;
if (reset == 1'b0 && ^(vgaHWInit_89_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_115_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %116 = getelementptr inbounds i32* %13, i32 21*/
begin
vgaHWInit_89_116 = (vgaHWInit_0_13_reg + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %116 = getelementptr inbounds i32* %13, i32 21*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_116_reg <= vgaHWInit_89_116;
if (reset == 1'b0 && ^(vgaHWInit_89_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_116_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
begin
vgaHWInit_89_117 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
vgaHWInit_89_117_reg <= vgaHWInit_89_117;
if (reset == 1'b0 && ^(vgaHWInit_89_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_117_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %118 = add nsw i32 %117, 255*/
begin
vgaHWInit_89_118 = (vgaHWInit_89_117 + 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %118 = add nsw i32 %117, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
vgaHWInit_89_118_reg <= vgaHWInit_89_118;
if (reset == 1'b0 && ^(vgaHWInit_89_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_118_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %119 = and i32 %118, 255*/
begin
vgaHWInit_89_119 = (vgaHWInit_89_118 & 32'd255);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %119 = and i32 %118, 255*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
vgaHWInit_89_119_reg <= vgaHWInit_89_119;
if (reset == 1'b0 && ^(vgaHWInit_89_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_119_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %120 = getelementptr inbounds i32* %13, i32 22*/
begin
vgaHWInit_89_120 = (vgaHWInit_0_13_reg + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %120 = getelementptr inbounds i32* %13, i32 22*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_120_reg <= vgaHWInit_89_120;
if (reset == 1'b0 && ^(vgaHWInit_89_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_120_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %121 = getelementptr inbounds i32* %13, i32 23*/
begin
vgaHWInit_89_121 = (vgaHWInit_0_13_reg + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %121 = getelementptr inbounds i32* %13, i32 23*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_121_reg <= vgaHWInit_89_121;
if (reset == 1'b0 && ^(vgaHWInit_89_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_121_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %122 = getelementptr inbounds i32* %13, i32 24*/
begin
vgaHWInit_89_122 = (vgaHWInit_0_13_reg + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %122 = getelementptr inbounds i32* %13, i32 24*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_122_reg <= vgaHWInit_89_122;
if (reset == 1'b0 && ^(vgaHWInit_89_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_122_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %123 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 3*/
begin
vgaHWInit_89_123 = (arg_reg + 12);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %123 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_123_reg <= vgaHWInit_89_123;
if (reset == 1'b0 && ^(vgaHWInit_89_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_123_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
begin
vgaHWInit_89_124 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_124_reg <= vgaHWInit_89_124;
if (reset == 1'b0 && ^(vgaHWInit_89_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_124_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %125 = getelementptr inbounds i32* %124, i32 1*/
begin
vgaHWInit_89_125 = (vgaHWInit_89_124 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %125 = getelementptr inbounds i32* %124, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_125_reg <= vgaHWInit_89_125;
if (reset == 1'b0 && ^(vgaHWInit_89_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_125_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %126 = getelementptr inbounds i32* %124, i32 2*/
begin
vgaHWInit_89_126 = (vgaHWInit_89_124 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %126 = getelementptr inbounds i32* %124, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_126_reg <= vgaHWInit_89_126;
if (reset == 1'b0 && ^(vgaHWInit_89_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_126_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %127 = getelementptr inbounds i32* %124, i32 3*/
begin
vgaHWInit_89_127 = (vgaHWInit_89_124 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %127 = getelementptr inbounds i32* %124, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_127_reg <= vgaHWInit_89_127;
if (reset == 1'b0 && ^(vgaHWInit_89_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_127_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %128 = getelementptr inbounds i32* %124, i32 4*/
begin
vgaHWInit_89_128 = (vgaHWInit_89_124 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %128 = getelementptr inbounds i32* %124, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_128_reg <= vgaHWInit_89_128;
if (reset == 1'b0 && ^(vgaHWInit_89_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_128_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %129 = getelementptr inbounds i32* %124, i32 5*/
begin
vgaHWInit_89_129 = (vgaHWInit_89_124 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %129 = getelementptr inbounds i32* %124, i32 5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_129_reg <= vgaHWInit_89_129;
if (reset == 1'b0 && ^(vgaHWInit_89_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_129_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %130 = getelementptr inbounds i32* %124, i32 6*/
begin
vgaHWInit_89_130 = (vgaHWInit_89_124 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %130 = getelementptr inbounds i32* %124, i32 6*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_130_reg <= vgaHWInit_89_130;
if (reset == 1'b0 && ^(vgaHWInit_89_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_130_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %131 = getelementptr inbounds i32* %124, i32 7*/
begin
vgaHWInit_89_131 = (vgaHWInit_89_124 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %131 = getelementptr inbounds i32* %124, i32 7*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_131_reg <= vgaHWInit_89_131;
if (reset == 1'b0 && ^(vgaHWInit_89_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_131_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %132 = getelementptr inbounds i32* %124, i32 8*/
begin
vgaHWInit_89_132 = (vgaHWInit_89_124 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %132 = getelementptr inbounds i32* %124, i32 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
vgaHWInit_89_132_reg <= vgaHWInit_89_132;
if (reset == 1'b0 && ^(vgaHWInit_89_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_132_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %133 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 4*/
begin
vgaHWInit_89_133 = (arg_reg + 16);
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %133 = getelementptr inbounds %struct.savage_reg* %reg, i32 0, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
vgaHWInit_89_133_reg <= vgaHWInit_89_133;
if (reset == 1'b0 && ^(vgaHWInit_89_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_133_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
begin
vgaHWInit_89_134 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_134_reg <= vgaHWInit_89_134;
if (reset == 1'b0 && ^(vgaHWInit_89_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_134_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %135 = getelementptr inbounds i32* %134, i32 1*/
begin
vgaHWInit_89_135 = (vgaHWInit_89_134 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %135 = getelementptr inbounds i32* %134, i32 1*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_135_reg <= vgaHWInit_89_135;
if (reset == 1'b0 && ^(vgaHWInit_89_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_135_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %136 = getelementptr inbounds i32* %134, i32 2*/
begin
vgaHWInit_89_136 = (vgaHWInit_89_134 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %136 = getelementptr inbounds i32* %134, i32 2*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_136_reg <= vgaHWInit_89_136;
if (reset == 1'b0 && ^(vgaHWInit_89_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_136_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %137 = getelementptr inbounds i32* %134, i32 3*/
begin
vgaHWInit_89_137 = (vgaHWInit_89_134 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %137 = getelementptr inbounds i32* %134, i32 3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_137_reg <= vgaHWInit_89_137;
if (reset == 1'b0 && ^(vgaHWInit_89_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_137_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %138 = getelementptr inbounds i32* %134, i32 4*/
begin
vgaHWInit_89_138 = (vgaHWInit_89_134 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %138 = getelementptr inbounds i32* %134, i32 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_138_reg <= vgaHWInit_89_138;
if (reset == 1'b0 && ^(vgaHWInit_89_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_138_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %139 = getelementptr inbounds i32* %134, i32 5*/
begin
vgaHWInit_89_139 = (vgaHWInit_89_134 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %139 = getelementptr inbounds i32* %134, i32 5*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_139_reg <= vgaHWInit_89_139;
if (reset == 1'b0 && ^(vgaHWInit_89_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_139_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %140 = getelementptr inbounds i32* %134, i32 6*/
begin
vgaHWInit_89_140 = (vgaHWInit_89_134 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %140 = getelementptr inbounds i32* %134, i32 6*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_140_reg <= vgaHWInit_89_140;
if (reset == 1'b0 && ^(vgaHWInit_89_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_140_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %141 = getelementptr inbounds i32* %134, i32 7*/
begin
vgaHWInit_89_141 = (vgaHWInit_89_134 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %141 = getelementptr inbounds i32* %134, i32 7*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_141_reg <= vgaHWInit_89_141;
if (reset == 1'b0 && ^(vgaHWInit_89_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_141_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %142 = getelementptr inbounds i32* %134, i32 8*/
begin
vgaHWInit_89_142 = (vgaHWInit_89_134 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %142 = getelementptr inbounds i32* %134, i32 8*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_142_reg <= vgaHWInit_89_142;
if (reset == 1'b0 && ^(vgaHWInit_89_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_142_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %143 = getelementptr inbounds i32* %134, i32 9*/
begin
vgaHWInit_89_143 = (vgaHWInit_89_134 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %143 = getelementptr inbounds i32* %134, i32 9*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_143_reg <= vgaHWInit_89_143;
if (reset == 1'b0 && ^(vgaHWInit_89_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_143_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %144 = getelementptr inbounds i32* %134, i32 10*/
begin
vgaHWInit_89_144 = (vgaHWInit_89_134 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %144 = getelementptr inbounds i32* %134, i32 10*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_144_reg <= vgaHWInit_89_144;
if (reset == 1'b0 && ^(vgaHWInit_89_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_144_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %145 = getelementptr inbounds i32* %134, i32 11*/
begin
vgaHWInit_89_145 = (vgaHWInit_89_134 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %145 = getelementptr inbounds i32* %134, i32 11*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_145_reg <= vgaHWInit_89_145;
if (reset == 1'b0 && ^(vgaHWInit_89_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_145_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %146 = getelementptr inbounds i32* %134, i32 12*/
begin
vgaHWInit_89_146 = (vgaHWInit_89_134 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %146 = getelementptr inbounds i32* %134, i32 12*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_146_reg <= vgaHWInit_89_146;
if (reset == 1'b0 && ^(vgaHWInit_89_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_146_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %147 = getelementptr inbounds i32* %134, i32 13*/
begin
vgaHWInit_89_147 = (vgaHWInit_89_134 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %147 = getelementptr inbounds i32* %134, i32 13*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_147_reg <= vgaHWInit_89_147;
if (reset == 1'b0 && ^(vgaHWInit_89_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_147_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %148 = getelementptr inbounds i32* %134, i32 14*/
begin
vgaHWInit_89_148 = (vgaHWInit_89_134 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %148 = getelementptr inbounds i32* %134, i32 14*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_148_reg <= vgaHWInit_89_148;
if (reset == 1'b0 && ^(vgaHWInit_89_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_148_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %149 = getelementptr inbounds i32* %134, i32 15*/
begin
vgaHWInit_89_149 = (vgaHWInit_89_134 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %149 = getelementptr inbounds i32* %134, i32 15*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_149_reg <= vgaHWInit_89_149;
if (reset == 1'b0 && ^(vgaHWInit_89_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_149_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %150 = getelementptr inbounds i32* %134, i32 16*/
begin
vgaHWInit_89_150 = (vgaHWInit_89_134 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %150 = getelementptr inbounds i32* %134, i32 16*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_150_reg <= vgaHWInit_89_150;
if (reset == 1'b0 && ^(vgaHWInit_89_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_150_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %151 = getelementptr inbounds i32* %134, i32 17*/
begin
vgaHWInit_89_151 = (vgaHWInit_89_134 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %151 = getelementptr inbounds i32* %134, i32 17*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_151_reg <= vgaHWInit_89_151;
if (reset == 1'b0 && ^(vgaHWInit_89_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_151_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %152 = getelementptr inbounds i32* %134, i32 18*/
begin
vgaHWInit_89_152 = (vgaHWInit_89_134 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %152 = getelementptr inbounds i32* %134, i32 18*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_152_reg <= vgaHWInit_89_152;
if (reset == 1'b0 && ^(vgaHWInit_89_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_152_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %153 = getelementptr inbounds i32* %134, i32 19*/
begin
vgaHWInit_89_153 = (vgaHWInit_89_134 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %153 = getelementptr inbounds i32* %134, i32 19*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_153_reg <= vgaHWInit_89_153;
if (reset == 1'b0 && ^(vgaHWInit_89_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_153_reg"); $finish; end
end
end
always @(*) begin
/* vgaHWInit: %89*/
/*   %154 = getelementptr inbounds i32* %134, i32 20*/
begin
vgaHWInit_89_154 = (vgaHWInit_89_134 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* vgaHWInit: %89*/
/*   %154 = getelementptr inbounds i32* %134, i32 20*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
vgaHWInit_89_154_reg <= vgaHWInit_89_154;
if (reset == 1'b0 && ^(vgaHWInit_89_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_89_154_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* vgaHWInit: %89*/
/*   ret void*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_81))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 227, i32* %1, align 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 15, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 14, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_9))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %17, i32* %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_21))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_28))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %75, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_31))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_34))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_42))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %97, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_48))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %106, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %110, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_54))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %119, i32* %120, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_60))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %124, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %130, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_67))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %134, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 2, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 4, i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 6, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 8, i32* %142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 10, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 12, i32* %146, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 14, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 65, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %152, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_80))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 227, i32* %1, align 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_address_a = vgaHWInit_0_1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_address_a = vgaHWInit_0_3;
end
/* vgaHWInit: %0*/
/*   store i32 15, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_address_a = vgaHWInit_0_5_reg;
end
/* vgaHWInit: %0*/
/*   store i32 14, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_5))
begin
memory_controller_address_a = vgaHWInit_0_7_reg;
end
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_address_a = vgaHWInit_0_8_reg;
end
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_9))
begin
memory_controller_address_a = vgaHWInit_0_14_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %17, i32* %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
memory_controller_address_a = vgaHWInit_0_18_reg;
end
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_15))
begin
memory_controller_address_a = vgaHWInit_0_24_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
memory_controller_address_a = vgaHWInit_0_30_reg;
end
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_21))
begin
memory_controller_address_a = vgaHWInit_0_24_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
memory_controller_address_a = vgaHWInit_0_41_reg;
end
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_address_a = vgaHWInit_0_51_reg;
end
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_28))
begin
memory_controller_address_a = vgaHWInit_0_56_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %75, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_address_a = vgaHWInit_0_76_reg;
end
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_31))
begin
memory_controller_address_a = vgaHWInit_0_56_reg;
end
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_34))
begin
memory_controller_address_a = vgaHWInit_0_84_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_address_a = vgaHWInit_89_90;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_address_a = vgaHWInit_89_92_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_address_a = vgaHWInit_89_94_reg;
end
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_42))
begin
memory_controller_address_a = vgaHWInit_0_56_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %97, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
memory_controller_address_a = vgaHWInit_89_98_reg;
end
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_48))
begin
memory_controller_address_a = vgaHWInit_0_51_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %106, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
memory_controller_address_a = vgaHWInit_89_107_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %110, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_address_a = vgaHWInit_89_111_reg;
end
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_54))
begin
memory_controller_address_a = vgaHWInit_0_56_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %119, i32* %120, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_address_a = vgaHWInit_89_120_reg;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_60))
begin
memory_controller_address_a = vgaHWInit_89_122_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %124, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_address_a = vgaHWInit_89_124;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_address_a = vgaHWInit_89_126_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_address_a = vgaHWInit_89_128_reg;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %130, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_address_a = vgaHWInit_89_130_reg;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_67))
begin
memory_controller_address_a = vgaHWInit_89_132_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %134, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_address_a = vgaHWInit_89_134;
end
/* vgaHWInit: %89*/
/*   store i32 2, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_address_a = vgaHWInit_89_136_reg;
end
/* vgaHWInit: %89*/
/*   store i32 4, i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_address_a = vgaHWInit_89_138_reg;
end
/* vgaHWInit: %89*/
/*   store i32 6, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_address_a = vgaHWInit_89_140_reg;
end
/* vgaHWInit: %89*/
/*   store i32 8, i32* %142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_address_a = vgaHWInit_89_142_reg;
end
/* vgaHWInit: %89*/
/*   store i32 10, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_address_a = vgaHWInit_89_144_reg;
end
/* vgaHWInit: %89*/
/*   store i32 12, i32* %146, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_address_a = vgaHWInit_89_146_reg;
end
/* vgaHWInit: %89*/
/*   store i32 14, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_address_a = vgaHWInit_89_148_reg;
end
/* vgaHWInit: %89*/
/*   store i32 65, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_address_a = vgaHWInit_89_150_reg;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %152, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_address_a = vgaHWInit_89_152_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_80))
begin
memory_controller_address_a = vgaHWInit_89_154_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 227, i32* %1, align 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 15, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 14, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_5))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %17, i32* %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %75, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_34))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %97, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %106, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %110, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %119, i32* %120, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_60))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %124, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %130, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_67))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %134, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 2, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 4, i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 6, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 8, i32* %142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 10, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 12, i32* %146, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 14, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 65, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %152, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_80))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 227, i32* %1, align 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_in_a = 32'd227;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %0*/
/*   store i32 15, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_in_a = 32'd15;
end
/* vgaHWInit: %0*/
/*   store i32 14, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_5))
begin
memory_controller_in_a = 32'd14;
end
/* vgaHWInit: %0*/
/*   store i32 %17, i32* %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
memory_controller_in_a = vgaHWInit_0_17;
end
/* vgaHWInit: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
memory_controller_in_a = vgaHWInit_0_29;
end
/* vgaHWInit: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
memory_controller_in_a = vgaHWInit_0_40;
end
/* vgaHWInit: %0*/
/*   store i32 %75, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_in_a = vgaHWInit_0_75;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %97, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
memory_controller_in_a = vgaHWInit_89_97;
end
/* vgaHWInit: %89*/
/*   store i32 %106, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
memory_controller_in_a = vgaHWInit_89_106;
end
/* vgaHWInit: %89*/
/*   store i32 %110, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_in_a = vgaHWInit_89_110;
end
/* vgaHWInit: %89*/
/*   store i32 %119, i32* %120, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_in_a = vgaHWInit_89_119;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_60))
begin
memory_controller_in_a = 32'd255;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %124, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %130, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_in_a = 32'd5;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_67))
begin
memory_controller_in_a = 32'd255;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %134, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_in_a = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 2, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_in_a = 32'd2;
end
/* vgaHWInit: %89*/
/*   store i32 4, i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_in_a = 32'd4;
end
/* vgaHWInit: %89*/
/*   store i32 6, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_in_a = 32'd6;
end
/* vgaHWInit: %89*/
/*   store i32 8, i32* %142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_in_a = 32'd8;
end
/* vgaHWInit: %89*/
/*   store i32 10, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_in_a = 32'd10;
end
/* vgaHWInit: %89*/
/*   store i32 12, i32* %146, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_in_a = 32'd12;
end
/* vgaHWInit: %89*/
/*   store i32 14, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_in_a = 32'd14;
end
/* vgaHWInit: %89*/
/*   store i32 65, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_in_a = 32'd65;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %152, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_in_a = 32'd15;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_80))
begin
memory_controller_in_a = 32'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 227, i32* %1, align 4*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 15, i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 14, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_9))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %17, i32* %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_11))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %25 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %29, i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_17))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %34 = load i32* %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_21))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_23))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %52 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_28))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %75, i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %78 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_31))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_34))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %92, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %94, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   %96 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_42))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %97, i32* %98, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_44))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   %104 = load i32* %51, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_48))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %106, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_50))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %110, i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   %113 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_54))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %119, i32* %120, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_60))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %124, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %126, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %130, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_67))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %134, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 2, i32* %136, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 4, i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 6, i32* %140, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 8, i32* %142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 10, i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 12, i32* %146, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 14, i32* %148, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 65, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %152, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_size_a = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %154, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_80))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 1, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %11, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_12))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %22, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %32, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_24))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %87*/
/*   store i32 %88, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_45))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %102, i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_51))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %115, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_57))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 195, i32* %121, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_61))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 64, i32* %129, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_68))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 1, i32* %135, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 3, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %139, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 7, i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 9, i32* %143, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 11, i32* %145, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 13, i32* %147, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %149, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_address_b = vgaHWInit_0_2;
end
/* vgaHWInit: %0*/
/*   store i32 1, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_address_b = vgaHWInit_0_4;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_address_b = vgaHWInit_0_6_reg;
end
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_address_b = vgaHWInit_0_12_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %11, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
memory_controller_address_b = vgaHWInit_0_13;
end
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_12))
begin
memory_controller_address_b = vgaHWInit_0_19_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %22, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
memory_controller_address_b = vgaHWInit_0_23_reg;
end
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_18))
begin
memory_controller_address_b = vgaHWInit_0_19_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %32, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
memory_controller_address_b = vgaHWInit_0_33_reg;
end
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_24))
begin
memory_controller_address_b = vgaHWInit_0_42_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
memory_controller_address_b = vgaHWInit_0_46_reg;
end
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_address_b = vgaHWInit_0_42_reg;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_address_b = vgaHWInit_0_77_reg;
end
/* vgaHWInit: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
memory_controller_address_b = vgaHWInit_0_83_reg;
end
/* vgaHWInit: %87*/
/*   store i32 %88, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
memory_controller_address_b = vgaHWInit_0_83_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_address_b = vgaHWInit_89_91;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_address_b = vgaHWInit_89_93_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_address_b = vgaHWInit_89_95_reg;
end
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_45))
begin
memory_controller_address_b = vgaHWInit_89_99_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %102, i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
memory_controller_address_b = vgaHWInit_89_103_reg;
end
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_51))
begin
memory_controller_address_b = vgaHWInit_89_108_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_address_b = vgaHWInit_89_112_reg;
end
/* vgaHWInit: %89*/
/*   store i32 %115, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
memory_controller_address_b = vgaHWInit_89_116_reg;
end
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_57))
begin
memory_controller_address_b = vgaHWInit_89_99_reg;
end
/* vgaHWInit: %89*/
/*   store i32 195, i32* %121, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_address_b = vgaHWInit_89_121_reg;
end
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_61))
begin
memory_controller_address_b = vgaHWInit_89_123_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_address_b = vgaHWInit_89_125;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_address_b = vgaHWInit_89_127_reg;
end
/* vgaHWInit: %89*/
/*   store i32 64, i32* %129, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_address_b = vgaHWInit_89_129_reg;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_address_b = vgaHWInit_89_131_reg;
end
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_68))
begin
memory_controller_address_b = vgaHWInit_89_133_reg;
end
/* vgaHWInit: %89*/
/*   store i32 1, i32* %135, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_address_b = vgaHWInit_89_135;
end
/* vgaHWInit: %89*/
/*   store i32 3, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_address_b = vgaHWInit_89_137_reg;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %139, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_address_b = vgaHWInit_89_139_reg;
end
/* vgaHWInit: %89*/
/*   store i32 7, i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_address_b = vgaHWInit_89_141_reg;
end
/* vgaHWInit: %89*/
/*   store i32 9, i32* %143, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_address_b = vgaHWInit_89_143_reg;
end
/* vgaHWInit: %89*/
/*   store i32 11, i32* %145, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_address_b = vgaHWInit_89_145_reg;
end
/* vgaHWInit: %89*/
/*   store i32 13, i32* %147, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_address_b = vgaHWInit_89_147_reg;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %149, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_address_b = vgaHWInit_89_149_reg;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_address_b = vgaHWInit_89_151_reg;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_address_b = vgaHWInit_89_153_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 1, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %11, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %22, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %32, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %87*/
/*   store i32 %88, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %102, i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 %115, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 195, i32* %121, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 64, i32* %129, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_68))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vgaHWInit: %89*/
/*   store i32 1, i32* %135, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 3, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %139, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 7, i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 9, i32* %143, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 11, i32* %145, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 13, i32* %147, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %149, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   store i32 1, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_in_b = 32'd1;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %11, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
memory_controller_in_b = vgaHWInit_0_11;
end
/* vgaHWInit: %0*/
/*   store i32 %22, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
memory_controller_in_b = vgaHWInit_0_22;
end
/* vgaHWInit: %0*/
/*   store i32 %32, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
memory_controller_in_b = vgaHWInit_0_32;
end
/* vgaHWInit: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
memory_controller_in_b = vgaHWInit_0_45;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
memory_controller_in_b = vgaHWInit_0_82;
end
/* vgaHWInit: %87*/
/*   store i32 %88, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
memory_controller_in_b = vgaHWInit_87_88;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %102, i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
memory_controller_in_b = vgaHWInit_89_102;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 %115, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
memory_controller_in_b = vgaHWInit_89_115;
end
/* vgaHWInit: %89*/
/*   store i32 195, i32* %121, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_in_b = 32'd195;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_in_b = 32'd0;
end
/* vgaHWInit: %89*/
/*   store i32 64, i32* %129, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_in_b = 32'd64;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_in_b = 32'd15;
end
/* vgaHWInit: %89*/
/*   store i32 1, i32* %135, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_in_b = 32'd1;
end
/* vgaHWInit: %89*/
/*   store i32 3, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_in_b = 32'd3;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %139, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_in_b = 32'd5;
end
/* vgaHWInit: %89*/
/*   store i32 7, i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_in_b = 32'd7;
end
/* vgaHWInit: %89*/
/*   store i32 9, i32* %143, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_in_b = 32'd9;
end
/* vgaHWInit: %89*/
/*   store i32 11, i32* %145, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_in_b = 32'd11;
end
/* vgaHWInit: %89*/
/*   store i32 13, i32* %147, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_in_b = 32'd13;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %149, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_in_b = 32'd15;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_in_b = 32'd255;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_in_b = 32'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* vgaHWInit: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 1, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %6, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   %13 = load i32** %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %11, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_8))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_12))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %22, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_14))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   %31 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %32, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_20))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   %43 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_24))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_26))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   %47 = load i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_27))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 0, i32* %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_30))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_0_33))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %87*/
/*   store i32 %88, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_87_37))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_39))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %93, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_40))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_41))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   %100 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_45))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %102, i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_47))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   %109 = load i32* %108, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_51))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_53))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 %115, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_56))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   %117 = load i32* %99, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_57))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 195, i32* %121, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_59))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   %124 = load i32** %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_61))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_63))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_64))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 64, i32* %129, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_65))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_66))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   %134 = load i32** %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_68))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 1, i32* %135, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_70))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 3, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_71))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 5, i32* %139, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_72))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 7, i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_73))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 9, i32* %143, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_74))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 11, i32* %145, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_75))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 13, i32* %147, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_76))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 15, i32* %149, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_77))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 255, i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_78))
begin
memory_controller_size_b = 2'd2;
end
/* vgaHWInit: %89*/
/*   store i32 0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vgaHWInit_BB_89_79))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  vgaHWInit_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_arg_var;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_arg_par;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_arg_timings;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_arg_reg;
wire  vgaHWInit_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_memory_controller_address_a;
wire  vgaHWInit_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vgaHWInit_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vgaHWInit_memory_controller_out_a;
wire [1:0] vgaHWInit_memory_controller_size_a;
wire  vgaHWInit_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vgaHWInit_memory_controller_address_b;
wire  vgaHWInit_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vgaHWInit_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vgaHWInit_memory_controller_out_b;
wire [1:0] vgaHWInit_memory_controller_size_b;
reg  vgaHWInit_memory_controller_waitrequest;
wire  vgaHWInit_finish;
reg  vgaHWInit_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


vgaHWInit vgaHWInit_inst (
	.memory_controller_enable_a (vgaHWInit_memory_controller_enable_a),
	.memory_controller_address_a (vgaHWInit_memory_controller_address_a),
	.memory_controller_write_enable_a (vgaHWInit_memory_controller_write_enable_a),
	.memory_controller_in_a (vgaHWInit_memory_controller_in_a),
	.memory_controller_size_a (vgaHWInit_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (vgaHWInit_memory_controller_enable_b),
	.memory_controller_address_b (vgaHWInit_memory_controller_address_b),
	.memory_controller_write_enable_b (vgaHWInit_memory_controller_write_enable_b),
	.memory_controller_in_b (vgaHWInit_memory_controller_in_b),
	.memory_controller_size_b (vgaHWInit_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (vgaHWInit_start),
	.finish (vgaHWInit_finish),
	.arg_var (vgaHWInit_arg_var),
	.arg_par (vgaHWInit_arg_par),
	.arg_timings (vgaHWInit_arg_timings),
	.arg_reg (vgaHWInit_arg_reg)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (vgaHWInit_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (vgaHWInit_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vgaHWInit_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_start"); $finish; end
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
vgaHWInit_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vgaHWInit_arg_var <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_arg_var"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vgaHWInit_arg_par <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_arg_par"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vgaHWInit_arg_timings <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_arg_timings"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vgaHWInit_arg_reg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vgaHWInit_arg_reg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
begin
vgaHWInit_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
begin
vgaHWInit_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
vgaHWInit_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
vgaHWInit_finish_final = vgaHWInit_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = vgaHWInit_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = vgaHWInit_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vgaHWInit_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vgaHWInit_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = vgaHWInit_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = vgaHWInit_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vgaHWInit_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vgaHWInit_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = vgaHWInit_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = vgaHWInit_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = vgaHWInit_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = vgaHWInit_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vgaHWInit_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vgaHWInit_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = vgaHWInit_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = vgaHWInit_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vgaHWInit_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vgaHWInit_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = vgaHWInit_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @vgaHWInit(%struct.fb_var_screeninfo* undef, %struct.fb_var_screeninfo* undef, %struct.xtimings* undef, %struct.savage_reg* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = vgaHWInit_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
