//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:25 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module put_obmc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_dst,
	arg_src,
	arg_stride
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_put_obmc_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_put_obmc_BB_0_2 = 9'd2;
parameter [8:0] LEGUP_F_put_obmc_BB_0_3 = 9'd3;
parameter [8:0] LEGUP_F_put_obmc_BB_0_4 = 9'd4;
parameter [8:0] LEGUP_F_put_obmc_BB_0_5 = 9'd5;
parameter [8:0] LEGUP_F_put_obmc_BB_0_6 = 9'd6;
parameter [8:0] LEGUP_F_put_obmc_BB_0_7 = 9'd7;
parameter [8:0] LEGUP_F_put_obmc_BB_0_8 = 9'd8;
parameter [8:0] LEGUP_F_put_obmc_BB_0_9 = 9'd9;
parameter [8:0] LEGUP_F_put_obmc_BB_0_10 = 9'd10;
parameter [8:0] LEGUP_F_put_obmc_BB_0_11 = 9'd11;
parameter [8:0] LEGUP_F_put_obmc_BB_0_12 = 9'd12;
parameter [8:0] LEGUP_F_put_obmc_BB_0_13 = 9'd13;
parameter [8:0] LEGUP_F_put_obmc_BB_0_14 = 9'd14;
parameter [8:0] LEGUP_F_put_obmc_BB_0_15 = 9'd15;
parameter [8:0] LEGUP_F_put_obmc_BB_0_16 = 9'd16;
parameter [8:0] LEGUP_F_put_obmc_BB_0_17 = 9'd17;
parameter [8:0] LEGUP_F_put_obmc_BB_0_18 = 9'd18;
parameter [8:0] LEGUP_F_put_obmc_BB_0_19 = 9'd19;
parameter [8:0] LEGUP_F_put_obmc_BB_0_20 = 9'd20;
parameter [8:0] LEGUP_F_put_obmc_BB_0_21 = 9'd21;
parameter [8:0] LEGUP_F_put_obmc_BB_0_22 = 9'd22;
parameter [8:0] LEGUP_F_put_obmc_BB_0_23 = 9'd23;
parameter [8:0] LEGUP_F_put_obmc_BB_0_24 = 9'd24;
parameter [8:0] LEGUP_F_put_obmc_BB_0_25 = 9'd25;
parameter [8:0] LEGUP_F_put_obmc_BB_0_26 = 9'd26;
parameter [8:0] LEGUP_F_put_obmc_BB_0_27 = 9'd27;
parameter [8:0] LEGUP_F_put_obmc_BB_0_28 = 9'd28;
parameter [8:0] LEGUP_F_put_obmc_BB_0_29 = 9'd29;
parameter [8:0] LEGUP_F_put_obmc_BB_0_30 = 9'd30;
parameter [8:0] LEGUP_F_put_obmc_BB_0_31 = 9'd31;
parameter [8:0] LEGUP_F_put_obmc_BB_0_32 = 9'd32;
parameter [8:0] LEGUP_F_put_obmc_BB_0_33 = 9'd33;
parameter [8:0] LEGUP_F_put_obmc_BB_0_34 = 9'd34;
parameter [8:0] LEGUP_F_put_obmc_BB_0_35 = 9'd35;
parameter [8:0] LEGUP_F_put_obmc_BB_0_36 = 9'd36;
parameter [8:0] LEGUP_F_put_obmc_BB_0_37 = 9'd37;
parameter [8:0] LEGUP_F_put_obmc_BB_0_38 = 9'd38;
parameter [8:0] LEGUP_F_put_obmc_BB_0_39 = 9'd39;
parameter [8:0] LEGUP_F_put_obmc_BB_0_40 = 9'd40;
parameter [8:0] LEGUP_F_put_obmc_BB_0_41 = 9'd41;
parameter [8:0] LEGUP_F_put_obmc_BB_0_42 = 9'd42;
parameter [8:0] LEGUP_F_put_obmc_BB_0_43 = 9'd43;
parameter [8:0] LEGUP_F_put_obmc_BB_0_44 = 9'd44;
parameter [8:0] LEGUP_F_put_obmc_BB_0_45 = 9'd45;
parameter [8:0] LEGUP_F_put_obmc_BB_0_46 = 9'd46;
parameter [8:0] LEGUP_F_put_obmc_BB_0_47 = 9'd47;
parameter [8:0] LEGUP_F_put_obmc_BB_0_48 = 9'd48;
parameter [8:0] LEGUP_F_put_obmc_BB_0_49 = 9'd49;
parameter [8:0] LEGUP_F_put_obmc_BB_0_50 = 9'd50;
parameter [8:0] LEGUP_F_put_obmc_BB_0_51 = 9'd51;
parameter [8:0] LEGUP_F_put_obmc_BB_0_52 = 9'd52;
parameter [8:0] LEGUP_F_put_obmc_BB_0_53 = 9'd53;
parameter [8:0] LEGUP_F_put_obmc_BB_0_54 = 9'd54;
parameter [8:0] LEGUP_F_put_obmc_BB_0_55 = 9'd55;
parameter [8:0] LEGUP_F_put_obmc_BB_0_56 = 9'd56;
parameter [8:0] LEGUP_F_put_obmc_BB_0_57 = 9'd57;
parameter [8:0] LEGUP_F_put_obmc_BB_0_58 = 9'd58;
parameter [8:0] LEGUP_F_put_obmc_BB_0_59 = 9'd59;
parameter [8:0] LEGUP_F_put_obmc_BB_0_60 = 9'd60;
parameter [8:0] LEGUP_F_put_obmc_BB_0_61 = 9'd61;
parameter [8:0] LEGUP_F_put_obmc_BB_0_62 = 9'd62;
parameter [8:0] LEGUP_F_put_obmc_BB_0_63 = 9'd63;
parameter [8:0] LEGUP_F_put_obmc_BB_0_64 = 9'd64;
parameter [8:0] LEGUP_F_put_obmc_BB_0_65 = 9'd65;
parameter [8:0] LEGUP_F_put_obmc_BB_0_66 = 9'd66;
parameter [8:0] LEGUP_F_put_obmc_BB_0_67 = 9'd67;
parameter [8:0] LEGUP_F_put_obmc_BB_0_68 = 9'd68;
parameter [8:0] LEGUP_F_put_obmc_BB_0_69 = 9'd69;
parameter [8:0] LEGUP_F_put_obmc_BB_0_70 = 9'd70;
parameter [8:0] LEGUP_F_put_obmc_BB_0_71 = 9'd71;
parameter [8:0] LEGUP_F_put_obmc_BB_0_72 = 9'd72;
parameter [8:0] LEGUP_F_put_obmc_BB_0_73 = 9'd73;
parameter [8:0] LEGUP_F_put_obmc_BB_0_74 = 9'd74;
parameter [8:0] LEGUP_F_put_obmc_BB_0_75 = 9'd75;
parameter [8:0] LEGUP_F_put_obmc_BB_0_76 = 9'd76;
parameter [8:0] LEGUP_F_put_obmc_BB_0_77 = 9'd77;
parameter [8:0] LEGUP_F_put_obmc_BB_0_78 = 9'd78;
parameter [8:0] LEGUP_F_put_obmc_BB_0_79 = 9'd79;
parameter [8:0] LEGUP_F_put_obmc_BB_0_80 = 9'd80;
parameter [8:0] LEGUP_F_put_obmc_BB_0_81 = 9'd81;
parameter [8:0] LEGUP_F_put_obmc_BB_0_82 = 9'd82;
parameter [8:0] LEGUP_F_put_obmc_BB_0_83 = 9'd83;
parameter [8:0] LEGUP_F_put_obmc_BB_0_84 = 9'd84;
parameter [8:0] LEGUP_F_put_obmc_BB_0_85 = 9'd85;
parameter [8:0] LEGUP_F_put_obmc_BB_0_86 = 9'd86;
parameter [8:0] LEGUP_F_put_obmc_BB_0_87 = 9'd87;
parameter [8:0] LEGUP_F_put_obmc_BB_0_88 = 9'd88;
parameter [8:0] LEGUP_F_put_obmc_BB_0_89 = 9'd89;
parameter [8:0] LEGUP_F_put_obmc_BB_0_90 = 9'd90;
parameter [8:0] LEGUP_F_put_obmc_BB_0_91 = 9'd91;
parameter [8:0] LEGUP_F_put_obmc_BB_0_92 = 9'd92;
parameter [8:0] LEGUP_F_put_obmc_BB_0_93 = 9'd93;
parameter [8:0] LEGUP_F_put_obmc_BB_0_94 = 9'd94;
parameter [8:0] LEGUP_F_put_obmc_BB_0_95 = 9'd95;
parameter [8:0] LEGUP_F_put_obmc_BB_0_96 = 9'd96;
parameter [8:0] LEGUP_F_put_obmc_BB_0_97 = 9'd97;
parameter [8:0] LEGUP_F_put_obmc_BB_0_98 = 9'd98;
parameter [8:0] LEGUP_F_put_obmc_BB_0_99 = 9'd99;
parameter [8:0] LEGUP_F_put_obmc_BB_0_100 = 9'd100;
parameter [8:0] LEGUP_F_put_obmc_BB_0_101 = 9'd101;
parameter [8:0] LEGUP_F_put_obmc_BB_0_102 = 9'd102;
parameter [8:0] LEGUP_F_put_obmc_BB_0_103 = 9'd103;
parameter [8:0] LEGUP_F_put_obmc_BB_0_104 = 9'd104;
parameter [8:0] LEGUP_F_put_obmc_BB_0_105 = 9'd105;
parameter [8:0] LEGUP_F_put_obmc_BB_0_106 = 9'd106;
parameter [8:0] LEGUP_F_put_obmc_BB_0_107 = 9'd107;
parameter [8:0] LEGUP_F_put_obmc_BB_0_108 = 9'd108;
parameter [8:0] LEGUP_F_put_obmc_BB_0_109 = 9'd109;
parameter [8:0] LEGUP_F_put_obmc_BB_0_110 = 9'd110;
parameter [8:0] LEGUP_F_put_obmc_BB_0_111 = 9'd111;
parameter [8:0] LEGUP_F_put_obmc_BB_0_112 = 9'd112;
parameter [8:0] LEGUP_F_put_obmc_BB_0_113 = 9'd113;
parameter [8:0] LEGUP_F_put_obmc_BB_0_114 = 9'd114;
parameter [8:0] LEGUP_F_put_obmc_BB_0_115 = 9'd115;
parameter [8:0] LEGUP_F_put_obmc_BB_0_116 = 9'd116;
parameter [8:0] LEGUP_F_put_obmc_BB_0_117 = 9'd117;
parameter [8:0] LEGUP_F_put_obmc_BB_0_118 = 9'd118;
parameter [8:0] LEGUP_F_put_obmc_BB_0_119 = 9'd119;
parameter [8:0] LEGUP_F_put_obmc_BB_0_120 = 9'd120;
parameter [8:0] LEGUP_F_put_obmc_BB_0_121 = 9'd121;
parameter [8:0] LEGUP_F_put_obmc_BB_0_122 = 9'd122;
parameter [8:0] LEGUP_F_put_obmc_BB_0_123 = 9'd123;
parameter [8:0] LEGUP_F_put_obmc_BB_0_124 = 9'd124;
parameter [8:0] LEGUP_F_put_obmc_BB_0_125 = 9'd125;
parameter [8:0] LEGUP_F_put_obmc_BB_0_126 = 9'd126;
parameter [8:0] LEGUP_F_put_obmc_BB_0_127 = 9'd127;
parameter [8:0] LEGUP_F_put_obmc_BB_0_128 = 9'd128;
parameter [8:0] LEGUP_F_put_obmc_BB_0_129 = 9'd129;
parameter [8:0] LEGUP_F_put_obmc_BB_0_130 = 9'd130;
parameter [8:0] LEGUP_F_put_obmc_BB_0_131 = 9'd131;
parameter [8:0] LEGUP_F_put_obmc_BB_0_132 = 9'd132;
parameter [8:0] LEGUP_F_put_obmc_BB_0_133 = 9'd133;
parameter [8:0] LEGUP_F_put_obmc_BB_0_134 = 9'd134;
parameter [8:0] LEGUP_F_put_obmc_BB_0_135 = 9'd135;
parameter [8:0] LEGUP_F_put_obmc_BB_0_136 = 9'd136;
parameter [8:0] LEGUP_F_put_obmc_BB_0_137 = 9'd137;
parameter [8:0] LEGUP_F_put_obmc_BB_0_138 = 9'd138;
parameter [8:0] LEGUP_F_put_obmc_BB_0_139 = 9'd139;
parameter [8:0] LEGUP_F_put_obmc_BB_0_140 = 9'd140;
parameter [8:0] LEGUP_F_put_obmc_BB_0_141 = 9'd141;
parameter [8:0] LEGUP_F_put_obmc_BB_0_142 = 9'd142;
parameter [8:0] LEGUP_F_put_obmc_BB_0_143 = 9'd143;
parameter [8:0] LEGUP_F_put_obmc_BB_0_144 = 9'd144;
parameter [8:0] LEGUP_F_put_obmc_BB_0_145 = 9'd145;
parameter [8:0] LEGUP_F_put_obmc_BB_0_146 = 9'd146;
parameter [8:0] LEGUP_F_put_obmc_BB_0_147 = 9'd147;
parameter [8:0] LEGUP_F_put_obmc_BB_0_148 = 9'd148;
parameter [8:0] LEGUP_F_put_obmc_BB_0_149 = 9'd149;
parameter [8:0] LEGUP_F_put_obmc_BB_0_150 = 9'd150;
parameter [8:0] LEGUP_F_put_obmc_BB_0_151 = 9'd151;
parameter [8:0] LEGUP_F_put_obmc_BB_0_152 = 9'd152;
parameter [8:0] LEGUP_F_put_obmc_BB_0_153 = 9'd153;
parameter [8:0] LEGUP_F_put_obmc_BB_0_154 = 9'd154;
parameter [8:0] LEGUP_F_put_obmc_BB_0_155 = 9'd155;
parameter [8:0] LEGUP_F_put_obmc_BB_0_156 = 9'd156;
parameter [8:0] LEGUP_F_put_obmc_BB_0_157 = 9'd157;
parameter [8:0] LEGUP_F_put_obmc_BB_0_158 = 9'd158;
parameter [8:0] LEGUP_F_put_obmc_BB_0_159 = 9'd159;
parameter [8:0] LEGUP_F_put_obmc_BB_0_160 = 9'd160;
parameter [8:0] LEGUP_F_put_obmc_BB_0_161 = 9'd161;
parameter [8:0] LEGUP_F_put_obmc_BB_0_162 = 9'd162;
parameter [8:0] LEGUP_F_put_obmc_BB_0_163 = 9'd163;
parameter [8:0] LEGUP_F_put_obmc_BB_0_164 = 9'd164;
parameter [8:0] LEGUP_F_put_obmc_BB_0_165 = 9'd165;
parameter [8:0] LEGUP_F_put_obmc_BB_0_166 = 9'd166;
parameter [8:0] LEGUP_F_put_obmc_BB_0_167 = 9'd167;
parameter [8:0] LEGUP_F_put_obmc_BB_0_168 = 9'd168;
parameter [8:0] LEGUP_F_put_obmc_BB_0_169 = 9'd169;
parameter [8:0] LEGUP_F_put_obmc_BB_0_170 = 9'd170;
parameter [8:0] LEGUP_F_put_obmc_BB_0_171 = 9'd171;
parameter [8:0] LEGUP_F_put_obmc_BB_0_172 = 9'd172;
parameter [8:0] LEGUP_F_put_obmc_BB_0_173 = 9'd173;
parameter [8:0] LEGUP_F_put_obmc_BB_0_174 = 9'd174;
parameter [8:0] LEGUP_F_put_obmc_BB_0_175 = 9'd175;
parameter [8:0] LEGUP_F_put_obmc_BB_0_176 = 9'd176;
parameter [8:0] LEGUP_F_put_obmc_BB_0_177 = 9'd177;
parameter [8:0] LEGUP_F_put_obmc_BB_0_178 = 9'd178;
parameter [8:0] LEGUP_F_put_obmc_BB_0_179 = 9'd179;
parameter [8:0] LEGUP_F_put_obmc_BB_0_180 = 9'd180;
parameter [8:0] LEGUP_F_put_obmc_BB_0_181 = 9'd181;
parameter [8:0] LEGUP_F_put_obmc_BB_0_182 = 9'd182;
parameter [8:0] LEGUP_F_put_obmc_BB_0_183 = 9'd183;
parameter [8:0] LEGUP_F_put_obmc_BB_0_184 = 9'd184;
parameter [8:0] LEGUP_F_put_obmc_BB_0_185 = 9'd185;
parameter [8:0] LEGUP_F_put_obmc_BB_0_186 = 9'd186;
parameter [8:0] LEGUP_F_put_obmc_BB_0_187 = 9'd187;
parameter [8:0] LEGUP_F_put_obmc_BB_0_188 = 9'd188;
parameter [8:0] LEGUP_F_put_obmc_BB_0_189 = 9'd189;
parameter [8:0] LEGUP_F_put_obmc_BB_0_190 = 9'd190;
parameter [8:0] LEGUP_F_put_obmc_BB_0_191 = 9'd191;
parameter [8:0] LEGUP_F_put_obmc_BB_0_192 = 9'd192;
parameter [8:0] LEGUP_F_put_obmc_BB_0_193 = 9'd193;
parameter [8:0] LEGUP_F_put_obmc_BB_0_194 = 9'd194;
parameter [8:0] LEGUP_F_put_obmc_BB_0_195 = 9'd195;
parameter [8:0] LEGUP_F_put_obmc_BB_0_196 = 9'd196;
parameter [8:0] LEGUP_F_put_obmc_BB_0_197 = 9'd197;
parameter [8:0] LEGUP_F_put_obmc_BB_0_198 = 9'd198;
parameter [8:0] LEGUP_F_put_obmc_BB_0_199 = 9'd199;
parameter [8:0] LEGUP_F_put_obmc_BB_0_200 = 9'd200;
parameter [8:0] LEGUP_F_put_obmc_BB_0_201 = 9'd201;
parameter [8:0] LEGUP_F_put_obmc_BB_0_202 = 9'd202;
parameter [8:0] LEGUP_F_put_obmc_BB_0_203 = 9'd203;
parameter [8:0] LEGUP_F_put_obmc_BB_0_204 = 9'd204;
parameter [8:0] LEGUP_F_put_obmc_BB_0_205 = 9'd205;
parameter [8:0] LEGUP_F_put_obmc_BB_0_206 = 9'd206;
parameter [8:0] LEGUP_F_put_obmc_BB_0_207 = 9'd207;
parameter [8:0] LEGUP_F_put_obmc_BB_0_208 = 9'd208;
parameter [8:0] LEGUP_F_put_obmc_BB_0_209 = 9'd209;
parameter [8:0] LEGUP_F_put_obmc_BB_0_210 = 9'd210;
parameter [8:0] LEGUP_F_put_obmc_BB_0_211 = 9'd211;
parameter [8:0] LEGUP_F_put_obmc_BB_0_212 = 9'd212;
parameter [8:0] LEGUP_F_put_obmc_BB_0_213 = 9'd213;
parameter [8:0] LEGUP_F_put_obmc_BB_0_214 = 9'd214;
parameter [8:0] LEGUP_F_put_obmc_BB_0_215 = 9'd215;
parameter [8:0] LEGUP_F_put_obmc_BB_0_216 = 9'd216;
parameter [8:0] LEGUP_F_put_obmc_BB_0_217 = 9'd217;
parameter [8:0] LEGUP_F_put_obmc_BB_0_218 = 9'd218;
parameter [8:0] LEGUP_F_put_obmc_BB_0_219 = 9'd219;
parameter [8:0] LEGUP_F_put_obmc_BB_0_220 = 9'd220;
parameter [8:0] LEGUP_F_put_obmc_BB_0_221 = 9'd221;
parameter [8:0] LEGUP_F_put_obmc_BB_0_222 = 9'd222;
parameter [8:0] LEGUP_F_put_obmc_BB_0_223 = 9'd223;
parameter [8:0] LEGUP_F_put_obmc_BB_0_224 = 9'd224;
parameter [8:0] LEGUP_F_put_obmc_BB_0_225 = 9'd225;
parameter [8:0] LEGUP_F_put_obmc_BB_0_226 = 9'd226;
parameter [8:0] LEGUP_F_put_obmc_BB_0_227 = 9'd227;
parameter [8:0] LEGUP_F_put_obmc_BB_0_228 = 9'd228;
parameter [8:0] LEGUP_F_put_obmc_BB_0_229 = 9'd229;
parameter [8:0] LEGUP_F_put_obmc_BB_0_230 = 9'd230;
parameter [8:0] LEGUP_F_put_obmc_BB_0_231 = 9'd231;
parameter [8:0] LEGUP_F_put_obmc_BB_0_232 = 9'd232;
parameter [8:0] LEGUP_F_put_obmc_BB_0_233 = 9'd233;
parameter [8:0] LEGUP_F_put_obmc_BB_0_234 = 9'd234;
parameter [8:0] LEGUP_F_put_obmc_BB_0_235 = 9'd235;
parameter [8:0] LEGUP_F_put_obmc_BB_0_236 = 9'd236;
parameter [8:0] LEGUP_F_put_obmc_BB_0_237 = 9'd237;
parameter [8:0] LEGUP_F_put_obmc_BB_0_238 = 9'd238;
parameter [8:0] LEGUP_F_put_obmc_BB_0_239 = 9'd239;
parameter [8:0] LEGUP_F_put_obmc_BB_0_240 = 9'd240;
parameter [8:0] LEGUP_F_put_obmc_BB_0_241 = 9'd241;
parameter [8:0] LEGUP_F_put_obmc_BB_0_242 = 9'd242;
parameter [8:0] LEGUP_F_put_obmc_BB_0_243 = 9'd243;
parameter [8:0] LEGUP_F_put_obmc_BB_0_244 = 9'd244;
parameter [8:0] LEGUP_F_put_obmc_BB_0_245 = 9'd245;
parameter [8:0] LEGUP_F_put_obmc_BB_0_246 = 9'd246;
parameter [8:0] LEGUP_F_put_obmc_BB_0_247 = 9'd247;
parameter [8:0] LEGUP_F_put_obmc_BB_0_248 = 9'd248;
parameter [8:0] LEGUP_F_put_obmc_BB_0_249 = 9'd249;
parameter [8:0] LEGUP_F_put_obmc_BB_0_250 = 9'd250;
parameter [8:0] LEGUP_F_put_obmc_BB_0_251 = 9'd251;
parameter [8:0] LEGUP_F_put_obmc_BB_0_252 = 9'd252;
parameter [8:0] LEGUP_F_put_obmc_BB_0_253 = 9'd253;
parameter [8:0] LEGUP_F_put_obmc_BB_0_254 = 9'd254;
parameter [8:0] LEGUP_F_put_obmc_BB_0_255 = 9'd255;
parameter [8:0] LEGUP_F_put_obmc_BB_0_256 = 9'd256;
parameter [8:0] LEGUP_F_put_obmc_BB_0_257 = 9'd257;
parameter [8:0] LEGUP_F_put_obmc_BB_0_258 = 9'd258;
parameter [8:0] LEGUP_F_put_obmc_BB_0_259 = 9'd259;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dst;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_src;
input [31:0] arg_stride;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_9_reg;
reg [31:0] put_obmc_0_10;
reg [31:0] put_obmc_0_10_reg;
reg [31:0] put_obmc_0_11;
reg [31:0] put_obmc_0_11_reg;
reg [31:0] put_obmc_0_12;
reg [31:0] put_obmc_0_12_reg;
reg [31:0] put_obmc_0_13;
reg [31:0] put_obmc_0_13_reg;
reg [31:0] put_obmc_0_tmp;
reg [31:0] put_obmc_0_tmp_reg;
reg [31:0] put_obmc_0_tmp1;
reg [31:0] put_obmc_0_tmp1_reg;
reg [31:0] put_obmc_0_14;
reg [31:0] put_obmc_0_14_reg;
reg [31:0] put_obmc_0_15;
reg [31:0] put_obmc_0_15_reg;
reg [31:0] put_obmc_0_16;
reg [31:0] put_obmc_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_17_reg;
reg [31:0] put_obmc_0_18;
reg [31:0] put_obmc_0_18_reg;
reg [31:0] put_obmc_0_19;
reg [31:0] put_obmc_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_20_reg;
reg [31:0] put_obmc_0_21;
reg [31:0] put_obmc_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_22_reg;
reg [31:0] put_obmc_0_23;
reg [31:0] put_obmc_0_23_reg;
reg [31:0] put_obmc_0_24;
reg [31:0] put_obmc_0_24_reg;
reg [31:0] put_obmc_0_25;
reg [31:0] put_obmc_0_25_reg;
reg [31:0] put_obmc_0_26;
reg [31:0] put_obmc_0_26_reg;
reg [31:0] put_obmc_0_27;
reg [31:0] put_obmc_0_27_reg;
reg [31:0] put_obmc_0_28;
reg [31:0] put_obmc_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_30_reg;
reg [31:0] put_obmc_0_31;
reg [31:0] put_obmc_0_31_reg;
reg [31:0] put_obmc_0_32;
reg [31:0] put_obmc_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_33_reg;
reg [31:0] put_obmc_0_34;
reg [31:0] put_obmc_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_35_reg;
reg [31:0] put_obmc_0_36;
reg [31:0] put_obmc_0_36_reg;
reg [31:0] put_obmc_0_37;
reg [31:0] put_obmc_0_37_reg;
reg [31:0] put_obmc_0_38;
reg [31:0] put_obmc_0_38_reg;
reg [31:0] put_obmc_0_39;
reg [31:0] put_obmc_0_39_reg;
reg [31:0] put_obmc_0_40;
reg [31:0] put_obmc_0_40_reg;
reg [31:0] put_obmc_0_41;
reg [31:0] put_obmc_0_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_43_reg;
reg [31:0] put_obmc_0_44;
reg [31:0] put_obmc_0_44_reg;
reg [31:0] put_obmc_0_45;
reg [31:0] put_obmc_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_46_reg;
reg [31:0] put_obmc_0_47;
reg [31:0] put_obmc_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_48_reg;
reg [31:0] put_obmc_0_49;
reg [31:0] put_obmc_0_49_reg;
reg [31:0] put_obmc_0_50;
reg [31:0] put_obmc_0_50_reg;
reg [31:0] put_obmc_0_51;
reg [31:0] put_obmc_0_51_reg;
reg [31:0] put_obmc_0_52;
reg [31:0] put_obmc_0_52_reg;
reg [31:0] put_obmc_0_53;
reg [31:0] put_obmc_0_53_reg;
reg [31:0] put_obmc_0_54;
reg [31:0] put_obmc_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_55_reg;
reg [31:0] put_obmc_0_56;
reg [31:0] put_obmc_0_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_57_reg;
reg [31:0] put_obmc_0_58;
reg [31:0] put_obmc_0_58_reg;
reg [31:0] put_obmc_0_59;
reg [31:0] put_obmc_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_60_reg;
reg [31:0] put_obmc_0_61;
reg [31:0] put_obmc_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_62_reg;
reg [31:0] put_obmc_0_63;
reg [31:0] put_obmc_0_63_reg;
reg [31:0] put_obmc_0_64;
reg [31:0] put_obmc_0_64_reg;
reg [31:0] put_obmc_0_65;
reg [31:0] put_obmc_0_65_reg;
reg [31:0] put_obmc_0_66;
reg [31:0] put_obmc_0_66_reg;
reg [31:0] put_obmc_0_67;
reg [31:0] put_obmc_0_67_reg;
reg [31:0] put_obmc_0_68;
reg [31:0] put_obmc_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_69_reg;
reg [31:0] put_obmc_0_70;
reg [31:0] put_obmc_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_71_reg;
reg [31:0] put_obmc_0_72;
reg [31:0] put_obmc_0_72_reg;
reg [31:0] put_obmc_0_73;
reg [31:0] put_obmc_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_74_reg;
reg [31:0] put_obmc_0_75;
reg [31:0] put_obmc_0_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_76_reg;
reg [31:0] put_obmc_0_77;
reg [31:0] put_obmc_0_77_reg;
reg [31:0] put_obmc_0_78;
reg [31:0] put_obmc_0_78_reg;
reg [31:0] put_obmc_0_79;
reg [31:0] put_obmc_0_79_reg;
reg [31:0] put_obmc_0_80;
reg [31:0] put_obmc_0_80_reg;
reg [31:0] put_obmc_0_81;
reg [31:0] put_obmc_0_81_reg;
reg [31:0] put_obmc_0_82;
reg [31:0] put_obmc_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_84_reg;
reg [31:0] put_obmc_0_85;
reg [31:0] put_obmc_0_85_reg;
reg [31:0] put_obmc_0_86;
reg [31:0] put_obmc_0_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_87_reg;
reg [31:0] put_obmc_0_88;
reg [31:0] put_obmc_0_88_reg;
reg [31:0] put_obmc_0_89;
reg [31:0] put_obmc_0_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_90_reg;
reg [31:0] put_obmc_0_91;
reg [31:0] put_obmc_0_91_reg;
reg [31:0] put_obmc_0_92;
reg [31:0] put_obmc_0_92_reg;
reg [31:0] put_obmc_0_93;
reg [31:0] put_obmc_0_93_reg;
reg [31:0] put_obmc_0_94;
reg [31:0] put_obmc_0_94_reg;
reg [31:0] put_obmc_0_95;
reg [31:0] put_obmc_0_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_97_reg;
reg [31:0] put_obmc_0_98;
reg [31:0] put_obmc_0_98_reg;
reg [31:0] put_obmc_0_99;
reg [31:0] put_obmc_0_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_100_reg;
reg [31:0] put_obmc_0_101;
reg [31:0] put_obmc_0_101_reg;
reg [31:0] put_obmc_0_102;
reg [31:0] put_obmc_0_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_103_reg;
reg [31:0] put_obmc_0_104;
reg [31:0] put_obmc_0_104_reg;
reg [31:0] put_obmc_0_105;
reg [31:0] put_obmc_0_105_reg;
reg [31:0] put_obmc_0_106;
reg [31:0] put_obmc_0_106_reg;
reg [31:0] put_obmc_0_107;
reg [31:0] put_obmc_0_107_reg;
reg [31:0] put_obmc_0_108;
reg [31:0] put_obmc_0_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_109_reg;
reg [31:0] put_obmc_0_110;
reg [31:0] put_obmc_0_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_111_reg;
reg [31:0] put_obmc_0_112;
reg [31:0] put_obmc_0_112_reg;
reg [31:0] put_obmc_0_113;
reg [31:0] put_obmc_0_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_114_reg;
reg [31:0] put_obmc_0_115;
reg [31:0] put_obmc_0_115_reg;
reg [31:0] put_obmc_0_116;
reg [31:0] put_obmc_0_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_117_reg;
reg [31:0] put_obmc_0_118;
reg [31:0] put_obmc_0_118_reg;
reg [31:0] put_obmc_0_119;
reg [31:0] put_obmc_0_119_reg;
reg [31:0] put_obmc_0_120;
reg [31:0] put_obmc_0_120_reg;
reg [31:0] put_obmc_0_121;
reg [31:0] put_obmc_0_121_reg;
reg [31:0] put_obmc_0_122;
reg [31:0] put_obmc_0_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_123_reg;
reg [31:0] put_obmc_0_124;
reg [31:0] put_obmc_0_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_125_reg;
reg [31:0] put_obmc_0_126;
reg [31:0] put_obmc_0_126_reg;
reg [31:0] put_obmc_0_127;
reg [31:0] put_obmc_0_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_128_reg;
reg [31:0] put_obmc_0_129;
reg [31:0] put_obmc_0_129_reg;
reg [31:0] put_obmc_0_130;
reg [31:0] put_obmc_0_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_131_reg;
reg [31:0] put_obmc_0_132;
reg [31:0] put_obmc_0_132_reg;
reg [31:0] put_obmc_0_133;
reg [31:0] put_obmc_0_133_reg;
reg [31:0] put_obmc_0_134;
reg [31:0] put_obmc_0_134_reg;
reg [31:0] put_obmc_0_135;
reg [31:0] put_obmc_0_135_reg;
reg [31:0] put_obmc_0_136;
reg [31:0] put_obmc_0_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_138_reg;
reg [31:0] put_obmc_0_139;
reg [31:0] put_obmc_0_139_reg;
reg [31:0] put_obmc_0_140;
reg [31:0] put_obmc_0_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_141_reg;
reg [31:0] put_obmc_0_142;
reg [31:0] put_obmc_0_142_reg;
reg [31:0] put_obmc_0_143;
reg [31:0] put_obmc_0_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_144_reg;
reg [31:0] put_obmc_0_145;
reg [31:0] put_obmc_0_145_reg;
reg [31:0] put_obmc_0_146;
reg [31:0] put_obmc_0_146_reg;
reg [31:0] put_obmc_0_147;
reg [31:0] put_obmc_0_147_reg;
reg [31:0] put_obmc_0_148;
reg [31:0] put_obmc_0_148_reg;
reg [31:0] put_obmc_0_149;
reg [31:0] put_obmc_0_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_151_reg;
reg [31:0] put_obmc_0_152;
reg [31:0] put_obmc_0_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_153_reg;
reg [31:0] put_obmc_0_154;
reg [31:0] put_obmc_0_154_reg;
reg [31:0] put_obmc_0_155;
reg [31:0] put_obmc_0_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_156_reg;
reg [31:0] put_obmc_0_157;
reg [31:0] put_obmc_0_157_reg;
reg [31:0] put_obmc_0_tmp2;
reg [31:0] put_obmc_0_tmp2_reg;
reg [31:0] put_obmc_0_tmp3;
reg [31:0] put_obmc_0_tmp3_reg;
reg [31:0] put_obmc_0_158;
reg [31:0] put_obmc_0_158_reg;
reg [31:0] put_obmc_0_159;
reg [31:0] put_obmc_0_159_reg;
reg [31:0] put_obmc_0_160;
reg [31:0] put_obmc_0_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_162_reg;
reg [31:0] put_obmc_0_163;
reg [31:0] put_obmc_0_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_164_reg;
reg [31:0] put_obmc_0_165;
reg [31:0] put_obmc_0_165_reg;
reg [31:0] put_obmc_0_166;
reg [31:0] put_obmc_0_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_167_reg;
reg [31:0] put_obmc_0_168;
reg [31:0] put_obmc_0_168_reg;
reg [31:0] put_obmc_0_169;
reg [31:0] put_obmc_0_169_reg;
reg [31:0] put_obmc_0_170;
reg [31:0] put_obmc_0_170_reg;
reg [31:0] put_obmc_0_171;
reg [31:0] put_obmc_0_171_reg;
reg [31:0] put_obmc_0_172;
reg [31:0] put_obmc_0_172_reg;
reg [31:0] put_obmc_0_173;
reg [31:0] put_obmc_0_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_174_reg;
reg [31:0] put_obmc_0_175;
reg [31:0] put_obmc_0_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_176_reg;
reg [31:0] put_obmc_0_177;
reg [31:0] put_obmc_0_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_178_reg;
reg [31:0] put_obmc_0_179;
reg [31:0] put_obmc_0_179_reg;
reg [31:0] put_obmc_0_180;
reg [31:0] put_obmc_0_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_181_reg;
reg [31:0] put_obmc_0_182;
reg [31:0] put_obmc_0_182_reg;
reg [31:0] put_obmc_0_183;
reg [31:0] put_obmc_0_183_reg;
reg [31:0] put_obmc_0_184;
reg [31:0] put_obmc_0_184_reg;
reg [31:0] put_obmc_0_185;
reg [31:0] put_obmc_0_185_reg;
reg [31:0] put_obmc_0_186;
reg [31:0] put_obmc_0_186_reg;
reg [31:0] put_obmc_0_187;
reg [31:0] put_obmc_0_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_188_reg;
reg [31:0] put_obmc_0_189;
reg [31:0] put_obmc_0_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_190_reg;
reg [31:0] put_obmc_0_191;
reg [31:0] put_obmc_0_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_192_reg;
reg [31:0] put_obmc_0_193;
reg [31:0] put_obmc_0_193_reg;
reg [31:0] put_obmc_0_194;
reg [31:0] put_obmc_0_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_195_reg;
reg [31:0] put_obmc_0_196;
reg [31:0] put_obmc_0_196_reg;
reg [31:0] put_obmc_0_197;
reg [31:0] put_obmc_0_197_reg;
reg [31:0] put_obmc_0_198;
reg [31:0] put_obmc_0_198_reg;
reg [31:0] put_obmc_0_199;
reg [31:0] put_obmc_0_199_reg;
reg [31:0] put_obmc_0_200;
reg [31:0] put_obmc_0_200_reg;
reg [31:0] put_obmc_0_201;
reg [31:0] put_obmc_0_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_202_reg;
reg [31:0] put_obmc_0_203;
reg [31:0] put_obmc_0_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_204_reg;
reg [31:0] put_obmc_0_205;
reg [31:0] put_obmc_0_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_206_reg;
reg [31:0] put_obmc_0_207;
reg [31:0] put_obmc_0_207_reg;
reg [31:0] put_obmc_0_208;
reg [31:0] put_obmc_0_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_209_reg;
reg [31:0] put_obmc_0_210;
reg [31:0] put_obmc_0_210_reg;
reg [31:0] put_obmc_0_211;
reg [31:0] put_obmc_0_211_reg;
reg [31:0] put_obmc_0_212;
reg [31:0] put_obmc_0_212_reg;
reg [31:0] put_obmc_0_213;
reg [31:0] put_obmc_0_213_reg;
reg [31:0] put_obmc_0_214;
reg [31:0] put_obmc_0_214_reg;
reg [31:0] put_obmc_0_215;
reg [31:0] put_obmc_0_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_216_reg;
reg [31:0] put_obmc_0_217;
reg [31:0] put_obmc_0_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_218_reg;
reg [31:0] put_obmc_0_219;
reg [31:0] put_obmc_0_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_220;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_220_reg;
reg [31:0] put_obmc_0_221;
reg [31:0] put_obmc_0_221_reg;
reg [31:0] put_obmc_0_222;
reg [31:0] put_obmc_0_222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_223_reg;
reg [31:0] put_obmc_0_224;
reg [31:0] put_obmc_0_224_reg;
reg [31:0] put_obmc_0_225;
reg [31:0] put_obmc_0_225_reg;
reg [31:0] put_obmc_0_226;
reg [31:0] put_obmc_0_226_reg;
reg [31:0] put_obmc_0_227;
reg [31:0] put_obmc_0_227_reg;
reg [31:0] put_obmc_0_228;
reg [31:0] put_obmc_0_228_reg;
reg [31:0] put_obmc_0_229;
reg [31:0] put_obmc_0_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_230_reg;
reg [31:0] put_obmc_0_231;
reg [31:0] put_obmc_0_231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_232_reg;
reg [31:0] put_obmc_0_233;
reg [31:0] put_obmc_0_233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_234_reg;
reg [31:0] put_obmc_0_235;
reg [31:0] put_obmc_0_235_reg;
reg [31:0] put_obmc_0_236;
reg [31:0] put_obmc_0_236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_237_reg;
reg [31:0] put_obmc_0_238;
reg [31:0] put_obmc_0_238_reg;
reg [31:0] put_obmc_0_239;
reg [31:0] put_obmc_0_239_reg;
reg [31:0] put_obmc_0_240;
reg [31:0] put_obmc_0_240_reg;
reg [31:0] put_obmc_0_241;
reg [31:0] put_obmc_0_241_reg;
reg [31:0] put_obmc_0_242;
reg [31:0] put_obmc_0_242_reg;
reg [31:0] put_obmc_0_243;
reg [31:0] put_obmc_0_243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_244_reg;
reg [31:0] put_obmc_0_245;
reg [31:0] put_obmc_0_245_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_246;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_246_reg;
reg [31:0] put_obmc_0_247;
reg [31:0] put_obmc_0_247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_248;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_248_reg;
reg [31:0] put_obmc_0_249;
reg [31:0] put_obmc_0_249_reg;
reg [31:0] put_obmc_0_250;
reg [31:0] put_obmc_0_250_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_251;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_251_reg;
reg [31:0] put_obmc_0_252;
reg [31:0] put_obmc_0_252_reg;
reg [31:0] put_obmc_0_253;
reg [31:0] put_obmc_0_253_reg;
reg [31:0] put_obmc_0_254;
reg [31:0] put_obmc_0_254_reg;
reg [31:0] put_obmc_0_255;
reg [31:0] put_obmc_0_255_reg;
reg [31:0] put_obmc_0_256;
reg [31:0] put_obmc_0_256_reg;
reg [31:0] put_obmc_0_257;
reg [31:0] put_obmc_0_257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_258_reg;
reg [31:0] put_obmc_0_259;
reg [31:0] put_obmc_0_259_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_260;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_260_reg;
reg [31:0] put_obmc_0_261;
reg [31:0] put_obmc_0_261_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_262_reg;
reg [31:0] put_obmc_0_263;
reg [31:0] put_obmc_0_263_reg;
reg [31:0] put_obmc_0_264;
reg [31:0] put_obmc_0_264_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_265;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_265_reg;
reg [31:0] put_obmc_0_266;
reg [31:0] put_obmc_0_266_reg;
reg [31:0] put_obmc_0_267;
reg [31:0] put_obmc_0_267_reg;
reg [31:0] put_obmc_0_268;
reg [31:0] put_obmc_0_268_reg;
reg [31:0] put_obmc_0_269;
reg [31:0] put_obmc_0_269_reg;
reg [31:0] put_obmc_0_270;
reg [31:0] put_obmc_0_270_reg;
reg [31:0] put_obmc_0_271;
reg [31:0] put_obmc_0_271_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_272;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_272_reg;
reg [31:0] put_obmc_0_273;
reg [31:0] put_obmc_0_273_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_274;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_274_reg;
reg [31:0] put_obmc_0_275;
reg [31:0] put_obmc_0_275_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_276_reg;
reg [31:0] put_obmc_0_277;
reg [31:0] put_obmc_0_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_278_reg;
reg [31:0] put_obmc_0_279;
reg [31:0] put_obmc_0_279_reg;
reg [31:0] put_obmc_0_280;
reg [31:0] put_obmc_0_280_reg;
reg [31:0] put_obmc_0_281;
reg [31:0] put_obmc_0_281_reg;
reg [31:0] put_obmc_0_282;
reg [31:0] put_obmc_0_282_reg;
reg [31:0] put_obmc_0_283;
reg [31:0] put_obmc_0_283_reg;
reg [31:0] put_obmc_0_284;
reg [31:0] put_obmc_0_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_285_reg;
reg [31:0] put_obmc_0_286;
reg [31:0] put_obmc_0_286_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_287_reg;
reg [31:0] put_obmc_0_288;
reg [31:0] put_obmc_0_288_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_289;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_289_reg;
reg [31:0] put_obmc_0_290;
reg [31:0] put_obmc_0_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_291_reg;
reg [31:0] put_obmc_0_292;
reg [31:0] put_obmc_0_292_reg;
reg [31:0] put_obmc_0_293;
reg [31:0] put_obmc_0_293_reg;
reg [31:0] put_obmc_0_294;
reg [31:0] put_obmc_0_294_reg;
reg [31:0] put_obmc_0_295;
reg [31:0] put_obmc_0_295_reg;
reg [31:0] put_obmc_0_296;
reg [31:0] put_obmc_0_296_reg;
reg [31:0] put_obmc_0_297;
reg [31:0] put_obmc_0_297_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_298;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_298_reg;
reg [31:0] put_obmc_0_299;
reg [31:0] put_obmc_0_299_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_300;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_300_reg;
reg [31:0] put_obmc_0_301;
reg [31:0] put_obmc_0_301_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_302;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_302_reg;
reg [31:0] put_obmc_0_303;
reg [31:0] put_obmc_0_303_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_304;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_304_reg;
reg [31:0] put_obmc_0_305;
reg [31:0] put_obmc_0_305_reg;
reg [31:0] put_obmc_0_306;
reg [31:0] put_obmc_0_306_reg;
reg [31:0] put_obmc_0_307;
reg [31:0] put_obmc_0_307_reg;
reg [31:0] put_obmc_0_308;
reg [31:0] put_obmc_0_308_reg;
reg [31:0] put_obmc_0_309;
reg [31:0] put_obmc_0_309_reg;
reg [31:0] put_obmc_0_310;
reg [31:0] put_obmc_0_310_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_311_reg;
reg [31:0] put_obmc_0_312;
reg [31:0] put_obmc_0_312_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_313_reg;
reg [31:0] put_obmc_0_314;
reg [31:0] put_obmc_0_314_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_315;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_315_reg;
reg [31:0] put_obmc_0_316;
reg [31:0] put_obmc_0_316_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_317_reg;
reg [31:0] put_obmc_0_318;
reg [31:0] put_obmc_0_318_reg;
reg [31:0] put_obmc_0_319;
reg [31:0] put_obmc_0_319_reg;
reg [31:0] put_obmc_0_320;
reg [31:0] put_obmc_0_320_reg;
reg [31:0] put_obmc_0_321;
reg [31:0] put_obmc_0_321_reg;
reg [31:0] put_obmc_0_322;
reg [31:0] put_obmc_0_322_reg;
reg [31:0] put_obmc_0_323;
reg [31:0] put_obmc_0_323_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_324_reg;
reg [31:0] put_obmc_0_325;
reg [31:0] put_obmc_0_325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_326_reg;
reg [31:0] put_obmc_0_327;
reg [31:0] put_obmc_0_327_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_328;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_328_reg;
reg [31:0] put_obmc_0_329;
reg [31:0] put_obmc_0_329_reg;
reg [31:0] put_obmc_0_330;
reg [31:0] put_obmc_0_330_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_331_reg;
reg [31:0] put_obmc_0_332;
reg [31:0] put_obmc_0_332_reg;
reg [31:0] put_obmc_0_333;
reg [31:0] put_obmc_0_333_reg;
reg [31:0] put_obmc_0_334;
reg [31:0] put_obmc_0_334_reg;
reg [31:0] put_obmc_0_335;
reg [31:0] put_obmc_0_335_reg;
reg [31:0] put_obmc_0_336;
reg [31:0] put_obmc_0_336_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_337;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_337_reg;
reg [31:0] put_obmc_0_338;
reg [31:0] put_obmc_0_338_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_339_reg;
reg [31:0] put_obmc_0_340;
reg [31:0] put_obmc_0_340_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_341_reg;
reg [31:0] put_obmc_0_342;
reg [31:0] put_obmc_0_342_reg;
reg [31:0] put_obmc_0_343;
reg [31:0] put_obmc_0_343_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_344;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_344_reg;
reg [31:0] put_obmc_0_345;
reg [31:0] put_obmc_0_345_reg;
reg [31:0] put_obmc_0_346;
reg [31:0] put_obmc_0_346_reg;
reg [31:0] put_obmc_0_347;
reg [31:0] put_obmc_0_347_reg;
reg [31:0] put_obmc_0_348;
reg [31:0] put_obmc_0_348_reg;
reg [31:0] put_obmc_0_349;
reg [31:0] put_obmc_0_349_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_350;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_350_reg;
reg [31:0] put_obmc_0_351;
reg [31:0] put_obmc_0_351_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_352;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_352_reg;
reg [31:0] put_obmc_0_353;
reg [31:0] put_obmc_0_353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_354;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_354_reg;
reg [31:0] put_obmc_0_355;
reg [31:0] put_obmc_0_355_reg;
reg [31:0] put_obmc_0_356;
reg [31:0] put_obmc_0_356_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_357;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_357_reg;
reg [31:0] put_obmc_0_358;
reg [31:0] put_obmc_0_358_reg;
reg [31:0] put_obmc_0_359;
reg [31:0] put_obmc_0_359_reg;
reg [31:0] put_obmc_0_360;
reg [31:0] put_obmc_0_360_reg;
reg [31:0] put_obmc_0_361;
reg [31:0] put_obmc_0_361_reg;
reg [31:0] put_obmc_0_362;
reg [31:0] put_obmc_0_362_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_363;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_363_reg;
reg [31:0] put_obmc_0_364;
reg [31:0] put_obmc_0_364_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_365;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_365_reg;
reg [31:0] put_obmc_0_366;
reg [31:0] put_obmc_0_366_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_367_reg;
reg [31:0] put_obmc_0_368;
reg [31:0] put_obmc_0_368_reg;
reg [31:0] put_obmc_0_369;
reg [31:0] put_obmc_0_369_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_370;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_370_reg;
reg [31:0] put_obmc_0_371;
reg [31:0] put_obmc_0_371_reg;
reg [31:0] put_obmc_0_372;
reg [31:0] put_obmc_0_372_reg;
reg [31:0] put_obmc_0_373;
reg [31:0] put_obmc_0_373_reg;
reg [31:0] put_obmc_0_374;
reg [31:0] put_obmc_0_374_reg;
reg [31:0] put_obmc_0_375;
reg [31:0] put_obmc_0_375_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_376;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_376_reg;
reg [31:0] put_obmc_0_377;
reg [31:0] put_obmc_0_377_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_378;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_378_reg;
reg [31:0] put_obmc_0_379;
reg [31:0] put_obmc_0_379_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_380;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_380_reg;
reg [31:0] put_obmc_0_381;
reg [31:0] put_obmc_0_381_reg;
reg [31:0] put_obmc_0_382;
reg [31:0] put_obmc_0_382_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_383;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_383_reg;
reg [31:0] put_obmc_0_384;
reg [31:0] put_obmc_0_384_reg;
reg [31:0] put_obmc_0_385;
reg [31:0] put_obmc_0_385_reg;
reg [31:0] put_obmc_0_386;
reg [31:0] put_obmc_0_386_reg;
reg [31:0] put_obmc_0_387;
reg [31:0] put_obmc_0_387_reg;
reg [31:0] put_obmc_0_388;
reg [31:0] put_obmc_0_388_reg;
reg [31:0] put_obmc_0_389;
reg [31:0] put_obmc_0_389_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_390;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_390_reg;
reg [31:0] put_obmc_0_391;
reg [31:0] put_obmc_0_391_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_392;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_392_reg;
reg [31:0] put_obmc_0_393;
reg [31:0] put_obmc_0_393_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_394;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_394_reg;
reg [31:0] put_obmc_0_395;
reg [31:0] put_obmc_0_395_reg;
reg [31:0] put_obmc_0_396;
reg [31:0] put_obmc_0_396_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_397;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_397_reg;
reg [31:0] put_obmc_0_398;
reg [31:0] put_obmc_0_398_reg;
reg [31:0] put_obmc_0_399;
reg [31:0] put_obmc_0_399_reg;
reg [31:0] put_obmc_0_400;
reg [31:0] put_obmc_0_400_reg;
reg [31:0] put_obmc_0_401;
reg [31:0] put_obmc_0_401_reg;
reg [31:0] put_obmc_0_402;
reg [31:0] put_obmc_0_402_reg;
reg [31:0] put_obmc_0_403;
reg [31:0] put_obmc_0_403_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_404;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_404_reg;
reg [31:0] put_obmc_0_405;
reg [31:0] put_obmc_0_405_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_406;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_406_reg;
reg [31:0] put_obmc_0_407;
reg [31:0] put_obmc_0_407_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_408;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_408_reg;
reg [31:0] put_obmc_0_409;
reg [31:0] put_obmc_0_409_reg;
reg [31:0] put_obmc_0_410;
reg [31:0] put_obmc_0_410_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_411;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_411_reg;
reg [31:0] put_obmc_0_412;
reg [31:0] put_obmc_0_412_reg;
reg [31:0] put_obmc_0_413;
reg [31:0] put_obmc_0_413_reg;
reg [31:0] put_obmc_0_414;
reg [31:0] put_obmc_0_414_reg;
reg [31:0] put_obmc_0_415;
reg [31:0] put_obmc_0_415_reg;
reg [31:0] put_obmc_0_416;
reg [31:0] put_obmc_0_416_reg;
reg [31:0] put_obmc_0_417;
reg [31:0] put_obmc_0_417_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_418;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_418_reg;
reg [31:0] put_obmc_0_419;
reg [31:0] put_obmc_0_419_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_420;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_420_reg;
reg [31:0] put_obmc_0_421;
reg [31:0] put_obmc_0_421_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_422;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_422_reg;
reg [31:0] put_obmc_0_423;
reg [31:0] put_obmc_0_423_reg;
reg [31:0] put_obmc_0_424;
reg [31:0] put_obmc_0_424_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_425;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_425_reg;
reg [31:0] put_obmc_0_426;
reg [31:0] put_obmc_0_426_reg;
reg [31:0] put_obmc_0_427;
reg [31:0] put_obmc_0_427_reg;
reg [31:0] put_obmc_0_428;
reg [31:0] put_obmc_0_428_reg;
reg [31:0] put_obmc_0_429;
reg [31:0] put_obmc_0_429_reg;
reg [31:0] put_obmc_0_430;
reg [31:0] put_obmc_0_430_reg;
reg [31:0] put_obmc_0_431;
reg [31:0] put_obmc_0_431_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_432;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_432_reg;
reg [31:0] put_obmc_0_433;
reg [31:0] put_obmc_0_433_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_434;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_434_reg;
reg [31:0] put_obmc_0_435;
reg [31:0] put_obmc_0_435_reg;
reg [31:0] put_obmc_0_436;
reg [31:0] put_obmc_0_436_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_437;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_437_reg;
reg [31:0] put_obmc_0_438;
reg [31:0] put_obmc_0_438_reg;
reg [31:0] put_obmc_0_439;
reg [31:0] put_obmc_0_439_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_440;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_440_reg;
reg [31:0] put_obmc_0_441;
reg [31:0] put_obmc_0_441_reg;
reg [31:0] put_obmc_0_442;
reg [31:0] put_obmc_0_442_reg;
reg [31:0] put_obmc_0_443;
reg [31:0] put_obmc_0_443_reg;
reg [31:0] put_obmc_0_444;
reg [31:0] put_obmc_0_444_reg;
reg [31:0] put_obmc_0_445;
reg [31:0] put_obmc_0_445_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_446;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_446_reg;
reg [31:0] put_obmc_0_447;
reg [31:0] put_obmc_0_447_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_448;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_448_reg;
reg [31:0] put_obmc_0_449;
reg [31:0] put_obmc_0_449_reg;
reg [31:0] put_obmc_0_450;
reg [31:0] put_obmc_0_450_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_451;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_451_reg;
reg [31:0] put_obmc_0_452;
reg [31:0] put_obmc_0_452_reg;
reg [31:0] put_obmc_0_453;
reg [31:0] put_obmc_0_453_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_454;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_454_reg;
reg [31:0] put_obmc_0_455;
reg [31:0] put_obmc_0_455_reg;
reg [31:0] put_obmc_0_456;
reg [31:0] put_obmc_0_456_reg;
reg [31:0] put_obmc_0_457;
reg [31:0] put_obmc_0_457_reg;
reg [31:0] put_obmc_0_458;
reg [31:0] put_obmc_0_458_reg;
reg [31:0] put_obmc_0_459;
reg [31:0] put_obmc_0_459_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_460;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_460_reg;
reg [31:0] put_obmc_0_461;
reg [31:0] put_obmc_0_461_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_462;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_462_reg;
reg [31:0] put_obmc_0_463;
reg [31:0] put_obmc_0_463_reg;
reg [31:0] put_obmc_0_464;
reg [31:0] put_obmc_0_464_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_465;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_465_reg;
reg [31:0] put_obmc_0_466;
reg [31:0] put_obmc_0_466_reg;
reg [31:0] put_obmc_0_467;
reg [31:0] put_obmc_0_467_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_468;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_468_reg;
reg [31:0] put_obmc_0_469;
reg [31:0] put_obmc_0_469_reg;
reg [31:0] put_obmc_0_470;
reg [31:0] put_obmc_0_470_reg;
reg [31:0] put_obmc_0_471;
reg [31:0] put_obmc_0_471_reg;
reg [31:0] put_obmc_0_472;
reg [31:0] put_obmc_0_472_reg;
reg [31:0] put_obmc_0_473;
reg [31:0] put_obmc_0_473_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_474;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_474_reg;
reg [31:0] put_obmc_0_475;
reg [31:0] put_obmc_0_475_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_476;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_476_reg;
reg [31:0] put_obmc_0_477;
reg [31:0] put_obmc_0_477_reg;
reg [31:0] put_obmc_0_478;
reg [31:0] put_obmc_0_478_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_479;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_479_reg;
reg [31:0] put_obmc_0_480;
reg [31:0] put_obmc_0_480_reg;
reg [31:0] put_obmc_0_481;
reg [31:0] put_obmc_0_481_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_482;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_482_reg;
reg [31:0] put_obmc_0_483;
reg [31:0] put_obmc_0_483_reg;
reg [31:0] put_obmc_0_484;
reg [31:0] put_obmc_0_484_reg;
reg [31:0] put_obmc_0_485;
reg [31:0] put_obmc_0_485_reg;
reg [31:0] put_obmc_0_486;
reg [31:0] put_obmc_0_486_reg;
reg [31:0] put_obmc_0_487;
reg [31:0] put_obmc_0_487_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_488;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_488_reg;
reg [31:0] put_obmc_0_489;
reg [31:0] put_obmc_0_489_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_490;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_490_reg;
reg [31:0] put_obmc_0_491;
reg [31:0] put_obmc_0_491_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_492;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_492_reg;
reg [31:0] put_obmc_0_493;
reg [31:0] put_obmc_0_493_reg;
reg [31:0] put_obmc_0_494;
reg [31:0] put_obmc_0_494_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_495;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_495_reg;
reg [31:0] put_obmc_0_496;
reg [31:0] put_obmc_0_496_reg;
reg [31:0] put_obmc_0_497;
reg [31:0] put_obmc_0_497_reg;
reg [31:0] put_obmc_0_498;
reg [31:0] put_obmc_0_498_reg;
reg [31:0] put_obmc_0_499;
reg [31:0] put_obmc_0_499_reg;
reg [31:0] put_obmc_0_500;
reg [31:0] put_obmc_0_500_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_501;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_501_reg;
reg [31:0] put_obmc_0_502;
reg [31:0] put_obmc_0_502_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_503;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_503_reg;
reg [31:0] put_obmc_0_504;
reg [31:0] put_obmc_0_504_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_505;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_505_reg;
reg [31:0] put_obmc_0_506;
reg [31:0] put_obmc_0_506_reg;
reg [31:0] put_obmc_0_507;
reg [31:0] put_obmc_0_507_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_508;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_508_reg;
reg [31:0] put_obmc_0_509;
reg [31:0] put_obmc_0_509_reg;
reg [31:0] put_obmc_0_510;
reg [31:0] put_obmc_0_510_reg;
reg [31:0] put_obmc_0_511;
reg [31:0] put_obmc_0_511_reg;
reg [31:0] put_obmc_0_512;
reg [31:0] put_obmc_0_512_reg;
reg [31:0] put_obmc_0_513;
reg [31:0] put_obmc_0_513_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_514;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_514_reg;
reg [31:0] put_obmc_0_515;
reg [31:0] put_obmc_0_515_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_516;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_516_reg;
reg [31:0] put_obmc_0_517;
reg [31:0] put_obmc_0_517_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_518;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_518_reg;
reg [31:0] put_obmc_0_519;
reg [31:0] put_obmc_0_519_reg;
reg [31:0] put_obmc_0_520;
reg [31:0] put_obmc_0_520_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_521;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_521_reg;
reg [31:0] put_obmc_0_522;
reg [31:0] put_obmc_0_522_reg;
reg [31:0] put_obmc_0_523;
reg [31:0] put_obmc_0_523_reg;
reg [31:0] put_obmc_0_524;
reg [31:0] put_obmc_0_524_reg;
reg [31:0] put_obmc_0_525;
reg [31:0] put_obmc_0_525_reg;
reg [31:0] put_obmc_0_526;
reg [31:0] put_obmc_0_526_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_527;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_527_reg;
reg [31:0] put_obmc_0_528;
reg [31:0] put_obmc_0_528_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_529;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_529_reg;
reg [31:0] put_obmc_0_530;
reg [31:0] put_obmc_0_530_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_531;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_531_reg;
reg [31:0] put_obmc_0_532;
reg [31:0] put_obmc_0_532_reg;
reg [31:0] put_obmc_0_533;
reg [31:0] put_obmc_0_533_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_534;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_534_reg;
reg [31:0] put_obmc_0_535;
reg [31:0] put_obmc_0_535_reg;
reg [31:0] put_obmc_0_536;
reg [31:0] put_obmc_0_536_reg;
reg [31:0] put_obmc_0_537;
reg [31:0] put_obmc_0_537_reg;
reg [31:0] put_obmc_0_538;
reg [31:0] put_obmc_0_538_reg;
reg [31:0] put_obmc_0_539;
reg [31:0] put_obmc_0_539_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_540;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_540_reg;
reg [31:0] put_obmc_0_541;
reg [31:0] put_obmc_0_541_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_542;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_542_reg;
reg [31:0] put_obmc_0_543;
reg [31:0] put_obmc_0_543_reg;
reg [31:0] put_obmc_0_544;
reg [31:0] put_obmc_0_544_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_545;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_545_reg;
reg [31:0] put_obmc_0_546;
reg [31:0] put_obmc_0_546_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_547;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_547_reg;
reg [31:0] put_obmc_0_548;
reg [31:0] put_obmc_0_548_reg;
reg [31:0] put_obmc_0_549;
reg [31:0] put_obmc_0_549_reg;
reg [31:0] put_obmc_0_550;
reg [31:0] put_obmc_0_550_reg;
reg [31:0] put_obmc_0_551;
reg [31:0] put_obmc_0_551_reg;
reg [31:0] put_obmc_0_552;
reg [31:0] put_obmc_0_552_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_553;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_553_reg;
reg [31:0] put_obmc_0_554;
reg [31:0] put_obmc_0_554_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_555;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_555_reg;
reg [31:0] put_obmc_0_556;
reg [31:0] put_obmc_0_556_reg;
reg [31:0] put_obmc_0_557;
reg [31:0] put_obmc_0_557_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_558;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_558_reg;
reg [31:0] put_obmc_0_559;
reg [31:0] put_obmc_0_559_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_560;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_560_reg;
reg [31:0] put_obmc_0_561;
reg [31:0] put_obmc_0_561_reg;
reg [31:0] put_obmc_0_562;
reg [31:0] put_obmc_0_562_reg;
reg [31:0] put_obmc_0_563;
reg [31:0] put_obmc_0_563_reg;
reg [31:0] put_obmc_0_564;
reg [31:0] put_obmc_0_564_reg;
reg [31:0] put_obmc_0_565;
reg [31:0] put_obmc_0_565_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_566;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_566_reg;
reg [31:0] put_obmc_0_567;
reg [31:0] put_obmc_0_567_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_568;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_568_reg;
reg [31:0] put_obmc_0_569;
reg [31:0] put_obmc_0_569_reg;
reg [31:0] put_obmc_0_570;
reg [31:0] put_obmc_0_570_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_571;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_571_reg;
reg [31:0] put_obmc_0_572;
reg [31:0] put_obmc_0_572_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_573;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_573_reg;
reg [31:0] put_obmc_0_574;
reg [31:0] put_obmc_0_574_reg;
reg [31:0] put_obmc_0_575;
reg [31:0] put_obmc_0_575_reg;
reg [31:0] put_obmc_0_576;
reg [31:0] put_obmc_0_576_reg;
reg [31:0] put_obmc_0_577;
reg [31:0] put_obmc_0_577_reg;
reg [31:0] put_obmc_0_578;
reg [31:0] put_obmc_0_578_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_579;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_579_reg;
reg [31:0] put_obmc_0_580;
reg [31:0] put_obmc_0_580_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_581;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_581_reg;
reg [31:0] put_obmc_0_582;
reg [31:0] put_obmc_0_582_reg;
reg [31:0] put_obmc_0_583;
reg [31:0] put_obmc_0_583_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_584;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_584_reg;
reg [31:0] put_obmc_0_585;
reg [31:0] put_obmc_0_585_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_586;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_586_reg;
reg [31:0] put_obmc_0_587;
reg [31:0] put_obmc_0_587_reg;
reg [31:0] put_obmc_0_588;
reg [31:0] put_obmc_0_588_reg;
reg [31:0] put_obmc_0_589;
reg [31:0] put_obmc_0_589_reg;
reg [31:0] put_obmc_0_590;
reg [31:0] put_obmc_0_590_reg;
reg [31:0] put_obmc_0_591;
reg [31:0] put_obmc_0_591_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_592;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_592_reg;
reg [31:0] put_obmc_0_593;
reg [31:0] put_obmc_0_593_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_594;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_594_reg;
reg [31:0] put_obmc_0_595;
reg [31:0] put_obmc_0_595_reg;
reg [31:0] put_obmc_0_596;
reg [31:0] put_obmc_0_596_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_597;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_597_reg;
reg [31:0] put_obmc_0_598;
reg [31:0] put_obmc_0_598_reg;
reg [31:0] put_obmc_0_599;
reg [31:0] put_obmc_0_599_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_600;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_600_reg;
reg [31:0] put_obmc_0_601;
reg [31:0] put_obmc_0_601_reg;
reg [31:0] put_obmc_0_602;
reg [31:0] put_obmc_0_602_reg;
reg [31:0] put_obmc_0_603;
reg [31:0] put_obmc_0_603_reg;
reg [31:0] put_obmc_0_604;
reg [31:0] put_obmc_0_604_reg;
reg [31:0] put_obmc_0_605;
reg [31:0] put_obmc_0_605_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_606;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_606_reg;
reg [31:0] put_obmc_0_607;
reg [31:0] put_obmc_0_607_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_608;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_608_reg;
reg [31:0] put_obmc_0_609;
reg [31:0] put_obmc_0_609_reg;
reg [31:0] put_obmc_0_610;
reg [31:0] put_obmc_0_610_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_611;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_611_reg;
reg [31:0] put_obmc_0_612;
reg [31:0] put_obmc_0_612_reg;
reg [31:0] put_obmc_0_613;
reg [31:0] put_obmc_0_613_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_614;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_614_reg;
reg [31:0] put_obmc_0_615;
reg [31:0] put_obmc_0_615_reg;
reg [31:0] put_obmc_0_616;
reg [31:0] put_obmc_0_616_reg;
reg [31:0] put_obmc_0_617;
reg [31:0] put_obmc_0_617_reg;
reg [31:0] put_obmc_0_618;
reg [31:0] put_obmc_0_618_reg;
reg [31:0] put_obmc_0_619;
reg [31:0] put_obmc_0_619_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_620;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_620_reg;
reg [31:0] put_obmc_0_621;
reg [31:0] put_obmc_0_621_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_622;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_622_reg;
reg [31:0] put_obmc_0_623;
reg [31:0] put_obmc_0_623_reg;
reg [31:0] put_obmc_0_624;
reg [31:0] put_obmc_0_624_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_625;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_625_reg;
reg [31:0] put_obmc_0_626;
reg [31:0] put_obmc_0_626_reg;
reg [31:0] put_obmc_0_627;
reg [31:0] put_obmc_0_627_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_628;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_628_reg;
reg [31:0] put_obmc_0_629;
reg [31:0] put_obmc_0_629_reg;
reg [31:0] put_obmc_0_630;
reg [31:0] put_obmc_0_630_reg;
reg [31:0] put_obmc_0_631;
reg [31:0] put_obmc_0_631_reg;
reg [31:0] put_obmc_0_632;
reg [31:0] put_obmc_0_632_reg;
reg [31:0] put_obmc_0_633;
reg [31:0] put_obmc_0_633_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_634;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_634_reg;
reg [31:0] put_obmc_0_635;
reg [31:0] put_obmc_0_635_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_636;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_636_reg;
reg [31:0] put_obmc_0_637;
reg [31:0] put_obmc_0_637_reg;
reg [31:0] put_obmc_0_638;
reg [31:0] put_obmc_0_638_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_639;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_639_reg;
reg [31:0] put_obmc_0_640;
reg [31:0] put_obmc_0_640_reg;
reg [31:0] put_obmc_0_641;
reg [31:0] put_obmc_0_641_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_642;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_642_reg;
reg [31:0] put_obmc_0_643;
reg [31:0] put_obmc_0_643_reg;
reg [31:0] put_obmc_0_644;
reg [31:0] put_obmc_0_644_reg;
reg [31:0] put_obmc_0_645;
reg [31:0] put_obmc_0_645_reg;
reg [31:0] put_obmc_0_646;
reg [31:0] put_obmc_0_646_reg;
reg [31:0] put_obmc_0_647;
reg [31:0] put_obmc_0_647_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_648;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_648_reg;
reg [31:0] put_obmc_0_649;
reg [31:0] put_obmc_0_649_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_650;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_650_reg;
reg [31:0] put_obmc_0_651;
reg [31:0] put_obmc_0_651_reg;
reg [31:0] put_obmc_0_652;
reg [31:0] put_obmc_0_652_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_653;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_653_reg;
reg [31:0] put_obmc_0_654;
reg [31:0] put_obmc_0_654_reg;
reg [31:0] put_obmc_0_655;
reg [31:0] put_obmc_0_655_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_656;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_656_reg;
reg [31:0] put_obmc_0_657;
reg [31:0] put_obmc_0_657_reg;
reg [31:0] put_obmc_0_658;
reg [31:0] put_obmc_0_658_reg;
reg [31:0] put_obmc_0_659;
reg [31:0] put_obmc_0_659_reg;
reg [31:0] put_obmc_0_660;
reg [31:0] put_obmc_0_660_reg;
reg [31:0] put_obmc_0_661;
reg [31:0] put_obmc_0_661_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_662;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_662_reg;
reg [31:0] put_obmc_0_663;
reg [31:0] put_obmc_0_663_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_664;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_664_reg;
reg [31:0] put_obmc_0_665;
reg [31:0] put_obmc_0_665_reg;
reg [31:0] put_obmc_0_666;
reg [31:0] put_obmc_0_666_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_667;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_667_reg;
reg [31:0] put_obmc_0_668;
reg [31:0] put_obmc_0_668_reg;
reg [31:0] put_obmc_0_669;
reg [31:0] put_obmc_0_669_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_670;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_670_reg;
reg [31:0] put_obmc_0_671;
reg [31:0] put_obmc_0_671_reg;
reg [31:0] put_obmc_0_672;
reg [31:0] put_obmc_0_672_reg;
reg [31:0] put_obmc_0_673;
reg [31:0] put_obmc_0_673_reg;
reg [31:0] put_obmc_0_674;
reg [31:0] put_obmc_0_674_reg;
reg [31:0] put_obmc_0_675;
reg [31:0] put_obmc_0_675_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_676;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_676_reg;
reg [31:0] put_obmc_0_677;
reg [31:0] put_obmc_0_677_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_678;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_678_reg;
reg [31:0] put_obmc_0_679;
reg [31:0] put_obmc_0_679_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_680;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_680_reg;
reg [31:0] put_obmc_0_681;
reg [31:0] put_obmc_0_681_reg;
reg [31:0] put_obmc_0_682;
reg [31:0] put_obmc_0_682_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_683;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_683_reg;
reg [31:0] put_obmc_0_684;
reg [31:0] put_obmc_0_684_reg;
reg [31:0] put_obmc_0_685;
reg [31:0] put_obmc_0_685_reg;
reg [31:0] put_obmc_0_686;
reg [31:0] put_obmc_0_686_reg;
reg [31:0] put_obmc_0_687;
reg [31:0] put_obmc_0_687_reg;
reg [31:0] put_obmc_0_688;
reg [31:0] put_obmc_0_688_reg;
reg [31:0] put_obmc_0_689;
reg [31:0] put_obmc_0_689_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_690;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_690_reg;
reg [31:0] put_obmc_0_691;
reg [31:0] put_obmc_0_691_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_692;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_692_reg;
reg [31:0] put_obmc_0_693;
reg [31:0] put_obmc_0_693_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_694;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_694_reg;
reg [31:0] put_obmc_0_695;
reg [31:0] put_obmc_0_695_reg;
reg [31:0] put_obmc_0_696;
reg [31:0] put_obmc_0_696_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_697;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_697_reg;
reg [31:0] put_obmc_0_698;
reg [31:0] put_obmc_0_698_reg;
reg [31:0] put_obmc_0_699;
reg [31:0] put_obmc_0_699_reg;
reg [31:0] put_obmc_0_700;
reg [31:0] put_obmc_0_700_reg;
reg [31:0] put_obmc_0_701;
reg [31:0] put_obmc_0_701_reg;
reg [31:0] put_obmc_0_702;
reg [31:0] put_obmc_0_702_reg;
reg [31:0] put_obmc_0_703;
reg [31:0] put_obmc_0_703_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_704;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_704_reg;
reg [31:0] put_obmc_0_705;
reg [31:0] put_obmc_0_705_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_706;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_706_reg;
reg [31:0] put_obmc_0_707;
reg [31:0] put_obmc_0_707_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_708;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_708_reg;
reg [31:0] put_obmc_0_709;
reg [31:0] put_obmc_0_709_reg;
reg [31:0] put_obmc_0_710;
reg [31:0] put_obmc_0_710_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_711;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_711_reg;
reg [31:0] put_obmc_0_712;
reg [31:0] put_obmc_0_712_reg;
reg [31:0] put_obmc_0_713;
reg [31:0] put_obmc_0_713_reg;
reg [31:0] put_obmc_0_714;
reg [31:0] put_obmc_0_714_reg;
reg [31:0] put_obmc_0_715;
reg [31:0] put_obmc_0_715_reg;
reg [31:0] put_obmc_0_716;
reg [31:0] put_obmc_0_716_reg;
reg [31:0] put_obmc_0_717;
reg [31:0] put_obmc_0_717_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_718;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_718_reg;
reg [31:0] put_obmc_0_719;
reg [31:0] put_obmc_0_719_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_720;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_720_reg;
reg [31:0] put_obmc_0_721;
reg [31:0] put_obmc_0_721_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_722;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_722_reg;
reg [31:0] put_obmc_0_723;
reg [31:0] put_obmc_0_723_reg;
reg [31:0] put_obmc_0_724;
reg [31:0] put_obmc_0_724_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_725;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_725_reg;
reg [31:0] put_obmc_0_726;
reg [31:0] put_obmc_0_726_reg;
reg [31:0] put_obmc_0_727;
reg [31:0] put_obmc_0_727_reg;
reg [31:0] put_obmc_0_728;
reg [31:0] put_obmc_0_728_reg;
reg [31:0] put_obmc_0_729;
reg [31:0] put_obmc_0_729_reg;
reg [31:0] put_obmc_0_730;
reg [31:0] put_obmc_0_730_reg;
reg [31:0] put_obmc_0_731;
reg [31:0] put_obmc_0_731_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_732;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_732_reg;
reg [31:0] put_obmc_0_733;
reg [31:0] put_obmc_0_733_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_734;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_734_reg;
reg [31:0] put_obmc_0_735;
reg [31:0] put_obmc_0_735_reg;
reg [31:0] put_obmc_0_736;
reg [31:0] put_obmc_0_736_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_737;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_737_reg;
reg [31:0] put_obmc_0_738;
reg [31:0] put_obmc_0_738_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_739;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_739_reg;
reg [31:0] put_obmc_0_740;
reg [31:0] put_obmc_0_740_reg;
reg [31:0] put_obmc_0_741;
reg [31:0] put_obmc_0_741_reg;
reg [31:0] put_obmc_0_742;
reg [31:0] put_obmc_0_742_reg;
reg [31:0] put_obmc_0_743;
reg [31:0] put_obmc_0_743_reg;
reg [31:0] put_obmc_0_744;
reg [31:0] put_obmc_0_744_reg;
reg [31:0] put_obmc_0_745;
reg [31:0] put_obmc_0_745_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_746;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_746_reg;
reg [31:0] put_obmc_0_747;
reg [31:0] put_obmc_0_747_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_748;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_748_reg;
reg [31:0] put_obmc_0_749;
reg [31:0] put_obmc_0_749_reg;
reg [31:0] put_obmc_0_750;
reg [31:0] put_obmc_0_750_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_751;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_751_reg;
reg [31:0] put_obmc_0_752;
reg [31:0] put_obmc_0_752_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_753;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_753_reg;
reg [31:0] put_obmc_0_754;
reg [31:0] put_obmc_0_754_reg;
reg [31:0] put_obmc_0_755;
reg [31:0] put_obmc_0_755_reg;
reg [31:0] put_obmc_0_756;
reg [31:0] put_obmc_0_756_reg;
reg [31:0] put_obmc_0_757;
reg [31:0] put_obmc_0_757_reg;
reg [31:0] put_obmc_0_758;
reg [31:0] put_obmc_0_758_reg;
reg [31:0] put_obmc_0_759;
reg [31:0] put_obmc_0_759_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_760;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_760_reg;
reg [31:0] put_obmc_0_761;
reg [31:0] put_obmc_0_761_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_762;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_762_reg;
reg [31:0] put_obmc_0_763;
reg [31:0] put_obmc_0_763_reg;
reg [31:0] put_obmc_0_764;
reg [31:0] put_obmc_0_764_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_765;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_765_reg;
reg [31:0] put_obmc_0_766;
reg [31:0] put_obmc_0_766_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_767;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_767_reg;
reg [31:0] put_obmc_0_768;
reg [31:0] put_obmc_0_768_reg;
reg [31:0] put_obmc_0_769;
reg [31:0] put_obmc_0_769_reg;
reg [31:0] put_obmc_0_770;
reg [31:0] put_obmc_0_770_reg;
reg [31:0] put_obmc_0_771;
reg [31:0] put_obmc_0_771_reg;
reg [31:0] put_obmc_0_772;
reg [31:0] put_obmc_0_772_reg;
reg [31:0] put_obmc_0_773;
reg [31:0] put_obmc_0_773_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_774;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_774_reg;
reg [31:0] put_obmc_0_775;
reg [31:0] put_obmc_0_775_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_776;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_776_reg;
reg [31:0] put_obmc_0_777;
reg [31:0] put_obmc_0_777_reg;
reg [31:0] put_obmc_0_778;
reg [31:0] put_obmc_0_778_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_779;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_779_reg;
reg [31:0] put_obmc_0_780;
reg [31:0] put_obmc_0_780_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_781;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_781_reg;
reg [31:0] put_obmc_0_782;
reg [31:0] put_obmc_0_782_reg;
reg [31:0] put_obmc_0_783;
reg [31:0] put_obmc_0_783_reg;
reg [31:0] put_obmc_0_784;
reg [31:0] put_obmc_0_784_reg;
reg [31:0] put_obmc_0_785;
reg [31:0] put_obmc_0_785_reg;
reg [31:0] put_obmc_0_786;
reg [31:0] put_obmc_0_786_reg;
reg [31:0] put_obmc_0_787;
reg [31:0] put_obmc_0_787_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_788;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_788_reg;
reg [31:0] put_obmc_0_789;
reg [31:0] put_obmc_0_789_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_790;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_790_reg;
reg [31:0] put_obmc_0_791;
reg [31:0] put_obmc_0_791_reg;
reg [31:0] put_obmc_0_792;
reg [31:0] put_obmc_0_792_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_793;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_793_reg;
reg [31:0] put_obmc_0_794;
reg [31:0] put_obmc_0_794_reg;
reg [31:0] put_obmc_0_795;
reg [31:0] put_obmc_0_795_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_796;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_796_reg;
reg [31:0] put_obmc_0_797;
reg [31:0] put_obmc_0_797_reg;
reg [31:0] put_obmc_0_798;
reg [31:0] put_obmc_0_798_reg;
reg [31:0] put_obmc_0_799;
reg [31:0] put_obmc_0_799_reg;
reg [31:0] put_obmc_0_800;
reg [31:0] put_obmc_0_800_reg;
reg [31:0] put_obmc_0_801;
reg [31:0] put_obmc_0_801_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_802;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_802_reg;
reg [31:0] put_obmc_0_803;
reg [31:0] put_obmc_0_803_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_804;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_804_reg;
reg [31:0] put_obmc_0_805;
reg [31:0] put_obmc_0_805_reg;
reg [31:0] put_obmc_0_806;
reg [31:0] put_obmc_0_806_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_807;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_807_reg;
reg [31:0] put_obmc_0_808;
reg [31:0] put_obmc_0_808_reg;
reg [31:0] put_obmc_0_809;
reg [31:0] put_obmc_0_809_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_810;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_810_reg;
reg [31:0] put_obmc_0_811;
reg [31:0] put_obmc_0_811_reg;
reg [31:0] put_obmc_0_812;
reg [31:0] put_obmc_0_812_reg;
reg [31:0] put_obmc_0_813;
reg [31:0] put_obmc_0_813_reg;
reg [31:0] put_obmc_0_814;
reg [31:0] put_obmc_0_814_reg;
reg [31:0] put_obmc_0_815;
reg [31:0] put_obmc_0_815_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_816;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_816_reg;
reg [31:0] put_obmc_0_817;
reg [31:0] put_obmc_0_817_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_818;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_818_reg;
reg [31:0] put_obmc_0_819;
reg [31:0] put_obmc_0_819_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_820;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_820_reg;
reg [31:0] put_obmc_0_821;
reg [31:0] put_obmc_0_821_reg;
reg [31:0] put_obmc_0_822;
reg [31:0] put_obmc_0_822_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_823;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_823_reg;
reg [31:0] put_obmc_0_824;
reg [31:0] put_obmc_0_824_reg;
reg [31:0] put_obmc_0_tmp4;
reg [31:0] put_obmc_0_tmp4_reg;
reg [31:0] put_obmc_0_tmp5;
reg [31:0] put_obmc_0_tmp5_reg;
reg [31:0] put_obmc_0_825;
reg [31:0] put_obmc_0_825_reg;
reg [31:0] put_obmc_0_826;
reg [31:0] put_obmc_0_826_reg;
reg [31:0] put_obmc_0_827;
reg [31:0] put_obmc_0_827_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_828;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_828_reg;
reg [31:0] put_obmc_0_829;
reg [31:0] put_obmc_0_829_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_830;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_830_reg;
reg [31:0] put_obmc_0_831;
reg [31:0] put_obmc_0_831_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_832;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_832_reg;
reg [31:0] put_obmc_0_833;
reg [31:0] put_obmc_0_833_reg;
reg [31:0] put_obmc_0_834;
reg [31:0] put_obmc_0_834_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_835;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_835_reg;
reg [31:0] put_obmc_0_836;
reg [31:0] put_obmc_0_836_reg;
reg [31:0] put_obmc_0_837;
reg [31:0] put_obmc_0_837_reg;
reg [31:0] put_obmc_0_838;
reg [31:0] put_obmc_0_838_reg;
reg [31:0] put_obmc_0_839;
reg [31:0] put_obmc_0_839_reg;
reg [31:0] put_obmc_0_840;
reg [31:0] put_obmc_0_840_reg;
reg [31:0] put_obmc_0_841;
reg [31:0] put_obmc_0_841_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_842;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_842_reg;
reg [31:0] put_obmc_0_843;
reg [31:0] put_obmc_0_843_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_844;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_844_reg;
reg [31:0] put_obmc_0_845;
reg [31:0] put_obmc_0_845_reg;
reg [31:0] put_obmc_0_846;
reg [31:0] put_obmc_0_846_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_847;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_847_reg;
reg [31:0] put_obmc_0_848;
reg [31:0] put_obmc_0_848_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_849;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_849_reg;
reg [31:0] put_obmc_0_850;
reg [31:0] put_obmc_0_850_reg;
reg [31:0] put_obmc_0_851;
reg [31:0] put_obmc_0_851_reg;
reg [31:0] put_obmc_0_852;
reg [31:0] put_obmc_0_852_reg;
reg [31:0] put_obmc_0_853;
reg [31:0] put_obmc_0_853_reg;
reg [31:0] put_obmc_0_854;
reg [31:0] put_obmc_0_854_reg;
reg [31:0] put_obmc_0_855;
reg [31:0] put_obmc_0_855_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_856;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_856_reg;
reg [31:0] put_obmc_0_857;
reg [31:0] put_obmc_0_857_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_858;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_858_reg;
reg [31:0] put_obmc_0_859;
reg [31:0] put_obmc_0_859_reg;
reg [31:0] put_obmc_0_860;
reg [31:0] put_obmc_0_860_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_861;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_861_reg;
reg [31:0] put_obmc_0_862;
reg [31:0] put_obmc_0_862_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_863;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_863_reg;
reg [31:0] put_obmc_0_864;
reg [31:0] put_obmc_0_864_reg;
reg [31:0] put_obmc_0_tmp6;
reg [31:0] put_obmc_0_tmp6_reg;
reg [31:0] put_obmc_0_tmp7;
reg [31:0] put_obmc_0_tmp7_reg;
reg [31:0] put_obmc_0_865;
reg [31:0] put_obmc_0_865_reg;
reg [31:0] put_obmc_0_866;
reg [31:0] put_obmc_0_866_reg;
reg [31:0] put_obmc_0_867;
reg [31:0] put_obmc_0_867_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_868;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_0_868_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_put_obmc_0_24_en;
reg [31:0] put_obmc_0_24_stage0_reg;
reg  lpm_mult_put_obmc_0_37_en;
reg [31:0] put_obmc_0_37_stage0_reg;
reg  lpm_mult_put_obmc_0_50_en;
reg [31:0] put_obmc_0_50_stage0_reg;
reg  lpm_mult_put_obmc_0_64_en;
reg [31:0] put_obmc_0_64_stage0_reg;
reg  lpm_mult_put_obmc_0_78_en;
reg [31:0] put_obmc_0_78_stage0_reg;
reg  lpm_mult_put_obmc_0_89_en;
reg [31:0] put_obmc_0_89_stage0_reg;
reg  lpm_mult_put_obmc_0_102_en;
reg [31:0] put_obmc_0_102_stage0_reg;
reg  lpm_mult_put_obmc_0_116_en;
reg [31:0] put_obmc_0_116_stage0_reg;
reg  lpm_mult_put_obmc_0_130_en;
reg [31:0] put_obmc_0_130_stage0_reg;
reg  lpm_mult_put_obmc_0_143_en;
reg [31:0] put_obmc_0_143_stage0_reg;
reg  lpm_mult_put_obmc_0_169_en;
reg [31:0] put_obmc_0_169_stage0_reg;
reg  lpm_mult_put_obmc_0_183_en;
reg [31:0] put_obmc_0_183_stage0_reg;
reg  lpm_mult_put_obmc_0_194_en;
reg [31:0] put_obmc_0_194_stage0_reg;
reg  lpm_mult_put_obmc_0_208_en;
reg [31:0] put_obmc_0_208_stage0_reg;
reg  lpm_mult_put_obmc_0_225_en;
reg [31:0] put_obmc_0_225_stage0_reg;
reg  lpm_mult_put_obmc_0_239_en;
reg [31:0] put_obmc_0_239_stage0_reg;
reg  lpm_mult_put_obmc_0_253_en;
reg [31:0] put_obmc_0_253_stage0_reg;
reg  lpm_mult_put_obmc_0_267_en;
reg [31:0] put_obmc_0_267_stage0_reg;
reg  lpm_mult_put_obmc_0_280_en;
reg [31:0] put_obmc_0_280_stage0_reg;
reg  lpm_mult_put_obmc_0_293_en;
reg [31:0] put_obmc_0_293_stage0_reg;
reg  lpm_mult_put_obmc_0_306_en;
reg [31:0] put_obmc_0_306_stage0_reg;
reg  lpm_mult_put_obmc_0_319_en;
reg [31:0] put_obmc_0_319_stage0_reg;
reg  lpm_mult_put_obmc_0_330_en;
reg [31:0] put_obmc_0_330_stage0_reg;
reg  lpm_mult_put_obmc_0_343_en;
reg [31:0] put_obmc_0_343_stage0_reg;
reg  lpm_mult_put_obmc_0_356_en;
reg [31:0] put_obmc_0_356_stage0_reg;
reg  lpm_mult_put_obmc_0_369_en;
reg [31:0] put_obmc_0_369_stage0_reg;
reg  lpm_mult_put_obmc_0_382_en;
reg [31:0] put_obmc_0_382_stage0_reg;
reg  lpm_mult_put_obmc_0_396_en;
reg [31:0] put_obmc_0_396_stage0_reg;
reg  lpm_mult_put_obmc_0_410_en;
reg [31:0] put_obmc_0_410_stage0_reg;
reg  lpm_mult_put_obmc_0_424_en;
reg [31:0] put_obmc_0_424_stage0_reg;
reg  lpm_mult_put_obmc_0_439_en;
reg [31:0] put_obmc_0_439_stage0_reg;
reg  lpm_mult_put_obmc_0_453_en;
reg [31:0] put_obmc_0_453_stage0_reg;
reg  lpm_mult_put_obmc_0_467_en;
reg [31:0] put_obmc_0_467_stage0_reg;
reg  lpm_mult_put_obmc_0_481_en;
reg [31:0] put_obmc_0_481_stage0_reg;
reg  lpm_mult_put_obmc_0_494_en;
reg [31:0] put_obmc_0_494_stage0_reg;
reg  lpm_mult_put_obmc_0_507_en;
reg [31:0] put_obmc_0_507_stage0_reg;
reg  lpm_mult_put_obmc_0_520_en;
reg [31:0] put_obmc_0_520_stage0_reg;
reg  lpm_mult_put_obmc_0_533_en;
reg [31:0] put_obmc_0_533_stage0_reg;
reg  lpm_mult_put_obmc_0_544_en;
reg [31:0] put_obmc_0_544_stage0_reg;
reg  lpm_mult_put_obmc_0_557_en;
reg [31:0] put_obmc_0_557_stage0_reg;
reg  lpm_mult_put_obmc_0_570_en;
reg [31:0] put_obmc_0_570_stage0_reg;
reg  lpm_mult_put_obmc_0_583_en;
reg [31:0] put_obmc_0_583_stage0_reg;
reg  lpm_mult_put_obmc_0_596_en;
reg [31:0] put_obmc_0_596_stage0_reg;
reg  lpm_mult_put_obmc_0_610_en;
reg [31:0] put_obmc_0_610_stage0_reg;
reg  lpm_mult_put_obmc_0_624_en;
reg [31:0] put_obmc_0_624_stage0_reg;
reg  lpm_mult_put_obmc_0_638_en;
reg [31:0] put_obmc_0_638_stage0_reg;
reg  lpm_mult_put_obmc_0_655_en;
reg [31:0] put_obmc_0_655_stage0_reg;
reg  lpm_mult_put_obmc_0_669_en;
reg [31:0] put_obmc_0_669_stage0_reg;
reg  lpm_mult_put_obmc_0_682_en;
reg [31:0] put_obmc_0_682_stage0_reg;
reg  lpm_mult_put_obmc_0_696_en;
reg [31:0] put_obmc_0_696_stage0_reg;
reg  lpm_mult_put_obmc_0_710_en;
reg [31:0] put_obmc_0_710_stage0_reg;
reg  lpm_mult_put_obmc_0_724_en;
reg [31:0] put_obmc_0_724_stage0_reg;
reg  lpm_mult_put_obmc_0_736_en;
reg [31:0] put_obmc_0_736_stage0_reg;
reg  lpm_mult_put_obmc_0_750_en;
reg [31:0] put_obmc_0_750_stage0_reg;
reg  lpm_mult_put_obmc_0_764_en;
reg [31:0] put_obmc_0_764_stage0_reg;
reg  lpm_mult_put_obmc_0_778_en;
reg [31:0] put_obmc_0_778_stage0_reg;
reg  lpm_mult_put_obmc_0_792_en;
reg [31:0] put_obmc_0_792_stage0_reg;
reg  lpm_mult_put_obmc_0_806_en;
reg [31:0] put_obmc_0_806_stage0_reg;
reg  lpm_mult_put_obmc_0_834_en;
reg [31:0] put_obmc_0_834_stage0_reg;
reg  lpm_mult_put_obmc_0_846_en;
reg [31:0] put_obmc_0_846_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_134;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_134;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_135;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_135;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_136;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_136;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_137;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_137;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_138;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_138;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_139;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_139;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_140;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_140;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_141;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_141;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_142;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_142;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_143;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_143;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_144;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_144;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_145;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_145;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_146;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_146;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_147;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_147;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_148;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_148;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_149;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_149;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_150;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_150;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_151;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_151;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_152;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_152;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_153;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_153;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_154;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_154;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_155;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_155;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_156;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_156;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_157;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_157;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_158;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_158;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_159;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_159;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_160;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_160;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_161;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_161;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_162;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_162;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_163;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_163;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_164;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_164;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_165;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_165;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_166;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_166;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_167;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_167;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_168;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_168;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_169;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_169;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_170;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_170;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_171;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_171;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_172;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_172;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_173;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_173;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_174;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_174;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_175;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_175;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_176;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_176;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_177;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_177;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_178;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_178;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_179;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_179;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_180;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_180;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_181;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_181;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_182;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_182;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_183;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_183;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_184;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_184;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_185;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_185;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_186;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_186;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_187;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_187;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_188;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_188;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_189;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_189;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_190;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_190;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_191;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_191;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_192;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_192;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_193;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_193;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_194;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_194;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_195;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_195;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_196;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_196;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_197;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_197;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_198;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_198;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_199;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_199;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_200;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_200;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_201;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_201;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_202;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_202;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_203;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_203;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_204;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_204;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_205;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_205;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_206;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_206;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_207;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_207;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_208;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_208;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_209;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_209;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_210;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_210;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_211;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_211;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_212;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_212;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_213;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_213;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_214;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_214;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_215;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_215;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_216;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_216;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_217;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_217;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_218;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_218;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_219;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_219;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_220;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_220;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_221;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_221;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_222;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_222;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_223;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_223;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_224;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_224;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_225;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_225;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_226;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_226;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_227;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_227;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_228;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_228;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_229;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_229;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_230;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_230;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_231;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_231;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_232;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_232;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_233;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_233;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_234;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_234;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_235;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_235;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_236;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_236;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_237;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_237;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_238;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_238;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_239;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_239;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_240;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_240;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_241;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_241;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_242;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_242;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_243;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_243;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_244;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_244;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_245;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_245;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_246;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_246;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_247;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_247;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_248;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_248;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_249;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_249;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_250;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_250;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_251;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_251;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_252;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_252;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_253;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_253;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_254;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_254;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_255;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_255;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_256;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_256;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_257;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_257;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_258;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_258;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_259;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_obmc_BB_0_259;
if (reset == 1'b0 && ^(LEGUP_F_put_obmc_BB_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_obmc_BB_0_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %1 = getelementptr inbounds i32** %src, i32 1*/
begin
put_obmc_0_1 = (arg_src + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %1 = getelementptr inbounds i32** %src, i32 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_1_reg <= put_obmc_0_1;
if (reset == 1'b0 && ^(put_obmc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_1_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
begin
put_obmc_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_2_reg <= put_obmc_0_2;
if (reset == 1'b0 && ^(put_obmc_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_2_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %3 = getelementptr inbounds i32** %src, i32 2*/
begin
put_obmc_0_3 = (arg_src + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %3 = getelementptr inbounds i32** %src, i32 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_3_reg <= put_obmc_0_3;
if (reset == 1'b0 && ^(put_obmc_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_3_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
begin
put_obmc_0_4 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_4_reg <= put_obmc_0_4;
if (reset == 1'b0 && ^(put_obmc_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_4_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
begin
put_obmc_0_5 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_5_reg <= put_obmc_0_5;
if (reset == 1'b0 && ^(put_obmc_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_5_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %6 = getelementptr inbounds i32** %src, i32 3*/
begin
put_obmc_0_6 = (arg_src + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %6 = getelementptr inbounds i32** %src, i32 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_6_reg <= put_obmc_0_6;
if (reset == 1'b0 && ^(put_obmc_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_6_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
begin
put_obmc_0_7 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_7_reg <= put_obmc_0_7;
if (reset == 1'b0 && ^(put_obmc_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_7_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %8 = getelementptr inbounds i32** %src, i32 4*/
begin
put_obmc_0_8 = (arg_src + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %8 = getelementptr inbounds i32** %src, i32 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_8_reg <= put_obmc_0_8;
if (reset == 1'b0 && ^(put_obmc_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_8_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
begin
put_obmc_0_9 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_9_reg <= put_obmc_0_9;
if (reset == 1'b0 && ^(put_obmc_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_9_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
begin
put_obmc_0_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_10_reg <= put_obmc_0_10;
if (reset == 1'b0 && ^(put_obmc_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_10_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
begin
put_obmc_0_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_11_reg <= put_obmc_0_11;
if (reset == 1'b0 && ^(put_obmc_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_11_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
begin
put_obmc_0_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_12_reg <= put_obmc_0_12;
if (reset == 1'b0 && ^(put_obmc_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_12_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %13 = shl i32 %12, 2*/
begin
put_obmc_0_13 = (put_obmc_0_12 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %13 = shl i32 %12, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_13_reg <= put_obmc_0_13;
if (reset == 1'b0 && ^(put_obmc_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_13_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp = add i32 %11, %10*/
begin
put_obmc_0_tmp = (put_obmc_0_11 + put_obmc_0_10_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp = add i32 %11, %10*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_tmp_reg <= put_obmc_0_tmp;
if (reset == 1'b0 && ^(put_obmc_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp1 = shl i32 %tmp, 1*/
begin
put_obmc_0_tmp1 = (put_obmc_0_tmp <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp1 = shl i32 %tmp, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_tmp1_reg <= put_obmc_0_tmp1;
if (reset == 1'b0 && ^(put_obmc_0_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp1_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %14 = add i32 %13, 4*/
begin
put_obmc_0_14 = (put_obmc_0_13 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %14 = add i32 %13, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_14_reg <= put_obmc_0_14;
if (reset == 1'b0 && ^(put_obmc_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_14_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %15 = add i32 %14, %tmp1*/
begin
put_obmc_0_15 = (put_obmc_0_14 + put_obmc_0_tmp1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %15 = add i32 %14, %tmp1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_15_reg <= put_obmc_0_15;
if (reset == 1'b0 && ^(put_obmc_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_15_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %16 = ashr i32 %15, 3*/
begin
put_obmc_0_16 = ($signed(put_obmc_0_15) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %16 = ashr i32 %15, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
put_obmc_0_16_reg <= put_obmc_0_16;
if (reset == 1'b0 && ^(put_obmc_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_16_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %17 = getelementptr inbounds i32* %2, i32 1*/
begin
put_obmc_0_17 = (put_obmc_0_2 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %17 = getelementptr inbounds i32* %2, i32 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_17_reg <= put_obmc_0_17;
if (reset == 1'b0 && ^(put_obmc_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_17_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
begin
put_obmc_0_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_9))
begin
put_obmc_0_18_reg <= put_obmc_0_18;
if (reset == 1'b0 && ^(put_obmc_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_18_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %19 = shl i32 %18, 1*/
begin
put_obmc_0_19 = (put_obmc_0_18 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %19 = shl i32 %18, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_9))
begin
put_obmc_0_19_reg <= put_obmc_0_19;
if (reset == 1'b0 && ^(put_obmc_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_19_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %20 = getelementptr inbounds i32* %4, i32 1*/
begin
put_obmc_0_20 = (put_obmc_0_4 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %20 = getelementptr inbounds i32* %4, i32 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_20_reg <= put_obmc_0_20;
if (reset == 1'b0 && ^(put_obmc_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_20_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
begin
put_obmc_0_21 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_21_reg <= put_obmc_0_21;
if (reset == 1'b0 && ^(put_obmc_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_21_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %22 = getelementptr inbounds i32* %5, i32 1*/
begin
put_obmc_0_22 = (put_obmc_0_5 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %22 = getelementptr inbounds i32* %5, i32 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_22_reg <= put_obmc_0_22;
if (reset == 1'b0 && ^(put_obmc_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_22_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
begin
put_obmc_0_23 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_9))
begin
put_obmc_0_23_reg <= put_obmc_0_23;
if (reset == 1'b0 && ^(put_obmc_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_23_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_24 = put_obmc_0_24_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %24 = mul nsw i32 %23, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_24_reg <= put_obmc_0_24;
if (reset == 1'b0 && ^(put_obmc_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_24_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %24 = mul nsw i32 %23, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_24_reg <= put_obmc_0_24;
if (reset == 1'b0 && ^(put_obmc_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_24_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %25 = add i32 %21, 4*/
begin
put_obmc_0_25 = (put_obmc_0_21 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %25 = add i32 %21, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_25_reg <= put_obmc_0_25;
if (reset == 1'b0 && ^(put_obmc_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_25_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %26 = add i32 %25, %19*/
begin
put_obmc_0_26 = (put_obmc_0_25 + put_obmc_0_19_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %26 = add i32 %25, %19*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_26_reg <= put_obmc_0_26;
if (reset == 1'b0 && ^(put_obmc_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_26_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %27 = add i32 %26, %24*/
begin
put_obmc_0_27 = (put_obmc_0_26 + put_obmc_0_24);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %27 = add i32 %26, %24*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_27_reg <= put_obmc_0_27;
if (reset == 1'b0 && ^(put_obmc_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_27_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %28 = ashr i32 %27, 3*/
begin
put_obmc_0_28 = ($signed(put_obmc_0_27) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %28 = ashr i32 %27, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
put_obmc_0_28_reg <= put_obmc_0_28;
if (reset == 1'b0 && ^(put_obmc_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_28_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %29 = getelementptr inbounds i32* %dst, i32 1*/
begin
put_obmc_0_29 = (arg_dst + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %29 = getelementptr inbounds i32* %dst, i32 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_29_reg <= put_obmc_0_29;
if (reset == 1'b0 && ^(put_obmc_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_29_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %30 = getelementptr inbounds i32* %2, i32 2*/
begin
put_obmc_0_30 = (put_obmc_0_2 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %30 = getelementptr inbounds i32* %2, i32 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_30_reg <= put_obmc_0_30;
if (reset == 1'b0 && ^(put_obmc_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_30_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
begin
put_obmc_0_31 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_13))
begin
put_obmc_0_31_reg <= put_obmc_0_31;
if (reset == 1'b0 && ^(put_obmc_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_31_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %32 = shl i32 %31, 1*/
begin
put_obmc_0_32 = (put_obmc_0_31 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %32 = shl i32 %31, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_13))
begin
put_obmc_0_32_reg <= put_obmc_0_32;
if (reset == 1'b0 && ^(put_obmc_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_32_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %33 = getelementptr inbounds i32* %4, i32 2*/
begin
put_obmc_0_33 = (put_obmc_0_4 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %33 = getelementptr inbounds i32* %4, i32 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_33_reg <= put_obmc_0_33;
if (reset == 1'b0 && ^(put_obmc_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_33_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
begin
put_obmc_0_34 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_34_reg <= put_obmc_0_34;
if (reset == 1'b0 && ^(put_obmc_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_34_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %35 = getelementptr inbounds i32* %5, i32 2*/
begin
put_obmc_0_35 = (put_obmc_0_5 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %35 = getelementptr inbounds i32* %5, i32 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_35_reg <= put_obmc_0_35;
if (reset == 1'b0 && ^(put_obmc_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_35_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
begin
put_obmc_0_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_13))
begin
put_obmc_0_36_reg <= put_obmc_0_36;
if (reset == 1'b0 && ^(put_obmc_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_36_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_37 = put_obmc_0_37_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %37 = mul nsw i32 %36, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_37_reg <= put_obmc_0_37;
if (reset == 1'b0 && ^(put_obmc_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_37_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %37 = mul nsw i32 %36, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_37_reg <= put_obmc_0_37;
if (reset == 1'b0 && ^(put_obmc_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_37_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %38 = add i32 %34, 4*/
begin
put_obmc_0_38 = (put_obmc_0_34 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %38 = add i32 %34, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_38_reg <= put_obmc_0_38;
if (reset == 1'b0 && ^(put_obmc_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_38_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %39 = add i32 %38, %32*/
begin
put_obmc_0_39 = (put_obmc_0_38 + put_obmc_0_32_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %39 = add i32 %38, %32*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_39_reg <= put_obmc_0_39;
if (reset == 1'b0 && ^(put_obmc_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_39_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %40 = add i32 %39, %37*/
begin
put_obmc_0_40 = (put_obmc_0_39 + put_obmc_0_37);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %40 = add i32 %39, %37*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_40_reg <= put_obmc_0_40;
if (reset == 1'b0 && ^(put_obmc_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_40_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %41 = ashr i32 %40, 3*/
begin
put_obmc_0_41 = ($signed(put_obmc_0_40) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %41 = ashr i32 %40, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
put_obmc_0_41_reg <= put_obmc_0_41;
if (reset == 1'b0 && ^(put_obmc_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_41_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %42 = getelementptr inbounds i32* %dst, i32 2*/
begin
put_obmc_0_42 = (arg_dst + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %42 = getelementptr inbounds i32* %dst, i32 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_42_reg <= put_obmc_0_42;
if (reset == 1'b0 && ^(put_obmc_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_42_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %43 = getelementptr inbounds i32* %2, i32 3*/
begin
put_obmc_0_43 = (put_obmc_0_2 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %43 = getelementptr inbounds i32* %2, i32 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_43_reg <= put_obmc_0_43;
if (reset == 1'b0 && ^(put_obmc_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_43_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
begin
put_obmc_0_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_17))
begin
put_obmc_0_44_reg <= put_obmc_0_44;
if (reset == 1'b0 && ^(put_obmc_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_44_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %45 = shl i32 %44, 1*/
begin
put_obmc_0_45 = (put_obmc_0_44 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %45 = shl i32 %44, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_17))
begin
put_obmc_0_45_reg <= put_obmc_0_45;
if (reset == 1'b0 && ^(put_obmc_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_45_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %46 = getelementptr inbounds i32* %4, i32 3*/
begin
put_obmc_0_46 = (put_obmc_0_4 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %46 = getelementptr inbounds i32* %4, i32 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_46_reg <= put_obmc_0_46;
if (reset == 1'b0 && ^(put_obmc_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_46_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
begin
put_obmc_0_47 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_47_reg <= put_obmc_0_47;
if (reset == 1'b0 && ^(put_obmc_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_47_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %48 = getelementptr inbounds i32* %5, i32 3*/
begin
put_obmc_0_48 = (put_obmc_0_5 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %48 = getelementptr inbounds i32* %5, i32 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_48_reg <= put_obmc_0_48;
if (reset == 1'b0 && ^(put_obmc_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_48_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
begin
put_obmc_0_49 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_17))
begin
put_obmc_0_49_reg <= put_obmc_0_49;
if (reset == 1'b0 && ^(put_obmc_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_49_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_50 = put_obmc_0_50_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %50 = mul nsw i32 %49, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_50_reg <= put_obmc_0_50;
if (reset == 1'b0 && ^(put_obmc_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_50_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %50 = mul nsw i32 %49, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_50_reg <= put_obmc_0_50;
if (reset == 1'b0 && ^(put_obmc_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_50_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %51 = add i32 %47, 4*/
begin
put_obmc_0_51 = (put_obmc_0_47 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %51 = add i32 %47, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_51_reg <= put_obmc_0_51;
if (reset == 1'b0 && ^(put_obmc_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_51_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %52 = add i32 %51, %45*/
begin
put_obmc_0_52 = (put_obmc_0_51 + put_obmc_0_45_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %52 = add i32 %51, %45*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_52_reg <= put_obmc_0_52;
if (reset == 1'b0 && ^(put_obmc_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_52_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %53 = add i32 %52, %50*/
begin
put_obmc_0_53 = (put_obmc_0_52 + put_obmc_0_50);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %53 = add i32 %52, %50*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_53_reg <= put_obmc_0_53;
if (reset == 1'b0 && ^(put_obmc_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_53_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %54 = ashr i32 %53, 3*/
begin
put_obmc_0_54 = ($signed(put_obmc_0_53) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %54 = ashr i32 %53, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
put_obmc_0_54_reg <= put_obmc_0_54;
if (reset == 1'b0 && ^(put_obmc_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_54_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %55 = getelementptr inbounds i32* %dst, i32 3*/
begin
put_obmc_0_55 = (arg_dst + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %55 = getelementptr inbounds i32* %dst, i32 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_55_reg <= put_obmc_0_55;
if (reset == 1'b0 && ^(put_obmc_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_55_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %56 = add nsw i32 %stride, 2*/
begin
put_obmc_0_56 = (arg_stride + 32'd2);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %56 = add nsw i32 %stride, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_56_reg <= put_obmc_0_56;
if (reset == 1'b0 && ^(put_obmc_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_56_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %57 = getelementptr inbounds i32* %2, i32 %56*/
begin
put_obmc_0_57 = (put_obmc_0_2 + (4 * put_obmc_0_56_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %57 = getelementptr inbounds i32* %2, i32 %56*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_57_reg <= put_obmc_0_57;
if (reset == 1'b0 && ^(put_obmc_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_57_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
begin
put_obmc_0_58 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_21))
begin
put_obmc_0_58_reg <= put_obmc_0_58;
if (reset == 1'b0 && ^(put_obmc_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_58_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %59 = shl i32 %58, 1*/
begin
put_obmc_0_59 = (put_obmc_0_58 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %59 = shl i32 %58, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_21))
begin
put_obmc_0_59_reg <= put_obmc_0_59;
if (reset == 1'b0 && ^(put_obmc_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_59_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %60 = getelementptr inbounds i32* %4, i32 %56*/
begin
put_obmc_0_60 = (put_obmc_0_4 + (4 * put_obmc_0_56_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %60 = getelementptr inbounds i32* %4, i32 %56*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_60_reg <= put_obmc_0_60;
if (reset == 1'b0 && ^(put_obmc_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_60_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
begin
put_obmc_0_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_61_reg <= put_obmc_0_61;
if (reset == 1'b0 && ^(put_obmc_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_61_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %62 = getelementptr inbounds i32* %5, i32 %56*/
begin
put_obmc_0_62 = (put_obmc_0_5 + (4 * put_obmc_0_56_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %62 = getelementptr inbounds i32* %5, i32 %56*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_62_reg <= put_obmc_0_62;
if (reset == 1'b0 && ^(put_obmc_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_62_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
begin
put_obmc_0_63 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_21))
begin
put_obmc_0_63_reg <= put_obmc_0_63;
if (reset == 1'b0 && ^(put_obmc_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_63_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_64 = put_obmc_0_64_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %64 = mul nsw i32 %63, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_64_reg <= put_obmc_0_64;
if (reset == 1'b0 && ^(put_obmc_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_64_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %64 = mul nsw i32 %63, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_64_reg <= put_obmc_0_64;
if (reset == 1'b0 && ^(put_obmc_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_64_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %65 = add i32 %61, 4*/
begin
put_obmc_0_65 = (put_obmc_0_61 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %65 = add i32 %61, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_65_reg <= put_obmc_0_65;
if (reset == 1'b0 && ^(put_obmc_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_65_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %66 = add i32 %65, %59*/
begin
put_obmc_0_66 = (put_obmc_0_65 + put_obmc_0_59_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %66 = add i32 %65, %59*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_66_reg <= put_obmc_0_66;
if (reset == 1'b0 && ^(put_obmc_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_66_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %67 = add i32 %66, %64*/
begin
put_obmc_0_67 = (put_obmc_0_66 + put_obmc_0_64);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %67 = add i32 %66, %64*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_67_reg <= put_obmc_0_67;
if (reset == 1'b0 && ^(put_obmc_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_67_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %68 = ashr i32 %67, 3*/
begin
put_obmc_0_68 = ($signed(put_obmc_0_67) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %68 = ashr i32 %67, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
put_obmc_0_68_reg <= put_obmc_0_68;
if (reset == 1'b0 && ^(put_obmc_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_68_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %69 = getelementptr inbounds i32* %dst, i32 %56*/
begin
put_obmc_0_69 = (arg_dst + (4 * put_obmc_0_56_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %69 = getelementptr inbounds i32* %dst, i32 %56*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_69_reg <= put_obmc_0_69;
if (reset == 1'b0 && ^(put_obmc_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_69_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %70 = add nsw i32 %stride, 3*/
begin
put_obmc_0_70 = (arg_stride + 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %70 = add nsw i32 %stride, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_70_reg <= put_obmc_0_70;
if (reset == 1'b0 && ^(put_obmc_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_70_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %71 = getelementptr inbounds i32* %2, i32 %70*/
begin
put_obmc_0_71 = (put_obmc_0_2 + (4 * put_obmc_0_70_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %71 = getelementptr inbounds i32* %2, i32 %70*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_71_reg <= put_obmc_0_71;
if (reset == 1'b0 && ^(put_obmc_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_71_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
begin
put_obmc_0_72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_25))
begin
put_obmc_0_72_reg <= put_obmc_0_72;
if (reset == 1'b0 && ^(put_obmc_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_72_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %73 = shl i32 %72, 1*/
begin
put_obmc_0_73 = (put_obmc_0_72 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %73 = shl i32 %72, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_25))
begin
put_obmc_0_73_reg <= put_obmc_0_73;
if (reset == 1'b0 && ^(put_obmc_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_73_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %74 = getelementptr inbounds i32* %4, i32 %70*/
begin
put_obmc_0_74 = (put_obmc_0_4 + (4 * put_obmc_0_70_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %74 = getelementptr inbounds i32* %4, i32 %70*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_74_reg <= put_obmc_0_74;
if (reset == 1'b0 && ^(put_obmc_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_74_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
begin
put_obmc_0_75 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_75_reg <= put_obmc_0_75;
if (reset == 1'b0 && ^(put_obmc_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_75_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %76 = getelementptr inbounds i32* %5, i32 %70*/
begin
put_obmc_0_76 = (put_obmc_0_5 + (4 * put_obmc_0_70_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %76 = getelementptr inbounds i32* %5, i32 %70*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_76_reg <= put_obmc_0_76;
if (reset == 1'b0 && ^(put_obmc_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_76_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
begin
put_obmc_0_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_25))
begin
put_obmc_0_77_reg <= put_obmc_0_77;
if (reset == 1'b0 && ^(put_obmc_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_77_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_78 = put_obmc_0_78_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %78 = mul nsw i32 %77, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_78_reg <= put_obmc_0_78;
if (reset == 1'b0 && ^(put_obmc_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_78_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %78 = mul nsw i32 %77, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_78_reg <= put_obmc_0_78;
if (reset == 1'b0 && ^(put_obmc_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_78_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %79 = add i32 %75, 4*/
begin
put_obmc_0_79 = (put_obmc_0_75 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %79 = add i32 %75, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_79_reg <= put_obmc_0_79;
if (reset == 1'b0 && ^(put_obmc_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_79_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %80 = add i32 %79, %73*/
begin
put_obmc_0_80 = (put_obmc_0_79 + put_obmc_0_73_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %80 = add i32 %79, %73*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_80_reg <= put_obmc_0_80;
if (reset == 1'b0 && ^(put_obmc_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_80_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %81 = add i32 %80, %78*/
begin
put_obmc_0_81 = (put_obmc_0_80 + put_obmc_0_78);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %81 = add i32 %80, %78*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_81_reg <= put_obmc_0_81;
if (reset == 1'b0 && ^(put_obmc_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_81_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %82 = ashr i32 %81, 3*/
begin
put_obmc_0_82 = ($signed(put_obmc_0_81) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %82 = ashr i32 %81, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
put_obmc_0_82_reg <= put_obmc_0_82;
if (reset == 1'b0 && ^(put_obmc_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_82_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %83 = getelementptr inbounds i32* %dst, i32 %70*/
begin
put_obmc_0_83 = (arg_dst + (4 * put_obmc_0_70_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %83 = getelementptr inbounds i32* %dst, i32 %70*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_83_reg <= put_obmc_0_83;
if (reset == 1'b0 && ^(put_obmc_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_83_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %84 = getelementptr inbounds i32* %2, i32 4*/
begin
put_obmc_0_84 = (put_obmc_0_2 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %84 = getelementptr inbounds i32* %2, i32 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_84_reg <= put_obmc_0_84;
if (reset == 1'b0 && ^(put_obmc_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_84_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
begin
put_obmc_0_85 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_29))
begin
put_obmc_0_85_reg <= put_obmc_0_85;
if (reset == 1'b0 && ^(put_obmc_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_85_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %86 = shl i32 %85, 1*/
begin
put_obmc_0_86 = (put_obmc_0_85 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %86 = shl i32 %85, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_29))
begin
put_obmc_0_86_reg <= put_obmc_0_86;
if (reset == 1'b0 && ^(put_obmc_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_86_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %87 = getelementptr inbounds i32* %5, i32 4*/
begin
put_obmc_0_87 = (put_obmc_0_5 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %87 = getelementptr inbounds i32* %5, i32 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_87_reg <= put_obmc_0_87;
if (reset == 1'b0 && ^(put_obmc_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_87_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
begin
put_obmc_0_88 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_29))
begin
put_obmc_0_88_reg <= put_obmc_0_88;
if (reset == 1'b0 && ^(put_obmc_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_88_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_89 = put_obmc_0_89_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %89 = mul nsw i32 %88, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_89_reg <= put_obmc_0_89;
if (reset == 1'b0 && ^(put_obmc_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_89_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %89 = mul nsw i32 %88, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_89_reg <= put_obmc_0_89;
if (reset == 1'b0 && ^(put_obmc_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_89_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %90 = getelementptr inbounds i32* %7, i32 4*/
begin
put_obmc_0_90 = (put_obmc_0_7 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %90 = getelementptr inbounds i32* %7, i32 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_90_reg <= put_obmc_0_90;
if (reset == 1'b0 && ^(put_obmc_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_90_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
begin
put_obmc_0_91 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_91_reg <= put_obmc_0_91;
if (reset == 1'b0 && ^(put_obmc_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_91_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %92 = add i32 %86, 4*/
begin
put_obmc_0_92 = (put_obmc_0_86 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %92 = add i32 %86, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_29))
begin
put_obmc_0_92_reg <= put_obmc_0_92;
if (reset == 1'b0 && ^(put_obmc_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_92_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %93 = add i32 %92, %91*/
begin
put_obmc_0_93 = (put_obmc_0_92_reg + put_obmc_0_91);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %93 = add i32 %92, %91*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_93_reg <= put_obmc_0_93;
if (reset == 1'b0 && ^(put_obmc_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_93_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %94 = add i32 %93, %89*/
begin
put_obmc_0_94 = (put_obmc_0_93 + put_obmc_0_89);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %94 = add i32 %93, %89*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_94_reg <= put_obmc_0_94;
if (reset == 1'b0 && ^(put_obmc_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_94_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %95 = ashr i32 %94, 3*/
begin
put_obmc_0_95 = ($signed(put_obmc_0_94) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %95 = ashr i32 %94, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
put_obmc_0_95_reg <= put_obmc_0_95;
if (reset == 1'b0 && ^(put_obmc_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_95_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %96 = getelementptr inbounds i32* %dst, i32 4*/
begin
put_obmc_0_96 = (arg_dst + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %96 = getelementptr inbounds i32* %dst, i32 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_96_reg <= put_obmc_0_96;
if (reset == 1'b0 && ^(put_obmc_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_96_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %97 = getelementptr inbounds i32* %2, i32 5*/
begin
put_obmc_0_97 = (put_obmc_0_2 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %97 = getelementptr inbounds i32* %2, i32 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_97_reg <= put_obmc_0_97;
if (reset == 1'b0 && ^(put_obmc_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_97_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
begin
put_obmc_0_98 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_33))
begin
put_obmc_0_98_reg <= put_obmc_0_98;
if (reset == 1'b0 && ^(put_obmc_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_98_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %99 = shl i32 %98, 1*/
begin
put_obmc_0_99 = (put_obmc_0_98 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %99 = shl i32 %98, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_33))
begin
put_obmc_0_99_reg <= put_obmc_0_99;
if (reset == 1'b0 && ^(put_obmc_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_99_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %100 = getelementptr inbounds i32* %5, i32 5*/
begin
put_obmc_0_100 = (put_obmc_0_5 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %100 = getelementptr inbounds i32* %5, i32 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_100_reg <= put_obmc_0_100;
if (reset == 1'b0 && ^(put_obmc_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_100_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
begin
put_obmc_0_101 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_33))
begin
put_obmc_0_101_reg <= put_obmc_0_101;
if (reset == 1'b0 && ^(put_obmc_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_101_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_102 = put_obmc_0_102_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %102 = mul nsw i32 %101, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_102_reg <= put_obmc_0_102;
if (reset == 1'b0 && ^(put_obmc_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_102_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %102 = mul nsw i32 %101, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_102_reg <= put_obmc_0_102;
if (reset == 1'b0 && ^(put_obmc_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_102_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %103 = getelementptr inbounds i32* %7, i32 5*/
begin
put_obmc_0_103 = (put_obmc_0_7 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %103 = getelementptr inbounds i32* %7, i32 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_103_reg <= put_obmc_0_103;
if (reset == 1'b0 && ^(put_obmc_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_103_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
begin
put_obmc_0_104 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_104_reg <= put_obmc_0_104;
if (reset == 1'b0 && ^(put_obmc_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_104_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %105 = add i32 %99, 4*/
begin
put_obmc_0_105 = (put_obmc_0_99 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %105 = add i32 %99, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_33))
begin
put_obmc_0_105_reg <= put_obmc_0_105;
if (reset == 1'b0 && ^(put_obmc_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_105_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %106 = add i32 %105, %104*/
begin
put_obmc_0_106 = (put_obmc_0_105_reg + put_obmc_0_104);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %106 = add i32 %105, %104*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_106_reg <= put_obmc_0_106;
if (reset == 1'b0 && ^(put_obmc_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_106_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %107 = add i32 %106, %102*/
begin
put_obmc_0_107 = (put_obmc_0_106 + put_obmc_0_102);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %107 = add i32 %106, %102*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_107_reg <= put_obmc_0_107;
if (reset == 1'b0 && ^(put_obmc_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_107_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %108 = ashr i32 %107, 3*/
begin
put_obmc_0_108 = ($signed(put_obmc_0_107) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %108 = ashr i32 %107, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
put_obmc_0_108_reg <= put_obmc_0_108;
if (reset == 1'b0 && ^(put_obmc_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_108_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %109 = getelementptr inbounds i32* %dst, i32 5*/
begin
put_obmc_0_109 = (arg_dst + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %109 = getelementptr inbounds i32* %dst, i32 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_109_reg <= put_obmc_0_109;
if (reset == 1'b0 && ^(put_obmc_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_109_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %110 = add nsw i32 %stride, 4*/
begin
put_obmc_0_110 = (arg_stride + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %110 = add nsw i32 %stride, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_110_reg <= put_obmc_0_110;
if (reset == 1'b0 && ^(put_obmc_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_110_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %111 = getelementptr inbounds i32* %2, i32 %110*/
begin
put_obmc_0_111 = (put_obmc_0_2 + (4 * put_obmc_0_110_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %111 = getelementptr inbounds i32* %2, i32 %110*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_111_reg <= put_obmc_0_111;
if (reset == 1'b0 && ^(put_obmc_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_111_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
begin
put_obmc_0_112 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_37))
begin
put_obmc_0_112_reg <= put_obmc_0_112;
if (reset == 1'b0 && ^(put_obmc_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_112_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %113 = shl i32 %112, 1*/
begin
put_obmc_0_113 = (put_obmc_0_112 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %113 = shl i32 %112, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_37))
begin
put_obmc_0_113_reg <= put_obmc_0_113;
if (reset == 1'b0 && ^(put_obmc_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_113_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %114 = getelementptr inbounds i32* %5, i32 %110*/
begin
put_obmc_0_114 = (put_obmc_0_5 + (4 * put_obmc_0_110_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %114 = getelementptr inbounds i32* %5, i32 %110*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_114_reg <= put_obmc_0_114;
if (reset == 1'b0 && ^(put_obmc_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_114_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
begin
put_obmc_0_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_37))
begin
put_obmc_0_115_reg <= put_obmc_0_115;
if (reset == 1'b0 && ^(put_obmc_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_115_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_116 = put_obmc_0_116_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %116 = mul nsw i32 %115, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_116_reg <= put_obmc_0_116;
if (reset == 1'b0 && ^(put_obmc_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_116_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %116 = mul nsw i32 %115, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_116_reg <= put_obmc_0_116;
if (reset == 1'b0 && ^(put_obmc_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_116_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %117 = getelementptr inbounds i32* %7, i32 %110*/
begin
put_obmc_0_117 = (put_obmc_0_7 + (4 * put_obmc_0_110_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %117 = getelementptr inbounds i32* %7, i32 %110*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_117_reg <= put_obmc_0_117;
if (reset == 1'b0 && ^(put_obmc_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_117_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
begin
put_obmc_0_118 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_118_reg <= put_obmc_0_118;
if (reset == 1'b0 && ^(put_obmc_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_118_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %119 = add i32 %113, 4*/
begin
put_obmc_0_119 = (put_obmc_0_113 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %119 = add i32 %113, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_37))
begin
put_obmc_0_119_reg <= put_obmc_0_119;
if (reset == 1'b0 && ^(put_obmc_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_119_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %120 = add i32 %119, %118*/
begin
put_obmc_0_120 = (put_obmc_0_119_reg + put_obmc_0_118);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %120 = add i32 %119, %118*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_120_reg <= put_obmc_0_120;
if (reset == 1'b0 && ^(put_obmc_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_120_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %121 = add i32 %120, %116*/
begin
put_obmc_0_121 = (put_obmc_0_120 + put_obmc_0_116);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %121 = add i32 %120, %116*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_121_reg <= put_obmc_0_121;
if (reset == 1'b0 && ^(put_obmc_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_121_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %122 = ashr i32 %121, 3*/
begin
put_obmc_0_122 = ($signed(put_obmc_0_121) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %122 = ashr i32 %121, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
put_obmc_0_122_reg <= put_obmc_0_122;
if (reset == 1'b0 && ^(put_obmc_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_122_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %123 = getelementptr inbounds i32* %dst, i32 %110*/
begin
put_obmc_0_123 = (arg_dst + (4 * put_obmc_0_110_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %123 = getelementptr inbounds i32* %dst, i32 %110*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_123_reg <= put_obmc_0_123;
if (reset == 1'b0 && ^(put_obmc_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_123_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %124 = add nsw i32 %stride, 5*/
begin
put_obmc_0_124 = (arg_stride + 32'd5);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %124 = add nsw i32 %stride, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_124_reg <= put_obmc_0_124;
if (reset == 1'b0 && ^(put_obmc_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_124_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %125 = getelementptr inbounds i32* %2, i32 %124*/
begin
put_obmc_0_125 = (put_obmc_0_2 + (4 * put_obmc_0_124_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %125 = getelementptr inbounds i32* %2, i32 %124*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_125_reg <= put_obmc_0_125;
if (reset == 1'b0 && ^(put_obmc_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_125_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
begin
put_obmc_0_126 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_41))
begin
put_obmc_0_126_reg <= put_obmc_0_126;
if (reset == 1'b0 && ^(put_obmc_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_126_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %127 = shl i32 %126, 1*/
begin
put_obmc_0_127 = (put_obmc_0_126 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %127 = shl i32 %126, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_41))
begin
put_obmc_0_127_reg <= put_obmc_0_127;
if (reset == 1'b0 && ^(put_obmc_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_127_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %128 = getelementptr inbounds i32* %5, i32 %124*/
begin
put_obmc_0_128 = (put_obmc_0_5 + (4 * put_obmc_0_124_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %128 = getelementptr inbounds i32* %5, i32 %124*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_128_reg <= put_obmc_0_128;
if (reset == 1'b0 && ^(put_obmc_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_128_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
begin
put_obmc_0_129 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_41))
begin
put_obmc_0_129_reg <= put_obmc_0_129;
if (reset == 1'b0 && ^(put_obmc_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_129_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_130 = put_obmc_0_130_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %130 = mul nsw i32 %129, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_130_reg <= put_obmc_0_130;
if (reset == 1'b0 && ^(put_obmc_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_130_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %130 = mul nsw i32 %129, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_130_reg <= put_obmc_0_130;
if (reset == 1'b0 && ^(put_obmc_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_130_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %131 = getelementptr inbounds i32* %7, i32 %124*/
begin
put_obmc_0_131 = (put_obmc_0_7 + (4 * put_obmc_0_124_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %131 = getelementptr inbounds i32* %7, i32 %124*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_131_reg <= put_obmc_0_131;
if (reset == 1'b0 && ^(put_obmc_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_131_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
begin
put_obmc_0_132 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_132_reg <= put_obmc_0_132;
if (reset == 1'b0 && ^(put_obmc_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_132_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %133 = add i32 %127, 4*/
begin
put_obmc_0_133 = (put_obmc_0_127 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %133 = add i32 %127, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_41))
begin
put_obmc_0_133_reg <= put_obmc_0_133;
if (reset == 1'b0 && ^(put_obmc_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_133_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %134 = add i32 %133, %132*/
begin
put_obmc_0_134 = (put_obmc_0_133_reg + put_obmc_0_132);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %134 = add i32 %133, %132*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_134_reg <= put_obmc_0_134;
if (reset == 1'b0 && ^(put_obmc_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_134_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %135 = add i32 %134, %130*/
begin
put_obmc_0_135 = (put_obmc_0_134 + put_obmc_0_130);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %135 = add i32 %134, %130*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_135_reg <= put_obmc_0_135;
if (reset == 1'b0 && ^(put_obmc_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_135_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %136 = ashr i32 %135, 3*/
begin
put_obmc_0_136 = ($signed(put_obmc_0_135) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %136 = ashr i32 %135, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
put_obmc_0_136_reg <= put_obmc_0_136;
if (reset == 1'b0 && ^(put_obmc_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_136_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %137 = getelementptr inbounds i32* %dst, i32 %124*/
begin
put_obmc_0_137 = (arg_dst + (4 * put_obmc_0_124_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %137 = getelementptr inbounds i32* %dst, i32 %124*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_137_reg <= put_obmc_0_137;
if (reset == 1'b0 && ^(put_obmc_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_137_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %138 = getelementptr inbounds i32* %2, i32 6*/
begin
put_obmc_0_138 = (put_obmc_0_2 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %138 = getelementptr inbounds i32* %2, i32 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_138_reg <= put_obmc_0_138;
if (reset == 1'b0 && ^(put_obmc_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_138_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
begin
put_obmc_0_139 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_45))
begin
put_obmc_0_139_reg <= put_obmc_0_139;
if (reset == 1'b0 && ^(put_obmc_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_139_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %140 = shl i32 %139, 1*/
begin
put_obmc_0_140 = (put_obmc_0_139 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %140 = shl i32 %139, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_45))
begin
put_obmc_0_140_reg <= put_obmc_0_140;
if (reset == 1'b0 && ^(put_obmc_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_140_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %141 = getelementptr inbounds i32* %5, i32 6*/
begin
put_obmc_0_141 = (put_obmc_0_5 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %141 = getelementptr inbounds i32* %5, i32 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_141_reg <= put_obmc_0_141;
if (reset == 1'b0 && ^(put_obmc_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_141_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
begin
put_obmc_0_142 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_45))
begin
put_obmc_0_142_reg <= put_obmc_0_142;
if (reset == 1'b0 && ^(put_obmc_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_142_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_143 = put_obmc_0_143_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %143 = mul nsw i32 %142, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_143_reg <= put_obmc_0_143;
if (reset == 1'b0 && ^(put_obmc_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_143_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %143 = mul nsw i32 %142, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_143_reg <= put_obmc_0_143;
if (reset == 1'b0 && ^(put_obmc_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_143_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %144 = getelementptr inbounds i32* %7, i32 6*/
begin
put_obmc_0_144 = (put_obmc_0_7 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %144 = getelementptr inbounds i32* %7, i32 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_144_reg <= put_obmc_0_144;
if (reset == 1'b0 && ^(put_obmc_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_144_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
begin
put_obmc_0_145 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_145_reg <= put_obmc_0_145;
if (reset == 1'b0 && ^(put_obmc_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_145_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %146 = add i32 %140, 4*/
begin
put_obmc_0_146 = (put_obmc_0_140 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %146 = add i32 %140, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_45))
begin
put_obmc_0_146_reg <= put_obmc_0_146;
if (reset == 1'b0 && ^(put_obmc_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_146_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %147 = add i32 %146, %145*/
begin
put_obmc_0_147 = (put_obmc_0_146_reg + put_obmc_0_145);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %147 = add i32 %146, %145*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_147_reg <= put_obmc_0_147;
if (reset == 1'b0 && ^(put_obmc_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_147_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %148 = add i32 %147, %143*/
begin
put_obmc_0_148 = (put_obmc_0_147 + put_obmc_0_143);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %148 = add i32 %147, %143*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_148_reg <= put_obmc_0_148;
if (reset == 1'b0 && ^(put_obmc_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_148_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %149 = ashr i32 %148, 3*/
begin
put_obmc_0_149 = ($signed(put_obmc_0_148) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %149 = ashr i32 %148, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
put_obmc_0_149_reg <= put_obmc_0_149;
if (reset == 1'b0 && ^(put_obmc_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_149_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %150 = getelementptr inbounds i32* %dst, i32 6*/
begin
put_obmc_0_150 = (arg_dst + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %150 = getelementptr inbounds i32* %dst, i32 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_150_reg <= put_obmc_0_150;
if (reset == 1'b0 && ^(put_obmc_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_150_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %151 = getelementptr inbounds i32* %2, i32 7*/
begin
put_obmc_0_151 = (put_obmc_0_2 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %151 = getelementptr inbounds i32* %2, i32 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_151_reg <= put_obmc_0_151;
if (reset == 1'b0 && ^(put_obmc_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_151_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
begin
put_obmc_0_152 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_49))
begin
put_obmc_0_152_reg <= put_obmc_0_152;
if (reset == 1'b0 && ^(put_obmc_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_152_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %153 = getelementptr inbounds i32* %5, i32 7*/
begin
put_obmc_0_153 = (put_obmc_0_5 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %153 = getelementptr inbounds i32* %5, i32 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_153_reg <= put_obmc_0_153;
if (reset == 1'b0 && ^(put_obmc_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_153_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
begin
put_obmc_0_154 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_49))
begin
put_obmc_0_154_reg <= put_obmc_0_154;
if (reset == 1'b0 && ^(put_obmc_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_154_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %155 = shl i32 %154, 2*/
begin
put_obmc_0_155 = (put_obmc_0_154 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %155 = shl i32 %154, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_49))
begin
put_obmc_0_155_reg <= put_obmc_0_155;
if (reset == 1'b0 && ^(put_obmc_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_155_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %156 = getelementptr inbounds i32* %7, i32 7*/
begin
put_obmc_0_156 = (put_obmc_0_7 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %156 = getelementptr inbounds i32* %7, i32 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_156_reg <= put_obmc_0_156;
if (reset == 1'b0 && ^(put_obmc_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_156_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
begin
put_obmc_0_157 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
put_obmc_0_157_reg <= put_obmc_0_157;
if (reset == 1'b0 && ^(put_obmc_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_157_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp2 = add i32 %157, %152*/
begin
put_obmc_0_tmp2 = (put_obmc_0_157 + put_obmc_0_152_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp2 = add i32 %157, %152*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
put_obmc_0_tmp2_reg <= put_obmc_0_tmp2;
if (reset == 1'b0 && ^(put_obmc_0_tmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp2_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp3 = shl i32 %tmp2, 1*/
begin
put_obmc_0_tmp3 = (put_obmc_0_tmp2 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp3 = shl i32 %tmp2, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
put_obmc_0_tmp3_reg <= put_obmc_0_tmp3;
if (reset == 1'b0 && ^(put_obmc_0_tmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp3_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %158 = add i32 %155, 4*/
begin
put_obmc_0_158 = (put_obmc_0_155 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %158 = add i32 %155, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_49))
begin
put_obmc_0_158_reg <= put_obmc_0_158;
if (reset == 1'b0 && ^(put_obmc_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_158_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %159 = add i32 %158, %tmp3*/
begin
put_obmc_0_159 = (put_obmc_0_158_reg + put_obmc_0_tmp3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %159 = add i32 %158, %tmp3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
put_obmc_0_159_reg <= put_obmc_0_159;
if (reset == 1'b0 && ^(put_obmc_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_159_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %160 = ashr i32 %159, 3*/
begin
put_obmc_0_160 = ($signed(put_obmc_0_159) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %160 = ashr i32 %159, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
put_obmc_0_160_reg <= put_obmc_0_160;
if (reset == 1'b0 && ^(put_obmc_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_160_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %161 = getelementptr inbounds i32* %dst, i32 7*/
begin
put_obmc_0_161 = (arg_dst + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %161 = getelementptr inbounds i32* %dst, i32 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_161_reg <= put_obmc_0_161;
if (reset == 1'b0 && ^(put_obmc_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_161_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %162 = getelementptr inbounds i32* %2, i32 %stride*/
begin
put_obmc_0_162 = (put_obmc_0_2 + (4 * arg_stride));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %162 = getelementptr inbounds i32* %2, i32 %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_162_reg <= put_obmc_0_162;
if (reset == 1'b0 && ^(put_obmc_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_162_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
begin
put_obmc_0_163 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_53))
begin
put_obmc_0_163_reg <= put_obmc_0_163;
if (reset == 1'b0 && ^(put_obmc_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_163_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %164 = getelementptr inbounds i32* %4, i32 %stride*/
begin
put_obmc_0_164 = (put_obmc_0_4 + (4 * arg_stride));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %164 = getelementptr inbounds i32* %4, i32 %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_164_reg <= put_obmc_0_164;
if (reset == 1'b0 && ^(put_obmc_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_164_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
begin
put_obmc_0_165 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_165_reg <= put_obmc_0_165;
if (reset == 1'b0 && ^(put_obmc_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_165_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %166 = shl i32 %165, 1*/
begin
put_obmc_0_166 = (put_obmc_0_165 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %166 = shl i32 %165, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_166_reg <= put_obmc_0_166;
if (reset == 1'b0 && ^(put_obmc_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_166_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %167 = getelementptr inbounds i32* %5, i32 %stride*/
begin
put_obmc_0_167 = (put_obmc_0_5 + (4 * arg_stride));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %167 = getelementptr inbounds i32* %5, i32 %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_167_reg <= put_obmc_0_167;
if (reset == 1'b0 && ^(put_obmc_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_167_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
begin
put_obmc_0_168 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_53))
begin
put_obmc_0_168_reg <= put_obmc_0_168;
if (reset == 1'b0 && ^(put_obmc_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_168_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_169 = put_obmc_0_169_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %169 = mul nsw i32 %168, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_169_reg <= put_obmc_0_169;
if (reset == 1'b0 && ^(put_obmc_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_169_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %169 = mul nsw i32 %168, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_169_reg <= put_obmc_0_169;
if (reset == 1'b0 && ^(put_obmc_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_169_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %170 = add i32 %163, 4*/
begin
put_obmc_0_170 = (put_obmc_0_163 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %170 = add i32 %163, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_53))
begin
put_obmc_0_170_reg <= put_obmc_0_170;
if (reset == 1'b0 && ^(put_obmc_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_170_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %171 = add i32 %170, %166*/
begin
put_obmc_0_171 = (put_obmc_0_170_reg + put_obmc_0_166);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %171 = add i32 %170, %166*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_171_reg <= put_obmc_0_171;
if (reset == 1'b0 && ^(put_obmc_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_171_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %172 = add i32 %171, %169*/
begin
put_obmc_0_172 = (put_obmc_0_171 + put_obmc_0_169);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %172 = add i32 %171, %169*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_172_reg <= put_obmc_0_172;
if (reset == 1'b0 && ^(put_obmc_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_172_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %173 = ashr i32 %172, 3*/
begin
put_obmc_0_173 = ($signed(put_obmc_0_172) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %173 = ashr i32 %172, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
put_obmc_0_173_reg <= put_obmc_0_173;
if (reset == 1'b0 && ^(put_obmc_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_173_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %174 = getelementptr inbounds i32* %dst, i32 %stride*/
begin
put_obmc_0_174 = (arg_dst + (4 * arg_stride));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %174 = getelementptr inbounds i32* %dst, i32 %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_174_reg <= put_obmc_0_174;
if (reset == 1'b0 && ^(put_obmc_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_174_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %175 = add nsw i32 %stride, 1*/
begin
put_obmc_0_175 = (arg_stride + 32'd1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %175 = add nsw i32 %stride, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_175_reg <= put_obmc_0_175;
if (reset == 1'b0 && ^(put_obmc_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_175_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %176 = getelementptr inbounds i32* %2, i32 %175*/
begin
put_obmc_0_176 = (put_obmc_0_2 + (4 * put_obmc_0_175_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %176 = getelementptr inbounds i32* %2, i32 %175*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_176_reg <= put_obmc_0_176;
if (reset == 1'b0 && ^(put_obmc_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_176_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
begin
put_obmc_0_177 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_57))
begin
put_obmc_0_177_reg <= put_obmc_0_177;
if (reset == 1'b0 && ^(put_obmc_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_177_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %178 = getelementptr inbounds i32* %4, i32 %175*/
begin
put_obmc_0_178 = (put_obmc_0_4 + (4 * put_obmc_0_175_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %178 = getelementptr inbounds i32* %4, i32 %175*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_178_reg <= put_obmc_0_178;
if (reset == 1'b0 && ^(put_obmc_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_178_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
begin
put_obmc_0_179 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_179_reg <= put_obmc_0_179;
if (reset == 1'b0 && ^(put_obmc_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_179_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %180 = shl i32 %179, 1*/
begin
put_obmc_0_180 = (put_obmc_0_179 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %180 = shl i32 %179, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_180_reg <= put_obmc_0_180;
if (reset == 1'b0 && ^(put_obmc_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_180_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %181 = getelementptr inbounds i32* %5, i32 %175*/
begin
put_obmc_0_181 = (put_obmc_0_5 + (4 * put_obmc_0_175_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %181 = getelementptr inbounds i32* %5, i32 %175*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_181_reg <= put_obmc_0_181;
if (reset == 1'b0 && ^(put_obmc_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_181_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
begin
put_obmc_0_182 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_57))
begin
put_obmc_0_182_reg <= put_obmc_0_182;
if (reset == 1'b0 && ^(put_obmc_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_182_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_183 = put_obmc_0_183_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %183 = mul nsw i32 %182, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_183_reg <= put_obmc_0_183;
if (reset == 1'b0 && ^(put_obmc_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_183_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %183 = mul nsw i32 %182, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_183_reg <= put_obmc_0_183;
if (reset == 1'b0 && ^(put_obmc_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_183_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %184 = add i32 %177, 4*/
begin
put_obmc_0_184 = (put_obmc_0_177 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %184 = add i32 %177, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_57))
begin
put_obmc_0_184_reg <= put_obmc_0_184;
if (reset == 1'b0 && ^(put_obmc_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_184_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %185 = add i32 %184, %180*/
begin
put_obmc_0_185 = (put_obmc_0_184_reg + put_obmc_0_180);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %185 = add i32 %184, %180*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_185_reg <= put_obmc_0_185;
if (reset == 1'b0 && ^(put_obmc_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_185_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %186 = add i32 %185, %183*/
begin
put_obmc_0_186 = (put_obmc_0_185 + put_obmc_0_183);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %186 = add i32 %185, %183*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_186_reg <= put_obmc_0_186;
if (reset == 1'b0 && ^(put_obmc_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_186_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %187 = ashr i32 %186, 3*/
begin
put_obmc_0_187 = ($signed(put_obmc_0_186) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %187 = ashr i32 %186, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
put_obmc_0_187_reg <= put_obmc_0_187;
if (reset == 1'b0 && ^(put_obmc_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_187_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %188 = getelementptr inbounds i32* %dst, i32 %175*/
begin
put_obmc_0_188 = (arg_dst + (4 * put_obmc_0_175_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %188 = getelementptr inbounds i32* %dst, i32 %175*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_188_reg <= put_obmc_0_188;
if (reset == 1'b0 && ^(put_obmc_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_188_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %189 = add nsw i32 %stride, 6*/
begin
put_obmc_0_189 = (arg_stride + 32'd6);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %189 = add nsw i32 %stride, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_189_reg <= put_obmc_0_189;
if (reset == 1'b0 && ^(put_obmc_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_189_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %190 = getelementptr inbounds i32* %2, i32 %189*/
begin
put_obmc_0_190 = (put_obmc_0_2 + (4 * put_obmc_0_189_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %190 = getelementptr inbounds i32* %2, i32 %189*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_190_reg <= put_obmc_0_190;
if (reset == 1'b0 && ^(put_obmc_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_190_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
begin
put_obmc_0_191 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_61))
begin
put_obmc_0_191_reg <= put_obmc_0_191;
if (reset == 1'b0 && ^(put_obmc_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_191_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %192 = getelementptr inbounds i32* %5, i32 %189*/
begin
put_obmc_0_192 = (put_obmc_0_5 + (4 * put_obmc_0_189_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %192 = getelementptr inbounds i32* %5, i32 %189*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_192_reg <= put_obmc_0_192;
if (reset == 1'b0 && ^(put_obmc_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_192_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
begin
put_obmc_0_193 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_61))
begin
put_obmc_0_193_reg <= put_obmc_0_193;
if (reset == 1'b0 && ^(put_obmc_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_193_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_194 = put_obmc_0_194_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %194 = mul nsw i32 %193, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_194_reg <= put_obmc_0_194;
if (reset == 1'b0 && ^(put_obmc_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_194_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %194 = mul nsw i32 %193, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_194_reg <= put_obmc_0_194;
if (reset == 1'b0 && ^(put_obmc_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_194_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %195 = getelementptr inbounds i32* %7, i32 %189*/
begin
put_obmc_0_195 = (put_obmc_0_7 + (4 * put_obmc_0_189_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %195 = getelementptr inbounds i32* %7, i32 %189*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_195_reg <= put_obmc_0_195;
if (reset == 1'b0 && ^(put_obmc_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_195_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
begin
put_obmc_0_196 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_196_reg <= put_obmc_0_196;
if (reset == 1'b0 && ^(put_obmc_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_196_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %197 = shl i32 %196, 1*/
begin
put_obmc_0_197 = (put_obmc_0_196 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %197 = shl i32 %196, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_197_reg <= put_obmc_0_197;
if (reset == 1'b0 && ^(put_obmc_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_197_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %198 = add i32 %191, 4*/
begin
put_obmc_0_198 = (put_obmc_0_191 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %198 = add i32 %191, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_61))
begin
put_obmc_0_198_reg <= put_obmc_0_198;
if (reset == 1'b0 && ^(put_obmc_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_198_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %199 = add i32 %198, %194*/
begin
put_obmc_0_199 = (put_obmc_0_198_reg + put_obmc_0_194);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %199 = add i32 %198, %194*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_199_reg <= put_obmc_0_199;
if (reset == 1'b0 && ^(put_obmc_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_199_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %200 = add i32 %199, %197*/
begin
put_obmc_0_200 = (put_obmc_0_199 + put_obmc_0_197);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %200 = add i32 %199, %197*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_200_reg <= put_obmc_0_200;
if (reset == 1'b0 && ^(put_obmc_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_200_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %201 = ashr i32 %200, 3*/
begin
put_obmc_0_201 = ($signed(put_obmc_0_200) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %201 = ashr i32 %200, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
put_obmc_0_201_reg <= put_obmc_0_201;
if (reset == 1'b0 && ^(put_obmc_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_201_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %202 = getelementptr inbounds i32* %dst, i32 %189*/
begin
put_obmc_0_202 = (arg_dst + (4 * put_obmc_0_189_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %202 = getelementptr inbounds i32* %dst, i32 %189*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_202_reg <= put_obmc_0_202;
if (reset == 1'b0 && ^(put_obmc_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_202_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %203 = add nsw i32 %stride, 7*/
begin
put_obmc_0_203 = (arg_stride + 32'd7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %203 = add nsw i32 %stride, 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_203_reg <= put_obmc_0_203;
if (reset == 1'b0 && ^(put_obmc_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_203_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %204 = getelementptr inbounds i32* %2, i32 %203*/
begin
put_obmc_0_204 = (put_obmc_0_2 + (4 * put_obmc_0_203_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %204 = getelementptr inbounds i32* %2, i32 %203*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_204_reg <= put_obmc_0_204;
if (reset == 1'b0 && ^(put_obmc_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_204_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
begin
put_obmc_0_205 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_65))
begin
put_obmc_0_205_reg <= put_obmc_0_205;
if (reset == 1'b0 && ^(put_obmc_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_205_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %206 = getelementptr inbounds i32* %5, i32 %203*/
begin
put_obmc_0_206 = (put_obmc_0_5 + (4 * put_obmc_0_203_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %206 = getelementptr inbounds i32* %5, i32 %203*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_206_reg <= put_obmc_0_206;
if (reset == 1'b0 && ^(put_obmc_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_206_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
begin
put_obmc_0_207 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_65))
begin
put_obmc_0_207_reg <= put_obmc_0_207;
if (reset == 1'b0 && ^(put_obmc_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_207_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_208 = put_obmc_0_208_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %208 = mul nsw i32 %207, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_208_reg <= put_obmc_0_208;
if (reset == 1'b0 && ^(put_obmc_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_208_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %208 = mul nsw i32 %207, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_208_reg <= put_obmc_0_208;
if (reset == 1'b0 && ^(put_obmc_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_208_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %209 = getelementptr inbounds i32* %7, i32 %203*/
begin
put_obmc_0_209 = (put_obmc_0_7 + (4 * put_obmc_0_203_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %209 = getelementptr inbounds i32* %7, i32 %203*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_209_reg <= put_obmc_0_209;
if (reset == 1'b0 && ^(put_obmc_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_209_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
begin
put_obmc_0_210 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_210_reg <= put_obmc_0_210;
if (reset == 1'b0 && ^(put_obmc_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_210_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %211 = shl i32 %210, 1*/
begin
put_obmc_0_211 = (put_obmc_0_210 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %211 = shl i32 %210, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_211_reg <= put_obmc_0_211;
if (reset == 1'b0 && ^(put_obmc_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_211_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %212 = add i32 %205, 4*/
begin
put_obmc_0_212 = (put_obmc_0_205 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %212 = add i32 %205, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_65))
begin
put_obmc_0_212_reg <= put_obmc_0_212;
if (reset == 1'b0 && ^(put_obmc_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_212_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %213 = add i32 %212, %208*/
begin
put_obmc_0_213 = (put_obmc_0_212_reg + put_obmc_0_208);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %213 = add i32 %212, %208*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_213_reg <= put_obmc_0_213;
if (reset == 1'b0 && ^(put_obmc_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_213_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %214 = add i32 %213, %211*/
begin
put_obmc_0_214 = (put_obmc_0_213 + put_obmc_0_211);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %214 = add i32 %213, %211*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_214_reg <= put_obmc_0_214;
if (reset == 1'b0 && ^(put_obmc_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_214_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %215 = ashr i32 %214, 3*/
begin
put_obmc_0_215 = ($signed(put_obmc_0_214) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %215 = ashr i32 %214, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
put_obmc_0_215_reg <= put_obmc_0_215;
if (reset == 1'b0 && ^(put_obmc_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_215_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %216 = getelementptr inbounds i32* %dst, i32 %203*/
begin
put_obmc_0_216 = (arg_dst + (4 * put_obmc_0_203_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %216 = getelementptr inbounds i32* %dst, i32 %203*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_216_reg <= put_obmc_0_216;
if (reset == 1'b0 && ^(put_obmc_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_216_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %217 = shl nsw i32 %stride, 1*/
begin
put_obmc_0_217 = (arg_stride <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %217 = shl nsw i32 %stride, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_217_reg <= put_obmc_0_217;
if (reset == 1'b0 && ^(put_obmc_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_217_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %218 = getelementptr inbounds i32* %2, i32 %217*/
begin
put_obmc_0_218 = (put_obmc_0_2 + (4 * put_obmc_0_217_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %218 = getelementptr inbounds i32* %2, i32 %217*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_218_reg <= put_obmc_0_218;
if (reset == 1'b0 && ^(put_obmc_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_218_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
begin
put_obmc_0_219 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_69))
begin
put_obmc_0_219_reg <= put_obmc_0_219;
if (reset == 1'b0 && ^(put_obmc_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_219_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %220 = getelementptr inbounds i32* %4, i32 %217*/
begin
put_obmc_0_220 = (put_obmc_0_4 + (4 * put_obmc_0_217_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %220 = getelementptr inbounds i32* %4, i32 %217*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_220_reg <= put_obmc_0_220;
if (reset == 1'b0 && ^(put_obmc_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_220_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
begin
put_obmc_0_221 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_221_reg <= put_obmc_0_221;
if (reset == 1'b0 && ^(put_obmc_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_221_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %222 = shl i32 %221, 1*/
begin
put_obmc_0_222 = (put_obmc_0_221 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %222 = shl i32 %221, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_222_reg <= put_obmc_0_222;
if (reset == 1'b0 && ^(put_obmc_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_222_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %223 = getelementptr inbounds i32* %5, i32 %217*/
begin
put_obmc_0_223 = (put_obmc_0_5 + (4 * put_obmc_0_217_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %223 = getelementptr inbounds i32* %5, i32 %217*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_223_reg <= put_obmc_0_223;
if (reset == 1'b0 && ^(put_obmc_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_223_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
begin
put_obmc_0_224 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_69))
begin
put_obmc_0_224_reg <= put_obmc_0_224;
if (reset == 1'b0 && ^(put_obmc_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_224_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_225 = put_obmc_0_225_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %225 = mul nsw i32 %224, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_225_reg <= put_obmc_0_225;
if (reset == 1'b0 && ^(put_obmc_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_225_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %225 = mul nsw i32 %224, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_225_reg <= put_obmc_0_225;
if (reset == 1'b0 && ^(put_obmc_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_225_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %226 = add i32 %219, 4*/
begin
put_obmc_0_226 = (put_obmc_0_219 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %226 = add i32 %219, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_69))
begin
put_obmc_0_226_reg <= put_obmc_0_226;
if (reset == 1'b0 && ^(put_obmc_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_226_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %227 = add i32 %226, %222*/
begin
put_obmc_0_227 = (put_obmc_0_226_reg + put_obmc_0_222);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %227 = add i32 %226, %222*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_227_reg <= put_obmc_0_227;
if (reset == 1'b0 && ^(put_obmc_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_227_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %228 = add i32 %227, %225*/
begin
put_obmc_0_228 = (put_obmc_0_227 + put_obmc_0_225);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %228 = add i32 %227, %225*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_228_reg <= put_obmc_0_228;
if (reset == 1'b0 && ^(put_obmc_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_228_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %229 = ashr i32 %228, 3*/
begin
put_obmc_0_229 = ($signed(put_obmc_0_228) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %229 = ashr i32 %228, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
put_obmc_0_229_reg <= put_obmc_0_229;
if (reset == 1'b0 && ^(put_obmc_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_229_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %230 = getelementptr inbounds i32* %dst, i32 %217*/
begin
put_obmc_0_230 = (arg_dst + (4 * put_obmc_0_217));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %230 = getelementptr inbounds i32* %dst, i32 %217*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_230_reg <= put_obmc_0_230;
if (reset == 1'b0 && ^(put_obmc_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_230_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %231 = or i32 %217, 1*/
begin
put_obmc_0_231 = (put_obmc_0_217 | 32'd1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %231 = or i32 %217, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_231_reg <= put_obmc_0_231;
if (reset == 1'b0 && ^(put_obmc_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_231_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %232 = getelementptr inbounds i32* %2, i32 %231*/
begin
put_obmc_0_232 = (put_obmc_0_2 + (4 * put_obmc_0_231_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %232 = getelementptr inbounds i32* %2, i32 %231*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_232_reg <= put_obmc_0_232;
if (reset == 1'b0 && ^(put_obmc_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_232_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
begin
put_obmc_0_233 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_73))
begin
put_obmc_0_233_reg <= put_obmc_0_233;
if (reset == 1'b0 && ^(put_obmc_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_233_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %234 = getelementptr inbounds i32* %4, i32 %231*/
begin
put_obmc_0_234 = (put_obmc_0_4 + (4 * put_obmc_0_231_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %234 = getelementptr inbounds i32* %4, i32 %231*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_234_reg <= put_obmc_0_234;
if (reset == 1'b0 && ^(put_obmc_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_234_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
begin
put_obmc_0_235 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_235_reg <= put_obmc_0_235;
if (reset == 1'b0 && ^(put_obmc_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_235_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %236 = shl i32 %235, 1*/
begin
put_obmc_0_236 = (put_obmc_0_235 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %236 = shl i32 %235, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_236_reg <= put_obmc_0_236;
if (reset == 1'b0 && ^(put_obmc_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_236_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %237 = getelementptr inbounds i32* %5, i32 %231*/
begin
put_obmc_0_237 = (put_obmc_0_5 + (4 * put_obmc_0_231_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %237 = getelementptr inbounds i32* %5, i32 %231*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_237_reg <= put_obmc_0_237;
if (reset == 1'b0 && ^(put_obmc_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_237_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
begin
put_obmc_0_238 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_73))
begin
put_obmc_0_238_reg <= put_obmc_0_238;
if (reset == 1'b0 && ^(put_obmc_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_238_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_239 = put_obmc_0_239_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %239 = mul nsw i32 %238, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_239_reg <= put_obmc_0_239;
if (reset == 1'b0 && ^(put_obmc_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_239_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %239 = mul nsw i32 %238, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_239_reg <= put_obmc_0_239;
if (reset == 1'b0 && ^(put_obmc_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_239_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %240 = add i32 %233, 4*/
begin
put_obmc_0_240 = (put_obmc_0_233 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %240 = add i32 %233, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_73))
begin
put_obmc_0_240_reg <= put_obmc_0_240;
if (reset == 1'b0 && ^(put_obmc_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_240_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %241 = add i32 %240, %236*/
begin
put_obmc_0_241 = (put_obmc_0_240_reg + put_obmc_0_236);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %241 = add i32 %240, %236*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_241_reg <= put_obmc_0_241;
if (reset == 1'b0 && ^(put_obmc_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_241_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %242 = add i32 %241, %239*/
begin
put_obmc_0_242 = (put_obmc_0_241 + put_obmc_0_239);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %242 = add i32 %241, %239*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_242_reg <= put_obmc_0_242;
if (reset == 1'b0 && ^(put_obmc_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_242_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %243 = ashr i32 %242, 3*/
begin
put_obmc_0_243 = ($signed(put_obmc_0_242) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %243 = ashr i32 %242, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
put_obmc_0_243_reg <= put_obmc_0_243;
if (reset == 1'b0 && ^(put_obmc_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_243_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %244 = getelementptr inbounds i32* %dst, i32 %231*/
begin
put_obmc_0_244 = (arg_dst + (4 * put_obmc_0_231));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %244 = getelementptr inbounds i32* %dst, i32 %231*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_244_reg <= put_obmc_0_244;
if (reset == 1'b0 && ^(put_obmc_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_244_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %245 = add nsw i32 %217, %stride*/
begin
put_obmc_0_245 = (put_obmc_0_217 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %245 = add nsw i32 %217, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_245_reg <= put_obmc_0_245;
if (reset == 1'b0 && ^(put_obmc_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_245_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %246 = getelementptr inbounds i32* %2, i32 %245*/
begin
put_obmc_0_246 = (put_obmc_0_2 + (4 * put_obmc_0_245_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %246 = getelementptr inbounds i32* %2, i32 %245*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_246_reg <= put_obmc_0_246;
if (reset == 1'b0 && ^(put_obmc_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_246_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
begin
put_obmc_0_247 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_77))
begin
put_obmc_0_247_reg <= put_obmc_0_247;
if (reset == 1'b0 && ^(put_obmc_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_247_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %248 = getelementptr inbounds i32* %4, i32 %245*/
begin
put_obmc_0_248 = (put_obmc_0_4 + (4 * put_obmc_0_245_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %248 = getelementptr inbounds i32* %4, i32 %245*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_248_reg <= put_obmc_0_248;
if (reset == 1'b0 && ^(put_obmc_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_248_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
begin
put_obmc_0_249 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_249_reg <= put_obmc_0_249;
if (reset == 1'b0 && ^(put_obmc_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_249_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %250 = shl i32 %249, 1*/
begin
put_obmc_0_250 = (put_obmc_0_249 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %250 = shl i32 %249, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_250_reg <= put_obmc_0_250;
if (reset == 1'b0 && ^(put_obmc_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_250_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %251 = getelementptr inbounds i32* %5, i32 %245*/
begin
put_obmc_0_251 = (put_obmc_0_5 + (4 * put_obmc_0_245_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %251 = getelementptr inbounds i32* %5, i32 %245*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_251_reg <= put_obmc_0_251;
if (reset == 1'b0 && ^(put_obmc_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_251_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
begin
put_obmc_0_252 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_77))
begin
put_obmc_0_252_reg <= put_obmc_0_252;
if (reset == 1'b0 && ^(put_obmc_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_252_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_253 = put_obmc_0_253_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %253 = mul nsw i32 %252, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_253_reg <= put_obmc_0_253;
if (reset == 1'b0 && ^(put_obmc_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_253_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %253 = mul nsw i32 %252, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_253_reg <= put_obmc_0_253;
if (reset == 1'b0 && ^(put_obmc_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_253_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %254 = add i32 %247, 4*/
begin
put_obmc_0_254 = (put_obmc_0_247 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %254 = add i32 %247, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_77))
begin
put_obmc_0_254_reg <= put_obmc_0_254;
if (reset == 1'b0 && ^(put_obmc_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_254_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %255 = add i32 %254, %250*/
begin
put_obmc_0_255 = (put_obmc_0_254_reg + put_obmc_0_250);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %255 = add i32 %254, %250*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_255_reg <= put_obmc_0_255;
if (reset == 1'b0 && ^(put_obmc_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_255_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %256 = add i32 %255, %253*/
begin
put_obmc_0_256 = (put_obmc_0_255 + put_obmc_0_253);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %256 = add i32 %255, %253*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_256_reg <= put_obmc_0_256;
if (reset == 1'b0 && ^(put_obmc_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_256_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %257 = ashr i32 %256, 3*/
begin
put_obmc_0_257 = ($signed(put_obmc_0_256) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %257 = ashr i32 %256, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
put_obmc_0_257_reg <= put_obmc_0_257;
if (reset == 1'b0 && ^(put_obmc_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_257_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %258 = getelementptr inbounds i32* %dst, i32 %245*/
begin
put_obmc_0_258 = (arg_dst + (4 * put_obmc_0_245_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %258 = getelementptr inbounds i32* %dst, i32 %245*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_258_reg <= put_obmc_0_258;
if (reset == 1'b0 && ^(put_obmc_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_258_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %259 = add nsw i32 %231, %stride*/
begin
put_obmc_0_259 = (put_obmc_0_231 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %259 = add nsw i32 %231, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_259_reg <= put_obmc_0_259;
if (reset == 1'b0 && ^(put_obmc_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_259_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %260 = getelementptr inbounds i32* %2, i32 %259*/
begin
put_obmc_0_260 = (put_obmc_0_2 + (4 * put_obmc_0_259_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %260 = getelementptr inbounds i32* %2, i32 %259*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_260_reg <= put_obmc_0_260;
if (reset == 1'b0 && ^(put_obmc_0_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_260_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
begin
put_obmc_0_261 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_81))
begin
put_obmc_0_261_reg <= put_obmc_0_261;
if (reset == 1'b0 && ^(put_obmc_0_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_261_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %262 = getelementptr inbounds i32* %4, i32 %259*/
begin
put_obmc_0_262 = (put_obmc_0_4 + (4 * put_obmc_0_259_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %262 = getelementptr inbounds i32* %4, i32 %259*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_262_reg <= put_obmc_0_262;
if (reset == 1'b0 && ^(put_obmc_0_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_262_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
begin
put_obmc_0_263 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_263_reg <= put_obmc_0_263;
if (reset == 1'b0 && ^(put_obmc_0_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_263_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %264 = shl i32 %263, 1*/
begin
put_obmc_0_264 = (put_obmc_0_263 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %264 = shl i32 %263, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_264_reg <= put_obmc_0_264;
if (reset == 1'b0 && ^(put_obmc_0_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_264_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %265 = getelementptr inbounds i32* %5, i32 %259*/
begin
put_obmc_0_265 = (put_obmc_0_5 + (4 * put_obmc_0_259_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %265 = getelementptr inbounds i32* %5, i32 %259*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_265_reg <= put_obmc_0_265;
if (reset == 1'b0 && ^(put_obmc_0_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_265_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
begin
put_obmc_0_266 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_81))
begin
put_obmc_0_266_reg <= put_obmc_0_266;
if (reset == 1'b0 && ^(put_obmc_0_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_266_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_267 = put_obmc_0_267_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %267 = mul nsw i32 %266, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_267_reg <= put_obmc_0_267;
if (reset == 1'b0 && ^(put_obmc_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_267_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %267 = mul nsw i32 %266, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_267_reg <= put_obmc_0_267;
if (reset == 1'b0 && ^(put_obmc_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_267_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %268 = add i32 %261, 4*/
begin
put_obmc_0_268 = (put_obmc_0_261 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %268 = add i32 %261, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_81))
begin
put_obmc_0_268_reg <= put_obmc_0_268;
if (reset == 1'b0 && ^(put_obmc_0_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_268_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %269 = add i32 %268, %264*/
begin
put_obmc_0_269 = (put_obmc_0_268_reg + put_obmc_0_264);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %269 = add i32 %268, %264*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_269_reg <= put_obmc_0_269;
if (reset == 1'b0 && ^(put_obmc_0_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_269_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %270 = add i32 %269, %267*/
begin
put_obmc_0_270 = (put_obmc_0_269 + put_obmc_0_267);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %270 = add i32 %269, %267*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_270_reg <= put_obmc_0_270;
if (reset == 1'b0 && ^(put_obmc_0_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_270_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %271 = ashr i32 %270, 3*/
begin
put_obmc_0_271 = ($signed(put_obmc_0_270) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %271 = ashr i32 %270, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
put_obmc_0_271_reg <= put_obmc_0_271;
if (reset == 1'b0 && ^(put_obmc_0_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_271_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %272 = getelementptr inbounds i32* %dst, i32 %259*/
begin
put_obmc_0_272 = (arg_dst + (4 * put_obmc_0_259_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %272 = getelementptr inbounds i32* %dst, i32 %259*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_272_reg <= put_obmc_0_272;
if (reset == 1'b0 && ^(put_obmc_0_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_272_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %273 = add nsw i32 %217, 2*/
begin
put_obmc_0_273 = (put_obmc_0_217 + 32'd2);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %273 = add nsw i32 %217, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_273_reg <= put_obmc_0_273;
if (reset == 1'b0 && ^(put_obmc_0_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_273_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %274 = getelementptr inbounds i32* %2, i32 %273*/
begin
put_obmc_0_274 = (put_obmc_0_2 + (4 * put_obmc_0_273_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %274 = getelementptr inbounds i32* %2, i32 %273*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_274_reg <= put_obmc_0_274;
if (reset == 1'b0 && ^(put_obmc_0_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_274_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
begin
put_obmc_0_275 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_85))
begin
put_obmc_0_275_reg <= put_obmc_0_275;
if (reset == 1'b0 && ^(put_obmc_0_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_275_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %276 = getelementptr inbounds i32* %4, i32 %273*/
begin
put_obmc_0_276 = (put_obmc_0_4 + (4 * put_obmc_0_273_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %276 = getelementptr inbounds i32* %4, i32 %273*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_276_reg <= put_obmc_0_276;
if (reset == 1'b0 && ^(put_obmc_0_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_276_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
begin
put_obmc_0_277 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_277_reg <= put_obmc_0_277;
if (reset == 1'b0 && ^(put_obmc_0_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_277_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %278 = getelementptr inbounds i32* %5, i32 %273*/
begin
put_obmc_0_278 = (put_obmc_0_5 + (4 * put_obmc_0_273_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %278 = getelementptr inbounds i32* %5, i32 %273*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_278_reg <= put_obmc_0_278;
if (reset == 1'b0 && ^(put_obmc_0_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_278_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
begin
put_obmc_0_279 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_85))
begin
put_obmc_0_279_reg <= put_obmc_0_279;
if (reset == 1'b0 && ^(put_obmc_0_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_279_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_280 = put_obmc_0_280_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %280 = mul nsw i32 %279, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_280_reg <= put_obmc_0_280;
if (reset == 1'b0 && ^(put_obmc_0_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_280_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %280 = mul nsw i32 %279, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_280_reg <= put_obmc_0_280;
if (reset == 1'b0 && ^(put_obmc_0_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_280_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %281 = add i32 %275, 4*/
begin
put_obmc_0_281 = (put_obmc_0_275 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %281 = add i32 %275, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_85))
begin
put_obmc_0_281_reg <= put_obmc_0_281;
if (reset == 1'b0 && ^(put_obmc_0_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_281_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %282 = add i32 %281, %277*/
begin
put_obmc_0_282 = (put_obmc_0_281_reg + put_obmc_0_277);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %282 = add i32 %281, %277*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_282_reg <= put_obmc_0_282;
if (reset == 1'b0 && ^(put_obmc_0_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_282_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %283 = add i32 %282, %280*/
begin
put_obmc_0_283 = (put_obmc_0_282 + put_obmc_0_280);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %283 = add i32 %282, %280*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_283_reg <= put_obmc_0_283;
if (reset == 1'b0 && ^(put_obmc_0_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_283_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %284 = ashr i32 %283, 3*/
begin
put_obmc_0_284 = ($signed(put_obmc_0_283) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %284 = ashr i32 %283, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
put_obmc_0_284_reg <= put_obmc_0_284;
if (reset == 1'b0 && ^(put_obmc_0_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_284_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %285 = getelementptr inbounds i32* %dst, i32 %273*/
begin
put_obmc_0_285 = (arg_dst + (4 * put_obmc_0_273_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %285 = getelementptr inbounds i32* %dst, i32 %273*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_285_reg <= put_obmc_0_285;
if (reset == 1'b0 && ^(put_obmc_0_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_285_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %286 = add i32 %217, 3*/
begin
put_obmc_0_286 = (put_obmc_0_217 + 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %286 = add i32 %217, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_286_reg <= put_obmc_0_286;
if (reset == 1'b0 && ^(put_obmc_0_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_286_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %287 = getelementptr inbounds i32* %2, i32 %286*/
begin
put_obmc_0_287 = (put_obmc_0_2 + (4 * put_obmc_0_286_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %287 = getelementptr inbounds i32* %2, i32 %286*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_287_reg <= put_obmc_0_287;
if (reset == 1'b0 && ^(put_obmc_0_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_287_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
begin
put_obmc_0_288 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_89))
begin
put_obmc_0_288_reg <= put_obmc_0_288;
if (reset == 1'b0 && ^(put_obmc_0_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_288_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %289 = getelementptr inbounds i32* %4, i32 %286*/
begin
put_obmc_0_289 = (put_obmc_0_4 + (4 * put_obmc_0_286_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %289 = getelementptr inbounds i32* %4, i32 %286*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_289_reg <= put_obmc_0_289;
if (reset == 1'b0 && ^(put_obmc_0_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_289_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
begin
put_obmc_0_290 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_290_reg <= put_obmc_0_290;
if (reset == 1'b0 && ^(put_obmc_0_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_290_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %291 = getelementptr inbounds i32* %5, i32 %286*/
begin
put_obmc_0_291 = (put_obmc_0_5 + (4 * put_obmc_0_286_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %291 = getelementptr inbounds i32* %5, i32 %286*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_291_reg <= put_obmc_0_291;
if (reset == 1'b0 && ^(put_obmc_0_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_291_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
begin
put_obmc_0_292 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_89))
begin
put_obmc_0_292_reg <= put_obmc_0_292;
if (reset == 1'b0 && ^(put_obmc_0_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_292_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_293 = put_obmc_0_293_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %293 = mul nsw i32 %292, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_293_reg <= put_obmc_0_293;
if (reset == 1'b0 && ^(put_obmc_0_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_293_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %293 = mul nsw i32 %292, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_293_reg <= put_obmc_0_293;
if (reset == 1'b0 && ^(put_obmc_0_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_293_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %294 = add i32 %288, 4*/
begin
put_obmc_0_294 = (put_obmc_0_288 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %294 = add i32 %288, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_89))
begin
put_obmc_0_294_reg <= put_obmc_0_294;
if (reset == 1'b0 && ^(put_obmc_0_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_294_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %295 = add i32 %294, %290*/
begin
put_obmc_0_295 = (put_obmc_0_294_reg + put_obmc_0_290);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %295 = add i32 %294, %290*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_295_reg <= put_obmc_0_295;
if (reset == 1'b0 && ^(put_obmc_0_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_295_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %296 = add i32 %295, %293*/
begin
put_obmc_0_296 = (put_obmc_0_295 + put_obmc_0_293);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %296 = add i32 %295, %293*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_296_reg <= put_obmc_0_296;
if (reset == 1'b0 && ^(put_obmc_0_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_296_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %297 = ashr i32 %296, 3*/
begin
put_obmc_0_297 = ($signed(put_obmc_0_296) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %297 = ashr i32 %296, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
put_obmc_0_297_reg <= put_obmc_0_297;
if (reset == 1'b0 && ^(put_obmc_0_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_297_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %298 = getelementptr inbounds i32* %dst, i32 %286*/
begin
put_obmc_0_298 = (arg_dst + (4 * put_obmc_0_286_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %298 = getelementptr inbounds i32* %dst, i32 %286*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_298_reg <= put_obmc_0_298;
if (reset == 1'b0 && ^(put_obmc_0_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_298_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %299 = add nsw i32 %273, %stride*/
begin
put_obmc_0_299 = (put_obmc_0_273 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %299 = add nsw i32 %273, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_299_reg <= put_obmc_0_299;
if (reset == 1'b0 && ^(put_obmc_0_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_299_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %300 = getelementptr inbounds i32* %2, i32 %299*/
begin
put_obmc_0_300 = (put_obmc_0_2 + (4 * put_obmc_0_299_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %300 = getelementptr inbounds i32* %2, i32 %299*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_300_reg <= put_obmc_0_300;
if (reset == 1'b0 && ^(put_obmc_0_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_300_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
begin
put_obmc_0_301 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_93))
begin
put_obmc_0_301_reg <= put_obmc_0_301;
if (reset == 1'b0 && ^(put_obmc_0_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_301_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %302 = getelementptr inbounds i32* %4, i32 %299*/
begin
put_obmc_0_302 = (put_obmc_0_4 + (4 * put_obmc_0_299_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %302 = getelementptr inbounds i32* %4, i32 %299*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_302_reg <= put_obmc_0_302;
if (reset == 1'b0 && ^(put_obmc_0_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_302_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
begin
put_obmc_0_303 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_303_reg <= put_obmc_0_303;
if (reset == 1'b0 && ^(put_obmc_0_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_303_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %304 = getelementptr inbounds i32* %5, i32 %299*/
begin
put_obmc_0_304 = (put_obmc_0_5 + (4 * put_obmc_0_299_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %304 = getelementptr inbounds i32* %5, i32 %299*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_304_reg <= put_obmc_0_304;
if (reset == 1'b0 && ^(put_obmc_0_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_304_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
begin
put_obmc_0_305 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_93))
begin
put_obmc_0_305_reg <= put_obmc_0_305;
if (reset == 1'b0 && ^(put_obmc_0_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_305_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_306 = put_obmc_0_306_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %306 = mul nsw i32 %305, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_306_reg <= put_obmc_0_306;
if (reset == 1'b0 && ^(put_obmc_0_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_306_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %306 = mul nsw i32 %305, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_306_reg <= put_obmc_0_306;
if (reset == 1'b0 && ^(put_obmc_0_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_306_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %307 = add i32 %301, 4*/
begin
put_obmc_0_307 = (put_obmc_0_301 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %307 = add i32 %301, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_93))
begin
put_obmc_0_307_reg <= put_obmc_0_307;
if (reset == 1'b0 && ^(put_obmc_0_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_307_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %308 = add i32 %307, %303*/
begin
put_obmc_0_308 = (put_obmc_0_307_reg + put_obmc_0_303);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %308 = add i32 %307, %303*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_308_reg <= put_obmc_0_308;
if (reset == 1'b0 && ^(put_obmc_0_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_308_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %309 = add i32 %308, %306*/
begin
put_obmc_0_309 = (put_obmc_0_308 + put_obmc_0_306);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %309 = add i32 %308, %306*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_309_reg <= put_obmc_0_309;
if (reset == 1'b0 && ^(put_obmc_0_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_309_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %310 = ashr i32 %309, 3*/
begin
put_obmc_0_310 = ($signed(put_obmc_0_309) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %310 = ashr i32 %309, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
put_obmc_0_310_reg <= put_obmc_0_310;
if (reset == 1'b0 && ^(put_obmc_0_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_310_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %311 = getelementptr inbounds i32* %dst, i32 %299*/
begin
put_obmc_0_311 = (arg_dst + (4 * put_obmc_0_299_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %311 = getelementptr inbounds i32* %dst, i32 %299*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_311_reg <= put_obmc_0_311;
if (reset == 1'b0 && ^(put_obmc_0_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_311_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %312 = add nsw i32 %286, %stride*/
begin
put_obmc_0_312 = (put_obmc_0_286 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %312 = add nsw i32 %286, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_312_reg <= put_obmc_0_312;
if (reset == 1'b0 && ^(put_obmc_0_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_312_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %313 = getelementptr inbounds i32* %2, i32 %312*/
begin
put_obmc_0_313 = (put_obmc_0_2 + (4 * put_obmc_0_312_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %313 = getelementptr inbounds i32* %2, i32 %312*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_313_reg <= put_obmc_0_313;
if (reset == 1'b0 && ^(put_obmc_0_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_313_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
begin
put_obmc_0_314 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_97))
begin
put_obmc_0_314_reg <= put_obmc_0_314;
if (reset == 1'b0 && ^(put_obmc_0_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_314_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %315 = getelementptr inbounds i32* %4, i32 %312*/
begin
put_obmc_0_315 = (put_obmc_0_4 + (4 * put_obmc_0_312_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %315 = getelementptr inbounds i32* %4, i32 %312*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_315_reg <= put_obmc_0_315;
if (reset == 1'b0 && ^(put_obmc_0_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_315_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
begin
put_obmc_0_316 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_316_reg <= put_obmc_0_316;
if (reset == 1'b0 && ^(put_obmc_0_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_316_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %317 = getelementptr inbounds i32* %5, i32 %312*/
begin
put_obmc_0_317 = (put_obmc_0_5 + (4 * put_obmc_0_312_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %317 = getelementptr inbounds i32* %5, i32 %312*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_317_reg <= put_obmc_0_317;
if (reset == 1'b0 && ^(put_obmc_0_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_317_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
begin
put_obmc_0_318 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_97))
begin
put_obmc_0_318_reg <= put_obmc_0_318;
if (reset == 1'b0 && ^(put_obmc_0_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_318_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_319 = put_obmc_0_319_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %319 = mul nsw i32 %318, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_319_reg <= put_obmc_0_319;
if (reset == 1'b0 && ^(put_obmc_0_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_319_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %319 = mul nsw i32 %318, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_319_reg <= put_obmc_0_319;
if (reset == 1'b0 && ^(put_obmc_0_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_319_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %320 = add i32 %314, 4*/
begin
put_obmc_0_320 = (put_obmc_0_314 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %320 = add i32 %314, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_97))
begin
put_obmc_0_320_reg <= put_obmc_0_320;
if (reset == 1'b0 && ^(put_obmc_0_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_320_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %321 = add i32 %320, %316*/
begin
put_obmc_0_321 = (put_obmc_0_320_reg + put_obmc_0_316);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %321 = add i32 %320, %316*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_321_reg <= put_obmc_0_321;
if (reset == 1'b0 && ^(put_obmc_0_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_321_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %322 = add i32 %321, %319*/
begin
put_obmc_0_322 = (put_obmc_0_321 + put_obmc_0_319);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %322 = add i32 %321, %319*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_322_reg <= put_obmc_0_322;
if (reset == 1'b0 && ^(put_obmc_0_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_322_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %323 = ashr i32 %322, 3*/
begin
put_obmc_0_323 = ($signed(put_obmc_0_322) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %323 = ashr i32 %322, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
put_obmc_0_323_reg <= put_obmc_0_323;
if (reset == 1'b0 && ^(put_obmc_0_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_323_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %324 = getelementptr inbounds i32* %dst, i32 %312*/
begin
put_obmc_0_324 = (arg_dst + (4 * put_obmc_0_312_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %324 = getelementptr inbounds i32* %dst, i32 %312*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_324_reg <= put_obmc_0_324;
if (reset == 1'b0 && ^(put_obmc_0_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_324_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %325 = add nsw i32 %217, 4*/
begin
put_obmc_0_325 = (put_obmc_0_217 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %325 = add nsw i32 %217, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_325_reg <= put_obmc_0_325;
if (reset == 1'b0 && ^(put_obmc_0_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_325_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %326 = getelementptr inbounds i32* %2, i32 %325*/
begin
put_obmc_0_326 = (put_obmc_0_2 + (4 * put_obmc_0_325_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %326 = getelementptr inbounds i32* %2, i32 %325*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_326_reg <= put_obmc_0_326;
if (reset == 1'b0 && ^(put_obmc_0_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_326_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
begin
put_obmc_0_327 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_101))
begin
put_obmc_0_327_reg <= put_obmc_0_327;
if (reset == 1'b0 && ^(put_obmc_0_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_327_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %328 = getelementptr inbounds i32* %5, i32 %325*/
begin
put_obmc_0_328 = (put_obmc_0_5 + (4 * put_obmc_0_325_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %328 = getelementptr inbounds i32* %5, i32 %325*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_328_reg <= put_obmc_0_328;
if (reset == 1'b0 && ^(put_obmc_0_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_328_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
begin
put_obmc_0_329 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_101))
begin
put_obmc_0_329_reg <= put_obmc_0_329;
if (reset == 1'b0 && ^(put_obmc_0_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_329_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_330 = put_obmc_0_330_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %330 = mul nsw i32 %329, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_330_reg <= put_obmc_0_330;
if (reset == 1'b0 && ^(put_obmc_0_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_330_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %330 = mul nsw i32 %329, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_330_reg <= put_obmc_0_330;
if (reset == 1'b0 && ^(put_obmc_0_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_330_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %331 = getelementptr inbounds i32* %7, i32 %325*/
begin
put_obmc_0_331 = (put_obmc_0_7 + (4 * put_obmc_0_325_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %331 = getelementptr inbounds i32* %7, i32 %325*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_331_reg <= put_obmc_0_331;
if (reset == 1'b0 && ^(put_obmc_0_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_331_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
begin
put_obmc_0_332 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_332_reg <= put_obmc_0_332;
if (reset == 1'b0 && ^(put_obmc_0_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_332_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %333 = add i32 %327, 4*/
begin
put_obmc_0_333 = (put_obmc_0_327 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %333 = add i32 %327, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_101))
begin
put_obmc_0_333_reg <= put_obmc_0_333;
if (reset == 1'b0 && ^(put_obmc_0_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_333_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %334 = add i32 %333, %332*/
begin
put_obmc_0_334 = (put_obmc_0_333_reg + put_obmc_0_332);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %334 = add i32 %333, %332*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_334_reg <= put_obmc_0_334;
if (reset == 1'b0 && ^(put_obmc_0_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_334_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %335 = add i32 %334, %330*/
begin
put_obmc_0_335 = (put_obmc_0_334 + put_obmc_0_330);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %335 = add i32 %334, %330*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_335_reg <= put_obmc_0_335;
if (reset == 1'b0 && ^(put_obmc_0_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_335_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %336 = ashr i32 %335, 3*/
begin
put_obmc_0_336 = ($signed(put_obmc_0_335) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %336 = ashr i32 %335, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
put_obmc_0_336_reg <= put_obmc_0_336;
if (reset == 1'b0 && ^(put_obmc_0_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_336_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %337 = getelementptr inbounds i32* %dst, i32 %325*/
begin
put_obmc_0_337 = (arg_dst + (4 * put_obmc_0_325_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %337 = getelementptr inbounds i32* %dst, i32 %325*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_337_reg <= put_obmc_0_337;
if (reset == 1'b0 && ^(put_obmc_0_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_337_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %338 = add i32 %217, 5*/
begin
put_obmc_0_338 = (put_obmc_0_217 + 32'd5);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %338 = add i32 %217, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_338_reg <= put_obmc_0_338;
if (reset == 1'b0 && ^(put_obmc_0_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_338_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %339 = getelementptr inbounds i32* %2, i32 %338*/
begin
put_obmc_0_339 = (put_obmc_0_2 + (4 * put_obmc_0_338_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %339 = getelementptr inbounds i32* %2, i32 %338*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_339_reg <= put_obmc_0_339;
if (reset == 1'b0 && ^(put_obmc_0_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_339_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
begin
put_obmc_0_340 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_105))
begin
put_obmc_0_340_reg <= put_obmc_0_340;
if (reset == 1'b0 && ^(put_obmc_0_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_340_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %341 = getelementptr inbounds i32* %5, i32 %338*/
begin
put_obmc_0_341 = (put_obmc_0_5 + (4 * put_obmc_0_338_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %341 = getelementptr inbounds i32* %5, i32 %338*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_341_reg <= put_obmc_0_341;
if (reset == 1'b0 && ^(put_obmc_0_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_341_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
begin
put_obmc_0_342 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_105))
begin
put_obmc_0_342_reg <= put_obmc_0_342;
if (reset == 1'b0 && ^(put_obmc_0_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_342_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_343 = put_obmc_0_343_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %343 = mul nsw i32 %342, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_343_reg <= put_obmc_0_343;
if (reset == 1'b0 && ^(put_obmc_0_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_343_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %343 = mul nsw i32 %342, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_343_reg <= put_obmc_0_343;
if (reset == 1'b0 && ^(put_obmc_0_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_343_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %344 = getelementptr inbounds i32* %7, i32 %338*/
begin
put_obmc_0_344 = (put_obmc_0_7 + (4 * put_obmc_0_338_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %344 = getelementptr inbounds i32* %7, i32 %338*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_344_reg <= put_obmc_0_344;
if (reset == 1'b0 && ^(put_obmc_0_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_344_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
begin
put_obmc_0_345 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_345_reg <= put_obmc_0_345;
if (reset == 1'b0 && ^(put_obmc_0_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_345_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %346 = add i32 %340, 4*/
begin
put_obmc_0_346 = (put_obmc_0_340 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %346 = add i32 %340, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_105))
begin
put_obmc_0_346_reg <= put_obmc_0_346;
if (reset == 1'b0 && ^(put_obmc_0_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_346_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %347 = add i32 %346, %345*/
begin
put_obmc_0_347 = (put_obmc_0_346_reg + put_obmc_0_345);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %347 = add i32 %346, %345*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_347_reg <= put_obmc_0_347;
if (reset == 1'b0 && ^(put_obmc_0_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_347_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %348 = add i32 %347, %343*/
begin
put_obmc_0_348 = (put_obmc_0_347 + put_obmc_0_343);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %348 = add i32 %347, %343*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_348_reg <= put_obmc_0_348;
if (reset == 1'b0 && ^(put_obmc_0_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_348_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %349 = ashr i32 %348, 3*/
begin
put_obmc_0_349 = ($signed(put_obmc_0_348) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %349 = ashr i32 %348, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
put_obmc_0_349_reg <= put_obmc_0_349;
if (reset == 1'b0 && ^(put_obmc_0_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_349_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %350 = getelementptr inbounds i32* %dst, i32 %338*/
begin
put_obmc_0_350 = (arg_dst + (4 * put_obmc_0_338_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %350 = getelementptr inbounds i32* %dst, i32 %338*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_350_reg <= put_obmc_0_350;
if (reset == 1'b0 && ^(put_obmc_0_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_350_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %351 = add nsw i32 %325, %stride*/
begin
put_obmc_0_351 = (put_obmc_0_325 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %351 = add nsw i32 %325, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_351_reg <= put_obmc_0_351;
if (reset == 1'b0 && ^(put_obmc_0_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_351_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %352 = getelementptr inbounds i32* %2, i32 %351*/
begin
put_obmc_0_352 = (put_obmc_0_2 + (4 * put_obmc_0_351_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %352 = getelementptr inbounds i32* %2, i32 %351*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_352_reg <= put_obmc_0_352;
if (reset == 1'b0 && ^(put_obmc_0_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_352_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
begin
put_obmc_0_353 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_109))
begin
put_obmc_0_353_reg <= put_obmc_0_353;
if (reset == 1'b0 && ^(put_obmc_0_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_353_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %354 = getelementptr inbounds i32* %5, i32 %351*/
begin
put_obmc_0_354 = (put_obmc_0_5 + (4 * put_obmc_0_351_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %354 = getelementptr inbounds i32* %5, i32 %351*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_354_reg <= put_obmc_0_354;
if (reset == 1'b0 && ^(put_obmc_0_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_354_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
begin
put_obmc_0_355 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_109))
begin
put_obmc_0_355_reg <= put_obmc_0_355;
if (reset == 1'b0 && ^(put_obmc_0_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_355_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_356 = put_obmc_0_356_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %356 = mul nsw i32 %355, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_356_reg <= put_obmc_0_356;
if (reset == 1'b0 && ^(put_obmc_0_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_356_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %356 = mul nsw i32 %355, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_356_reg <= put_obmc_0_356;
if (reset == 1'b0 && ^(put_obmc_0_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_356_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %357 = getelementptr inbounds i32* %7, i32 %351*/
begin
put_obmc_0_357 = (put_obmc_0_7 + (4 * put_obmc_0_351_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %357 = getelementptr inbounds i32* %7, i32 %351*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_357_reg <= put_obmc_0_357;
if (reset == 1'b0 && ^(put_obmc_0_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_357_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
begin
put_obmc_0_358 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_358_reg <= put_obmc_0_358;
if (reset == 1'b0 && ^(put_obmc_0_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_358_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %359 = add i32 %353, 4*/
begin
put_obmc_0_359 = (put_obmc_0_353 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %359 = add i32 %353, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_109))
begin
put_obmc_0_359_reg <= put_obmc_0_359;
if (reset == 1'b0 && ^(put_obmc_0_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_359_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %360 = add i32 %359, %358*/
begin
put_obmc_0_360 = (put_obmc_0_359_reg + put_obmc_0_358);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %360 = add i32 %359, %358*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_360_reg <= put_obmc_0_360;
if (reset == 1'b0 && ^(put_obmc_0_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_360_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %361 = add i32 %360, %356*/
begin
put_obmc_0_361 = (put_obmc_0_360 + put_obmc_0_356);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %361 = add i32 %360, %356*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_361_reg <= put_obmc_0_361;
if (reset == 1'b0 && ^(put_obmc_0_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_361_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %362 = ashr i32 %361, 3*/
begin
put_obmc_0_362 = ($signed(put_obmc_0_361) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %362 = ashr i32 %361, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
put_obmc_0_362_reg <= put_obmc_0_362;
if (reset == 1'b0 && ^(put_obmc_0_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_362_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %363 = getelementptr inbounds i32* %dst, i32 %351*/
begin
put_obmc_0_363 = (arg_dst + (4 * put_obmc_0_351_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %363 = getelementptr inbounds i32* %dst, i32 %351*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_363_reg <= put_obmc_0_363;
if (reset == 1'b0 && ^(put_obmc_0_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_363_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %364 = add nsw i32 %338, %stride*/
begin
put_obmc_0_364 = (put_obmc_0_338 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %364 = add nsw i32 %338, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_364_reg <= put_obmc_0_364;
if (reset == 1'b0 && ^(put_obmc_0_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_364_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %365 = getelementptr inbounds i32* %2, i32 %364*/
begin
put_obmc_0_365 = (put_obmc_0_2 + (4 * put_obmc_0_364_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %365 = getelementptr inbounds i32* %2, i32 %364*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_365_reg <= put_obmc_0_365;
if (reset == 1'b0 && ^(put_obmc_0_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_365_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
begin
put_obmc_0_366 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_113))
begin
put_obmc_0_366_reg <= put_obmc_0_366;
if (reset == 1'b0 && ^(put_obmc_0_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_366_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %367 = getelementptr inbounds i32* %5, i32 %364*/
begin
put_obmc_0_367 = (put_obmc_0_5 + (4 * put_obmc_0_364_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %367 = getelementptr inbounds i32* %5, i32 %364*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_367_reg <= put_obmc_0_367;
if (reset == 1'b0 && ^(put_obmc_0_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_367_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
begin
put_obmc_0_368 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_113))
begin
put_obmc_0_368_reg <= put_obmc_0_368;
if (reset == 1'b0 && ^(put_obmc_0_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_368_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_369 = put_obmc_0_369_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %369 = mul nsw i32 %368, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_369_reg <= put_obmc_0_369;
if (reset == 1'b0 && ^(put_obmc_0_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_369_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %369 = mul nsw i32 %368, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_369_reg <= put_obmc_0_369;
if (reset == 1'b0 && ^(put_obmc_0_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_369_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %370 = getelementptr inbounds i32* %7, i32 %364*/
begin
put_obmc_0_370 = (put_obmc_0_7 + (4 * put_obmc_0_364_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %370 = getelementptr inbounds i32* %7, i32 %364*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_370_reg <= put_obmc_0_370;
if (reset == 1'b0 && ^(put_obmc_0_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_370_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
begin
put_obmc_0_371 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_371_reg <= put_obmc_0_371;
if (reset == 1'b0 && ^(put_obmc_0_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_371_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %372 = add i32 %366, 4*/
begin
put_obmc_0_372 = (put_obmc_0_366 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %372 = add i32 %366, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_113))
begin
put_obmc_0_372_reg <= put_obmc_0_372;
if (reset == 1'b0 && ^(put_obmc_0_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_372_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %373 = add i32 %372, %371*/
begin
put_obmc_0_373 = (put_obmc_0_372_reg + put_obmc_0_371);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %373 = add i32 %372, %371*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_373_reg <= put_obmc_0_373;
if (reset == 1'b0 && ^(put_obmc_0_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_373_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %374 = add i32 %373, %369*/
begin
put_obmc_0_374 = (put_obmc_0_373 + put_obmc_0_369);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %374 = add i32 %373, %369*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_374_reg <= put_obmc_0_374;
if (reset == 1'b0 && ^(put_obmc_0_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_374_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %375 = ashr i32 %374, 3*/
begin
put_obmc_0_375 = ($signed(put_obmc_0_374) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %375 = ashr i32 %374, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
put_obmc_0_375_reg <= put_obmc_0_375;
if (reset == 1'b0 && ^(put_obmc_0_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_375_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %376 = getelementptr inbounds i32* %dst, i32 %364*/
begin
put_obmc_0_376 = (arg_dst + (4 * put_obmc_0_364_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %376 = getelementptr inbounds i32* %dst, i32 %364*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_376_reg <= put_obmc_0_376;
if (reset == 1'b0 && ^(put_obmc_0_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_376_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %377 = add nsw i32 %217, 6*/
begin
put_obmc_0_377 = (put_obmc_0_217 + 32'd6);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %377 = add nsw i32 %217, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_377_reg <= put_obmc_0_377;
if (reset == 1'b0 && ^(put_obmc_0_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_377_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %378 = getelementptr inbounds i32* %2, i32 %377*/
begin
put_obmc_0_378 = (put_obmc_0_2 + (4 * put_obmc_0_377_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %378 = getelementptr inbounds i32* %2, i32 %377*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_378_reg <= put_obmc_0_378;
if (reset == 1'b0 && ^(put_obmc_0_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_378_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
begin
put_obmc_0_379 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_117))
begin
put_obmc_0_379_reg <= put_obmc_0_379;
if (reset == 1'b0 && ^(put_obmc_0_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_379_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %380 = getelementptr inbounds i32* %5, i32 %377*/
begin
put_obmc_0_380 = (put_obmc_0_5 + (4 * put_obmc_0_377_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %380 = getelementptr inbounds i32* %5, i32 %377*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_380_reg <= put_obmc_0_380;
if (reset == 1'b0 && ^(put_obmc_0_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_380_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
begin
put_obmc_0_381 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_117))
begin
put_obmc_0_381_reg <= put_obmc_0_381;
if (reset == 1'b0 && ^(put_obmc_0_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_381_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_382 = put_obmc_0_382_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %382 = mul nsw i32 %381, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_382_reg <= put_obmc_0_382;
if (reset == 1'b0 && ^(put_obmc_0_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_382_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %382 = mul nsw i32 %381, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_382_reg <= put_obmc_0_382;
if (reset == 1'b0 && ^(put_obmc_0_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_382_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %383 = getelementptr inbounds i32* %7, i32 %377*/
begin
put_obmc_0_383 = (put_obmc_0_7 + (4 * put_obmc_0_377_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %383 = getelementptr inbounds i32* %7, i32 %377*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_383_reg <= put_obmc_0_383;
if (reset == 1'b0 && ^(put_obmc_0_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_383_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
begin
put_obmc_0_384 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_384_reg <= put_obmc_0_384;
if (reset == 1'b0 && ^(put_obmc_0_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_384_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %385 = shl i32 %384, 1*/
begin
put_obmc_0_385 = (put_obmc_0_384 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %385 = shl i32 %384, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_385_reg <= put_obmc_0_385;
if (reset == 1'b0 && ^(put_obmc_0_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_385_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %386 = add i32 %379, 4*/
begin
put_obmc_0_386 = (put_obmc_0_379 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %386 = add i32 %379, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_117))
begin
put_obmc_0_386_reg <= put_obmc_0_386;
if (reset == 1'b0 && ^(put_obmc_0_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_386_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %387 = add i32 %386, %382*/
begin
put_obmc_0_387 = (put_obmc_0_386_reg + put_obmc_0_382);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %387 = add i32 %386, %382*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_387_reg <= put_obmc_0_387;
if (reset == 1'b0 && ^(put_obmc_0_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_387_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %388 = add i32 %387, %385*/
begin
put_obmc_0_388 = (put_obmc_0_387 + put_obmc_0_385);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %388 = add i32 %387, %385*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_388_reg <= put_obmc_0_388;
if (reset == 1'b0 && ^(put_obmc_0_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_388_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %389 = ashr i32 %388, 3*/
begin
put_obmc_0_389 = ($signed(put_obmc_0_388) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %389 = ashr i32 %388, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
put_obmc_0_389_reg <= put_obmc_0_389;
if (reset == 1'b0 && ^(put_obmc_0_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_389_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %390 = getelementptr inbounds i32* %dst, i32 %377*/
begin
put_obmc_0_390 = (arg_dst + (4 * put_obmc_0_377_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %390 = getelementptr inbounds i32* %dst, i32 %377*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_390_reg <= put_obmc_0_390;
if (reset == 1'b0 && ^(put_obmc_0_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_390_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %391 = add i32 %217, 7*/
begin
put_obmc_0_391 = (put_obmc_0_217 + 32'd7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %391 = add i32 %217, 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_391_reg <= put_obmc_0_391;
if (reset == 1'b0 && ^(put_obmc_0_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_391_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %392 = getelementptr inbounds i32* %2, i32 %391*/
begin
put_obmc_0_392 = (put_obmc_0_2 + (4 * put_obmc_0_391_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %392 = getelementptr inbounds i32* %2, i32 %391*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_392_reg <= put_obmc_0_392;
if (reset == 1'b0 && ^(put_obmc_0_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_392_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
begin
put_obmc_0_393 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_121))
begin
put_obmc_0_393_reg <= put_obmc_0_393;
if (reset == 1'b0 && ^(put_obmc_0_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_393_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %394 = getelementptr inbounds i32* %5, i32 %391*/
begin
put_obmc_0_394 = (put_obmc_0_5 + (4 * put_obmc_0_391_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %394 = getelementptr inbounds i32* %5, i32 %391*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_394_reg <= put_obmc_0_394;
if (reset == 1'b0 && ^(put_obmc_0_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_394_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
begin
put_obmc_0_395 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_121))
begin
put_obmc_0_395_reg <= put_obmc_0_395;
if (reset == 1'b0 && ^(put_obmc_0_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_395_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_396 = put_obmc_0_396_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %396 = mul nsw i32 %395, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_396_reg <= put_obmc_0_396;
if (reset == 1'b0 && ^(put_obmc_0_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_396_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %396 = mul nsw i32 %395, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_396_reg <= put_obmc_0_396;
if (reset == 1'b0 && ^(put_obmc_0_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_396_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %397 = getelementptr inbounds i32* %7, i32 %391*/
begin
put_obmc_0_397 = (put_obmc_0_7 + (4 * put_obmc_0_391_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %397 = getelementptr inbounds i32* %7, i32 %391*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_397_reg <= put_obmc_0_397;
if (reset == 1'b0 && ^(put_obmc_0_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_397_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
begin
put_obmc_0_398 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_398_reg <= put_obmc_0_398;
if (reset == 1'b0 && ^(put_obmc_0_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_398_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %399 = shl i32 %398, 1*/
begin
put_obmc_0_399 = (put_obmc_0_398 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %399 = shl i32 %398, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_399_reg <= put_obmc_0_399;
if (reset == 1'b0 && ^(put_obmc_0_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_399_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %400 = add i32 %393, 4*/
begin
put_obmc_0_400 = (put_obmc_0_393 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %400 = add i32 %393, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_121))
begin
put_obmc_0_400_reg <= put_obmc_0_400;
if (reset == 1'b0 && ^(put_obmc_0_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_400_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %401 = add i32 %400, %396*/
begin
put_obmc_0_401 = (put_obmc_0_400_reg + put_obmc_0_396);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %401 = add i32 %400, %396*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_401_reg <= put_obmc_0_401;
if (reset == 1'b0 && ^(put_obmc_0_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_401_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %402 = add i32 %401, %399*/
begin
put_obmc_0_402 = (put_obmc_0_401 + put_obmc_0_399);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %402 = add i32 %401, %399*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_402_reg <= put_obmc_0_402;
if (reset == 1'b0 && ^(put_obmc_0_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_402_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %403 = ashr i32 %402, 3*/
begin
put_obmc_0_403 = ($signed(put_obmc_0_402) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %403 = ashr i32 %402, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
put_obmc_0_403_reg <= put_obmc_0_403;
if (reset == 1'b0 && ^(put_obmc_0_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_403_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %404 = getelementptr inbounds i32* %dst, i32 %391*/
begin
put_obmc_0_404 = (arg_dst + (4 * put_obmc_0_391_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %404 = getelementptr inbounds i32* %dst, i32 %391*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_404_reg <= put_obmc_0_404;
if (reset == 1'b0 && ^(put_obmc_0_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_404_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %405 = add nsw i32 %377, %stride*/
begin
put_obmc_0_405 = (put_obmc_0_377 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %405 = add nsw i32 %377, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_405_reg <= put_obmc_0_405;
if (reset == 1'b0 && ^(put_obmc_0_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_405_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %406 = getelementptr inbounds i32* %2, i32 %405*/
begin
put_obmc_0_406 = (put_obmc_0_2 + (4 * put_obmc_0_405_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %406 = getelementptr inbounds i32* %2, i32 %405*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_406_reg <= put_obmc_0_406;
if (reset == 1'b0 && ^(put_obmc_0_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_406_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
begin
put_obmc_0_407 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_125))
begin
put_obmc_0_407_reg <= put_obmc_0_407;
if (reset == 1'b0 && ^(put_obmc_0_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_407_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %408 = getelementptr inbounds i32* %5, i32 %405*/
begin
put_obmc_0_408 = (put_obmc_0_5 + (4 * put_obmc_0_405_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %408 = getelementptr inbounds i32* %5, i32 %405*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_408_reg <= put_obmc_0_408;
if (reset == 1'b0 && ^(put_obmc_0_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_408_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
begin
put_obmc_0_409 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_125))
begin
put_obmc_0_409_reg <= put_obmc_0_409;
if (reset == 1'b0 && ^(put_obmc_0_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_409_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_410 = put_obmc_0_410_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %410 = mul nsw i32 %409, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_410_reg <= put_obmc_0_410;
if (reset == 1'b0 && ^(put_obmc_0_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_410_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %410 = mul nsw i32 %409, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_410_reg <= put_obmc_0_410;
if (reset == 1'b0 && ^(put_obmc_0_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_410_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %411 = getelementptr inbounds i32* %7, i32 %405*/
begin
put_obmc_0_411 = (put_obmc_0_7 + (4 * put_obmc_0_405_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %411 = getelementptr inbounds i32* %7, i32 %405*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_411_reg <= put_obmc_0_411;
if (reset == 1'b0 && ^(put_obmc_0_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_411_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
begin
put_obmc_0_412 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_412_reg <= put_obmc_0_412;
if (reset == 1'b0 && ^(put_obmc_0_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_412_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %413 = shl i32 %412, 1*/
begin
put_obmc_0_413 = (put_obmc_0_412 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %413 = shl i32 %412, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_413_reg <= put_obmc_0_413;
if (reset == 1'b0 && ^(put_obmc_0_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_413_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %414 = add i32 %407, 4*/
begin
put_obmc_0_414 = (put_obmc_0_407 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %414 = add i32 %407, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_125))
begin
put_obmc_0_414_reg <= put_obmc_0_414;
if (reset == 1'b0 && ^(put_obmc_0_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_414_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %415 = add i32 %414, %410*/
begin
put_obmc_0_415 = (put_obmc_0_414_reg + put_obmc_0_410);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %415 = add i32 %414, %410*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_415_reg <= put_obmc_0_415;
if (reset == 1'b0 && ^(put_obmc_0_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_415_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %416 = add i32 %415, %413*/
begin
put_obmc_0_416 = (put_obmc_0_415 + put_obmc_0_413);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %416 = add i32 %415, %413*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_416_reg <= put_obmc_0_416;
if (reset == 1'b0 && ^(put_obmc_0_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_416_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %417 = ashr i32 %416, 3*/
begin
put_obmc_0_417 = ($signed(put_obmc_0_416) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %417 = ashr i32 %416, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
put_obmc_0_417_reg <= put_obmc_0_417;
if (reset == 1'b0 && ^(put_obmc_0_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_417_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %418 = getelementptr inbounds i32* %dst, i32 %405*/
begin
put_obmc_0_418 = (arg_dst + (4 * put_obmc_0_405_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %418 = getelementptr inbounds i32* %dst, i32 %405*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_418_reg <= put_obmc_0_418;
if (reset == 1'b0 && ^(put_obmc_0_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_418_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %419 = add nsw i32 %391, %stride*/
begin
put_obmc_0_419 = (put_obmc_0_391 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %419 = add nsw i32 %391, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_419_reg <= put_obmc_0_419;
if (reset == 1'b0 && ^(put_obmc_0_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_419_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %420 = getelementptr inbounds i32* %2, i32 %419*/
begin
put_obmc_0_420 = (put_obmc_0_2 + (4 * put_obmc_0_419_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %420 = getelementptr inbounds i32* %2, i32 %419*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_420_reg <= put_obmc_0_420;
if (reset == 1'b0 && ^(put_obmc_0_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_420_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
begin
put_obmc_0_421 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_129))
begin
put_obmc_0_421_reg <= put_obmc_0_421;
if (reset == 1'b0 && ^(put_obmc_0_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_421_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %422 = getelementptr inbounds i32* %5, i32 %419*/
begin
put_obmc_0_422 = (put_obmc_0_5 + (4 * put_obmc_0_419_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %422 = getelementptr inbounds i32* %5, i32 %419*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_422_reg <= put_obmc_0_422;
if (reset == 1'b0 && ^(put_obmc_0_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_422_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
begin
put_obmc_0_423 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_129))
begin
put_obmc_0_423_reg <= put_obmc_0_423;
if (reset == 1'b0 && ^(put_obmc_0_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_423_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_424 = put_obmc_0_424_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %424 = mul nsw i32 %423, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_424_reg <= put_obmc_0_424;
if (reset == 1'b0 && ^(put_obmc_0_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_424_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %424 = mul nsw i32 %423, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_424_reg <= put_obmc_0_424;
if (reset == 1'b0 && ^(put_obmc_0_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_424_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %425 = getelementptr inbounds i32* %7, i32 %419*/
begin
put_obmc_0_425 = (put_obmc_0_7 + (4 * put_obmc_0_419_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %425 = getelementptr inbounds i32* %7, i32 %419*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_425_reg <= put_obmc_0_425;
if (reset == 1'b0 && ^(put_obmc_0_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_425_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
begin
put_obmc_0_426 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_426_reg <= put_obmc_0_426;
if (reset == 1'b0 && ^(put_obmc_0_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_426_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %427 = shl i32 %426, 1*/
begin
put_obmc_0_427 = (put_obmc_0_426 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %427 = shl i32 %426, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_427_reg <= put_obmc_0_427;
if (reset == 1'b0 && ^(put_obmc_0_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_427_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %428 = add i32 %421, 4*/
begin
put_obmc_0_428 = (put_obmc_0_421 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %428 = add i32 %421, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_129))
begin
put_obmc_0_428_reg <= put_obmc_0_428;
if (reset == 1'b0 && ^(put_obmc_0_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_428_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %429 = add i32 %428, %424*/
begin
put_obmc_0_429 = (put_obmc_0_428_reg + put_obmc_0_424);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %429 = add i32 %428, %424*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_429_reg <= put_obmc_0_429;
if (reset == 1'b0 && ^(put_obmc_0_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_429_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %430 = add i32 %429, %427*/
begin
put_obmc_0_430 = (put_obmc_0_429 + put_obmc_0_427);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %430 = add i32 %429, %427*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_430_reg <= put_obmc_0_430;
if (reset == 1'b0 && ^(put_obmc_0_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_430_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %431 = ashr i32 %430, 3*/
begin
put_obmc_0_431 = ($signed(put_obmc_0_430) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %431 = ashr i32 %430, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
put_obmc_0_431_reg <= put_obmc_0_431;
if (reset == 1'b0 && ^(put_obmc_0_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_431_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %432 = getelementptr inbounds i32* %dst, i32 %419*/
begin
put_obmc_0_432 = (arg_dst + (4 * put_obmc_0_419_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %432 = getelementptr inbounds i32* %dst, i32 %419*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_432_reg <= put_obmc_0_432;
if (reset == 1'b0 && ^(put_obmc_0_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_432_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %433 = shl i32 %stride, 2*/
begin
put_obmc_0_433 = (arg_stride <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %433 = shl i32 %stride, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_433_reg <= put_obmc_0_433;
if (reset == 1'b0 && ^(put_obmc_0_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_433_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %434 = getelementptr inbounds i32* %4, i32 %433*/
begin
put_obmc_0_434 = (put_obmc_0_4 + (4 * put_obmc_0_433_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %434 = getelementptr inbounds i32* %4, i32 %433*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_434_reg <= put_obmc_0_434;
if (reset == 1'b0 && ^(put_obmc_0_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_434_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
begin
put_obmc_0_435 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_133))
begin
put_obmc_0_435_reg <= put_obmc_0_435;
if (reset == 1'b0 && ^(put_obmc_0_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_435_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %436 = shl i32 %435, 1*/
begin
put_obmc_0_436 = (put_obmc_0_435 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %436 = shl i32 %435, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_133))
begin
put_obmc_0_436_reg <= put_obmc_0_436;
if (reset == 1'b0 && ^(put_obmc_0_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_436_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %437 = getelementptr inbounds i32* %5, i32 %433*/
begin
put_obmc_0_437 = (put_obmc_0_5 + (4 * put_obmc_0_433_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %437 = getelementptr inbounds i32* %5, i32 %433*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_437_reg <= put_obmc_0_437;
if (reset == 1'b0 && ^(put_obmc_0_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_437_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
begin
put_obmc_0_438 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_133))
begin
put_obmc_0_438_reg <= put_obmc_0_438;
if (reset == 1'b0 && ^(put_obmc_0_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_438_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_439 = put_obmc_0_439_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %439 = mul nsw i32 %438, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_439_reg <= put_obmc_0_439;
if (reset == 1'b0 && ^(put_obmc_0_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_439_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %439 = mul nsw i32 %438, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_439_reg <= put_obmc_0_439;
if (reset == 1'b0 && ^(put_obmc_0_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_439_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %440 = getelementptr inbounds i32* %9, i32 %433*/
begin
put_obmc_0_440 = (put_obmc_0_9 + (4 * put_obmc_0_433_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %440 = getelementptr inbounds i32* %9, i32 %433*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_440_reg <= put_obmc_0_440;
if (reset == 1'b0 && ^(put_obmc_0_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_440_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
begin
put_obmc_0_441 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_441_reg <= put_obmc_0_441;
if (reset == 1'b0 && ^(put_obmc_0_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_441_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %442 = add i32 %436, 4*/
begin
put_obmc_0_442 = (put_obmc_0_436 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %442 = add i32 %436, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_133))
begin
put_obmc_0_442_reg <= put_obmc_0_442;
if (reset == 1'b0 && ^(put_obmc_0_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_442_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %443 = add i32 %442, %441*/
begin
put_obmc_0_443 = (put_obmc_0_442_reg + put_obmc_0_441);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %443 = add i32 %442, %441*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_443_reg <= put_obmc_0_443;
if (reset == 1'b0 && ^(put_obmc_0_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_443_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %444 = add i32 %443, %439*/
begin
put_obmc_0_444 = (put_obmc_0_443 + put_obmc_0_439);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %444 = add i32 %443, %439*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_444_reg <= put_obmc_0_444;
if (reset == 1'b0 && ^(put_obmc_0_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_444_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %445 = ashr i32 %444, 3*/
begin
put_obmc_0_445 = ($signed(put_obmc_0_444) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %445 = ashr i32 %444, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
put_obmc_0_445_reg <= put_obmc_0_445;
if (reset == 1'b0 && ^(put_obmc_0_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_445_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %446 = getelementptr inbounds i32* %dst, i32 %433*/
begin
put_obmc_0_446 = (arg_dst + (4 * put_obmc_0_433));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %446 = getelementptr inbounds i32* %dst, i32 %433*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_446_reg <= put_obmc_0_446;
if (reset == 1'b0 && ^(put_obmc_0_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_446_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %447 = or i32 %433, 1*/
begin
put_obmc_0_447 = (put_obmc_0_433 | 32'd1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %447 = or i32 %433, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_447_reg <= put_obmc_0_447;
if (reset == 1'b0 && ^(put_obmc_0_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_447_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %448 = getelementptr inbounds i32* %4, i32 %447*/
begin
put_obmc_0_448 = (put_obmc_0_4 + (4 * put_obmc_0_447_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %448 = getelementptr inbounds i32* %4, i32 %447*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_448_reg <= put_obmc_0_448;
if (reset == 1'b0 && ^(put_obmc_0_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_448_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
begin
put_obmc_0_449 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_137))
begin
put_obmc_0_449_reg <= put_obmc_0_449;
if (reset == 1'b0 && ^(put_obmc_0_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_449_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %450 = shl i32 %449, 1*/
begin
put_obmc_0_450 = (put_obmc_0_449 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %450 = shl i32 %449, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_137))
begin
put_obmc_0_450_reg <= put_obmc_0_450;
if (reset == 1'b0 && ^(put_obmc_0_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_450_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %451 = getelementptr inbounds i32* %5, i32 %447*/
begin
put_obmc_0_451 = (put_obmc_0_5 + (4 * put_obmc_0_447_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %451 = getelementptr inbounds i32* %5, i32 %447*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_451_reg <= put_obmc_0_451;
if (reset == 1'b0 && ^(put_obmc_0_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_451_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
begin
put_obmc_0_452 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_137))
begin
put_obmc_0_452_reg <= put_obmc_0_452;
if (reset == 1'b0 && ^(put_obmc_0_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_452_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_453 = put_obmc_0_453_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %453 = mul nsw i32 %452, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_453_reg <= put_obmc_0_453;
if (reset == 1'b0 && ^(put_obmc_0_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_453_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %453 = mul nsw i32 %452, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_453_reg <= put_obmc_0_453;
if (reset == 1'b0 && ^(put_obmc_0_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_453_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %454 = getelementptr inbounds i32* %9, i32 %447*/
begin
put_obmc_0_454 = (put_obmc_0_9 + (4 * put_obmc_0_447_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %454 = getelementptr inbounds i32* %9, i32 %447*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_454_reg <= put_obmc_0_454;
if (reset == 1'b0 && ^(put_obmc_0_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_454_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
begin
put_obmc_0_455 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_455_reg <= put_obmc_0_455;
if (reset == 1'b0 && ^(put_obmc_0_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_455_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %456 = add i32 %450, 4*/
begin
put_obmc_0_456 = (put_obmc_0_450 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %456 = add i32 %450, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_137))
begin
put_obmc_0_456_reg <= put_obmc_0_456;
if (reset == 1'b0 && ^(put_obmc_0_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_456_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %457 = add i32 %456, %455*/
begin
put_obmc_0_457 = (put_obmc_0_456_reg + put_obmc_0_455);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %457 = add i32 %456, %455*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_457_reg <= put_obmc_0_457;
if (reset == 1'b0 && ^(put_obmc_0_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_457_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %458 = add i32 %457, %453*/
begin
put_obmc_0_458 = (put_obmc_0_457 + put_obmc_0_453);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %458 = add i32 %457, %453*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_458_reg <= put_obmc_0_458;
if (reset == 1'b0 && ^(put_obmc_0_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_458_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %459 = ashr i32 %458, 3*/
begin
put_obmc_0_459 = ($signed(put_obmc_0_458) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %459 = ashr i32 %458, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
put_obmc_0_459_reg <= put_obmc_0_459;
if (reset == 1'b0 && ^(put_obmc_0_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_459_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %460 = getelementptr inbounds i32* %dst, i32 %447*/
begin
put_obmc_0_460 = (arg_dst + (4 * put_obmc_0_447));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %460 = getelementptr inbounds i32* %dst, i32 %447*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_460_reg <= put_obmc_0_460;
if (reset == 1'b0 && ^(put_obmc_0_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_460_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %461 = add nsw i32 %433, %stride*/
begin
put_obmc_0_461 = (put_obmc_0_433 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %461 = add nsw i32 %433, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_461_reg <= put_obmc_0_461;
if (reset == 1'b0 && ^(put_obmc_0_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_461_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %462 = getelementptr inbounds i32* %4, i32 %461*/
begin
put_obmc_0_462 = (put_obmc_0_4 + (4 * put_obmc_0_461_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %462 = getelementptr inbounds i32* %4, i32 %461*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_462_reg <= put_obmc_0_462;
if (reset == 1'b0 && ^(put_obmc_0_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_462_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
begin
put_obmc_0_463 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_141))
begin
put_obmc_0_463_reg <= put_obmc_0_463;
if (reset == 1'b0 && ^(put_obmc_0_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_463_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %464 = shl i32 %463, 1*/
begin
put_obmc_0_464 = (put_obmc_0_463 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %464 = shl i32 %463, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_141))
begin
put_obmc_0_464_reg <= put_obmc_0_464;
if (reset == 1'b0 && ^(put_obmc_0_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_464_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %465 = getelementptr inbounds i32* %5, i32 %461*/
begin
put_obmc_0_465 = (put_obmc_0_5 + (4 * put_obmc_0_461_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %465 = getelementptr inbounds i32* %5, i32 %461*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_465_reg <= put_obmc_0_465;
if (reset == 1'b0 && ^(put_obmc_0_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_465_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
begin
put_obmc_0_466 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_141))
begin
put_obmc_0_466_reg <= put_obmc_0_466;
if (reset == 1'b0 && ^(put_obmc_0_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_466_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_467 = put_obmc_0_467_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %467 = mul nsw i32 %466, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_467_reg <= put_obmc_0_467;
if (reset == 1'b0 && ^(put_obmc_0_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_467_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %467 = mul nsw i32 %466, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_467_reg <= put_obmc_0_467;
if (reset == 1'b0 && ^(put_obmc_0_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_467_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %468 = getelementptr inbounds i32* %9, i32 %461*/
begin
put_obmc_0_468 = (put_obmc_0_9 + (4 * put_obmc_0_461_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %468 = getelementptr inbounds i32* %9, i32 %461*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_468_reg <= put_obmc_0_468;
if (reset == 1'b0 && ^(put_obmc_0_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_468_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
begin
put_obmc_0_469 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_469_reg <= put_obmc_0_469;
if (reset == 1'b0 && ^(put_obmc_0_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_469_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %470 = add i32 %464, 4*/
begin
put_obmc_0_470 = (put_obmc_0_464 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %470 = add i32 %464, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_141))
begin
put_obmc_0_470_reg <= put_obmc_0_470;
if (reset == 1'b0 && ^(put_obmc_0_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_470_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %471 = add i32 %470, %469*/
begin
put_obmc_0_471 = (put_obmc_0_470_reg + put_obmc_0_469);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %471 = add i32 %470, %469*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_471_reg <= put_obmc_0_471;
if (reset == 1'b0 && ^(put_obmc_0_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_471_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %472 = add i32 %471, %467*/
begin
put_obmc_0_472 = (put_obmc_0_471 + put_obmc_0_467);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %472 = add i32 %471, %467*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_472_reg <= put_obmc_0_472;
if (reset == 1'b0 && ^(put_obmc_0_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_472_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %473 = ashr i32 %472, 3*/
begin
put_obmc_0_473 = ($signed(put_obmc_0_472) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %473 = ashr i32 %472, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
put_obmc_0_473_reg <= put_obmc_0_473;
if (reset == 1'b0 && ^(put_obmc_0_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_473_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %474 = getelementptr inbounds i32* %dst, i32 %461*/
begin
put_obmc_0_474 = (arg_dst + (4 * put_obmc_0_461_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %474 = getelementptr inbounds i32* %dst, i32 %461*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_474_reg <= put_obmc_0_474;
if (reset == 1'b0 && ^(put_obmc_0_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_474_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %475 = add nsw i32 %447, %stride*/
begin
put_obmc_0_475 = (put_obmc_0_447 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %475 = add nsw i32 %447, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_475_reg <= put_obmc_0_475;
if (reset == 1'b0 && ^(put_obmc_0_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_475_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %476 = getelementptr inbounds i32* %4, i32 %475*/
begin
put_obmc_0_476 = (put_obmc_0_4 + (4 * put_obmc_0_475_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %476 = getelementptr inbounds i32* %4, i32 %475*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_476_reg <= put_obmc_0_476;
if (reset == 1'b0 && ^(put_obmc_0_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_476_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
begin
put_obmc_0_477 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_145))
begin
put_obmc_0_477_reg <= put_obmc_0_477;
if (reset == 1'b0 && ^(put_obmc_0_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_477_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %478 = shl i32 %477, 1*/
begin
put_obmc_0_478 = (put_obmc_0_477 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %478 = shl i32 %477, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_145))
begin
put_obmc_0_478_reg <= put_obmc_0_478;
if (reset == 1'b0 && ^(put_obmc_0_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_478_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %479 = getelementptr inbounds i32* %5, i32 %475*/
begin
put_obmc_0_479 = (put_obmc_0_5 + (4 * put_obmc_0_475_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %479 = getelementptr inbounds i32* %5, i32 %475*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_479_reg <= put_obmc_0_479;
if (reset == 1'b0 && ^(put_obmc_0_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_479_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
begin
put_obmc_0_480 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_145))
begin
put_obmc_0_480_reg <= put_obmc_0_480;
if (reset == 1'b0 && ^(put_obmc_0_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_480_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_481 = put_obmc_0_481_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %481 = mul nsw i32 %480, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_481_reg <= put_obmc_0_481;
if (reset == 1'b0 && ^(put_obmc_0_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_481_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %481 = mul nsw i32 %480, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_481_reg <= put_obmc_0_481;
if (reset == 1'b0 && ^(put_obmc_0_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_481_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %482 = getelementptr inbounds i32* %9, i32 %475*/
begin
put_obmc_0_482 = (put_obmc_0_9 + (4 * put_obmc_0_475_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %482 = getelementptr inbounds i32* %9, i32 %475*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_482_reg <= put_obmc_0_482;
if (reset == 1'b0 && ^(put_obmc_0_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_482_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
begin
put_obmc_0_483 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_483_reg <= put_obmc_0_483;
if (reset == 1'b0 && ^(put_obmc_0_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_483_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %484 = add i32 %478, 4*/
begin
put_obmc_0_484 = (put_obmc_0_478 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %484 = add i32 %478, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_145))
begin
put_obmc_0_484_reg <= put_obmc_0_484;
if (reset == 1'b0 && ^(put_obmc_0_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_484_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %485 = add i32 %484, %483*/
begin
put_obmc_0_485 = (put_obmc_0_484_reg + put_obmc_0_483);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %485 = add i32 %484, %483*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_485_reg <= put_obmc_0_485;
if (reset == 1'b0 && ^(put_obmc_0_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_485_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %486 = add i32 %485, %481*/
begin
put_obmc_0_486 = (put_obmc_0_485 + put_obmc_0_481);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %486 = add i32 %485, %481*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_486_reg <= put_obmc_0_486;
if (reset == 1'b0 && ^(put_obmc_0_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_486_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %487 = ashr i32 %486, 3*/
begin
put_obmc_0_487 = ($signed(put_obmc_0_486) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %487 = ashr i32 %486, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
put_obmc_0_487_reg <= put_obmc_0_487;
if (reset == 1'b0 && ^(put_obmc_0_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_487_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %488 = getelementptr inbounds i32* %dst, i32 %475*/
begin
put_obmc_0_488 = (arg_dst + (4 * put_obmc_0_475_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %488 = getelementptr inbounds i32* %dst, i32 %475*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_488_reg <= put_obmc_0_488;
if (reset == 1'b0 && ^(put_obmc_0_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_488_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %489 = or i32 %433, 2*/
begin
put_obmc_0_489 = (put_obmc_0_433 | 32'd2);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %489 = or i32 %433, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_489_reg <= put_obmc_0_489;
if (reset == 1'b0 && ^(put_obmc_0_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_489_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %490 = getelementptr inbounds i32* %4, i32 %489*/
begin
put_obmc_0_490 = (put_obmc_0_4 + (4 * put_obmc_0_489_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %490 = getelementptr inbounds i32* %4, i32 %489*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_490_reg <= put_obmc_0_490;
if (reset == 1'b0 && ^(put_obmc_0_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_490_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
begin
put_obmc_0_491 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_149))
begin
put_obmc_0_491_reg <= put_obmc_0_491;
if (reset == 1'b0 && ^(put_obmc_0_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_491_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %492 = getelementptr inbounds i32* %5, i32 %489*/
begin
put_obmc_0_492 = (put_obmc_0_5 + (4 * put_obmc_0_489_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %492 = getelementptr inbounds i32* %5, i32 %489*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_492_reg <= put_obmc_0_492;
if (reset == 1'b0 && ^(put_obmc_0_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_492_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
begin
put_obmc_0_493 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_149))
begin
put_obmc_0_493_reg <= put_obmc_0_493;
if (reset == 1'b0 && ^(put_obmc_0_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_493_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_494 = put_obmc_0_494_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %494 = mul nsw i32 %493, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_494_reg <= put_obmc_0_494;
if (reset == 1'b0 && ^(put_obmc_0_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_494_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %494 = mul nsw i32 %493, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_494_reg <= put_obmc_0_494;
if (reset == 1'b0 && ^(put_obmc_0_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_494_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %495 = getelementptr inbounds i32* %9, i32 %489*/
begin
put_obmc_0_495 = (put_obmc_0_9 + (4 * put_obmc_0_489_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %495 = getelementptr inbounds i32* %9, i32 %489*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_495_reg <= put_obmc_0_495;
if (reset == 1'b0 && ^(put_obmc_0_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_495_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
begin
put_obmc_0_496 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_496_reg <= put_obmc_0_496;
if (reset == 1'b0 && ^(put_obmc_0_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_496_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %497 = add i32 %491, 4*/
begin
put_obmc_0_497 = (put_obmc_0_491 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %497 = add i32 %491, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_149))
begin
put_obmc_0_497_reg <= put_obmc_0_497;
if (reset == 1'b0 && ^(put_obmc_0_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_497_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %498 = add i32 %497, %496*/
begin
put_obmc_0_498 = (put_obmc_0_497_reg + put_obmc_0_496);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %498 = add i32 %497, %496*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_498_reg <= put_obmc_0_498;
if (reset == 1'b0 && ^(put_obmc_0_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_498_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %499 = add i32 %498, %494*/
begin
put_obmc_0_499 = (put_obmc_0_498 + put_obmc_0_494);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %499 = add i32 %498, %494*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_499_reg <= put_obmc_0_499;
if (reset == 1'b0 && ^(put_obmc_0_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_499_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %500 = ashr i32 %499, 3*/
begin
put_obmc_0_500 = ($signed(put_obmc_0_499) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %500 = ashr i32 %499, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
put_obmc_0_500_reg <= put_obmc_0_500;
if (reset == 1'b0 && ^(put_obmc_0_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_500_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %501 = getelementptr inbounds i32* %dst, i32 %489*/
begin
put_obmc_0_501 = (arg_dst + (4 * put_obmc_0_489));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %501 = getelementptr inbounds i32* %dst, i32 %489*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_501_reg <= put_obmc_0_501;
if (reset == 1'b0 && ^(put_obmc_0_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_501_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %502 = or i32 %433, 3*/
begin
put_obmc_0_502 = (put_obmc_0_433 | 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %502 = or i32 %433, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_502_reg <= put_obmc_0_502;
if (reset == 1'b0 && ^(put_obmc_0_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_502_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %503 = getelementptr inbounds i32* %4, i32 %502*/
begin
put_obmc_0_503 = (put_obmc_0_4 + (4 * put_obmc_0_502_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %503 = getelementptr inbounds i32* %4, i32 %502*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_503_reg <= put_obmc_0_503;
if (reset == 1'b0 && ^(put_obmc_0_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_503_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
begin
put_obmc_0_504 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_153))
begin
put_obmc_0_504_reg <= put_obmc_0_504;
if (reset == 1'b0 && ^(put_obmc_0_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_504_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %505 = getelementptr inbounds i32* %5, i32 %502*/
begin
put_obmc_0_505 = (put_obmc_0_5 + (4 * put_obmc_0_502_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %505 = getelementptr inbounds i32* %5, i32 %502*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_505_reg <= put_obmc_0_505;
if (reset == 1'b0 && ^(put_obmc_0_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_505_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
begin
put_obmc_0_506 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_153))
begin
put_obmc_0_506_reg <= put_obmc_0_506;
if (reset == 1'b0 && ^(put_obmc_0_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_506_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_507 = put_obmc_0_507_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %507 = mul nsw i32 %506, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_507_reg <= put_obmc_0_507;
if (reset == 1'b0 && ^(put_obmc_0_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_507_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %507 = mul nsw i32 %506, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_507_reg <= put_obmc_0_507;
if (reset == 1'b0 && ^(put_obmc_0_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_507_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %508 = getelementptr inbounds i32* %9, i32 %502*/
begin
put_obmc_0_508 = (put_obmc_0_9 + (4 * put_obmc_0_502_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %508 = getelementptr inbounds i32* %9, i32 %502*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_508_reg <= put_obmc_0_508;
if (reset == 1'b0 && ^(put_obmc_0_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_508_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
begin
put_obmc_0_509 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_509_reg <= put_obmc_0_509;
if (reset == 1'b0 && ^(put_obmc_0_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_509_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %510 = add i32 %504, 4*/
begin
put_obmc_0_510 = (put_obmc_0_504 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %510 = add i32 %504, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_153))
begin
put_obmc_0_510_reg <= put_obmc_0_510;
if (reset == 1'b0 && ^(put_obmc_0_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_510_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %511 = add i32 %510, %509*/
begin
put_obmc_0_511 = (put_obmc_0_510_reg + put_obmc_0_509);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %511 = add i32 %510, %509*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_511_reg <= put_obmc_0_511;
if (reset == 1'b0 && ^(put_obmc_0_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_511_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %512 = add i32 %511, %507*/
begin
put_obmc_0_512 = (put_obmc_0_511 + put_obmc_0_507);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %512 = add i32 %511, %507*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_512_reg <= put_obmc_0_512;
if (reset == 1'b0 && ^(put_obmc_0_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_512_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %513 = ashr i32 %512, 3*/
begin
put_obmc_0_513 = ($signed(put_obmc_0_512) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %513 = ashr i32 %512, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
put_obmc_0_513_reg <= put_obmc_0_513;
if (reset == 1'b0 && ^(put_obmc_0_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_513_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %514 = getelementptr inbounds i32* %dst, i32 %502*/
begin
put_obmc_0_514 = (arg_dst + (4 * put_obmc_0_502));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %514 = getelementptr inbounds i32* %dst, i32 %502*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_514_reg <= put_obmc_0_514;
if (reset == 1'b0 && ^(put_obmc_0_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_514_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %515 = add nsw i32 %489, %stride*/
begin
put_obmc_0_515 = (put_obmc_0_489 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %515 = add nsw i32 %489, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_515_reg <= put_obmc_0_515;
if (reset == 1'b0 && ^(put_obmc_0_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_515_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %516 = getelementptr inbounds i32* %4, i32 %515*/
begin
put_obmc_0_516 = (put_obmc_0_4 + (4 * put_obmc_0_515_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %516 = getelementptr inbounds i32* %4, i32 %515*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_516_reg <= put_obmc_0_516;
if (reset == 1'b0 && ^(put_obmc_0_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_516_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
begin
put_obmc_0_517 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_157))
begin
put_obmc_0_517_reg <= put_obmc_0_517;
if (reset == 1'b0 && ^(put_obmc_0_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_517_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %518 = getelementptr inbounds i32* %5, i32 %515*/
begin
put_obmc_0_518 = (put_obmc_0_5 + (4 * put_obmc_0_515_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %518 = getelementptr inbounds i32* %5, i32 %515*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_518_reg <= put_obmc_0_518;
if (reset == 1'b0 && ^(put_obmc_0_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_518_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
begin
put_obmc_0_519 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_157))
begin
put_obmc_0_519_reg <= put_obmc_0_519;
if (reset == 1'b0 && ^(put_obmc_0_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_519_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_520 = put_obmc_0_520_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %520 = mul nsw i32 %519, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_520_reg <= put_obmc_0_520;
if (reset == 1'b0 && ^(put_obmc_0_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_520_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %520 = mul nsw i32 %519, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_520_reg <= put_obmc_0_520;
if (reset == 1'b0 && ^(put_obmc_0_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_520_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %521 = getelementptr inbounds i32* %9, i32 %515*/
begin
put_obmc_0_521 = (put_obmc_0_9 + (4 * put_obmc_0_515_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %521 = getelementptr inbounds i32* %9, i32 %515*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_521_reg <= put_obmc_0_521;
if (reset == 1'b0 && ^(put_obmc_0_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_521_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
begin
put_obmc_0_522 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_522_reg <= put_obmc_0_522;
if (reset == 1'b0 && ^(put_obmc_0_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_522_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %523 = add i32 %517, 4*/
begin
put_obmc_0_523 = (put_obmc_0_517 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %523 = add i32 %517, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_157))
begin
put_obmc_0_523_reg <= put_obmc_0_523;
if (reset == 1'b0 && ^(put_obmc_0_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_523_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %524 = add i32 %523, %522*/
begin
put_obmc_0_524 = (put_obmc_0_523_reg + put_obmc_0_522);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %524 = add i32 %523, %522*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_524_reg <= put_obmc_0_524;
if (reset == 1'b0 && ^(put_obmc_0_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_524_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %525 = add i32 %524, %520*/
begin
put_obmc_0_525 = (put_obmc_0_524 + put_obmc_0_520);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %525 = add i32 %524, %520*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_525_reg <= put_obmc_0_525;
if (reset == 1'b0 && ^(put_obmc_0_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_525_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %526 = ashr i32 %525, 3*/
begin
put_obmc_0_526 = ($signed(put_obmc_0_525) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %526 = ashr i32 %525, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
put_obmc_0_526_reg <= put_obmc_0_526;
if (reset == 1'b0 && ^(put_obmc_0_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_526_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %527 = getelementptr inbounds i32* %dst, i32 %515*/
begin
put_obmc_0_527 = (arg_dst + (4 * put_obmc_0_515_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %527 = getelementptr inbounds i32* %dst, i32 %515*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_527_reg <= put_obmc_0_527;
if (reset == 1'b0 && ^(put_obmc_0_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_527_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %528 = add nsw i32 %502, %stride*/
begin
put_obmc_0_528 = (put_obmc_0_502 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %528 = add nsw i32 %502, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_528_reg <= put_obmc_0_528;
if (reset == 1'b0 && ^(put_obmc_0_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_528_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %529 = getelementptr inbounds i32* %4, i32 %528*/
begin
put_obmc_0_529 = (put_obmc_0_4 + (4 * put_obmc_0_528_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %529 = getelementptr inbounds i32* %4, i32 %528*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_529_reg <= put_obmc_0_529;
if (reset == 1'b0 && ^(put_obmc_0_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_529_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
begin
put_obmc_0_530 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_161))
begin
put_obmc_0_530_reg <= put_obmc_0_530;
if (reset == 1'b0 && ^(put_obmc_0_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_530_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %531 = getelementptr inbounds i32* %5, i32 %528*/
begin
put_obmc_0_531 = (put_obmc_0_5 + (4 * put_obmc_0_528_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %531 = getelementptr inbounds i32* %5, i32 %528*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_531_reg <= put_obmc_0_531;
if (reset == 1'b0 && ^(put_obmc_0_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_531_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
begin
put_obmc_0_532 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_161))
begin
put_obmc_0_532_reg <= put_obmc_0_532;
if (reset == 1'b0 && ^(put_obmc_0_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_532_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_533 = put_obmc_0_533_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %533 = mul nsw i32 %532, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_533_reg <= put_obmc_0_533;
if (reset == 1'b0 && ^(put_obmc_0_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_533_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %533 = mul nsw i32 %532, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_533_reg <= put_obmc_0_533;
if (reset == 1'b0 && ^(put_obmc_0_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_533_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %534 = getelementptr inbounds i32* %9, i32 %528*/
begin
put_obmc_0_534 = (put_obmc_0_9 + (4 * put_obmc_0_528_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %534 = getelementptr inbounds i32* %9, i32 %528*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_534_reg <= put_obmc_0_534;
if (reset == 1'b0 && ^(put_obmc_0_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_534_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
begin
put_obmc_0_535 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_535_reg <= put_obmc_0_535;
if (reset == 1'b0 && ^(put_obmc_0_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_535_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %536 = add i32 %530, 4*/
begin
put_obmc_0_536 = (put_obmc_0_530 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %536 = add i32 %530, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_161))
begin
put_obmc_0_536_reg <= put_obmc_0_536;
if (reset == 1'b0 && ^(put_obmc_0_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_536_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %537 = add i32 %536, %535*/
begin
put_obmc_0_537 = (put_obmc_0_536_reg + put_obmc_0_535);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %537 = add i32 %536, %535*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_537_reg <= put_obmc_0_537;
if (reset == 1'b0 && ^(put_obmc_0_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_537_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %538 = add i32 %537, %533*/
begin
put_obmc_0_538 = (put_obmc_0_537 + put_obmc_0_533);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %538 = add i32 %537, %533*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_538_reg <= put_obmc_0_538;
if (reset == 1'b0 && ^(put_obmc_0_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_538_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %539 = ashr i32 %538, 3*/
begin
put_obmc_0_539 = ($signed(put_obmc_0_538) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %539 = ashr i32 %538, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
put_obmc_0_539_reg <= put_obmc_0_539;
if (reset == 1'b0 && ^(put_obmc_0_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_539_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %540 = getelementptr inbounds i32* %dst, i32 %528*/
begin
put_obmc_0_540 = (arg_dst + (4 * put_obmc_0_528_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %540 = getelementptr inbounds i32* %dst, i32 %528*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_540_reg <= put_obmc_0_540;
if (reset == 1'b0 && ^(put_obmc_0_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_540_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %541 = add nsw i32 %433, 4*/
begin
put_obmc_0_541 = (put_obmc_0_433 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %541 = add nsw i32 %433, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_541_reg <= put_obmc_0_541;
if (reset == 1'b0 && ^(put_obmc_0_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_541_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %542 = getelementptr inbounds i32* %5, i32 %541*/
begin
put_obmc_0_542 = (put_obmc_0_5 + (4 * put_obmc_0_541_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %542 = getelementptr inbounds i32* %5, i32 %541*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_542_reg <= put_obmc_0_542;
if (reset == 1'b0 && ^(put_obmc_0_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_542_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
begin
put_obmc_0_543 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_165))
begin
put_obmc_0_543_reg <= put_obmc_0_543;
if (reset == 1'b0 && ^(put_obmc_0_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_543_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_544 = put_obmc_0_544_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %544 = mul nsw i32 %543, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_544_reg <= put_obmc_0_544;
if (reset == 1'b0 && ^(put_obmc_0_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_544_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %544 = mul nsw i32 %543, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_544_reg <= put_obmc_0_544;
if (reset == 1'b0 && ^(put_obmc_0_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_544_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %545 = getelementptr inbounds i32* %7, i32 %541*/
begin
put_obmc_0_545 = (put_obmc_0_7 + (4 * put_obmc_0_541_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %545 = getelementptr inbounds i32* %7, i32 %541*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_545_reg <= put_obmc_0_545;
if (reset == 1'b0 && ^(put_obmc_0_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_545_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
begin
put_obmc_0_546 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_165))
begin
put_obmc_0_546_reg <= put_obmc_0_546;
if (reset == 1'b0 && ^(put_obmc_0_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_546_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %547 = getelementptr inbounds i32* %9, i32 %541*/
begin
put_obmc_0_547 = (put_obmc_0_9 + (4 * put_obmc_0_541_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %547 = getelementptr inbounds i32* %9, i32 %541*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_547_reg <= put_obmc_0_547;
if (reset == 1'b0 && ^(put_obmc_0_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_547_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
begin
put_obmc_0_548 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_548_reg <= put_obmc_0_548;
if (reset == 1'b0 && ^(put_obmc_0_548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_548_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %549 = add i32 %546, 4*/
begin
put_obmc_0_549 = (put_obmc_0_546 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %549 = add i32 %546, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_165))
begin
put_obmc_0_549_reg <= put_obmc_0_549;
if (reset == 1'b0 && ^(put_obmc_0_549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_549_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %550 = add i32 %549, %544*/
begin
put_obmc_0_550 = (put_obmc_0_549_reg + put_obmc_0_544);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %550 = add i32 %549, %544*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_550_reg <= put_obmc_0_550;
if (reset == 1'b0 && ^(put_obmc_0_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_550_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %551 = add i32 %550, %548*/
begin
put_obmc_0_551 = (put_obmc_0_550 + put_obmc_0_548);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %551 = add i32 %550, %548*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_551_reg <= put_obmc_0_551;
if (reset == 1'b0 && ^(put_obmc_0_551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_551_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %552 = ashr i32 %551, 3*/
begin
put_obmc_0_552 = ($signed(put_obmc_0_551) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %552 = ashr i32 %551, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
put_obmc_0_552_reg <= put_obmc_0_552;
if (reset == 1'b0 && ^(put_obmc_0_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_552_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %553 = getelementptr inbounds i32* %dst, i32 %541*/
begin
put_obmc_0_553 = (arg_dst + (4 * put_obmc_0_541_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %553 = getelementptr inbounds i32* %dst, i32 %541*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_553_reg <= put_obmc_0_553;
if (reset == 1'b0 && ^(put_obmc_0_553) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_553_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %554 = add i32 %433, 5*/
begin
put_obmc_0_554 = (put_obmc_0_433 + 32'd5);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %554 = add i32 %433, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_554_reg <= put_obmc_0_554;
if (reset == 1'b0 && ^(put_obmc_0_554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_554_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %555 = getelementptr inbounds i32* %5, i32 %554*/
begin
put_obmc_0_555 = (put_obmc_0_5 + (4 * put_obmc_0_554_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %555 = getelementptr inbounds i32* %5, i32 %554*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_555_reg <= put_obmc_0_555;
if (reset == 1'b0 && ^(put_obmc_0_555) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_555_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
begin
put_obmc_0_556 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_169))
begin
put_obmc_0_556_reg <= put_obmc_0_556;
if (reset == 1'b0 && ^(put_obmc_0_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_556_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_557 = put_obmc_0_557_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %557 = mul nsw i32 %556, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_557_reg <= put_obmc_0_557;
if (reset == 1'b0 && ^(put_obmc_0_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_557_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %557 = mul nsw i32 %556, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_557_reg <= put_obmc_0_557;
if (reset == 1'b0 && ^(put_obmc_0_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_557_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %558 = getelementptr inbounds i32* %7, i32 %554*/
begin
put_obmc_0_558 = (put_obmc_0_7 + (4 * put_obmc_0_554_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %558 = getelementptr inbounds i32* %7, i32 %554*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_558_reg <= put_obmc_0_558;
if (reset == 1'b0 && ^(put_obmc_0_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_558_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
begin
put_obmc_0_559 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_169))
begin
put_obmc_0_559_reg <= put_obmc_0_559;
if (reset == 1'b0 && ^(put_obmc_0_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_559_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %560 = getelementptr inbounds i32* %9, i32 %554*/
begin
put_obmc_0_560 = (put_obmc_0_9 + (4 * put_obmc_0_554_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %560 = getelementptr inbounds i32* %9, i32 %554*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_560_reg <= put_obmc_0_560;
if (reset == 1'b0 && ^(put_obmc_0_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_560_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
begin
put_obmc_0_561 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_561_reg <= put_obmc_0_561;
if (reset == 1'b0 && ^(put_obmc_0_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_561_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %562 = add i32 %559, 4*/
begin
put_obmc_0_562 = (put_obmc_0_559 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %562 = add i32 %559, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_169))
begin
put_obmc_0_562_reg <= put_obmc_0_562;
if (reset == 1'b0 && ^(put_obmc_0_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_562_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %563 = add i32 %562, %557*/
begin
put_obmc_0_563 = (put_obmc_0_562_reg + put_obmc_0_557);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %563 = add i32 %562, %557*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_563_reg <= put_obmc_0_563;
if (reset == 1'b0 && ^(put_obmc_0_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_563_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %564 = add i32 %563, %561*/
begin
put_obmc_0_564 = (put_obmc_0_563 + put_obmc_0_561);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %564 = add i32 %563, %561*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_564_reg <= put_obmc_0_564;
if (reset == 1'b0 && ^(put_obmc_0_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_564_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %565 = ashr i32 %564, 3*/
begin
put_obmc_0_565 = ($signed(put_obmc_0_564) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %565 = ashr i32 %564, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
put_obmc_0_565_reg <= put_obmc_0_565;
if (reset == 1'b0 && ^(put_obmc_0_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_565_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %566 = getelementptr inbounds i32* %dst, i32 %554*/
begin
put_obmc_0_566 = (arg_dst + (4 * put_obmc_0_554_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %566 = getelementptr inbounds i32* %dst, i32 %554*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_566_reg <= put_obmc_0_566;
if (reset == 1'b0 && ^(put_obmc_0_566) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_566_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %567 = add nsw i32 %541, %stride*/
begin
put_obmc_0_567 = (put_obmc_0_541 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %567 = add nsw i32 %541, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_567_reg <= put_obmc_0_567;
if (reset == 1'b0 && ^(put_obmc_0_567) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_567_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %568 = getelementptr inbounds i32* %5, i32 %567*/
begin
put_obmc_0_568 = (put_obmc_0_5 + (4 * put_obmc_0_567_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %568 = getelementptr inbounds i32* %5, i32 %567*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_568_reg <= put_obmc_0_568;
if (reset == 1'b0 && ^(put_obmc_0_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_568_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
begin
put_obmc_0_569 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_173))
begin
put_obmc_0_569_reg <= put_obmc_0_569;
if (reset == 1'b0 && ^(put_obmc_0_569) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_569_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_570 = put_obmc_0_570_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %570 = mul nsw i32 %569, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_570_reg <= put_obmc_0_570;
if (reset == 1'b0 && ^(put_obmc_0_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_570_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %570 = mul nsw i32 %569, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_570_reg <= put_obmc_0_570;
if (reset == 1'b0 && ^(put_obmc_0_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_570_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %571 = getelementptr inbounds i32* %7, i32 %567*/
begin
put_obmc_0_571 = (put_obmc_0_7 + (4 * put_obmc_0_567_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %571 = getelementptr inbounds i32* %7, i32 %567*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_571_reg <= put_obmc_0_571;
if (reset == 1'b0 && ^(put_obmc_0_571) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_571_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
begin
put_obmc_0_572 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_173))
begin
put_obmc_0_572_reg <= put_obmc_0_572;
if (reset == 1'b0 && ^(put_obmc_0_572) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_572_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %573 = getelementptr inbounds i32* %9, i32 %567*/
begin
put_obmc_0_573 = (put_obmc_0_9 + (4 * put_obmc_0_567_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %573 = getelementptr inbounds i32* %9, i32 %567*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_573_reg <= put_obmc_0_573;
if (reset == 1'b0 && ^(put_obmc_0_573) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_573_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
begin
put_obmc_0_574 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_574_reg <= put_obmc_0_574;
if (reset == 1'b0 && ^(put_obmc_0_574) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_574_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %575 = add i32 %572, 4*/
begin
put_obmc_0_575 = (put_obmc_0_572 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %575 = add i32 %572, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_173))
begin
put_obmc_0_575_reg <= put_obmc_0_575;
if (reset == 1'b0 && ^(put_obmc_0_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_575_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %576 = add i32 %575, %570*/
begin
put_obmc_0_576 = (put_obmc_0_575_reg + put_obmc_0_570);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %576 = add i32 %575, %570*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_576_reg <= put_obmc_0_576;
if (reset == 1'b0 && ^(put_obmc_0_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_576_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %577 = add i32 %576, %574*/
begin
put_obmc_0_577 = (put_obmc_0_576 + put_obmc_0_574);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %577 = add i32 %576, %574*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_577_reg <= put_obmc_0_577;
if (reset == 1'b0 && ^(put_obmc_0_577) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_577_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %578 = ashr i32 %577, 3*/
begin
put_obmc_0_578 = ($signed(put_obmc_0_577) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %578 = ashr i32 %577, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
put_obmc_0_578_reg <= put_obmc_0_578;
if (reset == 1'b0 && ^(put_obmc_0_578) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_578_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %579 = getelementptr inbounds i32* %dst, i32 %567*/
begin
put_obmc_0_579 = (arg_dst + (4 * put_obmc_0_567_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %579 = getelementptr inbounds i32* %dst, i32 %567*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_579_reg <= put_obmc_0_579;
if (reset == 1'b0 && ^(put_obmc_0_579) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_579_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %580 = add nsw i32 %554, %stride*/
begin
put_obmc_0_580 = (put_obmc_0_554 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %580 = add nsw i32 %554, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_580_reg <= put_obmc_0_580;
if (reset == 1'b0 && ^(put_obmc_0_580) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_580_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %581 = getelementptr inbounds i32* %5, i32 %580*/
begin
put_obmc_0_581 = (put_obmc_0_5 + (4 * put_obmc_0_580_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %581 = getelementptr inbounds i32* %5, i32 %580*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_581_reg <= put_obmc_0_581;
if (reset == 1'b0 && ^(put_obmc_0_581) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_581_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
begin
put_obmc_0_582 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_177))
begin
put_obmc_0_582_reg <= put_obmc_0_582;
if (reset == 1'b0 && ^(put_obmc_0_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_582_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_583 = put_obmc_0_583_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %583 = mul nsw i32 %582, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_583_reg <= put_obmc_0_583;
if (reset == 1'b0 && ^(put_obmc_0_583) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_583_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %583 = mul nsw i32 %582, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_583_reg <= put_obmc_0_583;
if (reset == 1'b0 && ^(put_obmc_0_583) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_583_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %584 = getelementptr inbounds i32* %7, i32 %580*/
begin
put_obmc_0_584 = (put_obmc_0_7 + (4 * put_obmc_0_580_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %584 = getelementptr inbounds i32* %7, i32 %580*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_584_reg <= put_obmc_0_584;
if (reset == 1'b0 && ^(put_obmc_0_584) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_584_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
begin
put_obmc_0_585 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_177))
begin
put_obmc_0_585_reg <= put_obmc_0_585;
if (reset == 1'b0 && ^(put_obmc_0_585) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_585_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %586 = getelementptr inbounds i32* %9, i32 %580*/
begin
put_obmc_0_586 = (put_obmc_0_9 + (4 * put_obmc_0_580_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %586 = getelementptr inbounds i32* %9, i32 %580*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_586_reg <= put_obmc_0_586;
if (reset == 1'b0 && ^(put_obmc_0_586) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_586_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
begin
put_obmc_0_587 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_587_reg <= put_obmc_0_587;
if (reset == 1'b0 && ^(put_obmc_0_587) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_587_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %588 = add i32 %585, 4*/
begin
put_obmc_0_588 = (put_obmc_0_585 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %588 = add i32 %585, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_177))
begin
put_obmc_0_588_reg <= put_obmc_0_588;
if (reset == 1'b0 && ^(put_obmc_0_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_588_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %589 = add i32 %588, %583*/
begin
put_obmc_0_589 = (put_obmc_0_588_reg + put_obmc_0_583);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %589 = add i32 %588, %583*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_589_reg <= put_obmc_0_589;
if (reset == 1'b0 && ^(put_obmc_0_589) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_589_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %590 = add i32 %589, %587*/
begin
put_obmc_0_590 = (put_obmc_0_589 + put_obmc_0_587);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %590 = add i32 %589, %587*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_590_reg <= put_obmc_0_590;
if (reset == 1'b0 && ^(put_obmc_0_590) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_590_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %591 = ashr i32 %590, 3*/
begin
put_obmc_0_591 = ($signed(put_obmc_0_590) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %591 = ashr i32 %590, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
put_obmc_0_591_reg <= put_obmc_0_591;
if (reset == 1'b0 && ^(put_obmc_0_591) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_591_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %592 = getelementptr inbounds i32* %dst, i32 %580*/
begin
put_obmc_0_592 = (arg_dst + (4 * put_obmc_0_580_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %592 = getelementptr inbounds i32* %dst, i32 %580*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_592_reg <= put_obmc_0_592;
if (reset == 1'b0 && ^(put_obmc_0_592) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_592_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %593 = add nsw i32 %433, 6*/
begin
put_obmc_0_593 = (put_obmc_0_433 + 32'd6);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %593 = add nsw i32 %433, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_593_reg <= put_obmc_0_593;
if (reset == 1'b0 && ^(put_obmc_0_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_593_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %594 = getelementptr inbounds i32* %5, i32 %593*/
begin
put_obmc_0_594 = (put_obmc_0_5 + (4 * put_obmc_0_593_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %594 = getelementptr inbounds i32* %5, i32 %593*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_594_reg <= put_obmc_0_594;
if (reset == 1'b0 && ^(put_obmc_0_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_594_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
begin
put_obmc_0_595 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_181))
begin
put_obmc_0_595_reg <= put_obmc_0_595;
if (reset == 1'b0 && ^(put_obmc_0_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_595_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_596 = put_obmc_0_596_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %596 = mul nsw i32 %595, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_596_reg <= put_obmc_0_596;
if (reset == 1'b0 && ^(put_obmc_0_596) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_596_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %596 = mul nsw i32 %595, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_596_reg <= put_obmc_0_596;
if (reset == 1'b0 && ^(put_obmc_0_596) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_596_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %597 = getelementptr inbounds i32* %7, i32 %593*/
begin
put_obmc_0_597 = (put_obmc_0_7 + (4 * put_obmc_0_593_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %597 = getelementptr inbounds i32* %7, i32 %593*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_597_reg <= put_obmc_0_597;
if (reset == 1'b0 && ^(put_obmc_0_597) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_597_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
begin
put_obmc_0_598 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_181))
begin
put_obmc_0_598_reg <= put_obmc_0_598;
if (reset == 1'b0 && ^(put_obmc_0_598) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_598_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %599 = shl i32 %598, 1*/
begin
put_obmc_0_599 = (put_obmc_0_598 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %599 = shl i32 %598, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_181))
begin
put_obmc_0_599_reg <= put_obmc_0_599;
if (reset == 1'b0 && ^(put_obmc_0_599) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_599_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %600 = getelementptr inbounds i32* %9, i32 %593*/
begin
put_obmc_0_600 = (put_obmc_0_9 + (4 * put_obmc_0_593_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %600 = getelementptr inbounds i32* %9, i32 %593*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_600_reg <= put_obmc_0_600;
if (reset == 1'b0 && ^(put_obmc_0_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_600_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
begin
put_obmc_0_601 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_601_reg <= put_obmc_0_601;
if (reset == 1'b0 && ^(put_obmc_0_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_601_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %602 = add i32 %596, 4*/
begin
put_obmc_0_602 = (put_obmc_0_596 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %602 = add i32 %596, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_602_reg <= put_obmc_0_602;
if (reset == 1'b0 && ^(put_obmc_0_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_602_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %603 = add i32 %602, %601*/
begin
put_obmc_0_603 = (put_obmc_0_602 + put_obmc_0_601);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %603 = add i32 %602, %601*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_603_reg <= put_obmc_0_603;
if (reset == 1'b0 && ^(put_obmc_0_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_603_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %604 = add i32 %603, %599*/
begin
put_obmc_0_604 = (put_obmc_0_603 + put_obmc_0_599_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %604 = add i32 %603, %599*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_604_reg <= put_obmc_0_604;
if (reset == 1'b0 && ^(put_obmc_0_604) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_604_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %605 = ashr i32 %604, 3*/
begin
put_obmc_0_605 = ($signed(put_obmc_0_604) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %605 = ashr i32 %604, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
put_obmc_0_605_reg <= put_obmc_0_605;
if (reset == 1'b0 && ^(put_obmc_0_605) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_605_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %606 = getelementptr inbounds i32* %dst, i32 %593*/
begin
put_obmc_0_606 = (arg_dst + (4 * put_obmc_0_593_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %606 = getelementptr inbounds i32* %dst, i32 %593*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_606_reg <= put_obmc_0_606;
if (reset == 1'b0 && ^(put_obmc_0_606) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_606_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %607 = add i32 %433, 7*/
begin
put_obmc_0_607 = (put_obmc_0_433 + 32'd7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %607 = add i32 %433, 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_607_reg <= put_obmc_0_607;
if (reset == 1'b0 && ^(put_obmc_0_607) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_607_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %608 = getelementptr inbounds i32* %5, i32 %607*/
begin
put_obmc_0_608 = (put_obmc_0_5 + (4 * put_obmc_0_607_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %608 = getelementptr inbounds i32* %5, i32 %607*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_608_reg <= put_obmc_0_608;
if (reset == 1'b0 && ^(put_obmc_0_608) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_608_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
begin
put_obmc_0_609 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_185))
begin
put_obmc_0_609_reg <= put_obmc_0_609;
if (reset == 1'b0 && ^(put_obmc_0_609) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_609_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_610 = put_obmc_0_610_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %610 = mul nsw i32 %609, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_610_reg <= put_obmc_0_610;
if (reset == 1'b0 && ^(put_obmc_0_610) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_610_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %610 = mul nsw i32 %609, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_610_reg <= put_obmc_0_610;
if (reset == 1'b0 && ^(put_obmc_0_610) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_610_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %611 = getelementptr inbounds i32* %7, i32 %607*/
begin
put_obmc_0_611 = (put_obmc_0_7 + (4 * put_obmc_0_607_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %611 = getelementptr inbounds i32* %7, i32 %607*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_611_reg <= put_obmc_0_611;
if (reset == 1'b0 && ^(put_obmc_0_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_611_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
begin
put_obmc_0_612 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_185))
begin
put_obmc_0_612_reg <= put_obmc_0_612;
if (reset == 1'b0 && ^(put_obmc_0_612) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_612_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %613 = shl i32 %612, 1*/
begin
put_obmc_0_613 = (put_obmc_0_612 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %613 = shl i32 %612, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_185))
begin
put_obmc_0_613_reg <= put_obmc_0_613;
if (reset == 1'b0 && ^(put_obmc_0_613) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_613_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %614 = getelementptr inbounds i32* %9, i32 %607*/
begin
put_obmc_0_614 = (put_obmc_0_9 + (4 * put_obmc_0_607_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %614 = getelementptr inbounds i32* %9, i32 %607*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_614_reg <= put_obmc_0_614;
if (reset == 1'b0 && ^(put_obmc_0_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_614_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
begin
put_obmc_0_615 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_615_reg <= put_obmc_0_615;
if (reset == 1'b0 && ^(put_obmc_0_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_615_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %616 = add i32 %610, 4*/
begin
put_obmc_0_616 = (put_obmc_0_610 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %616 = add i32 %610, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_616_reg <= put_obmc_0_616;
if (reset == 1'b0 && ^(put_obmc_0_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_616_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %617 = add i32 %616, %615*/
begin
put_obmc_0_617 = (put_obmc_0_616 + put_obmc_0_615);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %617 = add i32 %616, %615*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_617_reg <= put_obmc_0_617;
if (reset == 1'b0 && ^(put_obmc_0_617) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_617_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %618 = add i32 %617, %613*/
begin
put_obmc_0_618 = (put_obmc_0_617 + put_obmc_0_613_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %618 = add i32 %617, %613*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_618_reg <= put_obmc_0_618;
if (reset == 1'b0 && ^(put_obmc_0_618) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_618_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %619 = ashr i32 %618, 3*/
begin
put_obmc_0_619 = ($signed(put_obmc_0_618) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %619 = ashr i32 %618, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
put_obmc_0_619_reg <= put_obmc_0_619;
if (reset == 1'b0 && ^(put_obmc_0_619) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_619_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %620 = getelementptr inbounds i32* %dst, i32 %607*/
begin
put_obmc_0_620 = (arg_dst + (4 * put_obmc_0_607_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %620 = getelementptr inbounds i32* %dst, i32 %607*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_620_reg <= put_obmc_0_620;
if (reset == 1'b0 && ^(put_obmc_0_620) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_620_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %621 = add nsw i32 %593, %stride*/
begin
put_obmc_0_621 = (put_obmc_0_593 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %621 = add nsw i32 %593, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_621_reg <= put_obmc_0_621;
if (reset == 1'b0 && ^(put_obmc_0_621) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_621_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %622 = getelementptr inbounds i32* %5, i32 %621*/
begin
put_obmc_0_622 = (put_obmc_0_5 + (4 * put_obmc_0_621_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %622 = getelementptr inbounds i32* %5, i32 %621*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_622_reg <= put_obmc_0_622;
if (reset == 1'b0 && ^(put_obmc_0_622) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_622_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
begin
put_obmc_0_623 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_189))
begin
put_obmc_0_623_reg <= put_obmc_0_623;
if (reset == 1'b0 && ^(put_obmc_0_623) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_623_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_624 = put_obmc_0_624_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %624 = mul nsw i32 %623, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_624_reg <= put_obmc_0_624;
if (reset == 1'b0 && ^(put_obmc_0_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_624_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %624 = mul nsw i32 %623, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_624_reg <= put_obmc_0_624;
if (reset == 1'b0 && ^(put_obmc_0_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_624_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %625 = getelementptr inbounds i32* %7, i32 %621*/
begin
put_obmc_0_625 = (put_obmc_0_7 + (4 * put_obmc_0_621_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %625 = getelementptr inbounds i32* %7, i32 %621*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_625_reg <= put_obmc_0_625;
if (reset == 1'b0 && ^(put_obmc_0_625) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_625_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
begin
put_obmc_0_626 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_189))
begin
put_obmc_0_626_reg <= put_obmc_0_626;
if (reset == 1'b0 && ^(put_obmc_0_626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_626_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %627 = shl i32 %626, 1*/
begin
put_obmc_0_627 = (put_obmc_0_626 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %627 = shl i32 %626, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_189))
begin
put_obmc_0_627_reg <= put_obmc_0_627;
if (reset == 1'b0 && ^(put_obmc_0_627) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_627_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %628 = getelementptr inbounds i32* %9, i32 %621*/
begin
put_obmc_0_628 = (put_obmc_0_9 + (4 * put_obmc_0_621_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %628 = getelementptr inbounds i32* %9, i32 %621*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_628_reg <= put_obmc_0_628;
if (reset == 1'b0 && ^(put_obmc_0_628) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_628_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
begin
put_obmc_0_629 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_629_reg <= put_obmc_0_629;
if (reset == 1'b0 && ^(put_obmc_0_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_629_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %630 = add i32 %624, 4*/
begin
put_obmc_0_630 = (put_obmc_0_624 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %630 = add i32 %624, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_630_reg <= put_obmc_0_630;
if (reset == 1'b0 && ^(put_obmc_0_630) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_630_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %631 = add i32 %630, %629*/
begin
put_obmc_0_631 = (put_obmc_0_630 + put_obmc_0_629);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %631 = add i32 %630, %629*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_631_reg <= put_obmc_0_631;
if (reset == 1'b0 && ^(put_obmc_0_631) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_631_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %632 = add i32 %631, %627*/
begin
put_obmc_0_632 = (put_obmc_0_631 + put_obmc_0_627_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %632 = add i32 %631, %627*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_632_reg <= put_obmc_0_632;
if (reset == 1'b0 && ^(put_obmc_0_632) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_632_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %633 = ashr i32 %632, 3*/
begin
put_obmc_0_633 = ($signed(put_obmc_0_632) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %633 = ashr i32 %632, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
put_obmc_0_633_reg <= put_obmc_0_633;
if (reset == 1'b0 && ^(put_obmc_0_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_633_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %634 = getelementptr inbounds i32* %dst, i32 %621*/
begin
put_obmc_0_634 = (arg_dst + (4 * put_obmc_0_621_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %634 = getelementptr inbounds i32* %dst, i32 %621*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_634_reg <= put_obmc_0_634;
if (reset == 1'b0 && ^(put_obmc_0_634) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_634_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %635 = add nsw i32 %607, %stride*/
begin
put_obmc_0_635 = (put_obmc_0_607 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %635 = add nsw i32 %607, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_635_reg <= put_obmc_0_635;
if (reset == 1'b0 && ^(put_obmc_0_635) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_635_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %636 = getelementptr inbounds i32* %5, i32 %635*/
begin
put_obmc_0_636 = (put_obmc_0_5 + (4 * put_obmc_0_635_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %636 = getelementptr inbounds i32* %5, i32 %635*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_636_reg <= put_obmc_0_636;
if (reset == 1'b0 && ^(put_obmc_0_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_636_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
begin
put_obmc_0_637 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_193))
begin
put_obmc_0_637_reg <= put_obmc_0_637;
if (reset == 1'b0 && ^(put_obmc_0_637) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_637_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_638 = put_obmc_0_638_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %638 = mul nsw i32 %637, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_638_reg <= put_obmc_0_638;
if (reset == 1'b0 && ^(put_obmc_0_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_638_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %638 = mul nsw i32 %637, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_638_reg <= put_obmc_0_638;
if (reset == 1'b0 && ^(put_obmc_0_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_638_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %639 = getelementptr inbounds i32* %7, i32 %635*/
begin
put_obmc_0_639 = (put_obmc_0_7 + (4 * put_obmc_0_635_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %639 = getelementptr inbounds i32* %7, i32 %635*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_639_reg <= put_obmc_0_639;
if (reset == 1'b0 && ^(put_obmc_0_639) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_639_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
begin
put_obmc_0_640 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_193))
begin
put_obmc_0_640_reg <= put_obmc_0_640;
if (reset == 1'b0 && ^(put_obmc_0_640) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_640_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %641 = shl i32 %640, 1*/
begin
put_obmc_0_641 = (put_obmc_0_640 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %641 = shl i32 %640, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_193))
begin
put_obmc_0_641_reg <= put_obmc_0_641;
if (reset == 1'b0 && ^(put_obmc_0_641) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_641_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %642 = getelementptr inbounds i32* %9, i32 %635*/
begin
put_obmc_0_642 = (put_obmc_0_9 + (4 * put_obmc_0_635_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %642 = getelementptr inbounds i32* %9, i32 %635*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_642_reg <= put_obmc_0_642;
if (reset == 1'b0 && ^(put_obmc_0_642) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_642_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
begin
put_obmc_0_643 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_643_reg <= put_obmc_0_643;
if (reset == 1'b0 && ^(put_obmc_0_643) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_643_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %644 = add i32 %638, 4*/
begin
put_obmc_0_644 = (put_obmc_0_638 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %644 = add i32 %638, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_644_reg <= put_obmc_0_644;
if (reset == 1'b0 && ^(put_obmc_0_644) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_644_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %645 = add i32 %644, %643*/
begin
put_obmc_0_645 = (put_obmc_0_644 + put_obmc_0_643);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %645 = add i32 %644, %643*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_645_reg <= put_obmc_0_645;
if (reset == 1'b0 && ^(put_obmc_0_645) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_645_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %646 = add i32 %645, %641*/
begin
put_obmc_0_646 = (put_obmc_0_645 + put_obmc_0_641_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %646 = add i32 %645, %641*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_646_reg <= put_obmc_0_646;
if (reset == 1'b0 && ^(put_obmc_0_646) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_646_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %647 = ashr i32 %646, 3*/
begin
put_obmc_0_647 = ($signed(put_obmc_0_646) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %647 = ashr i32 %646, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
put_obmc_0_647_reg <= put_obmc_0_647;
if (reset == 1'b0 && ^(put_obmc_0_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_647_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %648 = getelementptr inbounds i32* %dst, i32 %635*/
begin
put_obmc_0_648 = (arg_dst + (4 * put_obmc_0_635_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %648 = getelementptr inbounds i32* %dst, i32 %635*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_648_reg <= put_obmc_0_648;
if (reset == 1'b0 && ^(put_obmc_0_648) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_648_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %649 = add nsw i32 %433, %217*/
begin
put_obmc_0_649 = (put_obmc_0_433 + put_obmc_0_217);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %649 = add nsw i32 %433, %217*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_649_reg <= put_obmc_0_649;
if (reset == 1'b0 && ^(put_obmc_0_649) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_649_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %650 = getelementptr inbounds i32* %4, i32 %649*/
begin
put_obmc_0_650 = (put_obmc_0_4 + (4 * put_obmc_0_649_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %650 = getelementptr inbounds i32* %4, i32 %649*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_650_reg <= put_obmc_0_650;
if (reset == 1'b0 && ^(put_obmc_0_650) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_650_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
begin
put_obmc_0_651 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_197))
begin
put_obmc_0_651_reg <= put_obmc_0_651;
if (reset == 1'b0 && ^(put_obmc_0_651) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_651_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %652 = shl i32 %651, 1*/
begin
put_obmc_0_652 = (put_obmc_0_651 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %652 = shl i32 %651, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_197))
begin
put_obmc_0_652_reg <= put_obmc_0_652;
if (reset == 1'b0 && ^(put_obmc_0_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_652_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %653 = getelementptr inbounds i32* %5, i32 %649*/
begin
put_obmc_0_653 = (put_obmc_0_5 + (4 * put_obmc_0_649_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %653 = getelementptr inbounds i32* %5, i32 %649*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_653_reg <= put_obmc_0_653;
if (reset == 1'b0 && ^(put_obmc_0_653) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_653_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
begin
put_obmc_0_654 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_197))
begin
put_obmc_0_654_reg <= put_obmc_0_654;
if (reset == 1'b0 && ^(put_obmc_0_654) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_654_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_655 = put_obmc_0_655_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %655 = mul nsw i32 %654, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_655_reg <= put_obmc_0_655;
if (reset == 1'b0 && ^(put_obmc_0_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_655_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %655 = mul nsw i32 %654, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_655_reg <= put_obmc_0_655;
if (reset == 1'b0 && ^(put_obmc_0_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_655_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %656 = getelementptr inbounds i32* %9, i32 %649*/
begin
put_obmc_0_656 = (put_obmc_0_9 + (4 * put_obmc_0_649_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %656 = getelementptr inbounds i32* %9, i32 %649*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_656_reg <= put_obmc_0_656;
if (reset == 1'b0 && ^(put_obmc_0_656) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_656_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
begin
put_obmc_0_657 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_657_reg <= put_obmc_0_657;
if (reset == 1'b0 && ^(put_obmc_0_657) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_657_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %658 = add i32 %652, 4*/
begin
put_obmc_0_658 = (put_obmc_0_652 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %658 = add i32 %652, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_197))
begin
put_obmc_0_658_reg <= put_obmc_0_658;
if (reset == 1'b0 && ^(put_obmc_0_658) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_658_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %659 = add i32 %658, %657*/
begin
put_obmc_0_659 = (put_obmc_0_658_reg + put_obmc_0_657);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %659 = add i32 %658, %657*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_659_reg <= put_obmc_0_659;
if (reset == 1'b0 && ^(put_obmc_0_659) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_659_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %660 = add i32 %659, %655*/
begin
put_obmc_0_660 = (put_obmc_0_659 + put_obmc_0_655);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %660 = add i32 %659, %655*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_660_reg <= put_obmc_0_660;
if (reset == 1'b0 && ^(put_obmc_0_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_660_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %661 = ashr i32 %660, 3*/
begin
put_obmc_0_661 = ($signed(put_obmc_0_660) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %661 = ashr i32 %660, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
put_obmc_0_661_reg <= put_obmc_0_661;
if (reset == 1'b0 && ^(put_obmc_0_661) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_661_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %662 = getelementptr inbounds i32* %dst, i32 %649*/
begin
put_obmc_0_662 = (arg_dst + (4 * put_obmc_0_649_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %662 = getelementptr inbounds i32* %dst, i32 %649*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_662_reg <= put_obmc_0_662;
if (reset == 1'b0 && ^(put_obmc_0_662) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_662_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %663 = or i32 %649, 1*/
begin
put_obmc_0_663 = (put_obmc_0_649 | 32'd1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %663 = or i32 %649, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_663_reg <= put_obmc_0_663;
if (reset == 1'b0 && ^(put_obmc_0_663) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_663_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %664 = getelementptr inbounds i32* %4, i32 %663*/
begin
put_obmc_0_664 = (put_obmc_0_4 + (4 * put_obmc_0_663_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %664 = getelementptr inbounds i32* %4, i32 %663*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_664_reg <= put_obmc_0_664;
if (reset == 1'b0 && ^(put_obmc_0_664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_664_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
begin
put_obmc_0_665 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_201))
begin
put_obmc_0_665_reg <= put_obmc_0_665;
if (reset == 1'b0 && ^(put_obmc_0_665) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_665_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %666 = shl i32 %665, 1*/
begin
put_obmc_0_666 = (put_obmc_0_665 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %666 = shl i32 %665, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_201))
begin
put_obmc_0_666_reg <= put_obmc_0_666;
if (reset == 1'b0 && ^(put_obmc_0_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_666_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %667 = getelementptr inbounds i32* %5, i32 %663*/
begin
put_obmc_0_667 = (put_obmc_0_5 + (4 * put_obmc_0_663_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %667 = getelementptr inbounds i32* %5, i32 %663*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_667_reg <= put_obmc_0_667;
if (reset == 1'b0 && ^(put_obmc_0_667) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_667_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
begin
put_obmc_0_668 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_201))
begin
put_obmc_0_668_reg <= put_obmc_0_668;
if (reset == 1'b0 && ^(put_obmc_0_668) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_668_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_669 = put_obmc_0_669_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %669 = mul nsw i32 %668, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_669_reg <= put_obmc_0_669;
if (reset == 1'b0 && ^(put_obmc_0_669) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_669_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %669 = mul nsw i32 %668, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_669_reg <= put_obmc_0_669;
if (reset == 1'b0 && ^(put_obmc_0_669) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_669_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %670 = getelementptr inbounds i32* %9, i32 %663*/
begin
put_obmc_0_670 = (put_obmc_0_9 + (4 * put_obmc_0_663_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %670 = getelementptr inbounds i32* %9, i32 %663*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_670_reg <= put_obmc_0_670;
if (reset == 1'b0 && ^(put_obmc_0_670) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_670_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
begin
put_obmc_0_671 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_671_reg <= put_obmc_0_671;
if (reset == 1'b0 && ^(put_obmc_0_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_671_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %672 = add i32 %666, 4*/
begin
put_obmc_0_672 = (put_obmc_0_666 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %672 = add i32 %666, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_201))
begin
put_obmc_0_672_reg <= put_obmc_0_672;
if (reset == 1'b0 && ^(put_obmc_0_672) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_672_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %673 = add i32 %672, %671*/
begin
put_obmc_0_673 = (put_obmc_0_672_reg + put_obmc_0_671);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %673 = add i32 %672, %671*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_673_reg <= put_obmc_0_673;
if (reset == 1'b0 && ^(put_obmc_0_673) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_673_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %674 = add i32 %673, %669*/
begin
put_obmc_0_674 = (put_obmc_0_673 + put_obmc_0_669);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %674 = add i32 %673, %669*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_674_reg <= put_obmc_0_674;
if (reset == 1'b0 && ^(put_obmc_0_674) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_674_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %675 = ashr i32 %674, 3*/
begin
put_obmc_0_675 = ($signed(put_obmc_0_674) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %675 = ashr i32 %674, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
put_obmc_0_675_reg <= put_obmc_0_675;
if (reset == 1'b0 && ^(put_obmc_0_675) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_675_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %676 = getelementptr inbounds i32* %dst, i32 %663*/
begin
put_obmc_0_676 = (arg_dst + (4 * put_obmc_0_663_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %676 = getelementptr inbounds i32* %dst, i32 %663*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_676_reg <= put_obmc_0_676;
if (reset == 1'b0 && ^(put_obmc_0_676) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_676_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %677 = add nsw i32 %649, 2*/
begin
put_obmc_0_677 = (put_obmc_0_649 + 32'd2);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %677 = add nsw i32 %649, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_677_reg <= put_obmc_0_677;
if (reset == 1'b0 && ^(put_obmc_0_677) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_677_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %678 = getelementptr inbounds i32* %4, i32 %677*/
begin
put_obmc_0_678 = (put_obmc_0_4 + (4 * put_obmc_0_677_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %678 = getelementptr inbounds i32* %4, i32 %677*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_678_reg <= put_obmc_0_678;
if (reset == 1'b0 && ^(put_obmc_0_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_678_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
begin
put_obmc_0_679 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_205))
begin
put_obmc_0_679_reg <= put_obmc_0_679;
if (reset == 1'b0 && ^(put_obmc_0_679) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_679_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %680 = getelementptr inbounds i32* %5, i32 %677*/
begin
put_obmc_0_680 = (put_obmc_0_5 + (4 * put_obmc_0_677_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %680 = getelementptr inbounds i32* %5, i32 %677*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_680_reg <= put_obmc_0_680;
if (reset == 1'b0 && ^(put_obmc_0_680) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_680_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
begin
put_obmc_0_681 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_205))
begin
put_obmc_0_681_reg <= put_obmc_0_681;
if (reset == 1'b0 && ^(put_obmc_0_681) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_681_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_682 = put_obmc_0_682_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %682 = mul nsw i32 %681, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_682_reg <= put_obmc_0_682;
if (reset == 1'b0 && ^(put_obmc_0_682) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_682_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %682 = mul nsw i32 %681, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_682_reg <= put_obmc_0_682;
if (reset == 1'b0 && ^(put_obmc_0_682) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_682_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %683 = getelementptr inbounds i32* %9, i32 %677*/
begin
put_obmc_0_683 = (put_obmc_0_9 + (4 * put_obmc_0_677_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %683 = getelementptr inbounds i32* %9, i32 %677*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_683_reg <= put_obmc_0_683;
if (reset == 1'b0 && ^(put_obmc_0_683) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_683_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
begin
put_obmc_0_684 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_684_reg <= put_obmc_0_684;
if (reset == 1'b0 && ^(put_obmc_0_684) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_684_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %685 = shl i32 %684, 1*/
begin
put_obmc_0_685 = (put_obmc_0_684 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %685 = shl i32 %684, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_685_reg <= put_obmc_0_685;
if (reset == 1'b0 && ^(put_obmc_0_685) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_685_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %686 = add i32 %679, 4*/
begin
put_obmc_0_686 = (put_obmc_0_679 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %686 = add i32 %679, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_205))
begin
put_obmc_0_686_reg <= put_obmc_0_686;
if (reset == 1'b0 && ^(put_obmc_0_686) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_686_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %687 = add i32 %686, %682*/
begin
put_obmc_0_687 = (put_obmc_0_686_reg + put_obmc_0_682);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %687 = add i32 %686, %682*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_687_reg <= put_obmc_0_687;
if (reset == 1'b0 && ^(put_obmc_0_687) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_687_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %688 = add i32 %687, %685*/
begin
put_obmc_0_688 = (put_obmc_0_687 + put_obmc_0_685);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %688 = add i32 %687, %685*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_688_reg <= put_obmc_0_688;
if (reset == 1'b0 && ^(put_obmc_0_688) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_688_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %689 = ashr i32 %688, 3*/
begin
put_obmc_0_689 = ($signed(put_obmc_0_688) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %689 = ashr i32 %688, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
put_obmc_0_689_reg <= put_obmc_0_689;
if (reset == 1'b0 && ^(put_obmc_0_689) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_689_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %690 = getelementptr inbounds i32* %dst, i32 %677*/
begin
put_obmc_0_690 = (arg_dst + (4 * put_obmc_0_677_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %690 = getelementptr inbounds i32* %dst, i32 %677*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_690_reg <= put_obmc_0_690;
if (reset == 1'b0 && ^(put_obmc_0_690) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_690_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %691 = add i32 %649, 3*/
begin
put_obmc_0_691 = (put_obmc_0_649 + 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %691 = add i32 %649, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_691_reg <= put_obmc_0_691;
if (reset == 1'b0 && ^(put_obmc_0_691) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_691_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %692 = getelementptr inbounds i32* %4, i32 %691*/
begin
put_obmc_0_692 = (put_obmc_0_4 + (4 * put_obmc_0_691_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %692 = getelementptr inbounds i32* %4, i32 %691*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_692_reg <= put_obmc_0_692;
if (reset == 1'b0 && ^(put_obmc_0_692) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_692_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
begin
put_obmc_0_693 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_209))
begin
put_obmc_0_693_reg <= put_obmc_0_693;
if (reset == 1'b0 && ^(put_obmc_0_693) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_693_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %694 = getelementptr inbounds i32* %5, i32 %691*/
begin
put_obmc_0_694 = (put_obmc_0_5 + (4 * put_obmc_0_691_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %694 = getelementptr inbounds i32* %5, i32 %691*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_694_reg <= put_obmc_0_694;
if (reset == 1'b0 && ^(put_obmc_0_694) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_694_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
begin
put_obmc_0_695 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_209))
begin
put_obmc_0_695_reg <= put_obmc_0_695;
if (reset == 1'b0 && ^(put_obmc_0_695) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_695_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_696 = put_obmc_0_696_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %696 = mul nsw i32 %695, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_696_reg <= put_obmc_0_696;
if (reset == 1'b0 && ^(put_obmc_0_696) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_696_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %696 = mul nsw i32 %695, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_696_reg <= put_obmc_0_696;
if (reset == 1'b0 && ^(put_obmc_0_696) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_696_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %697 = getelementptr inbounds i32* %9, i32 %691*/
begin
put_obmc_0_697 = (put_obmc_0_9 + (4 * put_obmc_0_691_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %697 = getelementptr inbounds i32* %9, i32 %691*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_697_reg <= put_obmc_0_697;
if (reset == 1'b0 && ^(put_obmc_0_697) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_697_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
begin
put_obmc_0_698 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_698_reg <= put_obmc_0_698;
if (reset == 1'b0 && ^(put_obmc_0_698) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_698_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %699 = shl i32 %698, 1*/
begin
put_obmc_0_699 = (put_obmc_0_698 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %699 = shl i32 %698, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_699_reg <= put_obmc_0_699;
if (reset == 1'b0 && ^(put_obmc_0_699) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_699_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %700 = add i32 %693, 4*/
begin
put_obmc_0_700 = (put_obmc_0_693 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %700 = add i32 %693, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_209))
begin
put_obmc_0_700_reg <= put_obmc_0_700;
if (reset == 1'b0 && ^(put_obmc_0_700) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_700_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %701 = add i32 %700, %696*/
begin
put_obmc_0_701 = (put_obmc_0_700_reg + put_obmc_0_696);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %701 = add i32 %700, %696*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_701_reg <= put_obmc_0_701;
if (reset == 1'b0 && ^(put_obmc_0_701) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_701_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %702 = add i32 %701, %699*/
begin
put_obmc_0_702 = (put_obmc_0_701 + put_obmc_0_699);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %702 = add i32 %701, %699*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_702_reg <= put_obmc_0_702;
if (reset == 1'b0 && ^(put_obmc_0_702) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_702_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %703 = ashr i32 %702, 3*/
begin
put_obmc_0_703 = ($signed(put_obmc_0_702) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %703 = ashr i32 %702, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
put_obmc_0_703_reg <= put_obmc_0_703;
if (reset == 1'b0 && ^(put_obmc_0_703) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_703_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %704 = getelementptr inbounds i32* %dst, i32 %691*/
begin
put_obmc_0_704 = (arg_dst + (4 * put_obmc_0_691_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %704 = getelementptr inbounds i32* %dst, i32 %691*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_704_reg <= put_obmc_0_704;
if (reset == 1'b0 && ^(put_obmc_0_704) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_704_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %705 = add nsw i32 %677, %stride*/
begin
put_obmc_0_705 = (put_obmc_0_677 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %705 = add nsw i32 %677, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_705_reg <= put_obmc_0_705;
if (reset == 1'b0 && ^(put_obmc_0_705) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_705_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %706 = getelementptr inbounds i32* %4, i32 %705*/
begin
put_obmc_0_706 = (put_obmc_0_4 + (4 * put_obmc_0_705_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %706 = getelementptr inbounds i32* %4, i32 %705*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_706_reg <= put_obmc_0_706;
if (reset == 1'b0 && ^(put_obmc_0_706) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_706_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
begin
put_obmc_0_707 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_213))
begin
put_obmc_0_707_reg <= put_obmc_0_707;
if (reset == 1'b0 && ^(put_obmc_0_707) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_707_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %708 = getelementptr inbounds i32* %5, i32 %705*/
begin
put_obmc_0_708 = (put_obmc_0_5 + (4 * put_obmc_0_705_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %708 = getelementptr inbounds i32* %5, i32 %705*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_708_reg <= put_obmc_0_708;
if (reset == 1'b0 && ^(put_obmc_0_708) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_708_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
begin
put_obmc_0_709 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_213))
begin
put_obmc_0_709_reg <= put_obmc_0_709;
if (reset == 1'b0 && ^(put_obmc_0_709) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_709_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_710 = put_obmc_0_710_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %710 = mul nsw i32 %709, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_710_reg <= put_obmc_0_710;
if (reset == 1'b0 && ^(put_obmc_0_710) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_710_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %710 = mul nsw i32 %709, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_710_reg <= put_obmc_0_710;
if (reset == 1'b0 && ^(put_obmc_0_710) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_710_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %711 = getelementptr inbounds i32* %9, i32 %705*/
begin
put_obmc_0_711 = (put_obmc_0_9 + (4 * put_obmc_0_705_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %711 = getelementptr inbounds i32* %9, i32 %705*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_711_reg <= put_obmc_0_711;
if (reset == 1'b0 && ^(put_obmc_0_711) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_711_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
begin
put_obmc_0_712 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_712_reg <= put_obmc_0_712;
if (reset == 1'b0 && ^(put_obmc_0_712) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_712_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %713 = shl i32 %712, 1*/
begin
put_obmc_0_713 = (put_obmc_0_712 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %713 = shl i32 %712, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_713_reg <= put_obmc_0_713;
if (reset == 1'b0 && ^(put_obmc_0_713) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_713_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %714 = add i32 %707, 4*/
begin
put_obmc_0_714 = (put_obmc_0_707 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %714 = add i32 %707, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_213))
begin
put_obmc_0_714_reg <= put_obmc_0_714;
if (reset == 1'b0 && ^(put_obmc_0_714) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_714_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %715 = add i32 %714, %710*/
begin
put_obmc_0_715 = (put_obmc_0_714_reg + put_obmc_0_710);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %715 = add i32 %714, %710*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_715_reg <= put_obmc_0_715;
if (reset == 1'b0 && ^(put_obmc_0_715) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_715_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %716 = add i32 %715, %713*/
begin
put_obmc_0_716 = (put_obmc_0_715 + put_obmc_0_713);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %716 = add i32 %715, %713*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_716_reg <= put_obmc_0_716;
if (reset == 1'b0 && ^(put_obmc_0_716) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_716_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %717 = ashr i32 %716, 3*/
begin
put_obmc_0_717 = ($signed(put_obmc_0_716) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %717 = ashr i32 %716, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
put_obmc_0_717_reg <= put_obmc_0_717;
if (reset == 1'b0 && ^(put_obmc_0_717) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_717_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %718 = getelementptr inbounds i32* %dst, i32 %705*/
begin
put_obmc_0_718 = (arg_dst + (4 * put_obmc_0_705_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %718 = getelementptr inbounds i32* %dst, i32 %705*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_718_reg <= put_obmc_0_718;
if (reset == 1'b0 && ^(put_obmc_0_718) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_718_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %719 = add nsw i32 %691, %stride*/
begin
put_obmc_0_719 = (put_obmc_0_691 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %719 = add nsw i32 %691, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_719_reg <= put_obmc_0_719;
if (reset == 1'b0 && ^(put_obmc_0_719) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_719_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %720 = getelementptr inbounds i32* %4, i32 %719*/
begin
put_obmc_0_720 = (put_obmc_0_4 + (4 * put_obmc_0_719_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %720 = getelementptr inbounds i32* %4, i32 %719*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_720_reg <= put_obmc_0_720;
if (reset == 1'b0 && ^(put_obmc_0_720) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_720_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
begin
put_obmc_0_721 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_217))
begin
put_obmc_0_721_reg <= put_obmc_0_721;
if (reset == 1'b0 && ^(put_obmc_0_721) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_721_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %722 = getelementptr inbounds i32* %5, i32 %719*/
begin
put_obmc_0_722 = (put_obmc_0_5 + (4 * put_obmc_0_719_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %722 = getelementptr inbounds i32* %5, i32 %719*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_722_reg <= put_obmc_0_722;
if (reset == 1'b0 && ^(put_obmc_0_722) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_722_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
begin
put_obmc_0_723 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_217))
begin
put_obmc_0_723_reg <= put_obmc_0_723;
if (reset == 1'b0 && ^(put_obmc_0_723) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_723_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_724 = put_obmc_0_724_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %724 = mul nsw i32 %723, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_724_reg <= put_obmc_0_724;
if (reset == 1'b0 && ^(put_obmc_0_724) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_724_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %724 = mul nsw i32 %723, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_724_reg <= put_obmc_0_724;
if (reset == 1'b0 && ^(put_obmc_0_724) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_724_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %725 = getelementptr inbounds i32* %9, i32 %719*/
begin
put_obmc_0_725 = (put_obmc_0_9 + (4 * put_obmc_0_719_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %725 = getelementptr inbounds i32* %9, i32 %719*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_725_reg <= put_obmc_0_725;
if (reset == 1'b0 && ^(put_obmc_0_725) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_725_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
begin
put_obmc_0_726 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_726_reg <= put_obmc_0_726;
if (reset == 1'b0 && ^(put_obmc_0_726) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_726_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %727 = shl i32 %726, 1*/
begin
put_obmc_0_727 = (put_obmc_0_726 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %727 = shl i32 %726, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_727_reg <= put_obmc_0_727;
if (reset == 1'b0 && ^(put_obmc_0_727) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_727_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %728 = add i32 %721, 4*/
begin
put_obmc_0_728 = (put_obmc_0_721 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %728 = add i32 %721, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_217))
begin
put_obmc_0_728_reg <= put_obmc_0_728;
if (reset == 1'b0 && ^(put_obmc_0_728) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_728_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %729 = add i32 %728, %724*/
begin
put_obmc_0_729 = (put_obmc_0_728_reg + put_obmc_0_724);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %729 = add i32 %728, %724*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_729_reg <= put_obmc_0_729;
if (reset == 1'b0 && ^(put_obmc_0_729) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_729_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %730 = add i32 %729, %727*/
begin
put_obmc_0_730 = (put_obmc_0_729 + put_obmc_0_727);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %730 = add i32 %729, %727*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_730_reg <= put_obmc_0_730;
if (reset == 1'b0 && ^(put_obmc_0_730) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_730_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %731 = ashr i32 %730, 3*/
begin
put_obmc_0_731 = ($signed(put_obmc_0_730) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %731 = ashr i32 %730, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
put_obmc_0_731_reg <= put_obmc_0_731;
if (reset == 1'b0 && ^(put_obmc_0_731) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_731_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %732 = getelementptr inbounds i32* %dst, i32 %719*/
begin
put_obmc_0_732 = (arg_dst + (4 * put_obmc_0_719_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %732 = getelementptr inbounds i32* %dst, i32 %719*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_732_reg <= put_obmc_0_732;
if (reset == 1'b0 && ^(put_obmc_0_732) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_732_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %733 = add nsw i32 %649, 4*/
begin
put_obmc_0_733 = (put_obmc_0_649 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %733 = add nsw i32 %649, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_733_reg <= put_obmc_0_733;
if (reset == 1'b0 && ^(put_obmc_0_733) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_733_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %734 = getelementptr inbounds i32* %5, i32 %733*/
begin
put_obmc_0_734 = (put_obmc_0_5 + (4 * put_obmc_0_733_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %734 = getelementptr inbounds i32* %5, i32 %733*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_734_reg <= put_obmc_0_734;
if (reset == 1'b0 && ^(put_obmc_0_734) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_734_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
begin
put_obmc_0_735 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_221))
begin
put_obmc_0_735_reg <= put_obmc_0_735;
if (reset == 1'b0 && ^(put_obmc_0_735) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_735_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_736 = put_obmc_0_736_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %736 = mul nsw i32 %735, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_736_reg <= put_obmc_0_736;
if (reset == 1'b0 && ^(put_obmc_0_736) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_736_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %736 = mul nsw i32 %735, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_736_reg <= put_obmc_0_736;
if (reset == 1'b0 && ^(put_obmc_0_736) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_736_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %737 = getelementptr inbounds i32* %7, i32 %733*/
begin
put_obmc_0_737 = (put_obmc_0_7 + (4 * put_obmc_0_733_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %737 = getelementptr inbounds i32* %7, i32 %733*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_737_reg <= put_obmc_0_737;
if (reset == 1'b0 && ^(put_obmc_0_737) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_737_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
begin
put_obmc_0_738 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_221))
begin
put_obmc_0_738_reg <= put_obmc_0_738;
if (reset == 1'b0 && ^(put_obmc_0_738) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_738_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %739 = getelementptr inbounds i32* %9, i32 %733*/
begin
put_obmc_0_739 = (put_obmc_0_9 + (4 * put_obmc_0_733_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %739 = getelementptr inbounds i32* %9, i32 %733*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_739_reg <= put_obmc_0_739;
if (reset == 1'b0 && ^(put_obmc_0_739) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_739_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
begin
put_obmc_0_740 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_740_reg <= put_obmc_0_740;
if (reset == 1'b0 && ^(put_obmc_0_740) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_740_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %741 = shl i32 %740, 1*/
begin
put_obmc_0_741 = (put_obmc_0_740 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %741 = shl i32 %740, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_741_reg <= put_obmc_0_741;
if (reset == 1'b0 && ^(put_obmc_0_741) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_741_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %742 = add i32 %738, 4*/
begin
put_obmc_0_742 = (put_obmc_0_738 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %742 = add i32 %738, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_221))
begin
put_obmc_0_742_reg <= put_obmc_0_742;
if (reset == 1'b0 && ^(put_obmc_0_742) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_742_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %743 = add i32 %742, %736*/
begin
put_obmc_0_743 = (put_obmc_0_742_reg + put_obmc_0_736);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %743 = add i32 %742, %736*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_743_reg <= put_obmc_0_743;
if (reset == 1'b0 && ^(put_obmc_0_743) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_743_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %744 = add i32 %743, %741*/
begin
put_obmc_0_744 = (put_obmc_0_743 + put_obmc_0_741);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %744 = add i32 %743, %741*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_744_reg <= put_obmc_0_744;
if (reset == 1'b0 && ^(put_obmc_0_744) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_744_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %745 = ashr i32 %744, 3*/
begin
put_obmc_0_745 = ($signed(put_obmc_0_744) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %745 = ashr i32 %744, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
put_obmc_0_745_reg <= put_obmc_0_745;
if (reset == 1'b0 && ^(put_obmc_0_745) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_745_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %746 = getelementptr inbounds i32* %dst, i32 %733*/
begin
put_obmc_0_746 = (arg_dst + (4 * put_obmc_0_733_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %746 = getelementptr inbounds i32* %dst, i32 %733*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_746_reg <= put_obmc_0_746;
if (reset == 1'b0 && ^(put_obmc_0_746) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_746_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %747 = add i32 %649, 5*/
begin
put_obmc_0_747 = (put_obmc_0_649 + 32'd5);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %747 = add i32 %649, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_747_reg <= put_obmc_0_747;
if (reset == 1'b0 && ^(put_obmc_0_747) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_747_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %748 = getelementptr inbounds i32* %5, i32 %747*/
begin
put_obmc_0_748 = (put_obmc_0_5 + (4 * put_obmc_0_747_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %748 = getelementptr inbounds i32* %5, i32 %747*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_748_reg <= put_obmc_0_748;
if (reset == 1'b0 && ^(put_obmc_0_748) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_748_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
begin
put_obmc_0_749 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_225))
begin
put_obmc_0_749_reg <= put_obmc_0_749;
if (reset == 1'b0 && ^(put_obmc_0_749) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_749_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_750 = put_obmc_0_750_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %750 = mul nsw i32 %749, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_750_reg <= put_obmc_0_750;
if (reset == 1'b0 && ^(put_obmc_0_750) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_750_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %750 = mul nsw i32 %749, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_750_reg <= put_obmc_0_750;
if (reset == 1'b0 && ^(put_obmc_0_750) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_750_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %751 = getelementptr inbounds i32* %7, i32 %747*/
begin
put_obmc_0_751 = (put_obmc_0_7 + (4 * put_obmc_0_747_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %751 = getelementptr inbounds i32* %7, i32 %747*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_751_reg <= put_obmc_0_751;
if (reset == 1'b0 && ^(put_obmc_0_751) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_751_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
begin
put_obmc_0_752 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_225))
begin
put_obmc_0_752_reg <= put_obmc_0_752;
if (reset == 1'b0 && ^(put_obmc_0_752) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_752_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %753 = getelementptr inbounds i32* %9, i32 %747*/
begin
put_obmc_0_753 = (put_obmc_0_9 + (4 * put_obmc_0_747_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %753 = getelementptr inbounds i32* %9, i32 %747*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_753_reg <= put_obmc_0_753;
if (reset == 1'b0 && ^(put_obmc_0_753) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_753_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
begin
put_obmc_0_754 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_754_reg <= put_obmc_0_754;
if (reset == 1'b0 && ^(put_obmc_0_754) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_754_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %755 = shl i32 %754, 1*/
begin
put_obmc_0_755 = (put_obmc_0_754 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %755 = shl i32 %754, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_755_reg <= put_obmc_0_755;
if (reset == 1'b0 && ^(put_obmc_0_755) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_755_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %756 = add i32 %752, 4*/
begin
put_obmc_0_756 = (put_obmc_0_752 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %756 = add i32 %752, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_225))
begin
put_obmc_0_756_reg <= put_obmc_0_756;
if (reset == 1'b0 && ^(put_obmc_0_756) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_756_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %757 = add i32 %756, %750*/
begin
put_obmc_0_757 = (put_obmc_0_756_reg + put_obmc_0_750);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %757 = add i32 %756, %750*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_757_reg <= put_obmc_0_757;
if (reset == 1'b0 && ^(put_obmc_0_757) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_757_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %758 = add i32 %757, %755*/
begin
put_obmc_0_758 = (put_obmc_0_757 + put_obmc_0_755);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %758 = add i32 %757, %755*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_758_reg <= put_obmc_0_758;
if (reset == 1'b0 && ^(put_obmc_0_758) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_758_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %759 = ashr i32 %758, 3*/
begin
put_obmc_0_759 = ($signed(put_obmc_0_758) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %759 = ashr i32 %758, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
put_obmc_0_759_reg <= put_obmc_0_759;
if (reset == 1'b0 && ^(put_obmc_0_759) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_759_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %760 = getelementptr inbounds i32* %dst, i32 %747*/
begin
put_obmc_0_760 = (arg_dst + (4 * put_obmc_0_747_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %760 = getelementptr inbounds i32* %dst, i32 %747*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_760_reg <= put_obmc_0_760;
if (reset == 1'b0 && ^(put_obmc_0_760) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_760_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %761 = add nsw i32 %733, %stride*/
begin
put_obmc_0_761 = (put_obmc_0_733 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %761 = add nsw i32 %733, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_761_reg <= put_obmc_0_761;
if (reset == 1'b0 && ^(put_obmc_0_761) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_761_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %762 = getelementptr inbounds i32* %5, i32 %761*/
begin
put_obmc_0_762 = (put_obmc_0_5 + (4 * put_obmc_0_761_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %762 = getelementptr inbounds i32* %5, i32 %761*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_762_reg <= put_obmc_0_762;
if (reset == 1'b0 && ^(put_obmc_0_762) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_762_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
begin
put_obmc_0_763 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_229))
begin
put_obmc_0_763_reg <= put_obmc_0_763;
if (reset == 1'b0 && ^(put_obmc_0_763) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_763_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_764 = put_obmc_0_764_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %764 = mul nsw i32 %763, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_764_reg <= put_obmc_0_764;
if (reset == 1'b0 && ^(put_obmc_0_764) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_764_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %764 = mul nsw i32 %763, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_764_reg <= put_obmc_0_764;
if (reset == 1'b0 && ^(put_obmc_0_764) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_764_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %765 = getelementptr inbounds i32* %7, i32 %761*/
begin
put_obmc_0_765 = (put_obmc_0_7 + (4 * put_obmc_0_761_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %765 = getelementptr inbounds i32* %7, i32 %761*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_765_reg <= put_obmc_0_765;
if (reset == 1'b0 && ^(put_obmc_0_765) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_765_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
begin
put_obmc_0_766 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_229))
begin
put_obmc_0_766_reg <= put_obmc_0_766;
if (reset == 1'b0 && ^(put_obmc_0_766) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_766_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %767 = getelementptr inbounds i32* %9, i32 %761*/
begin
put_obmc_0_767 = (put_obmc_0_9 + (4 * put_obmc_0_761_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %767 = getelementptr inbounds i32* %9, i32 %761*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_767_reg <= put_obmc_0_767;
if (reset == 1'b0 && ^(put_obmc_0_767) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_767_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
begin
put_obmc_0_768 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_768_reg <= put_obmc_0_768;
if (reset == 1'b0 && ^(put_obmc_0_768) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_768_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %769 = shl i32 %768, 1*/
begin
put_obmc_0_769 = (put_obmc_0_768 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %769 = shl i32 %768, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_769_reg <= put_obmc_0_769;
if (reset == 1'b0 && ^(put_obmc_0_769) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_769_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %770 = add i32 %766, 4*/
begin
put_obmc_0_770 = (put_obmc_0_766 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %770 = add i32 %766, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_229))
begin
put_obmc_0_770_reg <= put_obmc_0_770;
if (reset == 1'b0 && ^(put_obmc_0_770) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_770_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %771 = add i32 %770, %764*/
begin
put_obmc_0_771 = (put_obmc_0_770_reg + put_obmc_0_764);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %771 = add i32 %770, %764*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_771_reg <= put_obmc_0_771;
if (reset == 1'b0 && ^(put_obmc_0_771) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_771_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %772 = add i32 %771, %769*/
begin
put_obmc_0_772 = (put_obmc_0_771 + put_obmc_0_769);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %772 = add i32 %771, %769*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_772_reg <= put_obmc_0_772;
if (reset == 1'b0 && ^(put_obmc_0_772) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_772_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %773 = ashr i32 %772, 3*/
begin
put_obmc_0_773 = ($signed(put_obmc_0_772) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %773 = ashr i32 %772, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
put_obmc_0_773_reg <= put_obmc_0_773;
if (reset == 1'b0 && ^(put_obmc_0_773) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_773_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %774 = getelementptr inbounds i32* %dst, i32 %761*/
begin
put_obmc_0_774 = (arg_dst + (4 * put_obmc_0_761_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %774 = getelementptr inbounds i32* %dst, i32 %761*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_774_reg <= put_obmc_0_774;
if (reset == 1'b0 && ^(put_obmc_0_774) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_774_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %775 = add nsw i32 %747, %stride*/
begin
put_obmc_0_775 = (put_obmc_0_747 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %775 = add nsw i32 %747, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_775_reg <= put_obmc_0_775;
if (reset == 1'b0 && ^(put_obmc_0_775) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_775_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %776 = getelementptr inbounds i32* %5, i32 %775*/
begin
put_obmc_0_776 = (put_obmc_0_5 + (4 * put_obmc_0_775_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %776 = getelementptr inbounds i32* %5, i32 %775*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_776_reg <= put_obmc_0_776;
if (reset == 1'b0 && ^(put_obmc_0_776) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_776_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
begin
put_obmc_0_777 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_233))
begin
put_obmc_0_777_reg <= put_obmc_0_777;
if (reset == 1'b0 && ^(put_obmc_0_777) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_777_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_778 = put_obmc_0_778_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %778 = mul nsw i32 %777, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_778_reg <= put_obmc_0_778;
if (reset == 1'b0 && ^(put_obmc_0_778) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_778_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %778 = mul nsw i32 %777, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_778_reg <= put_obmc_0_778;
if (reset == 1'b0 && ^(put_obmc_0_778) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_778_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %779 = getelementptr inbounds i32* %7, i32 %775*/
begin
put_obmc_0_779 = (put_obmc_0_7 + (4 * put_obmc_0_775_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %779 = getelementptr inbounds i32* %7, i32 %775*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_779_reg <= put_obmc_0_779;
if (reset == 1'b0 && ^(put_obmc_0_779) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_779_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
begin
put_obmc_0_780 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_233))
begin
put_obmc_0_780_reg <= put_obmc_0_780;
if (reset == 1'b0 && ^(put_obmc_0_780) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_780_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %781 = getelementptr inbounds i32* %9, i32 %775*/
begin
put_obmc_0_781 = (put_obmc_0_9 + (4 * put_obmc_0_775_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %781 = getelementptr inbounds i32* %9, i32 %775*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_781_reg <= put_obmc_0_781;
if (reset == 1'b0 && ^(put_obmc_0_781) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_781_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
begin
put_obmc_0_782 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_782_reg <= put_obmc_0_782;
if (reset == 1'b0 && ^(put_obmc_0_782) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_782_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %783 = shl i32 %782, 1*/
begin
put_obmc_0_783 = (put_obmc_0_782 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %783 = shl i32 %782, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_783_reg <= put_obmc_0_783;
if (reset == 1'b0 && ^(put_obmc_0_783) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_783_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %784 = add i32 %780, 4*/
begin
put_obmc_0_784 = (put_obmc_0_780 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %784 = add i32 %780, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_233))
begin
put_obmc_0_784_reg <= put_obmc_0_784;
if (reset == 1'b0 && ^(put_obmc_0_784) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_784_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %785 = add i32 %784, %778*/
begin
put_obmc_0_785 = (put_obmc_0_784_reg + put_obmc_0_778);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %785 = add i32 %784, %778*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_785_reg <= put_obmc_0_785;
if (reset == 1'b0 && ^(put_obmc_0_785) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_785_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %786 = add i32 %785, %783*/
begin
put_obmc_0_786 = (put_obmc_0_785 + put_obmc_0_783);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %786 = add i32 %785, %783*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_786_reg <= put_obmc_0_786;
if (reset == 1'b0 && ^(put_obmc_0_786) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_786_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %787 = ashr i32 %786, 3*/
begin
put_obmc_0_787 = ($signed(put_obmc_0_786) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %787 = ashr i32 %786, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
put_obmc_0_787_reg <= put_obmc_0_787;
if (reset == 1'b0 && ^(put_obmc_0_787) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_787_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %788 = getelementptr inbounds i32* %dst, i32 %775*/
begin
put_obmc_0_788 = (arg_dst + (4 * put_obmc_0_775_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %788 = getelementptr inbounds i32* %dst, i32 %775*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_788_reg <= put_obmc_0_788;
if (reset == 1'b0 && ^(put_obmc_0_788) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_788_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %789 = add nsw i32 %649, 6*/
begin
put_obmc_0_789 = (put_obmc_0_649 + 32'd6);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %789 = add nsw i32 %649, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_789_reg <= put_obmc_0_789;
if (reset == 1'b0 && ^(put_obmc_0_789) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_789_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %790 = getelementptr inbounds i32* %5, i32 %789*/
begin
put_obmc_0_790 = (put_obmc_0_5 + (4 * put_obmc_0_789_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %790 = getelementptr inbounds i32* %5, i32 %789*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_790_reg <= put_obmc_0_790;
if (reset == 1'b0 && ^(put_obmc_0_790) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_790_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
begin
put_obmc_0_791 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_237))
begin
put_obmc_0_791_reg <= put_obmc_0_791;
if (reset == 1'b0 && ^(put_obmc_0_791) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_791_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_792 = put_obmc_0_792_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %792 = mul nsw i32 %791, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_792_reg <= put_obmc_0_792;
if (reset == 1'b0 && ^(put_obmc_0_792) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_792_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %792 = mul nsw i32 %791, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_792_reg <= put_obmc_0_792;
if (reset == 1'b0 && ^(put_obmc_0_792) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_792_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %793 = getelementptr inbounds i32* %7, i32 %789*/
begin
put_obmc_0_793 = (put_obmc_0_7 + (4 * put_obmc_0_789_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %793 = getelementptr inbounds i32* %7, i32 %789*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_793_reg <= put_obmc_0_793;
if (reset == 1'b0 && ^(put_obmc_0_793) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_793_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
begin
put_obmc_0_794 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_237))
begin
put_obmc_0_794_reg <= put_obmc_0_794;
if (reset == 1'b0 && ^(put_obmc_0_794) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_794_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %795 = shl i32 %794, 1*/
begin
put_obmc_0_795 = (put_obmc_0_794 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %795 = shl i32 %794, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_237))
begin
put_obmc_0_795_reg <= put_obmc_0_795;
if (reset == 1'b0 && ^(put_obmc_0_795) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_795_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %796 = getelementptr inbounds i32* %9, i32 %789*/
begin
put_obmc_0_796 = (put_obmc_0_9 + (4 * put_obmc_0_789_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %796 = getelementptr inbounds i32* %9, i32 %789*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_796_reg <= put_obmc_0_796;
if (reset == 1'b0 && ^(put_obmc_0_796) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_796_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
begin
put_obmc_0_797 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_797_reg <= put_obmc_0_797;
if (reset == 1'b0 && ^(put_obmc_0_797) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_797_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %798 = add i32 %792, 4*/
begin
put_obmc_0_798 = (put_obmc_0_792 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %798 = add i32 %792, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_798_reg <= put_obmc_0_798;
if (reset == 1'b0 && ^(put_obmc_0_798) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_798_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %799 = add i32 %798, %797*/
begin
put_obmc_0_799 = (put_obmc_0_798 + put_obmc_0_797);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %799 = add i32 %798, %797*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_799_reg <= put_obmc_0_799;
if (reset == 1'b0 && ^(put_obmc_0_799) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_799_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %800 = add i32 %799, %795*/
begin
put_obmc_0_800 = (put_obmc_0_799 + put_obmc_0_795_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %800 = add i32 %799, %795*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_800_reg <= put_obmc_0_800;
if (reset == 1'b0 && ^(put_obmc_0_800) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_800_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %801 = ashr i32 %800, 3*/
begin
put_obmc_0_801 = ($signed(put_obmc_0_800) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %801 = ashr i32 %800, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
put_obmc_0_801_reg <= put_obmc_0_801;
if (reset == 1'b0 && ^(put_obmc_0_801) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_801_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %802 = getelementptr inbounds i32* %dst, i32 %789*/
begin
put_obmc_0_802 = (arg_dst + (4 * put_obmc_0_789_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %802 = getelementptr inbounds i32* %dst, i32 %789*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_802_reg <= put_obmc_0_802;
if (reset == 1'b0 && ^(put_obmc_0_802) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_802_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %803 = add nsw i32 %649, 7*/
begin
put_obmc_0_803 = (put_obmc_0_649 + 32'd7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %803 = add nsw i32 %649, 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_803_reg <= put_obmc_0_803;
if (reset == 1'b0 && ^(put_obmc_0_803) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_803_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %804 = getelementptr inbounds i32* %5, i32 %803*/
begin
put_obmc_0_804 = (put_obmc_0_5 + (4 * put_obmc_0_803_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %804 = getelementptr inbounds i32* %5, i32 %803*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_804_reg <= put_obmc_0_804;
if (reset == 1'b0 && ^(put_obmc_0_804) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_804_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
begin
put_obmc_0_805 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_241))
begin
put_obmc_0_805_reg <= put_obmc_0_805;
if (reset == 1'b0 && ^(put_obmc_0_805) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_805_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_806 = put_obmc_0_806_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %806 = mul nsw i32 %805, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_806_reg <= put_obmc_0_806;
if (reset == 1'b0 && ^(put_obmc_0_806) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_806_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %806 = mul nsw i32 %805, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_806_reg <= put_obmc_0_806;
if (reset == 1'b0 && ^(put_obmc_0_806) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_806_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %807 = getelementptr inbounds i32* %7, i32 %803*/
begin
put_obmc_0_807 = (put_obmc_0_7 + (4 * put_obmc_0_803_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %807 = getelementptr inbounds i32* %7, i32 %803*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_807_reg <= put_obmc_0_807;
if (reset == 1'b0 && ^(put_obmc_0_807) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_807_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
begin
put_obmc_0_808 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_241))
begin
put_obmc_0_808_reg <= put_obmc_0_808;
if (reset == 1'b0 && ^(put_obmc_0_808) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_808_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %809 = shl i32 %808, 1*/
begin
put_obmc_0_809 = (put_obmc_0_808 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %809 = shl i32 %808, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_241))
begin
put_obmc_0_809_reg <= put_obmc_0_809;
if (reset == 1'b0 && ^(put_obmc_0_809) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_809_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %810 = getelementptr inbounds i32* %9, i32 %803*/
begin
put_obmc_0_810 = (put_obmc_0_9 + (4 * put_obmc_0_803_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %810 = getelementptr inbounds i32* %9, i32 %803*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_810_reg <= put_obmc_0_810;
if (reset == 1'b0 && ^(put_obmc_0_810) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_810_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
begin
put_obmc_0_811 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_811_reg <= put_obmc_0_811;
if (reset == 1'b0 && ^(put_obmc_0_811) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_811_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %812 = add i32 %806, 4*/
begin
put_obmc_0_812 = (put_obmc_0_806 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %812 = add i32 %806, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_812_reg <= put_obmc_0_812;
if (reset == 1'b0 && ^(put_obmc_0_812) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_812_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %813 = add i32 %812, %811*/
begin
put_obmc_0_813 = (put_obmc_0_812 + put_obmc_0_811);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %813 = add i32 %812, %811*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_813_reg <= put_obmc_0_813;
if (reset == 1'b0 && ^(put_obmc_0_813) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_813_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %814 = add i32 %813, %809*/
begin
put_obmc_0_814 = (put_obmc_0_813 + put_obmc_0_809_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %814 = add i32 %813, %809*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_814_reg <= put_obmc_0_814;
if (reset == 1'b0 && ^(put_obmc_0_814) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_814_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %815 = ashr i32 %814, 3*/
begin
put_obmc_0_815 = ($signed(put_obmc_0_814) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %815 = ashr i32 %814, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
put_obmc_0_815_reg <= put_obmc_0_815;
if (reset == 1'b0 && ^(put_obmc_0_815) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_815_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %816 = getelementptr inbounds i32* %dst, i32 %803*/
begin
put_obmc_0_816 = (arg_dst + (4 * put_obmc_0_803_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %816 = getelementptr inbounds i32* %dst, i32 %803*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_816_reg <= put_obmc_0_816;
if (reset == 1'b0 && ^(put_obmc_0_816) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_816_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %817 = add nsw i32 %649, %stride*/
begin
put_obmc_0_817 = (put_obmc_0_649 + arg_stride);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %817 = add nsw i32 %649, %stride*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_817_reg <= put_obmc_0_817;
if (reset == 1'b0 && ^(put_obmc_0_817) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_817_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %818 = getelementptr inbounds i32* %4, i32 %817*/
begin
put_obmc_0_818 = (put_obmc_0_4 + (4 * put_obmc_0_817_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %818 = getelementptr inbounds i32* %4, i32 %817*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_818_reg <= put_obmc_0_818;
if (reset == 1'b0 && ^(put_obmc_0_818) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_818_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
begin
put_obmc_0_819 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_245))
begin
put_obmc_0_819_reg <= put_obmc_0_819;
if (reset == 1'b0 && ^(put_obmc_0_819) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_819_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %820 = getelementptr inbounds i32* %5, i32 %817*/
begin
put_obmc_0_820 = (put_obmc_0_5 + (4 * put_obmc_0_817_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %820 = getelementptr inbounds i32* %5, i32 %817*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_820_reg <= put_obmc_0_820;
if (reset == 1'b0 && ^(put_obmc_0_820) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_820_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
begin
put_obmc_0_821 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_245))
begin
put_obmc_0_821_reg <= put_obmc_0_821;
if (reset == 1'b0 && ^(put_obmc_0_821) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_821_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %822 = shl i32 %821, 2*/
begin
put_obmc_0_822 = (put_obmc_0_821 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %822 = shl i32 %821, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_245))
begin
put_obmc_0_822_reg <= put_obmc_0_822;
if (reset == 1'b0 && ^(put_obmc_0_822) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_822_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %823 = getelementptr inbounds i32* %9, i32 %817*/
begin
put_obmc_0_823 = (put_obmc_0_9 + (4 * put_obmc_0_817_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %823 = getelementptr inbounds i32* %9, i32 %817*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_823_reg <= put_obmc_0_823;
if (reset == 1'b0 && ^(put_obmc_0_823) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_823_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
begin
put_obmc_0_824 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
put_obmc_0_824_reg <= put_obmc_0_824;
if (reset == 1'b0 && ^(put_obmc_0_824) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_824_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp4 = add i32 %824, %819*/
begin
put_obmc_0_tmp4 = (put_obmc_0_824 + put_obmc_0_819_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp4 = add i32 %824, %819*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
put_obmc_0_tmp4_reg <= put_obmc_0_tmp4;
if (reset == 1'b0 && ^(put_obmc_0_tmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp4_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp5 = shl i32 %tmp4, 1*/
begin
put_obmc_0_tmp5 = (put_obmc_0_tmp4 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp5 = shl i32 %tmp4, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
put_obmc_0_tmp5_reg <= put_obmc_0_tmp5;
if (reset == 1'b0 && ^(put_obmc_0_tmp5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp5_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %825 = add i32 %822, 4*/
begin
put_obmc_0_825 = (put_obmc_0_822 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %825 = add i32 %822, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_245))
begin
put_obmc_0_825_reg <= put_obmc_0_825;
if (reset == 1'b0 && ^(put_obmc_0_825) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_825_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %826 = add i32 %825, %tmp5*/
begin
put_obmc_0_826 = (put_obmc_0_825_reg + put_obmc_0_tmp5);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %826 = add i32 %825, %tmp5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
put_obmc_0_826_reg <= put_obmc_0_826;
if (reset == 1'b0 && ^(put_obmc_0_826) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_826_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %827 = ashr i32 %826, 3*/
begin
put_obmc_0_827 = ($signed(put_obmc_0_826) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %827 = ashr i32 %826, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
put_obmc_0_827_reg <= put_obmc_0_827;
if (reset == 1'b0 && ^(put_obmc_0_827) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_827_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %828 = getelementptr inbounds i32* %dst, i32 %817*/
begin
put_obmc_0_828 = (arg_dst + (4 * put_obmc_0_817_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %828 = getelementptr inbounds i32* %dst, i32 %817*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_828_reg <= put_obmc_0_828;
if (reset == 1'b0 && ^(put_obmc_0_828) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_828_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %829 = add nsw i32 %817, 1*/
begin
put_obmc_0_829 = (put_obmc_0_817 + 32'd1);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %829 = add nsw i32 %817, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_829_reg <= put_obmc_0_829;
if (reset == 1'b0 && ^(put_obmc_0_829) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_829_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %830 = getelementptr inbounds i32* %4, i32 %829*/
begin
put_obmc_0_830 = (put_obmc_0_4 + (4 * put_obmc_0_829_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %830 = getelementptr inbounds i32* %4, i32 %829*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
put_obmc_0_830_reg <= put_obmc_0_830;
if (reset == 1'b0 && ^(put_obmc_0_830) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_830_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
begin
put_obmc_0_831 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_249))
begin
put_obmc_0_831_reg <= put_obmc_0_831;
if (reset == 1'b0 && ^(put_obmc_0_831) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_831_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %832 = getelementptr inbounds i32* %5, i32 %829*/
begin
put_obmc_0_832 = (put_obmc_0_5 + (4 * put_obmc_0_829_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %832 = getelementptr inbounds i32* %5, i32 %829*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_832_reg <= put_obmc_0_832;
if (reset == 1'b0 && ^(put_obmc_0_832) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_832_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
begin
put_obmc_0_833 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_249))
begin
put_obmc_0_833_reg <= put_obmc_0_833;
if (reset == 1'b0 && ^(put_obmc_0_833) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_833_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_834 = put_obmc_0_834_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %834 = mul nsw i32 %833, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_834_reg <= put_obmc_0_834;
if (reset == 1'b0 && ^(put_obmc_0_834) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_834_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %834 = mul nsw i32 %833, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_834_reg <= put_obmc_0_834;
if (reset == 1'b0 && ^(put_obmc_0_834) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_834_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %835 = getelementptr inbounds i32* %9, i32 %829*/
begin
put_obmc_0_835 = (put_obmc_0_9 + (4 * put_obmc_0_829_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %835 = getelementptr inbounds i32* %9, i32 %829*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_835_reg <= put_obmc_0_835;
if (reset == 1'b0 && ^(put_obmc_0_835) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_835_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
begin
put_obmc_0_836 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_836_reg <= put_obmc_0_836;
if (reset == 1'b0 && ^(put_obmc_0_836) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_836_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %837 = shl i32 %836, 1*/
begin
put_obmc_0_837 = (put_obmc_0_836 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %837 = shl i32 %836, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_837_reg <= put_obmc_0_837;
if (reset == 1'b0 && ^(put_obmc_0_837) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_837_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %838 = add i32 %831, 4*/
begin
put_obmc_0_838 = (put_obmc_0_831 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %838 = add i32 %831, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_249))
begin
put_obmc_0_838_reg <= put_obmc_0_838;
if (reset == 1'b0 && ^(put_obmc_0_838) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_838_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %839 = add i32 %838, %834*/
begin
put_obmc_0_839 = (put_obmc_0_838_reg + put_obmc_0_834);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %839 = add i32 %838, %834*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_839_reg <= put_obmc_0_839;
if (reset == 1'b0 && ^(put_obmc_0_839) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_839_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %840 = add i32 %839, %837*/
begin
put_obmc_0_840 = (put_obmc_0_839 + put_obmc_0_837);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %840 = add i32 %839, %837*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_840_reg <= put_obmc_0_840;
if (reset == 1'b0 && ^(put_obmc_0_840) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_840_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %841 = ashr i32 %840, 3*/
begin
put_obmc_0_841 = ($signed(put_obmc_0_840) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %841 = ashr i32 %840, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
put_obmc_0_841_reg <= put_obmc_0_841;
if (reset == 1'b0 && ^(put_obmc_0_841) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_841_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %842 = getelementptr inbounds i32* %dst, i32 %829*/
begin
put_obmc_0_842 = (arg_dst + (4 * put_obmc_0_829_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %842 = getelementptr inbounds i32* %dst, i32 %829*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_842_reg <= put_obmc_0_842;
if (reset == 1'b0 && ^(put_obmc_0_842) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_842_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %843 = add nsw i32 %817, 6*/
begin
put_obmc_0_843 = (put_obmc_0_817 + 32'd6);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %843 = add nsw i32 %817, 6*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_843_reg <= put_obmc_0_843;
if (reset == 1'b0 && ^(put_obmc_0_843) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_843_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %844 = getelementptr inbounds i32* %5, i32 %843*/
begin
put_obmc_0_844 = (put_obmc_0_5 + (4 * put_obmc_0_843_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %844 = getelementptr inbounds i32* %5, i32 %843*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_844_reg <= put_obmc_0_844;
if (reset == 1'b0 && ^(put_obmc_0_844) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_844_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
begin
put_obmc_0_845 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_253))
begin
put_obmc_0_845_reg <= put_obmc_0_845;
if (reset == 1'b0 && ^(put_obmc_0_845) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_845_reg"); $finish; end
end
end
always @(*) begin
put_obmc_0_846 = put_obmc_0_846_stage0_reg;
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %846 = mul nsw i32 %845, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_846_reg <= put_obmc_0_846;
if (reset == 1'b0 && ^(put_obmc_0_846) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_846_reg"); $finish; end
end
/* put_obmc: %0*/
/*   %846 = mul nsw i32 %845, 5*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_846_reg <= put_obmc_0_846;
if (reset == 1'b0 && ^(put_obmc_0_846) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_846_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %847 = getelementptr inbounds i32* %7, i32 %843*/
begin
put_obmc_0_847 = (put_obmc_0_7 + (4 * put_obmc_0_843_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %847 = getelementptr inbounds i32* %7, i32 %843*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_847_reg <= put_obmc_0_847;
if (reset == 1'b0 && ^(put_obmc_0_847) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_847_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
begin
put_obmc_0_848 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_253))
begin
put_obmc_0_848_reg <= put_obmc_0_848;
if (reset == 1'b0 && ^(put_obmc_0_848) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_848_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %849 = getelementptr inbounds i32* %9, i32 %843*/
begin
put_obmc_0_849 = (put_obmc_0_9 + (4 * put_obmc_0_843_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %849 = getelementptr inbounds i32* %9, i32 %843*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_849_reg <= put_obmc_0_849;
if (reset == 1'b0 && ^(put_obmc_0_849) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_849_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
begin
put_obmc_0_850 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_850_reg <= put_obmc_0_850;
if (reset == 1'b0 && ^(put_obmc_0_850) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_850_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %851 = shl i32 %850, 1*/
begin
put_obmc_0_851 = (put_obmc_0_850 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %851 = shl i32 %850, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_851_reg <= put_obmc_0_851;
if (reset == 1'b0 && ^(put_obmc_0_851) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_851_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %852 = add i32 %848, 4*/
begin
put_obmc_0_852 = (put_obmc_0_848 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %852 = add i32 %848, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_253))
begin
put_obmc_0_852_reg <= put_obmc_0_852;
if (reset == 1'b0 && ^(put_obmc_0_852) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_852_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %853 = add i32 %852, %846*/
begin
put_obmc_0_853 = (put_obmc_0_852_reg + put_obmc_0_846);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %853 = add i32 %852, %846*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_853_reg <= put_obmc_0_853;
if (reset == 1'b0 && ^(put_obmc_0_853) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_853_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %854 = add i32 %853, %851*/
begin
put_obmc_0_854 = (put_obmc_0_853 + put_obmc_0_851);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %854 = add i32 %853, %851*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_854_reg <= put_obmc_0_854;
if (reset == 1'b0 && ^(put_obmc_0_854) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_854_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %855 = ashr i32 %854, 3*/
begin
put_obmc_0_855 = ($signed(put_obmc_0_854) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %855 = ashr i32 %854, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
put_obmc_0_855_reg <= put_obmc_0_855;
if (reset == 1'b0 && ^(put_obmc_0_855) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_855_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %856 = getelementptr inbounds i32* %dst, i32 %843*/
begin
put_obmc_0_856 = (arg_dst + (4 * put_obmc_0_843_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %856 = getelementptr inbounds i32* %dst, i32 %843*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_856_reg <= put_obmc_0_856;
if (reset == 1'b0 && ^(put_obmc_0_856) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_856_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %857 = add nsw i32 %817, 7*/
begin
put_obmc_0_857 = (put_obmc_0_817 + 32'd7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %857 = add nsw i32 %817, 7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
put_obmc_0_857_reg <= put_obmc_0_857;
if (reset == 1'b0 && ^(put_obmc_0_857) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_857_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %858 = getelementptr inbounds i32* %5, i32 %857*/
begin
put_obmc_0_858 = (put_obmc_0_5 + (4 * put_obmc_0_857_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %858 = getelementptr inbounds i32* %5, i32 %857*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_858_reg <= put_obmc_0_858;
if (reset == 1'b0 && ^(put_obmc_0_858) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_858_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
begin
put_obmc_0_859 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_257))
begin
put_obmc_0_859_reg <= put_obmc_0_859;
if (reset == 1'b0 && ^(put_obmc_0_859) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_859_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %860 = shl i32 %859, 2*/
begin
put_obmc_0_860 = (put_obmc_0_859 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %860 = shl i32 %859, 2*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_257))
begin
put_obmc_0_860_reg <= put_obmc_0_860;
if (reset == 1'b0 && ^(put_obmc_0_860) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_860_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %861 = getelementptr inbounds i32* %7, i32 %857*/
begin
put_obmc_0_861 = (put_obmc_0_7 + (4 * put_obmc_0_857_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %861 = getelementptr inbounds i32* %7, i32 %857*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
put_obmc_0_861_reg <= put_obmc_0_861;
if (reset == 1'b0 && ^(put_obmc_0_861) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_861_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
begin
put_obmc_0_862 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_257))
begin
put_obmc_0_862_reg <= put_obmc_0_862;
if (reset == 1'b0 && ^(put_obmc_0_862) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_862_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %863 = getelementptr inbounds i32* %9, i32 %857*/
begin
put_obmc_0_863 = (put_obmc_0_9 + (4 * put_obmc_0_857_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %863 = getelementptr inbounds i32* %9, i32 %857*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_5))
begin
put_obmc_0_863_reg <= put_obmc_0_863;
if (reset == 1'b0 && ^(put_obmc_0_863) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_863_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
begin
put_obmc_0_864 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
put_obmc_0_864_reg <= put_obmc_0_864;
if (reset == 1'b0 && ^(put_obmc_0_864) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_864_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp6 = add i32 %864, %862*/
begin
put_obmc_0_tmp6 = (put_obmc_0_864 + put_obmc_0_862_reg);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp6 = add i32 %864, %862*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
put_obmc_0_tmp6_reg <= put_obmc_0_tmp6;
if (reset == 1'b0 && ^(put_obmc_0_tmp6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp6_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %tmp7 = shl i32 %tmp6, 1*/
begin
put_obmc_0_tmp7 = (put_obmc_0_tmp6 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %tmp7 = shl i32 %tmp6, 1*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
put_obmc_0_tmp7_reg <= put_obmc_0_tmp7;
if (reset == 1'b0 && ^(put_obmc_0_tmp7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_tmp7_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %865 = add i32 %860, 4*/
begin
put_obmc_0_865 = (put_obmc_0_860 + 32'd4);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %865 = add i32 %860, 4*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_257))
begin
put_obmc_0_865_reg <= put_obmc_0_865;
if (reset == 1'b0 && ^(put_obmc_0_865) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_865_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %866 = add i32 %865, %tmp7*/
begin
put_obmc_0_866 = (put_obmc_0_865_reg + put_obmc_0_tmp7);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %866 = add i32 %865, %tmp7*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
put_obmc_0_866_reg <= put_obmc_0_866;
if (reset == 1'b0 && ^(put_obmc_0_866) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_866_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %867 = ashr i32 %866, 3*/
begin
put_obmc_0_867 = ($signed(put_obmc_0_866) >>> 32'd3);
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %867 = ashr i32 %866, 3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
put_obmc_0_867_reg <= put_obmc_0_867;
if (reset == 1'b0 && ^(put_obmc_0_867) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_867_reg"); $finish; end
end
end
always @(*) begin
/* put_obmc: %0*/
/*   %868 = getelementptr inbounds i32* %dst, i32 %857*/
begin
put_obmc_0_868 = (arg_dst + (4 * put_obmc_0_857_reg));
end
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %868 = getelementptr inbounds i32* %dst, i32 %857*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
put_obmc_0_868_reg <= put_obmc_0_868;
if (reset == 1'b0 && ^(put_obmc_0_868) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_0_868_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_put_obmc_0_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %24 = mul nsw i32 %23, 5*/
if ((lpm_mult_put_obmc_0_24_en == 1'd1))
begin
put_obmc_0_24_stage0_reg <= (put_obmc_0_23 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %37 = mul nsw i32 %36, 5*/
if ((lpm_mult_put_obmc_0_37_en == 1'd1))
begin
put_obmc_0_37_stage0_reg <= (put_obmc_0_36 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %50 = mul nsw i32 %49, 5*/
if ((lpm_mult_put_obmc_0_50_en == 1'd1))
begin
put_obmc_0_50_stage0_reg <= (put_obmc_0_49 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %64 = mul nsw i32 %63, 5*/
if ((lpm_mult_put_obmc_0_64_en == 1'd1))
begin
put_obmc_0_64_stage0_reg <= (put_obmc_0_63 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %78 = mul nsw i32 %77, 5*/
if ((lpm_mult_put_obmc_0_78_en == 1'd1))
begin
put_obmc_0_78_stage0_reg <= (put_obmc_0_77 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_89_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %89 = mul nsw i32 %88, 5*/
if ((lpm_mult_put_obmc_0_89_en == 1'd1))
begin
put_obmc_0_89_stage0_reg <= (put_obmc_0_88 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %102 = mul nsw i32 %101, 5*/
if ((lpm_mult_put_obmc_0_102_en == 1'd1))
begin
put_obmc_0_102_stage0_reg <= (put_obmc_0_101 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_116_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %116 = mul nsw i32 %115, 5*/
if ((lpm_mult_put_obmc_0_116_en == 1'd1))
begin
put_obmc_0_116_stage0_reg <= (put_obmc_0_115 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_130_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %130 = mul nsw i32 %129, 5*/
if ((lpm_mult_put_obmc_0_130_en == 1'd1))
begin
put_obmc_0_130_stage0_reg <= (put_obmc_0_129 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %143 = mul nsw i32 %142, 5*/
if ((lpm_mult_put_obmc_0_143_en == 1'd1))
begin
put_obmc_0_143_stage0_reg <= (put_obmc_0_142 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %169 = mul nsw i32 %168, 5*/
if ((lpm_mult_put_obmc_0_169_en == 1'd1))
begin
put_obmc_0_169_stage0_reg <= (put_obmc_0_168 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_183_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %183 = mul nsw i32 %182, 5*/
if ((lpm_mult_put_obmc_0_183_en == 1'd1))
begin
put_obmc_0_183_stage0_reg <= (put_obmc_0_182 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_194_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %194 = mul nsw i32 %193, 5*/
if ((lpm_mult_put_obmc_0_194_en == 1'd1))
begin
put_obmc_0_194_stage0_reg <= (put_obmc_0_193 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_208_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %208 = mul nsw i32 %207, 5*/
if ((lpm_mult_put_obmc_0_208_en == 1'd1))
begin
put_obmc_0_208_stage0_reg <= (put_obmc_0_207 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_225_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %225 = mul nsw i32 %224, 5*/
if ((lpm_mult_put_obmc_0_225_en == 1'd1))
begin
put_obmc_0_225_stage0_reg <= (put_obmc_0_224 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_239_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %239 = mul nsw i32 %238, 5*/
if ((lpm_mult_put_obmc_0_239_en == 1'd1))
begin
put_obmc_0_239_stage0_reg <= (put_obmc_0_238 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_253_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %253 = mul nsw i32 %252, 5*/
if ((lpm_mult_put_obmc_0_253_en == 1'd1))
begin
put_obmc_0_253_stage0_reg <= (put_obmc_0_252 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_267_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %267 = mul nsw i32 %266, 5*/
if ((lpm_mult_put_obmc_0_267_en == 1'd1))
begin
put_obmc_0_267_stage0_reg <= (put_obmc_0_266 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_280_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %280 = mul nsw i32 %279, 6*/
if ((lpm_mult_put_obmc_0_280_en == 1'd1))
begin
put_obmc_0_280_stage0_reg <= (put_obmc_0_279 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_293_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %293 = mul nsw i32 %292, 6*/
if ((lpm_mult_put_obmc_0_293_en == 1'd1))
begin
put_obmc_0_293_stage0_reg <= (put_obmc_0_292 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_306_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %306 = mul nsw i32 %305, 6*/
if ((lpm_mult_put_obmc_0_306_en == 1'd1))
begin
put_obmc_0_306_stage0_reg <= (put_obmc_0_305 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_319_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %319 = mul nsw i32 %318, 6*/
if ((lpm_mult_put_obmc_0_319_en == 1'd1))
begin
put_obmc_0_319_stage0_reg <= (put_obmc_0_318 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_330_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %330 = mul nsw i32 %329, 6*/
if ((lpm_mult_put_obmc_0_330_en == 1'd1))
begin
put_obmc_0_330_stage0_reg <= (put_obmc_0_329 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_343_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %343 = mul nsw i32 %342, 6*/
if ((lpm_mult_put_obmc_0_343_en == 1'd1))
begin
put_obmc_0_343_stage0_reg <= (put_obmc_0_342 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_356_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %356 = mul nsw i32 %355, 6*/
if ((lpm_mult_put_obmc_0_356_en == 1'd1))
begin
put_obmc_0_356_stage0_reg <= (put_obmc_0_355 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_369_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %369 = mul nsw i32 %368, 6*/
if ((lpm_mult_put_obmc_0_369_en == 1'd1))
begin
put_obmc_0_369_stage0_reg <= (put_obmc_0_368 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_382_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %382 = mul nsw i32 %381, 5*/
if ((lpm_mult_put_obmc_0_382_en == 1'd1))
begin
put_obmc_0_382_stage0_reg <= (put_obmc_0_381 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_396_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %396 = mul nsw i32 %395, 5*/
if ((lpm_mult_put_obmc_0_396_en == 1'd1))
begin
put_obmc_0_396_stage0_reg <= (put_obmc_0_395 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_410_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %410 = mul nsw i32 %409, 5*/
if ((lpm_mult_put_obmc_0_410_en == 1'd1))
begin
put_obmc_0_410_stage0_reg <= (put_obmc_0_409 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_424_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %424 = mul nsw i32 %423, 5*/
if ((lpm_mult_put_obmc_0_424_en == 1'd1))
begin
put_obmc_0_424_stage0_reg <= (put_obmc_0_423 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_439_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %439 = mul nsw i32 %438, 5*/
if ((lpm_mult_put_obmc_0_439_en == 1'd1))
begin
put_obmc_0_439_stage0_reg <= (put_obmc_0_438 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_453_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %453 = mul nsw i32 %452, 5*/
if ((lpm_mult_put_obmc_0_453_en == 1'd1))
begin
put_obmc_0_453_stage0_reg <= (put_obmc_0_452 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_467_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %467 = mul nsw i32 %466, 5*/
if ((lpm_mult_put_obmc_0_467_en == 1'd1))
begin
put_obmc_0_467_stage0_reg <= (put_obmc_0_466 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_481_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %481 = mul nsw i32 %480, 5*/
if ((lpm_mult_put_obmc_0_481_en == 1'd1))
begin
put_obmc_0_481_stage0_reg <= (put_obmc_0_480 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_494_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %494 = mul nsw i32 %493, 6*/
if ((lpm_mult_put_obmc_0_494_en == 1'd1))
begin
put_obmc_0_494_stage0_reg <= (put_obmc_0_493 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_507_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %507 = mul nsw i32 %506, 6*/
if ((lpm_mult_put_obmc_0_507_en == 1'd1))
begin
put_obmc_0_507_stage0_reg <= (put_obmc_0_506 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_520_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %520 = mul nsw i32 %519, 6*/
if ((lpm_mult_put_obmc_0_520_en == 1'd1))
begin
put_obmc_0_520_stage0_reg <= (put_obmc_0_519 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_533_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %533 = mul nsw i32 %532, 6*/
if ((lpm_mult_put_obmc_0_533_en == 1'd1))
begin
put_obmc_0_533_stage0_reg <= (put_obmc_0_532 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_544_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %544 = mul nsw i32 %543, 6*/
if ((lpm_mult_put_obmc_0_544_en == 1'd1))
begin
put_obmc_0_544_stage0_reg <= (put_obmc_0_543 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_557_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %557 = mul nsw i32 %556, 6*/
if ((lpm_mult_put_obmc_0_557_en == 1'd1))
begin
put_obmc_0_557_stage0_reg <= (put_obmc_0_556 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_570_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %570 = mul nsw i32 %569, 6*/
if ((lpm_mult_put_obmc_0_570_en == 1'd1))
begin
put_obmc_0_570_stage0_reg <= (put_obmc_0_569 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_583_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %583 = mul nsw i32 %582, 6*/
if ((lpm_mult_put_obmc_0_583_en == 1'd1))
begin
put_obmc_0_583_stage0_reg <= (put_obmc_0_582 * 32'd6);
end
end
always @(*) begin
lpm_mult_put_obmc_0_596_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %596 = mul nsw i32 %595, 5*/
if ((lpm_mult_put_obmc_0_596_en == 1'd1))
begin
put_obmc_0_596_stage0_reg <= (put_obmc_0_595 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_610_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %610 = mul nsw i32 %609, 5*/
if ((lpm_mult_put_obmc_0_610_en == 1'd1))
begin
put_obmc_0_610_stage0_reg <= (put_obmc_0_609 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_624_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %624 = mul nsw i32 %623, 5*/
if ((lpm_mult_put_obmc_0_624_en == 1'd1))
begin
put_obmc_0_624_stage0_reg <= (put_obmc_0_623 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_638_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %638 = mul nsw i32 %637, 5*/
if ((lpm_mult_put_obmc_0_638_en == 1'd1))
begin
put_obmc_0_638_stage0_reg <= (put_obmc_0_637 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_655_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %655 = mul nsw i32 %654, 5*/
if ((lpm_mult_put_obmc_0_655_en == 1'd1))
begin
put_obmc_0_655_stage0_reg <= (put_obmc_0_654 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_669_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %669 = mul nsw i32 %668, 5*/
if ((lpm_mult_put_obmc_0_669_en == 1'd1))
begin
put_obmc_0_669_stage0_reg <= (put_obmc_0_668 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_682_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %682 = mul nsw i32 %681, 5*/
if ((lpm_mult_put_obmc_0_682_en == 1'd1))
begin
put_obmc_0_682_stage0_reg <= (put_obmc_0_681 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_696_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %696 = mul nsw i32 %695, 5*/
if ((lpm_mult_put_obmc_0_696_en == 1'd1))
begin
put_obmc_0_696_stage0_reg <= (put_obmc_0_695 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_710_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %710 = mul nsw i32 %709, 5*/
if ((lpm_mult_put_obmc_0_710_en == 1'd1))
begin
put_obmc_0_710_stage0_reg <= (put_obmc_0_709 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_724_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %724 = mul nsw i32 %723, 5*/
if ((lpm_mult_put_obmc_0_724_en == 1'd1))
begin
put_obmc_0_724_stage0_reg <= (put_obmc_0_723 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_736_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %736 = mul nsw i32 %735, 5*/
if ((lpm_mult_put_obmc_0_736_en == 1'd1))
begin
put_obmc_0_736_stage0_reg <= (put_obmc_0_735 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_750_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %750 = mul nsw i32 %749, 5*/
if ((lpm_mult_put_obmc_0_750_en == 1'd1))
begin
put_obmc_0_750_stage0_reg <= (put_obmc_0_749 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_764_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %764 = mul nsw i32 %763, 5*/
if ((lpm_mult_put_obmc_0_764_en == 1'd1))
begin
put_obmc_0_764_stage0_reg <= (put_obmc_0_763 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_778_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %778 = mul nsw i32 %777, 5*/
if ((lpm_mult_put_obmc_0_778_en == 1'd1))
begin
put_obmc_0_778_stage0_reg <= (put_obmc_0_777 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_792_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %792 = mul nsw i32 %791, 5*/
if ((lpm_mult_put_obmc_0_792_en == 1'd1))
begin
put_obmc_0_792_stage0_reg <= (put_obmc_0_791 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_806_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %806 = mul nsw i32 %805, 5*/
if ((lpm_mult_put_obmc_0_806_en == 1'd1))
begin
put_obmc_0_806_stage0_reg <= (put_obmc_0_805 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_834_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %834 = mul nsw i32 %833, 5*/
if ((lpm_mult_put_obmc_0_834_en == 1'd1))
begin
put_obmc_0_834_stage0_reg <= (put_obmc_0_833 * 32'd5);
end
end
always @(*) begin
lpm_mult_put_obmc_0_846_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_obmc: %0*/
/*   %846 = mul nsw i32 %845, 5*/
if ((lpm_mult_put_obmc_0_846_en == 1'd1))
begin
put_obmc_0_846_stage0_reg <= (put_obmc_0_845 * 32'd5);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* put_obmc: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_259))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %16, i32* %dst, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_8))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_12))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %41, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_20))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_28))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %95, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_36))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %122, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_44))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %149, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_52))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_60))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %201, i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_68))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %229, i32* %230, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_76))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %257, i32* %258, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_84))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %284, i32* %285, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_92))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %310, i32* %311, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_100))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %336, i32* %337, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_108))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_116))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %389, i32* %390, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_124))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %417, i32* %418, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_132))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %445, i32* %446, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_140))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %473, i32* %474, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_148))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %500, i32* %501, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_156))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %526, i32* %527, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_164))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %552, i32* %553, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_172))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %578, i32* %579, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_180))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %605, i32* %606, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_188))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %633, i32* %634, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_196))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %661, i32* %662, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_204))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %689, i32* %690, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_212))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %717, i32* %718, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_220))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %745, i32* %746, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_228))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %773, i32* %774, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_236))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %801, i32* %802, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_244))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %827, i32* %828, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_252))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %855, i32* %856, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
memory_controller_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_address_a = put_obmc_0_1;
end
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_address_a = arg_src;
end
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_address_a = put_obmc_0_2;
end
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_address_a = put_obmc_0_4_reg;
end
/* put_obmc: %0*/
/*   store i32 %16, i32* %dst, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
memory_controller_address_a = arg_dst;
end
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_address_a = put_obmc_0_17_reg;
end
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_8))
begin
memory_controller_address_a = put_obmc_0_20_reg;
end
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_address_a = put_obmc_0_30_reg;
end
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_12))
begin
memory_controller_address_a = put_obmc_0_33_reg;
end
/* put_obmc: %0*/
/*   store i32 %41, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
memory_controller_address_a = put_obmc_0_42_reg;
end
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_address_a = put_obmc_0_43_reg;
end
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_address_a = put_obmc_0_57_reg;
end
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_20))
begin
memory_controller_address_a = put_obmc_0_60_reg;
end
/* put_obmc: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
memory_controller_address_a = put_obmc_0_69_reg;
end
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_address_a = put_obmc_0_71_reg;
end
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_address_a = put_obmc_0_84_reg;
end
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_28))
begin
memory_controller_address_a = put_obmc_0_90_reg;
end
/* put_obmc: %0*/
/*   store i32 %95, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
memory_controller_address_a = put_obmc_0_96_reg;
end
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_address_a = put_obmc_0_97_reg;
end
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_address_a = put_obmc_0_111_reg;
end
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_36))
begin
memory_controller_address_a = put_obmc_0_117_reg;
end
/* put_obmc: %0*/
/*   store i32 %122, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
memory_controller_address_a = put_obmc_0_123_reg;
end
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_address_a = put_obmc_0_125_reg;
end
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_address_a = put_obmc_0_138_reg;
end
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_44))
begin
memory_controller_address_a = put_obmc_0_144_reg;
end
/* put_obmc: %0*/
/*   store i32 %149, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
memory_controller_address_a = put_obmc_0_150_reg;
end
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_address_a = put_obmc_0_151_reg;
end
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_address_a = put_obmc_0_162_reg;
end
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_52))
begin
memory_controller_address_a = put_obmc_0_164_reg;
end
/* put_obmc: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
memory_controller_address_a = put_obmc_0_174_reg;
end
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_address_a = put_obmc_0_176_reg;
end
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_address_a = put_obmc_0_190_reg;
end
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_60))
begin
memory_controller_address_a = put_obmc_0_195_reg;
end
/* put_obmc: %0*/
/*   store i32 %201, i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
memory_controller_address_a = put_obmc_0_202_reg;
end
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_address_a = put_obmc_0_204_reg;
end
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_address_a = put_obmc_0_218_reg;
end
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_68))
begin
memory_controller_address_a = put_obmc_0_220_reg;
end
/* put_obmc: %0*/
/*   store i32 %229, i32* %230, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
memory_controller_address_a = put_obmc_0_230_reg;
end
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_address_a = put_obmc_0_232_reg;
end
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_address_a = put_obmc_0_246_reg;
end
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_76))
begin
memory_controller_address_a = put_obmc_0_248_reg;
end
/* put_obmc: %0*/
/*   store i32 %257, i32* %258, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
memory_controller_address_a = put_obmc_0_258_reg;
end
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_address_a = put_obmc_0_260_reg;
end
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_address_a = put_obmc_0_274_reg;
end
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_84))
begin
memory_controller_address_a = put_obmc_0_276_reg;
end
/* put_obmc: %0*/
/*   store i32 %284, i32* %285, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
memory_controller_address_a = put_obmc_0_285_reg;
end
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_address_a = put_obmc_0_287_reg;
end
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_address_a = put_obmc_0_300_reg;
end
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_92))
begin
memory_controller_address_a = put_obmc_0_302_reg;
end
/* put_obmc: %0*/
/*   store i32 %310, i32* %311, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
memory_controller_address_a = put_obmc_0_311_reg;
end
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_address_a = put_obmc_0_313_reg;
end
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_address_a = put_obmc_0_326_reg;
end
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_100))
begin
memory_controller_address_a = put_obmc_0_331_reg;
end
/* put_obmc: %0*/
/*   store i32 %336, i32* %337, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
memory_controller_address_a = put_obmc_0_337_reg;
end
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_address_a = put_obmc_0_339_reg;
end
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_address_a = put_obmc_0_352_reg;
end
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_108))
begin
memory_controller_address_a = put_obmc_0_357_reg;
end
/* put_obmc: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
memory_controller_address_a = put_obmc_0_363_reg;
end
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_address_a = put_obmc_0_365_reg;
end
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_address_a = put_obmc_0_378_reg;
end
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_116))
begin
memory_controller_address_a = put_obmc_0_383_reg;
end
/* put_obmc: %0*/
/*   store i32 %389, i32* %390, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
memory_controller_address_a = put_obmc_0_390_reg;
end
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_address_a = put_obmc_0_392_reg;
end
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_address_a = put_obmc_0_406_reg;
end
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_124))
begin
memory_controller_address_a = put_obmc_0_411_reg;
end
/* put_obmc: %0*/
/*   store i32 %417, i32* %418, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
memory_controller_address_a = put_obmc_0_418_reg;
end
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_address_a = put_obmc_0_420_reg;
end
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_address_a = put_obmc_0_434_reg;
end
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_132))
begin
memory_controller_address_a = put_obmc_0_440_reg;
end
/* put_obmc: %0*/
/*   store i32 %445, i32* %446, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
memory_controller_address_a = put_obmc_0_446_reg;
end
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_address_a = put_obmc_0_448_reg;
end
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_address_a = put_obmc_0_462_reg;
end
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_140))
begin
memory_controller_address_a = put_obmc_0_468_reg;
end
/* put_obmc: %0*/
/*   store i32 %473, i32* %474, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
memory_controller_address_a = put_obmc_0_474_reg;
end
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_address_a = put_obmc_0_476_reg;
end
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_address_a = put_obmc_0_490_reg;
end
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_148))
begin
memory_controller_address_a = put_obmc_0_495_reg;
end
/* put_obmc: %0*/
/*   store i32 %500, i32* %501, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
memory_controller_address_a = put_obmc_0_501_reg;
end
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_address_a = put_obmc_0_503_reg;
end
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_address_a = put_obmc_0_516_reg;
end
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_156))
begin
memory_controller_address_a = put_obmc_0_521_reg;
end
/* put_obmc: %0*/
/*   store i32 %526, i32* %527, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
memory_controller_address_a = put_obmc_0_527_reg;
end
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_address_a = put_obmc_0_529_reg;
end
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_address_a = put_obmc_0_542_reg;
end
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_164))
begin
memory_controller_address_a = put_obmc_0_547_reg;
end
/* put_obmc: %0*/
/*   store i32 %552, i32* %553, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
memory_controller_address_a = put_obmc_0_553_reg;
end
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_address_a = put_obmc_0_555_reg;
end
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_address_a = put_obmc_0_568_reg;
end
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_172))
begin
memory_controller_address_a = put_obmc_0_573_reg;
end
/* put_obmc: %0*/
/*   store i32 %578, i32* %579, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
memory_controller_address_a = put_obmc_0_579_reg;
end
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_address_a = put_obmc_0_581_reg;
end
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_address_a = put_obmc_0_594_reg;
end
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_180))
begin
memory_controller_address_a = put_obmc_0_600_reg;
end
/* put_obmc: %0*/
/*   store i32 %605, i32* %606, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
memory_controller_address_a = put_obmc_0_606_reg;
end
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_address_a = put_obmc_0_608_reg;
end
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_address_a = put_obmc_0_622_reg;
end
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_188))
begin
memory_controller_address_a = put_obmc_0_628_reg;
end
/* put_obmc: %0*/
/*   store i32 %633, i32* %634, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
memory_controller_address_a = put_obmc_0_634_reg;
end
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_address_a = put_obmc_0_636_reg;
end
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_address_a = put_obmc_0_650_reg;
end
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_196))
begin
memory_controller_address_a = put_obmc_0_656_reg;
end
/* put_obmc: %0*/
/*   store i32 %661, i32* %662, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
memory_controller_address_a = put_obmc_0_662_reg;
end
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_address_a = put_obmc_0_664_reg;
end
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_address_a = put_obmc_0_678_reg;
end
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_204))
begin
memory_controller_address_a = put_obmc_0_683_reg;
end
/* put_obmc: %0*/
/*   store i32 %689, i32* %690, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
memory_controller_address_a = put_obmc_0_690_reg;
end
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_address_a = put_obmc_0_692_reg;
end
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_address_a = put_obmc_0_706_reg;
end
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_212))
begin
memory_controller_address_a = put_obmc_0_711_reg;
end
/* put_obmc: %0*/
/*   store i32 %717, i32* %718, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
memory_controller_address_a = put_obmc_0_718_reg;
end
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_address_a = put_obmc_0_720_reg;
end
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_address_a = put_obmc_0_734_reg;
end
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_220))
begin
memory_controller_address_a = put_obmc_0_739_reg;
end
/* put_obmc: %0*/
/*   store i32 %745, i32* %746, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
memory_controller_address_a = put_obmc_0_746_reg;
end
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_address_a = put_obmc_0_748_reg;
end
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_address_a = put_obmc_0_762_reg;
end
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_228))
begin
memory_controller_address_a = put_obmc_0_767_reg;
end
/* put_obmc: %0*/
/*   store i32 %773, i32* %774, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
memory_controller_address_a = put_obmc_0_774_reg;
end
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_address_a = put_obmc_0_776_reg;
end
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_address_a = put_obmc_0_790_reg;
end
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_236))
begin
memory_controller_address_a = put_obmc_0_796_reg;
end
/* put_obmc: %0*/
/*   store i32 %801, i32* %802, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
memory_controller_address_a = put_obmc_0_802_reg;
end
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_address_a = put_obmc_0_804_reg;
end
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_address_a = put_obmc_0_818_reg;
end
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_244))
begin
memory_controller_address_a = put_obmc_0_823_reg;
end
/* put_obmc: %0*/
/*   store i32 %827, i32* %828, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
memory_controller_address_a = put_obmc_0_828_reg;
end
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_address_a = put_obmc_0_830_reg;
end
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_address_a = put_obmc_0_844_reg;
end
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_252))
begin
memory_controller_address_a = put_obmc_0_849_reg;
end
/* put_obmc: %0*/
/*   store i32 %855, i32* %856, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
memory_controller_address_a = put_obmc_0_856_reg;
end
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_address_a = put_obmc_0_858_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %16, i32* %dst, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %41, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %95, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %122, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %149, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %201, i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_68))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %229, i32* %230, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_76))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %257, i32* %258, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_84))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %284, i32* %285, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_92))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %310, i32* %311, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_100))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %336, i32* %337, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_108))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_116))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %389, i32* %390, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_124))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %417, i32* %418, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_132))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %445, i32* %446, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_140))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %473, i32* %474, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_148))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %500, i32* %501, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_156))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %526, i32* %527, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_164))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %552, i32* %553, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_172))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %578, i32* %579, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_180))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %605, i32* %606, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_188))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %633, i32* %634, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_196))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %661, i32* %662, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_204))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %689, i32* %690, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_212))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %717, i32* %718, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_220))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %745, i32* %746, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_228))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %773, i32* %774, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_236))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %801, i32* %802, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_244))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %827, i32* %828, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_252))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %855, i32* %856, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %16, i32* %dst, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
memory_controller_in_a = put_obmc_0_16;
end
/* put_obmc: %0*/
/*   store i32 %41, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
memory_controller_in_a = put_obmc_0_41;
end
/* put_obmc: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
memory_controller_in_a = put_obmc_0_68;
end
/* put_obmc: %0*/
/*   store i32 %95, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
memory_controller_in_a = put_obmc_0_95;
end
/* put_obmc: %0*/
/*   store i32 %122, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
memory_controller_in_a = put_obmc_0_122;
end
/* put_obmc: %0*/
/*   store i32 %149, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
memory_controller_in_a = put_obmc_0_149;
end
/* put_obmc: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
memory_controller_in_a = put_obmc_0_173;
end
/* put_obmc: %0*/
/*   store i32 %201, i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
memory_controller_in_a = put_obmc_0_201;
end
/* put_obmc: %0*/
/*   store i32 %229, i32* %230, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
memory_controller_in_a = put_obmc_0_229;
end
/* put_obmc: %0*/
/*   store i32 %257, i32* %258, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
memory_controller_in_a = put_obmc_0_257;
end
/* put_obmc: %0*/
/*   store i32 %284, i32* %285, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
memory_controller_in_a = put_obmc_0_284;
end
/* put_obmc: %0*/
/*   store i32 %310, i32* %311, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
memory_controller_in_a = put_obmc_0_310;
end
/* put_obmc: %0*/
/*   store i32 %336, i32* %337, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
memory_controller_in_a = put_obmc_0_336;
end
/* put_obmc: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
memory_controller_in_a = put_obmc_0_362;
end
/* put_obmc: %0*/
/*   store i32 %389, i32* %390, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
memory_controller_in_a = put_obmc_0_389;
end
/* put_obmc: %0*/
/*   store i32 %417, i32* %418, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
memory_controller_in_a = put_obmc_0_417;
end
/* put_obmc: %0*/
/*   store i32 %445, i32* %446, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
memory_controller_in_a = put_obmc_0_445;
end
/* put_obmc: %0*/
/*   store i32 %473, i32* %474, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
memory_controller_in_a = put_obmc_0_473;
end
/* put_obmc: %0*/
/*   store i32 %500, i32* %501, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
memory_controller_in_a = put_obmc_0_500;
end
/* put_obmc: %0*/
/*   store i32 %526, i32* %527, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
memory_controller_in_a = put_obmc_0_526;
end
/* put_obmc: %0*/
/*   store i32 %552, i32* %553, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
memory_controller_in_a = put_obmc_0_552;
end
/* put_obmc: %0*/
/*   store i32 %578, i32* %579, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
memory_controller_in_a = put_obmc_0_578;
end
/* put_obmc: %0*/
/*   store i32 %605, i32* %606, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
memory_controller_in_a = put_obmc_0_605;
end
/* put_obmc: %0*/
/*   store i32 %633, i32* %634, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
memory_controller_in_a = put_obmc_0_633;
end
/* put_obmc: %0*/
/*   store i32 %661, i32* %662, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
memory_controller_in_a = put_obmc_0_661;
end
/* put_obmc: %0*/
/*   store i32 %689, i32* %690, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
memory_controller_in_a = put_obmc_0_689;
end
/* put_obmc: %0*/
/*   store i32 %717, i32* %718, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
memory_controller_in_a = put_obmc_0_717;
end
/* put_obmc: %0*/
/*   store i32 %745, i32* %746, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
memory_controller_in_a = put_obmc_0_745;
end
/* put_obmc: %0*/
/*   store i32 %773, i32* %774, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
memory_controller_in_a = put_obmc_0_773;
end
/* put_obmc: %0*/
/*   store i32 %801, i32* %802, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
memory_controller_in_a = put_obmc_0_801;
end
/* put_obmc: %0*/
/*   store i32 %827, i32* %828, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
memory_controller_in_a = put_obmc_0_827;
end
/* put_obmc: %0*/
/*   store i32 %855, i32* %856, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
memory_controller_in_a = put_obmc_0_855;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* put_obmc: %0*/
/*   %2 = load i32** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %5 = load i32** %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %10 = load i32* %2, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %11 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %16, i32* %dst, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_8))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %31 = load i32* %30, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_12))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %41, i32* %42, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_14))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %44 = load i32* %43, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %58 = load i32* %57, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %61 = load i32* %60, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_20))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_22))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %72 = load i32* %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %91 = load i32* %90, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_28))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %95, i32* %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_30))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %98 = load i32* %97, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %112 = load i32* %111, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %118 = load i32* %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_36))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %122, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_38))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %139 = load i32* %138, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %145 = load i32* %144, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_44))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %149, i32* %150, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_46))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %152 = load i32* %151, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %163 = load i32* %162, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %165 = load i32* %164, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_52))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %173, i32* %174, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_54))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %177 = load i32* %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %196 = load i32* %195, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_60))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %201, i32* %202, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_62))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %205 = load i32* %204, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %219 = load i32* %218, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %221 = load i32* %220, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_68))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %229, i32* %230, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_70))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %233 = load i32* %232, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %247 = load i32* %246, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %249 = load i32* %248, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_76))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %257, i32* %258, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_78))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %261 = load i32* %260, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %275 = load i32* %274, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %277 = load i32* %276, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_84))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %284, i32* %285, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_86))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %288 = load i32* %287, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %301 = load i32* %300, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %303 = load i32* %302, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_92))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %310, i32* %311, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_94))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %314 = load i32* %313, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %327 = load i32* %326, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %332 = load i32* %331, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_100))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %336, i32* %337, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_102))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %340 = load i32* %339, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %353 = load i32* %352, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %358 = load i32* %357, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_108))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_110))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %366 = load i32* %365, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %379 = load i32* %378, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %384 = load i32* %383, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_116))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %389, i32* %390, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_118))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %393 = load i32* %392, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %407 = load i32* %406, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %412 = load i32* %411, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_124))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %417, i32* %418, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_126))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %421 = load i32* %420, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %435 = load i32* %434, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %441 = load i32* %440, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_132))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %445, i32* %446, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_134))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %449 = load i32* %448, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %463 = load i32* %462, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %469 = load i32* %468, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_140))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %473, i32* %474, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_142))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %477 = load i32* %476, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %491 = load i32* %490, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %496 = load i32* %495, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_148))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %500, i32* %501, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_150))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %504 = load i32* %503, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %517 = load i32* %516, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %522 = load i32* %521, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_156))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %526, i32* %527, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_158))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %530 = load i32* %529, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %543 = load i32* %542, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %548 = load i32* %547, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_164))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %552, i32* %553, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_166))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %556 = load i32* %555, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %569 = load i32* %568, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %574 = load i32* %573, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_172))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %578, i32* %579, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_174))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %582 = load i32* %581, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %595 = load i32* %594, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %601 = load i32* %600, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_180))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %605, i32* %606, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_182))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %609 = load i32* %608, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %623 = load i32* %622, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %629 = load i32* %628, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_188))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %633, i32* %634, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_190))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %637 = load i32* %636, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %651 = load i32* %650, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %657 = load i32* %656, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_196))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %661, i32* %662, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_198))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %665 = load i32* %664, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %679 = load i32* %678, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %684 = load i32* %683, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_204))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %689, i32* %690, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_206))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %693 = load i32* %692, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %707 = load i32* %706, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %712 = load i32* %711, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_212))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %717, i32* %718, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_214))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %721 = load i32* %720, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %735 = load i32* %734, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %740 = load i32* %739, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_220))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %745, i32* %746, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_222))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %749 = load i32* %748, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %763 = load i32* %762, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %768 = load i32* %767, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_228))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %773, i32* %774, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_230))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %777 = load i32* %776, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %791 = load i32* %790, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %797 = load i32* %796, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_236))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %801, i32* %802, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_238))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %805 = load i32* %804, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %819 = load i32* %818, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %824 = load i32* %823, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_244))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %827, i32* %828, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_246))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %831 = load i32* %830, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %845 = load i32* %844, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %850 = load i32* %849, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_252))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %855, i32* %856, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_254))
begin
memory_controller_size_a = 2'd2;
end
/* put_obmc: %0*/
/*   %859 = load i32* %858, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %28, i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_16))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_24))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_32))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %108, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_40))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %136, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_48))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %160, i32* %161, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_56))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %187, i32* %188, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_64))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_72))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %243, i32* %244, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_80))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %271, i32* %272, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_88))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %297, i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_96))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %323, i32* %324, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_104))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %349, i32* %350, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_112))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %375, i32* %376, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_120))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %403, i32* %404, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_128))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %431, i32* %432, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_136))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %459, i32* %460, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_144))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %487, i32* %488, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_152))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %513, i32* %514, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_160))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %539, i32* %540, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_168))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %565, i32* %566, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_176))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %591, i32* %592, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_184))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %619, i32* %620, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_192))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %647, i32* %648, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_200))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %675, i32* %676, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_208))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %703, i32* %704, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_216))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %731, i32* %732, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_224))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %759, i32* %760, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_232))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %787, i32* %788, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_240))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %815, i32* %816, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_248))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %841, i32* %842, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_256))
begin
memory_controller_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   store i32 %867, i32* %868, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_address_b = put_obmc_0_3;
end
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_address_b = put_obmc_0_6_reg;
end
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_address_b = put_obmc_0_8_reg;
end
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_address_b = put_obmc_0_5;
end
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_address_b = put_obmc_0_22_reg;
end
/* put_obmc: %0*/
/*   store i32 %28, i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
memory_controller_address_b = put_obmc_0_29_reg;
end
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_address_b = put_obmc_0_35_reg;
end
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_address_b = put_obmc_0_48_reg;
end
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_16))
begin
memory_controller_address_b = put_obmc_0_46_reg;
end
/* put_obmc: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
memory_controller_address_b = put_obmc_0_55_reg;
end
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_address_b = put_obmc_0_62_reg;
end
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_address_b = put_obmc_0_76_reg;
end
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_24))
begin
memory_controller_address_b = put_obmc_0_74_reg;
end
/* put_obmc: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
memory_controller_address_b = put_obmc_0_83_reg;
end
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_address_b = put_obmc_0_87_reg;
end
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_address_b = put_obmc_0_100_reg;
end
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_32))
begin
memory_controller_address_b = put_obmc_0_103_reg;
end
/* put_obmc: %0*/
/*   store i32 %108, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
memory_controller_address_b = put_obmc_0_109_reg;
end
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_address_b = put_obmc_0_114_reg;
end
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_address_b = put_obmc_0_128_reg;
end
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_40))
begin
memory_controller_address_b = put_obmc_0_131_reg;
end
/* put_obmc: %0*/
/*   store i32 %136, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
memory_controller_address_b = put_obmc_0_137_reg;
end
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_address_b = put_obmc_0_141_reg;
end
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_address_b = put_obmc_0_153_reg;
end
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_48))
begin
memory_controller_address_b = put_obmc_0_156_reg;
end
/* put_obmc: %0*/
/*   store i32 %160, i32* %161, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
memory_controller_address_b = put_obmc_0_161_reg;
end
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_address_b = put_obmc_0_167_reg;
end
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_address_b = put_obmc_0_181_reg;
end
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_56))
begin
memory_controller_address_b = put_obmc_0_178_reg;
end
/* put_obmc: %0*/
/*   store i32 %187, i32* %188, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
memory_controller_address_b = put_obmc_0_188_reg;
end
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_address_b = put_obmc_0_192_reg;
end
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_address_b = put_obmc_0_206_reg;
end
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_64))
begin
memory_controller_address_b = put_obmc_0_209_reg;
end
/* put_obmc: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
memory_controller_address_b = put_obmc_0_216_reg;
end
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_address_b = put_obmc_0_223_reg;
end
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_address_b = put_obmc_0_237_reg;
end
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_72))
begin
memory_controller_address_b = put_obmc_0_234_reg;
end
/* put_obmc: %0*/
/*   store i32 %243, i32* %244, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
memory_controller_address_b = put_obmc_0_244_reg;
end
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_address_b = put_obmc_0_251_reg;
end
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_address_b = put_obmc_0_265_reg;
end
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_80))
begin
memory_controller_address_b = put_obmc_0_262_reg;
end
/* put_obmc: %0*/
/*   store i32 %271, i32* %272, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
memory_controller_address_b = put_obmc_0_272_reg;
end
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_address_b = put_obmc_0_278_reg;
end
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_address_b = put_obmc_0_291_reg;
end
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_88))
begin
memory_controller_address_b = put_obmc_0_289_reg;
end
/* put_obmc: %0*/
/*   store i32 %297, i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
memory_controller_address_b = put_obmc_0_298_reg;
end
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_address_b = put_obmc_0_304_reg;
end
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_address_b = put_obmc_0_317_reg;
end
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_96))
begin
memory_controller_address_b = put_obmc_0_315_reg;
end
/* put_obmc: %0*/
/*   store i32 %323, i32* %324, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
memory_controller_address_b = put_obmc_0_324_reg;
end
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_address_b = put_obmc_0_328_reg;
end
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_address_b = put_obmc_0_341_reg;
end
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_104))
begin
memory_controller_address_b = put_obmc_0_344_reg;
end
/* put_obmc: %0*/
/*   store i32 %349, i32* %350, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
memory_controller_address_b = put_obmc_0_350_reg;
end
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_address_b = put_obmc_0_354_reg;
end
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_address_b = put_obmc_0_367_reg;
end
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_112))
begin
memory_controller_address_b = put_obmc_0_370_reg;
end
/* put_obmc: %0*/
/*   store i32 %375, i32* %376, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
memory_controller_address_b = put_obmc_0_376_reg;
end
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_address_b = put_obmc_0_380_reg;
end
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_address_b = put_obmc_0_394_reg;
end
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_120))
begin
memory_controller_address_b = put_obmc_0_397_reg;
end
/* put_obmc: %0*/
/*   store i32 %403, i32* %404, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
memory_controller_address_b = put_obmc_0_404_reg;
end
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_address_b = put_obmc_0_408_reg;
end
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_address_b = put_obmc_0_422_reg;
end
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_128))
begin
memory_controller_address_b = put_obmc_0_425_reg;
end
/* put_obmc: %0*/
/*   store i32 %431, i32* %432, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
memory_controller_address_b = put_obmc_0_432_reg;
end
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_address_b = put_obmc_0_437_reg;
end
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_address_b = put_obmc_0_451_reg;
end
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_136))
begin
memory_controller_address_b = put_obmc_0_454_reg;
end
/* put_obmc: %0*/
/*   store i32 %459, i32* %460, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
memory_controller_address_b = put_obmc_0_460_reg;
end
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_address_b = put_obmc_0_465_reg;
end
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_address_b = put_obmc_0_479_reg;
end
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_144))
begin
memory_controller_address_b = put_obmc_0_482_reg;
end
/* put_obmc: %0*/
/*   store i32 %487, i32* %488, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
memory_controller_address_b = put_obmc_0_488_reg;
end
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_address_b = put_obmc_0_492_reg;
end
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_address_b = put_obmc_0_505_reg;
end
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_152))
begin
memory_controller_address_b = put_obmc_0_508_reg;
end
/* put_obmc: %0*/
/*   store i32 %513, i32* %514, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
memory_controller_address_b = put_obmc_0_514_reg;
end
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_address_b = put_obmc_0_518_reg;
end
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_address_b = put_obmc_0_531_reg;
end
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_160))
begin
memory_controller_address_b = put_obmc_0_534_reg;
end
/* put_obmc: %0*/
/*   store i32 %539, i32* %540, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
memory_controller_address_b = put_obmc_0_540_reg;
end
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_address_b = put_obmc_0_545_reg;
end
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_address_b = put_obmc_0_558_reg;
end
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_168))
begin
memory_controller_address_b = put_obmc_0_560_reg;
end
/* put_obmc: %0*/
/*   store i32 %565, i32* %566, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
memory_controller_address_b = put_obmc_0_566_reg;
end
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_address_b = put_obmc_0_571_reg;
end
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_address_b = put_obmc_0_584_reg;
end
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_176))
begin
memory_controller_address_b = put_obmc_0_586_reg;
end
/* put_obmc: %0*/
/*   store i32 %591, i32* %592, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
memory_controller_address_b = put_obmc_0_592_reg;
end
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_address_b = put_obmc_0_597_reg;
end
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_address_b = put_obmc_0_611_reg;
end
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_184))
begin
memory_controller_address_b = put_obmc_0_614_reg;
end
/* put_obmc: %0*/
/*   store i32 %619, i32* %620, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
memory_controller_address_b = put_obmc_0_620_reg;
end
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_address_b = put_obmc_0_625_reg;
end
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_address_b = put_obmc_0_639_reg;
end
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_192))
begin
memory_controller_address_b = put_obmc_0_642_reg;
end
/* put_obmc: %0*/
/*   store i32 %647, i32* %648, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
memory_controller_address_b = put_obmc_0_648_reg;
end
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_address_b = put_obmc_0_653_reg;
end
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_address_b = put_obmc_0_667_reg;
end
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_200))
begin
memory_controller_address_b = put_obmc_0_670_reg;
end
/* put_obmc: %0*/
/*   store i32 %675, i32* %676, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
memory_controller_address_b = put_obmc_0_676_reg;
end
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_address_b = put_obmc_0_680_reg;
end
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_address_b = put_obmc_0_694_reg;
end
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_208))
begin
memory_controller_address_b = put_obmc_0_697_reg;
end
/* put_obmc: %0*/
/*   store i32 %703, i32* %704, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
memory_controller_address_b = put_obmc_0_704_reg;
end
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_address_b = put_obmc_0_708_reg;
end
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_address_b = put_obmc_0_722_reg;
end
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_216))
begin
memory_controller_address_b = put_obmc_0_725_reg;
end
/* put_obmc: %0*/
/*   store i32 %731, i32* %732, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
memory_controller_address_b = put_obmc_0_732_reg;
end
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_address_b = put_obmc_0_737_reg;
end
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_address_b = put_obmc_0_751_reg;
end
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_224))
begin
memory_controller_address_b = put_obmc_0_753_reg;
end
/* put_obmc: %0*/
/*   store i32 %759, i32* %760, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
memory_controller_address_b = put_obmc_0_760_reg;
end
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_address_b = put_obmc_0_765_reg;
end
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_address_b = put_obmc_0_779_reg;
end
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_232))
begin
memory_controller_address_b = put_obmc_0_781_reg;
end
/* put_obmc: %0*/
/*   store i32 %787, i32* %788, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
memory_controller_address_b = put_obmc_0_788_reg;
end
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_address_b = put_obmc_0_793_reg;
end
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_address_b = put_obmc_0_807_reg;
end
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_240))
begin
memory_controller_address_b = put_obmc_0_810_reg;
end
/* put_obmc: %0*/
/*   store i32 %815, i32* %816, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
memory_controller_address_b = put_obmc_0_816_reg;
end
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_address_b = put_obmc_0_820_reg;
end
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_address_b = put_obmc_0_832_reg;
end
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_248))
begin
memory_controller_address_b = put_obmc_0_835_reg;
end
/* put_obmc: %0*/
/*   store i32 %841, i32* %842, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
memory_controller_address_b = put_obmc_0_842_reg;
end
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_address_b = put_obmc_0_847_reg;
end
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_address_b = put_obmc_0_861_reg;
end
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_256))
begin
memory_controller_address_b = put_obmc_0_863_reg;
end
/* put_obmc: %0*/
/*   store i32 %867, i32* %868, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
memory_controller_address_b = put_obmc_0_868_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %28, i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %108, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %136, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %160, i32* %161, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %187, i32* %188, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %243, i32* %244, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_80))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %271, i32* %272, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_88))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %297, i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_96))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %323, i32* %324, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_104))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %349, i32* %350, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_112))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %375, i32* %376, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_120))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %403, i32* %404, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_128))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %431, i32* %432, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_136))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %459, i32* %460, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_144))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %487, i32* %488, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_152))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %513, i32* %514, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_160))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %539, i32* %540, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_168))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %565, i32* %566, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_176))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %591, i32* %592, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_184))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %619, i32* %620, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_192))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %647, i32* %648, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_200))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %675, i32* %676, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_208))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %703, i32* %704, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_216))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %731, i32* %732, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_224))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %759, i32* %760, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_232))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %787, i32* %788, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_240))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %815, i32* %816, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_248))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %841, i32* %842, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
memory_controller_write_enable_b = 1'd1;
end
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_256))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %867, i32* %868, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* put_obmc: %0*/
/*   store i32 %28, i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
memory_controller_in_b = put_obmc_0_28;
end
/* put_obmc: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
memory_controller_in_b = put_obmc_0_54;
end
/* put_obmc: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
memory_controller_in_b = put_obmc_0_82;
end
/* put_obmc: %0*/
/*   store i32 %108, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
memory_controller_in_b = put_obmc_0_108;
end
/* put_obmc: %0*/
/*   store i32 %136, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
memory_controller_in_b = put_obmc_0_136;
end
/* put_obmc: %0*/
/*   store i32 %160, i32* %161, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
memory_controller_in_b = put_obmc_0_160;
end
/* put_obmc: %0*/
/*   store i32 %187, i32* %188, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
memory_controller_in_b = put_obmc_0_187;
end
/* put_obmc: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
memory_controller_in_b = put_obmc_0_215;
end
/* put_obmc: %0*/
/*   store i32 %243, i32* %244, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
memory_controller_in_b = put_obmc_0_243;
end
/* put_obmc: %0*/
/*   store i32 %271, i32* %272, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
memory_controller_in_b = put_obmc_0_271;
end
/* put_obmc: %0*/
/*   store i32 %297, i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
memory_controller_in_b = put_obmc_0_297;
end
/* put_obmc: %0*/
/*   store i32 %323, i32* %324, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
memory_controller_in_b = put_obmc_0_323;
end
/* put_obmc: %0*/
/*   store i32 %349, i32* %350, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
memory_controller_in_b = put_obmc_0_349;
end
/* put_obmc: %0*/
/*   store i32 %375, i32* %376, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
memory_controller_in_b = put_obmc_0_375;
end
/* put_obmc: %0*/
/*   store i32 %403, i32* %404, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
memory_controller_in_b = put_obmc_0_403;
end
/* put_obmc: %0*/
/*   store i32 %431, i32* %432, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
memory_controller_in_b = put_obmc_0_431;
end
/* put_obmc: %0*/
/*   store i32 %459, i32* %460, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
memory_controller_in_b = put_obmc_0_459;
end
/* put_obmc: %0*/
/*   store i32 %487, i32* %488, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
memory_controller_in_b = put_obmc_0_487;
end
/* put_obmc: %0*/
/*   store i32 %513, i32* %514, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
memory_controller_in_b = put_obmc_0_513;
end
/* put_obmc: %0*/
/*   store i32 %539, i32* %540, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
memory_controller_in_b = put_obmc_0_539;
end
/* put_obmc: %0*/
/*   store i32 %565, i32* %566, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
memory_controller_in_b = put_obmc_0_565;
end
/* put_obmc: %0*/
/*   store i32 %591, i32* %592, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
memory_controller_in_b = put_obmc_0_591;
end
/* put_obmc: %0*/
/*   store i32 %619, i32* %620, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
memory_controller_in_b = put_obmc_0_619;
end
/* put_obmc: %0*/
/*   store i32 %647, i32* %648, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
memory_controller_in_b = put_obmc_0_647;
end
/* put_obmc: %0*/
/*   store i32 %675, i32* %676, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
memory_controller_in_b = put_obmc_0_675;
end
/* put_obmc: %0*/
/*   store i32 %703, i32* %704, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
memory_controller_in_b = put_obmc_0_703;
end
/* put_obmc: %0*/
/*   store i32 %731, i32* %732, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
memory_controller_in_b = put_obmc_0_731;
end
/* put_obmc: %0*/
/*   store i32 %759, i32* %760, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
memory_controller_in_b = put_obmc_0_759;
end
/* put_obmc: %0*/
/*   store i32 %787, i32* %788, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
memory_controller_in_b = put_obmc_0_787;
end
/* put_obmc: %0*/
/*   store i32 %815, i32* %816, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
memory_controller_in_b = put_obmc_0_815;
end
/* put_obmc: %0*/
/*   store i32 %841, i32* %842, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
memory_controller_in_b = put_obmc_0_841;
end
/* put_obmc: %0*/
/*   store i32 %867, i32* %868, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
memory_controller_in_b = put_obmc_0_867;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* put_obmc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %9 = load i32** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %12 = load i32* %5, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_7))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %28, i32* %29, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_10))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_11))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %49 = load i32* %48, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_15))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %47 = load i32* %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_16))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_19))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %77 = load i32* %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_23))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %75 = load i32* %74, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_24))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %82, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_26))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %88 = load i32* %87, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_27))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %101 = load i32* %100, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_31))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %104 = load i32* %103, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_32))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %108, i32* %109, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_34))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_35))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %129 = load i32* %128, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_39))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %132 = load i32* %131, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_40))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %136, i32* %137, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_42))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %142 = load i32* %141, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_43))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %154 = load i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_47))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %157 = load i32* %156, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_48))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %160, i32* %161, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_50))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %168 = load i32* %167, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_51))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %182 = load i32* %181, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_55))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %179 = load i32* %178, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_56))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %187, i32* %188, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_58))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %193 = load i32* %192, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_59))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %207 = load i32* %206, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_63))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %210 = load i32* %209, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_64))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_66))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %224 = load i32* %223, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_67))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %238 = load i32* %237, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_71))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %235 = load i32* %234, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_72))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %243, i32* %244, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_74))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %252 = load i32* %251, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_75))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %266 = load i32* %265, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_79))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %263 = load i32* %262, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_80))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %271, i32* %272, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_82))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %279 = load i32* %278, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_83))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %292 = load i32* %291, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_87))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %290 = load i32* %289, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_88))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %297, i32* %298, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_90))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %305 = load i32* %304, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_91))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %318 = load i32* %317, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_95))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %316 = load i32* %315, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_96))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %323, i32* %324, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_98))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %329 = load i32* %328, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_99))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %342 = load i32* %341, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_103))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %345 = load i32* %344, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_104))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %349, i32* %350, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_106))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %355 = load i32* %354, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_107))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %368 = load i32* %367, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_111))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %371 = load i32* %370, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_112))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %375, i32* %376, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_114))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %381 = load i32* %380, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_115))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %395 = load i32* %394, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_119))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %398 = load i32* %397, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_120))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %403, i32* %404, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_122))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %409 = load i32* %408, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_123))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %423 = load i32* %422, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_127))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %426 = load i32* %425, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_128))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %431, i32* %432, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_130))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %438 = load i32* %437, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_131))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %452 = load i32* %451, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_135))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %455 = load i32* %454, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_136))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %459, i32* %460, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_138))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %466 = load i32* %465, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_139))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %480 = load i32* %479, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_143))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %483 = load i32* %482, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_144))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %487, i32* %488, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_146))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %493 = load i32* %492, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_147))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %506 = load i32* %505, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_151))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %509 = load i32* %508, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_152))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %513, i32* %514, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_154))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %519 = load i32* %518, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_155))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %532 = load i32* %531, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_159))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %535 = load i32* %534, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_160))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %539, i32* %540, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_162))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %546 = load i32* %545, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_163))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %559 = load i32* %558, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_167))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %561 = load i32* %560, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_168))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %565, i32* %566, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_170))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %572 = load i32* %571, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_171))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %585 = load i32* %584, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_175))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %587 = load i32* %586, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_176))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %591, i32* %592, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_178))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %598 = load i32* %597, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_179))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %612 = load i32* %611, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_183))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %615 = load i32* %614, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_184))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %619, i32* %620, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_186))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %626 = load i32* %625, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_187))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %640 = load i32* %639, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_191))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %643 = load i32* %642, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_192))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %647, i32* %648, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_194))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %654 = load i32* %653, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_195))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %668 = load i32* %667, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_199))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %671 = load i32* %670, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_200))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %675, i32* %676, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_202))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %681 = load i32* %680, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_203))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %695 = load i32* %694, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_207))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %698 = load i32* %697, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_208))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %703, i32* %704, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_210))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %709 = load i32* %708, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_211))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %723 = load i32* %722, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_215))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %726 = load i32* %725, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_216))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %731, i32* %732, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_218))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %738 = load i32* %737, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_219))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %752 = load i32* %751, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_223))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %754 = load i32* %753, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_224))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %759, i32* %760, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_226))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %766 = load i32* %765, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_227))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %780 = load i32* %779, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_231))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %782 = load i32* %781, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_232))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %787, i32* %788, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_234))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %794 = load i32* %793, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_235))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %808 = load i32* %807, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_239))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %811 = load i32* %810, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_240))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %815, i32* %816, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_242))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %821 = load i32* %820, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_243))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %833 = load i32* %832, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_247))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %836 = load i32* %835, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_248))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %841, i32* %842, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_250))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %848 = load i32* %847, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_251))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %862 = load i32* %861, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_255))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   %864 = load i32* %863, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_256))
begin
memory_controller_size_b = 2'd2;
end
/* put_obmc: %0*/
/*   store i32 %867, i32* %868, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_obmc_BB_0_258))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  put_obmc_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_arg_dst;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_arg_src;
reg [31:0] put_obmc_arg_stride;
wire  put_obmc_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_memory_controller_address_a;
wire  put_obmc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_obmc_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_obmc_memory_controller_out_a;
wire [1:0] put_obmc_memory_controller_size_a;
wire  put_obmc_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_obmc_memory_controller_address_b;
wire  put_obmc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_obmc_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_obmc_memory_controller_out_b;
wire [1:0] put_obmc_memory_controller_size_b;
reg  put_obmc_memory_controller_waitrequest;
wire  put_obmc_finish;
reg  put_obmc_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


put_obmc put_obmc_inst (
	.memory_controller_enable_a (put_obmc_memory_controller_enable_a),
	.memory_controller_address_a (put_obmc_memory_controller_address_a),
	.memory_controller_write_enable_a (put_obmc_memory_controller_write_enable_a),
	.memory_controller_in_a (put_obmc_memory_controller_in_a),
	.memory_controller_size_a (put_obmc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (put_obmc_memory_controller_enable_b),
	.memory_controller_address_b (put_obmc_memory_controller_address_b),
	.memory_controller_write_enable_b (put_obmc_memory_controller_write_enable_b),
	.memory_controller_in_b (put_obmc_memory_controller_in_b),
	.memory_controller_size_b (put_obmc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (put_obmc_start),
	.finish (put_obmc_finish),
	.arg_dst (put_obmc_arg_dst),
	.arg_src (put_obmc_arg_src),
	.arg_stride (put_obmc_arg_stride)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (put_obmc_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (put_obmc_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_obmc_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_start"); $finish; end
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
put_obmc_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_obmc_arg_dst <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_arg_dst"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_obmc_arg_src <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_arg_src"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_obmc_arg_stride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_obmc_arg_stride"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
begin
put_obmc_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
begin
put_obmc_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
put_obmc_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
put_obmc_finish_final = put_obmc_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = put_obmc_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = put_obmc_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_obmc_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_obmc_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = put_obmc_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = put_obmc_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_obmc_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_obmc_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = put_obmc_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = put_obmc_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = put_obmc_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = put_obmc_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_obmc_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_obmc_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = put_obmc_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = put_obmc_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_obmc_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_obmc_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = put_obmc_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @put_obmc(i32* undef, i32** undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = put_obmc_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
