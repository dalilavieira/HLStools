//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:51 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module vc1_inv_trans_8x8_c
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_block
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2 = 5'd2;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3 = 5'd3;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4 = 5'd4;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5 = 5'd5;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6 = 5'd6;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7 = 5'd7;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8 = 5'd8;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9 = 5'd9;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10 = 5'd10;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11 = 5'd11;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12 = 5'd12;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13 = 5'd13;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14 = 5'd14;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15 = 5'd15;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16 = 5'd16;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17 = 5'd17;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18 = 5'd18;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19 = 5'd19;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20 = 5'd20;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21 = 5'd21;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22 = 5'd22;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23 = 5'd23;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24 = 5'd24;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25 = 5'd25;
parameter [4:0] LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26 = 5'd26;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_block;
reg [4:0] cur_state;
reg [31:0] vc1_inv_trans_8x8_c_1_i_016;
reg [31:0] vc1_inv_trans_8x8_c_1_i_016_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp40;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp40_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4171;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep42_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4372;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4372_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep44_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4573;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4573_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep46_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4774;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4774_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep48_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4975;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp4975_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep50_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp5176;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp5176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep52_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp5377;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp5377_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_dst_017;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_dst_017_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp56;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep57_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp58;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep59_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp60;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep61_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp62;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep63_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp64;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep65_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp66;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep67_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp68;
reg [31:0] vc1_inv_trans_8x8_c_1_tmp68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_scevgep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_src_015;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_1_src_015_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_2;
reg [31:0] vc1_inv_trans_8x8_c_1_2_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_3;
reg [31:0] vc1_inv_trans_8x8_c_1_3_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_4;
reg [31:0] vc1_inv_trans_8x8_c_1_4_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_5;
reg [31:0] vc1_inv_trans_8x8_c_1_5_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_6;
reg [31:0] vc1_inv_trans_8x8_c_1_6_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_7;
reg [31:0] vc1_inv_trans_8x8_c_1_7_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_8;
reg [31:0] vc1_inv_trans_8x8_c_1_8_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_9;
reg [31:0] vc1_inv_trans_8x8_c_1_9_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_10;
reg [31:0] vc1_inv_trans_8x8_c_1_10_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_11;
reg [31:0] vc1_inv_trans_8x8_c_1_11_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_12;
reg [31:0] vc1_inv_trans_8x8_c_1_12_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_13;
reg [31:0] vc1_inv_trans_8x8_c_1_13_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_14;
reg [31:0] vc1_inv_trans_8x8_c_1_14_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_15;
reg [31:0] vc1_inv_trans_8x8_c_1_15_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_16;
reg [31:0] vc1_inv_trans_8x8_c_1_16_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_17;
reg [31:0] vc1_inv_trans_8x8_c_1_17_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_18;
reg [31:0] vc1_inv_trans_8x8_c_1_18_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_19;
reg [31:0] vc1_inv_trans_8x8_c_1_19_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_20;
reg [31:0] vc1_inv_trans_8x8_c_1_20_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_21;
reg [31:0] vc1_inv_trans_8x8_c_1_21_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_22;
reg [31:0] vc1_inv_trans_8x8_c_1_22_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_23;
reg [31:0] vc1_inv_trans_8x8_c_1_23_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_24;
reg [31:0] vc1_inv_trans_8x8_c_1_24_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_25;
reg [31:0] vc1_inv_trans_8x8_c_1_25_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_26;
reg [31:0] vc1_inv_trans_8x8_c_1_26_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_27;
reg [31:0] vc1_inv_trans_8x8_c_1_27_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_28;
reg [31:0] vc1_inv_trans_8x8_c_1_28_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_29;
reg [31:0] vc1_inv_trans_8x8_c_1_29_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_30;
reg [31:0] vc1_inv_trans_8x8_c_1_30_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_31;
reg [31:0] vc1_inv_trans_8x8_c_1_31_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_32;
reg [31:0] vc1_inv_trans_8x8_c_1_32_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_33;
reg [31:0] vc1_inv_trans_8x8_c_1_33_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_34;
reg [31:0] vc1_inv_trans_8x8_c_1_34_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_35;
reg [31:0] vc1_inv_trans_8x8_c_1_35_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_36;
reg [31:0] vc1_inv_trans_8x8_c_1_36_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_37;
reg [31:0] vc1_inv_trans_8x8_c_1_37_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_38;
reg [31:0] vc1_inv_trans_8x8_c_1_38_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_39;
reg [31:0] vc1_inv_trans_8x8_c_1_39_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_40;
reg [31:0] vc1_inv_trans_8x8_c_1_40_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_41;
reg [31:0] vc1_inv_trans_8x8_c_1_41_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_42;
reg [31:0] vc1_inv_trans_8x8_c_1_42_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_43;
reg [31:0] vc1_inv_trans_8x8_c_1_43_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_44;
reg [31:0] vc1_inv_trans_8x8_c_1_44_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_45;
reg [31:0] vc1_inv_trans_8x8_c_1_45_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_46;
reg [31:0] vc1_inv_trans_8x8_c_1_46_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_47;
reg [31:0] vc1_inv_trans_8x8_c_1_47_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_48;
reg [31:0] vc1_inv_trans_8x8_c_1_48_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_49;
reg [31:0] vc1_inv_trans_8x8_c_1_49_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_50;
reg [31:0] vc1_inv_trans_8x8_c_1_50_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_51;
reg [31:0] vc1_inv_trans_8x8_c_1_51_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_52;
reg [31:0] vc1_inv_trans_8x8_c_1_52_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_53;
reg [31:0] vc1_inv_trans_8x8_c_1_53_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_54;
reg [31:0] vc1_inv_trans_8x8_c_1_54_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_55;
reg [31:0] vc1_inv_trans_8x8_c_1_55_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_56;
reg [31:0] vc1_inv_trans_8x8_c_1_56_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_57;
reg [31:0] vc1_inv_trans_8x8_c_1_57_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_58;
reg [31:0] vc1_inv_trans_8x8_c_1_58_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_59;
reg [31:0] vc1_inv_trans_8x8_c_1_59_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_60;
reg [31:0] vc1_inv_trans_8x8_c_1_60_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_61;
reg [31:0] vc1_inv_trans_8x8_c_1_61_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_62;
reg [31:0] vc1_inv_trans_8x8_c_1_62_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_63;
reg [31:0] vc1_inv_trans_8x8_c_1_63_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_64;
reg [31:0] vc1_inv_trans_8x8_c_1_64_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_65;
reg [31:0] vc1_inv_trans_8x8_c_1_65_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_66;
reg [31:0] vc1_inv_trans_8x8_c_1_66_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_67;
reg [31:0] vc1_inv_trans_8x8_c_1_67_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_68;
reg [31:0] vc1_inv_trans_8x8_c_1_68_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_69;
reg [31:0] vc1_inv_trans_8x8_c_1_69_reg;
reg [31:0] vc1_inv_trans_8x8_c_1_70;
reg [31:0] vc1_inv_trans_8x8_c_1_70_reg;
reg  vc1_inv_trans_8x8_c_1_exitcond39;
reg  vc1_inv_trans_8x8_c_1_exitcond39_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_i_113;
reg [31:0] vc1_inv_trans_8x8_c__preheader_i_113_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp18;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep19_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp20;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep21_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp22;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep23_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp24;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep25_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp26;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep27_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp28;
reg [31:0] vc1_inv_trans_8x8_c__preheader_tmp28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_dst_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_dst_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_scevgep37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_src_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c__preheader_src_112_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_71;
reg [31:0] vc1_inv_trans_8x8_c__preheader_71_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_72;
reg [31:0] vc1_inv_trans_8x8_c__preheader_72_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_73;
reg [31:0] vc1_inv_trans_8x8_c__preheader_73_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_74;
reg [31:0] vc1_inv_trans_8x8_c__preheader_74_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_75;
reg [31:0] vc1_inv_trans_8x8_c__preheader_75_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_76;
reg [31:0] vc1_inv_trans_8x8_c__preheader_76_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_77;
reg [31:0] vc1_inv_trans_8x8_c__preheader_77_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_78;
reg [31:0] vc1_inv_trans_8x8_c__preheader_78_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_79;
reg [31:0] vc1_inv_trans_8x8_c__preheader_79_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_80;
reg [31:0] vc1_inv_trans_8x8_c__preheader_80_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_81;
reg [31:0] vc1_inv_trans_8x8_c__preheader_81_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_82;
reg [31:0] vc1_inv_trans_8x8_c__preheader_82_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_83;
reg [31:0] vc1_inv_trans_8x8_c__preheader_83_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_84;
reg [31:0] vc1_inv_trans_8x8_c__preheader_84_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_85;
reg [31:0] vc1_inv_trans_8x8_c__preheader_85_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_86;
reg [31:0] vc1_inv_trans_8x8_c__preheader_86_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_87;
reg [31:0] vc1_inv_trans_8x8_c__preheader_87_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_88;
reg [31:0] vc1_inv_trans_8x8_c__preheader_88_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_89;
reg [31:0] vc1_inv_trans_8x8_c__preheader_89_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_90;
reg [31:0] vc1_inv_trans_8x8_c__preheader_90_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_91;
reg [31:0] vc1_inv_trans_8x8_c__preheader_91_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_92;
reg [31:0] vc1_inv_trans_8x8_c__preheader_92_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_93;
reg [31:0] vc1_inv_trans_8x8_c__preheader_93_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_94;
reg [31:0] vc1_inv_trans_8x8_c__preheader_94_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_95;
reg [31:0] vc1_inv_trans_8x8_c__preheader_95_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_96;
reg [31:0] vc1_inv_trans_8x8_c__preheader_96_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_97;
reg [31:0] vc1_inv_trans_8x8_c__preheader_97_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_98;
reg [31:0] vc1_inv_trans_8x8_c__preheader_98_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_99;
reg [31:0] vc1_inv_trans_8x8_c__preheader_99_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_100;
reg [31:0] vc1_inv_trans_8x8_c__preheader_100_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_101;
reg [31:0] vc1_inv_trans_8x8_c__preheader_101_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_102;
reg [31:0] vc1_inv_trans_8x8_c__preheader_102_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_103;
reg [31:0] vc1_inv_trans_8x8_c__preheader_103_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_104;
reg [31:0] vc1_inv_trans_8x8_c__preheader_104_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_105;
reg [31:0] vc1_inv_trans_8x8_c__preheader_105_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_106;
reg [31:0] vc1_inv_trans_8x8_c__preheader_106_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_107;
reg [31:0] vc1_inv_trans_8x8_c__preheader_107_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_108;
reg [31:0] vc1_inv_trans_8x8_c__preheader_108_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_109;
reg [31:0] vc1_inv_trans_8x8_c__preheader_109_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_110;
reg [31:0] vc1_inv_trans_8x8_c__preheader_110_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_111;
reg [31:0] vc1_inv_trans_8x8_c__preheader_111_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_112;
reg [31:0] vc1_inv_trans_8x8_c__preheader_112_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_113;
reg [31:0] vc1_inv_trans_8x8_c__preheader_113_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_114;
reg [31:0] vc1_inv_trans_8x8_c__preheader_114_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_115;
reg [31:0] vc1_inv_trans_8x8_c__preheader_115_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_116;
reg [31:0] vc1_inv_trans_8x8_c__preheader_116_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_117;
reg [31:0] vc1_inv_trans_8x8_c__preheader_117_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_118;
reg [31:0] vc1_inv_trans_8x8_c__preheader_118_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_119;
reg [31:0] vc1_inv_trans_8x8_c__preheader_119_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_120;
reg [31:0] vc1_inv_trans_8x8_c__preheader_120_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_121;
reg [31:0] vc1_inv_trans_8x8_c__preheader_121_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_122;
reg [31:0] vc1_inv_trans_8x8_c__preheader_122_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_123;
reg [31:0] vc1_inv_trans_8x8_c__preheader_123_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_124;
reg [31:0] vc1_inv_trans_8x8_c__preheader_124_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_125;
reg [31:0] vc1_inv_trans_8x8_c__preheader_125_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_126;
reg [31:0] vc1_inv_trans_8x8_c__preheader_126_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_127;
reg [31:0] vc1_inv_trans_8x8_c__preheader_127_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_128;
reg [31:0] vc1_inv_trans_8x8_c__preheader_128_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_129;
reg [31:0] vc1_inv_trans_8x8_c__preheader_129_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_130;
reg [31:0] vc1_inv_trans_8x8_c__preheader_130_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_131;
reg [31:0] vc1_inv_trans_8x8_c__preheader_131_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_132;
reg [31:0] vc1_inv_trans_8x8_c__preheader_132_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_133;
reg [31:0] vc1_inv_trans_8x8_c__preheader_133_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_134;
reg [31:0] vc1_inv_trans_8x8_c__preheader_134_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_135;
reg [31:0] vc1_inv_trans_8x8_c__preheader_135_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_136;
reg [31:0] vc1_inv_trans_8x8_c__preheader_136_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_137;
reg [31:0] vc1_inv_trans_8x8_c__preheader_137_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_138;
reg [31:0] vc1_inv_trans_8x8_c__preheader_138_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_139;
reg [31:0] vc1_inv_trans_8x8_c__preheader_139_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_140;
reg [31:0] vc1_inv_trans_8x8_c__preheader_140_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_141;
reg [31:0] vc1_inv_trans_8x8_c__preheader_141_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_142;
reg [31:0] vc1_inv_trans_8x8_c__preheader_142_reg;
reg [31:0] vc1_inv_trans_8x8_c__preheader_143;
reg [31:0] vc1_inv_trans_8x8_c__preheader_143_reg;
reg  vc1_inv_trans_8x8_c__preheader_exitcond;
reg  vc1_inv_trans_8x8_c__preheader_exitcond_reg;
reg [5:0] vc1_inv_trans_8x8_c_0_temp_address_a;
reg  vc1_inv_trans_8x8_c_0_temp_write_enable_a;
reg [31:0] vc1_inv_trans_8x8_c_0_temp_in_a;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_out_a;
reg [5:0] vc1_inv_trans_8x8_c_0_temp_address_b;
reg  vc1_inv_trans_8x8_c_0_temp_write_enable_b;
reg [31:0] vc1_inv_trans_8x8_c_0_temp_in_b;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_25_en;
reg [31:0] vc1_inv_trans_8x8_c_1_25_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_33_en;
reg [31:0] vc1_inv_trans_8x8_c_1_33_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_40_en;
reg [31:0] vc1_inv_trans_8x8_c_1_40_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_48_en;
reg [31:0] vc1_inv_trans_8x8_c_1_48_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_5_en;
reg [31:0] vc1_inv_trans_8x8_c_1_5_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_8_en;
reg [31:0] vc1_inv_trans_8x8_c_1_8_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_13_en;
reg [31:0] vc1_inv_trans_8x8_c_1_13_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_15_en;
reg [31:0] vc1_inv_trans_8x8_c_1_15_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_27_en;
reg [31:0] vc1_inv_trans_8x8_c_1_27_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_36_en;
reg [31:0] vc1_inv_trans_8x8_c_1_36_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_43_en;
reg [31:0] vc1_inv_trans_8x8_c_1_43_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c_1_49_en;
reg [31:0] vc1_inv_trans_8x8_c_1_49_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_94_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_94_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_102_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_102_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_109_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_109_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_117_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_117_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_74_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_74_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_77_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_77_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_82_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_82_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_84_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_84_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_96_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_96_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_105_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_105_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_112_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_112_stage0_reg;
reg  lpm_mult_vc1_inv_trans_8x8_c__preheader_118_en;
reg [31:0] vc1_inv_trans_8x8_c__preheader_118_stage0_reg;

// Local Rams

//   %temp = alloca [64 x i32], align 4
ram_dual_port vc1_inv_trans_8x8_c_0_temp (
	.clk( clk ),
	.address_a( vc1_inv_trans_8x8_c_0_temp_address_a ),
	.address_b( vc1_inv_trans_8x8_c_0_temp_address_b ),
	.wren_a( vc1_inv_trans_8x8_c_0_temp_write_enable_a ),
	.wren_b( vc1_inv_trans_8x8_c_0_temp_write_enable_b ),
	.data_a( vc1_inv_trans_8x8_c_0_temp_in_a ),
	.data_b( vc1_inv_trans_8x8_c_0_temp_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( vc1_inv_trans_8x8_c_0_temp_out_a ),
	.q_b( vc1_inv_trans_8x8_c_0_temp_out_b)
);
defparam vc1_inv_trans_8x8_c_0_temp.width_a = 32;
defparam vc1_inv_trans_8x8_c_0_temp.width_b = 32;
defparam vc1_inv_trans_8x8_c_0_temp.widthad_a = 6;
defparam vc1_inv_trans_8x8_c_0_temp.widthad_b = 6;
defparam vc1_inv_trans_8x8_c_0_temp.width_be_a = 1;
defparam vc1_inv_trans_8x8_c_0_temp.width_be_b = 1;
defparam vc1_inv_trans_8x8_c_0_temp.numwords_a = 64;
defparam vc1_inv_trans_8x8_c_0_temp.numwords_b = 64;
defparam vc1_inv_trans_8x8_c_0_temp.latency = 1;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_1_exitcond39_reg == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_1_exitcond39_reg == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26;
if (reset == 1'b0 && ^(LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %i.016 = phi i32 [ 0, %0 ], [ %70, %1 ]*/
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
vc1_inv_trans_8x8_c_1_i_016 = 32'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %i.016 = phi i32 [ 0, %0 ], [ %70, %1 ]*/
else /* if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_1_exitcond39_reg == 1'd0))) */
begin
vc1_inv_trans_8x8_c_1_i_016 = vc1_inv_trans_8x8_c_1_70_reg;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %i.016 = phi i32 [ 0, %0 ], [ %70, %1 ]*/
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
vc1_inv_trans_8x8_c_1_i_016_reg <= vc1_inv_trans_8x8_c_1_i_016;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_i_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_i_016_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %i.016 = phi i32 [ 0, %0 ], [ %70, %1 ]*/
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_13) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_1_exitcond39_reg == 1'd0)))
begin
vc1_inv_trans_8x8_c_1_i_016_reg <= vc1_inv_trans_8x8_c_1_i_016;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_i_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_i_016_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp40 = shl i32 %i.016, 3*/
begin
vc1_inv_trans_8x8_c_1_tmp40 = (vc1_inv_trans_8x8_c_1_i_016_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp40 = shl i32 %i.016, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp40_reg <= vc1_inv_trans_8x8_c_1_tmp40;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp40_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4171 = or i32 %tmp40, 1*/
begin
vc1_inv_trans_8x8_c_1_tmp4171 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4171 = or i32 %tmp40, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp4171_reg <= vc1_inv_trans_8x8_c_1_tmp4171;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp4171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp4171_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep42 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4171*/
begin
vc1_inv_trans_8x8_c_1_scevgep42 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp4171));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep42 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4171*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep42_reg <= vc1_inv_trans_8x8_c_1_scevgep42;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep42_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4372 = or i32 %tmp40, 2*/
begin
vc1_inv_trans_8x8_c_1_tmp4372 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd2);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4372 = or i32 %tmp40, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp4372_reg <= vc1_inv_trans_8x8_c_1_tmp4372;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp4372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp4372_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep44 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4372*/
begin
vc1_inv_trans_8x8_c_1_scevgep44 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp4372));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep44 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4372*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep44_reg <= vc1_inv_trans_8x8_c_1_scevgep44;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep44_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4573 = or i32 %tmp40, 3*/
begin
vc1_inv_trans_8x8_c_1_tmp4573 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4573 = or i32 %tmp40, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp4573_reg <= vc1_inv_trans_8x8_c_1_tmp4573;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp4573) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp4573_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep46 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4573*/
begin
vc1_inv_trans_8x8_c_1_scevgep46 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp4573));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep46 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4573*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep46_reg <= vc1_inv_trans_8x8_c_1_scevgep46;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4774 = or i32 %tmp40, 4*/
begin
vc1_inv_trans_8x8_c_1_tmp4774 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd4);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4774 = or i32 %tmp40, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp4774_reg <= vc1_inv_trans_8x8_c_1_tmp4774;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp4774) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp4774_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep48 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4774*/
begin
vc1_inv_trans_8x8_c_1_scevgep48 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp4774));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep48 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4774*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep48_reg <= vc1_inv_trans_8x8_c_1_scevgep48;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep48_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4975 = or i32 %tmp40, 5*/
begin
vc1_inv_trans_8x8_c_1_tmp4975 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd5);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp4975 = or i32 %tmp40, 5*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp4975_reg <= vc1_inv_trans_8x8_c_1_tmp4975;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp4975) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp4975_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep50 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4975*/
begin
vc1_inv_trans_8x8_c_1_scevgep50 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp4975));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep50 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp4975*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep50_reg <= vc1_inv_trans_8x8_c_1_scevgep50;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp5176 = or i32 %tmp40, 6*/
begin
vc1_inv_trans_8x8_c_1_tmp5176 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd6);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp5176 = or i32 %tmp40, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp5176_reg <= vc1_inv_trans_8x8_c_1_tmp5176;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp5176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp5176_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep52 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp5176*/
begin
vc1_inv_trans_8x8_c_1_scevgep52 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp5176));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep52 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp5176*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep52_reg <= vc1_inv_trans_8x8_c_1_scevgep52;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp5377 = or i32 %tmp40, 7*/
begin
vc1_inv_trans_8x8_c_1_tmp5377 = (vc1_inv_trans_8x8_c_1_tmp40 | 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp5377 = or i32 %tmp40, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp5377_reg <= vc1_inv_trans_8x8_c_1_tmp5377;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp5377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp5377_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep54 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp5377*/
begin
vc1_inv_trans_8x8_c_1_scevgep54 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp5377));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep54 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp5377*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_scevgep54_reg <= vc1_inv_trans_8x8_c_1_scevgep54;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep54_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %dst.017 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp40*/
begin
vc1_inv_trans_8x8_c_1_dst_017 = (1'd0 + (4 * vc1_inv_trans_8x8_c_1_tmp40));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %dst.017 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp40*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_dst_017_reg <= vc1_inv_trans_8x8_c_1_dst_017;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_dst_017) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_dst_017_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp56 = add i32 %i.016, 32*/
begin
vc1_inv_trans_8x8_c_1_tmp56 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd32);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp56 = add i32 %i.016, 32*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp56_reg <= vc1_inv_trans_8x8_c_1_tmp56;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp56_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep57 = getelementptr i32* %block, i32 %tmp56*/
begin
vc1_inv_trans_8x8_c_1_scevgep57 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp56_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep57 = getelementptr i32* %block, i32 %tmp56*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep57_reg <= vc1_inv_trans_8x8_c_1_scevgep57;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep57_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp58 = add i32 %i.016, 16*/
begin
vc1_inv_trans_8x8_c_1_tmp58 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd16);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp58 = add i32 %i.016, 16*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp58_reg <= vc1_inv_trans_8x8_c_1_tmp58;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp58_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep59 = getelementptr i32* %block, i32 %tmp58*/
begin
vc1_inv_trans_8x8_c_1_scevgep59 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp58_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep59 = getelementptr i32* %block, i32 %tmp58*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep59_reg <= vc1_inv_trans_8x8_c_1_scevgep59;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep59_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp60 = add i32 %i.016, 48*/
begin
vc1_inv_trans_8x8_c_1_tmp60 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd48);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp60 = add i32 %i.016, 48*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp60_reg <= vc1_inv_trans_8x8_c_1_tmp60;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep61 = getelementptr i32* %block, i32 %tmp60*/
begin
vc1_inv_trans_8x8_c_1_scevgep61 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp60_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep61 = getelementptr i32* %block, i32 %tmp60*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep61_reg <= vc1_inv_trans_8x8_c_1_scevgep61;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp62 = add i32 %i.016, 8*/
begin
vc1_inv_trans_8x8_c_1_tmp62 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd8);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp62 = add i32 %i.016, 8*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp62_reg <= vc1_inv_trans_8x8_c_1_tmp62;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp62_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep63 = getelementptr i32* %block, i32 %tmp62*/
begin
vc1_inv_trans_8x8_c_1_scevgep63 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp62_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep63 = getelementptr i32* %block, i32 %tmp62*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep63_reg <= vc1_inv_trans_8x8_c_1_scevgep63;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep63_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp64 = add i32 %i.016, 24*/
begin
vc1_inv_trans_8x8_c_1_tmp64 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd24);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp64 = add i32 %i.016, 24*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp64_reg <= vc1_inv_trans_8x8_c_1_tmp64;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp64_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep65 = getelementptr i32* %block, i32 %tmp64*/
begin
vc1_inv_trans_8x8_c_1_scevgep65 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp64_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep65 = getelementptr i32* %block, i32 %tmp64*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep65_reg <= vc1_inv_trans_8x8_c_1_scevgep65;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep65_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp66 = add i32 %i.016, 40*/
begin
vc1_inv_trans_8x8_c_1_tmp66 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd40);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp66 = add i32 %i.016, 40*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp66_reg <= vc1_inv_trans_8x8_c_1_tmp66;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp66_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep67 = getelementptr i32* %block, i32 %tmp66*/
begin
vc1_inv_trans_8x8_c_1_scevgep67 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp66_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep67 = getelementptr i32* %block, i32 %tmp66*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep67_reg <= vc1_inv_trans_8x8_c_1_scevgep67;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep67_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp68 = add i32 %i.016, 56*/
begin
vc1_inv_trans_8x8_c_1_tmp68 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd56);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %tmp68 = add i32 %i.016, 56*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_tmp68_reg <= vc1_inv_trans_8x8_c_1_tmp68;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_tmp68_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep69 = getelementptr i32* %block, i32 %tmp68*/
begin
vc1_inv_trans_8x8_c_1_scevgep69 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_tmp68_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %scevgep69 = getelementptr i32* %block, i32 %tmp68*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
vc1_inv_trans_8x8_c_1_scevgep69_reg <= vc1_inv_trans_8x8_c_1_scevgep69;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_scevgep69_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %src.015 = getelementptr i32* %block, i32 %i.016*/
begin
vc1_inv_trans_8x8_c_1_src_015 = (arg_block + (4 * vc1_inv_trans_8x8_c_1_i_016_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %src.015 = getelementptr i32* %block, i32 %i.016*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_src_015_reg <= vc1_inv_trans_8x8_c_1_src_015;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_src_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_src_015_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_2_reg <= vc1_inv_trans_8x8_c_1_2;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_2_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_3 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_3_reg <= vc1_inv_trans_8x8_c_1_3;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_3_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %4 = add nsw i32 %3, %2*/
begin
vc1_inv_trans_8x8_c_1_4 = (vc1_inv_trans_8x8_c_1_3 + vc1_inv_trans_8x8_c_1_2);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %4 = add nsw i32 %3, %2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_4_reg <= vc1_inv_trans_8x8_c_1_4;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_4_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_5 = vc1_inv_trans_8x8_c_1_5_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %5 = mul nsw i32 %4, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_5_reg <= vc1_inv_trans_8x8_c_1_5;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_5_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %5 = mul nsw i32 %4, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_5_reg <= vc1_inv_trans_8x8_c_1_5;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_5_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %6 = add nsw i32 %5, 4*/
begin
vc1_inv_trans_8x8_c_1_6 = (vc1_inv_trans_8x8_c_1_5 + 32'd4);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %6 = add nsw i32 %5, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_6_reg <= vc1_inv_trans_8x8_c_1_6;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_6_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %7 = sub nsw i32 %2, %3*/
begin
vc1_inv_trans_8x8_c_1_7 = (vc1_inv_trans_8x8_c_1_2 - vc1_inv_trans_8x8_c_1_3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %7 = sub nsw i32 %2, %3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_7_reg <= vc1_inv_trans_8x8_c_1_7;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_7_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_8 = vc1_inv_trans_8x8_c_1_8_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %8 = mul nsw i32 %7, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_8_reg <= vc1_inv_trans_8x8_c_1_8;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_8_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %8 = mul nsw i32 %7, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_8_reg <= vc1_inv_trans_8x8_c_1_8;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_8_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %9 = add nsw i32 %8, 4*/
begin
vc1_inv_trans_8x8_c_1_9 = (vc1_inv_trans_8x8_c_1_8 + 32'd4);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %9 = add nsw i32 %8, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_9_reg <= vc1_inv_trans_8x8_c_1_9;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_9_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_10_reg <= vc1_inv_trans_8x8_c_1_10;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_10_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %11 = shl nsw i32 %10, 4*/
begin
vc1_inv_trans_8x8_c_1_11 = (vc1_inv_trans_8x8_c_1_10 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %11 = shl nsw i32 %10, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_11_reg <= vc1_inv_trans_8x8_c_1_11;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_11_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_12_reg <= vc1_inv_trans_8x8_c_1_12;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_12_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_13 = vc1_inv_trans_8x8_c_1_13_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %13 = mul nsw i32 %12, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_13_reg <= vc1_inv_trans_8x8_c_1_13;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_13_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %13 = mul nsw i32 %12, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_13_reg <= vc1_inv_trans_8x8_c_1_13;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_13_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %14 = add nsw i32 %13, %11*/
begin
vc1_inv_trans_8x8_c_1_14 = (vc1_inv_trans_8x8_c_1_13 + vc1_inv_trans_8x8_c_1_11_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %14 = add nsw i32 %13, %11*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_14_reg <= vc1_inv_trans_8x8_c_1_14;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_14_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_15 = vc1_inv_trans_8x8_c_1_15_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %15 = mul nsw i32 %10, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_15_reg <= vc1_inv_trans_8x8_c_1_15;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_15_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %15 = mul nsw i32 %10, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_15_reg <= vc1_inv_trans_8x8_c_1_15;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_15_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %16 = shl nsw i32 %12, 4*/
begin
vc1_inv_trans_8x8_c_1_16 = (vc1_inv_trans_8x8_c_1_12 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %16 = shl nsw i32 %12, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_7))
begin
vc1_inv_trans_8x8_c_1_16_reg <= vc1_inv_trans_8x8_c_1_16;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_16_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %17 = sub nsw i32 %15, %16*/
begin
vc1_inv_trans_8x8_c_1_17 = (vc1_inv_trans_8x8_c_1_15 - vc1_inv_trans_8x8_c_1_16_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %17 = sub nsw i32 %15, %16*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_17_reg <= vc1_inv_trans_8x8_c_1_17;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_17_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %18 = add nsw i32 %14, %6*/
begin
vc1_inv_trans_8x8_c_1_18 = (vc1_inv_trans_8x8_c_1_14 + vc1_inv_trans_8x8_c_1_6_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %18 = add nsw i32 %14, %6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_18_reg <= vc1_inv_trans_8x8_c_1_18;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_18_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %19 = add nsw i32 %17, %9*/
begin
vc1_inv_trans_8x8_c_1_19 = (vc1_inv_trans_8x8_c_1_17 + vc1_inv_trans_8x8_c_1_9_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %19 = add nsw i32 %17, %9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_19_reg <= vc1_inv_trans_8x8_c_1_19;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_19_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %20 = sub nsw i32 %9, %17*/
begin
vc1_inv_trans_8x8_c_1_20 = (vc1_inv_trans_8x8_c_1_9_reg - vc1_inv_trans_8x8_c_1_17);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %20 = sub nsw i32 %9, %17*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_20_reg <= vc1_inv_trans_8x8_c_1_20;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_20_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %21 = sub nsw i32 %6, %14*/
begin
vc1_inv_trans_8x8_c_1_21 = (vc1_inv_trans_8x8_c_1_6_reg - vc1_inv_trans_8x8_c_1_14);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %21 = sub nsw i32 %6, %14*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_21_reg <= vc1_inv_trans_8x8_c_1_21;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_21_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_22 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_22_reg <= vc1_inv_trans_8x8_c_1_22;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_22_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %23 = shl i32 %22, 4*/
begin
vc1_inv_trans_8x8_c_1_23 = (vc1_inv_trans_8x8_c_1_22 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %23 = shl i32 %22, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_23_reg <= vc1_inv_trans_8x8_c_1_23;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_23_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_24 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_24_reg <= vc1_inv_trans_8x8_c_1_24;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_24_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_25 = vc1_inv_trans_8x8_c_1_25_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %25 = mul nsw i32 %24, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_25_reg <= vc1_inv_trans_8x8_c_1_25;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_25_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %25 = mul nsw i32 %24, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_25_reg <= vc1_inv_trans_8x8_c_1_25;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_25_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_26_reg <= vc1_inv_trans_8x8_c_1_26;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_26_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_27 = vc1_inv_trans_8x8_c_1_27_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %27 = mul nsw i32 %26, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_27_reg <= vc1_inv_trans_8x8_c_1_27;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_27_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %27 = mul nsw i32 %26, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_27_reg <= vc1_inv_trans_8x8_c_1_27;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_27_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c_1_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_28_reg <= vc1_inv_trans_8x8_c_1_28;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_28_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %29 = shl nsw i32 %28, 2*/
begin
vc1_inv_trans_8x8_c_1_29 = (vc1_inv_trans_8x8_c_1_28 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %29 = shl nsw i32 %28, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_29_reg <= vc1_inv_trans_8x8_c_1_29;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_29_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %30 = add i32 %25, %23*/
begin
vc1_inv_trans_8x8_c_1_30 = (vc1_inv_trans_8x8_c_1_25 + vc1_inv_trans_8x8_c_1_23_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %30 = add i32 %25, %23*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_30_reg <= vc1_inv_trans_8x8_c_1_30;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_30_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %31 = add i32 %30, %27*/
begin
vc1_inv_trans_8x8_c_1_31 = (vc1_inv_trans_8x8_c_1_30_reg + vc1_inv_trans_8x8_c_1_27);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %31 = add i32 %30, %27*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_31_reg <= vc1_inv_trans_8x8_c_1_31;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_31_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %32 = add i32 %31, %29*/
begin
vc1_inv_trans_8x8_c_1_32 = (vc1_inv_trans_8x8_c_1_31 + vc1_inv_trans_8x8_c_1_29_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %32 = add i32 %31, %29*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_32_reg <= vc1_inv_trans_8x8_c_1_32;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_32_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_33 = vc1_inv_trans_8x8_c_1_33_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %33 = mul nsw i32 %22, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_33_reg <= vc1_inv_trans_8x8_c_1_33;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_33_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %33 = mul nsw i32 %22, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_33_reg <= vc1_inv_trans_8x8_c_1_33;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_33_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %34 = shl nsw i32 %24, 2*/
begin
vc1_inv_trans_8x8_c_1_34 = (vc1_inv_trans_8x8_c_1_24 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %34 = shl nsw i32 %24, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_34_reg <= vc1_inv_trans_8x8_c_1_34;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_34_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %35 = shl nsw i32 %26, 4*/
begin
vc1_inv_trans_8x8_c_1_35 = (vc1_inv_trans_8x8_c_1_26 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %35 = shl nsw i32 %26, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_35_reg <= vc1_inv_trans_8x8_c_1_35;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_35_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_36 = vc1_inv_trans_8x8_c_1_36_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %36 = mul i32 %28, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_36_reg <= vc1_inv_trans_8x8_c_1_36;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_36_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %36 = mul i32 %28, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_36_reg <= vc1_inv_trans_8x8_c_1_36;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_36_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %37 = sub i32 %33, %34*/
begin
vc1_inv_trans_8x8_c_1_37 = (vc1_inv_trans_8x8_c_1_33 - vc1_inv_trans_8x8_c_1_34_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %37 = sub i32 %33, %34*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_37_reg <= vc1_inv_trans_8x8_c_1_37;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_37_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %38 = sub i32 %37, %35*/
begin
vc1_inv_trans_8x8_c_1_38 = (vc1_inv_trans_8x8_c_1_37_reg - vc1_inv_trans_8x8_c_1_35);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %38 = sub i32 %37, %35*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_38_reg <= vc1_inv_trans_8x8_c_1_38;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_38_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %39 = add i32 %38, %36*/
begin
vc1_inv_trans_8x8_c_1_39 = (vc1_inv_trans_8x8_c_1_38_reg + vc1_inv_trans_8x8_c_1_36);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %39 = add i32 %38, %36*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_39_reg <= vc1_inv_trans_8x8_c_1_39;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_39_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_40 = vc1_inv_trans_8x8_c_1_40_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %40 = mul nsw i32 %22, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_40_reg <= vc1_inv_trans_8x8_c_1_40;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_40_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %40 = mul nsw i32 %22, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_40_reg <= vc1_inv_trans_8x8_c_1_40;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_40_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %41 = shl nsw i32 %24, 4*/
begin
vc1_inv_trans_8x8_c_1_41 = (vc1_inv_trans_8x8_c_1_24 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %41 = shl nsw i32 %24, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_41_reg <= vc1_inv_trans_8x8_c_1_41;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_41_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %42 = shl i32 %26, 2*/
begin
vc1_inv_trans_8x8_c_1_42 = (vc1_inv_trans_8x8_c_1_26 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %42 = shl i32 %26, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_42_reg <= vc1_inv_trans_8x8_c_1_42;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_42_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_43 = vc1_inv_trans_8x8_c_1_43_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %43 = mul nsw i32 %28, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_43_reg <= vc1_inv_trans_8x8_c_1_43;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_43_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %43 = mul nsw i32 %28, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_43_reg <= vc1_inv_trans_8x8_c_1_43;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_43_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %44 = sub i32 %40, %41*/
begin
vc1_inv_trans_8x8_c_1_44 = (vc1_inv_trans_8x8_c_1_40 - vc1_inv_trans_8x8_c_1_41_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %44 = sub i32 %40, %41*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_44_reg <= vc1_inv_trans_8x8_c_1_44;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_44_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %45 = add i32 %44, %42*/
begin
vc1_inv_trans_8x8_c_1_45 = (vc1_inv_trans_8x8_c_1_44_reg + vc1_inv_trans_8x8_c_1_42);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %45 = add i32 %44, %42*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_45_reg <= vc1_inv_trans_8x8_c_1_45;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_45_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %46 = add i32 %45, %43*/
begin
vc1_inv_trans_8x8_c_1_46 = (vc1_inv_trans_8x8_c_1_45_reg + vc1_inv_trans_8x8_c_1_43);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %46 = add i32 %45, %43*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_46_reg <= vc1_inv_trans_8x8_c_1_46;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_46_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %47 = shl i32 %22, 2*/
begin
vc1_inv_trans_8x8_c_1_47 = (vc1_inv_trans_8x8_c_1_22 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %47 = shl i32 %22, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
vc1_inv_trans_8x8_c_1_47_reg <= vc1_inv_trans_8x8_c_1_47;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_47_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_48 = vc1_inv_trans_8x8_c_1_48_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %48 = mul i32 %24, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_48_reg <= vc1_inv_trans_8x8_c_1_48;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_48_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %48 = mul i32 %24, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_48_reg <= vc1_inv_trans_8x8_c_1_48;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_48_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_1_49 = vc1_inv_trans_8x8_c_1_49_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %49 = mul nsw i32 %26, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_49_reg <= vc1_inv_trans_8x8_c_1_49;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_49_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %49 = mul nsw i32 %26, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_49_reg <= vc1_inv_trans_8x8_c_1_49;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_49_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %50 = shl nsw i32 %28, 4*/
begin
vc1_inv_trans_8x8_c_1_50 = (vc1_inv_trans_8x8_c_1_28 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %50 = shl nsw i32 %28, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_8))
begin
vc1_inv_trans_8x8_c_1_50_reg <= vc1_inv_trans_8x8_c_1_50;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_50_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %51 = add i32 %48, %47*/
begin
vc1_inv_trans_8x8_c_1_51 = (vc1_inv_trans_8x8_c_1_48 + vc1_inv_trans_8x8_c_1_47_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %51 = add i32 %48, %47*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
vc1_inv_trans_8x8_c_1_51_reg <= vc1_inv_trans_8x8_c_1_51;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_51_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %52 = add i32 %51, %49*/
begin
vc1_inv_trans_8x8_c_1_52 = (vc1_inv_trans_8x8_c_1_51_reg + vc1_inv_trans_8x8_c_1_49);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %52 = add i32 %51, %49*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_52_reg <= vc1_inv_trans_8x8_c_1_52;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_52_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %53 = sub i32 %52, %50*/
begin
vc1_inv_trans_8x8_c_1_53 = (vc1_inv_trans_8x8_c_1_52 - vc1_inv_trans_8x8_c_1_50_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %53 = sub i32 %52, %50*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_53_reg <= vc1_inv_trans_8x8_c_1_53;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_53_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %54 = add nsw i32 %32, %18*/
begin
vc1_inv_trans_8x8_c_1_54 = (vc1_inv_trans_8x8_c_1_32 + vc1_inv_trans_8x8_c_1_18_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %54 = add nsw i32 %32, %18*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_54_reg <= vc1_inv_trans_8x8_c_1_54;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_54_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %55 = ashr i32 %54, 3*/
begin
vc1_inv_trans_8x8_c_1_55 = ($signed(vc1_inv_trans_8x8_c_1_54) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %55 = ashr i32 %54, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_55_reg <= vc1_inv_trans_8x8_c_1_55;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_55_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %56 = add nsw i32 %39, %19*/
begin
vc1_inv_trans_8x8_c_1_56 = (vc1_inv_trans_8x8_c_1_39 + vc1_inv_trans_8x8_c_1_19_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %56 = add nsw i32 %39, %19*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_56_reg <= vc1_inv_trans_8x8_c_1_56;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_56_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %57 = ashr i32 %56, 3*/
begin
vc1_inv_trans_8x8_c_1_57 = ($signed(vc1_inv_trans_8x8_c_1_56) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %57 = ashr i32 %56, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_57_reg <= vc1_inv_trans_8x8_c_1_57;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_57_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %58 = add nsw i32 %46, %20*/
begin
vc1_inv_trans_8x8_c_1_58 = (vc1_inv_trans_8x8_c_1_46 + vc1_inv_trans_8x8_c_1_20_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %58 = add nsw i32 %46, %20*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_58_reg <= vc1_inv_trans_8x8_c_1_58;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_58_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %59 = ashr i32 %58, 3*/
begin
vc1_inv_trans_8x8_c_1_59 = ($signed(vc1_inv_trans_8x8_c_1_58) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %59 = ashr i32 %58, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_59_reg <= vc1_inv_trans_8x8_c_1_59;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_59_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %60 = add nsw i32 %53, %21*/
begin
vc1_inv_trans_8x8_c_1_60 = (vc1_inv_trans_8x8_c_1_53 + vc1_inv_trans_8x8_c_1_21_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %60 = add nsw i32 %53, %21*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_60_reg <= vc1_inv_trans_8x8_c_1_60;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_60_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %61 = ashr i32 %60, 3*/
begin
vc1_inv_trans_8x8_c_1_61 = ($signed(vc1_inv_trans_8x8_c_1_60) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %61 = ashr i32 %60, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_61_reg <= vc1_inv_trans_8x8_c_1_61;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_61_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %62 = sub nsw i32 %21, %53*/
begin
vc1_inv_trans_8x8_c_1_62 = (vc1_inv_trans_8x8_c_1_21_reg - vc1_inv_trans_8x8_c_1_53);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %62 = sub nsw i32 %21, %53*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_62_reg <= vc1_inv_trans_8x8_c_1_62;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_62_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %63 = ashr i32 %62, 3*/
begin
vc1_inv_trans_8x8_c_1_63 = ($signed(vc1_inv_trans_8x8_c_1_62) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %63 = ashr i32 %62, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_63_reg <= vc1_inv_trans_8x8_c_1_63;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_63_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %64 = sub nsw i32 %20, %46*/
begin
vc1_inv_trans_8x8_c_1_64 = (vc1_inv_trans_8x8_c_1_20_reg - vc1_inv_trans_8x8_c_1_46);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %64 = sub nsw i32 %20, %46*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_64_reg <= vc1_inv_trans_8x8_c_1_64;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_64_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %65 = ashr i32 %64, 3*/
begin
vc1_inv_trans_8x8_c_1_65 = ($signed(vc1_inv_trans_8x8_c_1_64) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %65 = ashr i32 %64, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_65_reg <= vc1_inv_trans_8x8_c_1_65;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_65_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %66 = sub nsw i32 %19, %39*/
begin
vc1_inv_trans_8x8_c_1_66 = (vc1_inv_trans_8x8_c_1_19_reg - vc1_inv_trans_8x8_c_1_39);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %66 = sub nsw i32 %19, %39*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_66_reg <= vc1_inv_trans_8x8_c_1_66;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_66_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %67 = ashr i32 %66, 3*/
begin
vc1_inv_trans_8x8_c_1_67 = ($signed(vc1_inv_trans_8x8_c_1_66) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %67 = ashr i32 %66, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_67_reg <= vc1_inv_trans_8x8_c_1_67;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_67_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %68 = sub nsw i32 %18, %32*/
begin
vc1_inv_trans_8x8_c_1_68 = (vc1_inv_trans_8x8_c_1_18_reg - vc1_inv_trans_8x8_c_1_32);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %68 = sub nsw i32 %18, %32*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_68_reg <= vc1_inv_trans_8x8_c_1_68;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_68_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %69 = ashr i32 %68, 3*/
begin
vc1_inv_trans_8x8_c_1_69 = ($signed(vc1_inv_trans_8x8_c_1_68) >>> 32'd3);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %69 = ashr i32 %68, 3*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_1_69_reg <= vc1_inv_trans_8x8_c_1_69;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_69_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %70 = add nsw i32 %i.016, 1*/
begin
vc1_inv_trans_8x8_c_1_70 = (vc1_inv_trans_8x8_c_1_i_016_reg + 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %70 = add nsw i32 %i.016, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_70_reg <= vc1_inv_trans_8x8_c_1_70;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_70_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %exitcond39 = icmp eq i32 %70, 8*/
begin
vc1_inv_trans_8x8_c_1_exitcond39 = (vc1_inv_trans_8x8_c_1_70 == 32'd8);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %exitcond39 = icmp eq i32 %70, 8*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_2))
begin
vc1_inv_trans_8x8_c_1_exitcond39_reg <= vc1_inv_trans_8x8_c_1_exitcond39;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c_1_exitcond39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_1_exitcond39_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %i.113 = phi i32 [ %143, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) & (memory_controller_waitrequest == 1'd0)))
begin
vc1_inv_trans_8x8_c__preheader_i_113 = 32'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %i.113 = phi i32 [ %143, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c__preheader_exitcond_reg == 1'd0))) */
begin
vc1_inv_trans_8x8_c__preheader_i_113 = vc1_inv_trans_8x8_c__preheader_143_reg;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %i.113 = phi i32 [ %143, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_preheader_14) & (memory_controller_waitrequest == 1'd0)))
begin
vc1_inv_trans_8x8_c__preheader_i_113_reg <= vc1_inv_trans_8x8_c__preheader_i_113;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_i_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_i_113_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %i.113 = phi i32 [ %143, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c__preheader_exitcond_reg == 1'd0)))
begin
vc1_inv_trans_8x8_c__preheader_i_113_reg <= vc1_inv_trans_8x8_c__preheader_i_113;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_i_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_i_113_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp = add i32 %i.113, 8*/
begin
vc1_inv_trans_8x8_c__preheader_tmp = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd8);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp = add i32 %i.113, 8*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp_reg <= vc1_inv_trans_8x8_c__preheader_tmp;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep = getelementptr i32* %block, i32 %tmp*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep = getelementptr i32* %block, i32 %tmp*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep_reg <= vc1_inv_trans_8x8_c__preheader_scevgep;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp18 = add i32 %i.113, 16*/
begin
vc1_inv_trans_8x8_c__preheader_tmp18 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd16);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp18 = add i32 %i.113, 16*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp18_reg <= vc1_inv_trans_8x8_c__preheader_tmp18;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp18_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep19 = getelementptr i32* %block, i32 %tmp18*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep19 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp18_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep19 = getelementptr i32* %block, i32 %tmp18*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep19_reg <= vc1_inv_trans_8x8_c__preheader_scevgep19;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep19_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp20 = add i32 %i.113, 24*/
begin
vc1_inv_trans_8x8_c__preheader_tmp20 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd24);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp20 = add i32 %i.113, 24*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp20_reg <= vc1_inv_trans_8x8_c__preheader_tmp20;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp20_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep21 = getelementptr i32* %block, i32 %tmp20*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep21 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp20_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep21 = getelementptr i32* %block, i32 %tmp20*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep21_reg <= vc1_inv_trans_8x8_c__preheader_scevgep21;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep21_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp22 = add i32 %i.113, 32*/
begin
vc1_inv_trans_8x8_c__preheader_tmp22 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd32);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp22 = add i32 %i.113, 32*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp22_reg <= vc1_inv_trans_8x8_c__preheader_tmp22;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp22_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep23 = getelementptr i32* %block, i32 %tmp22*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep23 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp22_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep23 = getelementptr i32* %block, i32 %tmp22*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep23_reg <= vc1_inv_trans_8x8_c__preheader_scevgep23;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep23_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp24 = add i32 %i.113, 40*/
begin
vc1_inv_trans_8x8_c__preheader_tmp24 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd40);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp24 = add i32 %i.113, 40*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp24_reg <= vc1_inv_trans_8x8_c__preheader_tmp24;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp24_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep25 = getelementptr i32* %block, i32 %tmp24*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep25 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp24_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep25 = getelementptr i32* %block, i32 %tmp24*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep25_reg <= vc1_inv_trans_8x8_c__preheader_scevgep25;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep25_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp26 = add i32 %i.113, 48*/
begin
vc1_inv_trans_8x8_c__preheader_tmp26 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd48);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp26 = add i32 %i.113, 48*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp26_reg <= vc1_inv_trans_8x8_c__preheader_tmp26;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp26_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep27 = getelementptr i32* %block, i32 %tmp26*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep27 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp26_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep27 = getelementptr i32* %block, i32 %tmp26*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep27_reg <= vc1_inv_trans_8x8_c__preheader_scevgep27;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep27_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp28 = add i32 %i.113, 56*/
begin
vc1_inv_trans_8x8_c__preheader_tmp28 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd56);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %tmp28 = add i32 %i.113, 56*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_tmp28_reg <= vc1_inv_trans_8x8_c__preheader_tmp28;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_tmp28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_tmp28_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep29 = getelementptr i32* %block, i32 %tmp28*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep29 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_tmp28_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep29 = getelementptr i32* %block, i32 %tmp28*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep29_reg <= vc1_inv_trans_8x8_c__preheader_scevgep29;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep29_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %dst.114 = getelementptr i32* %block, i32 %i.113*/
begin
vc1_inv_trans_8x8_c__preheader_dst_114 = (arg_block + (4 * vc1_inv_trans_8x8_c__preheader_i_113_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %dst.114 = getelementptr i32* %block, i32 %i.113*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_dst_114_reg <= vc1_inv_trans_8x8_c__preheader_dst_114;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_dst_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_dst_114_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep31 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp22*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep31 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp22_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep31 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp22*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep31_reg <= vc1_inv_trans_8x8_c__preheader_scevgep31;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep31_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep32 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp18*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep32 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp18_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep32 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp18*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep32_reg <= vc1_inv_trans_8x8_c__preheader_scevgep32;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep32_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep33 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp26*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep33 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp26_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep33 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp26*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep33_reg <= vc1_inv_trans_8x8_c__preheader_scevgep33;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep33_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep34 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep34 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep34 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep34_reg <= vc1_inv_trans_8x8_c__preheader_scevgep34;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep35 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp20*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep35 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp20_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep35 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp20*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep35_reg <= vc1_inv_trans_8x8_c__preheader_scevgep35;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep35_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep36 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp24*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep36 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp24_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep36 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp24*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep36_reg <= vc1_inv_trans_8x8_c__preheader_scevgep36;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep36_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep37 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp28*/
begin
vc1_inv_trans_8x8_c__preheader_scevgep37 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_tmp28_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %scevgep37 = getelementptr [64 x i32]* %temp, i32 0, i32 %tmp28*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c__preheader_scevgep37_reg <= vc1_inv_trans_8x8_c__preheader_scevgep37;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_scevgep37_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %src.112 = getelementptr [64 x i32]* %temp, i32 0, i32 %i.113*/
begin
vc1_inv_trans_8x8_c__preheader_src_112 = (1'd0 + (4 * vc1_inv_trans_8x8_c__preheader_i_113_reg));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %src.112 = getelementptr [64 x i32]* %temp, i32 0, i32 %i.113*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_src_112_reg <= vc1_inv_trans_8x8_c__preheader_src_112;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_src_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_src_112_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %71 = load i32* %src.112, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_71 = vc1_inv_trans_8x8_c_0_temp_out_a;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %71 = load i32* %src.112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_71_reg <= vc1_inv_trans_8x8_c__preheader_71;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_71_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %72 = load i32* %scevgep31, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_72 = vc1_inv_trans_8x8_c_0_temp_out_b;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %72 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_72_reg <= vc1_inv_trans_8x8_c__preheader_72;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_72_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %73 = add nsw i32 %72, %71*/
begin
vc1_inv_trans_8x8_c__preheader_73 = (vc1_inv_trans_8x8_c__preheader_72 + vc1_inv_trans_8x8_c__preheader_71);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %73 = add nsw i32 %72, %71*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_73_reg <= vc1_inv_trans_8x8_c__preheader_73;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_73_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_74 = vc1_inv_trans_8x8_c__preheader_74_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %74 = mul nsw i32 %73, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_74_reg <= vc1_inv_trans_8x8_c__preheader_74;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_74_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %74 = mul nsw i32 %73, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_74_reg <= vc1_inv_trans_8x8_c__preheader_74;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_74_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %75 = add nsw i32 %74, 64*/
begin
vc1_inv_trans_8x8_c__preheader_75 = (vc1_inv_trans_8x8_c__preheader_74 + 32'd64);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %75 = add nsw i32 %74, 64*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_75_reg <= vc1_inv_trans_8x8_c__preheader_75;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_75_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %76 = sub nsw i32 %71, %72*/
begin
vc1_inv_trans_8x8_c__preheader_76 = (vc1_inv_trans_8x8_c__preheader_71 - vc1_inv_trans_8x8_c__preheader_72);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %76 = sub nsw i32 %71, %72*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_76_reg <= vc1_inv_trans_8x8_c__preheader_76;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_76_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_77 = vc1_inv_trans_8x8_c__preheader_77_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %77 = mul nsw i32 %76, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_77_reg <= vc1_inv_trans_8x8_c__preheader_77;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_77_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %77 = mul nsw i32 %76, 12*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_77_reg <= vc1_inv_trans_8x8_c__preheader_77;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_77_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %78 = add nsw i32 %77, 64*/
begin
vc1_inv_trans_8x8_c__preheader_78 = (vc1_inv_trans_8x8_c__preheader_77 + 32'd64);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %78 = add nsw i32 %77, 64*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_78_reg <= vc1_inv_trans_8x8_c__preheader_78;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_78_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %79 = load i32* %scevgep32, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_79 = vc1_inv_trans_8x8_c_0_temp_out_a;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %79 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_79_reg <= vc1_inv_trans_8x8_c__preheader_79;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_79_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %80 = shl nsw i32 %79, 4*/
begin
vc1_inv_trans_8x8_c__preheader_80 = (vc1_inv_trans_8x8_c__preheader_79 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %80 = shl nsw i32 %79, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_80_reg <= vc1_inv_trans_8x8_c__preheader_80;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_80_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %81 = load i32* %scevgep33, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_81 = vc1_inv_trans_8x8_c_0_temp_out_b;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %81 = load i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_81_reg <= vc1_inv_trans_8x8_c__preheader_81;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_81_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_82 = vc1_inv_trans_8x8_c__preheader_82_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %82 = mul nsw i32 %81, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_82_reg <= vc1_inv_trans_8x8_c__preheader_82;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_82_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %82 = mul nsw i32 %81, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_82_reg <= vc1_inv_trans_8x8_c__preheader_82;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_82_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %83 = add nsw i32 %82, %80*/
begin
vc1_inv_trans_8x8_c__preheader_83 = (vc1_inv_trans_8x8_c__preheader_82 + vc1_inv_trans_8x8_c__preheader_80_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %83 = add nsw i32 %82, %80*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_83_reg <= vc1_inv_trans_8x8_c__preheader_83;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_83_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_84 = vc1_inv_trans_8x8_c__preheader_84_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %84 = mul nsw i32 %79, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_84_reg <= vc1_inv_trans_8x8_c__preheader_84;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_84_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %84 = mul nsw i32 %79, 6*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_84_reg <= vc1_inv_trans_8x8_c__preheader_84;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_84_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %85 = shl nsw i32 %81, 4*/
begin
vc1_inv_trans_8x8_c__preheader_85 = (vc1_inv_trans_8x8_c__preheader_81 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %85 = shl nsw i32 %81, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c__preheader_85_reg <= vc1_inv_trans_8x8_c__preheader_85;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_85_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %86 = sub nsw i32 %84, %85*/
begin
vc1_inv_trans_8x8_c__preheader_86 = (vc1_inv_trans_8x8_c__preheader_84 - vc1_inv_trans_8x8_c__preheader_85_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %86 = sub nsw i32 %84, %85*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_86_reg <= vc1_inv_trans_8x8_c__preheader_86;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_86_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %87 = add nsw i32 %83, %75*/
begin
vc1_inv_trans_8x8_c__preheader_87 = (vc1_inv_trans_8x8_c__preheader_83 + vc1_inv_trans_8x8_c__preheader_75_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %87 = add nsw i32 %83, %75*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_87_reg <= vc1_inv_trans_8x8_c__preheader_87;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_87_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %88 = add nsw i32 %86, %78*/
begin
vc1_inv_trans_8x8_c__preheader_88 = (vc1_inv_trans_8x8_c__preheader_86 + vc1_inv_trans_8x8_c__preheader_78_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %88 = add nsw i32 %86, %78*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_88_reg <= vc1_inv_trans_8x8_c__preheader_88;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_88_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %89 = sub nsw i32 %78, %86*/
begin
vc1_inv_trans_8x8_c__preheader_89 = (vc1_inv_trans_8x8_c__preheader_78_reg - vc1_inv_trans_8x8_c__preheader_86);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %89 = sub nsw i32 %78, %86*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_89_reg <= vc1_inv_trans_8x8_c__preheader_89;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_89_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %90 = sub nsw i32 %75, %83*/
begin
vc1_inv_trans_8x8_c__preheader_90 = (vc1_inv_trans_8x8_c__preheader_75_reg - vc1_inv_trans_8x8_c__preheader_83);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %90 = sub nsw i32 %75, %83*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_90_reg <= vc1_inv_trans_8x8_c__preheader_90;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_90_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %91 = load i32* %scevgep34, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_91 = vc1_inv_trans_8x8_c_0_temp_out_a;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %91 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_91_reg <= vc1_inv_trans_8x8_c__preheader_91;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_91_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %92 = shl i32 %91, 4*/
begin
vc1_inv_trans_8x8_c__preheader_92 = (vc1_inv_trans_8x8_c__preheader_91 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %92 = shl i32 %91, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_92_reg <= vc1_inv_trans_8x8_c__preheader_92;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_92_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %93 = load i32* %scevgep35, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_93 = vc1_inv_trans_8x8_c_0_temp_out_b;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %93 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_93_reg <= vc1_inv_trans_8x8_c__preheader_93;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_93_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_94 = vc1_inv_trans_8x8_c__preheader_94_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %94 = mul nsw i32 %93, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_94_reg <= vc1_inv_trans_8x8_c__preheader_94;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_94_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %94 = mul nsw i32 %93, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_94_reg <= vc1_inv_trans_8x8_c__preheader_94;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_94_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %95 = load i32* %scevgep36, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_95 = vc1_inv_trans_8x8_c_0_temp_out_a;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %95 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_95_reg <= vc1_inv_trans_8x8_c__preheader_95;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_95_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_96 = vc1_inv_trans_8x8_c__preheader_96_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %96 = mul nsw i32 %95, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_96_reg <= vc1_inv_trans_8x8_c__preheader_96;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_96_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %96 = mul nsw i32 %95, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_96_reg <= vc1_inv_trans_8x8_c__preheader_96;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_96_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %97 = load i32* %scevgep37, align 4, !tbaa !0*/
begin
vc1_inv_trans_8x8_c__preheader_97 = vc1_inv_trans_8x8_c_0_temp_out_b;
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %97 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_97_reg <= vc1_inv_trans_8x8_c__preheader_97;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_97_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %98 = shl nsw i32 %97, 2*/
begin
vc1_inv_trans_8x8_c__preheader_98 = (vc1_inv_trans_8x8_c__preheader_97 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %98 = shl nsw i32 %97, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_98_reg <= vc1_inv_trans_8x8_c__preheader_98;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_98_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %99 = add i32 %94, %92*/
begin
vc1_inv_trans_8x8_c__preheader_99 = (vc1_inv_trans_8x8_c__preheader_94 + vc1_inv_trans_8x8_c__preheader_92_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %99 = add i32 %94, %92*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_99_reg <= vc1_inv_trans_8x8_c__preheader_99;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_99_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %100 = add i32 %99, %96*/
begin
vc1_inv_trans_8x8_c__preheader_100 = (vc1_inv_trans_8x8_c__preheader_99_reg + vc1_inv_trans_8x8_c__preheader_96);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %100 = add i32 %99, %96*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_100_reg <= vc1_inv_trans_8x8_c__preheader_100;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_100_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %101 = add i32 %100, %98*/
begin
vc1_inv_trans_8x8_c__preheader_101 = (vc1_inv_trans_8x8_c__preheader_100 + vc1_inv_trans_8x8_c__preheader_98_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %101 = add i32 %100, %98*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_101_reg <= vc1_inv_trans_8x8_c__preheader_101;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_101_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_102 = vc1_inv_trans_8x8_c__preheader_102_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %102 = mul nsw i32 %91, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_102_reg <= vc1_inv_trans_8x8_c__preheader_102;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_102_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %102 = mul nsw i32 %91, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_102_reg <= vc1_inv_trans_8x8_c__preheader_102;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_102_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %103 = shl nsw i32 %93, 2*/
begin
vc1_inv_trans_8x8_c__preheader_103 = (vc1_inv_trans_8x8_c__preheader_93 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %103 = shl nsw i32 %93, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_103_reg <= vc1_inv_trans_8x8_c__preheader_103;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_103_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %104 = shl nsw i32 %95, 4*/
begin
vc1_inv_trans_8x8_c__preheader_104 = (vc1_inv_trans_8x8_c__preheader_95 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %104 = shl nsw i32 %95, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_104_reg <= vc1_inv_trans_8x8_c__preheader_104;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_104_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_105 = vc1_inv_trans_8x8_c__preheader_105_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %105 = mul i32 %97, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_105_reg <= vc1_inv_trans_8x8_c__preheader_105;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_105_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %105 = mul i32 %97, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_105_reg <= vc1_inv_trans_8x8_c__preheader_105;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_105_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %106 = sub i32 %102, %103*/
begin
vc1_inv_trans_8x8_c__preheader_106 = (vc1_inv_trans_8x8_c__preheader_102 - vc1_inv_trans_8x8_c__preheader_103_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %106 = sub i32 %102, %103*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_106_reg <= vc1_inv_trans_8x8_c__preheader_106;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_106_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %107 = sub i32 %106, %104*/
begin
vc1_inv_trans_8x8_c__preheader_107 = (vc1_inv_trans_8x8_c__preheader_106_reg - vc1_inv_trans_8x8_c__preheader_104);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %107 = sub i32 %106, %104*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_107_reg <= vc1_inv_trans_8x8_c__preheader_107;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_107_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %108 = add i32 %107, %105*/
begin
vc1_inv_trans_8x8_c__preheader_108 = (vc1_inv_trans_8x8_c__preheader_107_reg + vc1_inv_trans_8x8_c__preheader_105);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %108 = add i32 %107, %105*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_108_reg <= vc1_inv_trans_8x8_c__preheader_108;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_108_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_109 = vc1_inv_trans_8x8_c__preheader_109_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %109 = mul nsw i32 %91, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_109_reg <= vc1_inv_trans_8x8_c__preheader_109;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_109_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %109 = mul nsw i32 %91, 9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_109_reg <= vc1_inv_trans_8x8_c__preheader_109;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_109_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %110 = shl nsw i32 %93, 4*/
begin
vc1_inv_trans_8x8_c__preheader_110 = (vc1_inv_trans_8x8_c__preheader_93 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %110 = shl nsw i32 %93, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_110_reg <= vc1_inv_trans_8x8_c__preheader_110;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_110_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %111 = shl i32 %95, 2*/
begin
vc1_inv_trans_8x8_c__preheader_111 = (vc1_inv_trans_8x8_c__preheader_95 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %111 = shl i32 %95, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_111_reg <= vc1_inv_trans_8x8_c__preheader_111;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_111_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_112 = vc1_inv_trans_8x8_c__preheader_112_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %112 = mul nsw i32 %97, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_112_reg <= vc1_inv_trans_8x8_c__preheader_112;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_112_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %112 = mul nsw i32 %97, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_112_reg <= vc1_inv_trans_8x8_c__preheader_112;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_112_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %113 = sub i32 %109, %110*/
begin
vc1_inv_trans_8x8_c__preheader_113 = (vc1_inv_trans_8x8_c__preheader_109 - vc1_inv_trans_8x8_c__preheader_110_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %113 = sub i32 %109, %110*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_113_reg <= vc1_inv_trans_8x8_c__preheader_113;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_113_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %114 = add i32 %113, %111*/
begin
vc1_inv_trans_8x8_c__preheader_114 = (vc1_inv_trans_8x8_c__preheader_113_reg + vc1_inv_trans_8x8_c__preheader_111);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %114 = add i32 %113, %111*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_114_reg <= vc1_inv_trans_8x8_c__preheader_114;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_114_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %115 = add i32 %114, %112*/
begin
vc1_inv_trans_8x8_c__preheader_115 = (vc1_inv_trans_8x8_c__preheader_114_reg + vc1_inv_trans_8x8_c__preheader_112);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %115 = add i32 %114, %112*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_115_reg <= vc1_inv_trans_8x8_c__preheader_115;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_115_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %116 = shl i32 %91, 2*/
begin
vc1_inv_trans_8x8_c__preheader_116 = (vc1_inv_trans_8x8_c__preheader_91 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %116 = shl i32 %91, 2*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c__preheader_116_reg <= vc1_inv_trans_8x8_c__preheader_116;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_116_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_117 = vc1_inv_trans_8x8_c__preheader_117_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %117 = mul i32 %93, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_117_reg <= vc1_inv_trans_8x8_c__preheader_117;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_117_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %117 = mul i32 %93, -9*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_117_reg <= vc1_inv_trans_8x8_c__preheader_117;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_117_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c__preheader_118 = vc1_inv_trans_8x8_c__preheader_118_stage0_reg;
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %118 = mul nsw i32 %95, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_118_reg <= vc1_inv_trans_8x8_c__preheader_118;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_118_reg"); $finish; end
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %118 = mul nsw i32 %95, 15*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_118_reg <= vc1_inv_trans_8x8_c__preheader_118;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_118_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %119 = shl nsw i32 %97, 4*/
begin
vc1_inv_trans_8x8_c__preheader_119 = (vc1_inv_trans_8x8_c__preheader_97 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %119 = shl nsw i32 %97, 4*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_119_reg <= vc1_inv_trans_8x8_c__preheader_119;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_119_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %120 = add i32 %117, %116*/
begin
vc1_inv_trans_8x8_c__preheader_120 = (vc1_inv_trans_8x8_c__preheader_117 + vc1_inv_trans_8x8_c__preheader_116_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %120 = add i32 %117, %116*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c__preheader_120_reg <= vc1_inv_trans_8x8_c__preheader_120;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_120_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %121 = add i32 %120, %118*/
begin
vc1_inv_trans_8x8_c__preheader_121 = (vc1_inv_trans_8x8_c__preheader_120_reg + vc1_inv_trans_8x8_c__preheader_118);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %121 = add i32 %120, %118*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_121_reg <= vc1_inv_trans_8x8_c__preheader_121;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_121_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %122 = sub i32 %121, %119*/
begin
vc1_inv_trans_8x8_c__preheader_122 = (vc1_inv_trans_8x8_c__preheader_121 - vc1_inv_trans_8x8_c__preheader_119_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %122 = sub i32 %121, %119*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_122_reg <= vc1_inv_trans_8x8_c__preheader_122;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_122_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %123 = add nsw i32 %101, %87*/
begin
vc1_inv_trans_8x8_c__preheader_123 = (vc1_inv_trans_8x8_c__preheader_101 + vc1_inv_trans_8x8_c__preheader_87_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %123 = add nsw i32 %101, %87*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_123_reg <= vc1_inv_trans_8x8_c__preheader_123;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_123_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %124 = ashr i32 %123, 7*/
begin
vc1_inv_trans_8x8_c__preheader_124 = ($signed(vc1_inv_trans_8x8_c__preheader_123) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %124 = ashr i32 %123, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_124_reg <= vc1_inv_trans_8x8_c__preheader_124;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_124_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %125 = add nsw i32 %108, %88*/
begin
vc1_inv_trans_8x8_c__preheader_125 = (vc1_inv_trans_8x8_c__preheader_108 + vc1_inv_trans_8x8_c__preheader_88_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %125 = add nsw i32 %108, %88*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_125_reg <= vc1_inv_trans_8x8_c__preheader_125;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_125_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %126 = ashr i32 %125, 7*/
begin
vc1_inv_trans_8x8_c__preheader_126 = ($signed(vc1_inv_trans_8x8_c__preheader_125) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %126 = ashr i32 %125, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_126_reg <= vc1_inv_trans_8x8_c__preheader_126;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_126_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %127 = add nsw i32 %115, %89*/
begin
vc1_inv_trans_8x8_c__preheader_127 = (vc1_inv_trans_8x8_c__preheader_115 + vc1_inv_trans_8x8_c__preheader_89_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %127 = add nsw i32 %115, %89*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_127_reg <= vc1_inv_trans_8x8_c__preheader_127;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_127_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %128 = ashr i32 %127, 7*/
begin
vc1_inv_trans_8x8_c__preheader_128 = ($signed(vc1_inv_trans_8x8_c__preheader_127) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %128 = ashr i32 %127, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_128_reg <= vc1_inv_trans_8x8_c__preheader_128;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_128_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %129 = add nsw i32 %122, %90*/
begin
vc1_inv_trans_8x8_c__preheader_129 = (vc1_inv_trans_8x8_c__preheader_122 + vc1_inv_trans_8x8_c__preheader_90_reg);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %129 = add nsw i32 %122, %90*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_129_reg <= vc1_inv_trans_8x8_c__preheader_129;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_129_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %130 = ashr i32 %129, 7*/
begin
vc1_inv_trans_8x8_c__preheader_130 = ($signed(vc1_inv_trans_8x8_c__preheader_129) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %130 = ashr i32 %129, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_130_reg <= vc1_inv_trans_8x8_c__preheader_130;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_130_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %131 = or i32 %90, 1*/
begin
vc1_inv_trans_8x8_c__preheader_131 = (vc1_inv_trans_8x8_c__preheader_90 | 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %131 = or i32 %90, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_131_reg <= vc1_inv_trans_8x8_c__preheader_131;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_131_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %132 = sub i32 %131, %122*/
begin
vc1_inv_trans_8x8_c__preheader_132 = (vc1_inv_trans_8x8_c__preheader_131_reg - vc1_inv_trans_8x8_c__preheader_122);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %132 = sub i32 %131, %122*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_132_reg <= vc1_inv_trans_8x8_c__preheader_132;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_132_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %133 = ashr i32 %132, 7*/
begin
vc1_inv_trans_8x8_c__preheader_133 = ($signed(vc1_inv_trans_8x8_c__preheader_132) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %133 = ashr i32 %132, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_133_reg <= vc1_inv_trans_8x8_c__preheader_133;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_133_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %134 = or i32 %89, 1*/
begin
vc1_inv_trans_8x8_c__preheader_134 = (vc1_inv_trans_8x8_c__preheader_89 | 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %134 = or i32 %89, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_134_reg <= vc1_inv_trans_8x8_c__preheader_134;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_134_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %135 = sub i32 %134, %115*/
begin
vc1_inv_trans_8x8_c__preheader_135 = (vc1_inv_trans_8x8_c__preheader_134_reg - vc1_inv_trans_8x8_c__preheader_115);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %135 = sub i32 %134, %115*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_135_reg <= vc1_inv_trans_8x8_c__preheader_135;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_135_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %136 = ashr i32 %135, 7*/
begin
vc1_inv_trans_8x8_c__preheader_136 = ($signed(vc1_inv_trans_8x8_c__preheader_135) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %136 = ashr i32 %135, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_136_reg <= vc1_inv_trans_8x8_c__preheader_136;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_136_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %137 = or i32 %88, 1*/
begin
vc1_inv_trans_8x8_c__preheader_137 = (vc1_inv_trans_8x8_c__preheader_88 | 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %137 = or i32 %88, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_137_reg <= vc1_inv_trans_8x8_c__preheader_137;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_137_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %138 = sub i32 %137, %108*/
begin
vc1_inv_trans_8x8_c__preheader_138 = (vc1_inv_trans_8x8_c__preheader_137_reg - vc1_inv_trans_8x8_c__preheader_108);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %138 = sub i32 %137, %108*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_138_reg <= vc1_inv_trans_8x8_c__preheader_138;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_138_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %139 = ashr i32 %138, 7*/
begin
vc1_inv_trans_8x8_c__preheader_139 = ($signed(vc1_inv_trans_8x8_c__preheader_138) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %139 = ashr i32 %138, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_139_reg <= vc1_inv_trans_8x8_c__preheader_139;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_139_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %140 = or i32 %87, 1*/
begin
vc1_inv_trans_8x8_c__preheader_140 = (vc1_inv_trans_8x8_c__preheader_87 | 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %140 = or i32 %87, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_20))
begin
vc1_inv_trans_8x8_c__preheader_140_reg <= vc1_inv_trans_8x8_c__preheader_140;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_140_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %141 = sub i32 %140, %101*/
begin
vc1_inv_trans_8x8_c__preheader_141 = (vc1_inv_trans_8x8_c__preheader_140_reg - vc1_inv_trans_8x8_c__preheader_101);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %141 = sub i32 %140, %101*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_141_reg <= vc1_inv_trans_8x8_c__preheader_141;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_141_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %142 = ashr i32 %141, 7*/
begin
vc1_inv_trans_8x8_c__preheader_142 = ($signed(vc1_inv_trans_8x8_c__preheader_141) >>> 32'd7);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %142 = ashr i32 %141, 7*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
vc1_inv_trans_8x8_c__preheader_142_reg <= vc1_inv_trans_8x8_c__preheader_142;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_142_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %143 = add nsw i32 %i.113, 1*/
begin
vc1_inv_trans_8x8_c__preheader_143 = (vc1_inv_trans_8x8_c__preheader_i_113_reg + 32'd1);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %143 = add nsw i32 %i.113, 1*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_143_reg <= vc1_inv_trans_8x8_c__preheader_143;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_143_reg"); $finish; end
end
end
always @(*) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %exitcond = icmp eq i32 %143, 8*/
begin
vc1_inv_trans_8x8_c__preheader_exitcond = (vc1_inv_trans_8x8_c__preheader_143 == 32'd8);
end
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %exitcond = icmp eq i32 %143, 8*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_15))
begin
vc1_inv_trans_8x8_c__preheader_exitcond_reg <= vc1_inv_trans_8x8_c__preheader_exitcond;
if (reset == 1'b0 && ^(vc1_inv_trans_8x8_c__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_address_a = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %55, i32* %dst.017, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c_1_dst_017_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %59, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c_1_scevgep44_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %63, i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c_1_scevgep48_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %67, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c_1_scevgep52_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %91 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c__preheader_scevgep34 >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %71 = load i32* %src.112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c__preheader_src_112_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %79 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c__preheader_scevgep32_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %95 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c_0_temp_address_a = (vc1_inv_trans_8x8_c__preheader_scevgep36_reg >>> 3'd2);
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %55, i32* %dst.017, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %59, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %63, i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %67, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %91 = load i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %71 = load i32* %src.112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %79 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %95 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_a = 1'd0;
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_in_a = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %55, i32* %dst.017, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_in_a = vc1_inv_trans_8x8_c_1_55;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %59, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_in_a = vc1_inv_trans_8x8_c_1_59_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %63, i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_in_a = vc1_inv_trans_8x8_c_1_63_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %67, i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_in_a = vc1_inv_trans_8x8_c_1_67_reg;
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_address_b = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %57, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c_1_scevgep42_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %61, i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c_1_scevgep46_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %65, i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c_1_scevgep50_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %69, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c_1_scevgep54_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %93 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c__preheader_scevgep35 >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %72 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c__preheader_scevgep31_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %81 = load i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c__preheader_scevgep33_reg >>> 3'd2);
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %97 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c_0_temp_address_b = (vc1_inv_trans_8x8_c__preheader_scevgep37_reg >>> 3'd2);
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %57, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %61, i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %65, i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %69, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %93 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_16))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %72 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_17))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %81 = load i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_18))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %97 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_19))
begin
vc1_inv_trans_8x8_c_0_temp_write_enable_b = 1'd0;
end
end
always @(*) begin
vc1_inv_trans_8x8_c_0_temp_in_b = 1'd0;
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %57, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_9))
begin
vc1_inv_trans_8x8_c_0_temp_in_b = vc1_inv_trans_8x8_c_1_57;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %61, i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_10))
begin
vc1_inv_trans_8x8_c_0_temp_in_b = vc1_inv_trans_8x8_c_1_61_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %65, i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_11))
begin
vc1_inv_trans_8x8_c_0_temp_in_b = vc1_inv_trans_8x8_c_1_65_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   store i32 %69, i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_12))
begin
vc1_inv_trans_8x8_c_0_temp_in_b = vc1_inv_trans_8x8_c_1_69_reg;
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %25 = mul nsw i32 %24, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_25_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_25_stage0_reg <= (vc1_inv_trans_8x8_c_1_24 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %33 = mul nsw i32 %22, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_33_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_33_stage0_reg <= (vc1_inv_trans_8x8_c_1_22 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %40 = mul nsw i32 %22, 9*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_40_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_40_stage0_reg <= (vc1_inv_trans_8x8_c_1_22 * 32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %48 = mul i32 %24, -9*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_48_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_48_stage0_reg <= (vc1_inv_trans_8x8_c_1_24 * -32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_5_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %5 = mul nsw i32 %4, 12*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_5_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_5_stage0_reg <= (vc1_inv_trans_8x8_c_1_4 * 32'd12);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %8 = mul nsw i32 %7, 12*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_8_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_8_stage0_reg <= (vc1_inv_trans_8x8_c_1_7 * 32'd12);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %13 = mul nsw i32 %12, 6*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_13_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_13_stage0_reg <= (vc1_inv_trans_8x8_c_1_12 * 32'd6);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %15 = mul nsw i32 %10, 6*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_15_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_15_stage0_reg <= (vc1_inv_trans_8x8_c_1_10 * 32'd6);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %27 = mul nsw i32 %26, 9*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_27_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_27_stage0_reg <= (vc1_inv_trans_8x8_c_1_26 * 32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %36 = mul i32 %28, -9*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_36_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_36_stage0_reg <= (vc1_inv_trans_8x8_c_1_28 * -32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %43 = mul nsw i32 %28, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_43_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_43_stage0_reg <= (vc1_inv_trans_8x8_c_1_28 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c_1_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %1*/
/*   %49 = mul nsw i32 %26, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c_1_49_en == 1'd1))
begin
vc1_inv_trans_8x8_c_1_49_stage0_reg <= (vc1_inv_trans_8x8_c_1_26 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_94_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %94 = mul nsw i32 %93, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_94_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_94_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_93 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %102 = mul nsw i32 %91, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_102_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_102_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_91 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %109 = mul nsw i32 %91, 9*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_109_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_109_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_91 * 32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %117 = mul i32 %93, -9*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_117_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_117_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_93 * -32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %74 = mul nsw i32 %73, 12*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_74_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_74_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_73 * 32'd12);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %77 = mul nsw i32 %76, 12*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_77_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_77_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_76 * 32'd12);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_82_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %82 = mul nsw i32 %81, 6*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_82_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_82_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_81 * 32'd6);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_84_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %84 = mul nsw i32 %79, 6*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_84_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_84_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_79 * 32'd6);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %96 = mul nsw i32 %95, 9*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_96_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_96_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_95 * 32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %105 = mul i32 %97, -9*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_105_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_105_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_97 * -32'd9);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %112 = mul nsw i32 %97, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_112_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_112_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_97 * 32'd15);
end
end
always @(*) begin
lpm_mult_vc1_inv_trans_8x8_c__preheader_118_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   %118 = mul nsw i32 %95, 15*/
if ((lpm_mult_vc1_inv_trans_8x8_c__preheader_118_en == 1'd1))
begin
vc1_inv_trans_8x8_c__preheader_118_stage0_reg <= (vc1_inv_trans_8x8_c__preheader_95 * 32'd15);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* vc1_inv_trans_8x8_c: %144*/
/*   ret void*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_144_26))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %124, i32* %dst.114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %128, i32* %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %133, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %139, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c_1_scevgep63;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c_1_src_015_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c_1_scevgep59_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c_1_scevgep67_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %124, i32* %dst.114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c__preheader_dst_114_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %128, i32* %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c__preheader_scevgep19_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %133, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c__preheader_scevgep23_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %139, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_address_a = vc1_inv_trans_8x8_c__preheader_scevgep27_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %124, i32* %dst.114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %128, i32* %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %133, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %139, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %124, i32* %dst.114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_in_a = vc1_inv_trans_8x8_c__preheader_124;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %128, i32* %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_in_a = vc1_inv_trans_8x8_c__preheader_128_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %133, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_in_a = vc1_inv_trans_8x8_c__preheader_133_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %139, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_in_a = vc1_inv_trans_8x8_c__preheader_139_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %22 = load i32* %scevgep63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %2 = load i32* %src.015, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %10 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %26 = load i32* %scevgep67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %124, i32* %dst.114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %128, i32* %scevgep19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %133, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_size_a = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %139, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %126, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %130, i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %136, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %142, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c_1_scevgep65;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c_1_scevgep57_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c_1_scevgep61_reg;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c_1_scevgep69_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %126, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c__preheader_scevgep_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %130, i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c__preheader_scevgep21_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %136, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c__preheader_scevgep25_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %142, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_address_b = vc1_inv_trans_8x8_c__preheader_scevgep29_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %126, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %130, i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %136, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %142, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %126, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_in_b = vc1_inv_trans_8x8_c__preheader_126;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %130, i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_in_b = vc1_inv_trans_8x8_c__preheader_130_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %136, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_in_b = vc1_inv_trans_8x8_c__preheader_136_reg;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %142, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_in_b = vc1_inv_trans_8x8_c__preheader_142_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %24 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_3))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %3 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_4))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %12 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_5))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %1*/
/*   %28 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB_1_6))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %126, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_21))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %130, i32* %scevgep21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_22))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %136, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_23))
begin
memory_controller_size_b = 2'd2;
end
/* vc1_inv_trans_8x8_c: %.preheader*/
/*   store i32 %142, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vc1_inv_trans_8x8_c_BB__preheader_24))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [5:0] vc1_inv_trans_8x8_c_0_temp_address_a;
wire  vc1_inv_trans_8x8_c_0_temp_write_enable_a;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_in_a;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_out_a;
wire [5:0] vc1_inv_trans_8x8_c_0_temp_address_b;
wire  vc1_inv_trans_8x8_c_0_temp_write_enable_b;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_in_b;
wire [31:0] vc1_inv_trans_8x8_c_0_temp_out_b;
reg  vc1_inv_trans_8x8_c_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_arg_block;
wire  vc1_inv_trans_8x8_c_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_address_a;
wire  vc1_inv_trans_8x8_c_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_out_a;
wire [1:0] vc1_inv_trans_8x8_c_memory_controller_size_a;
wire  vc1_inv_trans_8x8_c_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_address_b;
wire  vc1_inv_trans_8x8_c_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] vc1_inv_trans_8x8_c_memory_controller_out_b;
wire [1:0] vc1_inv_trans_8x8_c_memory_controller_size_b;
reg  vc1_inv_trans_8x8_c_memory_controller_waitrequest;
wire  vc1_inv_trans_8x8_c_finish;
reg  vc1_inv_trans_8x8_c_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


vc1_inv_trans_8x8_c vc1_inv_trans_8x8_c_inst (
	.memory_controller_enable_a (vc1_inv_trans_8x8_c_memory_controller_enable_a),
	.memory_controller_address_a (vc1_inv_trans_8x8_c_memory_controller_address_a),
	.memory_controller_write_enable_a (vc1_inv_trans_8x8_c_memory_controller_write_enable_a),
	.memory_controller_in_a (vc1_inv_trans_8x8_c_memory_controller_in_a),
	.memory_controller_size_a (vc1_inv_trans_8x8_c_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (vc1_inv_trans_8x8_c_memory_controller_enable_b),
	.memory_controller_address_b (vc1_inv_trans_8x8_c_memory_controller_address_b),
	.memory_controller_write_enable_b (vc1_inv_trans_8x8_c_memory_controller_write_enable_b),
	.memory_controller_in_b (vc1_inv_trans_8x8_c_memory_controller_in_b),
	.memory_controller_size_b (vc1_inv_trans_8x8_c_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (vc1_inv_trans_8x8_c_start),
	.finish (vc1_inv_trans_8x8_c_finish),
	.arg_block (vc1_inv_trans_8x8_c_arg_block)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (vc1_inv_trans_8x8_c_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vc1_inv_trans_8x8_c_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_start"); $finish; end
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
vc1_inv_trans_8x8_c_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
vc1_inv_trans_8x8_c_arg_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vc1_inv_trans_8x8_c_arg_block"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
begin
vc1_inv_trans_8x8_c_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
begin
vc1_inv_trans_8x8_c_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
vc1_inv_trans_8x8_c_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
vc1_inv_trans_8x8_c_finish_final = vc1_inv_trans_8x8_c_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = vc1_inv_trans_8x8_c_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = vc1_inv_trans_8x8_c_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = vc1_inv_trans_8x8_c_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = vc1_inv_trans_8x8_c_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = vc1_inv_trans_8x8_c_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = vc1_inv_trans_8x8_c_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = vc1_inv_trans_8x8_c_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = vc1_inv_trans_8x8_c_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = vc1_inv_trans_8x8_c_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = vc1_inv_trans_8x8_c_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = vc1_inv_trans_8x8_c_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = vc1_inv_trans_8x8_c_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @vc1_inv_trans_8x8_c(i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = vc1_inv_trans_8x8_c_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
