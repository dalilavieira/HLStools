//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:54:55 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module vega10_odn_update_soc_table
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_hwmgr,
	arg_type
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4 = 5'd4;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5 = 5'd5;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6 = 5'd6;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7 = 5'd7;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8 = 5'd8;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9 = 5'd9;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10 = 5'd10;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11 = 5'd11;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12 = 5'd12;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_13 = 5'd13;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_14 = 5'd14;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_15 = 5'd15;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_16 = 5'd16;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_17 = 5'd17;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_12_18 = 5'd18;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19 = 5'd19;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20 = 5'd20;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21 = 5'd21;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22 = 5'd22;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_24_23 = 5'd23;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_24_24 = 5'd24;
parameter [4:0] LEGUP_F_vega10_odn_update_soc_table_BB_25_25 = 5'd25;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_hwmgr;
input [31:0] arg_type;
reg [4:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_0_2_reg;
reg  vega10_odn_update_soc_table_0_3;
reg  vega10_odn_update_soc_table_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8_4_reg;
reg [31:0] vega10_odn_update_soc_table__preheader8_5;
reg [31:0] vega10_odn_update_soc_table__preheader8_5_reg;
reg [31:0] vega10_odn_update_soc_table__preheader8_6;
reg [31:0] vega10_odn_update_soc_table__preheader8_6_reg;
reg  vega10_odn_update_soc_table__preheader8_7;
reg  vega10_odn_update_soc_table__preheader8_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__pre37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__pre37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__pre39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__preheader8__crit_edge__pre39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table__lr_ph10_11_reg;
reg [31:0] vega10_odn_update_soc_table_12_i_09;
reg [31:0] vega10_odn_update_soc_table_12_i_09_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_12_scevgep2829;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_12_scevgep2829_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_12_scevgep3031;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table_12_scevgep3031_reg;
reg [31:0] vega10_odn_update_soc_table_12_tmp32;
reg [31:0] vega10_odn_update_soc_table_12_tmp32_reg;
reg [31:0] vega10_odn_update_soc_table_12_13;
reg [31:0] vega10_odn_update_soc_table_12_13_reg;
reg [31:0] vega10_odn_update_soc_table_12_14;
reg [31:0] vega10_odn_update_soc_table_12_14_reg;
reg [31:0] vega10_odn_update_soc_table_12_15;
reg [31:0] vega10_odn_update_soc_table_12_15_reg;
reg  vega10_odn_update_soc_table_12_16;
reg  vega10_odn_update_soc_table_12_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_18_reg;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_i_0_lcssa;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_19_reg;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_20;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] vega10_odn_update_soc_table___crit_edge11_21_reg;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_22;
reg [31:0] vega10_odn_update_soc_table___crit_edge11_22_reg;
reg  vega10_odn_update_soc_table___crit_edge11_23;
reg  vega10_odn_update_soc_table___crit_edge11_23_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table__preheader8_7 == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table__preheader8_7 == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_12_16 == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_12_16 == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table___crit_edge11_23 == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_24_23;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_24_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table___crit_edge11_23 == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_24_23;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_24_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_24_24;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_24_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_24_24;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_24_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_25_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_vega10_odn_update_soc_table_BB_25_25;
if (reset == 1'b0 && ^(LEGUP_F_vega10_odn_update_soc_table_BB_25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_25_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %0*/
/*   %1 = getelementptr inbounds %struct.pp_hwmgr* %hwmgr, i32 0, i32 1*/
begin
vega10_odn_update_soc_table_0_1 = (arg_hwmgr + 4);
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %0*/
/*   %1 = getelementptr inbounds %struct.pp_hwmgr* %hwmgr, i32 0, i32 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
vega10_odn_update_soc_table_0_1_reg <= vega10_odn_update_soc_table_0_1;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_0_1_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
begin
vega10_odn_update_soc_table_0_2 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_3))
begin
vega10_odn_update_soc_table_0_2_reg <= vega10_odn_update_soc_table_0_2;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_0_2_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %0*/
/*   %3 = icmp eq i32 %type, 0*/
begin
vega10_odn_update_soc_table_0_3 = (arg_type == 32'd0);
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %0*/
/*   %3 = icmp eq i32 %type, 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
vega10_odn_update_soc_table_0_3_reg <= vega10_odn_update_soc_table_0_3;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_0_3_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %4 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 0*/
begin
vega10_odn_update_soc_table__preheader8_4 = (vega10_odn_update_soc_table_0_2_reg + (12 + 8));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %4 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4))
begin
vega10_odn_update_soc_table__preheader8_4_reg <= vega10_odn_update_soc_table__preheader8_4;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8_4_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
begin
vega10_odn_update_soc_table__preheader8_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6))
begin
vega10_odn_update_soc_table__preheader8_5_reg <= vega10_odn_update_soc_table__preheader8_5;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8_5_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %6 = add nsw i32 %5, -1*/
begin
vega10_odn_update_soc_table__preheader8_6 = (vega10_odn_update_soc_table__preheader8_5 + -32'd1);
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %6 = add nsw i32 %5, -1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6))
begin
vega10_odn_update_soc_table__preheader8_6_reg <= vega10_odn_update_soc_table__preheader8_6;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8_6_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %7 = icmp sgt i32 %6, 0*/
begin
vega10_odn_update_soc_table__preheader8_7 = ($signed(vega10_odn_update_soc_table__preheader8_6) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %7 = icmp sgt i32 %6, 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_6))
begin
vega10_odn_update_soc_table__preheader8_7_reg <= vega10_odn_update_soc_table__preheader8_7;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8_7_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.phi.trans.insert36 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 2, i32 1*/
begin
vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36 = (vega10_odn_update_soc_table_0_2_reg + ((12 + 16) + 4));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.phi.trans.insert36 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 2, i32 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36_reg <= vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
begin
vega10_odn_update_soc_table__preheader8__crit_edge__pre37 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9))
begin
vega10_odn_update_soc_table__preheader8__crit_edge__pre37_reg <= vega10_odn_update_soc_table__preheader8__crit_edge__pre37;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8__crit_edge__pre37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8__crit_edge__pre37_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.phi.trans.insert38 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 1*/
begin
vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38 = (vega10_odn_update_soc_table_0_2_reg + ((12 + 8) + 4));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.phi.trans.insert38 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38_reg <= vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
begin
vega10_odn_update_soc_table__preheader8__crit_edge__pre39 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9))
begin
vega10_odn_update_soc_table__preheader8__crit_edge__pre39_reg <= vega10_odn_update_soc_table__preheader8__crit_edge__pre39;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__preheader8__crit_edge__pre39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__preheader8__crit_edge__pre39_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %8 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 1*/
begin
vega10_odn_update_soc_table__lr_ph10_8 = (vega10_odn_update_soc_table_0_2_reg + ((12 + 8) + 4));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %8 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 1, i32 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
vega10_odn_update_soc_table__lr_ph10_8_reg <= vega10_odn_update_soc_table__lr_ph10_8;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__lr_ph10_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__lr_ph10_8_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
begin
vega10_odn_update_soc_table__lr_ph10_9 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12))
begin
vega10_odn_update_soc_table__lr_ph10_9_reg <= vega10_odn_update_soc_table__lr_ph10_9;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__lr_ph10_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__lr_ph10_9_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %10 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 2, i32 1*/
begin
vega10_odn_update_soc_table__lr_ph10_10 = (vega10_odn_update_soc_table_0_2_reg + ((12 + 16) + 4));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %10 = getelementptr inbounds %struct.vega10_hwmgr* %2, i32 0, i32 2, i32 2, i32 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
vega10_odn_update_soc_table__lr_ph10_10_reg <= vega10_odn_update_soc_table__lr_ph10_10;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__lr_ph10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__lr_ph10_10_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
begin
vega10_odn_update_soc_table__lr_ph10_11 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12))
begin
vega10_odn_update_soc_table__lr_ph10_11_reg <= vega10_odn_update_soc_table__lr_ph10_11;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table__lr_ph10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table__lr_ph10_11_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %i.09 = phi i32 [ 0, %.lr.ph10 ], [ %tmp32, %12 ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table_12_i_09 = 32'd0;
end
/* vega10_odn_update_soc_table: %12*/
/*   %i.09 = phi i32 [ 0, %.lr.ph10 ], [ %tmp32, %12 ]*/
else /* if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_12_16 == 1'd1))) */
begin
vega10_odn_update_soc_table_12_i_09 = vega10_odn_update_soc_table_12_tmp32_reg;
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %i.09 = phi i32 [ 0, %.lr.ph10 ], [ %tmp32, %12 ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_12) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table_12_i_09_reg <= vega10_odn_update_soc_table_12_i_09;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_i_09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_i_09_reg"); $finish; end
end
/* vega10_odn_update_soc_table: %12*/
/*   %i.09 = phi i32 [ 0, %.lr.ph10 ], [ %tmp32, %12 ]*/
if ((((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18) & (memory_controller_waitrequest == 1'd0)) & (vega10_odn_update_soc_table_12_16 == 1'd1)))
begin
vega10_odn_update_soc_table_12_i_09_reg <= vega10_odn_update_soc_table_12_i_09;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_i_09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_i_09_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %scevgep2829 = getelementptr inbounds %struct.TYPE_14__* %9, i32 %i.09, i32 0*/
begin
vega10_odn_update_soc_table_12_scevgep2829 = (vega10_odn_update_soc_table__lr_ph10_9_reg + (12 * vega10_odn_update_soc_table_12_i_09_reg));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %scevgep2829 = getelementptr inbounds %struct.TYPE_14__* %9, i32 %i.09, i32 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
vega10_odn_update_soc_table_12_scevgep2829_reg <= vega10_odn_update_soc_table_12_scevgep2829;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_scevgep2829) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_scevgep2829_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %scevgep3031 = getelementptr inbounds %struct.TYPE_10__* %11, i32 %i.09, i32 0*/
begin
vega10_odn_update_soc_table_12_scevgep3031 = (vega10_odn_update_soc_table__lr_ph10_11_reg + (4 * vega10_odn_update_soc_table_12_i_09_reg));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %scevgep3031 = getelementptr inbounds %struct.TYPE_10__* %11, i32 %i.09, i32 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
vega10_odn_update_soc_table_12_scevgep3031_reg <= vega10_odn_update_soc_table_12_scevgep3031;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_scevgep3031) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_scevgep3031_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %tmp32 = add i32 %i.09, 1*/
begin
vega10_odn_update_soc_table_12_tmp32 = (vega10_odn_update_soc_table_12_i_09_reg + 32'd1);
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %tmp32 = add i32 %i.09, 1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
vega10_odn_update_soc_table_12_tmp32_reg <= vega10_odn_update_soc_table_12_tmp32;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_tmp32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_tmp32_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
begin
vega10_odn_update_soc_table_12_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
vega10_odn_update_soc_table_12_13_reg <= vega10_odn_update_soc_table_12_13;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_13_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
begin
vega10_odn_update_soc_table_12_14 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18))
begin
vega10_odn_update_soc_table_12_14_reg <= vega10_odn_update_soc_table_12_14;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_14_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %15 = add nsw i32 %14, -1*/
begin
vega10_odn_update_soc_table_12_15 = (vega10_odn_update_soc_table_12_14 + -32'd1);
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %15 = add nsw i32 %14, -1*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18))
begin
vega10_odn_update_soc_table_12_15_reg <= vega10_odn_update_soc_table_12_15;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_15_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %12*/
/*   %16 = icmp slt i32 %tmp32, %15*/
begin
vega10_odn_update_soc_table_12_16 = ($signed(vega10_odn_update_soc_table_12_tmp32_reg) < $signed(vega10_odn_update_soc_table_12_15));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %12*/
/*   %16 = icmp slt i32 %tmp32, %15*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_18))
begin
vega10_odn_update_soc_table_12_16_reg <= vega10_odn_update_soc_table_12_16;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table_12_16_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %17 = phi %struct.TYPE_14__* [ %.pre39, %.preheader8._crit_edge ], [ %9, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_17 = vega10_odn_update_soc_table__preheader8__crit_edge__pre39;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %17 = phi %struct.TYPE_14__* [ %.pre39, %.preheader8._crit_edge ], [ %9, %._crit_edge11.loopexit ]*/
else /* if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0))) */
begin
vega10_odn_update_soc_table___crit_edge11_17 = vega10_odn_update_soc_table__lr_ph10_9_reg;
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %17 = phi %struct.TYPE_14__* [ %.pre39, %.preheader8._crit_edge ], [ %9, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_17_reg <= vega10_odn_update_soc_table___crit_edge11_17;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_17_reg"); $finish; end
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %17 = phi %struct.TYPE_14__* [ %.pre39, %.preheader8._crit_edge ], [ %9, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_17_reg <= vega10_odn_update_soc_table___crit_edge11_17;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_17_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %18 = phi %struct.TYPE_10__* [ %.pre37, %.preheader8._crit_edge ], [ %11, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_18 = vega10_odn_update_soc_table__preheader8__crit_edge__pre37;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %18 = phi %struct.TYPE_10__* [ %.pre37, %.preheader8._crit_edge ], [ %11, %._crit_edge11.loopexit ]*/
else /* if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0))) */
begin
vega10_odn_update_soc_table___crit_edge11_18 = vega10_odn_update_soc_table__lr_ph10_11_reg;
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %18 = phi %struct.TYPE_10__* [ %.pre37, %.preheader8._crit_edge ], [ %11, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_18_reg <= vega10_odn_update_soc_table___crit_edge11_18;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_18_reg"); $finish; end
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %18 = phi %struct.TYPE_10__* [ %.pre37, %.preheader8._crit_edge ], [ %11, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_18_reg <= vega10_odn_update_soc_table___crit_edge11_18;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_18_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %i.0.lcssa = phi i32 [ 0, %.preheader8._crit_edge ], [ %tmp32, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_i_0_lcssa = 32'd0;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %i.0.lcssa = phi i32 [ 0, %.preheader8._crit_edge ], [ %tmp32, %._crit_edge11.loopexit ]*/
else /* if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0))) */
begin
vega10_odn_update_soc_table___crit_edge11_i_0_lcssa = vega10_odn_update_soc_table_12_tmp32_reg;
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %i.0.lcssa = phi i32 [ 0, %.preheader8._crit_edge ], [ %tmp32, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg <= vega10_odn_update_soc_table___crit_edge11_i_0_lcssa;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_i_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg"); $finish; end
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %i.0.lcssa = phi i32 [ 0, %.preheader8._crit_edge ], [ %tmp32, %._crit_edge11.loopexit ]*/
if (((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_loopexit_19) & (memory_controller_waitrequest == 1'd0)))
begin
vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg <= vega10_odn_update_soc_table___crit_edge11_i_0_lcssa;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_i_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %19 = getelementptr inbounds %struct.TYPE_10__* %18, i32 %i.0.lcssa, i32 0*/
begin
vega10_odn_update_soc_table___crit_edge11_19 = (vega10_odn_update_soc_table___crit_edge11_18_reg + (4 * vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %19 = getelementptr inbounds %struct.TYPE_10__* %18, i32 %i.0.lcssa, i32 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
vega10_odn_update_soc_table___crit_edge11_19_reg <= vega10_odn_update_soc_table___crit_edge11_19;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_19_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
begin
vega10_odn_update_soc_table___crit_edge11_20 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22))
begin
vega10_odn_update_soc_table___crit_edge11_20_reg <= vega10_odn_update_soc_table___crit_edge11_20;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_20_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %21 = getelementptr inbounds %struct.TYPE_14__* %17, i32 %i.0.lcssa, i32 0*/
begin
vega10_odn_update_soc_table___crit_edge11_21 = (vega10_odn_update_soc_table___crit_edge11_17_reg + (12 * vega10_odn_update_soc_table___crit_edge11_i_0_lcssa_reg));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %21 = getelementptr inbounds %struct.TYPE_14__* %17, i32 %i.0.lcssa, i32 0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
vega10_odn_update_soc_table___crit_edge11_21_reg <= vega10_odn_update_soc_table___crit_edge11_21;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_21_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
begin
vega10_odn_update_soc_table___crit_edge11_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22))
begin
vega10_odn_update_soc_table___crit_edge11_22_reg <= vega10_odn_update_soc_table___crit_edge11_22;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_22_reg"); $finish; end
end
end
always @(*) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %23 = icmp slt i32 %20, %22*/
begin
vega10_odn_update_soc_table___crit_edge11_23 = ($signed(vega10_odn_update_soc_table___crit_edge11_20) < $signed(vega10_odn_update_soc_table___crit_edge11_22));
end
end
always @(posedge clk) begin
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %23 = icmp slt i32 %20, %22*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_22))
begin
vega10_odn_update_soc_table___crit_edge11_23_reg <= vega10_odn_update_soc_table___crit_edge11_23;
if (reset == 1'b0 && ^(vega10_odn_update_soc_table___crit_edge11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to vega10_odn_update_soc_table___crit_edge11_23_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* vega10_odn_update_soc_table: %25*/
/*   ret void*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_25_25))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_enable_a = 1'd1;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_enable_a = 1'd1;
end
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
memory_controller_enable_a = 1'd1;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_enable_a = 1'd1;
end
/* vega10_odn_update_soc_table: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
memory_controller_address_a = vega10_odn_update_soc_table_0_1;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_address_a = vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert36;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_address_a = vega10_odn_update_soc_table__lr_ph10_8;
end
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
memory_controller_address_a = vega10_odn_update_soc_table_12_scevgep2829;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_address_a = vega10_odn_update_soc_table___crit_edge11_19;
end
/* vega10_odn_update_soc_table: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23))
begin
memory_controller_address_a = vega10_odn_update_soc_table___crit_edge11_19_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* vega10_odn_update_soc_table: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* vega10_odn_update_soc_table: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23))
begin
memory_controller_in_a = vega10_odn_update_soc_table___crit_edge11_22_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* vega10_odn_update_soc_table: %0*/
/*   %2 = load %struct.vega10_hwmgr** %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre37 = load %struct.TYPE_10__** %.phi.trans.insert36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_size_a = 2'd2;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %9 = load %struct.TYPE_14__** %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_size_a = 2'd2;
end
/* vega10_odn_update_soc_table: %12*/
/*   %13 = load i32* %scevgep2829, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_13))
begin
memory_controller_size_a = 2'd2;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %20 = load i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_size_a = 2'd2;
end
/* vega10_odn_update_soc_table: %24*/
/*   store i32 %22, i32* %19, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_24_23))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4))
begin
memory_controller_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %12*/
/*   store i32 %13, i32* %scevgep3031, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
memory_controller_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16))
begin
memory_controller_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4))
begin
memory_controller_address_b = vega10_odn_update_soc_table__preheader8_4;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_address_b = vega10_odn_update_soc_table__preheader8__crit_edge__phi_trans_insert38;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_address_b = vega10_odn_update_soc_table__lr_ph10_10;
end
/* vega10_odn_update_soc_table: %12*/
/*   store i32 %13, i32* %scevgep3031, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
memory_controller_address_b = vega10_odn_update_soc_table_12_scevgep3031_reg;
end
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16))
begin
memory_controller_address_b = vega10_odn_update_soc_table__preheader8_4_reg;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_address_b = vega10_odn_update_soc_table___crit_edge11_21;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %12*/
/*   store i32 %13, i32* %scevgep3031, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* vega10_odn_update_soc_table: %12*/
/*   store i32 %13, i32* %scevgep3031, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
memory_controller_in_b = vega10_odn_update_soc_table_12_13;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* vega10_odn_update_soc_table: %.preheader8*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8_4))
begin
memory_controller_size_b = 2'd2;
end
/* vega10_odn_update_soc_table: %.preheader8._crit_edge*/
/*   %.pre39 = load %struct.TYPE_14__** %.phi.trans.insert38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__preheader8__crit_edge_7))
begin
memory_controller_size_b = 2'd2;
end
/* vega10_odn_update_soc_table: %.lr.ph10*/
/*   %11 = load %struct.TYPE_10__** %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB__lr_ph10_10))
begin
memory_controller_size_b = 2'd2;
end
/* vega10_odn_update_soc_table: %12*/
/*   store i32 %13, i32* %scevgep3031, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_15))
begin
memory_controller_size_b = 2'd2;
end
/* vega10_odn_update_soc_table: %12*/
/*   %14 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB_12_16))
begin
memory_controller_size_b = 2'd2;
end
/* vega10_odn_update_soc_table: %._crit_edge11*/
/*   %22 = load i32* %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_vega10_odn_update_soc_table_BB___crit_edge11_20))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  llvm_trap_start;
wire  llvm_trap_finish;
reg  llvm_trap_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


llvm_trap llvm_trap_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (llvm_trap_start),
	.finish (llvm_trap_finish)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %vega10_odn_update_soc_table.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_F_main_BB_vega10_odn_update_soc_table_exit_1))
begin
llvm_trap_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
/* main: %vega10_odn_update_soc_table.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
llvm_trap_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
end
always @(*) begin
llvm_trap_finish_final = llvm_trap_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %vega10_odn_update_soc_table.exit*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
