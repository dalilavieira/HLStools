//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:33 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module count_frame_bits
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_s
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_count_frame_bits_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_count_frame_bits_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_count_frame_bits_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_count_frame_bits_BB_4_4 = 8'd4;
parameter [7:0] LEGUP_F_count_frame_bits_BB_4_5 = 8'd5;
parameter [7:0] LEGUP_F_count_frame_bits_BB_4_6 = 8'd6;
parameter [7:0] LEGUP_F_count_frame_bits_BB_8_7 = 8'd7;
parameter [7:0] LEGUP_F_count_frame_bits_BB_8_8 = 8'd8;
parameter [7:0] LEGUP_F_count_frame_bits_BB_8_9 = 8'd9;
parameter [7:0] LEGUP_F_count_frame_bits_BB_8_10 = 8'd10;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge1_11 = 8'd11;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge1_12 = 8'd12;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge1_13 = 8'd13;
parameter [7:0] LEGUP_F_count_frame_bits_BB_26_14 = 8'd14;
parameter [7:0] LEGUP_F_count_frame_bits_BB_26_15 = 8'd15;
parameter [7:0] LEGUP_F_count_frame_bits_BB_26_16 = 8'd16;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge72_17 = 8'd17;
parameter [7:0] LEGUP_F_count_frame_bits_BB_35_18 = 8'd18;
parameter [7:0] LEGUP_F_count_frame_bits_BB_35_19 = 8'd19;
parameter [7:0] LEGUP_F_count_frame_bits_BB_35_20 = 8'd20;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph11_21 = 8'd21;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph11_22 = 8'd22;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph11_23 = 8'd23;
parameter [7:0] LEGUP_F_count_frame_bits_BB_42_24 = 8'd24;
parameter [7:0] LEGUP_F_count_frame_bits_BB_42_25 = 8'd25;
parameter [7:0] LEGUP_F_count_frame_bits_BB_42_26 = 8'd26;
parameter [7:0] LEGUP_F_count_frame_bits_BB_42_27 = 8'd27;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28 = 8'd28;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit8_29 = 8'd29;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit8_30 = 8'd30;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit8_31 = 8'd31;
parameter [7:0] LEGUP_F_count_frame_bits_BB_48_32 = 8'd32;
parameter [7:0] LEGUP_F_count_frame_bits_BB_48_33 = 8'd33;
parameter [7:0] LEGUP_F_count_frame_bits_BB_48_34 = 8'd34;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader_35 = 8'd35;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader_36 = 8'd36;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader_37 = 8'd37;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph_38 = 8'd38;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph_39 = 8'd39;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph_40 = 8'd40;
parameter [7:0] LEGUP_F_count_frame_bits_BB_57_41 = 8'd41;
parameter [7:0] LEGUP_F_count_frame_bits_BB_57_42 = 8'd42;
parameter [7:0] LEGUP_F_count_frame_bits_BB_60_43 = 8'd43;
parameter [7:0] LEGUP_F_count_frame_bits_BB_60_44 = 8'd44;
parameter [7:0] LEGUP_F_count_frame_bits_BB_60_45 = 8'd45;
parameter [7:0] LEGUP_F_count_frame_bits_BB_65_46 = 8'd46;
parameter [7:0] LEGUP_F_count_frame_bits_BB_65_47 = 8'd47;
parameter [7:0] LEGUP_F_count_frame_bits_BB_65_48 = 8'd48;
parameter [7:0] LEGUP_F_count_frame_bits_BB_72_49 = 8'd49;
parameter [7:0] LEGUP_F_count_frame_bits_BB_72_50 = 8'd50;
parameter [7:0] LEGUP_F_count_frame_bits_BB_72_51 = 8'd51;
parameter [7:0] LEGUP_F_count_frame_bits_BB_80_52 = 8'd52;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53 = 8'd53;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader24_54 = 8'd54;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader24_55 = 8'd55;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader24_56 = 8'd56;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph27_57 = 8'd57;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph27_58 = 8'd58;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph27_59 = 8'd59;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph27_60 = 8'd60;
parameter [7:0] LEGUP_F_count_frame_bits_BB_101_61 = 8'd61;
parameter [7:0] LEGUP_F_count_frame_bits_BB_101_62 = 8'd62;
parameter [7:0] LEGUP_F_count_frame_bits_BB_101_63 = 8'd63;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge69_64 = 8'd64;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge69_65 = 8'd65;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge69_66 = 8'd66;
parameter [7:0] LEGUP_F_count_frame_bits_BB_105_67 = 8'd67;
parameter [7:0] LEGUP_F_count_frame_bits_BB_105_68 = 8'd68;
parameter [7:0] LEGUP_F_count_frame_bits_BB_105_69 = 8'd69;
parameter [7:0] LEGUP_F_count_frame_bits_BB_108_70 = 8'd70;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread_71 = 8'd71;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread86_72 = 8'd72;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread86_73 = 8'd73;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread86_74 = 8'd74;
parameter [7:0] LEGUP_F_count_frame_bits_BB_114_75 = 8'd75;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader13_76 = 8'd76;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph17_77 = 8'd77;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph17_78 = 8'd78;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph17_79 = 8'd79;
parameter [7:0] LEGUP_F_count_frame_bits_BB_119_80 = 8'd80;
parameter [7:0] LEGUP_F_count_frame_bits_BB_119_81 = 8'd81;
parameter [7:0] LEGUP_F_count_frame_bits_BB_119_82 = 8'd82;
parameter [7:0] LEGUP_F_count_frame_bits_BB_119_83 = 8'd83;
parameter [7:0] LEGUP_F_count_frame_bits_BB_122_84 = 8'd84;
parameter [7:0] LEGUP_F_count_frame_bits_BB_122_85 = 8'd85;
parameter [7:0] LEGUP_F_count_frame_bits_BB_122_86 = 8'd86;
parameter [7:0] LEGUP_F_count_frame_bits_BB_122_87 = 8'd87;
parameter [7:0] LEGUP_F_count_frame_bits_BB_122_88 = 8'd88;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge75_89 = 8'd89;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread88_90 = 8'd90;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread88_91 = 8'd91;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread88_92 = 8'd92;
parameter [7:0] LEGUP_F_count_frame_bits_BB_130_93 = 8'd93;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94 = 8'd94;
parameter [7:0] LEGUP_F_count_frame_bits_BB__loopexit14_95 = 8'd95;
parameter [7:0] LEGUP_F_count_frame_bits_BB_133_96 = 8'd96;
parameter [7:0] LEGUP_F_count_frame_bits_BB_133_97 = 8'd97;
parameter [7:0] LEGUP_F_count_frame_bits_BB_133_98 = 8'd98;
parameter [7:0] LEGUP_F_count_frame_bits_BB_138_99 = 8'd99;
parameter [7:0] LEGUP_F_count_frame_bits_BB_138_100 = 8'd100;
parameter [7:0] LEGUP_F_count_frame_bits_BB_138_101 = 8'd101;
parameter [7:0] LEGUP_F_count_frame_bits_BB__preheader19_102 = 8'd102;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph22_103 = 8'd103;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph22_104 = 8'd104;
parameter [7:0] LEGUP_F_count_frame_bits_BB__lr_ph22_105 = 8'd105;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_106 = 8'd106;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_107 = 8'd107;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_108 = 8'd108;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_109 = 8'd109;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_110 = 8'd110;
parameter [7:0] LEGUP_F_count_frame_bits_BB_142_111 = 8'd111;
parameter [7:0] LEGUP_F_count_frame_bits_BB_146_112 = 8'd112;
parameter [7:0] LEGUP_F_count_frame_bits_BB_146_113 = 8'd113;
parameter [7:0] LEGUP_F_count_frame_bits_BB_146_114 = 8'd114;
parameter [7:0] LEGUP_F_count_frame_bits_BB_146_115 = 8'd115;
parameter [7:0] LEGUP_F_count_frame_bits_BB_146_116 = 8'd116;
parameter [7:0] LEGUP_F_count_frame_bits_BB_152_117 = 8'd117;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118 = 8'd118;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge_119 = 8'd119;
parameter [7:0] LEGUP_F_count_frame_bits_BB_153_120 = 8'd120;
parameter [7:0] LEGUP_F_count_frame_bits_BB_153_121 = 8'd121;
parameter [7:0] LEGUP_F_count_frame_bits_BB_153_122 = 8'd122;
parameter [7:0] LEGUP_F_count_frame_bits_BB_158_123 = 8'd123;
parameter [7:0] LEGUP_F_count_frame_bits_BB_158_124 = 8'd124;
parameter [7:0] LEGUP_F_count_frame_bits_BB_158_125 = 8'd125;
parameter [7:0] LEGUP_F_count_frame_bits_BB_158_126 = 8'd126;
parameter [7:0] LEGUP_F_count_frame_bits_BB_thread_pre_split_127 = 8'd127;
parameter [7:0] LEGUP_F_count_frame_bits_BB_164_128 = 8'd128;
parameter [7:0] LEGUP_F_count_frame_bits_BB_164_129 = 8'd129;
parameter [7:0] LEGUP_F_count_frame_bits_BB_164_130 = 8'd130;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge76_131 = 8'd131;
parameter [7:0] LEGUP_F_count_frame_bits_BB__thread90_132 = 8'd132;
parameter [7:0] LEGUP_F_count_frame_bits_BB_169_133 = 8'd133;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134 = 8'd134;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge28_135 = 8'd135;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge28_136 = 8'd136;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge28_137 = 8'd137;
parameter [7:0] LEGUP_F_count_frame_bits_BB___crit_edge28_138 = 8'd138;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_0_1_reg;
reg [31:0] count_frame_bits_0_2;
reg [31:0] count_frame_bits_0_2_reg;
reg  count_frame_bits_0_3;
reg  count_frame_bits_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_4_5_reg;
reg [31:0] count_frame_bits_4_6;
reg [31:0] count_frame_bits_4_6_reg;
reg  count_frame_bits_4_7;
reg  count_frame_bits_4_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_4__phi_trans_insert_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_4__phi_trans_insert_phi_trans_insert_reg;
reg [31:0] count_frame_bits_4__pre73_pre;
reg [31:0] count_frame_bits_4__pre73_pre_reg;
reg  count_frame_bits_8_9;
reg  count_frame_bits_8_9_reg;
reg [31:0] count_frame_bits_8_frame_bits_0;
reg [31:0] count_frame_bits_8_frame_bits_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_10_reg;
reg [31:0] count_frame_bits_8_11;
reg [31:0] count_frame_bits_8_11_reg;
reg [31:0] count_frame_bits_8_12;
reg [31:0] count_frame_bits_8_12_reg;
reg  count_frame_bits_8_13;
reg  count_frame_bits_8_13_reg;
reg [31:0] count_frame_bits_8_frame_bits_0_;
reg [31:0] count_frame_bits_8_frame_bits_0__reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_14_reg;
reg [31:0] count_frame_bits_8_15;
reg [31:0] count_frame_bits_8_15_reg;
reg  count_frame_bits_8_16;
reg  count_frame_bits_8_16_reg;
reg [31:0] count_frame_bits_8_17;
reg [31:0] count_frame_bits_8_17_reg;
reg [31:0] count_frame_bits_8_frame_bits_2;
reg [31:0] count_frame_bits_8_frame_bits_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_8_18_reg;
reg [31:0] count_frame_bits_8_19;
reg [31:0] count_frame_bits_8_19_reg;
reg [31:0] count_frame_bits_8_20;
reg [31:0] count_frame_bits_8_20_reg;
reg [31:0] count_frame_bits_8_21;
reg [31:0] count_frame_bits_8_21_reg;
reg [31:0] count_frame_bits_8__;
reg [31:0] count_frame_bits_8___reg;
reg [31:0] count_frame_bits_8_22;
reg [31:0] count_frame_bits_8_22_reg;
reg [31:0] count_frame_bits___crit_edge1_frame_bits_4;
reg [31:0] count_frame_bits___crit_edge1_frame_bits_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge1_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge1_23_reg;
reg [31:0] count_frame_bits___crit_edge1_24;
reg [31:0] count_frame_bits___crit_edge1_24_reg;
reg  count_frame_bits___crit_edge1_25;
reg  count_frame_bits___crit_edge1_25_reg;
reg  count_frame_bits_26_27;
reg  count_frame_bits_26_27_reg;
reg [31:0] count_frame_bits_26__2_v;
reg [31:0] count_frame_bits_26__2_v_reg;
reg [31:0] count_frame_bits_26__2;
reg [31:0] count_frame_bits_26__2_reg;
reg  count_frame_bits_26_28;
reg  count_frame_bits_26_28_reg;
reg [31:0] count_frame_bits_26_29;
reg [31:0] count_frame_bits_26_29_reg;
reg [31:0] count_frame_bits_26_frame_bits_6;
reg [31:0] count_frame_bits_26_frame_bits_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_26_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_26_30_reg;
reg [31:0] count_frame_bits_26_31;
reg [31:0] count_frame_bits_26_31_reg;
reg  count_frame_bits_26_32;
reg  count_frame_bits_26_32_reg;
reg [31:0] count_frame_bits_26__3;
reg [31:0] count_frame_bits_26__3_reg;
reg [31:0] count_frame_bits_26_33;
reg [31:0] count_frame_bits_26_33_reg;
reg [31:0] count_frame_bits___crit_edge72_frame_bits_8;
reg [31:0] count_frame_bits___crit_edge72_frame_bits_8_reg;
reg  count_frame_bits___crit_edge72_34;
reg  count_frame_bits___crit_edge72_34_reg;
reg [31:0] count_frame_bits_35_36;
reg [31:0] count_frame_bits_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_35_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_35_37_reg;
reg [31:0] count_frame_bits_35_38;
reg [31:0] count_frame_bits_35_38_reg;
reg  count_frame_bits_35_39;
reg  count_frame_bits_35_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph11_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph11_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph11_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph11_41_reg;
reg  count_frame_bits__lr_ph11_tmp31;
reg  count_frame_bits__lr_ph11_tmp31_reg;
reg [31:0] count_frame_bits__lr_ph11__op;
reg [31:0] count_frame_bits__lr_ph11__op_reg;
reg [31:0] count_frame_bits__lr_ph11_tmp33;
reg [31:0] count_frame_bits__lr_ph11_tmp33_reg;
reg [31:0] count_frame_bits_42_indvar;
reg [31:0] count_frame_bits_42_indvar_reg;
reg [31:0] count_frame_bits_42_frame_bits_910;
reg [31:0] count_frame_bits_42_frame_bits_910_reg;
reg [31:0] count_frame_bits_42_tmp35;
reg [31:0] count_frame_bits_42_tmp35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_42_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_42_scevgep36_reg;
reg [31:0] count_frame_bits_42_43;
reg [31:0] count_frame_bits_42_43_reg;
reg  count_frame_bits_42_44;
reg  count_frame_bits_42_44_reg;
reg [31:0] count_frame_bits_42__4_v;
reg [31:0] count_frame_bits_42__4_v_reg;
reg [31:0] count_frame_bits_42__4;
reg [31:0] count_frame_bits_42__4_reg;
reg  count_frame_bits_42_exitcond34;
reg  count_frame_bits_42_exitcond34_reg;
reg [31:0] count_frame_bits__loopexit8_frame_bits_11;
reg [31:0] count_frame_bits__loopexit8_frame_bits_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__loopexit8_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__loopexit8_45_reg;
reg [31:0] count_frame_bits__loopexit8_46;
reg [31:0] count_frame_bits__loopexit8_46_reg;
reg  count_frame_bits__loopexit8_47;
reg  count_frame_bits__loopexit8_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_48_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_48_49_reg;
reg [31:0] count_frame_bits_48_50;
reg [31:0] count_frame_bits_48_50_reg;
reg  count_frame_bits_48_51;
reg  count_frame_bits_48_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__preheader_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__preheader_52_reg;
reg [31:0] count_frame_bits__preheader_53;
reg [31:0] count_frame_bits__preheader_53_reg;
reg  count_frame_bits__preheader_54;
reg  count_frame_bits__preheader_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph_56_reg;
reg  count_frame_bits__lr_ph_tmp;
reg  count_frame_bits__lr_ph_tmp_reg;
reg [31:0] count_frame_bits__lr_ph_smax;
reg [31:0] count_frame_bits__lr_ph_smax_reg;
reg [31:0] count_frame_bits_57_58;
reg [31:0] count_frame_bits_57_58_reg;
reg [31:0] count_frame_bits_57_59;
reg [31:0] count_frame_bits_57_59_reg;
reg [31:0] count_frame_bits_60_frame_bits_127;
reg [31:0] count_frame_bits_60_frame_bits_127_reg;
reg [31:0] count_frame_bits_60_blk_16;
reg [31:0] count_frame_bits_60_blk_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_60_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_60_scevgep30_reg;
reg [31:0] count_frame_bits_60_61;
reg [31:0] count_frame_bits_60_61_reg;
reg [31:0] count_frame_bits_60_62;
reg [31:0] count_frame_bits_60_62_reg;
reg [31:0] count_frame_bits_60_63;
reg [31:0] count_frame_bits_60_63_reg;
reg [31:0] count_frame_bits_60_64;
reg [31:0] count_frame_bits_60_64_reg;
reg  count_frame_bits_60_exitcond;
reg  count_frame_bits_60_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_65_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_65_66_reg;
reg [31:0] count_frame_bits_65_67;
reg [31:0] count_frame_bits_65_67_reg;
reg  count_frame_bits_65_68;
reg  count_frame_bits_65_68_reg;
reg [31:0] count_frame_bits_65_frame_bits_13;
reg [31:0] count_frame_bits_65_frame_bits_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_65_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_65_69_reg;
reg [31:0] count_frame_bits_65_70;
reg [31:0] count_frame_bits_65_70_reg;
reg  count_frame_bits_65_71;
reg  count_frame_bits_65_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_72_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_72_73_reg;
reg [31:0] count_frame_bits_72_74;
reg [31:0] count_frame_bits_72_74_reg;
reg [31:0] count_frame_bits_72_75;
reg [31:0] count_frame_bits_72_75_reg;
reg  count_frame_bits_72_76;
reg  count_frame_bits_72_76_reg;
reg [31:0] count_frame_bits_72_frame_bits_13_;
reg [31:0] count_frame_bits_72_frame_bits_13__reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_72_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_72_77_reg;
reg [31:0] count_frame_bits_72_78;
reg [31:0] count_frame_bits_72_78_reg;
reg  count_frame_bits_72_79;
reg  count_frame_bits_72_79_reg;
reg [31:0] count_frame_bits_80_81;
reg [31:0] count_frame_bits_80_81_reg;
reg [31:0] count_frame_bits__preheader24_frame_bits_16_ph;
reg [31:0] count_frame_bits__preheader24_frame_bits_16_ph_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__preheader24_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__preheader24_82_reg;
reg [31:0] count_frame_bits__preheader24_83;
reg [31:0] count_frame_bits__preheader24_83_reg;
reg  count_frame_bits__preheader24_84;
reg  count_frame_bits__preheader24_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_86_reg;
reg [31:0] count_frame_bits__lr_ph27_87;
reg [31:0] count_frame_bits__lr_ph27_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_88_reg;
reg [31:0] count_frame_bits__lr_ph27_89;
reg [31:0] count_frame_bits__lr_ph27_89_reg;
reg  count_frame_bits__lr_ph27_90;
reg  count_frame_bits__lr_ph27_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_91_reg;
reg [31:0] count_frame_bits__lr_ph27_92;
reg [31:0] count_frame_bits__lr_ph27_92_reg;
reg  count_frame_bits__lr_ph27_93;
reg  count_frame_bits__lr_ph27_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_96_reg;
reg [31:0] count_frame_bits__lr_ph27_97;
reg [31:0] count_frame_bits__lr_ph27_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph27_98_reg;
reg  count_frame_bits__lr_ph27_tmp54;
reg  count_frame_bits__lr_ph27_tmp54_reg;
reg [31:0] count_frame_bits__lr_ph27_smax55;
reg [31:0] count_frame_bits__lr_ph27_smax55_reg;
reg  count_frame_bits__lr_ph27_99;
reg  count_frame_bits__lr_ph27_99_reg;
reg  count_frame_bits__lr_ph27_tmp48;
reg  count_frame_bits__lr_ph27_tmp48_reg;
reg [31:0] count_frame_bits__lr_ph27_smax49;
reg [31:0] count_frame_bits__lr_ph27_smax49_reg;
reg [31:0] count_frame_bits__lr_ph27_100;
reg [31:0] count_frame_bits__lr_ph27_100_reg;
reg [31:0] count_frame_bits_101_frame_bits_1626;
reg [31:0] count_frame_bits_101_frame_bits_1626_reg;
reg [31:0] count_frame_bits_101_102;
reg [31:0] count_frame_bits_101_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep5960;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep5960_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_101_scevgep66_reg;
reg [31:0] count_frame_bits_101__frame_bits_16;
reg [31:0] count_frame_bits_101__frame_bits_16_reg;
reg [31:0] count_frame_bits_101_103;
reg [31:0] count_frame_bits_101_103_reg;
reg  count_frame_bits_101_104;
reg  count_frame_bits_101_104_reg;
reg [31:0] count_frame_bits___crit_edge69__pre74;
reg [31:0] count_frame_bits___crit_edge69__pre74_reg;
reg [31:0] count_frame_bits_105___frame_bits_16;
reg [31:0] count_frame_bits_105___frame_bits_16_reg;
reg [31:0] count_frame_bits_105_106;
reg [31:0] count_frame_bits_105_106_reg;
reg  count_frame_bits_105_107;
reg  count_frame_bits_105_107_reg;
reg [31:0] count_frame_bits_108___frame_bits_16_;
reg [31:0] count_frame_bits_108___frame_bits_16__reg;
reg [31:0] count_frame_bits_108_109;
reg [31:0] count_frame_bits_108_109_reg;
reg [31:0] count_frame_bits__thread___frame_bits_16__;
reg [31:0] count_frame_bits__thread___frame_bits_16___reg;
reg [31:0] count_frame_bits__thread_frame_bits_2181;
reg [31:0] count_frame_bits__thread_frame_bits_2181_reg;
reg [31:0] count_frame_bits__thread_110;
reg [31:0] count_frame_bits__thread_110_reg;
reg [31:0] count_frame_bits__thread86_frame_bits_2183;
reg [31:0] count_frame_bits__thread86_frame_bits_2183_reg;
reg [31:0] count_frame_bits__thread86_111;
reg [31:0] count_frame_bits__thread86_111_reg;
reg [31:0] count_frame_bits__thread86_112;
reg [31:0] count_frame_bits__thread86_112_reg;
reg [31:0] count_frame_bits__thread86_113;
reg [31:0] count_frame_bits__thread86_113_reg;
reg [31:0] count_frame_bits_114_115;
reg [31:0] count_frame_bits_114_115_reg;
reg [31:0] count_frame_bits_114_frame_bits_22;
reg [31:0] count_frame_bits_114_frame_bits_22_reg;
reg  count_frame_bits_114_116;
reg  count_frame_bits_114_116_reg;
reg [31:0] count_frame_bits__preheader13_frame_bits_2287;
reg [31:0] count_frame_bits__preheader13_frame_bits_2287_reg;
reg [31:0] count_frame_bits__preheader13_117;
reg [31:0] count_frame_bits__preheader13_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph17_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph17_118_reg;
reg [31:0] count_frame_bits_119_indvar37;
reg [31:0] count_frame_bits_119_indvar37_reg;
reg [31:0] count_frame_bits_119_frame_bits_2316;
reg [31:0] count_frame_bits_119_frame_bits_2316_reg;
reg [31:0] count_frame_bits_119_tmp42;
reg [31:0] count_frame_bits_119_tmp42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_119_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_119_scevgep43_reg;
reg [31:0] count_frame_bits_119_120;
reg [31:0] count_frame_bits_119_120_reg;
reg  count_frame_bits_119_121;
reg  count_frame_bits_119_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_122__pre67_pre;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_122__pre67_pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert_reg;
reg [31:0] count_frame_bits_122__pre68_pre;
reg [31:0] count_frame_bits_122__pre68_pre_reg;
reg  count_frame_bits_122_123;
reg  count_frame_bits_122_123_reg;
reg  count_frame_bits_122_or_cond92;
reg  count_frame_bits_122_or_cond92_reg;
reg [31:0] count_frame_bits___crit_edge75_124;
reg [31:0] count_frame_bits___crit_edge75_124_reg;
reg  count_frame_bits___crit_edge75_125;
reg  count_frame_bits___crit_edge75_125_reg;
reg [31:0] count_frame_bits__thread88_frame_bits_2489;
reg [31:0] count_frame_bits__thread88_frame_bits_2489_reg;
reg [31:0] count_frame_bits__thread88_126;
reg [31:0] count_frame_bits__thread88_126_reg;
reg [31:0] count_frame_bits__thread88_127;
reg [31:0] count_frame_bits__thread88_127_reg;
reg [31:0] count_frame_bits__thread88_128;
reg [31:0] count_frame_bits__thread88_128_reg;
reg [31:0] count_frame_bits__thread88_129;
reg [31:0] count_frame_bits__thread88_129_reg;
reg [31:0] count_frame_bits_130_frame_bits_25;
reg [31:0] count_frame_bits_130_frame_bits_25_reg;
reg  count_frame_bits_130_exitcond41;
reg  count_frame_bits_130_exitcond41_reg;
reg  count_frame_bits__loopexit14_131;
reg  count_frame_bits__loopexit14_131_reg;
reg [31:0] count_frame_bits__loopexit14_132;
reg [31:0] count_frame_bits__loopexit14_132_reg;
reg [31:0] count_frame_bits__loopexit14_frame_bits_26;
reg [31:0] count_frame_bits__loopexit14_frame_bits_26_reg;
reg  count_frame_bits_133_134;
reg  count_frame_bits_133_134_reg;
reg  count_frame_bits_133_or_cond;
reg  count_frame_bits_133_or_cond_reg;
reg [31:0] count_frame_bits_133_135;
reg [31:0] count_frame_bits_133_135_reg;
reg [31:0] count_frame_bits_133_frame_bits_27;
reg [31:0] count_frame_bits_133_frame_bits_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_133_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_133_scevgep64_reg;
reg [31:0] count_frame_bits_133_136;
reg [31:0] count_frame_bits_133_136_reg;
reg  count_frame_bits_133_137;
reg  count_frame_bits_133_137_reg;
reg [31:0] count_frame_bits_138_139;
reg [31:0] count_frame_bits_138_139_reg;
reg [31:0] count_frame_bits_138_140;
reg [31:0] count_frame_bits_138_140_reg;
reg [31:0] count_frame_bits__preheader19_frame_bits_29_ph;
reg [31:0] count_frame_bits__preheader19_frame_bits_29_ph_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph22_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits__lr_ph22_141_reg;
reg [31:0] count_frame_bits_142_indvar46;
reg [31:0] count_frame_bits_142_indvar46_reg;
reg [31:0] count_frame_bits_142_frame_bits_2921;
reg [31:0] count_frame_bits_142_frame_bits_2921_reg;
reg [31:0] count_frame_bits_142_tmp51;
reg [31:0] count_frame_bits_142_tmp51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_142_scevgep57_reg;
reg [31:0] count_frame_bits_142_144;
reg [31:0] count_frame_bits_142_144_reg;
reg  count_frame_bits_142_145;
reg  count_frame_bits_142_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_146_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_146_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_146_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_146_scevgep53_reg;
reg [31:0] count_frame_bits_146_148;
reg [31:0] count_frame_bits_146_148_reg;
reg [31:0] count_frame_bits_146_149;
reg [31:0] count_frame_bits_146_149_reg;
reg  count_frame_bits_146_150;
reg  count_frame_bits_146_150_reg;
reg [31:0] count_frame_bits_146__frame_bits_29;
reg [31:0] count_frame_bits_146__frame_bits_29_reg;
reg [31:0] count_frame_bits_146_151;
reg [31:0] count_frame_bits_146_151_reg;
reg [31:0] count_frame_bits_152_frame_bits_31;
reg [31:0] count_frame_bits_152_frame_bits_31_reg;
reg  count_frame_bits_152_exitcond50;
reg  count_frame_bits_152_exitcond50_reg;
reg [31:0] count_frame_bits___crit_edge_frame_bits_29_lcssa;
reg [31:0] count_frame_bits___crit_edge_frame_bits_29_lcssa_reg;
reg [31:0] count_frame_bits_153_154;
reg [31:0] count_frame_bits_153_154_reg;
reg [31:0] count_frame_bits_153_frame_bits_29_;
reg [31:0] count_frame_bits_153_frame_bits_29__reg;
reg [31:0] count_frame_bits_153_155;
reg [31:0] count_frame_bits_153_155_reg;
reg [31:0] count_frame_bits_153_156;
reg [31:0] count_frame_bits_153_156_reg;
reg  count_frame_bits_153_157;
reg  count_frame_bits_153_157_reg;
reg [31:0] count_frame_bits_158_159;
reg [31:0] count_frame_bits_158_159_reg;
reg [31:0] count_frame_bits_158_160;
reg [31:0] count_frame_bits_158_160_reg;
reg [31:0] count_frame_bits_158_161;
reg [31:0] count_frame_bits_158_161_reg;
reg [31:0] count_frame_bits_158_162;
reg [31:0] count_frame_bits_158_162_reg;
reg [31:0] count_frame_bits_158_163;
reg [31:0] count_frame_bits_158_163_reg;
reg [31:0] count_frame_bits_thread_pre_split_frame_bits_33;
reg [31:0] count_frame_bits_thread_pre_split_frame_bits_33_reg;
reg [31:0] count_frame_bits_164__pre_pre;
reg [31:0] count_frame_bits_164__pre_pre_reg;
reg  count_frame_bits_164_165;
reg  count_frame_bits_164_165_reg;
reg  count_frame_bits_164_or_cond93;
reg  count_frame_bits_164_or_cond93_reg;
reg [31:0] count_frame_bits___crit_edge76_166;
reg [31:0] count_frame_bits___crit_edge76_166_reg;
reg  count_frame_bits___crit_edge76_167;
reg  count_frame_bits___crit_edge76_167_reg;
reg [31:0] count_frame_bits__thread90_frame_bits_3491;
reg [31:0] count_frame_bits__thread90_frame_bits_3491_reg;
reg [31:0] count_frame_bits__thread90_168;
reg [31:0] count_frame_bits__thread90_168_reg;
reg [31:0] count_frame_bits_169_frame_bits_35;
reg [31:0] count_frame_bits_169_frame_bits_35_reg;
reg [31:0] count_frame_bits_169_170;
reg [31:0] count_frame_bits_169_170_reg;
reg  count_frame_bits_169_exitcond56;
reg  count_frame_bits_169_exitcond56_reg;
reg [31:0] count_frame_bits___crit_edge28_frame_bits_16_lcssa;
reg [31:0] count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge28_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge28_171_reg;
reg [31:0] count_frame_bits___crit_edge28_172;
reg [31:0] count_frame_bits___crit_edge28_172_reg;
reg [31:0] count_frame_bits___crit_edge28_173;
reg [31:0] count_frame_bits___crit_edge28_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge28_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits___crit_edge28_174_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_count_frame_bits_57_58_en;
reg [31:0] count_frame_bits_57_58_stage0_reg;
reg  lpm_mult_count_frame_bits_158_161_en;
reg [31:0] count_frame_bits_158_161_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_46;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_4;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_5;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_5;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_6;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_4_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_4_6;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_4_7 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_11;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_4_7 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_11;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_11;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_12;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_12;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_13;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge1_13;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge1_25 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge72_17;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge72_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge1_25 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_14;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_14;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_15;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_15;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_16;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_26_16;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_26_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge72_17;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge72_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge72_17;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge72_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge72_34 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge72_34 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_29;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_35_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_35_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_35_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_35_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_35_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_35_20) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_35_39 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_21;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_35_20) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_35_39 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_29;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_21;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_22;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_22;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_23;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph11_23;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_24;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_24;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_25;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_25;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_26;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_26;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_27;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_27;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_42_24;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_42_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_29;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_29;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_30;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_30;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_31;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit8_31;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit8_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit8_47 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit8_47 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_32;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_48_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_32;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_48_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_33;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_48_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_33;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_48_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_34;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_48_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_48_34;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_48_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_48_34) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_48_51 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_35;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_48_34) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_48_51 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_57_41;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_57_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_35;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_36;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_36;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_37;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader_37;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader_54 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_38;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader_54 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_38;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_39;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_39;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_40;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph_40;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_43;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_57_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_57_41;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_57_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_57_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_57_42;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_57_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_57_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_57_42;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_57_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_60_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_43;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_60_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_44;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_60_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_44;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_60_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_45;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_45;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_60_43;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_60_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_65_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_46;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_65_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_47;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_65_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_47;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_65_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_48;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_65_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_65_48;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_65_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_65_48) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_65_71 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_49;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_65_48) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_65_71 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_72_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_49;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_72_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_50;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_72_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_50;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_72_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_51;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_72_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_72_51;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_72_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_72_51) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_72_79 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_72_51) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_72_79 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_80_52;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_80_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_80_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_80_52;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_80_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_80_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_54;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_55;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_55;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_56;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader24_56;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader24_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader24_84 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_57;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader24_84 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_135;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_57;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_58;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_58;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_59;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_59;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_60;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph27_60;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph27_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_61;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_101_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_61;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_101_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_62;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_101_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_62;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_101_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_63;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_101_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_63;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_101_63) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_101_104 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_64;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_101_63) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_101_104 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_67;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_64;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_65;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_65;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_66;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge69_66;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge69_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_114_75;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_114_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_105_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_67;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_105_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_68;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_105_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_68;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_105_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_69;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_105_69;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_105_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_95;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_108_70;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_108_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_108_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_108_70;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_108_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_108_70) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_72;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_108_70) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread_71;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread_71;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_114_75;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_114_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_72;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_73;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_73;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_74;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread86_74;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread86_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader13_76;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader13_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_114_75;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_114_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_95;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader13_76;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader13_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader13_76;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader13_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_95;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_77;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_77;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_78;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_78;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_79;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph17_79;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph17_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_80;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_80;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_81;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_81;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_82;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_82;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_83;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_119_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_83;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_119_83) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_119_121 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_130_93;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_130_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_119_83) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_119_121 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_84;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_84;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_85;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_85;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_86;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_86;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_87;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_87;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_88;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_122_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_122_88;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_122_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_122_88) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_122_or_cond92 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_90;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_122_88) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_122_or_cond92 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge75_89;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge75_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge75_89;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge75_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_130_93;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_130_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_90;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_90;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_91;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_91;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_92;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread88_92;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread88_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_130_93;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_130_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_130_93;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_130_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_119_80;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_119_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_95;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__loopexit14_95;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__loopexit14_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_95) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_90_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_96;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_95) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_90_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader19_102;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_133_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_96;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_133_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_97;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_133_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_97;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_133_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_98;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_133_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_133_98;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_133_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_133_98) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_133_137 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader19_102;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_133_98) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_133_137 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_99;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_99;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_100;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_100;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_101;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_138_101;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_138_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader19_102;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader19_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__preheader19_102;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__preheader19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader19_102) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge_119;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader19_102) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_103;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_103;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_104;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_104;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_105;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__lr_ph22_105;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__lr_ph22_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_107;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_107;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_108;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_108;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_109;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_109;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_110;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_110;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_111;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_142_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_111;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_142_111) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_142_145 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_142_111) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_142_145 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_112;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_112;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_113;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_113;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_114;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_114;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_115;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_115;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_116;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_146_116;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_146_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge_119;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge_119;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_119) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_120;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_119) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_thread_pre_split_127;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_thread_pre_split_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_153_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_120;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_153_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_121;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_153_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_121;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_153_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_122;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_153_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_153_122;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_153_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_153_122) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_153_157 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_thread_pre_split_127;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_thread_pre_split_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_153_122) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_153_157 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_123;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_123;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_124;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_124;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_125;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_125;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_126;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_158_126;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_158_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_thread_pre_split_127;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_thread_pre_split_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_thread_pre_split_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_thread_pre_split_127;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_thread_pre_split_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_thread_pre_split_127) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit14_131_reg == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_169_133;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_169_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_thread_pre_split_127) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit14_131_reg == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_128;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_164_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_128;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_164_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_129;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_164_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_129;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_164_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_130;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_164_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_164_130;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_164_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_164_130) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_164_or_cond93 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread90_132;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread90_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_164_130) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_164_or_cond93 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge76_131;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge76_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge76_131;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge76_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_169_133;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_169_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread90_132;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread90_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread90_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB__thread90_132;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB__thread90_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread90_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_169_133;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_169_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_169_133;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_169_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB_101_61;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB_101_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_135;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_135;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_136;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_136;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_137;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_137;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_138;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_count_frame_bits_BB___crit_edge28_138;
if (reset == 1'b0 && ^(LEGUP_F_count_frame_bits_BB___crit_edge28_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 11*/
begin
count_frame_bits_0_1 = (arg_s + 44);
end
end
always @(posedge clk) begin
/* count_frame_bits: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 11*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_1))
begin
count_frame_bits_0_1_reg <= count_frame_bits_0_1;
if (reset == 1'b0 && ^(count_frame_bits_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_0_1_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
count_frame_bits_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_3))
begin
count_frame_bits_0_2_reg <= count_frame_bits_0_2;
if (reset == 1'b0 && ^(count_frame_bits_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_0_2_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %0*/
/*   %3 = icmp eq i32 %2, 0*/
begin
count_frame_bits_0_3 = (count_frame_bits_0_2 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %0*/
/*   %3 = icmp eq i32 %2, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_3))
begin
count_frame_bits_0_3_reg <= count_frame_bits_0_3;
if (reset == 1'b0 && ^(count_frame_bits_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_0_3_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %4*/
/*   %5 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 4*/
begin
count_frame_bits_4_5 = (arg_s + (68 + 16));
end
end
always @(posedge clk) begin
/* count_frame_bits: %4*/
/*   %5 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 4*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
count_frame_bits_4_5_reg <= count_frame_bits_4_5;
if (reset == 1'b0 && ^(count_frame_bits_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_4_5_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
count_frame_bits_4_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_6))
begin
count_frame_bits_4_6_reg <= count_frame_bits_4_6;
if (reset == 1'b0 && ^(count_frame_bits_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_4_6_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %4*/
/*   %7 = icmp eq i32 %6, 0*/
begin
count_frame_bits_4_7 = (count_frame_bits_4_6 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %4*/
/*   %7 = icmp eq i32 %6, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_6))
begin
count_frame_bits_4_7_reg <= count_frame_bits_4_7;
if (reset == 1'b0 && ^(count_frame_bits_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_4_7_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %4*/
/*   %.phi.trans.insert.phi.trans.insert = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
begin
count_frame_bits_4__phi_trans_insert_phi_trans_insert = arg_s;
end
end
always @(posedge clk) begin
/* count_frame_bits: %4*/
/*   %.phi.trans.insert.phi.trans.insert = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
count_frame_bits_4__phi_trans_insert_phi_trans_insert_reg <= count_frame_bits_4__phi_trans_insert_phi_trans_insert;
if (reset == 1'b0 && ^(count_frame_bits_4__phi_trans_insert_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_4__phi_trans_insert_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
begin
count_frame_bits_4__pre73_pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_6))
begin
count_frame_bits_4__pre73_pre_reg <= count_frame_bits_4__pre73_pre;
if (reset == 1'b0 && ^(count_frame_bits_4__pre73_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_4__pre73_pre_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %9 = icmp sgt i32 %.pre73.pre, 0*/
begin
count_frame_bits_8_9 = ($signed(count_frame_bits_4__pre73_pre_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %9 = icmp sgt i32 %.pre73.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_9_reg <= count_frame_bits_8_9;
if (reset == 1'b0 && ^(count_frame_bits_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_9_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %frame_bits.0 = select i1 %9, i32 2, i32 0*/
begin
count_frame_bits_8_frame_bits_0 = (count_frame_bits_8_9 ? 32'd2 : 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %frame_bits.0 = select i1 %9, i32 2, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_frame_bits_0_reg <= count_frame_bits_8_frame_bits_0;
if (reset == 1'b0 && ^(count_frame_bits_8_frame_bits_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_frame_bits_0_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 16*/
begin
count_frame_bits_8_10 = (arg_s + 64);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 16*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_10_reg <= count_frame_bits_8_10;
if (reset == 1'b0 && ^(count_frame_bits_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_10_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
count_frame_bits_8_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_11_reg <= count_frame_bits_8_11;
if (reset == 1'b0 && ^(count_frame_bits_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_11_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %12 = add nsw i32 %frame_bits.0, 6*/
begin
count_frame_bits_8_12 = (count_frame_bits_8_frame_bits_0 + 32'd6);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %12 = add nsw i32 %frame_bits.0, 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_12_reg <= count_frame_bits_8_12;
if (reset == 1'b0 && ^(count_frame_bits_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_12_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %13 = icmp eq i32 %11, 0*/
begin
count_frame_bits_8_13 = (count_frame_bits_8_11 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %13 = icmp eq i32 %11, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_13_reg <= count_frame_bits_8_13;
if (reset == 1'b0 && ^(count_frame_bits_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_13_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %frame_bits.0. = select i1 %13, i32 %frame_bits.0, i32 %12*/
begin
count_frame_bits_8_frame_bits_0_ = (count_frame_bits_8_13 ? count_frame_bits_8_frame_bits_0_reg : count_frame_bits_8_12_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %frame_bits.0. = select i1 %13, i32 %frame_bits.0, i32 %12*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_frame_bits_0__reg <= count_frame_bits_8_frame_bits_0_;
if (reset == 1'b0 && ^(count_frame_bits_8_frame_bits_0_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_frame_bits_0__reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 15*/
begin
count_frame_bits_8_14 = (arg_s + 60);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 15*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_14_reg <= count_frame_bits_8_14;
if (reset == 1'b0 && ^(count_frame_bits_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_14_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
count_frame_bits_8_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_15_reg <= count_frame_bits_8_15;
if (reset == 1'b0 && ^(count_frame_bits_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_15_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %16 = icmp eq i32 %15, 0*/
begin
count_frame_bits_8_16 = (count_frame_bits_8_15 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %16 = icmp eq i32 %15, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_16_reg <= count_frame_bits_8_16;
if (reset == 1'b0 && ^(count_frame_bits_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_16_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %17 = add nsw i32 %frame_bits.0., 6*/
begin
count_frame_bits_8_17 = (count_frame_bits_8_frame_bits_0_ + 32'd6);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %17 = add nsw i32 %frame_bits.0., 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_9))
begin
count_frame_bits_8_17_reg <= count_frame_bits_8_17;
if (reset == 1'b0 && ^(count_frame_bits_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_17_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %frame_bits.2 = select i1 %16, i32 %frame_bits.0., i32 %17*/
begin
count_frame_bits_8_frame_bits_2 = (count_frame_bits_8_16_reg ? count_frame_bits_8_frame_bits_0__reg : count_frame_bits_8_17_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %frame_bits.2 = select i1 %16, i32 %frame_bits.0., i32 %17*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_10))
begin
count_frame_bits_8_frame_bits_2_reg <= count_frame_bits_8_frame_bits_2;
if (reset == 1'b0 && ^(count_frame_bits_8_frame_bits_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_frame_bits_2_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %18 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 14*/
begin
count_frame_bits_8_18 = (arg_s + 56);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %18 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 14*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_18_reg <= count_frame_bits_8_18;
if (reset == 1'b0 && ^(count_frame_bits_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_18_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
count_frame_bits_8_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_10))
begin
count_frame_bits_8_19_reg <= count_frame_bits_8_19;
if (reset == 1'b0 && ^(count_frame_bits_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_19_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %20 = lshr i32 %.pre73.pre, 31*/
begin
count_frame_bits_8_20 = (count_frame_bits_4__pre73_pre_reg >>> (32'd31 % 32));
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %20 = lshr i32 %.pre73.pre, 31*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_20_reg <= count_frame_bits_8_20;
if (reset == 1'b0 && ^(count_frame_bits_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_20_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %21 = add i32 %20, 5*/
begin
count_frame_bits_8_21 = (count_frame_bits_8_20 + 32'd5);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %21 = add i32 %20, 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
count_frame_bits_8_21_reg <= count_frame_bits_8_21;
if (reset == 1'b0 && ^(count_frame_bits_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_21_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %. = add i32 %21, %19*/
begin
count_frame_bits_8__ = (count_frame_bits_8_21_reg + count_frame_bits_8_19);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %. = add i32 %21, %19*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_10))
begin
count_frame_bits_8___reg <= count_frame_bits_8__;
if (reset == 1'b0 && ^(count_frame_bits_8__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8___reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %8*/
/*   %22 = add i32 %., %frame_bits.2*/
begin
count_frame_bits_8_22 = (count_frame_bits_8__ + count_frame_bits_8_frame_bits_2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %8*/
/*   %22 = add i32 %., %frame_bits.2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_10))
begin
count_frame_bits_8_22_reg <= count_frame_bits_8_22;
if (reset == 1'b0 && ^(count_frame_bits_8_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_8_22_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge1*/
/*   %frame_bits.4 = phi i32 [ %22, %8 ], [ 0, %4 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_4_7 == 1'd1)))
begin
count_frame_bits___crit_edge1_frame_bits_4 = 32'd0;
end
/* count_frame_bits: %._crit_edge1*/
/*   %frame_bits.4 = phi i32 [ %22, %8 ], [ 0, %4 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB_8_10) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits___crit_edge1_frame_bits_4 = count_frame_bits_8_22;
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge1*/
/*   %frame_bits.4 = phi i32 [ %22, %8 ], [ 0, %4 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_4_6) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_4_7 == 1'd1)))
begin
count_frame_bits___crit_edge1_frame_bits_4_reg <= count_frame_bits___crit_edge1_frame_bits_4;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge1_frame_bits_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge1_frame_bits_4_reg"); $finish; end
end
/* count_frame_bits: %._crit_edge1*/
/*   %frame_bits.4 = phi i32 [ %22, %8 ], [ 0, %4 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits___crit_edge1_frame_bits_4_reg <= count_frame_bits___crit_edge1_frame_bits_4;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge1_frame_bits_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge1_frame_bits_4_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge1*/
/*   %23 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 3*/
begin
count_frame_bits___crit_edge1_23 = (arg_s + (68 + 12));
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge1*/
/*   %23 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11))
begin
count_frame_bits___crit_edge1_23_reg <= count_frame_bits___crit_edge1_23;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge1_23_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
begin
count_frame_bits___crit_edge1_24 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13))
begin
count_frame_bits___crit_edge1_24_reg <= count_frame_bits___crit_edge1_24;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge1_24_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge1*/
/*   %25 = icmp eq i32 %24, 0*/
begin
count_frame_bits___crit_edge1_25 = (count_frame_bits___crit_edge1_24 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge1*/
/*   %25 = icmp eq i32 %24, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13))
begin
count_frame_bits___crit_edge1_25_reg <= count_frame_bits___crit_edge1_25;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge1_25_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %27 = icmp eq i32 %.pre73.pre, 0*/
begin
count_frame_bits_26_27 = (count_frame_bits_4__pre73_pre_reg == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %27 = icmp eq i32 %.pre73.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
count_frame_bits_26_27_reg <= count_frame_bits_26_27;
if (reset == 1'b0 && ^(count_frame_bits_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_27_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %.2.v = select i1 %27, i32 9, i32 5*/
begin
count_frame_bits_26__2_v = (count_frame_bits_26_27 ? 32'd9 : 32'd5);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %.2.v = select i1 %27, i32 9, i32 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
count_frame_bits_26__2_v_reg <= count_frame_bits_26__2_v;
if (reset == 1'b0 && ^(count_frame_bits_26__2_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26__2_v_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %.2 = add i32 %.2.v, %frame_bits.4*/
begin
count_frame_bits_26__2 = (count_frame_bits_26__2_v + count_frame_bits___crit_edge1_frame_bits_4_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %.2 = add i32 %.2.v, %frame_bits.4*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
count_frame_bits_26__2_reg <= count_frame_bits_26__2;
if (reset == 1'b0 && ^(count_frame_bits_26__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26__2_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %28 = icmp slt i32 %.pre73.pre, 0*/
begin
count_frame_bits_26_28 = ($signed(count_frame_bits_4__pre73_pre_reg) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %28 = icmp slt i32 %.pre73.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
count_frame_bits_26_28_reg <= count_frame_bits_26_28;
if (reset == 1'b0 && ^(count_frame_bits_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_28_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %29 = add nsw i32 %.2, 2*/
begin
count_frame_bits_26_29 = (count_frame_bits_26__2_reg + 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %29 = add nsw i32 %.2, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_15))
begin
count_frame_bits_26_29_reg <= count_frame_bits_26_29;
if (reset == 1'b0 && ^(count_frame_bits_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_29_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %frame_bits.6 = select i1 %28, i32 %.2, i32 %29*/
begin
count_frame_bits_26_frame_bits_6 = (count_frame_bits_26_28_reg ? count_frame_bits_26__2_reg : count_frame_bits_26_29);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %frame_bits.6 = select i1 %28, i32 %.2, i32 %29*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_15))
begin
count_frame_bits_26_frame_bits_6_reg <= count_frame_bits_26_frame_bits_6;
if (reset == 1'b0 && ^(count_frame_bits_26_frame_bits_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_frame_bits_6_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %30 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 2*/
begin
count_frame_bits_26_30 = (arg_s + (68 + 8));
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %30 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
count_frame_bits_26_30_reg <= count_frame_bits_26_30;
if (reset == 1'b0 && ^(count_frame_bits_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_30_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
begin
count_frame_bits_26_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_16))
begin
count_frame_bits_26_31_reg <= count_frame_bits_26_31;
if (reset == 1'b0 && ^(count_frame_bits_26_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_31_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %32 = icmp eq i32 %31, 0*/
begin
count_frame_bits_26_32 = (count_frame_bits_26_31 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %32 = icmp eq i32 %31, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_16))
begin
count_frame_bits_26_32_reg <= count_frame_bits_26_32;
if (reset == 1'b0 && ^(count_frame_bits_26_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_32_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %.3 = select i1 %32, i32 2, i32 10*/
begin
count_frame_bits_26__3 = (count_frame_bits_26_32 ? 32'd2 : 32'd10);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %.3 = select i1 %32, i32 2, i32 10*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_16))
begin
count_frame_bits_26__3_reg <= count_frame_bits_26__3;
if (reset == 1'b0 && ^(count_frame_bits_26__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26__3_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %26*/
/*   %33 = add i32 %.3, %frame_bits.6*/
begin
count_frame_bits_26_33 = (count_frame_bits_26__3 + count_frame_bits_26_frame_bits_6_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %26*/
/*   %33 = add i32 %.3, %frame_bits.6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_16))
begin
count_frame_bits_26_33_reg <= count_frame_bits_26_33;
if (reset == 1'b0 && ^(count_frame_bits_26_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_26_33_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge72*/
/*   %frame_bits.8 = phi i32 [ %33, %26 ], [ %frame_bits.4, %._crit_edge1 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge1_25 == 1'd1)))
begin
count_frame_bits___crit_edge72_frame_bits_8 = count_frame_bits___crit_edge1_frame_bits_4_reg;
end
/* count_frame_bits: %._crit_edge72*/
/*   %frame_bits.8 = phi i32 [ %33, %26 ], [ %frame_bits.4, %._crit_edge1 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB_26_16) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits___crit_edge72_frame_bits_8 = count_frame_bits_26_33;
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge72*/
/*   %frame_bits.8 = phi i32 [ %33, %26 ], [ %frame_bits.4, %._crit_edge1 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_13) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge1_25 == 1'd1)))
begin
count_frame_bits___crit_edge72_frame_bits_8_reg <= count_frame_bits___crit_edge72_frame_bits_8;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge72_frame_bits_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge72_frame_bits_8_reg"); $finish; end
end
/* count_frame_bits: %._crit_edge72*/
/*   %frame_bits.8 = phi i32 [ %33, %26 ], [ %frame_bits.4, %._crit_edge1 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_26_16) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits___crit_edge72_frame_bits_8_reg <= count_frame_bits___crit_edge72_frame_bits_8;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge72_frame_bits_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge72_frame_bits_8_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge72*/
/*   %34 = icmp sgt i32 %.pre73.pre, 0*/
begin
count_frame_bits___crit_edge72_34 = ($signed(count_frame_bits_4__pre73_pre_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge72*/
/*   %34 = icmp sgt i32 %.pre73.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17))
begin
count_frame_bits___crit_edge72_34_reg <= count_frame_bits___crit_edge72_34;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge72_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge72_34_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %35*/
/*   %36 = add nsw i32 %frame_bits.8, 1*/
begin
count_frame_bits_35_36 = (count_frame_bits___crit_edge72_frame_bits_8_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %35*/
/*   %36 = add nsw i32 %frame_bits.8, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
count_frame_bits_35_36_reg <= count_frame_bits_35_36;
if (reset == 1'b0 && ^(count_frame_bits_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_35_36_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %35*/
/*   %37 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
count_frame_bits_35_37 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* count_frame_bits: %35*/
/*   %37 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
count_frame_bits_35_37_reg <= count_frame_bits_35_37;
if (reset == 1'b0 && ^(count_frame_bits_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_35_37_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
begin
count_frame_bits_35_38 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_20))
begin
count_frame_bits_35_38_reg <= count_frame_bits_35_38;
if (reset == 1'b0 && ^(count_frame_bits_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_35_38_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %35*/
/*   %39 = icmp sgt i32 %38, 1*/
begin
count_frame_bits_35_39 = ($signed(count_frame_bits_35_38) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* count_frame_bits: %35*/
/*   %39 = icmp sgt i32 %38, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_20))
begin
count_frame_bits_35_39_reg <= count_frame_bits_35_39;
if (reset == 1'b0 && ^(count_frame_bits_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_35_39_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph11*/
/*   %40 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
begin
count_frame_bits__lr_ph11_40 = (arg_s + 48);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph11*/
/*   %40 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
count_frame_bits__lr_ph11_40_reg <= count_frame_bits__lr_ph11_40;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph11_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph11_40_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
begin
count_frame_bits__lr_ph11_41 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23))
begin
count_frame_bits__lr_ph11_41_reg <= count_frame_bits__lr_ph11_41;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph11_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph11_41_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph11*/
/*   %tmp31 = icmp sgt i32 %38, 2*/
begin
count_frame_bits__lr_ph11_tmp31 = ($signed(count_frame_bits_35_38_reg) > $signed(32'd2));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph11*/
/*   %tmp31 = icmp sgt i32 %38, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
count_frame_bits__lr_ph11_tmp31_reg <= count_frame_bits__lr_ph11_tmp31;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph11_tmp31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph11_tmp31_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph11*/
/*   %.op = add i32 %38, -1*/
begin
count_frame_bits__lr_ph11__op = (count_frame_bits_35_38_reg + -32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph11*/
/*   %.op = add i32 %38, -1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
count_frame_bits__lr_ph11__op_reg <= count_frame_bits__lr_ph11__op;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph11__op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph11__op_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph11*/
/*   %tmp33 = select i1 %tmp31, i32 %.op, i32 1*/
begin
count_frame_bits__lr_ph11_tmp33 = (count_frame_bits__lr_ph11_tmp31 ? count_frame_bits__lr_ph11__op : 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph11*/
/*   %tmp33 = select i1 %tmp31, i32 %.op, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
count_frame_bits__lr_ph11_tmp33_reg <= count_frame_bits__lr_ph11_tmp33;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph11_tmp33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph11_tmp33_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %tmp35, %42 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_42_indvar = 32'd0;
end
/* count_frame_bits: %42*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %tmp35, %42 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd0))) */
begin
count_frame_bits_42_indvar = count_frame_bits_42_tmp35_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %tmp35, %42 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_42_indvar_reg <= count_frame_bits_42_indvar;
if (reset == 1'b0 && ^(count_frame_bits_42_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_indvar_reg"); $finish; end
end
/* count_frame_bits: %42*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %tmp35, %42 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd0)))
begin
count_frame_bits_42_indvar_reg <= count_frame_bits_42_indvar;
if (reset == 1'b0 && ^(count_frame_bits_42_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_indvar_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %frame_bits.910 = phi i32 [ %36, %.lr.ph11 ], [ %.4, %42 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_42_frame_bits_910 = count_frame_bits_35_36_reg;
end
/* count_frame_bits: %42*/
/*   %frame_bits.910 = phi i32 [ %36, %.lr.ph11 ], [ %.4, %42 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd0))) */
begin
count_frame_bits_42_frame_bits_910 = count_frame_bits_42__4;
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %frame_bits.910 = phi i32 [ %36, %.lr.ph11 ], [ %.4, %42 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_42_frame_bits_910_reg <= count_frame_bits_42_frame_bits_910;
if (reset == 1'b0 && ^(count_frame_bits_42_frame_bits_910) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_frame_bits_910_reg"); $finish; end
end
/* count_frame_bits: %42*/
/*   %frame_bits.910 = phi i32 [ %36, %.lr.ph11 ], [ %.4, %42 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_42_27) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_42_exitcond34_reg == 1'd0)))
begin
count_frame_bits_42_frame_bits_910_reg <= count_frame_bits_42_frame_bits_910;
if (reset == 1'b0 && ^(count_frame_bits_42_frame_bits_910) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_frame_bits_910_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %tmp35 = add i32 %indvar, 1*/
begin
count_frame_bits_42_tmp35 = (count_frame_bits_42_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %tmp35 = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_24))
begin
count_frame_bits_42_tmp35_reg <= count_frame_bits_42_tmp35;
if (reset == 1'b0 && ^(count_frame_bits_42_tmp35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_tmp35_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %scevgep36 = getelementptr %struct.TYPE_7__* %41, i32 %tmp35, i32 7*/
begin
count_frame_bits_42_scevgep36 = (count_frame_bits__lr_ph11_41_reg + ((32 * count_frame_bits_42_tmp35_reg) + 28));
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %scevgep36 = getelementptr %struct.TYPE_7__* %41, i32 %tmp35, i32 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_25))
begin
count_frame_bits_42_scevgep36_reg <= count_frame_bits_42_scevgep36;
if (reset == 1'b0 && ^(count_frame_bits_42_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_scevgep36_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
begin
count_frame_bits_42_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_27))
begin
count_frame_bits_42_43_reg <= count_frame_bits_42_43;
if (reset == 1'b0 && ^(count_frame_bits_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_43_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %44 = icmp eq i32 %43, 0*/
begin
count_frame_bits_42_44 = (count_frame_bits_42_43 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %44 = icmp eq i32 %43, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_27))
begin
count_frame_bits_42_44_reg <= count_frame_bits_42_44;
if (reset == 1'b0 && ^(count_frame_bits_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_44_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %.4.v = select i1 %44, i32 1, i32 2*/
begin
count_frame_bits_42__4_v = (count_frame_bits_42_44 ? 32'd1 : 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %.4.v = select i1 %44, i32 1, i32 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_27))
begin
count_frame_bits_42__4_v_reg <= count_frame_bits_42__4_v;
if (reset == 1'b0 && ^(count_frame_bits_42__4_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42__4_v_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %.4 = add i32 %.4.v, %frame_bits.910*/
begin
count_frame_bits_42__4 = (count_frame_bits_42__4_v + count_frame_bits_42_frame_bits_910_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %.4 = add i32 %.4.v, %frame_bits.910*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_27))
begin
count_frame_bits_42__4_reg <= count_frame_bits_42__4;
if (reset == 1'b0 && ^(count_frame_bits_42__4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42__4_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %42*/
/*   %exitcond34 = icmp eq i32 %tmp35, %tmp33*/
begin
count_frame_bits_42_exitcond34 = (count_frame_bits_42_tmp35 == count_frame_bits__lr_ph11_tmp33_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %42*/
/*   %exitcond34 = icmp eq i32 %tmp35, %tmp33*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_24))
begin
count_frame_bits_42_exitcond34_reg <= count_frame_bits_42_exitcond34;
if (reset == 1'b0 && ^(count_frame_bits_42_exitcond34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_42_exitcond34_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge72_34 == 1'd0)))
begin
count_frame_bits__loopexit8_frame_bits_11 = count_frame_bits___crit_edge72_frame_bits_8_reg;
end
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_35_20) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_35_39 == 1'd0)))
begin
count_frame_bits__loopexit8_frame_bits_11 = count_frame_bits_35_36_reg;
end
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__loopexit8_frame_bits_11 = count_frame_bits_42__4_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge72_17) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge72_34 == 1'd0)))
begin
count_frame_bits__loopexit8_frame_bits_11_reg <= count_frame_bits__loopexit8_frame_bits_11;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_frame_bits_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_frame_bits_11_reg"); $finish; end
end
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_35_20) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_35_39 == 1'd0)))
begin
count_frame_bits__loopexit8_frame_bits_11_reg <= count_frame_bits__loopexit8_frame_bits_11;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_frame_bits_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_frame_bits_11_reg"); $finish; end
end
/* count_frame_bits: %.loopexit8*/
/*   %frame_bits.11 = phi i32 [ %frame_bits.8, %._crit_edge72 ], [ %36, %35 ], [ %.4, %.loopexit8.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_loopexit_28) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__loopexit8_frame_bits_11_reg <= count_frame_bits__loopexit8_frame_bits_11;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_frame_bits_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_frame_bits_11_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit8*/
/*   %45 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
begin
count_frame_bits__loopexit8_45 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit8*/
/*   %45 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29))
begin
count_frame_bits__loopexit8_45_reg <= count_frame_bits__loopexit8_45;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_45_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
begin
count_frame_bits__loopexit8_46 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31))
begin
count_frame_bits__loopexit8_46_reg <= count_frame_bits__loopexit8_46;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_46_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit8*/
/*   %47 = icmp eq i32 %46, 0*/
begin
count_frame_bits__loopexit8_47 = (count_frame_bits__loopexit8_46 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit8*/
/*   %47 = icmp eq i32 %46, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31))
begin
count_frame_bits__loopexit8_47_reg <= count_frame_bits__loopexit8_47;
if (reset == 1'b0 && ^(count_frame_bits__loopexit8_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit8_47_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %48*/
/*   %49 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 13*/
begin
count_frame_bits_48_49 = (arg_s + 52);
end
end
always @(posedge clk) begin
/* count_frame_bits: %48*/
/*   %49 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 13*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_32))
begin
count_frame_bits_48_49_reg <= count_frame_bits_48_49;
if (reset == 1'b0 && ^(count_frame_bits_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_48_49_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
begin
count_frame_bits_48_50 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_34))
begin
count_frame_bits_48_50_reg <= count_frame_bits_48_50;
if (reset == 1'b0 && ^(count_frame_bits_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_48_50_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %48*/
/*   %51 = icmp eq i32 %50, 0*/
begin
count_frame_bits_48_51 = (count_frame_bits_48_50 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %48*/
/*   %51 = icmp eq i32 %50, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_34))
begin
count_frame_bits_48_51_reg <= count_frame_bits_48_51;
if (reset == 1'b0 && ^(count_frame_bits_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_48_51_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader*/
/*   %52 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
count_frame_bits__preheader_52 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader*/
/*   %52 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35))
begin
count_frame_bits__preheader_52_reg <= count_frame_bits__preheader_52;
if (reset == 1'b0 && ^(count_frame_bits__preheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader_52_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
begin
count_frame_bits__preheader_53 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37))
begin
count_frame_bits__preheader_53_reg <= count_frame_bits__preheader_53;
if (reset == 1'b0 && ^(count_frame_bits__preheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader_53_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader*/
/*   %54 = icmp sgt i32 %53, 0*/
begin
count_frame_bits__preheader_54 = ($signed(count_frame_bits__preheader_53) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader*/
/*   %54 = icmp sgt i32 %53, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37))
begin
count_frame_bits__preheader_54_reg <= count_frame_bits__preheader_54;
if (reset == 1'b0 && ^(count_frame_bits__preheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader_54_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph*/
/*   %55 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
begin
count_frame_bits__lr_ph_55 = (arg_s + 48);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph*/
/*   %55 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
count_frame_bits__lr_ph_55_reg <= count_frame_bits__lr_ph_55;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph_55_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
begin
count_frame_bits__lr_ph_56 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40))
begin
count_frame_bits__lr_ph_56_reg <= count_frame_bits__lr_ph_56;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph_56_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph*/
/*   %tmp = icmp sgt i32 %53, 1*/
begin
count_frame_bits__lr_ph_tmp = ($signed(count_frame_bits__preheader_53_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph*/
/*   %tmp = icmp sgt i32 %53, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
count_frame_bits__lr_ph_tmp_reg <= count_frame_bits__lr_ph_tmp;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph*/
/*   %smax = select i1 %tmp, i32 %53, i32 1*/
begin
count_frame_bits__lr_ph_smax = (count_frame_bits__lr_ph_tmp ? count_frame_bits__preheader_53_reg : 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph*/
/*   %smax = select i1 %tmp, i32 %53, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
count_frame_bits__lr_ph_smax_reg <= count_frame_bits__lr_ph_smax;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph_smax_reg"); $finish; end
end
end
always @(*) begin
count_frame_bits_57_58 = count_frame_bits_57_58_stage0_reg;
end
always @(posedge clk) begin
/* count_frame_bits: %57*/
/*   %58 = mul nsw i32 %46, 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_57_42))
begin
count_frame_bits_57_58_reg <= count_frame_bits_57_58;
if (reset == 1'b0 && ^(count_frame_bits_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_57_58_reg"); $finish; end
end
/* count_frame_bits: %57*/
/*   %58 = mul nsw i32 %46, 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_57_42))
begin
count_frame_bits_57_58_reg <= count_frame_bits_57_58;
if (reset == 1'b0 && ^(count_frame_bits_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_57_58_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %57*/
/*   %59 = add nsw i32 %58, %frame_bits.11*/
begin
count_frame_bits_57_59 = (count_frame_bits_57_58 + count_frame_bits__loopexit8_frame_bits_11_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %57*/
/*   %59 = add nsw i32 %58, %frame_bits.11*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_57_42))
begin
count_frame_bits_57_59_reg <= count_frame_bits_57_59;
if (reset == 1'b0 && ^(count_frame_bits_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_57_59_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %frame_bits.127 = phi i32 [ %frame_bits.11, %.lr.ph ], [ %63, %60 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_60_frame_bits_127 = count_frame_bits__loopexit8_frame_bits_11_reg;
end
/* count_frame_bits: %60*/
/*   %frame_bits.127 = phi i32 [ %frame_bits.11, %.lr.ph ], [ %63, %60 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd0))) */
begin
count_frame_bits_60_frame_bits_127 = count_frame_bits_60_63;
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %frame_bits.127 = phi i32 [ %frame_bits.11, %.lr.ph ], [ %63, %60 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_60_frame_bits_127_reg <= count_frame_bits_60_frame_bits_127;
if (reset == 1'b0 && ^(count_frame_bits_60_frame_bits_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_frame_bits_127_reg"); $finish; end
end
/* count_frame_bits: %60*/
/*   %frame_bits.127 = phi i32 [ %frame_bits.11, %.lr.ph ], [ %63, %60 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd0)))
begin
count_frame_bits_60_frame_bits_127_reg <= count_frame_bits_60_frame_bits_127;
if (reset == 1'b0 && ^(count_frame_bits_60_frame_bits_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_frame_bits_127_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %blk.16 = phi i32 [ 0, %.lr.ph ], [ %64, %60 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_60_blk_16 = 32'd0;
end
/* count_frame_bits: %60*/
/*   %blk.16 = phi i32 [ 0, %.lr.ph ], [ %64, %60 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd0))) */
begin
count_frame_bits_60_blk_16 = count_frame_bits_60_64_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %blk.16 = phi i32 [ 0, %.lr.ph ], [ %64, %60 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_40) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_60_blk_16_reg <= count_frame_bits_60_blk_16;
if (reset == 1'b0 && ^(count_frame_bits_60_blk_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_blk_16_reg"); $finish; end
end
/* count_frame_bits: %60*/
/*   %blk.16 = phi i32 [ 0, %.lr.ph ], [ %64, %60 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_60_45) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_60_exitcond_reg == 1'd0)))
begin
count_frame_bits_60_blk_16_reg <= count_frame_bits_60_blk_16;
if (reset == 1'b0 && ^(count_frame_bits_60_blk_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_blk_16_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %scevgep30 = getelementptr inbounds %struct.TYPE_7__* %56, i32 %blk.16, i32 0*/
begin
count_frame_bits_60_scevgep30 = (count_frame_bits__lr_ph_56_reg + (32 * count_frame_bits_60_blk_16_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %scevgep30 = getelementptr inbounds %struct.TYPE_7__* %56, i32 %blk.16, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
count_frame_bits_60_scevgep30_reg <= count_frame_bits_60_scevgep30;
if (reset == 1'b0 && ^(count_frame_bits_60_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_scevgep30_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
begin
count_frame_bits_60_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_45))
begin
count_frame_bits_60_61_reg <= count_frame_bits_60_61;
if (reset == 1'b0 && ^(count_frame_bits_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_61_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %62 = shl i32 %61, 1*/
begin
count_frame_bits_60_62 = (count_frame_bits_60_61 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %62 = shl i32 %61, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_45))
begin
count_frame_bits_60_62_reg <= count_frame_bits_60_62;
if (reset == 1'b0 && ^(count_frame_bits_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_62_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %63 = add nsw i32 %62, %frame_bits.127*/
begin
count_frame_bits_60_63 = (count_frame_bits_60_62 + count_frame_bits_60_frame_bits_127_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %63 = add nsw i32 %62, %frame_bits.127*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_45))
begin
count_frame_bits_60_63_reg <= count_frame_bits_60_63;
if (reset == 1'b0 && ^(count_frame_bits_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_63_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %64 = add nsw i32 %blk.16, 1*/
begin
count_frame_bits_60_64 = (count_frame_bits_60_blk_16_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %64 = add nsw i32 %blk.16, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
count_frame_bits_60_64_reg <= count_frame_bits_60_64;
if (reset == 1'b0 && ^(count_frame_bits_60_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_64_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %60*/
/*   %exitcond = icmp eq i32 %64, %smax*/
begin
count_frame_bits_60_exitcond = (count_frame_bits_60_64 == count_frame_bits__lr_ph_smax_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %60*/
/*   %exitcond = icmp eq i32 %64, %smax*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
count_frame_bits_60_exitcond_reg <= count_frame_bits_60_exitcond;
if (reset == 1'b0 && ^(count_frame_bits_60_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_60_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %66 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 2*/
begin
count_frame_bits_65_66 = (arg_s + (68 + 8));
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %66 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
count_frame_bits_65_66_reg <= count_frame_bits_65_66;
if (reset == 1'b0 && ^(count_frame_bits_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_66_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
begin
count_frame_bits_65_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_48))
begin
count_frame_bits_65_67_reg <= count_frame_bits_65_67;
if (reset == 1'b0 && ^(count_frame_bits_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_67_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %68 = icmp eq i32 %67, 0*/
begin
count_frame_bits_65_68 = (count_frame_bits_65_67 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %68 = icmp eq i32 %67, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_48))
begin
count_frame_bits_65_68_reg <= count_frame_bits_65_68;
if (reset == 1'b0 && ^(count_frame_bits_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_68_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %frame_bits.13 = select i1 %68, i32 0, i32 7*/
begin
count_frame_bits_65_frame_bits_13 = (count_frame_bits_65_68 ? 32'd0 : 32'd7);
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %frame_bits.13 = select i1 %68, i32 0, i32 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_48))
begin
count_frame_bits_65_frame_bits_13_reg <= count_frame_bits_65_frame_bits_13;
if (reset == 1'b0 && ^(count_frame_bits_65_frame_bits_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_frame_bits_13_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %69 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
begin
count_frame_bits_65_69 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %69 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
count_frame_bits_65_69_reg <= count_frame_bits_65_69;
if (reset == 1'b0 && ^(count_frame_bits_65_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_69_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
begin
count_frame_bits_65_70 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_48))
begin
count_frame_bits_65_70_reg <= count_frame_bits_65_70;
if (reset == 1'b0 && ^(count_frame_bits_65_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_70_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %65*/
/*   %71 = icmp eq i32 %70, 6*/
begin
count_frame_bits_65_71 = (count_frame_bits_65_70 == 32'd6);
end
end
always @(posedge clk) begin
/* count_frame_bits: %65*/
/*   %71 = icmp eq i32 %70, 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_48))
begin
count_frame_bits_65_71_reg <= count_frame_bits_65_71;
if (reset == 1'b0 && ^(count_frame_bits_65_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_65_71_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %73 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 1*/
begin
count_frame_bits_72_73 = (arg_s + (68 + 4));
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %73 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
count_frame_bits_72_73_reg <= count_frame_bits_72_73;
if (reset == 1'b0 && ^(count_frame_bits_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_73_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
begin
count_frame_bits_72_74 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_51))
begin
count_frame_bits_72_74_reg <= count_frame_bits_72_74;
if (reset == 1'b0 && ^(count_frame_bits_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_74_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %75 = add nsw i32 %frame_bits.13, 14*/
begin
count_frame_bits_72_75 = (count_frame_bits_65_frame_bits_13_reg + 32'd14);
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %75 = add nsw i32 %frame_bits.13, 14*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
count_frame_bits_72_75_reg <= count_frame_bits_72_75;
if (reset == 1'b0 && ^(count_frame_bits_72_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_75_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %76 = icmp eq i32 %74, 0*/
begin
count_frame_bits_72_76 = (count_frame_bits_72_74 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %76 = icmp eq i32 %74, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_51))
begin
count_frame_bits_72_76_reg <= count_frame_bits_72_76;
if (reset == 1'b0 && ^(count_frame_bits_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_76_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %frame_bits.13. = select i1 %76, i32 %frame_bits.13, i32 %75*/
begin
count_frame_bits_72_frame_bits_13_ = (count_frame_bits_72_76 ? count_frame_bits_65_frame_bits_13_reg : count_frame_bits_72_75_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %frame_bits.13. = select i1 %76, i32 %frame_bits.13, i32 %75*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_51))
begin
count_frame_bits_72_frame_bits_13__reg <= count_frame_bits_72_frame_bits_13_;
if (reset == 1'b0 && ^(count_frame_bits_72_frame_bits_13_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_frame_bits_13__reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %77 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 0*/
begin
count_frame_bits_72_77 = (arg_s + 68);
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %77 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 17, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
count_frame_bits_72_77_reg <= count_frame_bits_72_77;
if (reset == 1'b0 && ^(count_frame_bits_72_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_77_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
begin
count_frame_bits_72_78 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_51))
begin
count_frame_bits_72_78_reg <= count_frame_bits_72_78;
if (reset == 1'b0 && ^(count_frame_bits_72_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_78_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %72*/
/*   %79 = icmp eq i32 %78, 0*/
begin
count_frame_bits_72_79 = (count_frame_bits_72_78 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %72*/
/*   %79 = icmp eq i32 %78, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_51))
begin
count_frame_bits_72_79_reg <= count_frame_bits_72_79;
if (reset == 1'b0 && ^(count_frame_bits_72_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_72_79_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %80*/
/*   %81 = add nsw i32 %frame_bits.13., 14*/
begin
count_frame_bits_80_81 = (count_frame_bits_72_frame_bits_13__reg + 32'd14);
end
end
always @(posedge clk) begin
/* count_frame_bits: %80*/
/*   %81 = add nsw i32 %frame_bits.13., 14*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_80_52))
begin
count_frame_bits_80_81_reg <= count_frame_bits_80_81;
if (reset == 1'b0 && ^(count_frame_bits_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_80_81_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit8_47 == 1'd1)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits__loopexit8_frame_bits_11_reg;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader_54 == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits__loopexit8_frame_bits_11_reg;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else if (((cur_state == LEGUP_F_count_frame_bits_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits_57_59;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_65_48) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_65_71 == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits_65_frame_bits_13;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_72_51) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_72_79 == 1'd1)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits_72_frame_bits_13_;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else if (((cur_state == LEGUP_F_count_frame_bits_BB_80_52) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits_80_81;
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__preheader24_frame_bits_16_ph = count_frame_bits_60_63_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_31) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit8_47 == 1'd1)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader_37) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader_54 == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_65_48) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_65_71 == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_72_51) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_72_79 == 1'd1)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_80_52) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader24*/
/*   %frame_bits.16.ph = phi i32 [ %59, %57 ], [ %81, %80 ], [ %frame_bits.11, %.preheader ], [ %frame_bits.11, %.loopexit8 ], [ %frame_bits.13, %65 ], [ %frame_bits.13., %72 ], [ %63, %.preheader24.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_loopexit_53) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader24_frame_bits_16_ph_reg <= count_frame_bits__preheader24_frame_bits_16_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_frame_bits_16_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_frame_bits_16_ph_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader24*/
/*   %82 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
count_frame_bits__preheader24_82 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader24*/
/*   %82 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54))
begin
count_frame_bits__preheader24_82_reg <= count_frame_bits__preheader24_82;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_82_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
begin
count_frame_bits__preheader24_83 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56))
begin
count_frame_bits__preheader24_83_reg <= count_frame_bits__preheader24_83;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_83_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader24*/
/*   %84 = icmp sgt i32 %83, 0*/
begin
count_frame_bits__preheader24_84 = ($signed(count_frame_bits__preheader24_83) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader24*/
/*   %84 = icmp sgt i32 %83, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56))
begin
count_frame_bits__preheader24_84_reg <= count_frame_bits__preheader24_84;
if (reset == 1'b0 && ^(count_frame_bits__preheader24_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader24_84_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %85 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
begin
count_frame_bits__lr_ph27_85 = (arg_s + 48);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %85 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 12*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_85_reg <= count_frame_bits__lr_ph27_85;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_85_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
begin
count_frame_bits__lr_ph27_86 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59))
begin
count_frame_bits__lr_ph27_86_reg <= count_frame_bits__lr_ph27_86;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_86_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %87 = zext i1 %3 to i32*/
begin
count_frame_bits__lr_ph27_87 = count_frame_bits_0_3_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %87 = zext i1 %3 to i32*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_87_reg <= count_frame_bits__lr_ph27_87;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_87_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %88 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
begin
count_frame_bits__lr_ph27_88 = arg_s;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %88 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_88_reg <= count_frame_bits__lr_ph27_88;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_88_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
begin
count_frame_bits__lr_ph27_89 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59))
begin
count_frame_bits__lr_ph27_89_reg <= count_frame_bits__lr_ph27_89;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_89_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %90 = icmp eq i32 %89, 0*/
begin
count_frame_bits__lr_ph27_90 = (count_frame_bits__lr_ph27_89 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %90 = icmp eq i32 %89, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59))
begin
count_frame_bits__lr_ph27_90_reg <= count_frame_bits__lr_ph27_90;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_90_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %91 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
begin
count_frame_bits__lr_ph27_91 = (arg_s + 16);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %91 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_91_reg <= count_frame_bits__lr_ph27_91;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_91_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
begin
count_frame_bits__lr_ph27_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60))
begin
count_frame_bits__lr_ph27_92_reg <= count_frame_bits__lr_ph27_92;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_92_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %93 = icmp slt i32 %92, 1*/
begin
count_frame_bits__lr_ph27_93 = ($signed(count_frame_bits__lr_ph27_92) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %93 = icmp slt i32 %92, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60))
begin
count_frame_bits__lr_ph27_93_reg <= count_frame_bits__lr_ph27_93;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_93_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %94 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 8*/
begin
count_frame_bits__lr_ph27_94 = (arg_s + 32);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %94 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 8*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_94_reg <= count_frame_bits__lr_ph27_94;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_94_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %95 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 7*/
begin
count_frame_bits__lr_ph27_95 = (arg_s + 28);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %95 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_95_reg <= count_frame_bits__lr_ph27_95;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_95_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %96 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 6*/
begin
count_frame_bits__lr_ph27_96 = (arg_s + 24);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %96 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_96_reg <= count_frame_bits__lr_ph27_96;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_96_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %97 = xor i32 %87, 1*/
begin
count_frame_bits__lr_ph27_97 = (count_frame_bits__lr_ph27_87 ^ 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %97 = xor i32 %87, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_97_reg <= count_frame_bits__lr_ph27_97;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_97_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %98 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 5*/
begin
count_frame_bits__lr_ph27_98 = (arg_s + 20);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %98 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_98_reg <= count_frame_bits__lr_ph27_98;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_98_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %tmp54 = icmp sgt i32 %83, 1*/
begin
count_frame_bits__lr_ph27_tmp54 = ($signed(count_frame_bits__preheader24_83_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %tmp54 = icmp sgt i32 %83, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_tmp54_reg <= count_frame_bits__lr_ph27_tmp54;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_tmp54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_tmp54_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %smax55 = select i1 %tmp54, i32 %83, i32 1*/
begin
count_frame_bits__lr_ph27_smax55 = (count_frame_bits__lr_ph27_tmp54 ? count_frame_bits__preheader24_83_reg : 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %smax55 = select i1 %tmp54, i32 %83, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_smax55_reg <= count_frame_bits__lr_ph27_smax55;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_smax55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_smax55_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %99 = icmp ne i32 %2, 0*/
begin
count_frame_bits__lr_ph27_99 = (count_frame_bits_0_2_reg != 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %99 = icmp ne i32 %2, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
count_frame_bits__lr_ph27_99_reg <= count_frame_bits__lr_ph27_99;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_99_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %tmp48 = icmp sgt i32 %92, 1*/
begin
count_frame_bits__lr_ph27_tmp48 = ($signed(count_frame_bits__lr_ph27_92) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %tmp48 = icmp sgt i32 %92, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60))
begin
count_frame_bits__lr_ph27_tmp48_reg <= count_frame_bits__lr_ph27_tmp48;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_tmp48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_tmp48_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %smax49 = select i1 %tmp48, i32 %92, i32 1*/
begin
count_frame_bits__lr_ph27_smax49 = (count_frame_bits__lr_ph27_tmp48 ? count_frame_bits__lr_ph27_92 : 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %smax49 = select i1 %tmp48, i32 %92, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60))
begin
count_frame_bits__lr_ph27_smax49_reg <= count_frame_bits__lr_ph27_smax49;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_smax49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_smax49_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph27*/
/*   %100 = zext i1 %90 to i32*/
begin
count_frame_bits__lr_ph27_100 = count_frame_bits__lr_ph27_90;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph27*/
/*   %100 = zext i1 %90 to i32*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_59))
begin
count_frame_bits__lr_ph27_100_reg <= count_frame_bits__lr_ph27_100;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph27_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph27_100_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %frame_bits.1626 = phi i32 [ %frame_bits.16.ph, %.lr.ph27 ], [ %frame_bits.35, %169 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_101_frame_bits_1626 = count_frame_bits__preheader24_frame_bits_16_ph_reg;
end
/* count_frame_bits: %101*/
/*   %frame_bits.1626 = phi i32 [ %frame_bits.16.ph, %.lr.ph27 ], [ %frame_bits.35, %169 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd0))) */
begin
count_frame_bits_101_frame_bits_1626 = count_frame_bits_169_frame_bits_35_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %frame_bits.1626 = phi i32 [ %frame_bits.16.ph, %.lr.ph27 ], [ %frame_bits.35, %169 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_101_frame_bits_1626_reg <= count_frame_bits_101_frame_bits_1626;
if (reset == 1'b0 && ^(count_frame_bits_101_frame_bits_1626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_frame_bits_1626_reg"); $finish; end
end
/* count_frame_bits: %101*/
/*   %frame_bits.1626 = phi i32 [ %frame_bits.16.ph, %.lr.ph27 ], [ %frame_bits.35, %169 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd0)))
begin
count_frame_bits_101_frame_bits_1626_reg <= count_frame_bits_101_frame_bits_1626;
if (reset == 1'b0 && ^(count_frame_bits_101_frame_bits_1626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_frame_bits_1626_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %102 = phi i32 [ 0, %.lr.ph27 ], [ %170, %169 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_101_102 = 32'd0;
end
/* count_frame_bits: %101*/
/*   %102 = phi i32 [ 0, %.lr.ph27 ], [ %170, %169 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd0))) */
begin
count_frame_bits_101_102 = count_frame_bits_169_170;
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %102 = phi i32 [ 0, %.lr.ph27 ], [ %170, %169 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_60) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_101_102_reg <= count_frame_bits_101_102;
if (reset == 1'b0 && ^(count_frame_bits_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_102_reg"); $finish; end
end
/* count_frame_bits: %101*/
/*   %102 = phi i32 [ 0, %.lr.ph27 ], [ %170, %169 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_169_133) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_169_exitcond56 == 1'd0)))
begin
count_frame_bits_101_102_reg <= count_frame_bits_101_102;
if (reset == 1'b0 && ^(count_frame_bits_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_102_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep58 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 7*/
begin
count_frame_bits_101_scevgep58 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 28));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep58 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep58_reg <= count_frame_bits_101_scevgep58;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep5960 = getelementptr inbounds %struct.TYPE_7__* %86, i32 %102, i32 0*/
begin
count_frame_bits_101_scevgep5960 = (count_frame_bits__lr_ph27_86_reg + (32 * count_frame_bits_101_102_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep5960 = getelementptr inbounds %struct.TYPE_7__* %86, i32 %102, i32 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep5960_reg <= count_frame_bits_101_scevgep5960;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep5960) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep5960_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep61 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 3*/
begin
count_frame_bits_101_scevgep61 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 12));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep61 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep61_reg <= count_frame_bits_101_scevgep61;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep62 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 2*/
begin
count_frame_bits_101_scevgep62 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 8));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep62 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep62_reg <= count_frame_bits_101_scevgep62;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep62_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep63 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 4*/
begin
count_frame_bits_101_scevgep63 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 16));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep63 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 4*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep63_reg <= count_frame_bits_101_scevgep63;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep63_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep65 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 5*/
begin
count_frame_bits_101_scevgep65 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 20));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep65 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 5*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep65_reg <= count_frame_bits_101_scevgep65;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep65_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %scevgep66 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 1*/
begin
count_frame_bits_101_scevgep66 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 4));
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %scevgep66 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101_scevgep66_reg <= count_frame_bits_101_scevgep66;
if (reset == 1'b0 && ^(count_frame_bits_101_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_scevgep66_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %.frame_bits.16 = add i32 %87, %frame_bits.1626*/
begin
count_frame_bits_101__frame_bits_16 = (count_frame_bits__lr_ph27_87_reg + count_frame_bits_101_frame_bits_1626_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %.frame_bits.16 = add i32 %87, %frame_bits.1626*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
count_frame_bits_101__frame_bits_16_reg <= count_frame_bits_101__frame_bits_16;
if (reset == 1'b0 && ^(count_frame_bits_101__frame_bits_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101__frame_bits_16_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
begin
count_frame_bits_101_103 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_63))
begin
count_frame_bits_101_103_reg <= count_frame_bits_101_103;
if (reset == 1'b0 && ^(count_frame_bits_101_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_103_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %101*/
/*   %104 = icmp eq i32 %103, 0*/
begin
count_frame_bits_101_104 = (count_frame_bits_101_103 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %101*/
/*   %104 = icmp eq i32 %103, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_63))
begin
count_frame_bits_101_104_reg <= count_frame_bits_101_104;
if (reset == 1'b0 && ^(count_frame_bits_101_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_101_104_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
begin
count_frame_bits___crit_edge69__pre74 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66))
begin
count_frame_bits___crit_edge69__pre74_reg <= count_frame_bits___crit_edge69__pre74;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge69__pre74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge69__pre74_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %105*/
/*   %..frame_bits.16 = add i32 %.frame_bits.16, %87*/
begin
count_frame_bits_105___frame_bits_16 = (count_frame_bits_101__frame_bits_16_reg + count_frame_bits__lr_ph27_87_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %105*/
/*   %..frame_bits.16 = add i32 %.frame_bits.16, %87*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_67))
begin
count_frame_bits_105___frame_bits_16_reg <= count_frame_bits_105___frame_bits_16;
if (reset == 1'b0 && ^(count_frame_bits_105___frame_bits_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_105___frame_bits_16_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
begin
count_frame_bits_105_106 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_69))
begin
count_frame_bits_105_106_reg <= count_frame_bits_105_106;
if (reset == 1'b0 && ^(count_frame_bits_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_105_106_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %105*/
/*   %107 = icmp eq i32 %106, 0*/
begin
count_frame_bits_105_107 = (count_frame_bits_105_106 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %105*/
/*   %107 = icmp eq i32 %106, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_69))
begin
count_frame_bits_105_107_reg <= count_frame_bits_105_107;
if (reset == 1'b0 && ^(count_frame_bits_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_105_107_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %108*/
/*   %..frame_bits.16. = add i32 %..frame_bits.16, %97*/
begin
count_frame_bits_108___frame_bits_16_ = (count_frame_bits_105___frame_bits_16_reg + count_frame_bits__lr_ph27_97_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %108*/
/*   %..frame_bits.16. = add i32 %..frame_bits.16, %97*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_108_70))
begin
count_frame_bits_108___frame_bits_16__reg <= count_frame_bits_108___frame_bits_16_;
if (reset == 1'b0 && ^(count_frame_bits_108___frame_bits_16_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_108___frame_bits_16__reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %108*/
/*   %109 = add nsw i32 %92, %..frame_bits.16.*/
begin
count_frame_bits_108_109 = (count_frame_bits__lr_ph27_92_reg + count_frame_bits_108___frame_bits_16_);
end
end
always @(posedge clk) begin
/* count_frame_bits: %108*/
/*   %109 = add nsw i32 %92, %..frame_bits.16.*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_108_70))
begin
count_frame_bits_108_109_reg <= count_frame_bits_108_109;
if (reset == 1'b0 && ^(count_frame_bits_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_108_109_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread*/
/*   %..frame_bits.16.. = select i1 %90, i32 %..frame_bits.16., i32 %109*/
begin
count_frame_bits__thread___frame_bits_16__ = (count_frame_bits__lr_ph27_90_reg ? count_frame_bits_108___frame_bits_16__reg : count_frame_bits_108_109_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread*/
/*   %..frame_bits.16.. = select i1 %90, i32 %..frame_bits.16., i32 %109*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread_71))
begin
count_frame_bits__thread___frame_bits_16___reg <= count_frame_bits__thread___frame_bits_16__;
if (reset == 1'b0 && ^(count_frame_bits__thread___frame_bits_16__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread___frame_bits_16___reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread*/
/*   %frame_bits.2181 = add i32 %100, %..frame_bits.16..*/
begin
count_frame_bits__thread_frame_bits_2181 = (count_frame_bits__lr_ph27_100_reg + count_frame_bits__thread___frame_bits_16__);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread*/
/*   %frame_bits.2181 = add i32 %100, %..frame_bits.16..*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread_71))
begin
count_frame_bits__thread_frame_bits_2181_reg <= count_frame_bits__thread_frame_bits_2181;
if (reset == 1'b0 && ^(count_frame_bits__thread_frame_bits_2181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread_frame_bits_2181_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread*/
/*   %110 = add i32 %frame_bits.2181, 9*/
begin
count_frame_bits__thread_110 = (count_frame_bits__thread_frame_bits_2181 + 32'd9);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread*/
/*   %110 = add i32 %frame_bits.2181, 9*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread_71))
begin
count_frame_bits__thread_110_reg <= count_frame_bits__thread_110;
if (reset == 1'b0 && ^(count_frame_bits__thread_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread_110_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread86*/
/*   %frame_bits.2183 = add i32 %100, %109*/
begin
count_frame_bits__thread86_frame_bits_2183 = (count_frame_bits__lr_ph27_100_reg + count_frame_bits_108_109_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread86*/
/*   %frame_bits.2183 = add i32 %100, %109*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
count_frame_bits__thread86_frame_bits_2183_reg <= count_frame_bits__thread86_frame_bits_2183;
if (reset == 1'b0 && ^(count_frame_bits__thread86_frame_bits_2183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread86_frame_bits_2183_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
begin
count_frame_bits__thread86_111 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74))
begin
count_frame_bits__thread86_111_reg <= count_frame_bits__thread86_111;
if (reset == 1'b0 && ^(count_frame_bits__thread86_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread86_111_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread86*/
/*   %112 = add i32 %frame_bits.2183, 7*/
begin
count_frame_bits__thread86_112 = (count_frame_bits__thread86_frame_bits_2183 + 32'd7);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread86*/
/*   %112 = add i32 %frame_bits.2183, 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
count_frame_bits__thread86_112_reg <= count_frame_bits__thread86_112;
if (reset == 1'b0 && ^(count_frame_bits__thread86_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread86_112_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread86*/
/*   %113 = add i32 %112, %111*/
begin
count_frame_bits__thread86_113 = (count_frame_bits__thread86_112_reg + count_frame_bits__thread86_111);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread86*/
/*   %113 = add i32 %112, %111*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74))
begin
count_frame_bits__thread86_113_reg <= count_frame_bits__thread86_113;
if (reset == 1'b0 && ^(count_frame_bits__thread86_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread86_113_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %114*/
/*   %115 = phi i32 [ %106, %.thread ], [ %.pre74, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_115 = count_frame_bits___crit_edge69__pre74;
end
/* count_frame_bits: %114*/
/*   %115 = phi i32 [ %106, %.thread ], [ %.pre74, %._crit_edge69 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_114_115 = count_frame_bits_105_106_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %114*/
/*   %115 = phi i32 [ %106, %.thread ], [ %.pre74, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_115_reg <= count_frame_bits_114_115;
if (reset == 1'b0 && ^(count_frame_bits_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_114_115_reg"); $finish; end
end
/* count_frame_bits: %114*/
/*   %115 = phi i32 [ %106, %.thread ], [ %.pre74, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_115_reg <= count_frame_bits_114_115;
if (reset == 1'b0 && ^(count_frame_bits_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_114_115_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %114*/
/*   %frame_bits.22 = phi i32 [ %110, %.thread ], [ %.frame_bits.16, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_frame_bits_22 = count_frame_bits_101__frame_bits_16_reg;
end
/* count_frame_bits: %114*/
/*   %frame_bits.22 = phi i32 [ %110, %.thread ], [ %.frame_bits.16, %._crit_edge69 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_114_frame_bits_22 = count_frame_bits__thread_110;
end
end
always @(posedge clk) begin
/* count_frame_bits: %114*/
/*   %frame_bits.22 = phi i32 [ %110, %.thread ], [ %.frame_bits.16, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_66) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_frame_bits_22_reg <= count_frame_bits_114_frame_bits_22;
if (reset == 1'b0 && ^(count_frame_bits_114_frame_bits_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_114_frame_bits_22_reg"); $finish; end
end
/* count_frame_bits: %114*/
/*   %frame_bits.22 = phi i32 [ %110, %.thread ], [ %.frame_bits.16, %._crit_edge69 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread_71) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_114_frame_bits_22_reg <= count_frame_bits_114_frame_bits_22;
if (reset == 1'b0 && ^(count_frame_bits_114_frame_bits_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_114_frame_bits_22_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %114*/
/*   %116 = icmp eq i32 %115, 0*/
begin
count_frame_bits_114_116 = (count_frame_bits_114_115_reg == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %114*/
/*   %116 = icmp eq i32 %115, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_114_75))
begin
count_frame_bits_114_116_reg <= count_frame_bits_114_116;
if (reset == 1'b0 && ^(count_frame_bits_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_114_116_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader13*/
/*   %frame_bits.2287 = phi i32 [ %113, %.thread86 ], [ %frame_bits.22, %114 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader13_frame_bits_2287 = count_frame_bits__thread86_113;
end
/* count_frame_bits: %.preheader13*/
/*   %frame_bits.2287 = phi i32 [ %113, %.thread86 ], [ %frame_bits.22, %114 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd0))) */
begin
count_frame_bits__preheader13_frame_bits_2287 = count_frame_bits_114_frame_bits_22_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader13*/
/*   %frame_bits.2287 = phi i32 [ %113, %.thread86 ], [ %frame_bits.22, %114 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader13_frame_bits_2287_reg <= count_frame_bits__preheader13_frame_bits_2287;
if (reset == 1'b0 && ^(count_frame_bits__preheader13_frame_bits_2287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader13_frame_bits_2287_reg"); $finish; end
end
/* count_frame_bits: %.preheader13*/
/*   %frame_bits.2287 = phi i32 [ %113, %.thread86 ], [ %frame_bits.22, %114 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd0)))
begin
count_frame_bits__preheader13_frame_bits_2287_reg <= count_frame_bits__preheader13_frame_bits_2287;
if (reset == 1'b0 && ^(count_frame_bits__preheader13_frame_bits_2287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader13_frame_bits_2287_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader13*/
/*   %117 = phi i32 [ %106, %.thread86 ], [ %115, %114 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader13_117 = count_frame_bits_105_106_reg;
end
/* count_frame_bits: %.preheader13*/
/*   %117 = phi i32 [ %106, %.thread86 ], [ %115, %114 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd0))) */
begin
count_frame_bits__preheader13_117 = count_frame_bits_114_115_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader13*/
/*   %117 = phi i32 [ %106, %.thread86 ], [ %115, %114 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread86_74) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader13_117_reg <= count_frame_bits__preheader13_117;
if (reset == 1'b0 && ^(count_frame_bits__preheader13_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader13_117_reg"); $finish; end
end
/* count_frame_bits: %.preheader13*/
/*   %117 = phi i32 [ %106, %.thread86 ], [ %115, %114 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd0)))
begin
count_frame_bits__preheader13_117_reg <= count_frame_bits__preheader13_117;
if (reset == 1'b0 && ^(count_frame_bits__preheader13_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader13_117_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
begin
count_frame_bits__lr_ph17_118 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79))
begin
count_frame_bits__lr_ph17_118_reg <= count_frame_bits__lr_ph17_118;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph17_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph17_118_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph17 ], [ %tmp42, %130 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_119_indvar37 = 32'd0;
end
/* count_frame_bits: %119*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph17 ], [ %tmp42, %130 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd0))) */
begin
count_frame_bits_119_indvar37 = count_frame_bits_119_tmp42_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph17 ], [ %tmp42, %130 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_119_indvar37_reg <= count_frame_bits_119_indvar37;
if (reset == 1'b0 && ^(count_frame_bits_119_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_indvar37_reg"); $finish; end
end
/* count_frame_bits: %119*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph17 ], [ %tmp42, %130 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd0)))
begin
count_frame_bits_119_indvar37_reg <= count_frame_bits_119_indvar37;
if (reset == 1'b0 && ^(count_frame_bits_119_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_indvar37_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %frame_bits.2316 = phi i32 [ %frame_bits.2287, %.lr.ph17 ], [ %frame_bits.25, %130 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_119_frame_bits_2316 = count_frame_bits__preheader13_frame_bits_2287_reg;
end
/* count_frame_bits: %119*/
/*   %frame_bits.2316 = phi i32 [ %frame_bits.2287, %.lr.ph17 ], [ %frame_bits.25, %130 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd0))) */
begin
count_frame_bits_119_frame_bits_2316 = count_frame_bits_130_frame_bits_25_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %frame_bits.2316 = phi i32 [ %frame_bits.2287, %.lr.ph17 ], [ %frame_bits.25, %130 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_79) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_119_frame_bits_2316_reg <= count_frame_bits_119_frame_bits_2316;
if (reset == 1'b0 && ^(count_frame_bits_119_frame_bits_2316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_frame_bits_2316_reg"); $finish; end
end
/* count_frame_bits: %119*/
/*   %frame_bits.2316 = phi i32 [ %frame_bits.2287, %.lr.ph17 ], [ %frame_bits.25, %130 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_130_93) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_130_exitcond41 == 1'd0)))
begin
count_frame_bits_119_frame_bits_2316_reg <= count_frame_bits_119_frame_bits_2316;
if (reset == 1'b0 && ^(count_frame_bits_119_frame_bits_2316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_frame_bits_2316_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %tmp42 = add i32 %indvar37, 1*/
begin
count_frame_bits_119_tmp42 = (count_frame_bits_119_indvar37_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %tmp42 = add i32 %indvar37, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_80))
begin
count_frame_bits_119_tmp42_reg <= count_frame_bits_119_tmp42;
if (reset == 1'b0 && ^(count_frame_bits_119_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_tmp42_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %scevgep43 = getelementptr i32* %118, i32 %tmp42*/
begin
count_frame_bits_119_scevgep43 = (count_frame_bits__lr_ph17_118_reg + (4 * count_frame_bits_119_tmp42_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %scevgep43 = getelementptr i32* %118, i32 %tmp42*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_81))
begin
count_frame_bits_119_scevgep43_reg <= count_frame_bits_119_scevgep43;
if (reset == 1'b0 && ^(count_frame_bits_119_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_scevgep43_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
begin
count_frame_bits_119_120 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_83))
begin
count_frame_bits_119_120_reg <= count_frame_bits_119_120;
if (reset == 1'b0 && ^(count_frame_bits_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_120_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %119*/
/*   %121 = icmp eq i32 %120, 0*/
begin
count_frame_bits_119_121 = (count_frame_bits_119_120 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %119*/
/*   %121 = icmp eq i32 %120, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_83))
begin
count_frame_bits_119_121_reg <= count_frame_bits_119_121;
if (reset == 1'b0 && ^(count_frame_bits_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_119_121_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
begin
count_frame_bits_122__pre67_pre = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
count_frame_bits_122__pre67_pre_reg <= count_frame_bits_122__pre67_pre;
if (reset == 1'b0 && ^(count_frame_bits_122__pre67_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_122__pre67_pre_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %122*/
/*   %scevgep45.phi.trans.insert.phi.trans.insert = getelementptr i32* %.pre67.pre, i32 %tmp42*/
begin
count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert = (count_frame_bits_122__pre67_pre + (4 * count_frame_bits_119_tmp42_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %122*/
/*   %scevgep45.phi.trans.insert.phi.trans.insert = getelementptr i32* %.pre67.pre, i32 %tmp42*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert_reg <= count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert;
if (reset == 1'b0 && ^(count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
begin
count_frame_bits_122__pre68_pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_88))
begin
count_frame_bits_122__pre68_pre_reg <= count_frame_bits_122__pre68_pre;
if (reset == 1'b0 && ^(count_frame_bits_122__pre68_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_122__pre68_pre_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %122*/
/*   %123 = icmp eq i32 %.pre68.pre, 2*/
begin
count_frame_bits_122_123 = (count_frame_bits_122__pre68_pre == 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %122*/
/*   %123 = icmp eq i32 %.pre68.pre, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_88))
begin
count_frame_bits_122_123_reg <= count_frame_bits_122_123;
if (reset == 1'b0 && ^(count_frame_bits_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_122_123_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %122*/
/*   %or.cond92 = and i1 %99, %123*/
begin
count_frame_bits_122_or_cond92 = (count_frame_bits__lr_ph27_99_reg & count_frame_bits_122_123);
end
end
always @(posedge clk) begin
/* count_frame_bits: %122*/
/*   %or.cond92 = and i1 %99, %123*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_88))
begin
count_frame_bits_122_or_cond92_reg <= count_frame_bits_122_or_cond92;
if (reset == 1'b0 && ^(count_frame_bits_122_or_cond92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_122_or_cond92_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge75*/
/*   %124 = add nsw i32 %frame_bits.2316, 1*/
begin
count_frame_bits___crit_edge75_124 = (count_frame_bits_119_frame_bits_2316_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge75*/
/*   %124 = add nsw i32 %frame_bits.2316, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89))
begin
count_frame_bits___crit_edge75_124_reg <= count_frame_bits___crit_edge75_124;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge75_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge75_124_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge75*/
/*   %125 = icmp eq i32 %.pre68.pre, 0*/
begin
count_frame_bits___crit_edge75_125 = (count_frame_bits_122__pre68_pre_reg == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge75*/
/*   %125 = icmp eq i32 %.pre68.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89))
begin
count_frame_bits___crit_edge75_125_reg <= count_frame_bits___crit_edge75_125;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge75_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge75_125_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread88*/
/*   %frame_bits.2489 = phi i32 [ %frame_bits.2316, %122 ], [ %124, %._crit_edge75 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_122_88) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_122_or_cond92 == 1'd1)))
begin
count_frame_bits__thread88_frame_bits_2489 = count_frame_bits_119_frame_bits_2316_reg;
end
/* count_frame_bits: %.thread88*/
/*   %frame_bits.2489 = phi i32 [ %frame_bits.2316, %122 ], [ %124, %._crit_edge75 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd0))) */
begin
count_frame_bits__thread88_frame_bits_2489 = count_frame_bits___crit_edge75_124;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread88*/
/*   %frame_bits.2489 = phi i32 [ %frame_bits.2316, %122 ], [ %124, %._crit_edge75 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_122_88) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_122_or_cond92 == 1'd1)))
begin
count_frame_bits__thread88_frame_bits_2489_reg <= count_frame_bits__thread88_frame_bits_2489;
if (reset == 1'b0 && ^(count_frame_bits__thread88_frame_bits_2489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_frame_bits_2489_reg"); $finish; end
end
/* count_frame_bits: %.thread88*/
/*   %frame_bits.2489 = phi i32 [ %frame_bits.2316, %122 ], [ %124, %._crit_edge75 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd0)))
begin
count_frame_bits__thread88_frame_bits_2489_reg <= count_frame_bits__thread88_frame_bits_2489;
if (reset == 1'b0 && ^(count_frame_bits__thread88_frame_bits_2489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_frame_bits_2489_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
begin
count_frame_bits__thread88_126 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92))
begin
count_frame_bits__thread88_126_reg <= count_frame_bits__thread88_126;
if (reset == 1'b0 && ^(count_frame_bits__thread88_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_126_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread88*/
/*   %127 = shl i32 %126, 3*/
begin
count_frame_bits__thread88_127 = (count_frame_bits__thread88_126 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread88*/
/*   %127 = shl i32 %126, 3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92))
begin
count_frame_bits__thread88_127_reg <= count_frame_bits__thread88_127;
if (reset == 1'b0 && ^(count_frame_bits__thread88_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_127_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread88*/
/*   %128 = add i32 %frame_bits.2489, 2*/
begin
count_frame_bits__thread88_128 = (count_frame_bits__thread88_frame_bits_2489_reg + 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread88*/
/*   %128 = add i32 %frame_bits.2489, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90))
begin
count_frame_bits__thread88_128_reg <= count_frame_bits__thread88_128;
if (reset == 1'b0 && ^(count_frame_bits__thread88_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_128_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread88*/
/*   %129 = add i32 %128, %127*/
begin
count_frame_bits__thread88_129 = (count_frame_bits__thread88_128_reg + count_frame_bits__thread88_127);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread88*/
/*   %129 = add i32 %128, %127*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92))
begin
count_frame_bits__thread88_129_reg <= count_frame_bits__thread88_129;
if (reset == 1'b0 && ^(count_frame_bits__thread88_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread88_129_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_119_83) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_119_121 == 1'd1)))
begin
count_frame_bits_130_frame_bits_25 = count_frame_bits_119_frame_bits_2316_reg;
end
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd1)))
begin
count_frame_bits_130_frame_bits_25 = count_frame_bits___crit_edge75_124;
end
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_130_frame_bits_25 = count_frame_bits__thread88_129;
end
end
always @(posedge clk) begin
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_119_83) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_119_121 == 1'd1)))
begin
count_frame_bits_130_frame_bits_25_reg <= count_frame_bits_130_frame_bits_25;
if (reset == 1'b0 && ^(count_frame_bits_130_frame_bits_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_130_frame_bits_25_reg"); $finish; end
end
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge75_89) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge75_125 == 1'd1)))
begin
count_frame_bits_130_frame_bits_25_reg <= count_frame_bits_130_frame_bits_25;
if (reset == 1'b0 && ^(count_frame_bits_130_frame_bits_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_130_frame_bits_25_reg"); $finish; end
end
/* count_frame_bits: %130*/
/*   %frame_bits.25 = phi i32 [ %129, %.thread88 ], [ %124, %._crit_edge75 ], [ %frame_bits.2316, %119 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread88_92) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_130_frame_bits_25_reg <= count_frame_bits_130_frame_bits_25;
if (reset == 1'b0 && ^(count_frame_bits_130_frame_bits_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_130_frame_bits_25_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %130*/
/*   %exitcond41 = icmp eq i32 %tmp42, %smax49*/
begin
count_frame_bits_130_exitcond41 = (count_frame_bits_119_tmp42_reg == count_frame_bits__lr_ph27_smax49_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %130*/
/*   %exitcond41 = icmp eq i32 %tmp42, %smax49*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_130_93))
begin
count_frame_bits_130_exitcond41_reg <= count_frame_bits_130_exitcond41;
if (reset == 1'b0 && ^(count_frame_bits_130_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_130_exitcond41_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_131 = 1'd1;
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_131 = 1'd1;
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_131 = 1'd0;
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__loopexit14_131 = 1'd0;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_131_reg <= count_frame_bits__loopexit14_131;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_131_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_131_reg <= count_frame_bits__loopexit14_131;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_131_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_131_reg <= count_frame_bits__loopexit14_131;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_131_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %131 = phi i1 [ true, %114 ], [ false, %.preheader13 ], [ true, %105 ], [ false, %.loopexit14.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__loopexit14_131_reg <= count_frame_bits__loopexit14_131;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_131_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_132 = 32'd0;
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_132 = 32'd0;
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_132 = count_frame_bits__preheader13_117_reg;
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__loopexit14_132 = count_frame_bits__preheader13_117_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_132_reg <= count_frame_bits__loopexit14_132;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_132_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_132_reg <= count_frame_bits__loopexit14_132;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_132_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_132_reg <= count_frame_bits__loopexit14_132;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_132_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %132 = phi i32 [ 0, %114 ], [ %117, %.preheader13 ], [ 0, %105 ], [ %117, %.loopexit14.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__loopexit14_132_reg <= count_frame_bits__loopexit14_132;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_132_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26 = count_frame_bits_105___frame_bits_16_reg;
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26 = count_frame_bits_114_frame_bits_22_reg;
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26 = count_frame_bits__preheader13_frame_bits_2287_reg;
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__loopexit14_frame_bits_26 = count_frame_bits_130_frame_bits_25_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_105_69) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_105_107 == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26_reg <= count_frame_bits__loopexit14_frame_bits_26;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_frame_bits_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_frame_bits_26_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_114_75) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_114_116 == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26_reg <= count_frame_bits__loopexit14_frame_bits_26;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_frame_bits_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_frame_bits_26_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader13_76) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits__loopexit14_frame_bits_26_reg <= count_frame_bits__loopexit14_frame_bits_26;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_frame_bits_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_frame_bits_26_reg"); $finish; end
end
/* count_frame_bits: %.loopexit14*/
/*   %frame_bits.26 = phi i32 [ %frame_bits.22, %114 ], [ %frame_bits.2287, %.preheader13 ], [ %..frame_bits.16, %105 ], [ %frame_bits.25, %.loopexit14.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_loopexit_94) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__loopexit14_frame_bits_26_reg <= count_frame_bits__loopexit14_frame_bits_26;
if (reset == 1'b0 && ^(count_frame_bits__loopexit14_frame_bits_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__loopexit14_frame_bits_26_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %134 = icmp sgt i32 %102, 0*/
begin
count_frame_bits_133_134 = ($signed(count_frame_bits_101_102_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %134 = icmp sgt i32 %102, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
count_frame_bits_133_134_reg <= count_frame_bits_133_134;
if (reset == 1'b0 && ^(count_frame_bits_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_134_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %or.cond = or i1 %3, %134*/
begin
count_frame_bits_133_or_cond = (count_frame_bits_0_3_reg | count_frame_bits_133_134);
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %or.cond = or i1 %3, %134*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
count_frame_bits_133_or_cond_reg <= count_frame_bits_133_or_cond;
if (reset == 1'b0 && ^(count_frame_bits_133_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %135 = zext i1 %or.cond to i32*/
begin
count_frame_bits_133_135 = count_frame_bits_133_or_cond;
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %135 = zext i1 %or.cond to i32*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
count_frame_bits_133_135_reg <= count_frame_bits_133_135;
if (reset == 1'b0 && ^(count_frame_bits_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_135_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %frame_bits.27 = add i32 %135, %frame_bits.26*/
begin
count_frame_bits_133_frame_bits_27 = (count_frame_bits_133_135 + count_frame_bits__loopexit14_frame_bits_26_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %frame_bits.27 = add i32 %135, %frame_bits.26*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
count_frame_bits_133_frame_bits_27_reg <= count_frame_bits_133_frame_bits_27;
if (reset == 1'b0 && ^(count_frame_bits_133_frame_bits_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_frame_bits_27_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %scevgep64 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 6*/
begin
count_frame_bits_133_scevgep64 = (count_frame_bits__lr_ph27_86_reg + ((32 * count_frame_bits_101_102_reg) + 24));
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %scevgep64 = getelementptr %struct.TYPE_7__* %86, i32 %102, i32 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
count_frame_bits_133_scevgep64_reg <= count_frame_bits_133_scevgep64;
if (reset == 1'b0 && ^(count_frame_bits_133_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_scevgep64_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
begin
count_frame_bits_133_136 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_98))
begin
count_frame_bits_133_136_reg <= count_frame_bits_133_136;
if (reset == 1'b0 && ^(count_frame_bits_133_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_136_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %133*/
/*   %137 = icmp eq i32 %136, 0*/
begin
count_frame_bits_133_137 = (count_frame_bits_133_136 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %133*/
/*   %137 = icmp eq i32 %136, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_98))
begin
count_frame_bits_133_137_reg <= count_frame_bits_133_137;
if (reset == 1'b0 && ^(count_frame_bits_133_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_133_137_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
begin
count_frame_bits_138_139 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_101))
begin
count_frame_bits_138_139_reg <= count_frame_bits_138_139;
if (reset == 1'b0 && ^(count_frame_bits_138_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_138_139_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %138*/
/*   %140 = add nsw i32 %139, %frame_bits.27*/
begin
count_frame_bits_138_140 = (count_frame_bits_138_139 + count_frame_bits_133_frame_bits_27_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %138*/
/*   %140 = add nsw i32 %139, %frame_bits.27*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_101))
begin
count_frame_bits_138_140_reg <= count_frame_bits_138_140;
if (reset == 1'b0 && ^(count_frame_bits_138_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_138_140_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_95) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_90_reg == 1'd0)))
begin
count_frame_bits__preheader19_frame_bits_29_ph = count_frame_bits__loopexit14_frame_bits_26_reg;
end
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_133_98) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_133_137 == 1'd1)))
begin
count_frame_bits__preheader19_frame_bits_29_ph = count_frame_bits_133_frame_bits_27_reg;
end
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB_138_101) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits__preheader19_frame_bits_29_ph = count_frame_bits_138_140;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__loopexit14_95) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_90_reg == 1'd0)))
begin
count_frame_bits__preheader19_frame_bits_29_ph_reg <= count_frame_bits__preheader19_frame_bits_29_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader19_frame_bits_29_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader19_frame_bits_29_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_133_98) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_133_137 == 1'd1)))
begin
count_frame_bits__preheader19_frame_bits_29_ph_reg <= count_frame_bits__preheader19_frame_bits_29_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader19_frame_bits_29_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader19_frame_bits_29_ph_reg"); $finish; end
end
/* count_frame_bits: %.preheader19*/
/*   %frame_bits.29.ph = phi i32 [ %frame_bits.26, %.loopexit14 ], [ %140, %138 ], [ %frame_bits.27, %133 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_138_101) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits__preheader19_frame_bits_29_ph_reg <= count_frame_bits__preheader19_frame_bits_29_ph;
if (reset == 1'b0 && ^(count_frame_bits__preheader19_frame_bits_29_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__preheader19_frame_bits_29_ph_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
begin
count_frame_bits__lr_ph22_141 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105))
begin
count_frame_bits__lr_ph22_141_reg <= count_frame_bits__lr_ph22_141;
if (reset == 1'b0 && ^(count_frame_bits__lr_ph22_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__lr_ph22_141_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %indvar46 = phi i32 [ 0, %.lr.ph22 ], [ %tmp51, %152 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_142_indvar46 = 32'd0;
end
/* count_frame_bits: %142*/
/*   %indvar46 = phi i32 [ 0, %.lr.ph22 ], [ %tmp51, %152 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd0))) */
begin
count_frame_bits_142_indvar46 = count_frame_bits_142_tmp51_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %indvar46 = phi i32 [ 0, %.lr.ph22 ], [ %tmp51, %152 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_142_indvar46_reg <= count_frame_bits_142_indvar46;
if (reset == 1'b0 && ^(count_frame_bits_142_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_indvar46_reg"); $finish; end
end
/* count_frame_bits: %142*/
/*   %indvar46 = phi i32 [ 0, %.lr.ph22 ], [ %tmp51, %152 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd0)))
begin
count_frame_bits_142_indvar46_reg <= count_frame_bits_142_indvar46;
if (reset == 1'b0 && ^(count_frame_bits_142_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_indvar46_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %frame_bits.2921 = phi i32 [ %frame_bits.29.ph, %.lr.ph22 ], [ %frame_bits.31, %152 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_142_frame_bits_2921 = count_frame_bits__preheader19_frame_bits_29_ph_reg;
end
/* count_frame_bits: %142*/
/*   %frame_bits.2921 = phi i32 [ %frame_bits.29.ph, %.lr.ph22 ], [ %frame_bits.31, %152 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd0))) */
begin
count_frame_bits_142_frame_bits_2921 = count_frame_bits_152_frame_bits_31_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %frame_bits.2921 = phi i32 [ %frame_bits.29.ph, %.lr.ph22 ], [ %frame_bits.31, %152 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_105) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_142_frame_bits_2921_reg <= count_frame_bits_142_frame_bits_2921;
if (reset == 1'b0 && ^(count_frame_bits_142_frame_bits_2921) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_frame_bits_2921_reg"); $finish; end
end
/* count_frame_bits: %142*/
/*   %frame_bits.2921 = phi i32 [ %frame_bits.29.ph, %.lr.ph22 ], [ %frame_bits.31, %152 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_152_117) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_152_exitcond50 == 1'd0)))
begin
count_frame_bits_142_frame_bits_2921_reg <= count_frame_bits_142_frame_bits_2921;
if (reset == 1'b0 && ^(count_frame_bits_142_frame_bits_2921) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_frame_bits_2921_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %tmp51 = add i32 %indvar46, 1*/
begin
count_frame_bits_142_tmp51 = (count_frame_bits_142_indvar46_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %tmp51 = add i32 %indvar46, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_106))
begin
count_frame_bits_142_tmp51_reg <= count_frame_bits_142_tmp51;
if (reset == 1'b0 && ^(count_frame_bits_142_tmp51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_tmp51_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %scevgep52 = getelementptr i32** %141, i32 %tmp51*/
begin
count_frame_bits_142_scevgep52 = (count_frame_bits__lr_ph22_141_reg + (4 * count_frame_bits_142_tmp51_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %scevgep52 = getelementptr i32** %141, i32 %tmp51*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_107))
begin
count_frame_bits_142_scevgep52_reg <= count_frame_bits_142_scevgep52;
if (reset == 1'b0 && ^(count_frame_bits_142_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
begin
count_frame_bits_142_143 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
count_frame_bits_142_143_reg <= count_frame_bits_142_143;
if (reset == 1'b0 && ^(count_frame_bits_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_143_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %scevgep57 = getelementptr i32* %143, i32 %102*/
begin
count_frame_bits_142_scevgep57 = (count_frame_bits_142_143 + (4 * count_frame_bits_101_102_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %scevgep57 = getelementptr i32* %143, i32 %102*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
count_frame_bits_142_scevgep57_reg <= count_frame_bits_142_scevgep57;
if (reset == 1'b0 && ^(count_frame_bits_142_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_scevgep57_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
begin
count_frame_bits_142_144 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_111))
begin
count_frame_bits_142_144_reg <= count_frame_bits_142_144;
if (reset == 1'b0 && ^(count_frame_bits_142_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_144_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %142*/
/*   %145 = icmp eq i32 %144, 0*/
begin
count_frame_bits_142_145 = (count_frame_bits_142_144 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %142*/
/*   %145 = icmp eq i32 %144, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_111))
begin
count_frame_bits_142_145_reg <= count_frame_bits_142_145;
if (reset == 1'b0 && ^(count_frame_bits_142_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_142_145_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
begin
count_frame_bits_146_147 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
count_frame_bits_146_147_reg <= count_frame_bits_146_147;
if (reset == 1'b0 && ^(count_frame_bits_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_147_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %scevgep53 = getelementptr i32* %147, i32 %tmp51*/
begin
count_frame_bits_146_scevgep53 = (count_frame_bits_146_147 + (4 * count_frame_bits_142_tmp51_reg));
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %scevgep53 = getelementptr i32* %147, i32 %tmp51*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
count_frame_bits_146_scevgep53_reg <= count_frame_bits_146_scevgep53;
if (reset == 1'b0 && ^(count_frame_bits_146_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_scevgep53_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
begin
count_frame_bits_146_148 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_116))
begin
count_frame_bits_146_148_reg <= count_frame_bits_146_148;
if (reset == 1'b0 && ^(count_frame_bits_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_148_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %149 = add nsw i32 %frame_bits.2921, 6*/
begin
count_frame_bits_146_149 = (count_frame_bits_142_frame_bits_2921_reg + 32'd6);
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %149 = add nsw i32 %frame_bits.2921, 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_112))
begin
count_frame_bits_146_149_reg <= count_frame_bits_146_149;
if (reset == 1'b0 && ^(count_frame_bits_146_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_149_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %150 = icmp eq i32 %148, 0*/
begin
count_frame_bits_146_150 = (count_frame_bits_146_148 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %150 = icmp eq i32 %148, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_116))
begin
count_frame_bits_146_150_reg <= count_frame_bits_146_150;
if (reset == 1'b0 && ^(count_frame_bits_146_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_150_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %.frame_bits.29 = select i1 %150, i32 %149, i32 %frame_bits.2921*/
begin
count_frame_bits_146__frame_bits_29 = (count_frame_bits_146_150 ? count_frame_bits_146_149_reg : count_frame_bits_142_frame_bits_2921_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %.frame_bits.29 = select i1 %150, i32 %149, i32 %frame_bits.2921*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_116))
begin
count_frame_bits_146__frame_bits_29_reg <= count_frame_bits_146__frame_bits_29;
if (reset == 1'b0 && ^(count_frame_bits_146__frame_bits_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146__frame_bits_29_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %146*/
/*   %151 = add nsw i32 %.frame_bits.29, 2*/
begin
count_frame_bits_146_151 = (count_frame_bits_146__frame_bits_29 + 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %146*/
/*   %151 = add nsw i32 %.frame_bits.29, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_116))
begin
count_frame_bits_146_151_reg <= count_frame_bits_146_151;
if (reset == 1'b0 && ^(count_frame_bits_146_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_146_151_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %152*/
/*   %frame_bits.31 = phi i32 [ %151, %146 ], [ %frame_bits.2921, %142 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_142_111) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_142_145 == 1'd1)))
begin
count_frame_bits_152_frame_bits_31 = count_frame_bits_142_frame_bits_2921_reg;
end
/* count_frame_bits: %152*/
/*   %frame_bits.31 = phi i32 [ %151, %146 ], [ %frame_bits.2921, %142 ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB_146_116) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_152_frame_bits_31 = count_frame_bits_146_151;
end
end
always @(posedge clk) begin
/* count_frame_bits: %152*/
/*   %frame_bits.31 = phi i32 [ %151, %146 ], [ %frame_bits.2921, %142 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_142_111) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_142_145 == 1'd1)))
begin
count_frame_bits_152_frame_bits_31_reg <= count_frame_bits_152_frame_bits_31;
if (reset == 1'b0 && ^(count_frame_bits_152_frame_bits_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_152_frame_bits_31_reg"); $finish; end
end
/* count_frame_bits: %152*/
/*   %frame_bits.31 = phi i32 [ %151, %146 ], [ %frame_bits.2921, %142 ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_146_116) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_152_frame_bits_31_reg <= count_frame_bits_152_frame_bits_31;
if (reset == 1'b0 && ^(count_frame_bits_152_frame_bits_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_152_frame_bits_31_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %152*/
/*   %exitcond50 = icmp eq i32 %tmp51, %smax49*/
begin
count_frame_bits_152_exitcond50 = (count_frame_bits_142_tmp51_reg == count_frame_bits__lr_ph27_smax49_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %152*/
/*   %exitcond50 = icmp eq i32 %tmp51, %smax49*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_152_117))
begin
count_frame_bits_152_exitcond50_reg <= count_frame_bits_152_exitcond50;
if (reset == 1'b0 && ^(count_frame_bits_152_exitcond50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_152_exitcond50_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge*/
/*   %frame_bits.29.lcssa = phi i32 [ %frame_bits.29.ph, %.preheader19 ], [ %frame_bits.31, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader19_102) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits___crit_edge_frame_bits_29_lcssa = count_frame_bits__preheader19_frame_bits_29_ph_reg;
end
/* count_frame_bits: %._crit_edge*/
/*   %frame_bits.29.lcssa = phi i32 [ %frame_bits.29.ph, %.preheader19 ], [ %frame_bits.31, %._crit_edge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits___crit_edge_frame_bits_29_lcssa = count_frame_bits_152_frame_bits_31_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge*/
/*   %frame_bits.29.lcssa = phi i32 [ %frame_bits.29.ph, %.preheader19 ], [ %frame_bits.31, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader19_102) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__lr_ph27_93_reg == 1'd1)))
begin
count_frame_bits___crit_edge_frame_bits_29_lcssa_reg <= count_frame_bits___crit_edge_frame_bits_29_lcssa;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge_frame_bits_29_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge_frame_bits_29_lcssa_reg"); $finish; end
end
/* count_frame_bits: %._crit_edge*/
/*   %frame_bits.29.lcssa = phi i32 [ %frame_bits.29.ph, %.preheader19 ], [ %frame_bits.31, %._crit_edge.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_loopexit_118) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits___crit_edge_frame_bits_29_lcssa_reg <= count_frame_bits___crit_edge_frame_bits_29_lcssa;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge_frame_bits_29_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge_frame_bits_29_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %153*/
/*   %154 = add nsw i32 %frame_bits.29.lcssa, 2*/
begin
count_frame_bits_153_154 = (count_frame_bits___crit_edge_frame_bits_29_lcssa_reg + 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %153*/
/*   %154 = add nsw i32 %frame_bits.29.lcssa, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
count_frame_bits_153_154_reg <= count_frame_bits_153_154;
if (reset == 1'b0 && ^(count_frame_bits_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_153_154_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %153*/
/*   %frame_bits.29. = select i1 %131, i32 %frame_bits.29.lcssa, i32 %154*/
begin
count_frame_bits_153_frame_bits_29_ = (count_frame_bits__loopexit14_131_reg ? count_frame_bits___crit_edge_frame_bits_29_lcssa_reg : count_frame_bits_153_154);
end
end
always @(posedge clk) begin
/* count_frame_bits: %153*/
/*   %frame_bits.29. = select i1 %131, i32 %frame_bits.29.lcssa, i32 %154*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
count_frame_bits_153_frame_bits_29__reg <= count_frame_bits_153_frame_bits_29_;
if (reset == 1'b0 && ^(count_frame_bits_153_frame_bits_29_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_153_frame_bits_29__reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %153*/
/*   %155 = add nsw i32 %frame_bits.29., 1*/
begin
count_frame_bits_153_155 = (count_frame_bits_153_frame_bits_29_ + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %153*/
/*   %155 = add nsw i32 %frame_bits.29., 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
count_frame_bits_153_155_reg <= count_frame_bits_153_155;
if (reset == 1'b0 && ^(count_frame_bits_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_153_155_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
begin
count_frame_bits_153_156 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_122))
begin
count_frame_bits_153_156_reg <= count_frame_bits_153_156;
if (reset == 1'b0 && ^(count_frame_bits_153_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_153_156_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %153*/
/*   %157 = icmp eq i32 %156, 0*/
begin
count_frame_bits_153_157 = (count_frame_bits_153_156 == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %153*/
/*   %157 = icmp eq i32 %156, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_122))
begin
count_frame_bits_153_157_reg <= count_frame_bits_153_157;
if (reset == 1'b0 && ^(count_frame_bits_153_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_153_157_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
begin
count_frame_bits_158_159 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_125))
begin
count_frame_bits_158_159_reg <= count_frame_bits_158_159;
if (reset == 1'b0 && ^(count_frame_bits_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_159_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %158*/
/*   %160 = add nsw i32 %132, %159*/
begin
count_frame_bits_158_160 = (count_frame_bits__loopexit14_132_reg + count_frame_bits_158_159);
end
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %160 = add nsw i32 %132, %159*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_125))
begin
count_frame_bits_158_160_reg <= count_frame_bits_158_160;
if (reset == 1'b0 && ^(count_frame_bits_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_160_reg"); $finish; end
end
end
always @(*) begin
count_frame_bits_158_161 = count_frame_bits_158_161_stage0_reg;
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %161 = mul nsw i32 %160, 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_126))
begin
count_frame_bits_158_161_reg <= count_frame_bits_158_161;
if (reset == 1'b0 && ^(count_frame_bits_158_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_161_reg"); $finish; end
end
/* count_frame_bits: %158*/
/*   %161 = mul nsw i32 %160, 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_126))
begin
count_frame_bits_158_161_reg <= count_frame_bits_158_161;
if (reset == 1'b0 && ^(count_frame_bits_158_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_161_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %158*/
/*   %162 = add i32 %frame_bits.29., 7*/
begin
count_frame_bits_158_162 = (count_frame_bits_153_frame_bits_29__reg + 32'd7);
end
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %162 = add i32 %frame_bits.29., 7*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_123))
begin
count_frame_bits_158_162_reg <= count_frame_bits_158_162;
if (reset == 1'b0 && ^(count_frame_bits_158_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_162_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %158*/
/*   %163 = add i32 %162, %161*/
begin
count_frame_bits_158_163 = (count_frame_bits_158_162_reg + count_frame_bits_158_161);
end
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %163 = add i32 %162, %161*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_126))
begin
count_frame_bits_158_163_reg <= count_frame_bits_158_163;
if (reset == 1'b0 && ^(count_frame_bits_158_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_158_163_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_119) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd0)))
begin
count_frame_bits_thread_pre_split_frame_bits_33 = count_frame_bits___crit_edge_frame_bits_29_lcssa_reg;
end
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB_153_122) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_153_157 == 1'd1)))
begin
count_frame_bits_thread_pre_split_frame_bits_33 = count_frame_bits_153_155_reg;
end
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB_158_126) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_thread_pre_split_frame_bits_33 = count_frame_bits_158_163;
end
end
always @(posedge clk) begin
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge_119) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_0_3_reg == 1'd0)))
begin
count_frame_bits_thread_pre_split_frame_bits_33_reg <= count_frame_bits_thread_pre_split_frame_bits_33;
if (reset == 1'b0 && ^(count_frame_bits_thread_pre_split_frame_bits_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_thread_pre_split_frame_bits_33_reg"); $finish; end
end
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_153_122) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_153_157 == 1'd1)))
begin
count_frame_bits_thread_pre_split_frame_bits_33_reg <= count_frame_bits_thread_pre_split_frame_bits_33;
if (reset == 1'b0 && ^(count_frame_bits_thread_pre_split_frame_bits_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_thread_pre_split_frame_bits_33_reg"); $finish; end
end
/* count_frame_bits: %thread-pre-split*/
/*   %frame_bits.33 = phi i32 [ %163, %158 ], [ %155, %153 ], [ %frame_bits.29.lcssa, %._crit_edge ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB_158_126) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_thread_pre_split_frame_bits_33_reg <= count_frame_bits_thread_pre_split_frame_bits_33;
if (reset == 1'b0 && ^(count_frame_bits_thread_pre_split_frame_bits_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_thread_pre_split_frame_bits_33_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
begin
count_frame_bits_164__pre_pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_130))
begin
count_frame_bits_164__pre_pre_reg <= count_frame_bits_164__pre_pre;
if (reset == 1'b0 && ^(count_frame_bits_164__pre_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_164__pre_pre_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %164*/
/*   %165 = icmp eq i32 %.pre.pre, 2*/
begin
count_frame_bits_164_165 = (count_frame_bits_164__pre_pre == 32'd2);
end
end
always @(posedge clk) begin
/* count_frame_bits: %164*/
/*   %165 = icmp eq i32 %.pre.pre, 2*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_130))
begin
count_frame_bits_164_165_reg <= count_frame_bits_164_165;
if (reset == 1'b0 && ^(count_frame_bits_164_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_164_165_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %164*/
/*   %or.cond93 = and i1 %99, %165*/
begin
count_frame_bits_164_or_cond93 = (count_frame_bits__lr_ph27_99_reg & count_frame_bits_164_165);
end
end
always @(posedge clk) begin
/* count_frame_bits: %164*/
/*   %or.cond93 = and i1 %99, %165*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_130))
begin
count_frame_bits_164_or_cond93_reg <= count_frame_bits_164_or_cond93;
if (reset == 1'b0 && ^(count_frame_bits_164_or_cond93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_164_or_cond93_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge76*/
/*   %166 = add nsw i32 %frame_bits.33, 1*/
begin
count_frame_bits___crit_edge76_166 = (count_frame_bits_thread_pre_split_frame_bits_33_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge76*/
/*   %166 = add nsw i32 %frame_bits.33, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131))
begin
count_frame_bits___crit_edge76_166_reg <= count_frame_bits___crit_edge76_166;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge76_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge76_166_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge76*/
/*   %167 = icmp eq i32 %.pre.pre, 0*/
begin
count_frame_bits___crit_edge76_167 = (count_frame_bits_164__pre_pre_reg == 32'd0);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge76*/
/*   %167 = icmp eq i32 %.pre.pre, 0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131))
begin
count_frame_bits___crit_edge76_167_reg <= count_frame_bits___crit_edge76_167;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge76_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge76_167_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread90*/
/*   %frame_bits.3491 = phi i32 [ %166, %._crit_edge76 ], [ %frame_bits.33, %164 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_164_130) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_164_or_cond93 == 1'd1)))
begin
count_frame_bits__thread90_frame_bits_3491 = count_frame_bits_thread_pre_split_frame_bits_33_reg;
end
/* count_frame_bits: %.thread90*/
/*   %frame_bits.3491 = phi i32 [ %166, %._crit_edge76 ], [ %frame_bits.33, %164 ]*/
else /* if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd0))) */
begin
count_frame_bits__thread90_frame_bits_3491 = count_frame_bits___crit_edge76_166;
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread90*/
/*   %frame_bits.3491 = phi i32 [ %166, %._crit_edge76 ], [ %frame_bits.33, %164 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_164_130) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_164_or_cond93 == 1'd1)))
begin
count_frame_bits__thread90_frame_bits_3491_reg <= count_frame_bits__thread90_frame_bits_3491;
if (reset == 1'b0 && ^(count_frame_bits__thread90_frame_bits_3491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread90_frame_bits_3491_reg"); $finish; end
end
/* count_frame_bits: %.thread90*/
/*   %frame_bits.3491 = phi i32 [ %166, %._crit_edge76 ], [ %frame_bits.33, %164 ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd0)))
begin
count_frame_bits__thread90_frame_bits_3491_reg <= count_frame_bits__thread90_frame_bits_3491;
if (reset == 1'b0 && ^(count_frame_bits__thread90_frame_bits_3491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread90_frame_bits_3491_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %.thread90*/
/*   %168 = add nsw i32 %frame_bits.3491, 6*/
begin
count_frame_bits__thread90_168 = (count_frame_bits__thread90_frame_bits_3491_reg + 32'd6);
end
end
always @(posedge clk) begin
/* count_frame_bits: %.thread90*/
/*   %168 = add nsw i32 %frame_bits.3491, 6*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread90_132))
begin
count_frame_bits__thread90_168_reg <= count_frame_bits__thread90_168;
if (reset == 1'b0 && ^(count_frame_bits__thread90_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits__thread90_168_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_thread_pre_split_127) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit14_131_reg == 1'd1)))
begin
count_frame_bits_169_frame_bits_35 = count_frame_bits_thread_pre_split_frame_bits_33_reg;
end
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
else if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd1)))
begin
count_frame_bits_169_frame_bits_35 = count_frame_bits___crit_edge76_166;
end
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB__thread90_132) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits_169_frame_bits_35 = count_frame_bits__thread90_168;
end
end
always @(posedge clk) begin
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB_thread_pre_split_127) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__loopexit14_131_reg == 1'd1)))
begin
count_frame_bits_169_frame_bits_35_reg <= count_frame_bits_169_frame_bits_35;
if (reset == 1'b0 && ^(count_frame_bits_169_frame_bits_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_169_frame_bits_35_reg"); $finish; end
end
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge76_131) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits___crit_edge76_167 == 1'd1)))
begin
count_frame_bits_169_frame_bits_35_reg <= count_frame_bits_169_frame_bits_35;
if (reset == 1'b0 && ^(count_frame_bits_169_frame_bits_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_169_frame_bits_35_reg"); $finish; end
end
/* count_frame_bits: %169*/
/*   %frame_bits.35 = phi i32 [ %168, %.thread90 ], [ %166, %._crit_edge76 ], [ %frame_bits.33, %thread-pre-split ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB__thread90_132) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits_169_frame_bits_35_reg <= count_frame_bits_169_frame_bits_35;
if (reset == 1'b0 && ^(count_frame_bits_169_frame_bits_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_169_frame_bits_35_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %169*/
/*   %170 = add nsw i32 %102, 1*/
begin
count_frame_bits_169_170 = (count_frame_bits_101_102_reg + 32'd1);
end
end
always @(posedge clk) begin
/* count_frame_bits: %169*/
/*   %170 = add nsw i32 %102, 1*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_169_133))
begin
count_frame_bits_169_170_reg <= count_frame_bits_169_170;
if (reset == 1'b0 && ^(count_frame_bits_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_169_170_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %169*/
/*   %exitcond56 = icmp eq i32 %170, %smax55*/
begin
count_frame_bits_169_exitcond56 = (count_frame_bits_169_170 == count_frame_bits__lr_ph27_smax55_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %169*/
/*   %exitcond56 = icmp eq i32 %170, %smax55*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_169_133))
begin
count_frame_bits_169_exitcond56_reg <= count_frame_bits_169_exitcond56;
if (reset == 1'b0 && ^(count_frame_bits_169_exitcond56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_169_exitcond56_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge28*/
/*   %frame_bits.16.lcssa = phi i32 [ %frame_bits.16.ph, %.preheader24 ], [ %frame_bits.35, %._crit_edge28.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader24_84 == 1'd0)))
begin
count_frame_bits___crit_edge28_frame_bits_16_lcssa = count_frame_bits__preheader24_frame_bits_16_ph_reg;
end
/* count_frame_bits: %._crit_edge28*/
/*   %frame_bits.16.lcssa = phi i32 [ %frame_bits.16.ph, %.preheader24 ], [ %frame_bits.35, %._crit_edge28.loopexit ]*/
else /* if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) & (memory_controller_waitrequest == 1'd0))) */
begin
count_frame_bits___crit_edge28_frame_bits_16_lcssa = count_frame_bits_169_frame_bits_35_reg;
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge28*/
/*   %frame_bits.16.lcssa = phi i32 [ %frame_bits.16.ph, %.preheader24 ], [ %frame_bits.35, %._crit_edge28.loopexit ]*/
if ((((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_56) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits__preheader24_84 == 1'd0)))
begin
count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg <= count_frame_bits___crit_edge28_frame_bits_16_lcssa;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_frame_bits_16_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg"); $finish; end
end
/* count_frame_bits: %._crit_edge28*/
/*   %frame_bits.16.lcssa = phi i32 [ %frame_bits.16.ph, %.preheader24 ], [ %frame_bits.35, %._crit_edge28.loopexit ]*/
if (((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_loopexit_134) & (memory_controller_waitrequest == 1'd0)))
begin
count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg <= count_frame_bits___crit_edge28_frame_bits_16_lcssa;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_frame_bits_16_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge28*/
/*   %171 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 10*/
begin
count_frame_bits___crit_edge28_171 = (arg_s + 40);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge28*/
/*   %171 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 10*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
count_frame_bits___crit_edge28_171_reg <= count_frame_bits___crit_edge28_171;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_171_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
begin
count_frame_bits___crit_edge28_172 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
count_frame_bits___crit_edge28_172_reg <= count_frame_bits___crit_edge28_172;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_172_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge28*/
/*   %173 = add nsw i32 %172, %frame_bits.16.lcssa*/
begin
count_frame_bits___crit_edge28_173 = (count_frame_bits___crit_edge28_172 + count_frame_bits___crit_edge28_frame_bits_16_lcssa_reg);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge28*/
/*   %173 = add nsw i32 %172, %frame_bits.16.lcssa*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
count_frame_bits___crit_edge28_173_reg <= count_frame_bits___crit_edge28_173;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_173_reg"); $finish; end
end
end
always @(*) begin
/* count_frame_bits: %._crit_edge28*/
/*   %174 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 9*/
begin
count_frame_bits___crit_edge28_174 = (arg_s + 36);
end
end
always @(posedge clk) begin
/* count_frame_bits: %._crit_edge28*/
/*   %174 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 9*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
count_frame_bits___crit_edge28_174_reg <= count_frame_bits___crit_edge28_174;
if (reset == 1'b0 && ^(count_frame_bits___crit_edge28_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits___crit_edge28_174_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_count_frame_bits_57_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* count_frame_bits: %57*/
/*   %58 = mul nsw i32 %46, 5*/
if ((lpm_mult_count_frame_bits_57_58_en == 1'd1))
begin
count_frame_bits_57_58_stage0_reg <= (count_frame_bits__loopexit8_46_reg * 32'd5);
end
end
always @(*) begin
lpm_mult_count_frame_bits_158_161_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* count_frame_bits: %158*/
/*   %161 = mul nsw i32 %160, 7*/
if ((lpm_mult_count_frame_bits_158_161_en == 1'd1))
begin
count_frame_bits_158_161_stage0_reg <= (count_frame_bits_158_160 * 32'd7);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* count_frame_bits: %._crit_edge28*/
/*   ret void*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_138))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_25))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_32))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_67))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_81))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_112))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_128))
begin
memory_controller_enable_a = 1'd1;
end
/* count_frame_bits: %._crit_edge28*/
/*   store i32 %173, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_1))
begin
memory_controller_address_a = count_frame_bits_0_1;
end
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_address_a = count_frame_bits_4_5;
end
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_address_a = count_frame_bits_8_10;
end
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11))
begin
memory_controller_address_a = count_frame_bits___crit_edge1_23;
end
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_25))
begin
memory_controller_address_a = count_frame_bits_42_scevgep36;
end
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_32))
begin
memory_controller_address_a = count_frame_bits_48_49;
end
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
memory_controller_address_a = count_frame_bits_60_scevgep30;
end
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_address_a = count_frame_bits_65_66;
end
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_address_a = count_frame_bits_72_73;
end
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_address_a = count_frame_bits__lr_ph27_88;
end
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
memory_controller_address_a = count_frame_bits_101_scevgep58;
end
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64))
begin
memory_controller_address_a = count_frame_bits_101_scevgep5960_reg;
end
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_67))
begin
memory_controller_address_a = count_frame_bits_101_scevgep5960_reg;
end
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
memory_controller_address_a = count_frame_bits__lr_ph27_98_reg;
end
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77))
begin
memory_controller_address_a = count_frame_bits_101_scevgep63_reg;
end
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_81))
begin
memory_controller_address_a = count_frame_bits_119_scevgep43;
end
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
memory_controller_address_a = count_frame_bits_122_scevgep45_phi_trans_insert_phi_trans_insert;
end
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
memory_controller_address_a = count_frame_bits_133_scevgep64;
end
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103))
begin
memory_controller_address_a = count_frame_bits__lr_ph27_95_reg;
end
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
memory_controller_address_a = count_frame_bits_142_scevgep57;
end
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_112))
begin
memory_controller_address_a = count_frame_bits_101_scevgep63_reg;
end
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
memory_controller_address_a = count_frame_bits_101_scevgep61_reg;
end
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_128))
begin
memory_controller_address_a = count_frame_bits_101_scevgep62_reg;
end
/* count_frame_bits: %._crit_edge28*/
/*   store i32 %173, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
memory_controller_address_a = count_frame_bits___crit_edge28_174_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_81))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_128))
begin
memory_controller_write_enable_a = 1'd0;
end
/* count_frame_bits: %._crit_edge28*/
/*   store i32 %173, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* count_frame_bits: %._crit_edge28*/
/*   store i32 %173, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
memory_controller_in_a = count_frame_bits___crit_edge28_173;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* count_frame_bits: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %4*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %8*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %._crit_edge1*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge1_11))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %42*/
/*   %43 = load i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_42_25))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %48*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_48_32))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %60*/
/*   %61 = load i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_60_43))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %65*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %72*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %.lr.ph27*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %101*/
/*   %103 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_101_61))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %._crit_edge69*/
/*   %.pre74 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge69_64))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %105*/
/*   %106 = load i32* %scevgep5960, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_105_67))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %.thread86*/
/*   %111 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread86_72))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %.lr.ph17*/
/*   %118 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph17_77))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %119*/
/*   %120 = load i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_119_81))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %122*/
/*   %.pre68.pre = load i32* %scevgep45.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_86))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %133*/
/*   %136 = load i32* %scevgep64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_133_96))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %.lr.ph22*/
/*   %141 = load i32*** %95, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph22_103))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %142*/
/*   %144 = load i32* %scevgep57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_109))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %146*/
/*   %147 = load i32** %scevgep63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_112))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %153*/
/*   %156 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_153_120))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %164*/
/*   %.pre.pre = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_164_128))
begin
memory_controller_size_a = 2'd2;
end
/* count_frame_bits: %._crit_edge28*/
/*   store i32 %173, i32* %174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_137))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_8))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_84))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_99))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_107))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_123))
begin
memory_controller_enable_b = 1'd1;
end
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_address_b = count_frame_bits_4__phi_trans_insert_phi_trans_insert;
end
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_address_b = count_frame_bits_8_14;
end
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_8))
begin
memory_controller_address_b = count_frame_bits_8_18_reg;
end
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
memory_controller_address_b = count_frame_bits_26_30;
end
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
memory_controller_address_b = count_frame_bits_35_37;
end
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
memory_controller_address_b = count_frame_bits__lr_ph11_40;
end
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29))
begin
memory_controller_address_b = count_frame_bits__loopexit8_45;
end
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35))
begin
memory_controller_address_b = count_frame_bits__preheader_52;
end
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
memory_controller_address_b = count_frame_bits__lr_ph_55;
end
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_address_b = count_frame_bits_65_69;
end
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_address_b = count_frame_bits_72_77;
end
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54))
begin
memory_controller_address_b = count_frame_bits__preheader24_82;
end
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_address_b = count_frame_bits__lr_ph27_85;
end
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58))
begin
memory_controller_address_b = count_frame_bits__lr_ph27_91_reg;
end
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_84))
begin
memory_controller_address_b = count_frame_bits_101_scevgep66_reg;
end
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90))
begin
memory_controller_address_b = count_frame_bits__lr_ph27_96_reg;
end
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_99))
begin
memory_controller_address_b = count_frame_bits_101_scevgep65_reg;
end
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_107))
begin
memory_controller_address_b = count_frame_bits_142_scevgep52;
end
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
memory_controller_address_b = count_frame_bits_146_scevgep53;
end
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_123))
begin
memory_controller_address_b = count_frame_bits__lr_ph27_94_reg;
end
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
memory_controller_address_b = count_frame_bits___crit_edge28_171;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_84))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_107))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_123))
begin
memory_controller_write_enable_b = 1'd0;
end
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* count_frame_bits: %4*/
/*   %.pre73.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_4_4))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_7))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %8*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_8_8))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %26*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_26_14))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %35*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_35_18))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.lr.ph11*/
/*   %41 = load %struct.TYPE_7__** %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph11_21))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.loopexit8*/
/*   %46 = load i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__loopexit8_29))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.preheader*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader_35))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.lr.ph*/
/*   %56 = load %struct.TYPE_7__** %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph_38))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %65*/
/*   %70 = load i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_65_46))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %72*/
/*   %78 = load i32* %77, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_72_49))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.preheader24*/
/*   %83 = load i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__preheader24_54))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.lr.ph27*/
/*   %86 = load %struct.TYPE_7__** %85, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_57))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.lr.ph27*/
/*   %92 = load i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__lr_ph27_58))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %122*/
/*   %.pre67.pre = load i32** %scevgep66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_122_84))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %.thread88*/
/*   %126 = load i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB__thread88_90))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %138*/
/*   %139 = load i32* %scevgep65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_138_99))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %142*/
/*   %143 = load i32** %scevgep52, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_142_107))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %146*/
/*   %148 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_146_114))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %158*/
/*   %159 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB_158_123))
begin
memory_controller_size_b = 2'd2;
end
/* count_frame_bits: %._crit_edge28*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_count_frame_bits_BB___crit_edge28_135))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  count_frame_bits_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_arg_s;
wire  count_frame_bits_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_memory_controller_address_a;
wire  count_frame_bits_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] count_frame_bits_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] count_frame_bits_memory_controller_out_a;
wire [1:0] count_frame_bits_memory_controller_size_a;
wire  count_frame_bits_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] count_frame_bits_memory_controller_address_b;
wire  count_frame_bits_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] count_frame_bits_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] count_frame_bits_memory_controller_out_b;
wire [1:0] count_frame_bits_memory_controller_size_b;
reg  count_frame_bits_memory_controller_waitrequest;
wire  count_frame_bits_finish;
reg  count_frame_bits_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


count_frame_bits count_frame_bits_inst (
	.memory_controller_enable_a (count_frame_bits_memory_controller_enable_a),
	.memory_controller_address_a (count_frame_bits_memory_controller_address_a),
	.memory_controller_write_enable_a (count_frame_bits_memory_controller_write_enable_a),
	.memory_controller_in_a (count_frame_bits_memory_controller_in_a),
	.memory_controller_size_a (count_frame_bits_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (count_frame_bits_memory_controller_enable_b),
	.memory_controller_address_b (count_frame_bits_memory_controller_address_b),
	.memory_controller_write_enable_b (count_frame_bits_memory_controller_write_enable_b),
	.memory_controller_in_b (count_frame_bits_memory_controller_in_b),
	.memory_controller_size_b (count_frame_bits_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (count_frame_bits_start),
	.finish (count_frame_bits_finish),
	.arg_s (count_frame_bits_arg_s)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (count_frame_bits_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
count_frame_bits_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_start"); $finish; end
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
count_frame_bits_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
count_frame_bits_arg_s <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to count_frame_bits_arg_s"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
begin
count_frame_bits_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
begin
count_frame_bits_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
count_frame_bits_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
count_frame_bits_finish_final = count_frame_bits_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = count_frame_bits_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = count_frame_bits_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = count_frame_bits_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = count_frame_bits_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = count_frame_bits_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = count_frame_bits_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = count_frame_bits_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = count_frame_bits_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = count_frame_bits_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = count_frame_bits_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = count_frame_bits_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = count_frame_bits_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = count_frame_bits_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = count_frame_bits_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = count_frame_bits_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = count_frame_bits_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = count_frame_bits_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = count_frame_bits_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = count_frame_bits_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @count_frame_bits(%struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = count_frame_bits_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
