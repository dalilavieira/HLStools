//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:34 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fwht
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_block,
	arg_output_block,
	arg_stride,
	arg_input_step,
	arg_intra
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_fwht_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_fwht_BB_0_2 = 6'd2;
parameter [5:0] LEGUP_F_fwht_BB_5_3 = 6'd3;
parameter [5:0] LEGUP_F_fwht_BB_5_4 = 6'd4;
parameter [5:0] LEGUP_F_fwht_BB_5_5 = 6'd5;
parameter [5:0] LEGUP_F_fwht_BB_5_6 = 6'd6;
parameter [5:0] LEGUP_F_fwht_BB_8_7 = 6'd7;
parameter [5:0] LEGUP_F_fwht_BB_8_8 = 6'd8;
parameter [5:0] LEGUP_F_fwht_BB_8_9 = 6'd9;
parameter [5:0] LEGUP_F_fwht_BB_8_10 = 6'd10;
parameter [5:0] LEGUP_F_fwht_BB_8_11 = 6'd11;
parameter [5:0] LEGUP_F_fwht_BB_22_12 = 6'd12;
parameter [5:0] LEGUP_F_fwht_BB_22_13 = 6'd13;
parameter [5:0] LEGUP_F_fwht_BB_22_14 = 6'd14;
parameter [5:0] LEGUP_F_fwht_BB_22_15 = 6'd15;
parameter [5:0] LEGUP_F_fwht_BB_22_16 = 6'd16;
parameter [5:0] LEGUP_F_fwht_BB_35_17 = 6'd17;
parameter [5:0] LEGUP_F_fwht_BB_35_18 = 6'd18;
parameter [5:0] LEGUP_F_fwht_BB_35_19 = 6'd19;
parameter [5:0] LEGUP_F_fwht_BB_35_20 = 6'd20;
parameter [5:0] LEGUP_F_fwht_BB_35_21 = 6'd21;
parameter [5:0] LEGUP_F_fwht_BB_35_22 = 6'd22;
parameter [5:0] LEGUP_F_fwht_BB_35_23 = 6'd23;
parameter [5:0] LEGUP_F_fwht_BB__preheader_preheader_24 = 6'd24;
parameter [5:0] LEGUP_F_fwht_BB__preheader_25 = 6'd25;
parameter [5:0] LEGUP_F_fwht_BB__preheader_26 = 6'd26;
parameter [5:0] LEGUP_F_fwht_BB__preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_fwht_BB__preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_fwht_BB__preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_fwht_BB__preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_fwht_BB__preheader_31 = 6'd31;
parameter [5:0] LEGUP_F_fwht_BB__preheader_32 = 6'd32;
parameter [5:0] LEGUP_F_fwht_BB__preheader_33 = 6'd33;
parameter [5:0] LEGUP_F_fwht_BB__preheader_34 = 6'd34;
parameter [5:0] LEGUP_F_fwht_BB__preheader_35 = 6'd35;
parameter [5:0] LEGUP_F_fwht_BB_87_36 = 6'd36;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_block;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_output_block;
input [31:0] arg_stride;
input [31:0] arg_input_step;
input [31:0] arg_intra;
reg [5:0] cur_state;
reg  fwht_0_1;
reg  fwht_0_1_reg;
reg [31:0] fwht_0_2;
reg [31:0] fwht_0_2_reg;
reg [31:0] fwht_0_3;
reg [31:0] fwht_0_3_reg;
reg  fwht_0_4;
reg  fwht_0_4_reg;
reg [31:0] fwht_5_i_010;
reg [31:0] fwht_5_i_010_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_6_reg;
reg [31:0] fwht_5_tmp25;
reg [31:0] fwht_5_tmp25_reg;
reg [31:0] fwht_5_tmp2664;
reg [31:0] fwht_5_tmp2664_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep27_reg;
reg [31:0] fwht_5_tmp2865;
reg [31:0] fwht_5_tmp2865_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep29_reg;
reg [31:0] fwht_5_tmp3066;
reg [31:0] fwht_5_tmp3066_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep31_reg;
reg [31:0] fwht_5_tmp3267;
reg [31:0] fwht_5_tmp3267_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep33_reg;
reg [31:0] fwht_5_tmp3468;
reg [31:0] fwht_5_tmp3468_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep35_reg;
reg [31:0] fwht_5_tmp3669;
reg [31:0] fwht_5_tmp3669_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep37_reg;
reg [31:0] fwht_5_tmp3870;
reg [31:0] fwht_5_tmp3870_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_out_09;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_out_09_reg;
reg [31:0] fwht_5_tmp42;
reg [31:0] fwht_5_tmp42_reg;
reg [31:0] fwht_5_tmp43;
reg [31:0] fwht_5_tmp43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep44_reg;
reg [31:0] fwht_5_tmp47;
reg [31:0] fwht_5_tmp47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep48_reg;
reg [31:0] fwht_5_tmp51;
reg [31:0] fwht_5_tmp51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_tmp_08;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_5_tmp_08_reg;
reg [31:0] fwht_5_7;
reg [31:0] fwht_5_7_reg;
reg [31:0] fwht_8_tmp53;
reg [31:0] fwht_8_tmp53_reg;
reg [31:0] fwht_8_tmp49;
reg [31:0] fwht_8_tmp49_reg;
reg [31:0] fwht_8_tmp45;
reg [31:0] fwht_8_tmp45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_scevgep46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_8_9_reg;
reg [31:0] fwht_8_10;
reg [31:0] fwht_8_10_reg;
reg [31:0] fwht_8_11;
reg [31:0] fwht_8_11_reg;
reg [31:0] fwht_8_12;
reg [31:0] fwht_8_12_reg;
reg [31:0] fwht_8_13;
reg [31:0] fwht_8_13_reg;
reg [31:0] fwht_8_14;
reg [31:0] fwht_8_14_reg;
reg [31:0] fwht_8_15;
reg [31:0] fwht_8_15_reg;
reg [31:0] fwht_8_16;
reg [31:0] fwht_8_16_reg;
reg [31:0] fwht_8_17;
reg [31:0] fwht_8_17_reg;
reg [31:0] fwht_8_18;
reg [31:0] fwht_8_18_reg;
reg [31:0] fwht_8_19;
reg [31:0] fwht_8_19_reg;
reg [31:0] fwht_8_20;
reg [31:0] fwht_8_20_reg;
reg [31:0] fwht_8_21;
reg [31:0] fwht_8_21_reg;
reg [31:0] fwht_22_tmp61;
reg [31:0] fwht_22_tmp61_reg;
reg [31:0] fwht_22_tmp59;
reg [31:0] fwht_22_tmp59_reg;
reg [31:0] fwht_22_tmp57;
reg [31:0] fwht_22_tmp57_reg;
reg [31:0] fwht_22_tmp55;
reg [31:0] fwht_22_tmp55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_22_scevgep56_reg;
reg [31:0] fwht_22_23;
reg [31:0] fwht_22_23_reg;
reg [31:0] fwht_22_24;
reg [31:0] fwht_22_24_reg;
reg [31:0] fwht_22_25;
reg [31:0] fwht_22_25_reg;
reg [31:0] fwht_22_26;
reg [31:0] fwht_22_26_reg;
reg [31:0] fwht_22_27;
reg [31:0] fwht_22_27_reg;
reg [31:0] fwht_22_28;
reg [31:0] fwht_22_28_reg;
reg [31:0] fwht_22_29;
reg [31:0] fwht_22_29_reg;
reg [31:0] fwht_22_30;
reg [31:0] fwht_22_30_reg;
reg [31:0] fwht_22_31;
reg [31:0] fwht_22_31_reg;
reg [31:0] fwht_22_32;
reg [31:0] fwht_22_32_reg;
reg [31:0] fwht_22_33;
reg [31:0] fwht_22_33_reg;
reg [31:0] fwht_22_34;
reg [31:0] fwht_22_34_reg;
reg [31:0] fwht_35_workspace1_7_0;
reg [31:0] fwht_35_workspace1_7_0_reg;
reg [31:0] fwht_35__pn;
reg [31:0] fwht_35__pn_reg;
reg [31:0] fwht_35_workspace1_5_0;
reg [31:0] fwht_35_workspace1_5_0_reg;
reg [31:0] fwht_35__pn1;
reg [31:0] fwht_35__pn1_reg;
reg [31:0] fwht_35_workspace1_3_0;
reg [31:0] fwht_35_workspace1_3_0_reg;
reg [31:0] fwht_35__pn2;
reg [31:0] fwht_35__pn2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_35__pn3_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_35__pn3_in_reg;
reg [31:0] fwht_35__pn3;
reg [31:0] fwht_35__pn3_reg;
reg [31:0] fwht_35__pn4;
reg [31:0] fwht_35__pn4_reg;
reg [31:0] fwht_35_workspace1_0_0;
reg [31:0] fwht_35_workspace1_0_0_reg;
reg [31:0] fwht_35_workspace1_1_0;
reg [31:0] fwht_35_workspace1_1_0_reg;
reg [31:0] fwht_35_workspace1_2_0;
reg [31:0] fwht_35_workspace1_2_0_reg;
reg [31:0] fwht_35_workspace1_4_0;
reg [31:0] fwht_35_workspace1_4_0_reg;
reg [31:0] fwht_35_workspace1_6_0;
reg [31:0] fwht_35_workspace1_6_0_reg;
reg [31:0] fwht_35_36;
reg [31:0] fwht_35_36_reg;
reg [31:0] fwht_35_37;
reg [31:0] fwht_35_37_reg;
reg [31:0] fwht_35_38;
reg [31:0] fwht_35_38_reg;
reg [31:0] fwht_35_39;
reg [31:0] fwht_35_39_reg;
reg [31:0] fwht_35_40;
reg [31:0] fwht_35_40_reg;
reg [31:0] fwht_35_41;
reg [31:0] fwht_35_41_reg;
reg [31:0] fwht_35_42;
reg [31:0] fwht_35_42_reg;
reg [31:0] fwht_35_43;
reg [31:0] fwht_35_43_reg;
reg [31:0] fwht_35_44;
reg [31:0] fwht_35_44_reg;
reg [31:0] fwht_35_45;
reg [31:0] fwht_35_45_reg;
reg [31:0] fwht_35_46;
reg [31:0] fwht_35_46_reg;
reg [31:0] fwht_35_47;
reg [31:0] fwht_35_47_reg;
reg [31:0] fwht_35_48;
reg [31:0] fwht_35_48_reg;
reg [31:0] fwht_35_49;
reg [31:0] fwht_35_49_reg;
reg [31:0] fwht_35_50;
reg [31:0] fwht_35_50_reg;
reg [31:0] fwht_35_51;
reg [31:0] fwht_35_51_reg;
reg [31:0] fwht_35_52;
reg [31:0] fwht_35_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_35_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_35_53_reg;
reg  fwht_35_exitcond24;
reg  fwht_35_exitcond24_reg;
reg [31:0] fwht__preheader_i_17;
reg [31:0] fwht__preheader_i_17_reg;
reg [31:0] fwht__preheader_tmp;
reg [31:0] fwht__preheader_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep_reg;
reg [31:0] fwht__preheader_tmp11;
reg [31:0] fwht__preheader_tmp11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep12_reg;
reg [31:0] fwht__preheader_tmp13;
reg [31:0] fwht__preheader_tmp13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep14_reg;
reg [31:0] fwht__preheader_tmp15;
reg [31:0] fwht__preheader_tmp15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep16_reg;
reg [31:0] fwht__preheader_tmp17;
reg [31:0] fwht__preheader_tmp17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep18_reg;
reg [31:0] fwht__preheader_tmp19;
reg [31:0] fwht__preheader_tmp19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep20_reg;
reg [31:0] fwht__preheader_tmp21;
reg [31:0] fwht__preheader_tmp21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_scevgep22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_out_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht__preheader_out_16_reg;
reg [31:0] fwht__preheader_54;
reg [31:0] fwht__preheader_54_reg;
reg [31:0] fwht__preheader_55;
reg [31:0] fwht__preheader_55_reg;
reg [31:0] fwht__preheader_56;
reg [31:0] fwht__preheader_56_reg;
reg [31:0] fwht__preheader_57;
reg [31:0] fwht__preheader_57_reg;
reg [31:0] fwht__preheader_58;
reg [31:0] fwht__preheader_58_reg;
reg [31:0] fwht__preheader_59;
reg [31:0] fwht__preheader_59_reg;
reg [31:0] fwht__preheader_60;
reg [31:0] fwht__preheader_60_reg;
reg [31:0] fwht__preheader_61;
reg [31:0] fwht__preheader_61_reg;
reg [31:0] fwht__preheader_62;
reg [31:0] fwht__preheader_62_reg;
reg [31:0] fwht__preheader_63;
reg [31:0] fwht__preheader_63_reg;
reg [31:0] fwht__preheader_64;
reg [31:0] fwht__preheader_64_reg;
reg [31:0] fwht__preheader_65;
reg [31:0] fwht__preheader_65_reg;
reg [31:0] fwht__preheader_66;
reg [31:0] fwht__preheader_66_reg;
reg [31:0] fwht__preheader_67;
reg [31:0] fwht__preheader_67_reg;
reg [31:0] fwht__preheader_68;
reg [31:0] fwht__preheader_68_reg;
reg [31:0] fwht__preheader_69;
reg [31:0] fwht__preheader_69_reg;
reg [31:0] fwht__preheader_70;
reg [31:0] fwht__preheader_70_reg;
reg [31:0] fwht__preheader_71;
reg [31:0] fwht__preheader_71_reg;
reg [31:0] fwht__preheader_72;
reg [31:0] fwht__preheader_72_reg;
reg [31:0] fwht__preheader_73;
reg [31:0] fwht__preheader_73_reg;
reg [31:0] fwht__preheader_74;
reg [31:0] fwht__preheader_74_reg;
reg [31:0] fwht__preheader_75;
reg [31:0] fwht__preheader_75_reg;
reg [31:0] fwht__preheader_76;
reg [31:0] fwht__preheader_76_reg;
reg [31:0] fwht__preheader_77;
reg [31:0] fwht__preheader_77_reg;
reg [31:0] fwht__preheader_78;
reg [31:0] fwht__preheader_78_reg;
reg [31:0] fwht__preheader_79;
reg [31:0] fwht__preheader_79_reg;
reg [31:0] fwht__preheader_80;
reg [31:0] fwht__preheader_80_reg;
reg [31:0] fwht__preheader_81;
reg [31:0] fwht__preheader_81_reg;
reg [31:0] fwht__preheader_82;
reg [31:0] fwht__preheader_82_reg;
reg [31:0] fwht__preheader_83;
reg [31:0] fwht__preheader_83_reg;
reg [31:0] fwht__preheader_84;
reg [31:0] fwht__preheader_84_reg;
reg [31:0] fwht__preheader_85;
reg [31:0] fwht__preheader_85_reg;
reg [31:0] fwht__preheader_86;
reg [31:0] fwht__preheader_86_reg;
reg  fwht__preheader_exitcond;
reg  fwht__preheader_exitcond_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fwht_0_3_en;
reg [31:0] fwht_0_3_stage0_reg;
reg  lpm_mult_fwht_5_tmp42_en;
reg [31:0] fwht_5_tmp42_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_5_3;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_5_3;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_5_4;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_5_4;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (fwht_0_4_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (fwht_0_4_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_22_12;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_17;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_22_12;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_22_13;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_22_13;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_22_14;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_22_14;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_22_15;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_22_15;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_22_16;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_22_16;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_22_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_17;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_17;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_21;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_21;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_22;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_22;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_35_23;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_35_23;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_35_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB_5_3;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_preheader_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_preheader_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_26;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_26;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_27;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_27;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_28;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_28;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_33;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_33;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_34;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_34;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_35;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB__preheader_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_35;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)) & (fwht__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_87_36;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_87_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)) & (fwht__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fwht_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_87_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht_BB_87_36;
if (reset == 1'b0 && ^(LEGUP_F_fwht_BB_87_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht_BB_87_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fwht: %0*/
/*   %1 = icmp ne i32 %intra, 0*/
begin
fwht_0_1 = (arg_intra != 32'd0);
end
end
always @(posedge clk) begin
/* fwht: %0*/
/*   %1 = icmp ne i32 %intra, 0*/
if ((cur_state == LEGUP_F_fwht_BB_0_1))
begin
fwht_0_1_reg <= fwht_0_1;
if (reset == 1'b0 && ^(fwht_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_0_1_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %0*/
/*   %2 = select i1 %1, i32 256, i32 0*/
begin
fwht_0_2 = (fwht_0_1 ? 32'd256 : 32'd0);
end
end
always @(posedge clk) begin
/* fwht: %0*/
/*   %2 = select i1 %1, i32 256, i32 0*/
if ((cur_state == LEGUP_F_fwht_BB_0_1))
begin
fwht_0_2_reg <= fwht_0_2;
if (reset == 1'b0 && ^(fwht_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_0_2_reg"); $finish; end
end
end
always @(*) begin
fwht_0_3 = fwht_0_3_stage0_reg;
end
always @(posedge clk) begin
/* fwht: %0*/
/*   %3 = mul i32 %input_step, %stride*/
if ((cur_state == LEGUP_F_fwht_BB_0_2))
begin
fwht_0_3_reg <= fwht_0_3;
if (reset == 1'b0 && ^(fwht_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_0_3_reg"); $finish; end
end
/* fwht: %0*/
/*   %3 = mul i32 %input_step, %stride*/
if ((cur_state == LEGUP_F_fwht_BB_0_2))
begin
fwht_0_3_reg <= fwht_0_3;
if (reset == 1'b0 && ^(fwht_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %0*/
/*   %4 = icmp eq i32 %input_step, 1*/
begin
fwht_0_4 = (arg_input_step == 32'd1);
end
end
always @(posedge clk) begin
/* fwht: %0*/
/*   %4 = icmp eq i32 %input_step, 1*/
if ((cur_state == LEGUP_F_fwht_BB_0_1))
begin
fwht_0_4_reg <= fwht_0_4;
if (reset == 1'b0 && ^(fwht_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %i.010 = phi i32 [ 0, %0 ], [ %52, %35 ]*/
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_5_i_010 = 32'd0;
end
/* fwht: %5*/
/*   %i.010 = phi i32 [ 0, %0 ], [ %52, %35 ]*/
else /* if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd0))) */
begin
fwht_5_i_010 = fwht_35_52_reg;
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %i.010 = phi i32 [ 0, %0 ], [ %52, %35 ]*/
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_5_i_010_reg <= fwht_5_i_010;
if (reset == 1'b0 && ^(fwht_5_i_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_i_010_reg"); $finish; end
end
/* fwht: %5*/
/*   %i.010 = phi i32 [ 0, %0 ], [ %52, %35 ]*/
if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd0)))
begin
fwht_5_i_010_reg <= fwht_5_i_010;
if (reset == 1'b0 && ^(fwht_5_i_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_i_010_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %6 = phi i32* [ %block, %0 ], [ %53, %35 ]*/
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_5_6 = arg_block;
end
/* fwht: %5*/
/*   %6 = phi i32* [ %block, %0 ], [ %53, %35 ]*/
else /* if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd0))) */
begin
fwht_5_6 = fwht_35_53_reg;
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %6 = phi i32* [ %block, %0 ], [ %53, %35 ]*/
if (((cur_state == LEGUP_F_fwht_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_5_6_reg <= fwht_5_6;
if (reset == 1'b0 && ^(fwht_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_6_reg"); $finish; end
end
/* fwht: %5*/
/*   %6 = phi i32* [ %block, %0 ], [ %53, %35 ]*/
if ((((cur_state == LEGUP_F_fwht_BB_35_23) & (memory_controller_waitrequest == 1'd0)) & (fwht_35_exitcond24_reg == 1'd0)))
begin
fwht_5_6_reg <= fwht_5_6;
if (reset == 1'b0 && ^(fwht_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_6_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp25 = shl i32 %i.010, 3*/
begin
fwht_5_tmp25 = (fwht_5_i_010_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp25 = shl i32 %i.010, 3*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp25_reg <= fwht_5_tmp25;
if (reset == 1'b0 && ^(fwht_5_tmp25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp25_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp2664 = or i32 %tmp25, 1*/
begin
fwht_5_tmp2664 = (fwht_5_tmp25 | 32'd1);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp2664 = or i32 %tmp25, 1*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp2664_reg <= fwht_5_tmp2664;
if (reset == 1'b0 && ^(fwht_5_tmp2664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp2664_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep27 = getelementptr i32* %output_block, i32 %tmp2664*/
begin
fwht_5_scevgep27 = (arg_output_block + (4 * fwht_5_tmp2664));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep27 = getelementptr i32* %output_block, i32 %tmp2664*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep27_reg <= fwht_5_scevgep27;
if (reset == 1'b0 && ^(fwht_5_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep27_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp2865 = or i32 %tmp25, 2*/
begin
fwht_5_tmp2865 = (fwht_5_tmp25 | 32'd2);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp2865 = or i32 %tmp25, 2*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp2865_reg <= fwht_5_tmp2865;
if (reset == 1'b0 && ^(fwht_5_tmp2865) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp2865_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep29 = getelementptr i32* %output_block, i32 %tmp2865*/
begin
fwht_5_scevgep29 = (arg_output_block + (4 * fwht_5_tmp2865));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep29 = getelementptr i32* %output_block, i32 %tmp2865*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep29_reg <= fwht_5_scevgep29;
if (reset == 1'b0 && ^(fwht_5_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep29_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp3066 = or i32 %tmp25, 3*/
begin
fwht_5_tmp3066 = (fwht_5_tmp25 | 32'd3);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp3066 = or i32 %tmp25, 3*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp3066_reg <= fwht_5_tmp3066;
if (reset == 1'b0 && ^(fwht_5_tmp3066) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp3066_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep31 = getelementptr i32* %output_block, i32 %tmp3066*/
begin
fwht_5_scevgep31 = (arg_output_block + (4 * fwht_5_tmp3066));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep31 = getelementptr i32* %output_block, i32 %tmp3066*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep31_reg <= fwht_5_scevgep31;
if (reset == 1'b0 && ^(fwht_5_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep31_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp3267 = or i32 %tmp25, 4*/
begin
fwht_5_tmp3267 = (fwht_5_tmp25 | 32'd4);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp3267 = or i32 %tmp25, 4*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp3267_reg <= fwht_5_tmp3267;
if (reset == 1'b0 && ^(fwht_5_tmp3267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp3267_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep33 = getelementptr i32* %output_block, i32 %tmp3267*/
begin
fwht_5_scevgep33 = (arg_output_block + (4 * fwht_5_tmp3267));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep33 = getelementptr i32* %output_block, i32 %tmp3267*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep33_reg <= fwht_5_scevgep33;
if (reset == 1'b0 && ^(fwht_5_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep33_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp3468 = or i32 %tmp25, 5*/
begin
fwht_5_tmp3468 = (fwht_5_tmp25 | 32'd5);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp3468 = or i32 %tmp25, 5*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp3468_reg <= fwht_5_tmp3468;
if (reset == 1'b0 && ^(fwht_5_tmp3468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp3468_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep35 = getelementptr i32* %output_block, i32 %tmp3468*/
begin
fwht_5_scevgep35 = (arg_output_block + (4 * fwht_5_tmp3468));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep35 = getelementptr i32* %output_block, i32 %tmp3468*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep35_reg <= fwht_5_scevgep35;
if (reset == 1'b0 && ^(fwht_5_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep35_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp3669 = or i32 %tmp25, 6*/
begin
fwht_5_tmp3669 = (fwht_5_tmp25 | 32'd6);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp3669 = or i32 %tmp25, 6*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp3669_reg <= fwht_5_tmp3669;
if (reset == 1'b0 && ^(fwht_5_tmp3669) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp3669_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep37 = getelementptr i32* %output_block, i32 %tmp3669*/
begin
fwht_5_scevgep37 = (arg_output_block + (4 * fwht_5_tmp3669));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep37 = getelementptr i32* %output_block, i32 %tmp3669*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep37_reg <= fwht_5_scevgep37;
if (reset == 1'b0 && ^(fwht_5_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep37_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp3870 = or i32 %tmp25, 7*/
begin
fwht_5_tmp3870 = (fwht_5_tmp25 | 32'd7);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp3870 = or i32 %tmp25, 7*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_tmp3870_reg <= fwht_5_tmp3870;
if (reset == 1'b0 && ^(fwht_5_tmp3870) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp3870_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep39 = getelementptr i32* %output_block, i32 %tmp3870*/
begin
fwht_5_scevgep39 = (arg_output_block + (4 * fwht_5_tmp3870));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep39 = getelementptr i32* %output_block, i32 %tmp3870*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_scevgep39_reg <= fwht_5_scevgep39;
if (reset == 1'b0 && ^(fwht_5_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep39_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %out.09 = getelementptr i32* %output_block, i32 %tmp25*/
begin
fwht_5_out_09 = (arg_output_block + (4 * fwht_5_tmp25));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %out.09 = getelementptr i32* %output_block, i32 %tmp25*/
if ((cur_state == LEGUP_F_fwht_BB_5_3))
begin
fwht_5_out_09_reg <= fwht_5_out_09;
if (reset == 1'b0 && ^(fwht_5_out_09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_out_09_reg"); $finish; end
end
end
always @(*) begin
fwht_5_tmp42 = fwht_5_tmp42_stage0_reg;
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp42 = mul i32 %3, %i.010*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp42_reg <= fwht_5_tmp42;
if (reset == 1'b0 && ^(fwht_5_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp42_reg"); $finish; end
end
/* fwht: %5*/
/*   %tmp42 = mul i32 %3, %i.010*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp42_reg <= fwht_5_tmp42;
if (reset == 1'b0 && ^(fwht_5_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp42_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp43 = add i32 %tmp42, 2*/
begin
fwht_5_tmp43 = (fwht_5_tmp42 + 32'd2);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp43 = add i32 %tmp42, 2*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp43_reg <= fwht_5_tmp43;
if (reset == 1'b0 && ^(fwht_5_tmp43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp43_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep44 = getelementptr i32* %block, i32 %tmp43*/
begin
fwht_5_scevgep44 = (arg_block + (4 * fwht_5_tmp43_reg));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep44 = getelementptr i32* %block, i32 %tmp43*/
if ((cur_state == LEGUP_F_fwht_BB_5_5))
begin
fwht_5_scevgep44_reg <= fwht_5_scevgep44;
if (reset == 1'b0 && ^(fwht_5_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep44_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp47 = add i32 %tmp42, 4*/
begin
fwht_5_tmp47 = (fwht_5_tmp42 + 32'd4);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp47 = add i32 %tmp42, 4*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp47_reg <= fwht_5_tmp47;
if (reset == 1'b0 && ^(fwht_5_tmp47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp47_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp47*/
begin
fwht_5_scevgep48 = (arg_block + (4 * fwht_5_tmp47_reg));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp47*/
if ((cur_state == LEGUP_F_fwht_BB_5_5))
begin
fwht_5_scevgep48_reg <= fwht_5_scevgep48;
if (reset == 1'b0 && ^(fwht_5_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep48_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp51 = add i32 %tmp42, 6*/
begin
fwht_5_tmp51 = (fwht_5_tmp42 + 32'd6);
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp51 = add i32 %tmp42, 6*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp51_reg <= fwht_5_tmp51;
if (reset == 1'b0 && ^(fwht_5_tmp51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp51_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %scevgep52 = getelementptr i32* %block, i32 %tmp51*/
begin
fwht_5_scevgep52 = (arg_block + (4 * fwht_5_tmp51_reg));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %scevgep52 = getelementptr i32* %block, i32 %tmp51*/
if ((cur_state == LEGUP_F_fwht_BB_5_5))
begin
fwht_5_scevgep52_reg <= fwht_5_scevgep52;
if (reset == 1'b0 && ^(fwht_5_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %tmp.08 = getelementptr i32* %block, i32 %tmp42*/
begin
fwht_5_tmp_08 = (arg_block + (4 * fwht_5_tmp42));
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp.08 = getelementptr i32* %block, i32 %tmp42*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
fwht_5_tmp_08_reg <= fwht_5_tmp_08;
if (reset == 1'b0 && ^(fwht_5_tmp_08) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_tmp_08_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
begin
fwht_5_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_5_6))
begin
fwht_5_7_reg <= fwht_5_7;
if (reset == 1'b0 && ^(fwht_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_5_7_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %tmp53 = add i32 %tmp42, 7*/
begin
fwht_8_tmp53 = (fwht_5_tmp42_reg + 32'd7);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %tmp53 = add i32 %tmp42, 7*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
fwht_8_tmp53_reg <= fwht_8_tmp53;
if (reset == 1'b0 && ^(fwht_8_tmp53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_tmp53_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %tmp49 = add i32 %tmp42, 5*/
begin
fwht_8_tmp49 = (fwht_5_tmp42_reg + 32'd5);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %tmp49 = add i32 %tmp42, 5*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
fwht_8_tmp49_reg <= fwht_8_tmp49;
if (reset == 1'b0 && ^(fwht_8_tmp49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_tmp49_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %tmp45 = add i32 %tmp42, 3*/
begin
fwht_8_tmp45 = (fwht_5_tmp42_reg + 32'd3);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %tmp45 = add i32 %tmp42, 3*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
fwht_8_tmp45_reg <= fwht_8_tmp45;
if (reset == 1'b0 && ^(fwht_8_tmp45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_tmp45_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %scevgep54 = getelementptr i32* %block, i32 %tmp53*/
begin
fwht_8_scevgep54 = (arg_block + (4 * fwht_8_tmp53_reg));
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %scevgep54 = getelementptr i32* %block, i32 %tmp53*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
fwht_8_scevgep54_reg <= fwht_8_scevgep54;
if (reset == 1'b0 && ^(fwht_8_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_scevgep54_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp49*/
begin
fwht_8_scevgep50 = (arg_block + (4 * fwht_8_tmp49_reg));
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp49*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
fwht_8_scevgep50_reg <= fwht_8_scevgep50;
if (reset == 1'b0 && ^(fwht_8_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp45*/
begin
fwht_8_scevgep46 = (arg_block + (4 * fwht_8_tmp45_reg));
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp45*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
fwht_8_scevgep46_reg <= fwht_8_scevgep46;
if (reset == 1'b0 && ^(fwht_8_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %9 = getelementptr inbounds i32* %6, i32 1*/
begin
fwht_8_9 = (fwht_5_6_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %9 = getelementptr inbounds i32* %6, i32 1*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
fwht_8_9_reg <= fwht_8_9;
if (reset == 1'b0 && ^(fwht_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_9_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
begin
fwht_8_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
fwht_8_10_reg <= fwht_8_10;
if (reset == 1'b0 && ^(fwht_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_10_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
begin
fwht_8_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_10))
begin
fwht_8_11_reg <= fwht_8_11;
if (reset == 1'b0 && ^(fwht_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_11_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %12 = add nsw i32 %11, %10*/
begin
fwht_8_12 = (fwht_8_11 + fwht_8_10_reg);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %12 = add nsw i32 %11, %10*/
if ((cur_state == LEGUP_F_fwht_BB_8_10))
begin
fwht_8_12_reg <= fwht_8_12;
if (reset == 1'b0 && ^(fwht_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_12_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %13 = sub nsw i32 %10, %11*/
begin
fwht_8_13 = (fwht_8_10_reg - fwht_8_11);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %13 = sub nsw i32 %10, %11*/
if ((cur_state == LEGUP_F_fwht_BB_8_10))
begin
fwht_8_13_reg <= fwht_8_13;
if (reset == 1'b0 && ^(fwht_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_13_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
fwht_8_14 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
fwht_8_14_reg <= fwht_8_14;
if (reset == 1'b0 && ^(fwht_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_14_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
begin
fwht_8_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_15_reg <= fwht_8_15;
if (reset == 1'b0 && ^(fwht_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_15_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %16 = add nsw i32 %15, %14*/
begin
fwht_8_16 = (fwht_8_15 + fwht_8_14_reg);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %16 = add nsw i32 %15, %14*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_16_reg <= fwht_8_16;
if (reset == 1'b0 && ^(fwht_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_16_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %17 = sub nsw i32 %14, %15*/
begin
fwht_8_17 = (fwht_8_14_reg - fwht_8_15);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %17 = sub nsw i32 %14, %15*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_17_reg <= fwht_8_17;
if (reset == 1'b0 && ^(fwht_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_17_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
begin
fwht_8_18 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_10))
begin
fwht_8_18_reg <= fwht_8_18;
if (reset == 1'b0 && ^(fwht_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_18_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
begin
fwht_8_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_19_reg <= fwht_8_19;
if (reset == 1'b0 && ^(fwht_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_19_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %20 = add nsw i32 %19, %18*/
begin
fwht_8_20 = (fwht_8_19 + fwht_8_18_reg);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %20 = add nsw i32 %19, %18*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_20_reg <= fwht_8_20;
if (reset == 1'b0 && ^(fwht_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_20_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %8*/
/*   %21 = sub nsw i32 %18, %19*/
begin
fwht_8_21 = (fwht_8_18_reg - fwht_8_19);
end
end
always @(posedge clk) begin
/* fwht: %8*/
/*   %21 = sub nsw i32 %18, %19*/
if ((cur_state == LEGUP_F_fwht_BB_8_11))
begin
fwht_8_21_reg <= fwht_8_21;
if (reset == 1'b0 && ^(fwht_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_8_21_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %tmp61 = add i32 %tmp42, 14*/
begin
fwht_22_tmp61 = (fwht_5_tmp42_reg + 32'd14);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %tmp61 = add i32 %tmp42, 14*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
fwht_22_tmp61_reg <= fwht_22_tmp61;
if (reset == 1'b0 && ^(fwht_22_tmp61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_tmp61_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %tmp59 = add i32 %tmp42, 12*/
begin
fwht_22_tmp59 = (fwht_5_tmp42_reg + 32'd12);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %tmp59 = add i32 %tmp42, 12*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
fwht_22_tmp59_reg <= fwht_22_tmp59;
if (reset == 1'b0 && ^(fwht_22_tmp59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_tmp59_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %tmp57 = add i32 %tmp42, 10*/
begin
fwht_22_tmp57 = (fwht_5_tmp42_reg + 32'd10);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %tmp57 = add i32 %tmp42, 10*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
fwht_22_tmp57_reg <= fwht_22_tmp57;
if (reset == 1'b0 && ^(fwht_22_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %tmp55 = add i32 %tmp42, 8*/
begin
fwht_22_tmp55 = (fwht_5_tmp42_reg + 32'd8);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %tmp55 = add i32 %tmp42, 8*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
fwht_22_tmp55_reg <= fwht_22_tmp55;
if (reset == 1'b0 && ^(fwht_22_tmp55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_tmp55_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %scevgep62 = getelementptr i32* %block, i32 %tmp61*/
begin
fwht_22_scevgep62 = (arg_block + (4 * fwht_22_tmp61_reg));
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %scevgep62 = getelementptr i32* %block, i32 %tmp61*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
fwht_22_scevgep62_reg <= fwht_22_scevgep62;
if (reset == 1'b0 && ^(fwht_22_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_scevgep62_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %scevgep60 = getelementptr i32* %block, i32 %tmp59*/
begin
fwht_22_scevgep60 = (arg_block + (4 * fwht_22_tmp59_reg));
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %scevgep60 = getelementptr i32* %block, i32 %tmp59*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
fwht_22_scevgep60_reg <= fwht_22_scevgep60;
if (reset == 1'b0 && ^(fwht_22_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_scevgep60_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %scevgep58 = getelementptr i32* %block, i32 %tmp57*/
begin
fwht_22_scevgep58 = (arg_block + (4 * fwht_22_tmp57_reg));
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %scevgep58 = getelementptr i32* %block, i32 %tmp57*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
fwht_22_scevgep58_reg <= fwht_22_scevgep58;
if (reset == 1'b0 && ^(fwht_22_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %scevgep56 = getelementptr i32* %block, i32 %tmp55*/
begin
fwht_22_scevgep56 = (arg_block + (4 * fwht_22_tmp55_reg));
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %scevgep56 = getelementptr i32* %block, i32 %tmp55*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
fwht_22_scevgep56_reg <= fwht_22_scevgep56;
if (reset == 1'b0 && ^(fwht_22_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_scevgep56_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
fwht_22_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
fwht_22_23_reg <= fwht_22_23;
if (reset == 1'b0 && ^(fwht_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_23_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
begin
fwht_22_24 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
fwht_22_24_reg <= fwht_22_24;
if (reset == 1'b0 && ^(fwht_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_24_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %25 = add nsw i32 %24, %23*/
begin
fwht_22_25 = (fwht_22_24 + fwht_22_23);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %25 = add nsw i32 %24, %23*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
fwht_22_25_reg <= fwht_22_25;
if (reset == 1'b0 && ^(fwht_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_25_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %26 = sub nsw i32 %23, %24*/
begin
fwht_22_26 = (fwht_22_23 - fwht_22_24);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %26 = sub nsw i32 %23, %24*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
fwht_22_26_reg <= fwht_22_26;
if (reset == 1'b0 && ^(fwht_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_26_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
begin
fwht_22_27 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_15))
begin
fwht_22_27_reg <= fwht_22_27;
if (reset == 1'b0 && ^(fwht_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_27_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
begin
fwht_22_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_15))
begin
fwht_22_28_reg <= fwht_22_28;
if (reset == 1'b0 && ^(fwht_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_28_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %29 = add nsw i32 %28, %27*/
begin
fwht_22_29 = (fwht_22_28 + fwht_22_27);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %29 = add nsw i32 %28, %27*/
if ((cur_state == LEGUP_F_fwht_BB_22_15))
begin
fwht_22_29_reg <= fwht_22_29;
if (reset == 1'b0 && ^(fwht_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_29_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %30 = sub nsw i32 %27, %28*/
begin
fwht_22_30 = (fwht_22_27 - fwht_22_28);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %30 = sub nsw i32 %27, %28*/
if ((cur_state == LEGUP_F_fwht_BB_22_15))
begin
fwht_22_30_reg <= fwht_22_30;
if (reset == 1'b0 && ^(fwht_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_30_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
begin
fwht_22_31 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_16))
begin
fwht_22_31_reg <= fwht_22_31;
if (reset == 1'b0 && ^(fwht_22_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_31_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
begin
fwht_22_32 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_16))
begin
fwht_22_32_reg <= fwht_22_32;
if (reset == 1'b0 && ^(fwht_22_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_32_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %33 = add nsw i32 %32, %31*/
begin
fwht_22_33 = (fwht_22_32 + fwht_22_31);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %33 = add nsw i32 %32, %31*/
if ((cur_state == LEGUP_F_fwht_BB_22_16))
begin
fwht_22_33_reg <= fwht_22_33;
if (reset == 1'b0 && ^(fwht_22_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_33_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %22*/
/*   %34 = sub nsw i32 %31, %32*/
begin
fwht_22_34 = (fwht_22_31 - fwht_22_32);
end
end
always @(posedge clk) begin
/* fwht: %22*/
/*   %34 = sub nsw i32 %31, %32*/
if ((cur_state == LEGUP_F_fwht_BB_22_16))
begin
fwht_22_34_reg <= fwht_22_34;
if (reset == 1'b0 && ^(fwht_22_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_22_34_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.7.0 = phi i32 [ %21, %8 ], [ %34, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_7_0 = fwht_8_21;
end
/* fwht: %35*/
/*   %workspace1.7.0 = phi i32 [ %21, %8 ], [ %34, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35_workspace1_7_0 = fwht_22_34;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.7.0 = phi i32 [ %21, %8 ], [ %34, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_7_0_reg <= fwht_35_workspace1_7_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_7_0_reg"); $finish; end
end
/* fwht: %35*/
/*   %workspace1.7.0 = phi i32 [ %21, %8 ], [ %34, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_7_0_reg <= fwht_35_workspace1_7_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_7_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn = phi i32 [ %20, %8 ], [ %33, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn = fwht_8_20;
end
/* fwht: %35*/
/*   %.pn = phi i32 [ %20, %8 ], [ %33, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35__pn = fwht_22_33;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn = phi i32 [ %20, %8 ], [ %33, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn_reg <= fwht_35__pn;
if (reset == 1'b0 && ^(fwht_35__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn_reg"); $finish; end
end
/* fwht: %35*/
/*   %.pn = phi i32 [ %20, %8 ], [ %33, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn_reg <= fwht_35__pn;
if (reset == 1'b0 && ^(fwht_35__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.5.0 = phi i32 [ %17, %8 ], [ %30, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_5_0 = fwht_8_17;
end
/* fwht: %35*/
/*   %workspace1.5.0 = phi i32 [ %17, %8 ], [ %30, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35_workspace1_5_0 = fwht_22_30_reg;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.5.0 = phi i32 [ %17, %8 ], [ %30, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_5_0_reg <= fwht_35_workspace1_5_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_5_0_reg"); $finish; end
end
/* fwht: %35*/
/*   %workspace1.5.0 = phi i32 [ %17, %8 ], [ %30, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_5_0_reg <= fwht_35_workspace1_5_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_5_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn1 = phi i32 [ %16, %8 ], [ %29, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn1 = fwht_8_16;
end
/* fwht: %35*/
/*   %.pn1 = phi i32 [ %16, %8 ], [ %29, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35__pn1 = fwht_22_29_reg;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn1 = phi i32 [ %16, %8 ], [ %29, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn1_reg <= fwht_35__pn1;
if (reset == 1'b0 && ^(fwht_35__pn1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn1_reg"); $finish; end
end
/* fwht: %35*/
/*   %.pn1 = phi i32 [ %16, %8 ], [ %29, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn1_reg <= fwht_35__pn1;
if (reset == 1'b0 && ^(fwht_35__pn1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn1_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.3.0 = phi i32 [ %13, %8 ], [ %26, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_3_0 = fwht_8_13_reg;
end
/* fwht: %35*/
/*   %workspace1.3.0 = phi i32 [ %13, %8 ], [ %26, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35_workspace1_3_0 = fwht_22_26_reg;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.3.0 = phi i32 [ %13, %8 ], [ %26, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_3_0_reg <= fwht_35_workspace1_3_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_3_0_reg"); $finish; end
end
/* fwht: %35*/
/*   %workspace1.3.0 = phi i32 [ %13, %8 ], [ %26, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35_workspace1_3_0_reg <= fwht_35_workspace1_3_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_3_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn2 = phi i32 [ %12, %8 ], [ %25, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn2 = fwht_8_12_reg;
end
/* fwht: %35*/
/*   %.pn2 = phi i32 [ %12, %8 ], [ %25, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35__pn2 = fwht_22_25_reg;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn2 = phi i32 [ %12, %8 ], [ %25, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn2_reg <= fwht_35__pn2;
if (reset == 1'b0 && ^(fwht_35__pn2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn2_reg"); $finish; end
end
/* fwht: %35*/
/*   %.pn2 = phi i32 [ %12, %8 ], [ %25, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn2_reg <= fwht_35__pn2;
if (reset == 1'b0 && ^(fwht_35__pn2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn2_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn3.in = phi i32* [ %9, %8 ], [ %scevgep44, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn3_in = fwht_8_9_reg;
end
/* fwht: %35*/
/*   %.pn3.in = phi i32* [ %9, %8 ], [ %scevgep44, %22 ]*/
else /* if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0))) */
begin
fwht_35__pn3_in = fwht_5_scevgep44_reg;
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn3.in = phi i32* [ %9, %8 ], [ %scevgep44, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn3_in_reg <= fwht_35__pn3_in;
if (reset == 1'b0 && ^(fwht_35__pn3_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn3_in_reg"); $finish; end
end
/* fwht: %35*/
/*   %.pn3.in = phi i32* [ %9, %8 ], [ %scevgep44, %22 ]*/
if (((cur_state == LEGUP_F_fwht_BB_22_16) & (memory_controller_waitrequest == 1'd0)))
begin
fwht_35__pn3_in_reg <= fwht_35__pn3_in;
if (reset == 1'b0 && ^(fwht_35__pn3_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn3_in_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
begin
fwht_35__pn3 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35__pn3_reg <= fwht_35__pn3;
if (reset == 1'b0 && ^(fwht_35__pn3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn3_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %.pn4 = sub i32 %7, %2*/
begin
fwht_35__pn4 = (fwht_5_7_reg - fwht_0_2_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %.pn4 = sub i32 %7, %2*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35__pn4_reg <= fwht_35__pn4;
if (reset == 1'b0 && ^(fwht_35__pn4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35__pn4_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.0.0 = add i32 %.pn4, %.pn3*/
begin
fwht_35_workspace1_0_0 = (fwht_35__pn4_reg + fwht_35__pn3);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.0.0 = add i32 %.pn4, %.pn3*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_workspace1_0_0_reg <= fwht_35_workspace1_0_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_0_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_0_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.1.0 = sub nsw i32 %7, %.pn3*/
begin
fwht_35_workspace1_1_0 = (fwht_5_7_reg - fwht_35__pn3);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.1.0 = sub nsw i32 %7, %.pn3*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_workspace1_1_0_reg <= fwht_35_workspace1_1_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_1_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.2.0 = sub nsw i32 %.pn2, %2*/
begin
fwht_35_workspace1_2_0 = (fwht_35__pn2_reg - fwht_0_2_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.2.0 = sub nsw i32 %.pn2, %2*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_workspace1_2_0_reg <= fwht_35_workspace1_2_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_2_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.4.0 = sub nsw i32 %.pn1, %2*/
begin
fwht_35_workspace1_4_0 = (fwht_35__pn1_reg - fwht_0_2_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.4.0 = sub nsw i32 %.pn1, %2*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_workspace1_4_0_reg <= fwht_35_workspace1_4_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_4_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %workspace1.6.0 = sub nsw i32 %.pn, %2*/
begin
fwht_35_workspace1_6_0 = (fwht_35__pn_reg - fwht_0_2_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %workspace1.6.0 = sub nsw i32 %.pn, %2*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_workspace1_6_0_reg <= fwht_35_workspace1_6_0;
if (reset == 1'b0 && ^(fwht_35_workspace1_6_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_workspace1_6_0_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %36 = add nsw i32 %workspace1.0.0, %workspace1.2.0*/
begin
fwht_35_36 = (fwht_35_workspace1_0_0 + fwht_35_workspace1_2_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %36 = add nsw i32 %workspace1.0.0, %workspace1.2.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_36_reg <= fwht_35_36;
if (reset == 1'b0 && ^(fwht_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_36_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %37 = sub nsw i32 %workspace1.0.0, %workspace1.2.0*/
begin
fwht_35_37 = (fwht_35_workspace1_0_0 - fwht_35_workspace1_2_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %37 = sub nsw i32 %workspace1.0.0, %workspace1.2.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_37_reg <= fwht_35_37;
if (reset == 1'b0 && ^(fwht_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_37_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %38 = sub nsw i32 %workspace1.1.0, %workspace1.3.0*/
begin
fwht_35_38 = (fwht_35_workspace1_1_0 - fwht_35_workspace1_3_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %38 = sub nsw i32 %workspace1.1.0, %workspace1.3.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_38_reg <= fwht_35_38;
if (reset == 1'b0 && ^(fwht_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_38_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %39 = add nsw i32 %workspace1.1.0, %workspace1.3.0*/
begin
fwht_35_39 = (fwht_35_workspace1_1_0 + fwht_35_workspace1_3_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %39 = add nsw i32 %workspace1.1.0, %workspace1.3.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_39_reg <= fwht_35_39;
if (reset == 1'b0 && ^(fwht_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_39_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %40 = add nsw i32 %workspace1.4.0, %workspace1.6.0*/
begin
fwht_35_40 = (fwht_35_workspace1_4_0 + fwht_35_workspace1_6_0);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %40 = add nsw i32 %workspace1.4.0, %workspace1.6.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_40_reg <= fwht_35_40;
if (reset == 1'b0 && ^(fwht_35_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_40_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %41 = sub nsw i32 %workspace1.4.0, %workspace1.6.0*/
begin
fwht_35_41 = (fwht_35_workspace1_4_0 - fwht_35_workspace1_6_0);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %41 = sub nsw i32 %workspace1.4.0, %workspace1.6.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_41_reg <= fwht_35_41;
if (reset == 1'b0 && ^(fwht_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_41_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %42 = sub nsw i32 %workspace1.5.0, %workspace1.7.0*/
begin
fwht_35_42 = (fwht_35_workspace1_5_0_reg - fwht_35_workspace1_7_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %42 = sub nsw i32 %workspace1.5.0, %workspace1.7.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_42_reg <= fwht_35_42;
if (reset == 1'b0 && ^(fwht_35_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_42_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %43 = add nsw i32 %workspace1.5.0, %workspace1.7.0*/
begin
fwht_35_43 = (fwht_35_workspace1_5_0_reg + fwht_35_workspace1_7_0_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %43 = add nsw i32 %workspace1.5.0, %workspace1.7.0*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_43_reg <= fwht_35_43;
if (reset == 1'b0 && ^(fwht_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_43_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %44 = add nsw i32 %36, %40*/
begin
fwht_35_44 = (fwht_35_36 + fwht_35_40_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %44 = add nsw i32 %36, %40*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_44_reg <= fwht_35_44;
if (reset == 1'b0 && ^(fwht_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_44_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %45 = sub nsw i32 %36, %40*/
begin
fwht_35_45 = (fwht_35_36 - fwht_35_40_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %45 = sub nsw i32 %36, %40*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_45_reg <= fwht_35_45;
if (reset == 1'b0 && ^(fwht_35_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_45_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %46 = sub nsw i32 %37, %41*/
begin
fwht_35_46 = (fwht_35_37 - fwht_35_41_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %46 = sub nsw i32 %37, %41*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_46_reg <= fwht_35_46;
if (reset == 1'b0 && ^(fwht_35_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_46_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %47 = add nsw i32 %37, %41*/
begin
fwht_35_47 = (fwht_35_37 + fwht_35_41_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %47 = add nsw i32 %37, %41*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_47_reg <= fwht_35_47;
if (reset == 1'b0 && ^(fwht_35_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_47_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %48 = add nsw i32 %38, %42*/
begin
fwht_35_48 = (fwht_35_38 + fwht_35_42_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %48 = add nsw i32 %38, %42*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_48_reg <= fwht_35_48;
if (reset == 1'b0 && ^(fwht_35_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_48_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %49 = sub nsw i32 %38, %42*/
begin
fwht_35_49 = (fwht_35_38 - fwht_35_42_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %49 = sub nsw i32 %38, %42*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_49_reg <= fwht_35_49;
if (reset == 1'b0 && ^(fwht_35_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_49_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %50 = sub nsw i32 %39, %43*/
begin
fwht_35_50 = (fwht_35_39 - fwht_35_43_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %50 = sub nsw i32 %39, %43*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_50_reg <= fwht_35_50;
if (reset == 1'b0 && ^(fwht_35_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_50_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %51 = add nsw i32 %39, %43*/
begin
fwht_35_51 = (fwht_35_39 + fwht_35_43_reg);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %51 = add nsw i32 %39, %43*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
fwht_35_51_reg <= fwht_35_51;
if (reset == 1'b0 && ^(fwht_35_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_51_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %52 = add i32 %i.010, 1*/
begin
fwht_35_52 = (fwht_5_i_010_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %52 = add i32 %i.010, 1*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_52_reg <= fwht_35_52;
if (reset == 1'b0 && ^(fwht_35_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_52_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %53 = getelementptr inbounds i32* %6, i32 %3*/
begin
fwht_35_53 = (fwht_5_6_reg + (4 * fwht_0_3_reg));
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %53 = getelementptr inbounds i32* %6, i32 %3*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_53_reg <= fwht_35_53;
if (reset == 1'b0 && ^(fwht_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_53_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %35*/
/*   %exitcond24 = icmp eq i32 %52, 8*/
begin
fwht_35_exitcond24 = (fwht_35_52 == 32'd8);
end
end
always @(posedge clk) begin
/* fwht: %35*/
/*   %exitcond24 = icmp eq i32 %52, 8*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
fwht_35_exitcond24_reg <= fwht_35_exitcond24;
if (reset == 1'b0 && ^(fwht_35_exitcond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_35_exitcond24_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %i.17 = phi i32 [ %86, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_fwht_BB__preheader_preheader_24) & (memory_controller_waitrequest == 1'd0)))
begin
fwht__preheader_i_17 = 32'd0;
end
/* fwht: %.preheader*/
/*   %i.17 = phi i32 [ %86, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_fwht_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)) & (fwht__preheader_exitcond_reg == 1'd0))) */
begin
fwht__preheader_i_17 = fwht__preheader_86_reg;
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %i.17 = phi i32 [ %86, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_fwht_BB__preheader_preheader_24) & (memory_controller_waitrequest == 1'd0)))
begin
fwht__preheader_i_17_reg <= fwht__preheader_i_17;
if (reset == 1'b0 && ^(fwht__preheader_i_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_i_17_reg"); $finish; end
end
/* fwht: %.preheader*/
/*   %i.17 = phi i32 [ %86, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_fwht_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)) & (fwht__preheader_exitcond_reg == 1'd0)))
begin
fwht__preheader_i_17_reg <= fwht__preheader_i_17;
if (reset == 1'b0 && ^(fwht__preheader_i_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_i_17_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp = add i32 %i.17, 8*/
begin
fwht__preheader_tmp = (fwht__preheader_i_17_reg + 32'd8);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp = add i32 %i.17, 8*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp_reg <= fwht__preheader_tmp;
if (reset == 1'b0 && ^(fwht__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp*/
begin
fwht__preheader_scevgep = (arg_output_block + (4 * fwht__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep_reg <= fwht__preheader_scevgep;
if (reset == 1'b0 && ^(fwht__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp11 = add i32 %i.17, 16*/
begin
fwht__preheader_tmp11 = (fwht__preheader_i_17_reg + 32'd16);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp11 = add i32 %i.17, 16*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp11_reg <= fwht__preheader_tmp11;
if (reset == 1'b0 && ^(fwht__preheader_tmp11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp11_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep12 = getelementptr i32* %output_block, i32 %tmp11*/
begin
fwht__preheader_scevgep12 = (arg_output_block + (4 * fwht__preheader_tmp11_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep12 = getelementptr i32* %output_block, i32 %tmp11*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep12_reg <= fwht__preheader_scevgep12;
if (reset == 1'b0 && ^(fwht__preheader_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep12_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp13 = add i32 %i.17, 24*/
begin
fwht__preheader_tmp13 = (fwht__preheader_i_17_reg + 32'd24);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp13 = add i32 %i.17, 24*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp13_reg <= fwht__preheader_tmp13;
if (reset == 1'b0 && ^(fwht__preheader_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp13_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep14 = getelementptr i32* %output_block, i32 %tmp13*/
begin
fwht__preheader_scevgep14 = (arg_output_block + (4 * fwht__preheader_tmp13_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep14 = getelementptr i32* %output_block, i32 %tmp13*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep14_reg <= fwht__preheader_scevgep14;
if (reset == 1'b0 && ^(fwht__preheader_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep14_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp15 = add i32 %i.17, 32*/
begin
fwht__preheader_tmp15 = (fwht__preheader_i_17_reg + 32'd32);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp15 = add i32 %i.17, 32*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp15_reg <= fwht__preheader_tmp15;
if (reset == 1'b0 && ^(fwht__preheader_tmp15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp15_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep16 = getelementptr i32* %output_block, i32 %tmp15*/
begin
fwht__preheader_scevgep16 = (arg_output_block + (4 * fwht__preheader_tmp15_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep16 = getelementptr i32* %output_block, i32 %tmp15*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep16_reg <= fwht__preheader_scevgep16;
if (reset == 1'b0 && ^(fwht__preheader_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep16_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp17 = add i32 %i.17, 40*/
begin
fwht__preheader_tmp17 = (fwht__preheader_i_17_reg + 32'd40);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp17 = add i32 %i.17, 40*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp17_reg <= fwht__preheader_tmp17;
if (reset == 1'b0 && ^(fwht__preheader_tmp17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp17_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep18 = getelementptr i32* %output_block, i32 %tmp17*/
begin
fwht__preheader_scevgep18 = (arg_output_block + (4 * fwht__preheader_tmp17_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep18 = getelementptr i32* %output_block, i32 %tmp17*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep18_reg <= fwht__preheader_scevgep18;
if (reset == 1'b0 && ^(fwht__preheader_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep18_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp19 = add i32 %i.17, 48*/
begin
fwht__preheader_tmp19 = (fwht__preheader_i_17_reg + 32'd48);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp19 = add i32 %i.17, 48*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp19_reg <= fwht__preheader_tmp19;
if (reset == 1'b0 && ^(fwht__preheader_tmp19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp19_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep20 = getelementptr i32* %output_block, i32 %tmp19*/
begin
fwht__preheader_scevgep20 = (arg_output_block + (4 * fwht__preheader_tmp19_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep20 = getelementptr i32* %output_block, i32 %tmp19*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep20_reg <= fwht__preheader_scevgep20;
if (reset == 1'b0 && ^(fwht__preheader_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep20_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %tmp21 = add i32 %i.17, 56*/
begin
fwht__preheader_tmp21 = (fwht__preheader_i_17_reg + 32'd56);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %tmp21 = add i32 %i.17, 56*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_tmp21_reg <= fwht__preheader_tmp21;
if (reset == 1'b0 && ^(fwht__preheader_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_tmp21_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %scevgep22 = getelementptr i32* %output_block, i32 %tmp21*/
begin
fwht__preheader_scevgep22 = (arg_output_block + (4 * fwht__preheader_tmp21_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %scevgep22 = getelementptr i32* %output_block, i32 %tmp21*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
fwht__preheader_scevgep22_reg <= fwht__preheader_scevgep22;
if (reset == 1'b0 && ^(fwht__preheader_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_scevgep22_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %out.16 = getelementptr i32* %output_block, i32 %i.17*/
begin
fwht__preheader_out_16 = (arg_output_block + (4 * fwht__preheader_i_17_reg));
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %out.16 = getelementptr i32* %output_block, i32 %i.17*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_out_16_reg <= fwht__preheader_out_16;
if (reset == 1'b0 && ^(fwht__preheader_out_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_out_16_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
begin
fwht__preheader_54 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
fwht__preheader_54_reg <= fwht__preheader_54;
if (reset == 1'b0 && ^(fwht__preheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_54_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
begin
fwht__preheader_55 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
fwht__preheader_55_reg <= fwht__preheader_55;
if (reset == 1'b0 && ^(fwht__preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_55_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %56 = add nsw i32 %55, %54*/
begin
fwht__preheader_56 = (fwht__preheader_55 + fwht__preheader_54_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %56 = add nsw i32 %55, %54*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
fwht__preheader_56_reg <= fwht__preheader_56;
if (reset == 1'b0 && ^(fwht__preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_56_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %57 = sub nsw i32 %54, %55*/
begin
fwht__preheader_57 = (fwht__preheader_54_reg - fwht__preheader_55);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %57 = sub nsw i32 %54, %55*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
fwht__preheader_57_reg <= fwht__preheader_57;
if (reset == 1'b0 && ^(fwht__preheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_57_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
begin
fwht__preheader_58 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
fwht__preheader_58_reg <= fwht__preheader_58;
if (reset == 1'b0 && ^(fwht__preheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_58_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
begin
fwht__preheader_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_59_reg <= fwht__preheader_59;
if (reset == 1'b0 && ^(fwht__preheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_59_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %60 = add nsw i32 %59, %58*/
begin
fwht__preheader_60 = (fwht__preheader_59 + fwht__preheader_58_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %60 = add nsw i32 %59, %58*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_60_reg <= fwht__preheader_60;
if (reset == 1'b0 && ^(fwht__preheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_60_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %61 = sub nsw i32 %58, %59*/
begin
fwht__preheader_61 = (fwht__preheader_58_reg - fwht__preheader_59);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %61 = sub nsw i32 %58, %59*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_61_reg <= fwht__preheader_61;
if (reset == 1'b0 && ^(fwht__preheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_61_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
begin
fwht__preheader_62 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_62_reg <= fwht__preheader_62;
if (reset == 1'b0 && ^(fwht__preheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_62_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
begin
fwht__preheader_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_30))
begin
fwht__preheader_63_reg <= fwht__preheader_63;
if (reset == 1'b0 && ^(fwht__preheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_63_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %64 = add nsw i32 %63, %62*/
begin
fwht__preheader_64 = (fwht__preheader_63 + fwht__preheader_62_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %64 = add nsw i32 %63, %62*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_30))
begin
fwht__preheader_64_reg <= fwht__preheader_64;
if (reset == 1'b0 && ^(fwht__preheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_64_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %65 = sub nsw i32 %62, %63*/
begin
fwht__preheader_65 = (fwht__preheader_62_reg - fwht__preheader_63);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %65 = sub nsw i32 %62, %63*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_30))
begin
fwht__preheader_65_reg <= fwht__preheader_65;
if (reset == 1'b0 && ^(fwht__preheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_65_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
begin
fwht__preheader_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_30))
begin
fwht__preheader_66_reg <= fwht__preheader_66;
if (reset == 1'b0 && ^(fwht__preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_66_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
begin
fwht__preheader_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_67_reg <= fwht__preheader_67;
if (reset == 1'b0 && ^(fwht__preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_67_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %68 = add nsw i32 %67, %66*/
begin
fwht__preheader_68 = (fwht__preheader_67 + fwht__preheader_66_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %68 = add nsw i32 %67, %66*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_68_reg <= fwht__preheader_68;
if (reset == 1'b0 && ^(fwht__preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_68_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %69 = sub nsw i32 %66, %67*/
begin
fwht__preheader_69 = (fwht__preheader_66_reg - fwht__preheader_67);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %69 = sub nsw i32 %66, %67*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_69_reg <= fwht__preheader_69;
if (reset == 1'b0 && ^(fwht__preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_69_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %70 = add nsw i32 %60, %56*/
begin
fwht__preheader_70 = (fwht__preheader_60 + fwht__preheader_56_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %70 = add nsw i32 %60, %56*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_70_reg <= fwht__preheader_70;
if (reset == 1'b0 && ^(fwht__preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_70_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %71 = sub nsw i32 %56, %60*/
begin
fwht__preheader_71 = (fwht__preheader_56_reg - fwht__preheader_60);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %71 = sub nsw i32 %56, %60*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_71_reg <= fwht__preheader_71;
if (reset == 1'b0 && ^(fwht__preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_71_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %72 = sub nsw i32 %57, %61*/
begin
fwht__preheader_72 = (fwht__preheader_57_reg - fwht__preheader_61);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %72 = sub nsw i32 %57, %61*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_72_reg <= fwht__preheader_72;
if (reset == 1'b0 && ^(fwht__preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_72_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %73 = add nsw i32 %61, %57*/
begin
fwht__preheader_73 = (fwht__preheader_61 + fwht__preheader_57_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %73 = add nsw i32 %61, %57*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
fwht__preheader_73_reg <= fwht__preheader_73;
if (reset == 1'b0 && ^(fwht__preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_73_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %74 = add nsw i32 %68, %64*/
begin
fwht__preheader_74 = (fwht__preheader_68 + fwht__preheader_64_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %74 = add nsw i32 %68, %64*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_74_reg <= fwht__preheader_74;
if (reset == 1'b0 && ^(fwht__preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_74_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %75 = sub nsw i32 %64, %68*/
begin
fwht__preheader_75 = (fwht__preheader_64_reg - fwht__preheader_68);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %75 = sub nsw i32 %64, %68*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_75_reg <= fwht__preheader_75;
if (reset == 1'b0 && ^(fwht__preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_75_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %76 = sub nsw i32 %65, %69*/
begin
fwht__preheader_76 = (fwht__preheader_65_reg - fwht__preheader_69);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %76 = sub nsw i32 %65, %69*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_76_reg <= fwht__preheader_76;
if (reset == 1'b0 && ^(fwht__preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_76_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %77 = add nsw i32 %69, %65*/
begin
fwht__preheader_77 = (fwht__preheader_69 + fwht__preheader_65_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %77 = add nsw i32 %69, %65*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_77_reg <= fwht__preheader_77;
if (reset == 1'b0 && ^(fwht__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_77_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %78 = add nsw i32 %74, %70*/
begin
fwht__preheader_78 = (fwht__preheader_74 + fwht__preheader_70_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %78 = add nsw i32 %74, %70*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_78_reg <= fwht__preheader_78;
if (reset == 1'b0 && ^(fwht__preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_78_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %79 = sub nsw i32 %70, %74*/
begin
fwht__preheader_79 = (fwht__preheader_70_reg - fwht__preheader_74);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %79 = sub nsw i32 %70, %74*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_79_reg <= fwht__preheader_79;
if (reset == 1'b0 && ^(fwht__preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_79_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %80 = sub nsw i32 %71, %75*/
begin
fwht__preheader_80 = (fwht__preheader_71_reg - fwht__preheader_75);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %80 = sub nsw i32 %71, %75*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_80_reg <= fwht__preheader_80;
if (reset == 1'b0 && ^(fwht__preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_80_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %81 = add nsw i32 %75, %71*/
begin
fwht__preheader_81 = (fwht__preheader_75 + fwht__preheader_71_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %81 = add nsw i32 %75, %71*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_81_reg <= fwht__preheader_81;
if (reset == 1'b0 && ^(fwht__preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_81_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %82 = add nsw i32 %76, %72*/
begin
fwht__preheader_82 = (fwht__preheader_76 + fwht__preheader_72_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %82 = add nsw i32 %76, %72*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_82_reg <= fwht__preheader_82;
if (reset == 1'b0 && ^(fwht__preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_82_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %83 = sub nsw i32 %72, %76*/
begin
fwht__preheader_83 = (fwht__preheader_72_reg - fwht__preheader_76);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %83 = sub nsw i32 %72, %76*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_83_reg <= fwht__preheader_83;
if (reset == 1'b0 && ^(fwht__preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_83_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %84 = sub nsw i32 %73, %77*/
begin
fwht__preheader_84 = (fwht__preheader_73_reg - fwht__preheader_77);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %84 = sub nsw i32 %73, %77*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_84_reg <= fwht__preheader_84;
if (reset == 1'b0 && ^(fwht__preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_84_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %85 = add nsw i32 %77, %73*/
begin
fwht__preheader_85 = (fwht__preheader_77 + fwht__preheader_73_reg);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %85 = add nsw i32 %77, %73*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
fwht__preheader_85_reg <= fwht__preheader_85;
if (reset == 1'b0 && ^(fwht__preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_85_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %86 = add i32 %i.17, 1*/
begin
fwht__preheader_86 = (fwht__preheader_i_17_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %86 = add i32 %i.17, 1*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_86_reg <= fwht__preheader_86;
if (reset == 1'b0 && ^(fwht__preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_86_reg"); $finish; end
end
end
always @(*) begin
/* fwht: %.preheader*/
/*   %exitcond = icmp eq i32 %86, 8*/
begin
fwht__preheader_exitcond = (fwht__preheader_86 == 32'd8);
end
end
always @(posedge clk) begin
/* fwht: %.preheader*/
/*   %exitcond = icmp eq i32 %86, 8*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
fwht__preheader_exitcond_reg <= fwht__preheader_exitcond;
if (reset == 1'b0 && ^(fwht__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fwht_0_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fwht: %0*/
/*   %3 = mul i32 %input_step, %stride*/
if ((lpm_mult_fwht_0_3_en == 1'd1))
begin
fwht_0_3_stage0_reg <= (arg_input_step * arg_stride);
end
end
always @(*) begin
lpm_mult_fwht_5_tmp42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fwht: %5*/
/*   %tmp42 = mul i32 %3, %i.010*/
if ((lpm_mult_fwht_5_tmp42_en == 1'd1))
begin
fwht_5_tmp42_stage0_reg <= (fwht_0_3_reg * fwht_5_i_010_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fwht: %87*/
/*   ret void*/
if ((cur_state == LEGUP_F_fwht_BB_87_36))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %44, i32* %out.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %46, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %48, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %50, i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %79, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %81, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %83, i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %85, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
memory_controller_address_a = fwht_5_tmp_08;
end
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_address_a = fwht_5_scevgep44_reg;
end
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_address_a = fwht_8_scevgep46;
end
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_address_a = fwht_8_scevgep50_reg;
end
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_address_a = fwht_5_scevgep48_reg;
end
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_address_a = fwht_22_scevgep56;
end
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_address_a = fwht_22_scevgep60_reg;
end
/* fwht: %35*/
/*   store i32 %44, i32* %out.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_address_a = fwht_5_out_09_reg;
end
/* fwht: %35*/
/*   store i32 %46, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_address_a = fwht_5_scevgep29_reg;
end
/* fwht: %35*/
/*   store i32 %48, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_address_a = fwht_5_scevgep33_reg;
end
/* fwht: %35*/
/*   store i32 %50, i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_address_a = fwht_5_scevgep37_reg;
end
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_address_a = fwht__preheader_scevgep;
end
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_address_a = fwht__preheader_scevgep14_reg;
end
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_address_a = fwht__preheader_scevgep18_reg;
end
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
memory_controller_address_a = fwht__preheader_scevgep22_reg;
end
/* fwht: %.preheader*/
/*   store i32 %79, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_address_a = fwht__preheader_scevgep_reg;
end
/* fwht: %.preheader*/
/*   store i32 %81, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_address_a = fwht__preheader_scevgep14_reg;
end
/* fwht: %.preheader*/
/*   store i32 %83, i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_address_a = fwht__preheader_scevgep18_reg;
end
/* fwht: %.preheader*/
/*   store i32 %85, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_address_a = fwht__preheader_scevgep22_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %35*/
/*   store i32 %44, i32* %out.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %46, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %48, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %35*/
/*   store i32 %50, i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht: %.preheader*/
/*   store i32 %79, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %81, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %83, i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %85, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fwht: %35*/
/*   store i32 %44, i32* %out.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_in_a = fwht_35_44;
end
/* fwht: %35*/
/*   store i32 %46, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_in_a = fwht_35_46_reg;
end
/* fwht: %35*/
/*   store i32 %48, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_in_a = fwht_35_48_reg;
end
/* fwht: %35*/
/*   store i32 %50, i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_in_a = fwht_35_50_reg;
end
/* fwht: %.preheader*/
/*   store i32 %79, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_in_a = fwht__preheader_79;
end
/* fwht: %.preheader*/
/*   store i32 %81, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_in_a = fwht__preheader_81_reg;
end
/* fwht: %.preheader*/
/*   store i32 %83, i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_in_a = fwht__preheader_83_reg;
end
/* fwht: %.preheader*/
/*   store i32 %85, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_in_a = fwht__preheader_85_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fwht: %5*/
/*   %7 = load i32* %tmp.08, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_5_4))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %8*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %8*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %8*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %22*/
/*   %23 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %22*/
/*   %27 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %22*/
/*   %31 = load i32* %scevgep60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %35*/
/*   store i32 %44, i32* %out.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %35*/
/*   store i32 %46, i32* %scevgep29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %35*/
/*   store i32 %48, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %35*/
/*   store i32 %50, i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   %55 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   %59 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   %63 = load i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   %67 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_29))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %79, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %81, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %83, i32* %scevgep18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_size_a = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %85, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %45, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %47, i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %49, i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %51, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %78, i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %80, i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %82, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %84, i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_address_b = fwht_5_scevgep48_reg;
end
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_address_b = fwht_5_scevgep52_reg;
end
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_address_b = fwht_8_scevgep54_reg;
end
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_address_b = fwht_5_scevgep52_reg;
end
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_address_b = fwht_22_scevgep58;
end
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_address_b = fwht_22_scevgep62_reg;
end
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
memory_controller_address_b = fwht_35__pn3_in_reg;
end
/* fwht: %35*/
/*   store i32 %45, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_address_b = fwht_5_scevgep27_reg;
end
/* fwht: %35*/
/*   store i32 %47, i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_address_b = fwht_5_scevgep31_reg;
end
/* fwht: %35*/
/*   store i32 %49, i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_address_b = fwht_5_scevgep35_reg;
end
/* fwht: %35*/
/*   store i32 %51, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_address_b = fwht_5_scevgep39_reg;
end
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
memory_controller_address_b = fwht__preheader_out_16;
end
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_address_b = fwht__preheader_scevgep12;
end
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_address_b = fwht__preheader_scevgep16_reg;
end
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_address_b = fwht__preheader_scevgep20_reg;
end
/* fwht: %.preheader*/
/*   store i32 %78, i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_address_b = fwht__preheader_out_16_reg;
end
/* fwht: %.preheader*/
/*   store i32 %80, i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_address_b = fwht__preheader_scevgep12_reg;
end
/* fwht: %.preheader*/
/*   store i32 %82, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_address_b = fwht__preheader_scevgep16_reg;
end
/* fwht: %.preheader*/
/*   store i32 %84, i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_address_b = fwht__preheader_scevgep20_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %35*/
/*   store i32 %45, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %47, i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %49, i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %35*/
/*   store i32 %51, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht: %.preheader*/
/*   store i32 %78, i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %80, i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %82, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht: %.preheader*/
/*   store i32 %84, i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fwht: %35*/
/*   store i32 %45, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_in_b = fwht_35_45;
end
/* fwht: %35*/
/*   store i32 %47, i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_in_b = fwht_35_47_reg;
end
/* fwht: %35*/
/*   store i32 %49, i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_in_b = fwht_35_49_reg;
end
/* fwht: %35*/
/*   store i32 %51, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_in_b = fwht_35_51_reg;
end
/* fwht: %.preheader*/
/*   store i32 %78, i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_in_b = fwht__preheader_78;
end
/* fwht: %.preheader*/
/*   store i32 %80, i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_in_b = fwht__preheader_80_reg;
end
/* fwht: %.preheader*/
/*   store i32 %82, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_in_b = fwht__preheader_82_reg;
end
/* fwht: %.preheader*/
/*   store i32 %84, i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_in_b = fwht__preheader_84_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fwht: %8*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_7))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %8*/
/*   %18 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_8))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %8*/
/*   %19 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_8_9))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %22*/
/*   %24 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_12))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %22*/
/*   %28 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_13))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %22*/
/*   %32 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_22_14))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %35*/
/*   %.pn3 = load i32* %.pn3.in, align 4*/
if ((cur_state == LEGUP_F_fwht_BB_35_17))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %35*/
/*   store i32 %45, i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_19))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %35*/
/*   store i32 %47, i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_20))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %35*/
/*   store i32 %49, i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_21))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %35*/
/*   store i32 %51, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB_35_22))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   %54 = load i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_25))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   %58 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_26))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   %62 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_27))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   %66 = load i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_28))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %78, i32* %out.16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_31))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %80, i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_32))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %82, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_33))
begin
memory_controller_size_b = 2'd2;
end
/* fwht: %.preheader*/
/*   store i32 %84, i32* %scevgep20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht_BB__preheader_34))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fwht_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_arg_block;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_arg_output_block;
reg [31:0] fwht_arg_stride;
reg [31:0] fwht_arg_input_step;
reg [31:0] fwht_arg_intra;
wire  fwht_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_memory_controller_address_a;
wire  fwht_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht_memory_controller_out_a;
wire [1:0] fwht_memory_controller_size_a;
wire  fwht_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht_memory_controller_address_b;
wire  fwht_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht_memory_controller_out_b;
wire [1:0] fwht_memory_controller_size_b;
reg  fwht_memory_controller_waitrequest;
wire  fwht_finish;
reg  fwht_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fwht fwht_inst (
	.memory_controller_enable_a (fwht_memory_controller_enable_a),
	.memory_controller_address_a (fwht_memory_controller_address_a),
	.memory_controller_write_enable_a (fwht_memory_controller_write_enable_a),
	.memory_controller_in_a (fwht_memory_controller_in_a),
	.memory_controller_size_a (fwht_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fwht_memory_controller_enable_b),
	.memory_controller_address_b (fwht_memory_controller_address_b),
	.memory_controller_write_enable_b (fwht_memory_controller_write_enable_b),
	.memory_controller_in_b (fwht_memory_controller_in_b),
	.memory_controller_size_b (fwht_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fwht_start),
	.finish (fwht_finish),
	.arg_block (fwht_arg_block),
	.arg_output_block (fwht_arg_output_block),
	.arg_stride (fwht_arg_stride),
	.arg_input_step (fwht_arg_input_step),
	.arg_intra (fwht_arg_intra)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fwht_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fwht_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fwht_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_arg_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_arg_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_arg_output_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_arg_output_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_arg_stride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_arg_stride"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_arg_input_step <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_arg_input_step"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht_arg_intra <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht_arg_intra"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
begin
fwht_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
begin
fwht_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fwht_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fwht_finish_final = fwht_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fwht_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fwht_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fwht_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fwht_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fwht_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fwht_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fwht_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fwht_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fwht_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fwht_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fwht_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fwht(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fwht_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
