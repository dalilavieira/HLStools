//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:37 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module planar2x_c
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_src,
	arg_dst,
	arg_srcWidth,
	arg_srcHeight,
	arg_srcStride,
	arg_dstStride
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_planar2x_c_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_planar2x_c_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_planar2x_c_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_planar2x_c_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5 = 7'd5;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_6 = 7'd6;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_7 = 7'd7;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_8 = 7'd8;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_9 = 7'd9;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_10 = 7'd10;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_11 = 7'd11;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_12 = 7'd12;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_13 = 7'd13;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph18_14 = 7'd14;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15 = 7'd15;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_16 = 7'd16;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_17 = 7'd17;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_18 = 7'd18;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_19 = 7'd19;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_20 = 7'd20;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge19_21 = 7'd21;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph11_22 = 7'd22;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph11_23 = 7'd23;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_24 = 7'd24;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_25 = 7'd25;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_26 = 7'd26;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_27 = 7'd27;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_28 = 7'd28;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_29 = 7'd29;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_30 = 7'd30;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_31 = 7'd31;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_32 = 7'd32;
parameter [6:0] LEGUP_F_planar2x_c_BB_22_33 = 7'd33;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34 = 7'd34;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_35 = 7'd35;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_36 = 7'd36;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_37 = 7'd37;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_38 = 7'd38;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_39 = 7'd39;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_40 = 7'd40;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_41 = 7'd41;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_42 = 7'd42;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_43 = 7'd43;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_44 = 7'd44;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_45 = 7'd45;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_46 = 7'd46;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_47 = 7'd47;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_48 = 7'd48;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_49 = 7'd49;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_50 = 7'd50;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_51 = 7'd51;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph5_52 = 7'd52;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53 = 7'd53;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_54 = 7'd54;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_55 = 7'd55;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_56 = 7'd56;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_57 = 7'd57;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_58 = 7'd58;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_59 = 7'd59;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_60 = 7'd60;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_61 = 7'd61;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_62 = 7'd62;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_63 = 7'd63;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge6_64 = 7'd64;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge12_65 = 7'd65;
parameter [6:0] LEGUP_F_planar2x_c_BB_65_66 = 7'd66;
parameter [6:0] LEGUP_F_planar2x_c_BB_65_67 = 7'd67;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_preheader_68 = 7'd68;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_69 = 7'd69;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_70 = 7'd70;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_71 = 7'd71;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_72 = 7'd72;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_73 = 7'd73;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_74 = 7'd74;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_75 = 7'd75;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_76 = 7'd76;
parameter [6:0] LEGUP_F_planar2x_c_BB__lr_ph_77 = 7'd77;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78 = 7'd78;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge_79 = 7'd79;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge_80 = 7'd80;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge_81 = 7'd81;
parameter [6:0] LEGUP_F_planar2x_c_BB___crit_edge_82 = 7'd82;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_src;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dst;
input [31:0] arg_srcWidth;
input [31:0] arg_srcHeight;
input [31:0] arg_srcStride;
input [31:0] arg_dstStride;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_0_dst65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_0_dst65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_0_src70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_0_src70_reg;
reg [31:0] planar2x_c_0_1;
reg [31:0] planar2x_c_0_1_reg;
reg [31:0] planar2x_c_0_2;
reg [31:0] planar2x_c_0_2_reg;
reg  planar2x_c_0_3;
reg  planar2x_c_0_3_reg;
reg [31:0] planar2x_c__lr_ph18_x_016;
reg [31:0] planar2x_c__lr_ph18_x_016_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep134_reg;
reg [31:0] planar2x_c__lr_ph18_tmp135;
reg [31:0] planar2x_c__lr_ph18_tmp135_reg;
reg [31:0] planar2x_c__lr_ph18_tmp136;
reg [31:0] planar2x_c__lr_ph18_tmp136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep137_reg;
reg [31:0] planar2x_c__lr_ph18_tmp138144;
reg [31:0] planar2x_c__lr_ph18_tmp138144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep139_reg;
reg [31:0] planar2x_c__lr_ph18_tmp140;
reg [31:0] planar2x_c__lr_ph18_tmp140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph18_scevgep141_reg;
reg [31:0] planar2x_c__lr_ph18_4;
reg [31:0] planar2x_c__lr_ph18_4_reg;
reg [31:0] planar2x_c__lr_ph18_5;
reg [31:0] planar2x_c__lr_ph18_5_reg;
reg [31:0] planar2x_c__lr_ph18_6;
reg [31:0] planar2x_c__lr_ph18_6_reg;
reg [31:0] planar2x_c__lr_ph18_7;
reg [31:0] planar2x_c__lr_ph18_7_reg;
reg [31:0] planar2x_c__lr_ph18_8;
reg [31:0] planar2x_c__lr_ph18_8_reg;
reg [31:0] planar2x_c__lr_ph18_9;
reg [31:0] planar2x_c__lr_ph18_9_reg;
reg [31:0] planar2x_c__lr_ph18_10;
reg [31:0] planar2x_c__lr_ph18_10_reg;
reg [31:0] planar2x_c__lr_ph18_11;
reg [31:0] planar2x_c__lr_ph18_11_reg;
reg [31:0] planar2x_c__lr_ph18_12;
reg [31:0] planar2x_c__lr_ph18_12_reg;
reg [31:0] planar2x_c__lr_ph18_13;
reg [31:0] planar2x_c__lr_ph18_13_reg;
reg  planar2x_c__lr_ph18_exitcond133;
reg  planar2x_c__lr_ph18_exitcond133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_14_reg;
reg [31:0] planar2x_c___crit_edge19_15;
reg [31:0] planar2x_c___crit_edge19_15_reg;
reg [31:0] planar2x_c___crit_edge19_16;
reg [31:0] planar2x_c___crit_edge19_16_reg;
reg [31:0] planar2x_c___crit_edge19_17;
reg [31:0] planar2x_c___crit_edge19_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge19_19_reg;
reg  planar2x_c___crit_edge19_20;
reg  planar2x_c___crit_edge19_20_reg;
reg [31:0] planar2x_c___crit_edge19_21;
reg [31:0] planar2x_c___crit_edge19_21_reg;
reg [31:0] planar2x_c__lr_ph11_tmp66;
reg [31:0] planar2x_c__lr_ph11_tmp66_reg;
reg [31:0] planar2x_c__lr_ph11_tmp67;
reg [31:0] planar2x_c__lr_ph11_tmp67_reg;
reg [31:0] planar2x_c__lr_ph11_tmp68;
reg [31:0] planar2x_c__lr_ph11_tmp68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph11_uglygep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph11_uglygep_reg;
reg [31:0] planar2x_c__lr_ph11_tmp71;
reg [31:0] planar2x_c__lr_ph11_tmp71_reg;
reg [31:0] planar2x_c__lr_ph11_tmp72;
reg [31:0] planar2x_c__lr_ph11_tmp72_reg;
reg [31:0] planar2x_c__lr_ph11_tmp73;
reg [31:0] planar2x_c__lr_ph11_tmp73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph11_uglygep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph11_uglygep74_reg;
reg [31:0] planar2x_c__lr_ph11_tmp76;
reg [31:0] planar2x_c__lr_ph11_tmp76_reg;
reg [31:0] planar2x_c__lr_ph11_tmp79;
reg [31:0] planar2x_c__lr_ph11_tmp79_reg;
reg [31:0] planar2x_c__lr_ph11_tmp81;
reg [31:0] planar2x_c__lr_ph11_tmp81_reg;
reg [31:0] planar2x_c__lr_ph11_tmp85;
reg [31:0] planar2x_c__lr_ph11_tmp85_reg;
reg [31:0] planar2x_c__lr_ph11_tmp89143;
reg [31:0] planar2x_c__lr_ph11_tmp89143_reg;
reg [31:0] planar2x_c__lr_ph11_tmp93;
reg [31:0] planar2x_c__lr_ph11_tmp93_reg;
reg [31:0] planar2x_c__lr_ph11_tmp104;
reg [31:0] planar2x_c__lr_ph11_tmp104_reg;
reg [31:0] planar2x_c__lr_ph11_tmp114;
reg [31:0] planar2x_c__lr_ph11_tmp114_reg;
reg [31:0] planar2x_c__lr_ph11_tmp115;
reg [31:0] planar2x_c__lr_ph11_tmp115_reg;
reg [31:0] planar2x_c__lr_ph11_tmp122;
reg [31:0] planar2x_c__lr_ph11_tmp122_reg;
reg [31:0] planar2x_c__lr_ph11_tmp123;
reg [31:0] planar2x_c__lr_ph11_tmp123_reg;
reg [31:0] planar2x_c__lr_ph11_tmp126;
reg [31:0] planar2x_c__lr_ph11_tmp126_reg;
reg [31:0] planar2x_c__lr_ph11_tmp127;
reg [31:0] planar2x_c__lr_ph11_tmp127_reg;
reg [31:0] planar2x_c_22_indvar;
reg [31:0] planar2x_c_22_indvar_reg;
reg [31:0] planar2x_c_22_23;
reg [31:0] planar2x_c_22_23_reg;
reg [31:0] planar2x_c_22_tmp80;
reg [31:0] planar2x_c_22_tmp80_reg;
reg [31:0] planar2x_c_22_tmp82;
reg [31:0] planar2x_c_22_tmp82_reg;
reg [31:0] planar2x_c_22_tmp86;
reg [31:0] planar2x_c_22_tmp86_reg;
reg [31:0] planar2x_c_22_tmp90;
reg [31:0] planar2x_c_22_tmp90_reg;
reg [31:0] planar2x_c_22_tmp94;
reg [31:0] planar2x_c_22_tmp94_reg;
reg [31:0] planar2x_c_22_tmp97;
reg [31:0] planar2x_c_22_tmp97_reg;
reg [31:0] planar2x_c_22_tmp98;
reg [31:0] planar2x_c_22_tmp98_reg;
reg [31:0] planar2x_c_22_tmp101;
reg [31:0] planar2x_c_22_tmp101_reg;
reg [31:0] planar2x_c_22_tmp105;
reg [31:0] planar2x_c_22_tmp105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep110_reg;
reg [31:0] planar2x_c_22_tmp112;
reg [31:0] planar2x_c_22_tmp112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep113_reg;
reg [31:0] planar2x_c_22_tmp116;
reg [31:0] planar2x_c_22_tmp116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22__09;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22__09_reg;
reg [31:0] planar2x_c_22_tmp119;
reg [31:0] planar2x_c_22_tmp119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep120_reg;
reg [31:0] planar2x_c_22_tmp124;
reg [31:0] planar2x_c_22_tmp124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep125_reg;
reg [31:0] planar2x_c_22_tmp128;
reg [31:0] planar2x_c_22_tmp128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22_scevgep129_reg;
reg [31:0] planar2x_c_22_tmp130;
reg [31:0] planar2x_c_22_tmp130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22__018;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_22__018_reg;
reg [31:0] planar2x_c_22_24;
reg [31:0] planar2x_c_22_24_reg;
reg [31:0] planar2x_c_22_25;
reg [31:0] planar2x_c_22_25_reg;
reg [31:0] planar2x_c_22_26;
reg [31:0] planar2x_c_22_26_reg;
reg [31:0] planar2x_c_22_27;
reg [31:0] planar2x_c_22_27_reg;
reg [31:0] planar2x_c_22_28;
reg [31:0] planar2x_c_22_28_reg;
reg [31:0] planar2x_c_22_29;
reg [31:0] planar2x_c_22_29_reg;
reg [31:0] planar2x_c_22_30;
reg [31:0] planar2x_c_22_30_reg;
reg [31:0] planar2x_c_22_31;
reg [31:0] planar2x_c_22_31_reg;
reg [31:0] planar2x_c_22_32;
reg [31:0] planar2x_c_22_32_reg;
reg [31:0] planar2x_c__lr_ph5_x_13;
reg [31:0] planar2x_c__lr_ph5_x_13_reg;
reg [31:0] planar2x_c__lr_ph5_tmp78;
reg [31:0] planar2x_c__lr_ph5_tmp78_reg;
reg [31:0] planar2x_c__lr_ph5_tmp83;
reg [31:0] planar2x_c__lr_ph5_tmp83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep51_reg;
reg [31:0] planar2x_c__lr_ph5_tmp87;
reg [31:0] planar2x_c__lr_ph5_tmp87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep47_reg;
reg [31:0] planar2x_c__lr_ph5_tmp91;
reg [31:0] planar2x_c__lr_ph5_tmp91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep43_reg;
reg [31:0] planar2x_c__lr_ph5_tmp95;
reg [31:0] planar2x_c__lr_ph5_tmp95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep39_reg;
reg [31:0] planar2x_c__lr_ph5_tmp99;
reg [31:0] planar2x_c__lr_ph5_tmp99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep61_reg;
reg [31:0] planar2x_c__lr_ph5_tmp102;
reg [31:0] planar2x_c__lr_ph5_tmp102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep58_reg;
reg [31:0] planar2x_c__lr_ph5_tmp106;
reg [31:0] planar2x_c__lr_ph5_tmp106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep55_reg;
reg [31:0] planar2x_c__lr_ph5_tmp108;
reg [31:0] planar2x_c__lr_ph5_tmp108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph5_scevgep32_reg;
reg [31:0] planar2x_c__lr_ph5_33;
reg [31:0] planar2x_c__lr_ph5_33_reg;
reg [31:0] planar2x_c__lr_ph5_34;
reg [31:0] planar2x_c__lr_ph5_34_reg;
reg [31:0] planar2x_c__lr_ph5_35;
reg [31:0] planar2x_c__lr_ph5_35_reg;
reg [31:0] planar2x_c__lr_ph5_36;
reg [31:0] planar2x_c__lr_ph5_36_reg;
reg [31:0] planar2x_c__lr_ph5_37;
reg [31:0] planar2x_c__lr_ph5_37_reg;
reg [31:0] planar2x_c__lr_ph5_38;
reg [31:0] planar2x_c__lr_ph5_38_reg;
reg [31:0] planar2x_c__lr_ph5_39;
reg [31:0] planar2x_c__lr_ph5_39_reg;
reg [31:0] planar2x_c__lr_ph5_40;
reg [31:0] planar2x_c__lr_ph5_40_reg;
reg [31:0] planar2x_c__lr_ph5_41;
reg [31:0] planar2x_c__lr_ph5_41_reg;
reg [31:0] planar2x_c__lr_ph5_42;
reg [31:0] planar2x_c__lr_ph5_42_reg;
reg [31:0] planar2x_c__lr_ph5_43;
reg [31:0] planar2x_c__lr_ph5_43_reg;
reg [31:0] planar2x_c__lr_ph5_44;
reg [31:0] planar2x_c__lr_ph5_44_reg;
reg [31:0] planar2x_c__lr_ph5_45;
reg [31:0] planar2x_c__lr_ph5_45_reg;
reg [31:0] planar2x_c__lr_ph5_46;
reg [31:0] planar2x_c__lr_ph5_46_reg;
reg [31:0] planar2x_c__lr_ph5_47;
reg [31:0] planar2x_c__lr_ph5_47_reg;
reg [31:0] planar2x_c__lr_ph5_48;
reg [31:0] planar2x_c__lr_ph5_48_reg;
reg [31:0] planar2x_c__lr_ph5_49;
reg [31:0] planar2x_c__lr_ph5_49_reg;
reg [31:0] planar2x_c__lr_ph5_50;
reg [31:0] planar2x_c__lr_ph5_50_reg;
reg [31:0] planar2x_c__lr_ph5_51;
reg [31:0] planar2x_c__lr_ph5_51_reg;
reg [31:0] planar2x_c__lr_ph5_52;
reg [31:0] planar2x_c__lr_ph5_52_reg;
reg [31:0] planar2x_c__lr_ph5_53;
reg [31:0] planar2x_c__lr_ph5_53_reg;
reg  planar2x_c__lr_ph5_exitcond29;
reg  planar2x_c__lr_ph5_exitcond29_reg;
reg [31:0] planar2x_c___crit_edge6_54;
reg [31:0] planar2x_c___crit_edge6_54_reg;
reg [31:0] planar2x_c___crit_edge6_55;
reg [31:0] planar2x_c___crit_edge6_55_reg;
reg [31:0] planar2x_c___crit_edge6_56;
reg [31:0] planar2x_c___crit_edge6_56_reg;
reg [31:0] planar2x_c___crit_edge6_57;
reg [31:0] planar2x_c___crit_edge6_57_reg;
reg [31:0] planar2x_c___crit_edge6_58;
reg [31:0] planar2x_c___crit_edge6_58_reg;
reg [31:0] planar2x_c___crit_edge6_59;
reg [31:0] planar2x_c___crit_edge6_59_reg;
reg [31:0] planar2x_c___crit_edge6_60;
reg [31:0] planar2x_c___crit_edge6_60_reg;
reg [31:0] planar2x_c___crit_edge6_61;
reg [31:0] planar2x_c___crit_edge6_61_reg;
reg [31:0] planar2x_c___crit_edge6_62;
reg [31:0] planar2x_c___crit_edge6_62_reg;
reg [31:0] planar2x_c___crit_edge6_63;
reg [31:0] planar2x_c___crit_edge6_63_reg;
reg [31:0] planar2x_c___crit_edge6_64;
reg [31:0] planar2x_c___crit_edge6_64_reg;
reg [31:0] planar2x_c___crit_edge6_indvar_next;
reg [31:0] planar2x_c___crit_edge6_indvar_next_reg;
reg  planar2x_c___crit_edge6_exitcond77;
reg  planar2x_c___crit_edge6_exitcond77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge12_uglygep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge12_uglygep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge12_uglygep7475;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge12_uglygep7475_reg;
reg [31:0] planar2x_c_65__lcssa;
reg [31:0] planar2x_c_65__lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_65__0_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_65__0_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_65__01_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_65__01_lcssa_reg;
reg [31:0] planar2x_c__lr_ph_x_22;
reg [31:0] planar2x_c__lr_ph_x_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep_reg;
reg [31:0] planar2x_c__lr_ph_tmp21;
reg [31:0] planar2x_c__lr_ph_tmp21_reg;
reg [31:0] planar2x_c__lr_ph_tmp22;
reg [31:0] planar2x_c__lr_ph_tmp22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep23_reg;
reg [31:0] planar2x_c__lr_ph_tmp24142;
reg [31:0] planar2x_c__lr_ph_tmp24142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep25_reg;
reg [31:0] planar2x_c__lr_ph_tmp26;
reg [31:0] planar2x_c__lr_ph_tmp26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c__lr_ph_scevgep27_reg;
reg [31:0] planar2x_c__lr_ph_66;
reg [31:0] planar2x_c__lr_ph_66_reg;
reg [31:0] planar2x_c__lr_ph_67;
reg [31:0] planar2x_c__lr_ph_67_reg;
reg [31:0] planar2x_c__lr_ph_68;
reg [31:0] planar2x_c__lr_ph_68_reg;
reg [31:0] planar2x_c__lr_ph_69;
reg [31:0] planar2x_c__lr_ph_69_reg;
reg [31:0] planar2x_c__lr_ph_70;
reg [31:0] planar2x_c__lr_ph_70_reg;
reg [31:0] planar2x_c__lr_ph_71;
reg [31:0] planar2x_c__lr_ph_71_reg;
reg [31:0] planar2x_c__lr_ph_72;
reg [31:0] planar2x_c__lr_ph_72_reg;
reg [31:0] planar2x_c__lr_ph_73;
reg [31:0] planar2x_c__lr_ph_73_reg;
reg [31:0] planar2x_c__lr_ph_74;
reg [31:0] planar2x_c__lr_ph_74_reg;
reg [31:0] planar2x_c__lr_ph_75;
reg [31:0] planar2x_c__lr_ph_75_reg;
reg  planar2x_c__lr_ph_exitcond;
reg  planar2x_c__lr_ph_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge_76_reg;
reg [31:0] planar2x_c___crit_edge_77;
reg [31:0] planar2x_c___crit_edge_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c___crit_edge_78_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_planar2x_c__lr_ph18_5_en;
reg [31:0] planar2x_c__lr_ph18_5_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph18_11_en;
reg [31:0] planar2x_c__lr_ph18_11_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph11_tmp68_en;
reg [31:0] planar2x_c__lr_ph11_tmp68_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph11_tmp73_en;
reg [31:0] planar2x_c__lr_ph11_tmp73_stage0_reg;
reg  lpm_mult_planar2x_c_22_tmp80_en;
reg [31:0] planar2x_c_22_tmp80_stage0_reg;
reg  lpm_mult_planar2x_c_22_tmp97_en;
reg [31:0] planar2x_c_22_tmp97_stage0_reg;
reg  lpm_mult_planar2x_c_22_24_en;
reg [31:0] planar2x_c_22_24_stage0_reg;
reg  lpm_mult_planar2x_c_22_30_en;
reg [31:0] planar2x_c_22_30_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph5_34_en;
reg [31:0] planar2x_c__lr_ph5_34_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph5_40_en;
reg [31:0] planar2x_c__lr_ph5_40_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph5_46_en;
reg [31:0] planar2x_c__lr_ph5_46_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph5_50_en;
reg [31:0] planar2x_c__lr_ph5_50_stage0_reg;
reg  lpm_mult_planar2x_c___crit_edge6_55_en;
reg [31:0] planar2x_c___crit_edge6_55_stage0_reg;
reg  lpm_mult_planar2x_c___crit_edge6_61_en;
reg [31:0] planar2x_c___crit_edge6_61_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph_67_en;
reg [31:0] planar2x_c__lr_ph_67_stage0_reg;
reg  lpm_mult_planar2x_c__lr_ph_73_en;
reg [31:0] planar2x_c__lr_ph_73_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_16;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_6;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_6;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_7;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_7;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_8;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_8;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_9;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_9;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_10;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_10;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_11;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_11;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_12;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_12;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_13;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_13;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_14;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_14;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_14) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph18_exitcond133_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_14) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph18_exitcond133_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph18_6;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph18_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_loopexit_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_16;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_16;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_17;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_17;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_18;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_18;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_19;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_19;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_20;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_20;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_21;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge19_21;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph11_22;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_65_66;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph11_22;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph11_23;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph11_23;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_26;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_26;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_27;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_27;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_28;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_28;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_29;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_29;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_30;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_30;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_31;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_31;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_32;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_32;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_33;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_22_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_33;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_22_33) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_22_33) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_54;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_35;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_35;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_36;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_36;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_37;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_37;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_38;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_38;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_39;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_39;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_40;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_40;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_41;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_41;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_42;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_42;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_43;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_43;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_44;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_44;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_45;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_45;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_46;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_46;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_47;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_47;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_48;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_48;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_49;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_49;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_50;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_50;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_51;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_51;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_52;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_52;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_52) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph5_exitcond29_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_52) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph5_exitcond29_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph5_35;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph5_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_loopexit_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_54;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_54;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_55;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_55;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_56;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_56;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_57;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_57;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_58;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_58;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_59;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_59;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_60;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_60;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_61;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_61;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_62;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_62;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_63;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_63;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_64;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge6_64;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge12_65;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge12_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge12_65;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge12_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_65_66;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_65_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_65_66;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_65_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_65_67;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB_65_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB_65_67;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_65_67) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_preheader_68;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB_65_67) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_0_3_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_79;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_preheader_68;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_70;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_70;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_71;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_71;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_72;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_72;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_73;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_73;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_74;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_74;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_75;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_75;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_76;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_76;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_77;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_77;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_77) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_77) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB__lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB__lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_loopexit_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_79;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_79;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_80;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_80;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_81;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_81;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_82;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_planar2x_c_BB___crit_edge_82;
if (reset == 1'b0 && ^(LEGUP_F_planar2x_c_BB___crit_edge_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %0*/
/*   %dst65 = bitcast i32* %dst to i8**/
begin
planar2x_c_0_dst65 = arg_dst;
end
end
always @(posedge clk) begin
/* planar2x_c: %0*/
/*   %dst65 = bitcast i32* %dst to i8**/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
planar2x_c_0_dst65_reg <= planar2x_c_0_dst65;
if (reset == 1'b0 && ^(planar2x_c_0_dst65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_0_dst65_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %0*/
/*   %src70 = bitcast i32* %src to i8**/
begin
planar2x_c_0_src70 = arg_src;
end
end
always @(posedge clk) begin
/* planar2x_c: %0*/
/*   %src70 = bitcast i32* %src to i8**/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
planar2x_c_0_src70_reg <= planar2x_c_0_src70;
if (reset == 1'b0 && ^(planar2x_c_0_src70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_0_src70_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
begin
planar2x_c_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
planar2x_c_0_1_reg <= planar2x_c_0_1;
if (reset == 1'b0 && ^(planar2x_c_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_0_1_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %0*/
/*   %2 = add nsw i32 %srcWidth, -1*/
begin
planar2x_c_0_2 = (arg_srcWidth + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %0*/
/*   %2 = add nsw i32 %srcWidth, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
planar2x_c_0_2_reg <= planar2x_c_0_2;
if (reset == 1'b0 && ^(planar2x_c_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_0_2_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %0*/
/*   %3 = icmp sgt i32 %2, 0*/
begin
planar2x_c_0_3 = ($signed(planar2x_c_0_2) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* planar2x_c: %0*/
/*   %3 = icmp sgt i32 %2, 0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
planar2x_c_0_3_reg <= planar2x_c_0_3;
if (reset == 1'b0 && ^(planar2x_c_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_0_3_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %x.016 = phi i32 [ %tmp140, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph18_x_016 = 32'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %x.016 = phi i32 [ %tmp140, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]*/
else /* if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_14) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph18_exitcond133_reg == 1'd0))) */
begin
planar2x_c__lr_ph18_x_016 = planar2x_c__lr_ph18_tmp140_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %x.016 = phi i32 [ %tmp140, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_preheader_5) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph18_x_016_reg <= planar2x_c__lr_ph18_x_016;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_x_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_x_016_reg"); $finish; end
end
/* planar2x_c: %.lr.ph18*/
/*   %x.016 = phi i32 [ %tmp140, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_14) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph18_exitcond133_reg == 1'd0)))
begin
planar2x_c__lr_ph18_x_016_reg <= planar2x_c__lr_ph18_x_016;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_x_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_x_016_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep134 = getelementptr i32* %src, i32 %x.016*/
begin
planar2x_c__lr_ph18_scevgep134 = (arg_src + (4 * planar2x_c__lr_ph18_x_016_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep134 = getelementptr i32* %src, i32 %x.016*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_scevgep134_reg <= planar2x_c__lr_ph18_scevgep134;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_scevgep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_scevgep134_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp135 = shl i32 %x.016, 1*/
begin
planar2x_c__lr_ph18_tmp135 = (planar2x_c__lr_ph18_x_016_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp135 = shl i32 %x.016, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_tmp135_reg <= planar2x_c__lr_ph18_tmp135;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_tmp135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_tmp135_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp136 = add i32 %tmp135, 2*/
begin
planar2x_c__lr_ph18_tmp136 = (planar2x_c__lr_ph18_tmp135 + 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp136 = add i32 %tmp135, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_tmp136_reg <= planar2x_c__lr_ph18_tmp136;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_tmp136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_tmp136_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep137 = getelementptr i32* %dst, i32 %tmp136*/
begin
planar2x_c__lr_ph18_scevgep137 = (arg_dst + (4 * planar2x_c__lr_ph18_tmp136_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep137 = getelementptr i32* %dst, i32 %tmp136*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
planar2x_c__lr_ph18_scevgep137_reg <= planar2x_c__lr_ph18_scevgep137;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_scevgep137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_scevgep137_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp138144 = or i32 %tmp135, 1*/
begin
planar2x_c__lr_ph18_tmp138144 = (planar2x_c__lr_ph18_tmp135 | 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp138144 = or i32 %tmp135, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_tmp138144_reg <= planar2x_c__lr_ph18_tmp138144;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_tmp138144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_tmp138144_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep139 = getelementptr i32* %dst, i32 %tmp138144*/
begin
planar2x_c__lr_ph18_scevgep139 = (arg_dst + (4 * planar2x_c__lr_ph18_tmp138144));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep139 = getelementptr i32* %dst, i32 %tmp138144*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_scevgep139_reg <= planar2x_c__lr_ph18_scevgep139;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_scevgep139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_scevgep139_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp140 = add i32 %x.016, 1*/
begin
planar2x_c__lr_ph18_tmp140 = (planar2x_c__lr_ph18_x_016_reg + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %tmp140 = add i32 %x.016, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_tmp140_reg <= planar2x_c__lr_ph18_tmp140;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_tmp140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_tmp140_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep141 = getelementptr i32* %src, i32 %tmp140*/
begin
planar2x_c__lr_ph18_scevgep141 = (arg_src + (4 * planar2x_c__lr_ph18_tmp140_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %scevgep141 = getelementptr i32* %src, i32 %tmp140*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
planar2x_c__lr_ph18_scevgep141_reg <= planar2x_c__lr_ph18_scevgep141;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_scevgep141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_scevgep141_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph18_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_8))
begin
planar2x_c__lr_ph18_4_reg <= planar2x_c__lr_ph18_4;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_4_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph18_5 = planar2x_c__lr_ph18_5_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %5 = mul nsw i32 %4, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
planar2x_c__lr_ph18_5_reg <= planar2x_c__lr_ph18_5;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_5_reg"); $finish; end
end
/* planar2x_c: %.lr.ph18*/
/*   %5 = mul nsw i32 %4, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
planar2x_c__lr_ph18_5_reg <= planar2x_c__lr_ph18_5;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_5_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph18_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
planar2x_c__lr_ph18_6_reg <= planar2x_c__lr_ph18_6;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_6_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %7 = add nsw i32 %5, %6*/
begin
planar2x_c__lr_ph18_7 = (planar2x_c__lr_ph18_5 + planar2x_c__lr_ph18_6);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %7 = add nsw i32 %5, %6*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
planar2x_c__lr_ph18_7_reg <= planar2x_c__lr_ph18_7;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_7_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %8 = ashr i32 %7, 2*/
begin
planar2x_c__lr_ph18_8 = ($signed(planar2x_c__lr_ph18_7) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %8 = ashr i32 %7, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
planar2x_c__lr_ph18_8_reg <= planar2x_c__lr_ph18_8;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_8_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph18_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_12))
begin
planar2x_c__lr_ph18_9_reg <= planar2x_c__lr_ph18_9;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_9_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph18_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_12))
begin
planar2x_c__lr_ph18_10_reg <= planar2x_c__lr_ph18_10;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_10_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph18_11 = planar2x_c__lr_ph18_11_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %11 = mul nsw i32 %10, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
planar2x_c__lr_ph18_11_reg <= planar2x_c__lr_ph18_11;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_11_reg"); $finish; end
end
/* planar2x_c: %.lr.ph18*/
/*   %11 = mul nsw i32 %10, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
planar2x_c__lr_ph18_11_reg <= planar2x_c__lr_ph18_11;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_11_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %12 = add nsw i32 %11, %9*/
begin
planar2x_c__lr_ph18_12 = (planar2x_c__lr_ph18_11 + planar2x_c__lr_ph18_9_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %12 = add nsw i32 %11, %9*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
planar2x_c__lr_ph18_12_reg <= planar2x_c__lr_ph18_12;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_12_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %13 = ashr i32 %12, 2*/
begin
planar2x_c__lr_ph18_13 = ($signed(planar2x_c__lr_ph18_12) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %13 = ashr i32 %12, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
planar2x_c__lr_ph18_13_reg <= planar2x_c__lr_ph18_13;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_13_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph18*/
/*   %exitcond133 = icmp eq i32 %tmp140, %2*/
begin
planar2x_c__lr_ph18_exitcond133 = (planar2x_c__lr_ph18_tmp140 == planar2x_c_0_2_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %exitcond133 = icmp eq i32 %tmp140, %2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
planar2x_c__lr_ph18_exitcond133_reg <= planar2x_c__lr_ph18_exitcond133;
if (reset == 1'b0 && ^(planar2x_c__lr_ph18_exitcond133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph18_exitcond133_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %14 = getelementptr inbounds i32* %src, i32 %2*/
begin
planar2x_c___crit_edge19_14 = (arg_src + (4 * planar2x_c_0_2_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %14 = getelementptr inbounds i32* %src, i32 %2*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
planar2x_c___crit_edge19_14_reg <= planar2x_c___crit_edge19_14;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_14_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge19_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
planar2x_c___crit_edge19_15_reg <= planar2x_c___crit_edge19_15;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_15_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %16 = shl nsw i32 %srcWidth, 1*/
begin
planar2x_c___crit_edge19_16 = (arg_srcWidth <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %16 = shl nsw i32 %srcWidth, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
planar2x_c___crit_edge19_16_reg <= planar2x_c___crit_edge19_16;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_16_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %17 = add nsw i32 %16, -1*/
begin
planar2x_c___crit_edge19_17 = (planar2x_c___crit_edge19_16 + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %17 = add nsw i32 %16, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
planar2x_c___crit_edge19_17_reg <= planar2x_c___crit_edge19_17;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_17_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %18 = getelementptr inbounds i32* %dst, i32 %17*/
begin
planar2x_c___crit_edge19_18 = (arg_dst + (4 * planar2x_c___crit_edge19_17_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %18 = getelementptr inbounds i32* %dst, i32 %17*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_17))
begin
planar2x_c___crit_edge19_18_reg <= planar2x_c___crit_edge19_18;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_18_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %19 = getelementptr inbounds i32* %dst, i32 %dstStride*/
begin
planar2x_c___crit_edge19_19 = (arg_dst + (4 * arg_dstStride));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %19 = getelementptr inbounds i32* %dst, i32 %dstStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
planar2x_c___crit_edge19_19_reg <= planar2x_c___crit_edge19_19;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_19_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %20 = icmp sgt i32 %srcHeight, 1*/
begin
planar2x_c___crit_edge19_20 = ($signed(arg_srcHeight) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %20 = icmp sgt i32 %srcHeight, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
planar2x_c___crit_edge19_20_reg <= planar2x_c___crit_edge19_20;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_20_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge19_21 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21))
begin
planar2x_c___crit_edge19_21_reg <= planar2x_c___crit_edge19_21;
if (reset == 1'b0 && ^(planar2x_c___crit_edge19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge19_21_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp66 = shl i32 %srcHeight, 3*/
begin
planar2x_c__lr_ph11_tmp66 = (arg_srcHeight <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp66 = shl i32 %srcHeight, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp66_reg <= planar2x_c__lr_ph11_tmp66;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp66_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp67 = add i32 %tmp66, -4*/
begin
planar2x_c__lr_ph11_tmp67 = (planar2x_c__lr_ph11_tmp66 + -32'd4);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp67 = add i32 %tmp66, -4*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp67_reg <= planar2x_c__lr_ph11_tmp67;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp67_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph11_tmp68 = planar2x_c__lr_ph11_tmp68_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp68 = mul i32 %tmp67, %dstStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_tmp68_reg <= planar2x_c__lr_ph11_tmp68;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp68_reg"); $finish; end
end
/* planar2x_c: %.lr.ph11*/
/*   %tmp68 = mul i32 %tmp67, %dstStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_tmp68_reg <= planar2x_c__lr_ph11_tmp68;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp68_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %uglygep = getelementptr i8* %dst65, i32 %tmp68*/
begin
planar2x_c__lr_ph11_uglygep = (planar2x_c_0_dst65_reg + (1 * planar2x_c__lr_ph11_tmp68));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %uglygep = getelementptr i8* %dst65, i32 %tmp68*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_uglygep_reg <= planar2x_c__lr_ph11_uglygep;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_uglygep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_uglygep_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp71 = shl i32 %srcHeight, 2*/
begin
planar2x_c__lr_ph11_tmp71 = (arg_srcHeight <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp71 = shl i32 %srcHeight, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp71_reg <= planar2x_c__lr_ph11_tmp71;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp71_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp72 = add i32 %tmp71, -4*/
begin
planar2x_c__lr_ph11_tmp72 = (planar2x_c__lr_ph11_tmp71 + -32'd4);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp72 = add i32 %tmp71, -4*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp72_reg <= planar2x_c__lr_ph11_tmp72;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp72_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph11_tmp73 = planar2x_c__lr_ph11_tmp73_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp73 = mul i32 %tmp72, %srcStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_tmp73_reg <= planar2x_c__lr_ph11_tmp73;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp73_reg"); $finish; end
end
/* planar2x_c: %.lr.ph11*/
/*   %tmp73 = mul i32 %tmp72, %srcStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_tmp73_reg <= planar2x_c__lr_ph11_tmp73;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp73_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %uglygep74 = getelementptr i8* %src70, i32 %tmp73*/
begin
planar2x_c__lr_ph11_uglygep74 = (planar2x_c_0_src70_reg + (1 * planar2x_c__lr_ph11_tmp73));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %uglygep74 = getelementptr i8* %src70, i32 %tmp73*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23))
begin
planar2x_c__lr_ph11_uglygep74_reg <= planar2x_c__lr_ph11_uglygep74;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_uglygep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_uglygep74_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp76 = add i32 %srcHeight, -1*/
begin
planar2x_c__lr_ph11_tmp76 = (arg_srcHeight + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp76 = add i32 %srcHeight, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp76_reg <= planar2x_c__lr_ph11_tmp76;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp76_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp79 = shl i32 %dstStride, 1*/
begin
planar2x_c__lr_ph11_tmp79 = (arg_dstStride <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp79 = shl i32 %dstStride, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp79_reg <= planar2x_c__lr_ph11_tmp79;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp79_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp81 = add i32 %dstStride, 1*/
begin
planar2x_c__lr_ph11_tmp81 = (arg_dstStride + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp81 = add i32 %dstStride, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp81_reg <= planar2x_c__lr_ph11_tmp81;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp81_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp85 = add i32 %tmp79, 2*/
begin
planar2x_c__lr_ph11_tmp85 = (planar2x_c__lr_ph11_tmp79 + 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp85 = add i32 %tmp79, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp85_reg <= planar2x_c__lr_ph11_tmp85;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp85_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp89143 = or i32 %tmp79, 1*/
begin
planar2x_c__lr_ph11_tmp89143 = (planar2x_c__lr_ph11_tmp79 | 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp89143 = or i32 %tmp79, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp89143_reg <= planar2x_c__lr_ph11_tmp89143;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp89143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp89143_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp93 = add i32 %dstStride, 2*/
begin
planar2x_c__lr_ph11_tmp93 = (arg_dstStride + 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp93 = add i32 %dstStride, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp93_reg <= planar2x_c__lr_ph11_tmp93;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp93_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp104 = add i32 %srcStride, 1*/
begin
planar2x_c__lr_ph11_tmp104 = (arg_srcStride + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp104 = add i32 %srcStride, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp104_reg <= planar2x_c__lr_ph11_tmp104;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp104_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp114 = add i32 %srcStride, %srcWidth*/
begin
planar2x_c__lr_ph11_tmp114 = (arg_srcStride + arg_srcWidth);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp114 = add i32 %srcStride, %srcWidth*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp114_reg <= planar2x_c__lr_ph11_tmp114;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp115 = add i32 %tmp114, -1*/
begin
planar2x_c__lr_ph11_tmp115 = (planar2x_c__lr_ph11_tmp114 + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp115 = add i32 %tmp114, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp115_reg <= planar2x_c__lr_ph11_tmp115;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp115_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp122 = add i32 %16, %dstStride*/
begin
planar2x_c__lr_ph11_tmp122 = (planar2x_c___crit_edge19_16_reg + arg_dstStride);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp122 = add i32 %16, %dstStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp122_reg <= planar2x_c__lr_ph11_tmp122;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp122_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp123 = add i32 %tmp122, -1*/
begin
planar2x_c__lr_ph11_tmp123 = (planar2x_c__lr_ph11_tmp122 + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp123 = add i32 %tmp122, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp123_reg <= planar2x_c__lr_ph11_tmp123;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp123_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp126 = add i32 %tmp79, %16*/
begin
planar2x_c__lr_ph11_tmp126 = (planar2x_c__lr_ph11_tmp79 + planar2x_c___crit_edge19_16_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp126 = add i32 %tmp79, %16*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp126_reg <= planar2x_c__lr_ph11_tmp126;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp127 = add i32 %tmp126, -1*/
begin
planar2x_c__lr_ph11_tmp127 = (planar2x_c__lr_ph11_tmp126 + -32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp127 = add i32 %tmp126, -1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_22))
begin
planar2x_c__lr_ph11_tmp127_reg <= planar2x_c__lr_ph11_tmp127;
if (reset == 1'b0 && ^(planar2x_c__lr_ph11_tmp127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph11_tmp127_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %indvar.next, %._crit_edge6 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_22_indvar = 32'd0;
end
/* planar2x_c: %22*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %indvar.next, %._crit_edge6 ]*/
else /* if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd0))) */
begin
planar2x_c_22_indvar = planar2x_c___crit_edge6_indvar_next_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %indvar.next, %._crit_edge6 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_22_indvar_reg <= planar2x_c_22_indvar;
if (reset == 1'b0 && ^(planar2x_c_22_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_indvar_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %indvar = phi i32 [ 0, %.lr.ph11 ], [ %indvar.next, %._crit_edge6 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd0)))
begin
planar2x_c_22_indvar_reg <= planar2x_c_22_indvar;
if (reset == 1'b0 && ^(planar2x_c_22_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_indvar_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %23 = phi i32 [ %21, %.lr.ph11 ], [ %64, %._crit_edge6 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_22_23 = planar2x_c___crit_edge19_21_reg;
end
/* planar2x_c: %22*/
/*   %23 = phi i32 [ %21, %.lr.ph11 ], [ %64, %._crit_edge6 ]*/
else /* if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd0))) */
begin
planar2x_c_22_23 = planar2x_c___crit_edge6_64;
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %23 = phi i32 [ %21, %.lr.ph11 ], [ %64, %._crit_edge6 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph11_23) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_22_23_reg <= planar2x_c_22_23;
if (reset == 1'b0 && ^(planar2x_c_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_23_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %23 = phi i32 [ %21, %.lr.ph11 ], [ %64, %._crit_edge6 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge6_exitcond77_reg == 1'd0)))
begin
planar2x_c_22_23_reg <= planar2x_c_22_23;
if (reset == 1'b0 && ^(planar2x_c_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_23_reg"); $finish; end
end
end
always @(*) begin
planar2x_c_22_tmp80 = planar2x_c_22_tmp80_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp80 = mul i32 %tmp79, %indvar*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp80_reg <= planar2x_c_22_tmp80;
if (reset == 1'b0 && ^(planar2x_c_22_tmp80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp80_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %tmp80 = mul i32 %tmp79, %indvar*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp80_reg <= planar2x_c_22_tmp80;
if (reset == 1'b0 && ^(planar2x_c_22_tmp80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp80_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp82 = add i32 %tmp81, %tmp80*/
begin
planar2x_c_22_tmp82 = (planar2x_c__lr_ph11_tmp81_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp82 = add i32 %tmp81, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp82_reg <= planar2x_c_22_tmp82;
if (reset == 1'b0 && ^(planar2x_c_22_tmp82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp82_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp86 = add i32 %tmp85, %tmp80*/
begin
planar2x_c_22_tmp86 = (planar2x_c__lr_ph11_tmp85_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp86 = add i32 %tmp85, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp86_reg <= planar2x_c_22_tmp86;
if (reset == 1'b0 && ^(planar2x_c_22_tmp86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp86_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp90 = add i32 %tmp89143, %tmp80*/
begin
planar2x_c_22_tmp90 = (planar2x_c__lr_ph11_tmp89143_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp90 = add i32 %tmp89143, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp90_reg <= planar2x_c_22_tmp90;
if (reset == 1'b0 && ^(planar2x_c_22_tmp90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp90_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp94 = add i32 %tmp93, %tmp80*/
begin
planar2x_c_22_tmp94 = (planar2x_c__lr_ph11_tmp93_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp94 = add i32 %tmp93, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp94_reg <= planar2x_c_22_tmp94;
if (reset == 1'b0 && ^(planar2x_c_22_tmp94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp94_reg"); $finish; end
end
end
always @(*) begin
planar2x_c_22_tmp97 = planar2x_c_22_tmp97_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp97 = mul i32 %indvar, %srcStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp97_reg <= planar2x_c_22_tmp97;
if (reset == 1'b0 && ^(planar2x_c_22_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp97_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %tmp97 = mul i32 %indvar, %srcStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp97_reg <= planar2x_c_22_tmp97;
if (reset == 1'b0 && ^(planar2x_c_22_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp97_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp98 = add i32 %tmp97, 1*/
begin
planar2x_c_22_tmp98 = (planar2x_c_22_tmp97 + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp98 = add i32 %tmp97, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp98_reg <= planar2x_c_22_tmp98;
if (reset == 1'b0 && ^(planar2x_c_22_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp101 = add i32 %tmp97, %srcStride*/
begin
planar2x_c_22_tmp101 = (planar2x_c_22_tmp97 + arg_srcStride);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp101 = add i32 %tmp97, %srcStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp101_reg <= planar2x_c_22_tmp101;
if (reset == 1'b0 && ^(planar2x_c_22_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp101_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp105 = add i32 %tmp104, %tmp97*/
begin
planar2x_c_22_tmp105 = (planar2x_c__lr_ph11_tmp104_reg + planar2x_c_22_tmp97);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp105 = add i32 %tmp104, %tmp97*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp105_reg <= planar2x_c_22_tmp105;
if (reset == 1'b0 && ^(planar2x_c_22_tmp105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp105_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep110 = getelementptr i32* %src, i32 %tmp101*/
begin
planar2x_c_22_scevgep110 = (arg_src + (4 * planar2x_c_22_tmp101_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep110 = getelementptr i32* %src, i32 %tmp101*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep110_reg <= planar2x_c_22_scevgep110;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep110_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp112 = add i32 %2, %tmp97*/
begin
planar2x_c_22_tmp112 = (planar2x_c_0_2_reg + planar2x_c_22_tmp97);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp112 = add i32 %2, %tmp97*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp112_reg <= planar2x_c_22_tmp112;
if (reset == 1'b0 && ^(planar2x_c_22_tmp112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp112_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep113 = getelementptr i32* %src, i32 %tmp112*/
begin
planar2x_c_22_scevgep113 = (arg_src + (4 * planar2x_c_22_tmp112_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep113 = getelementptr i32* %src, i32 %tmp112*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep113_reg <= planar2x_c_22_scevgep113;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep113_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp116 = add i32 %tmp115, %tmp97*/
begin
planar2x_c_22_tmp116 = (planar2x_c__lr_ph11_tmp115_reg + planar2x_c_22_tmp97);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp116 = add i32 %tmp115, %tmp97*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp116_reg <= planar2x_c_22_tmp116;
if (reset == 1'b0 && ^(planar2x_c_22_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp116_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep117 = getelementptr i32* %src, i32 %tmp116*/
begin
planar2x_c_22_scevgep117 = (arg_src + (4 * planar2x_c_22_tmp116_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep117 = getelementptr i32* %src, i32 %tmp116*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep117_reg <= planar2x_c_22_scevgep117;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep117_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %.09 = getelementptr i32* %src, i32 %tmp97*/
begin
planar2x_c_22__09 = (arg_src + (4 * planar2x_c_22_tmp97));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %.09 = getelementptr i32* %src, i32 %tmp97*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22__09_reg <= planar2x_c_22__09;
if (reset == 1'b0 && ^(planar2x_c_22__09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22__09_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp119 = add i32 %tmp79, %tmp80*/
begin
planar2x_c_22_tmp119 = (planar2x_c__lr_ph11_tmp79_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp119 = add i32 %tmp79, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp119_reg <= planar2x_c_22_tmp119;
if (reset == 1'b0 && ^(planar2x_c_22_tmp119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp119_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep120 = getelementptr i32* %dst, i32 %tmp119*/
begin
planar2x_c_22_scevgep120 = (arg_dst + (4 * planar2x_c_22_tmp119_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep120 = getelementptr i32* %dst, i32 %tmp119*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep120_reg <= planar2x_c_22_scevgep120;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep120_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp124 = add i32 %tmp123, %tmp80*/
begin
planar2x_c_22_tmp124 = (planar2x_c__lr_ph11_tmp123_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp124 = add i32 %tmp123, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp124_reg <= planar2x_c_22_tmp124;
if (reset == 1'b0 && ^(planar2x_c_22_tmp124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp124_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep125 = getelementptr i32* %dst, i32 %tmp124*/
begin
planar2x_c_22_scevgep125 = (arg_dst + (4 * planar2x_c_22_tmp124_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep125 = getelementptr i32* %dst, i32 %tmp124*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep125_reg <= planar2x_c_22_scevgep125;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep125_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp128 = add i32 %tmp127, %tmp80*/
begin
planar2x_c_22_tmp128 = (planar2x_c__lr_ph11_tmp127_reg + planar2x_c_22_tmp80);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp128 = add i32 %tmp127, %tmp80*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp128_reg <= planar2x_c_22_tmp128;
if (reset == 1'b0 && ^(planar2x_c_22_tmp128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp128_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %scevgep129 = getelementptr i32* %dst, i32 %tmp128*/
begin
planar2x_c_22_scevgep129 = (arg_dst + (4 * planar2x_c_22_tmp128_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %scevgep129 = getelementptr i32* %dst, i32 %tmp128*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22_scevgep129_reg <= planar2x_c_22_scevgep129;
if (reset == 1'b0 && ^(planar2x_c_22_scevgep129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_scevgep129_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %tmp130 = add i32 %tmp80, %dstStride*/
begin
planar2x_c_22_tmp130 = (planar2x_c_22_tmp80 + arg_dstStride);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp130 = add i32 %tmp80, %dstStride*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_tmp130_reg <= planar2x_c_22_tmp130;
if (reset == 1'b0 && ^(planar2x_c_22_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %.018 = getelementptr i32* %dst, i32 %tmp130*/
begin
planar2x_c_22__018 = (arg_dst + (4 * planar2x_c_22_tmp130_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %.018 = getelementptr i32* %dst, i32 %tmp130*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
planar2x_c_22__018_reg <= planar2x_c_22__018;
if (reset == 1'b0 && ^(planar2x_c_22__018) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22__018_reg"); $finish; end
end
end
always @(*) begin
planar2x_c_22_24 = planar2x_c_22_24_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %24 = mul nsw i32 %23, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_24_reg <= planar2x_c_22_24;
if (reset == 1'b0 && ^(planar2x_c_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_24_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %24 = mul nsw i32 %23, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_25))
begin
planar2x_c_22_24_reg <= planar2x_c_22_24;
if (reset == 1'b0 && ^(planar2x_c_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_24_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
begin
planar2x_c_22_25 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
planar2x_c_22_25_reg <= planar2x_c_22_25;
if (reset == 1'b0 && ^(planar2x_c_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_25_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %26 = add nsw i32 %25, %24*/
begin
planar2x_c_22_26 = (planar2x_c_22_25 + planar2x_c_22_24_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %26 = add nsw i32 %25, %24*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
planar2x_c_22_26_reg <= planar2x_c_22_26;
if (reset == 1'b0 && ^(planar2x_c_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_26_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %27 = ashr i32 %26, 2*/
begin
planar2x_c_22_27 = ($signed(planar2x_c_22_26) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %27 = ashr i32 %26, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
planar2x_c_22_27_reg <= planar2x_c_22_27;
if (reset == 1'b0 && ^(planar2x_c_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_27_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
begin
planar2x_c_22_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_31))
begin
planar2x_c_22_28_reg <= planar2x_c_22_28;
if (reset == 1'b0 && ^(planar2x_c_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_28_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
begin
planar2x_c_22_29 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_31))
begin
planar2x_c_22_29_reg <= planar2x_c_22_29;
if (reset == 1'b0 && ^(planar2x_c_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_29_reg"); $finish; end
end
end
always @(*) begin
planar2x_c_22_30 = planar2x_c_22_30_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %30 = mul nsw i32 %29, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
planar2x_c_22_30_reg <= planar2x_c_22_30;
if (reset == 1'b0 && ^(planar2x_c_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_30_reg"); $finish; end
end
/* planar2x_c: %22*/
/*   %30 = mul nsw i32 %29, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
planar2x_c_22_30_reg <= planar2x_c_22_30;
if (reset == 1'b0 && ^(planar2x_c_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_30_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %31 = add nsw i32 %30, %28*/
begin
planar2x_c_22_31 = (planar2x_c_22_30 + planar2x_c_22_28_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %31 = add nsw i32 %30, %28*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
planar2x_c_22_31_reg <= planar2x_c_22_31;
if (reset == 1'b0 && ^(planar2x_c_22_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_31_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %22*/
/*   %32 = ashr i32 %31, 2*/
begin
planar2x_c_22_32 = ($signed(planar2x_c_22_31) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %32 = ashr i32 %31, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
planar2x_c_22_32_reg <= planar2x_c_22_32;
if (reset == 1'b0 && ^(planar2x_c_22_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_22_32_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %x.13 = phi i32 [ %43, %.lr.ph5 ], [ 0, %.lr.ph5.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph5_x_13 = 32'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   %x.13 = phi i32 [ %43, %.lr.ph5 ], [ 0, %.lr.ph5.preheader ]*/
else /* if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_52) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph5_exitcond29_reg == 1'd0))) */
begin
planar2x_c__lr_ph5_x_13 = planar2x_c__lr_ph5_43_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %x.13 = phi i32 [ %43, %.lr.ph5 ], [ 0, %.lr.ph5.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_preheader_34) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph5_x_13_reg <= planar2x_c__lr_ph5_x_13;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_x_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_x_13_reg"); $finish; end
end
/* planar2x_c: %.lr.ph5*/
/*   %x.13 = phi i32 [ %43, %.lr.ph5 ], [ 0, %.lr.ph5.preheader ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_52) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph5_exitcond29_reg == 1'd0)))
begin
planar2x_c__lr_ph5_x_13_reg <= planar2x_c__lr_ph5_x_13;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_x_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_x_13_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp78 = shl i32 %x.13, 1*/
begin
planar2x_c__lr_ph5_tmp78 = (planar2x_c__lr_ph5_x_13_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp78 = shl i32 %x.13, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp78_reg <= planar2x_c__lr_ph5_tmp78;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp78_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp83 = add i32 %tmp82, %tmp78*/
begin
planar2x_c__lr_ph5_tmp83 = (planar2x_c_22_tmp82_reg + planar2x_c__lr_ph5_tmp78);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp83 = add i32 %tmp82, %tmp78*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp83_reg <= planar2x_c__lr_ph5_tmp83;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp83_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep51 = getelementptr i32* %dst, i32 %tmp83*/
begin
planar2x_c__lr_ph5_scevgep51 = (arg_dst + (4 * planar2x_c__lr_ph5_tmp83_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep51 = getelementptr i32* %dst, i32 %tmp83*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep51_reg <= planar2x_c__lr_ph5_scevgep51;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep51_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp87 = add i32 %tmp86, %tmp78*/
begin
planar2x_c__lr_ph5_tmp87 = (planar2x_c_22_tmp86_reg + planar2x_c__lr_ph5_tmp78);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp87 = add i32 %tmp86, %tmp78*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp87_reg <= planar2x_c__lr_ph5_tmp87;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp87_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep47 = getelementptr i32* %dst, i32 %tmp87*/
begin
planar2x_c__lr_ph5_scevgep47 = (arg_dst + (4 * planar2x_c__lr_ph5_tmp87_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep47 = getelementptr i32* %dst, i32 %tmp87*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep47_reg <= planar2x_c__lr_ph5_scevgep47;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep47_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp91 = add i32 %tmp90, %tmp78*/
begin
planar2x_c__lr_ph5_tmp91 = (planar2x_c_22_tmp90_reg + planar2x_c__lr_ph5_tmp78);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp91 = add i32 %tmp90, %tmp78*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp91_reg <= planar2x_c__lr_ph5_tmp91;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp91_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep43 = getelementptr i32* %dst, i32 %tmp91*/
begin
planar2x_c__lr_ph5_scevgep43 = (arg_dst + (4 * planar2x_c__lr_ph5_tmp91_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep43 = getelementptr i32* %dst, i32 %tmp91*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep43_reg <= planar2x_c__lr_ph5_scevgep43;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep43_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp95 = add i32 %tmp94, %tmp78*/
begin
planar2x_c__lr_ph5_tmp95 = (planar2x_c_22_tmp94_reg + planar2x_c__lr_ph5_tmp78);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp95 = add i32 %tmp94, %tmp78*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp95_reg <= planar2x_c__lr_ph5_tmp95;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp95_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep39 = getelementptr i32* %dst, i32 %tmp95*/
begin
planar2x_c__lr_ph5_scevgep39 = (arg_dst + (4 * planar2x_c__lr_ph5_tmp95_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep39 = getelementptr i32* %dst, i32 %tmp95*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep39_reg <= planar2x_c__lr_ph5_scevgep39;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep39_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp99 = add i32 %tmp98, %x.13*/
begin
planar2x_c__lr_ph5_tmp99 = (planar2x_c_22_tmp98_reg + planar2x_c__lr_ph5_x_13_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp99 = add i32 %tmp98, %x.13*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp99_reg <= planar2x_c__lr_ph5_tmp99;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp99_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep61 = getelementptr i32* %src, i32 %tmp99*/
begin
planar2x_c__lr_ph5_scevgep61 = (arg_src + (4 * planar2x_c__lr_ph5_tmp99_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep61 = getelementptr i32* %src, i32 %tmp99*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep61_reg <= planar2x_c__lr_ph5_scevgep61;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp102 = add i32 %tmp101, %x.13*/
begin
planar2x_c__lr_ph5_tmp102 = (planar2x_c_22_tmp101_reg + planar2x_c__lr_ph5_x_13_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp102 = add i32 %tmp101, %x.13*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp102_reg <= planar2x_c__lr_ph5_tmp102;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp102_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep58 = getelementptr i32* %src, i32 %tmp102*/
begin
planar2x_c__lr_ph5_scevgep58 = (arg_src + (4 * planar2x_c__lr_ph5_tmp102_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep58 = getelementptr i32* %src, i32 %tmp102*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep58_reg <= planar2x_c__lr_ph5_scevgep58;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp106 = add i32 %tmp105, %x.13*/
begin
planar2x_c__lr_ph5_tmp106 = (planar2x_c_22_tmp105_reg + planar2x_c__lr_ph5_x_13_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp106 = add i32 %tmp105, %x.13*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp106_reg <= planar2x_c__lr_ph5_tmp106;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp106_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep55 = getelementptr i32* %src, i32 %tmp106*/
begin
planar2x_c__lr_ph5_scevgep55 = (arg_src + (4 * planar2x_c__lr_ph5_tmp106_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep55 = getelementptr i32* %src, i32 %tmp106*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep55_reg <= planar2x_c__lr_ph5_scevgep55;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep55_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp108 = add i32 %tmp97, %x.13*/
begin
planar2x_c__lr_ph5_tmp108 = (planar2x_c_22_tmp97_reg + planar2x_c__lr_ph5_x_13_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %tmp108 = add i32 %tmp97, %x.13*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_tmp108_reg <= planar2x_c__lr_ph5_tmp108;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_tmp108_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep32 = getelementptr i32* %src, i32 %tmp108*/
begin
planar2x_c__lr_ph5_scevgep32 = (arg_src + (4 * planar2x_c__lr_ph5_tmp108_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %scevgep32 = getelementptr i32* %src, i32 %tmp108*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
planar2x_c__lr_ph5_scevgep32_reg <= planar2x_c__lr_ph5_scevgep32;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_scevgep32_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_33 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_38))
begin
planar2x_c__lr_ph5_33_reg <= planar2x_c__lr_ph5_33;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_33_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph5_34 = planar2x_c__lr_ph5_34_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %34 = mul nsw i32 %33, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
planar2x_c__lr_ph5_34_reg <= planar2x_c__lr_ph5_34;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_34_reg"); $finish; end
end
/* planar2x_c: %.lr.ph5*/
/*   %34 = mul nsw i32 %33, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
planar2x_c__lr_ph5_34_reg <= planar2x_c__lr_ph5_34;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_34_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_38))
begin
planar2x_c__lr_ph5_35_reg <= planar2x_c__lr_ph5_35;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_35_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %36 = add nsw i32 %34, %35*/
begin
planar2x_c__lr_ph5_36 = (planar2x_c__lr_ph5_34 + planar2x_c__lr_ph5_35_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %36 = add nsw i32 %34, %35*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
planar2x_c__lr_ph5_36_reg <= planar2x_c__lr_ph5_36;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_36_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %37 = ashr i32 %36, 2*/
begin
planar2x_c__lr_ph5_37 = ($signed(planar2x_c__lr_ph5_36) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %37 = ashr i32 %36, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
planar2x_c__lr_ph5_37_reg <= planar2x_c__lr_ph5_37;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_37_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_38 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_42))
begin
planar2x_c__lr_ph5_38_reg <= planar2x_c__lr_ph5_38;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_38_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_42))
begin
planar2x_c__lr_ph5_39_reg <= planar2x_c__lr_ph5_39;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_39_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph5_40 = planar2x_c__lr_ph5_40_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %40 = mul nsw i32 %39, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
planar2x_c__lr_ph5_40_reg <= planar2x_c__lr_ph5_40;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_40_reg"); $finish; end
end
/* planar2x_c: %.lr.ph5*/
/*   %40 = mul nsw i32 %39, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
planar2x_c__lr_ph5_40_reg <= planar2x_c__lr_ph5_40;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_40_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %41 = add nsw i32 %40, %38*/
begin
planar2x_c__lr_ph5_41 = (planar2x_c__lr_ph5_40 + planar2x_c__lr_ph5_38_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %41 = add nsw i32 %40, %38*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
planar2x_c__lr_ph5_41_reg <= planar2x_c__lr_ph5_41;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_41_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %42 = ashr i32 %41, 2*/
begin
planar2x_c__lr_ph5_42 = ($signed(planar2x_c__lr_ph5_41) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %42 = ashr i32 %41, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
planar2x_c__lr_ph5_42_reg <= planar2x_c__lr_ph5_42;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_42_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %43 = add nsw i32 %x.13, 1*/
begin
planar2x_c__lr_ph5_43 = (planar2x_c__lr_ph5_x_13_reg + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %43 = add nsw i32 %x.13, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_43_reg <= planar2x_c__lr_ph5_43;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_43_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_46))
begin
planar2x_c__lr_ph5_44_reg <= planar2x_c__lr_ph5_44;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_44_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_46))
begin
planar2x_c__lr_ph5_45_reg <= planar2x_c__lr_ph5_45;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_45_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph5_46 = planar2x_c__lr_ph5_46_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %46 = mul nsw i32 %45, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
planar2x_c__lr_ph5_46_reg <= planar2x_c__lr_ph5_46;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_46_reg"); $finish; end
end
/* planar2x_c: %.lr.ph5*/
/*   %46 = mul nsw i32 %45, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
planar2x_c__lr_ph5_46_reg <= planar2x_c__lr_ph5_46;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_46_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %47 = add nsw i32 %46, %44*/
begin
planar2x_c__lr_ph5_47 = (planar2x_c__lr_ph5_46 + planar2x_c__lr_ph5_44_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %47 = add nsw i32 %46, %44*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
planar2x_c__lr_ph5_47_reg <= planar2x_c__lr_ph5_47;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_47_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %48 = ashr i32 %47, 2*/
begin
planar2x_c__lr_ph5_48 = ($signed(planar2x_c__lr_ph5_47) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %48 = ashr i32 %47, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
planar2x_c__lr_ph5_48_reg <= planar2x_c__lr_ph5_48;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_48_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_49 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_50))
begin
planar2x_c__lr_ph5_49_reg <= planar2x_c__lr_ph5_49;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_49_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph5_50 = planar2x_c__lr_ph5_50_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %50 = mul nsw i32 %49, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
planar2x_c__lr_ph5_50_reg <= planar2x_c__lr_ph5_50;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_50_reg"); $finish; end
end
/* planar2x_c: %.lr.ph5*/
/*   %50 = mul nsw i32 %49, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
planar2x_c__lr_ph5_50_reg <= planar2x_c__lr_ph5_50;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_50_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph5_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_50))
begin
planar2x_c__lr_ph5_51_reg <= planar2x_c__lr_ph5_51;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_51_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %52 = add nsw i32 %50, %51*/
begin
planar2x_c__lr_ph5_52 = (planar2x_c__lr_ph5_50 + planar2x_c__lr_ph5_51_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %52 = add nsw i32 %50, %51*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
planar2x_c__lr_ph5_52_reg <= planar2x_c__lr_ph5_52;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_52_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %53 = ashr i32 %52, 2*/
begin
planar2x_c__lr_ph5_53 = ($signed(planar2x_c__lr_ph5_52) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %53 = ashr i32 %52, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
planar2x_c__lr_ph5_53_reg <= planar2x_c__lr_ph5_53;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_53_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph5*/
/*   %exitcond29 = icmp eq i32 %43, %2*/
begin
planar2x_c__lr_ph5_exitcond29 = (planar2x_c__lr_ph5_43 == planar2x_c_0_2_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %exitcond29 = icmp eq i32 %43, %2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_35))
begin
planar2x_c__lr_ph5_exitcond29_reg <= planar2x_c__lr_ph5_exitcond29;
if (reset == 1'b0 && ^(planar2x_c__lr_ph5_exitcond29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph5_exitcond29_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge6_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_56))
begin
planar2x_c___crit_edge6_54_reg <= planar2x_c___crit_edge6_54;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_54_reg"); $finish; end
end
end
always @(*) begin
planar2x_c___crit_edge6_55 = planar2x_c___crit_edge6_55_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %55 = mul nsw i32 %54, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
planar2x_c___crit_edge6_55_reg <= planar2x_c___crit_edge6_55;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_55_reg"); $finish; end
end
/* planar2x_c: %._crit_edge6*/
/*   %55 = mul nsw i32 %54, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
planar2x_c___crit_edge6_55_reg <= planar2x_c___crit_edge6_55;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_55_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge6_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_56))
begin
planar2x_c___crit_edge6_56_reg <= planar2x_c___crit_edge6_56;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_56_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %57 = add nsw i32 %55, %56*/
begin
planar2x_c___crit_edge6_57 = (planar2x_c___crit_edge6_55 + planar2x_c___crit_edge6_56_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %57 = add nsw i32 %55, %56*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
planar2x_c___crit_edge6_57_reg <= planar2x_c___crit_edge6_57;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_57_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %58 = ashr i32 %57, 2*/
begin
planar2x_c___crit_edge6_58 = ($signed(planar2x_c___crit_edge6_57) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %58 = ashr i32 %57, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
planar2x_c___crit_edge6_58_reg <= planar2x_c___crit_edge6_58;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_58_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge6_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_60))
begin
planar2x_c___crit_edge6_59_reg <= planar2x_c___crit_edge6_59;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_59_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge6_60 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_60))
begin
planar2x_c___crit_edge6_60_reg <= planar2x_c___crit_edge6_60;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_60_reg"); $finish; end
end
end
always @(*) begin
planar2x_c___crit_edge6_61 = planar2x_c___crit_edge6_61_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %61 = mul nsw i32 %60, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
planar2x_c___crit_edge6_61_reg <= planar2x_c___crit_edge6_61;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_61_reg"); $finish; end
end
/* planar2x_c: %._crit_edge6*/
/*   %61 = mul nsw i32 %60, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
planar2x_c___crit_edge6_61_reg <= planar2x_c___crit_edge6_61;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_61_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %62 = add nsw i32 %61, %59*/
begin
planar2x_c___crit_edge6_62 = (planar2x_c___crit_edge6_61 + planar2x_c___crit_edge6_59_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %62 = add nsw i32 %61, %59*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
planar2x_c___crit_edge6_62_reg <= planar2x_c___crit_edge6_62;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_62_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %63 = ashr i32 %62, 2*/
begin
planar2x_c___crit_edge6_63 = ($signed(planar2x_c___crit_edge6_62) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %63 = ashr i32 %62, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
planar2x_c___crit_edge6_63_reg <= planar2x_c___crit_edge6_63;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_63_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge6_64 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_64))
begin
planar2x_c___crit_edge6_64_reg <= planar2x_c___crit_edge6_64;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_64_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
planar2x_c___crit_edge6_indvar_next = (planar2x_c_22_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
planar2x_c___crit_edge6_indvar_next_reg <= planar2x_c___crit_edge6_indvar_next;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge6*/
/*   %exitcond77 = icmp eq i32 %indvar.next, %tmp76*/
begin
planar2x_c___crit_edge6_exitcond77 = (planar2x_c___crit_edge6_indvar_next == planar2x_c__lr_ph11_tmp76_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %exitcond77 = icmp eq i32 %indvar.next, %tmp76*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
planar2x_c___crit_edge6_exitcond77_reg <= planar2x_c___crit_edge6_exitcond77;
if (reset == 1'b0 && ^(planar2x_c___crit_edge6_exitcond77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge6_exitcond77_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge12*/
/*   %uglygep69 = bitcast i8* %uglygep to i32**/
begin
planar2x_c___crit_edge12_uglygep69 = planar2x_c__lr_ph11_uglygep_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge12*/
/*   %uglygep69 = bitcast i8* %uglygep to i32**/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65))
begin
planar2x_c___crit_edge12_uglygep69_reg <= planar2x_c___crit_edge12_uglygep69;
if (reset == 1'b0 && ^(planar2x_c___crit_edge12_uglygep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge12_uglygep69_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge12*/
/*   %uglygep7475 = bitcast i8* %uglygep74 to i32**/
begin
planar2x_c___crit_edge12_uglygep7475 = planar2x_c__lr_ph11_uglygep74_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge12*/
/*   %uglygep7475 = bitcast i8* %uglygep74 to i32**/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65))
begin
planar2x_c___crit_edge12_uglygep7475_reg <= planar2x_c___crit_edge12_uglygep7475;
if (reset == 1'b0 && ^(planar2x_c___crit_edge12_uglygep7475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge12_uglygep7475_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %65*/
/*   %.lcssa = phi i32 [ %64, %._crit_edge12 ], [ %21, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__lcssa = planar2x_c___crit_edge19_21;
end
/* planar2x_c: %65*/
/*   %.lcssa = phi i32 [ %64, %._crit_edge12 ], [ %21, %._crit_edge19 ]*/
else /* if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0))) */
begin
planar2x_c_65__lcssa = planar2x_c___crit_edge6_64_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %65*/
/*   %.lcssa = phi i32 [ %64, %._crit_edge12 ], [ %21, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__lcssa_reg <= planar2x_c_65__lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__lcssa_reg"); $finish; end
end
/* planar2x_c: %65*/
/*   %.lcssa = phi i32 [ %64, %._crit_edge12 ], [ %21, %._crit_edge19 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_65__lcssa_reg <= planar2x_c_65__lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__lcssa_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %65*/
/*   %.0.lcssa = phi i32* [ %uglygep7475, %._crit_edge12 ], [ %src, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__0_lcssa = arg_src;
end
/* planar2x_c: %65*/
/*   %.0.lcssa = phi i32* [ %uglygep7475, %._crit_edge12 ], [ %src, %._crit_edge19 ]*/
else /* if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0))) */
begin
planar2x_c_65__0_lcssa = planar2x_c___crit_edge12_uglygep7475;
end
end
always @(posedge clk) begin
/* planar2x_c: %65*/
/*   %.0.lcssa = phi i32* [ %uglygep7475, %._crit_edge12 ], [ %src, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__0_lcssa_reg <= planar2x_c_65__0_lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__0_lcssa_reg"); $finish; end
end
/* planar2x_c: %65*/
/*   %.0.lcssa = phi i32* [ %uglygep7475, %._crit_edge12 ], [ %src, %._crit_edge19 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_65__0_lcssa_reg <= planar2x_c_65__0_lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %65*/
/*   %.01.lcssa = phi i32* [ %uglygep69, %._crit_edge12 ], [ %19, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__01_lcssa = planar2x_c___crit_edge19_19_reg;
end
/* planar2x_c: %65*/
/*   %.01.lcssa = phi i32* [ %uglygep69, %._crit_edge12 ], [ %19, %._crit_edge19 ]*/
else /* if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0))) */
begin
planar2x_c_65__01_lcssa = planar2x_c___crit_edge12_uglygep69;
end
end
always @(posedge clk) begin
/* planar2x_c: %65*/
/*   %.01.lcssa = phi i32* [ %uglygep69, %._crit_edge12 ], [ %19, %._crit_edge19 ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_21) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c___crit_edge19_20_reg == 1'd0)))
begin
planar2x_c_65__01_lcssa_reg <= planar2x_c_65__01_lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__01_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__01_lcssa_reg"); $finish; end
end
/* planar2x_c: %65*/
/*   %.01.lcssa = phi i32* [ %uglygep69, %._crit_edge12 ], [ %19, %._crit_edge19 ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB___crit_edge12_65) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c_65__01_lcssa_reg <= planar2x_c_65__01_lcssa;
if (reset == 1'b0 && ^(planar2x_c_65__01_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_65__01_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %x.22 = phi i32 [ %tmp26, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph_x_22 = 32'd0;
end
/* planar2x_c: %.lr.ph*/
/*   %x.22 = phi i32 [ %tmp26, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
else /* if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_77) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph_exitcond_reg == 1'd0))) */
begin
planar2x_c__lr_ph_x_22 = planar2x_c__lr_ph_tmp26_reg;
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %x.22 = phi i32 [ %tmp26, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_preheader_68) & (memory_controller_waitrequest == 1'd0)))
begin
planar2x_c__lr_ph_x_22_reg <= planar2x_c__lr_ph_x_22;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_x_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_x_22_reg"); $finish; end
end
/* planar2x_c: %.lr.ph*/
/*   %x.22 = phi i32 [ %tmp26, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if ((((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_77) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c__lr_ph_exitcond_reg == 1'd0)))
begin
planar2x_c__lr_ph_x_22_reg <= planar2x_c__lr_ph_x_22;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_x_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_x_22_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep = getelementptr i32* %.0.lcssa, i32 %x.22*/
begin
planar2x_c__lr_ph_scevgep = (planar2x_c_65__0_lcssa_reg + (4 * planar2x_c__lr_ph_x_22_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep = getelementptr i32* %.0.lcssa, i32 %x.22*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_scevgep_reg <= planar2x_c__lr_ph_scevgep;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp21 = shl i32 %x.22, 1*/
begin
planar2x_c__lr_ph_tmp21 = (planar2x_c__lr_ph_x_22_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp21 = shl i32 %x.22, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_tmp21_reg <= planar2x_c__lr_ph_tmp21;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_tmp21_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp22 = add i32 %tmp21, 2*/
begin
planar2x_c__lr_ph_tmp22 = (planar2x_c__lr_ph_tmp21 + 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp22 = add i32 %tmp21, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_tmp22_reg <= planar2x_c__lr_ph_tmp22;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_tmp22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_tmp22_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep23 = getelementptr i32* %.01.lcssa, i32 %tmp22*/
begin
planar2x_c__lr_ph_scevgep23 = (planar2x_c_65__01_lcssa_reg + (4 * planar2x_c__lr_ph_tmp22_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep23 = getelementptr i32* %.01.lcssa, i32 %tmp22*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
planar2x_c__lr_ph_scevgep23_reg <= planar2x_c__lr_ph_scevgep23;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_scevgep23_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp24142 = or i32 %tmp21, 1*/
begin
planar2x_c__lr_ph_tmp24142 = (planar2x_c__lr_ph_tmp21 | 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp24142 = or i32 %tmp21, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_tmp24142_reg <= planar2x_c__lr_ph_tmp24142;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_tmp24142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_tmp24142_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep25 = getelementptr i32* %.01.lcssa, i32 %tmp24142*/
begin
planar2x_c__lr_ph_scevgep25 = (planar2x_c_65__01_lcssa_reg + (4 * planar2x_c__lr_ph_tmp24142));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep25 = getelementptr i32* %.01.lcssa, i32 %tmp24142*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_scevgep25_reg <= planar2x_c__lr_ph_scevgep25;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_scevgep25_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp26 = add i32 %x.22, 1*/
begin
planar2x_c__lr_ph_tmp26 = (planar2x_c__lr_ph_x_22_reg + 32'd1);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %tmp26 = add i32 %x.22, 1*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_tmp26_reg <= planar2x_c__lr_ph_tmp26;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_tmp26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_tmp26_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep27 = getelementptr i32* %.0.lcssa, i32 %tmp26*/
begin
planar2x_c__lr_ph_scevgep27 = (planar2x_c_65__0_lcssa_reg + (4 * planar2x_c__lr_ph_tmp26_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %scevgep27 = getelementptr i32* %.0.lcssa, i32 %tmp26*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
planar2x_c__lr_ph_scevgep27_reg <= planar2x_c__lr_ph_scevgep27;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_scevgep27_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_71))
begin
planar2x_c__lr_ph_66_reg <= planar2x_c__lr_ph_66;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_66_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph_67 = planar2x_c__lr_ph_67_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %67 = mul nsw i32 %66, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
planar2x_c__lr_ph_67_reg <= planar2x_c__lr_ph_67;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_67_reg"); $finish; end
end
/* planar2x_c: %.lr.ph*/
/*   %67 = mul nsw i32 %66, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
planar2x_c__lr_ph_67_reg <= planar2x_c__lr_ph_67;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_67_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph_68 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
planar2x_c__lr_ph_68_reg <= planar2x_c__lr_ph_68;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_68_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %69 = add nsw i32 %67, %68*/
begin
planar2x_c__lr_ph_69 = (planar2x_c__lr_ph_67 + planar2x_c__lr_ph_68);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %69 = add nsw i32 %67, %68*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
planar2x_c__lr_ph_69_reg <= planar2x_c__lr_ph_69;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_69_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %70 = ashr i32 %69, 2*/
begin
planar2x_c__lr_ph_70 = ($signed(planar2x_c__lr_ph_69) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %70 = ashr i32 %69, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
planar2x_c__lr_ph_70_reg <= planar2x_c__lr_ph_70;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_70_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph_71 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_75))
begin
planar2x_c__lr_ph_71_reg <= planar2x_c__lr_ph_71;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_71_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
begin
planar2x_c__lr_ph_72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_75))
begin
planar2x_c__lr_ph_72_reg <= planar2x_c__lr_ph_72;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_72_reg"); $finish; end
end
end
always @(*) begin
planar2x_c__lr_ph_73 = planar2x_c__lr_ph_73_stage0_reg;
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %73 = mul nsw i32 %72, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
planar2x_c__lr_ph_73_reg <= planar2x_c__lr_ph_73;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_73_reg"); $finish; end
end
/* planar2x_c: %.lr.ph*/
/*   %73 = mul nsw i32 %72, 3*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
planar2x_c__lr_ph_73_reg <= planar2x_c__lr_ph_73;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_73_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %74 = add nsw i32 %73, %71*/
begin
planar2x_c__lr_ph_74 = (planar2x_c__lr_ph_73 + planar2x_c__lr_ph_71_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %74 = add nsw i32 %73, %71*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
planar2x_c__lr_ph_74_reg <= planar2x_c__lr_ph_74;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_74_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %75 = ashr i32 %74, 2*/
begin
planar2x_c__lr_ph_75 = ($signed(planar2x_c__lr_ph_74) >>> 32'd2);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %75 = ashr i32 %74, 2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
planar2x_c__lr_ph_75_reg <= planar2x_c__lr_ph_75;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_75_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %.lr.ph*/
/*   %exitcond = icmp eq i32 %tmp26, %2*/
begin
planar2x_c__lr_ph_exitcond = (planar2x_c__lr_ph_tmp26 == planar2x_c_0_2_reg);
end
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %exitcond = icmp eq i32 %tmp26, %2*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
planar2x_c__lr_ph_exitcond_reg <= planar2x_c__lr_ph_exitcond;
if (reset == 1'b0 && ^(planar2x_c__lr_ph_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c__lr_ph_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge*/
/*   %76 = getelementptr inbounds i32* %.0.lcssa, i32 %2*/
begin
planar2x_c___crit_edge_76 = (planar2x_c_65__0_lcssa_reg + (4 * planar2x_c_0_2_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge*/
/*   %76 = getelementptr inbounds i32* %.0.lcssa, i32 %2*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
planar2x_c___crit_edge_76_reg <= planar2x_c___crit_edge_76;
if (reset == 1'b0 && ^(planar2x_c___crit_edge_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge_76_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
begin
planar2x_c___crit_edge_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
planar2x_c___crit_edge_77_reg <= planar2x_c___crit_edge_77;
if (reset == 1'b0 && ^(planar2x_c___crit_edge_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge_77_reg"); $finish; end
end
end
always @(*) begin
/* planar2x_c: %._crit_edge*/
/*   %78 = getelementptr inbounds i32* %.01.lcssa, i32 %17*/
begin
planar2x_c___crit_edge_78 = (planar2x_c_65__01_lcssa_reg + (4 * planar2x_c___crit_edge19_17_reg));
end
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge*/
/*   %78 = getelementptr inbounds i32* %.01.lcssa, i32 %17*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
planar2x_c___crit_edge_78_reg <= planar2x_c___crit_edge_78;
if (reset == 1'b0 && ^(planar2x_c___crit_edge_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c___crit_edge_78_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph18_5_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %5 = mul nsw i32 %4, 3*/
if ((lpm_mult_planar2x_c__lr_ph18_5_en == 1'd1))
begin
planar2x_c__lr_ph18_5_stage0_reg <= (planar2x_c__lr_ph18_4 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph18_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph18*/
/*   %11 = mul nsw i32 %10, 3*/
if ((lpm_mult_planar2x_c__lr_ph18_11_en == 1'd1))
begin
planar2x_c__lr_ph18_11_stage0_reg <= (planar2x_c__lr_ph18_10 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph11_tmp68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp68 = mul i32 %tmp67, %dstStride*/
if ((lpm_mult_planar2x_c__lr_ph11_tmp68_en == 1'd1))
begin
planar2x_c__lr_ph11_tmp68_stage0_reg <= (planar2x_c__lr_ph11_tmp67 * arg_dstStride);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph11_tmp73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph11*/
/*   %tmp73 = mul i32 %tmp72, %srcStride*/
if ((lpm_mult_planar2x_c__lr_ph11_tmp73_en == 1'd1))
begin
planar2x_c__lr_ph11_tmp73_stage0_reg <= (planar2x_c__lr_ph11_tmp72 * arg_srcStride);
end
end
always @(*) begin
lpm_mult_planar2x_c_22_tmp80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp80 = mul i32 %tmp79, %indvar*/
if ((lpm_mult_planar2x_c_22_tmp80_en == 1'd1))
begin
planar2x_c_22_tmp80_stage0_reg <= (planar2x_c__lr_ph11_tmp79_reg * planar2x_c_22_indvar_reg);
end
end
always @(*) begin
lpm_mult_planar2x_c_22_tmp97_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %tmp97 = mul i32 %indvar, %srcStride*/
if ((lpm_mult_planar2x_c_22_tmp97_en == 1'd1))
begin
planar2x_c_22_tmp97_stage0_reg <= (planar2x_c_22_indvar_reg * arg_srcStride);
end
end
always @(*) begin
lpm_mult_planar2x_c_22_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %24 = mul nsw i32 %23, 3*/
if ((lpm_mult_planar2x_c_22_24_en == 1'd1))
begin
planar2x_c_22_24_stage0_reg <= (planar2x_c_22_23_reg * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c_22_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %22*/
/*   %30 = mul nsw i32 %29, 3*/
if ((lpm_mult_planar2x_c_22_30_en == 1'd1))
begin
planar2x_c_22_30_stage0_reg <= (planar2x_c_22_29 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph5_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %34 = mul nsw i32 %33, 3*/
if ((lpm_mult_planar2x_c__lr_ph5_34_en == 1'd1))
begin
planar2x_c__lr_ph5_34_stage0_reg <= (planar2x_c__lr_ph5_33 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph5_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %40 = mul nsw i32 %39, 3*/
if ((lpm_mult_planar2x_c__lr_ph5_40_en == 1'd1))
begin
planar2x_c__lr_ph5_40_stage0_reg <= (planar2x_c__lr_ph5_39 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph5_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %46 = mul nsw i32 %45, 3*/
if ((lpm_mult_planar2x_c__lr_ph5_46_en == 1'd1))
begin
planar2x_c__lr_ph5_46_stage0_reg <= (planar2x_c__lr_ph5_45 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph5_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph5*/
/*   %50 = mul nsw i32 %49, 3*/
if ((lpm_mult_planar2x_c__lr_ph5_50_en == 1'd1))
begin
planar2x_c__lr_ph5_50_stage0_reg <= (planar2x_c__lr_ph5_49 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c___crit_edge6_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %55 = mul nsw i32 %54, 3*/
if ((lpm_mult_planar2x_c___crit_edge6_55_en == 1'd1))
begin
planar2x_c___crit_edge6_55_stage0_reg <= (planar2x_c___crit_edge6_54 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c___crit_edge6_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %._crit_edge6*/
/*   %61 = mul nsw i32 %60, 3*/
if ((lpm_mult_planar2x_c___crit_edge6_61_en == 1'd1))
begin
planar2x_c___crit_edge6_61_stage0_reg <= (planar2x_c___crit_edge6_60 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %67 = mul nsw i32 %66, 3*/
if ((lpm_mult_planar2x_c__lr_ph_67_en == 1'd1))
begin
planar2x_c__lr_ph_67_stage0_reg <= (planar2x_c__lr_ph_66 * 32'd3);
end
end
always @(*) begin
lpm_mult_planar2x_c__lr_ph_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* planar2x_c: %.lr.ph*/
/*   %73 = mul nsw i32 %72, 3*/
if ((lpm_mult_planar2x_c__lr_ph_73_en == 1'd1))
begin
planar2x_c__lr_ph_73_stage0_reg <= (planar2x_c__lr_ph_72 * 32'd3);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* planar2x_c: %._crit_edge*/
/*   ret void*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_82))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %0*/
/*   store i32 %1, i32* %dst, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %8, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %13, i32* %scevgep137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge19*/
/*   store i32 %15, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %48, i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %58, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %65*/
/*   store i32 %.lcssa, i32* %.01.lcssa, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_65_66))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %75, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
memory_controller_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge*/
/*   store i32 %77, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
memory_controller_address_a = arg_src;
end
/* planar2x_c: %0*/
/*   store i32 %1, i32* %dst, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
memory_controller_address_a = arg_dst;
end
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
memory_controller_address_a = planar2x_c__lr_ph18_scevgep134;
end
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
memory_controller_address_a = planar2x_c__lr_ph18_scevgep141;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %8, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
memory_controller_address_a = planar2x_c__lr_ph18_scevgep139_reg;
end
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_address_a = planar2x_c__lr_ph18_scevgep134_reg;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %13, i32* %scevgep137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
memory_controller_address_a = planar2x_c__lr_ph18_scevgep137_reg;
end
/* planar2x_c: %._crit_edge19*/
/*   store i32 %15, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
memory_controller_address_a = planar2x_c___crit_edge19_18_reg;
end
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_address_a = planar2x_c_22__09_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_address_a = planar2x_c__lr_ph5_scevgep32;
end
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_address_a = planar2x_c__lr_ph5_scevgep32_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_address_a = planar2x_c__lr_ph5_scevgep61_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %48, i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
memory_controller_address_a = planar2x_c__lr_ph5_scevgep43_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_address_a = planar2x_c__lr_ph5_scevgep61_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_address_a = planar2x_c_22_scevgep113_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %58, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
memory_controller_address_a = planar2x_c_22_scevgep125_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_address_a = planar2x_c_22_scevgep113_reg;
end
/* planar2x_c: %65*/
/*   store i32 %.lcssa, i32* %.01.lcssa, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_65_66))
begin
memory_controller_address_a = planar2x_c_65__01_lcssa_reg;
end
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
memory_controller_address_a = planar2x_c__lr_ph_scevgep27;
end
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_address_a = planar2x_c__lr_ph_scevgep27_reg;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %75, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
memory_controller_address_a = planar2x_c__lr_ph_scevgep23_reg;
end
/* planar2x_c: %._crit_edge*/
/*   store i32 %77, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
memory_controller_address_a = planar2x_c___crit_edge_78_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %0*/
/*   store i32 %1, i32* %dst, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %8, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %13, i32* %scevgep137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge19*/
/*   store i32 %15, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %48, i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %58, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %65*/
/*   store i32 %.lcssa, i32* %.01.lcssa, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_65_66))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_write_enable_a = 1'd0;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %75, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* planar2x_c: %._crit_edge*/
/*   store i32 %77, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* planar2x_c: %0*/
/*   store i32 %1, i32* %dst, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
memory_controller_in_a = planar2x_c_0_1;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %8, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
memory_controller_in_a = planar2x_c__lr_ph18_8;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %13, i32* %scevgep137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
memory_controller_in_a = planar2x_c__lr_ph18_13;
end
/* planar2x_c: %._crit_edge19*/
/*   store i32 %15, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
memory_controller_in_a = planar2x_c___crit_edge19_15;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %48, i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
memory_controller_in_a = planar2x_c__lr_ph5_48;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %58, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
memory_controller_in_a = planar2x_c___crit_edge6_58;
end
/* planar2x_c: %65*/
/*   store i32 %.lcssa, i32* %.01.lcssa, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_65_66))
begin
memory_controller_in_a = planar2x_c_65__lcssa_reg;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %75, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
memory_controller_in_a = planar2x_c__lr_ph_75;
end
/* planar2x_c: %._crit_edge*/
/*   store i32 %77, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
memory_controller_in_a = planar2x_c___crit_edge_77;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* planar2x_c: %0*/
/*   %1 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %0*/
/*   store i32 %1, i32* %dst, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph18*/
/*   %4 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_6))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph18*/
/*   %6 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_7))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %8, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_9))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph18*/
/*   %9 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph18*/
/*   store i32 %13, i32* %scevgep137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_13))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %._crit_edge19*/
/*   store i32 %15, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_18))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %22*/
/*   %28 = load i32* %.09, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %33 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %38 = load i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %44 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %48, i32* %scevgep43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_47))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %49 = load i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   %54 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %58, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_57))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   %59 = load i32* %scevgep113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %65*/
/*   store i32 %.lcssa, i32* %.01.lcssa, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_65_66))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   %68 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_70))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   %72 = load i32* %scevgep27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %75, i32* %scevgep23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_76))
begin
memory_controller_size_a = 2'd2;
end
/* planar2x_c: %._crit_edge*/
/*   store i32 %77, i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_81))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %22*/
/*   store i32 %27, i32* %.018, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %22*/
/*   store i32 %32, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %37, i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %42, i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %53, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %63, i32* %scevgep129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %70, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_address_b = planar2x_c__lr_ph18_scevgep141_reg;
end
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
memory_controller_address_b = planar2x_c___crit_edge19_14;
end
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19))
begin
memory_controller_address_b = arg_src;
end
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
memory_controller_address_b = planar2x_c_22_scevgep110;
end
/* planar2x_c: %22*/
/*   store i32 %27, i32* %.018, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
memory_controller_address_b = planar2x_c_22__018_reg;
end
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_address_b = planar2x_c_22_scevgep110_reg;
end
/* planar2x_c: %22*/
/*   store i32 %32, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
memory_controller_address_b = planar2x_c_22_scevgep120_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep55;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %37, i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep51_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep55_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %42, i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep47_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep58_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep58_reg;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %53, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
memory_controller_address_b = planar2x_c__lr_ph5_scevgep39_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_address_b = planar2x_c_22_scevgep117_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_address_b = planar2x_c_22_scevgep117_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %63, i32* %scevgep129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
memory_controller_address_b = planar2x_c_22_scevgep129_reg;
end
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62))
begin
memory_controller_address_b = planar2x_c_22_scevgep110_reg;
end
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
memory_controller_address_b = planar2x_c__lr_ph_scevgep;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %70, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
memory_controller_address_b = planar2x_c__lr_ph_scevgep25_reg;
end
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_address_b = planar2x_c__lr_ph_scevgep_reg;
end
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
memory_controller_address_b = planar2x_c___crit_edge_76;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %22*/
/*   store i32 %27, i32* %.018, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %22*/
/*   store i32 %32, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %37, i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %42, i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %53, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %63, i32* %scevgep129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %70, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
memory_controller_write_enable_b = 1'd1;
end
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_write_enable_b = 1'd0;
end
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* planar2x_c: %22*/
/*   store i32 %27, i32* %.018, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
memory_controller_in_b = planar2x_c_22_27;
end
/* planar2x_c: %22*/
/*   store i32 %32, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
memory_controller_in_b = planar2x_c_22_32;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %37, i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
memory_controller_in_b = planar2x_c__lr_ph5_37;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %42, i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
memory_controller_in_b = planar2x_c__lr_ph5_42;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %53, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
memory_controller_in_b = planar2x_c__lr_ph5_53;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %63, i32* %scevgep129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
memory_controller_in_b = planar2x_c___crit_edge6_63;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %70, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
memory_controller_in_b = planar2x_c__lr_ph_70;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* planar2x_c: %.lr.ph18*/
/*   %10 = load i32* %scevgep141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph18_10))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge19*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_16))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge19*/
/*   %21 = load i32* %src, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge19_19))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %22*/
/*   %25 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_26))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %22*/
/*   store i32 %27, i32* %.018, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_28))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %22*/
/*   %29 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_29))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %22*/
/*   store i32 %32, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB_22_32))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %35 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_36))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %37, i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_39))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %39 = load i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_40))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %42, i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_43))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %45 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_44))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   %51 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_48))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph5*/
/*   store i32 %53, i32* %scevgep39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph5_51))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   %56 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_54))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   %60 = load i32* %scevgep117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_58))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   store i32 %63, i32* %scevgep129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_61))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge6*/
/*   %64 = load i32* %scevgep110, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge6_62))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   %66 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_69))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   store i32 %70, i32* %scevgep25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_72))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %.lr.ph*/
/*   %71 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB__lr_ph_73))
begin
memory_controller_size_b = 2'd2;
end
/* planar2x_c: %._crit_edge*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_planar2x_c_BB___crit_edge_79))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  planar2x_c_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_arg_src;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_arg_dst;
reg [31:0] planar2x_c_arg_srcWidth;
reg [31:0] planar2x_c_arg_srcHeight;
reg [31:0] planar2x_c_arg_srcStride;
reg [31:0] planar2x_c_arg_dstStride;
wire  planar2x_c_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_memory_controller_address_a;
wire  planar2x_c_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] planar2x_c_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] planar2x_c_memory_controller_out_a;
wire [1:0] planar2x_c_memory_controller_size_a;
wire  planar2x_c_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] planar2x_c_memory_controller_address_b;
wire  planar2x_c_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] planar2x_c_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] planar2x_c_memory_controller_out_b;
wire [1:0] planar2x_c_memory_controller_size_b;
reg  planar2x_c_memory_controller_waitrequest;
wire  planar2x_c_finish;
reg  planar2x_c_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


planar2x_c planar2x_c_inst (
	.memory_controller_enable_a (planar2x_c_memory_controller_enable_a),
	.memory_controller_address_a (planar2x_c_memory_controller_address_a),
	.memory_controller_write_enable_a (planar2x_c_memory_controller_write_enable_a),
	.memory_controller_in_a (planar2x_c_memory_controller_in_a),
	.memory_controller_size_a (planar2x_c_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (planar2x_c_memory_controller_enable_b),
	.memory_controller_address_b (planar2x_c_memory_controller_address_b),
	.memory_controller_write_enable_b (planar2x_c_memory_controller_write_enable_b),
	.memory_controller_in_b (planar2x_c_memory_controller_in_b),
	.memory_controller_size_b (planar2x_c_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (planar2x_c_start),
	.finish (planar2x_c_finish),
	.arg_src (planar2x_c_arg_src),
	.arg_dst (planar2x_c_arg_dst),
	.arg_srcWidth (planar2x_c_arg_srcWidth),
	.arg_srcHeight (planar2x_c_arg_srcHeight),
	.arg_srcStride (planar2x_c_arg_srcStride),
	.arg_dstStride (planar2x_c_arg_dstStride)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (planar2x_c_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_start"); $finish; end
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
planar2x_c_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_src <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_src"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_dst <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_dst"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_srcWidth <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_srcWidth"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_srcHeight <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_srcHeight"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_srcStride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_srcStride"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
planar2x_c_arg_dstStride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to planar2x_c_arg_dstStride"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
begin
planar2x_c_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
begin
planar2x_c_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
planar2x_c_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
planar2x_c_finish_final = planar2x_c_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = planar2x_c_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = planar2x_c_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = planar2x_c_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = planar2x_c_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = planar2x_c_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = planar2x_c_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = planar2x_c_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = planar2x_c_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = planar2x_c_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = planar2x_c_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = planar2x_c_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = planar2x_c_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = planar2x_c_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = planar2x_c_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = planar2x_c_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = planar2x_c_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = planar2x_c_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = planar2x_c_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = planar2x_c_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @planar2x_c(i32* undef, i32* undef, i32 undef, i32 undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = planar2x_c_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
