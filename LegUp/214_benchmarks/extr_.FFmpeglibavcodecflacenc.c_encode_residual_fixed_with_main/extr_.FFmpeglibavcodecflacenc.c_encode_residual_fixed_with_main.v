//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:47 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module encode_residual_fixed
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_res,
	arg_smp,
	arg_n,
	arg_order
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2 = 7'd2;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph30_3 = 7'd3;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph30_4 = 7'd4;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph30_5 = 7'd5;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph30_6 = 7'd6;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7 = 7'd7;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB___crit_edge_8 = 7'd8;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__preheader13_9 = 7'd9;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10 = 7'd10;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__preheader_11 = 7'd11;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph12_12 = 7'd12;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph16_13 = 7'd13;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph16_14 = 7'd14;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph16_15 = 7'd15;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph16_16 = 7'd16;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_8_17 = 7'd17;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_8_18 = 7'd18;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_8_19 = 7'd19;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_8_20 = 7'd20;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_8_21 = 7'd21;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_12_22 = 7'd22;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph_23 = 7'd23;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph_24 = 7'd24;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph_25 = 7'd25;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph_26 = 7'd26;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_27 = 7'd27;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_28 = 7'd28;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_29 = 7'd29;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_30 = 7'd30;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_31 = 7'd31;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_32 = 7'd32;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_33 = 7'd33;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_21_34 = 7'd34;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_31_35 = 7'd35;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_31_36 = 7'd36;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_31_37 = 7'd37;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_31_38 = 7'd38;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_31_39 = 7'd39;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__preheader23_40 = 7'd40;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41 = 7'd41;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_42 = 7'd42;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_43 = 7'd43;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_44 = 7'd44;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_45 = 7'd45;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_46 = 7'd46;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_47 = 7'd47;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_48 = 7'd48;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph28_49 = 7'd49;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_58_50 = 7'd50;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph22_51 = 7'd51;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph22_52 = 7'd52;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph22_53 = 7'd53;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__lr_ph22_54 = 7'd54;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_55 = 7'd55;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_56 = 7'd56;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_57 = 7'd57;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_58 = 7'd58;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_59 = 7'd59;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_60 = 7'd60;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_61 = 7'd61;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_62 = 7'd62;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_63 = 7'd63;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB_65_64 = 7'd64;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65 = 7'd65;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66 = 7'd66;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67 = 7'd67;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68 = 7'd68;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69 = 7'd69;
parameter [6:0] LEGUP_F_encode_residual_fixed_BB__loopexit_70 = 7'd70;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_res;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_smp;
input [31:0] arg_n;
input [31:0] arg_order;
reg [6:0] cur_state;
reg  encode_residual_fixed_0_1;
reg  encode_residual_fixed_0_1_reg;
reg [31:0] encode_residual_fixed__lr_ph30_i_029;
reg [31:0] encode_residual_fixed__lr_ph30_i_029_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph30_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph30_scevgep78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph30_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph30_scevgep79_reg;
reg [31:0] encode_residual_fixed__lr_ph30_2;
reg [31:0] encode_residual_fixed__lr_ph30_2_reg;
reg [31:0] encode_residual_fixed__lr_ph30_3;
reg [31:0] encode_residual_fixed__lr_ph30_3_reg;
reg  encode_residual_fixed__lr_ph30_exitcond77;
reg  encode_residual_fixed__lr_ph30_exitcond77_reg;
reg  encode_residual_fixed__preheader13_4;
reg  encode_residual_fixed__preheader13_4_reg;
reg  encode_residual_fixed__preheader_5;
reg  encode_residual_fixed__preheader_5_reg;
reg [31:0] encode_residual_fixed__lr_ph12_tmp42;
reg [31:0] encode_residual_fixed__lr_ph12_tmp42_reg;
reg [31:0] encode_residual_fixed__lr_ph16_i_115;
reg [31:0] encode_residual_fixed__lr_ph16_i_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph16_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph16_scevgep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph16_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph16_scevgep49_reg;
reg [31:0] encode_residual_fixed__lr_ph16_6;
reg [31:0] encode_residual_fixed__lr_ph16_6_reg;
reg [31:0] encode_residual_fixed__lr_ph16_7;
reg [31:0] encode_residual_fixed__lr_ph16_7_reg;
reg  encode_residual_fixed__lr_ph16_exitcond47;
reg  encode_residual_fixed__lr_ph16_exitcond47_reg;
reg [31:0] encode_residual_fixed_8_indvar40;
reg [31:0] encode_residual_fixed_8_indvar40_reg;
reg [31:0] encode_residual_fixed_8_tmp43;
reg [31:0] encode_residual_fixed_8_tmp43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_8_scevgep46_reg;
reg [31:0] encode_residual_fixed_8_9;
reg [31:0] encode_residual_fixed_8_9_reg;
reg [31:0] encode_residual_fixed_8_10;
reg [31:0] encode_residual_fixed_8_10_reg;
reg [31:0] encode_residual_fixed_8_11;
reg [31:0] encode_residual_fixed_8_11_reg;
reg  encode_residual_fixed_8_exitcond;
reg  encode_residual_fixed_8_exitcond_reg;
reg  encode_residual_fixed_12_13;
reg  encode_residual_fixed_12_13_reg;
reg [31:0] encode_residual_fixed__lr_ph_14;
reg [31:0] encode_residual_fixed__lr_ph_14_reg;
reg [31:0] encode_residual_fixed__lr_ph_15;
reg [31:0] encode_residual_fixed__lr_ph_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph_17_reg;
reg [31:0] encode_residual_fixed__lr_ph_18;
reg [31:0] encode_residual_fixed__lr_ph_18_reg;
reg [31:0] encode_residual_fixed__lr_ph_19;
reg [31:0] encode_residual_fixed__lr_ph_19_reg;
reg [31:0] encode_residual_fixed__lr_ph_20;
reg [31:0] encode_residual_fixed__lr_ph_20_reg;
reg [31:0] encode_residual_fixed_21_indvar;
reg [31:0] encode_residual_fixed_21_indvar_reg;
reg [31:0] encode_residual_fixed_21_a_08;
reg [31:0] encode_residual_fixed_21_a_08_reg;
reg [31:0] encode_residual_fixed_21_tmp31;
reg [31:0] encode_residual_fixed_21_tmp31_reg;
reg [31:0] encode_residual_fixed_21_tmp32;
reg [31:0] encode_residual_fixed_21_tmp32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep33_reg;
reg [31:0] encode_residual_fixed_21_tmp3480;
reg [31:0] encode_residual_fixed_21_tmp3480_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep35_reg;
reg [31:0] encode_residual_fixed_21_tmp36;
reg [31:0] encode_residual_fixed_21_tmp36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_21_scevgep38_reg;
reg [31:0] encode_residual_fixed_21_tmp39;
reg [31:0] encode_residual_fixed_21_tmp39_reg;
reg [31:0] encode_residual_fixed_21_22;
reg [31:0] encode_residual_fixed_21_22_reg;
reg [31:0] encode_residual_fixed_21_23;
reg [31:0] encode_residual_fixed_21_23_reg;
reg [31:0] encode_residual_fixed_21_24;
reg [31:0] encode_residual_fixed_21_24_reg;
reg [31:0] encode_residual_fixed_21_25;
reg [31:0] encode_residual_fixed_21_25_reg;
reg [31:0] encode_residual_fixed_21_26;
reg [31:0] encode_residual_fixed_21_26_reg;
reg [31:0] encode_residual_fixed_21_27;
reg [31:0] encode_residual_fixed_21_27_reg;
reg [31:0] encode_residual_fixed_21_28;
reg [31:0] encode_residual_fixed_21_28_reg;
reg [31:0] encode_residual_fixed_21_29;
reg [31:0] encode_residual_fixed_21_29_reg;
reg  encode_residual_fixed_21_30;
reg  encode_residual_fixed_21_30_reg;
reg [31:0] encode_residual_fixed_21_indvar_next;
reg [31:0] encode_residual_fixed_21_indvar_next_reg;
reg  encode_residual_fixed_31_32;
reg  encode_residual_fixed_31_32_reg;
reg [31:0] encode_residual_fixed_31_33;
reg [31:0] encode_residual_fixed_31_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_34_reg;
reg [31:0] encode_residual_fixed_31_35;
reg [31:0] encode_residual_fixed_31_35_reg;
reg [31:0] encode_residual_fixed_31_36;
reg [31:0] encode_residual_fixed_31_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_37_reg;
reg [31:0] encode_residual_fixed_31_38;
reg [31:0] encode_residual_fixed_31_38_reg;
reg [31:0] encode_residual_fixed_31_39;
reg [31:0] encode_residual_fixed_31_39_reg;
reg [31:0] encode_residual_fixed_31_40;
reg [31:0] encode_residual_fixed_31_40_reg;
reg [31:0] encode_residual_fixed_31_41;
reg [31:0] encode_residual_fixed_31_41_reg;
reg [31:0] encode_residual_fixed_31_42;
reg [31:0] encode_residual_fixed_31_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_31_43_reg;
reg [31:0] encode_residual_fixed_31_44;
reg [31:0] encode_residual_fixed_31_44_reg;
reg [31:0] encode_residual_fixed_31_45;
reg [31:0] encode_residual_fixed_31_45_reg;
reg  encode_residual_fixed__preheader23_46;
reg  encode_residual_fixed__preheader23_46_reg;
reg [31:0] encode_residual_fixed__lr_ph28_indvar65;
reg [31:0] encode_residual_fixed__lr_ph28_indvar65_reg;
reg [31:0] encode_residual_fixed__lr_ph28_c_027;
reg [31:0] encode_residual_fixed__lr_ph28_c_027_reg;
reg [31:0] encode_residual_fixed__lr_ph28_a1_025;
reg [31:0] encode_residual_fixed__lr_ph28_a1_025_reg;
reg [31:0] encode_residual_fixed__lr_ph28_tmp67;
reg [31:0] encode_residual_fixed__lr_ph28_tmp67_reg;
reg [31:0] encode_residual_fixed__lr_ph28_tmp68;
reg [31:0] encode_residual_fixed__lr_ph28_tmp68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep70_reg;
reg [31:0] encode_residual_fixed__lr_ph28_tmp71;
reg [31:0] encode_residual_fixed__lr_ph28_tmp71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep72_reg;
reg [31:0] encode_residual_fixed__lr_ph28_tmp73;
reg [31:0] encode_residual_fixed__lr_ph28_tmp73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph28_scevgep75_reg;
reg [31:0] encode_residual_fixed__lr_ph28_tmp76;
reg [31:0] encode_residual_fixed__lr_ph28_tmp76_reg;
reg [31:0] encode_residual_fixed__lr_ph28_47;
reg [31:0] encode_residual_fixed__lr_ph28_47_reg;
reg [31:0] encode_residual_fixed__lr_ph28_48;
reg [31:0] encode_residual_fixed__lr_ph28_48_reg;
reg [31:0] encode_residual_fixed__lr_ph28_49;
reg [31:0] encode_residual_fixed__lr_ph28_49_reg;
reg [31:0] encode_residual_fixed__lr_ph28_50;
reg [31:0] encode_residual_fixed__lr_ph28_50_reg;
reg [31:0] encode_residual_fixed__lr_ph28_51;
reg [31:0] encode_residual_fixed__lr_ph28_51_reg;
reg [31:0] encode_residual_fixed__lr_ph28_52;
reg [31:0] encode_residual_fixed__lr_ph28_52_reg;
reg [31:0] encode_residual_fixed__lr_ph28_53;
reg [31:0] encode_residual_fixed__lr_ph28_53_reg;
reg [31:0] encode_residual_fixed__lr_ph28_54;
reg [31:0] encode_residual_fixed__lr_ph28_54_reg;
reg [31:0] encode_residual_fixed__lr_ph28_55;
reg [31:0] encode_residual_fixed__lr_ph28_55_reg;
reg [31:0] encode_residual_fixed__lr_ph28_56;
reg [31:0] encode_residual_fixed__lr_ph28_56_reg;
reg  encode_residual_fixed__lr_ph28_57;
reg  encode_residual_fixed__lr_ph28_57_reg;
reg [31:0] encode_residual_fixed__lr_ph28_indvar_next66;
reg [31:0] encode_residual_fixed__lr_ph28_indvar_next66_reg;
reg  encode_residual_fixed_58_59;
reg  encode_residual_fixed_58_59_reg;
reg [31:0] encode_residual_fixed__lr_ph22_60;
reg [31:0] encode_residual_fixed__lr_ph22_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph22_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed__lr_ph22_61_reg;
reg [31:0] encode_residual_fixed__lr_ph22_tmp;
reg [31:0] encode_residual_fixed__lr_ph22_tmp_reg;
reg [31:0] encode_residual_fixed__lr_ph22_62;
reg [31:0] encode_residual_fixed__lr_ph22_62_reg;
reg [31:0] encode_residual_fixed__lr_ph22_63;
reg [31:0] encode_residual_fixed__lr_ph22_63_reg;
reg [31:0] encode_residual_fixed__lr_ph22_tmp7;
reg [31:0] encode_residual_fixed__lr_ph22_tmp7_reg;
reg [31:0] encode_residual_fixed__lr_ph22_64;
reg [31:0] encode_residual_fixed__lr_ph22_64_reg;
reg [31:0] encode_residual_fixed__lr_ph22_tmp59;
reg [31:0] encode_residual_fixed__lr_ph22_tmp59_reg;
reg [31:0] encode_residual_fixed__lr_ph22_tmp63;
reg [31:0] encode_residual_fixed__lr_ph22_tmp63_reg;
reg [31:0] encode_residual_fixed_65_indvar50;
reg [31:0] encode_residual_fixed_65_indvar50_reg;
reg [31:0] encode_residual_fixed_65_e_021;
reg [31:0] encode_residual_fixed_65_e_021_reg;
reg [31:0] encode_residual_fixed_65_c4_020;
reg [31:0] encode_residual_fixed_65_c4_020_reg;
reg [31:0] encode_residual_fixed_65_a3_019;
reg [31:0] encode_residual_fixed_65_a3_019_reg;
reg [31:0] encode_residual_fixed_65_tmp52;
reg [31:0] encode_residual_fixed_65_tmp52_reg;
reg [31:0] encode_residual_fixed_65_tmp53;
reg [31:0] encode_residual_fixed_65_tmp53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep55_reg;
reg [31:0] encode_residual_fixed_65_tmp57;
reg [31:0] encode_residual_fixed_65_tmp57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep58_reg;
reg [31:0] encode_residual_fixed_65_tmp60;
reg [31:0] encode_residual_fixed_65_tmp60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_65_scevgep62_reg;
reg [31:0] encode_residual_fixed_65_tmp64;
reg [31:0] encode_residual_fixed_65_tmp64_reg;
reg [31:0] encode_residual_fixed_65_66;
reg [31:0] encode_residual_fixed_65_66_reg;
reg [31:0] encode_residual_fixed_65_67;
reg [31:0] encode_residual_fixed_65_67_reg;
reg [31:0] encode_residual_fixed_65_68;
reg [31:0] encode_residual_fixed_65_68_reg;
reg [31:0] encode_residual_fixed_65_69;
reg [31:0] encode_residual_fixed_65_69_reg;
reg [31:0] encode_residual_fixed_65_70;
reg [31:0] encode_residual_fixed_65_70_reg;
reg [31:0] encode_residual_fixed_65_71;
reg [31:0] encode_residual_fixed_65_71_reg;
reg [31:0] encode_residual_fixed_65_72;
reg [31:0] encode_residual_fixed_65_72_reg;
reg [31:0] encode_residual_fixed_65_73;
reg [31:0] encode_residual_fixed_65_73_reg;
reg [31:0] encode_residual_fixed_65_74;
reg [31:0] encode_residual_fixed_65_74_reg;
reg [31:0] encode_residual_fixed_65_75;
reg [31:0] encode_residual_fixed_65_75_reg;
reg [31:0] encode_residual_fixed_65_76;
reg [31:0] encode_residual_fixed_65_76_reg;
reg [31:0] encode_residual_fixed_65_77;
reg [31:0] encode_residual_fixed_65_77_reg;
reg  encode_residual_fixed_65_78;
reg  encode_residual_fixed_65_78_reg;
reg [31:0] encode_residual_fixed_65_indvar_next51;
reg [31:0] encode_residual_fixed_65_indvar_next51_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_encode_residual_fixed__lr_ph22_tmp7_en;
reg [31:0] encode_residual_fixed__lr_ph22_tmp7_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB___crit_edge_8;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB___crit_edge_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_3;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_3;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_4;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_4;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_5;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_5;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_6;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_6;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph30_exitcond77_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph30_exitcond77_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph30_3;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph30_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_loopexit_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB___crit_edge_8;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB___crit_edge_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB___crit_edge_8;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB___crit_edge_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_8) & (memory_controller_waitrequest == 1'd0)) & (arg_order == 32'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader13_9;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader13_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_8) & (memory_controller_waitrequest == 1'd0)) & (arg_order == 32'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_8) & (memory_controller_waitrequest == 1'd0)) & (arg_order == 32'd2)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_encode_residual_fixed_BB___crit_edge_8) & (memory_controller_waitrequest == 1'd0)) & (arg_order != 32'd0)) & (arg_order != 32'd1)) & (arg_order != 32'd2)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader13_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader13_9;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader13_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader13_9) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader13_4 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader13_9) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader13_4 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_13;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader_11) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader_5 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph12_12;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader_11) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader_5 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph12_12;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_17;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_13;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_14;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_14;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_15;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_15;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_16;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_16;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph16_exitcond47_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph16_exitcond47_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph16_13;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph16_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_17;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_18;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_18;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_19;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_19;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_20;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_20;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_21;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_8_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_21;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_8_21) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_8_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_8_21) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_8_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_8_17;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_12_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_12_22) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_12_13 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_23;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_12_22) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_12_13 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_23;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_24;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_24;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_25;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_25;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_26;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph_26;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_27;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_27;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_28;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_28;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_29;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_29;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_30;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_30;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_31;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_31;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_32;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_32;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_33;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_33;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_21_27;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_36;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_36;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_37;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_37;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_38;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_38;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_39;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_31_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_31_39;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_31_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_31_39) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_31_32_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader23_40;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader23_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_31_39) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_31_32_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_58_50;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_58_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader23_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__preheader23_40;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__preheader23_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader23_40) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader23_46 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader23_40) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__preheader23_46 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_42;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_42;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_43;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_43;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_44;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_44;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_45;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_45;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_46;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_46;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_47;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_47;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_48;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_48;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_49;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_49;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph28_42;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_58_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_58_50;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_58_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_58_50) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_58_59 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_51;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_58_50) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_58_59 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_51;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_52;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_52;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_53;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_53;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_54;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__lr_ph22_54;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_55;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_55;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_56;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_56;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_57;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_57;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_58;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_58;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_59;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_59;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_60;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_60;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_61;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_61;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_62;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_62;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_63;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_63;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_64;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_64;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB_65_55;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB_65_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit1_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit2_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit3_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_loopexit4_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_residual_fixed_BB__loopexit_70;
if (reset == 1'b0 && ^(LEGUP_F_encode_residual_fixed_BB__loopexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %0*/
/*   %1 = icmp sgt i32 %order, 0*/
begin
encode_residual_fixed_0_1 = ($signed(arg_order) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %0*/
/*   %1 = icmp sgt i32 %order, 0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_0_1))
begin
encode_residual_fixed_0_1_reg <= encode_residual_fixed_0_1;
if (reset == 1'b0 && ^(encode_residual_fixed_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_0_1_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %i.029 = phi i32 [ %3, %.lr.ph30 ], [ 0, %.lr.ph30.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph30_i_029 = 32'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %i.029 = phi i32 [ %3, %.lr.ph30 ], [ 0, %.lr.ph30.preheader ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph30_exitcond77_reg == 1'd0))) */
begin
encode_residual_fixed__lr_ph30_i_029 = encode_residual_fixed__lr_ph30_3_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %i.029 = phi i32 [ %3, %.lr.ph30 ], [ 0, %.lr.ph30.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_preheader_2) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph30_i_029_reg <= encode_residual_fixed__lr_ph30_i_029;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_i_029) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_i_029_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %i.029 = phi i32 [ %3, %.lr.ph30 ], [ 0, %.lr.ph30.preheader ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_6) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph30_exitcond77_reg == 1'd0)))
begin
encode_residual_fixed__lr_ph30_i_029_reg <= encode_residual_fixed__lr_ph30_i_029;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_i_029) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_i_029_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %scevgep78 = getelementptr i32* %smp, i32 %i.029*/
begin
encode_residual_fixed__lr_ph30_scevgep78 = (arg_smp + (4 * encode_residual_fixed__lr_ph30_i_029_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %scevgep78 = getelementptr i32* %smp, i32 %i.029*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
encode_residual_fixed__lr_ph30_scevgep78_reg <= encode_residual_fixed__lr_ph30_scevgep78;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_scevgep78_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %scevgep79 = getelementptr i32* %res, i32 %i.029*/
begin
encode_residual_fixed__lr_ph30_scevgep79 = (arg_res + (4 * encode_residual_fixed__lr_ph30_i_029_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %scevgep79 = getelementptr i32* %res, i32 %i.029*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
encode_residual_fixed__lr_ph30_scevgep79_reg <= encode_residual_fixed__lr_ph30_scevgep79;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_scevgep79_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph30_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
encode_residual_fixed__lr_ph30_2_reg <= encode_residual_fixed__lr_ph30_2;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_2_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %3 = add nsw i32 %i.029, 1*/
begin
encode_residual_fixed__lr_ph30_3 = (encode_residual_fixed__lr_ph30_i_029_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %3 = add nsw i32 %i.029, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
encode_residual_fixed__lr_ph30_3_reg <= encode_residual_fixed__lr_ph30_3;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_3_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %exitcond77 = icmp eq i32 %3, %order*/
begin
encode_residual_fixed__lr_ph30_exitcond77 = (encode_residual_fixed__lr_ph30_3 == arg_order);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph30*/
/*   %exitcond77 = icmp eq i32 %3, %order*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
encode_residual_fixed__lr_ph30_exitcond77_reg <= encode_residual_fixed__lr_ph30_exitcond77;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph30_exitcond77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph30_exitcond77_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.preheader13*/
/*   %4 = icmp sgt i32 %n, 0*/
begin
encode_residual_fixed__preheader13_4 = ($signed(arg_n) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.preheader13*/
/*   %4 = icmp sgt i32 %n, 0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader13_9))
begin
encode_residual_fixed__preheader13_4_reg <= encode_residual_fixed__preheader13_4;
if (reset == 1'b0 && ^(encode_residual_fixed__preheader13_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__preheader13_4_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.preheader*/
/*   %5 = icmp sgt i32 %n, 1*/
begin
encode_residual_fixed__preheader_5 = ($signed(arg_n) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.preheader*/
/*   %5 = icmp sgt i32 %n, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader_11))
begin
encode_residual_fixed__preheader_5_reg <= encode_residual_fixed__preheader_5;
if (reset == 1'b0 && ^(encode_residual_fixed__preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__preheader_5_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph12*/
/*   %tmp42 = add i32 %n, -1*/
begin
encode_residual_fixed__lr_ph12_tmp42 = (arg_n + -32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph12*/
/*   %tmp42 = add i32 %n, -1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph12_12))
begin
encode_residual_fixed__lr_ph12_tmp42_reg <= encode_residual_fixed__lr_ph12_tmp42;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph12_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph12_tmp42_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %i.115 = phi i32 [ %7, %.lr.ph16 ], [ 0, %.lr.ph16.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph16_i_115 = 32'd0;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %i.115 = phi i32 [ %7, %.lr.ph16 ], [ 0, %.lr.ph16.preheader ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph16_exitcond47_reg == 1'd0))) */
begin
encode_residual_fixed__lr_ph16_i_115 = encode_residual_fixed__lr_ph16_7_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %i.115 = phi i32 [ %7, %.lr.ph16 ], [ 0, %.lr.ph16.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph16_i_115_reg <= encode_residual_fixed__lr_ph16_i_115;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_i_115_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %i.115 = phi i32 [ %7, %.lr.ph16 ], [ 0, %.lr.ph16.preheader ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_16) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph16_exitcond47_reg == 1'd0)))
begin
encode_residual_fixed__lr_ph16_i_115_reg <= encode_residual_fixed__lr_ph16_i_115;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_i_115_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %scevgep48 = getelementptr i32* %smp, i32 %i.115*/
begin
encode_residual_fixed__lr_ph16_scevgep48 = (arg_smp + (4 * encode_residual_fixed__lr_ph16_i_115_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %scevgep48 = getelementptr i32* %smp, i32 %i.115*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
encode_residual_fixed__lr_ph16_scevgep48_reg <= encode_residual_fixed__lr_ph16_scevgep48;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_scevgep48_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %scevgep49 = getelementptr i32* %res, i32 %i.115*/
begin
encode_residual_fixed__lr_ph16_scevgep49 = (arg_res + (4 * encode_residual_fixed__lr_ph16_i_115_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %scevgep49 = getelementptr i32* %res, i32 %i.115*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
encode_residual_fixed__lr_ph16_scevgep49_reg <= encode_residual_fixed__lr_ph16_scevgep49;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_scevgep49_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph16_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
encode_residual_fixed__lr_ph16_6_reg <= encode_residual_fixed__lr_ph16_6;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_6_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %7 = add nsw i32 %i.115, 1*/
begin
encode_residual_fixed__lr_ph16_7 = (encode_residual_fixed__lr_ph16_i_115_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %7 = add nsw i32 %i.115, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
encode_residual_fixed__lr_ph16_7_reg <= encode_residual_fixed__lr_ph16_7;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_7_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %exitcond47 = icmp eq i32 %7, %n*/
begin
encode_residual_fixed__lr_ph16_exitcond47 = (encode_residual_fixed__lr_ph16_7 == arg_n);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph16*/
/*   %exitcond47 = icmp eq i32 %7, %n*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
encode_residual_fixed__lr_ph16_exitcond47_reg <= encode_residual_fixed__lr_ph16_exitcond47;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph16_exitcond47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph16_exitcond47_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %indvar40 = phi i32 [ 0, %.lr.ph12 ], [ %tmp43, %8 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_8_indvar40 = 32'd0;
end
/* encode_residual_fixed: %8*/
/*   %indvar40 = phi i32 [ 0, %.lr.ph12 ], [ %tmp43, %8 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_8_21) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_8_exitcond_reg == 1'd0))) */
begin
encode_residual_fixed_8_indvar40 = encode_residual_fixed_8_tmp43_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %indvar40 = phi i32 [ 0, %.lr.ph12 ], [ %tmp43, %8 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph12_12) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_8_indvar40_reg <= encode_residual_fixed_8_indvar40;
if (reset == 1'b0 && ^(encode_residual_fixed_8_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_indvar40_reg"); $finish; end
end
/* encode_residual_fixed: %8*/
/*   %indvar40 = phi i32 [ 0, %.lr.ph12 ], [ %tmp43, %8 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_8_21) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_8_exitcond_reg == 1'd0)))
begin
encode_residual_fixed_8_indvar40_reg <= encode_residual_fixed_8_indvar40;
if (reset == 1'b0 && ^(encode_residual_fixed_8_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_indvar40_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %tmp43 = add i32 %indvar40, 1*/
begin
encode_residual_fixed_8_tmp43 = (encode_residual_fixed_8_indvar40_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %tmp43 = add i32 %indvar40, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
encode_residual_fixed_8_tmp43_reg <= encode_residual_fixed_8_tmp43;
if (reset == 1'b0 && ^(encode_residual_fixed_8_tmp43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_tmp43_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %scevgep44 = getelementptr i32* %smp, i32 %tmp43*/
begin
encode_residual_fixed_8_scevgep44 = (arg_smp + (4 * encode_residual_fixed_8_tmp43_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %scevgep44 = getelementptr i32* %smp, i32 %tmp43*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
encode_residual_fixed_8_scevgep44_reg <= encode_residual_fixed_8_scevgep44;
if (reset == 1'b0 && ^(encode_residual_fixed_8_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_scevgep44_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %scevgep45 = getelementptr i32* %res, i32 %tmp43*/
begin
encode_residual_fixed_8_scevgep45 = (arg_res + (4 * encode_residual_fixed_8_tmp43_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %scevgep45 = getelementptr i32* %res, i32 %tmp43*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
encode_residual_fixed_8_scevgep45_reg <= encode_residual_fixed_8_scevgep45;
if (reset == 1'b0 && ^(encode_residual_fixed_8_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_scevgep45_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %scevgep46 = getelementptr i32* %smp, i32 %indvar40*/
begin
encode_residual_fixed_8_scevgep46 = (arg_smp + (4 * encode_residual_fixed_8_indvar40_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %scevgep46 = getelementptr i32* %smp, i32 %indvar40*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
encode_residual_fixed_8_scevgep46_reg <= encode_residual_fixed_8_scevgep46;
if (reset == 1'b0 && ^(encode_residual_fixed_8_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
begin
encode_residual_fixed_8_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
encode_residual_fixed_8_9_reg <= encode_residual_fixed_8_9;
if (reset == 1'b0 && ^(encode_residual_fixed_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_9_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
begin
encode_residual_fixed_8_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_19))
begin
encode_residual_fixed_8_10_reg <= encode_residual_fixed_8_10;
if (reset == 1'b0 && ^(encode_residual_fixed_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_10_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %11 = sub nsw i32 %9, %10*/
begin
encode_residual_fixed_8_11 = (encode_residual_fixed_8_9 - encode_residual_fixed_8_10_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %11 = sub nsw i32 %9, %10*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
encode_residual_fixed_8_11_reg <= encode_residual_fixed_8_11;
if (reset == 1'b0 && ^(encode_residual_fixed_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_11_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %8*/
/*   %exitcond = icmp eq i32 %tmp43, %tmp42*/
begin
encode_residual_fixed_8_exitcond = (encode_residual_fixed_8_tmp43 == encode_residual_fixed__lr_ph12_tmp42_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %8*/
/*   %exitcond = icmp eq i32 %tmp43, %tmp42*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
encode_residual_fixed_8_exitcond_reg <= encode_residual_fixed_8_exitcond;
if (reset == 1'b0 && ^(encode_residual_fixed_8_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_8_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %12*/
/*   %13 = icmp sgt i32 %n, 2*/
begin
encode_residual_fixed_12_13 = ($signed(arg_n) > $signed(32'd2));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %12*/
/*   %13 = icmp sgt i32 %n, 2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_12_22))
begin
encode_residual_fixed_12_13_reg <= encode_residual_fixed_12_13;
if (reset == 1'b0 && ^(encode_residual_fixed_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_12_13_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %14 = add nsw i32 %order, -2*/
begin
encode_residual_fixed__lr_ph_14 = (arg_order + -32'd2);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %14 = add nsw i32 %order, -2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_23))
begin
encode_residual_fixed__lr_ph_14_reg <= encode_residual_fixed__lr_ph_14;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_14_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %15 = add nsw i32 %order, -1*/
begin
encode_residual_fixed__lr_ph_15 = (arg_order + -32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %15 = add nsw i32 %order, -1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_23))
begin
encode_residual_fixed__lr_ph_15_reg <= encode_residual_fixed__lr_ph_15;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_15_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %16 = getelementptr inbounds i32* %smp, i32 %14*/
begin
encode_residual_fixed__lr_ph_16 = (arg_smp + (4 * encode_residual_fixed__lr_ph_14_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %16 = getelementptr inbounds i32* %smp, i32 %14*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
encode_residual_fixed__lr_ph_16_reg <= encode_residual_fixed__lr_ph_16;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_16_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %17 = getelementptr inbounds i32* %smp, i32 %15*/
begin
encode_residual_fixed__lr_ph_17 = (arg_smp + (4 * encode_residual_fixed__lr_ph_15_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %17 = getelementptr inbounds i32* %smp, i32 %15*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
encode_residual_fixed__lr_ph_17_reg <= encode_residual_fixed__lr_ph_17;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_17_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26))
begin
encode_residual_fixed__lr_ph_18_reg <= encode_residual_fixed__lr_ph_18;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_18_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26))
begin
encode_residual_fixed__lr_ph_19_reg <= encode_residual_fixed__lr_ph_19;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_19_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %20 = sub nsw i32 %19, %18*/
begin
encode_residual_fixed__lr_ph_20 = (encode_residual_fixed__lr_ph_19 - encode_residual_fixed__lr_ph_18);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph*/
/*   %20 = sub nsw i32 %19, %18*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26))
begin
encode_residual_fixed__lr_ph_20_reg <= encode_residual_fixed__lr_ph_20;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph_20_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %21 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_21_indvar = 32'd0;
end
/* encode_residual_fixed: %21*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %21 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd1))) */
begin
encode_residual_fixed_21_indvar = encode_residual_fixed_21_indvar_next_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %21 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_21_indvar_reg <= encode_residual_fixed_21_indvar;
if (reset == 1'b0 && ^(encode_residual_fixed_21_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_indvar_reg"); $finish; end
end
/* encode_residual_fixed: %21*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %21 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd1)))
begin
encode_residual_fixed_21_indvar_reg <= encode_residual_fixed_21_indvar;
if (reset == 1'b0 && ^(encode_residual_fixed_21_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_indvar_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %a.08 = phi i32 [ %20, %.lr.ph ], [ %28, %21 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_21_a_08 = encode_residual_fixed__lr_ph_20;
end
/* encode_residual_fixed: %21*/
/*   %a.08 = phi i32 [ %20, %.lr.ph ], [ %28, %21 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd1))) */
begin
encode_residual_fixed_21_a_08 = encode_residual_fixed_21_28_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %a.08 = phi i32 [ %20, %.lr.ph ], [ %28, %21 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_26) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_21_a_08_reg <= encode_residual_fixed_21_a_08;
if (reset == 1'b0 && ^(encode_residual_fixed_21_a_08) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_a_08_reg"); $finish; end
end
/* encode_residual_fixed: %21*/
/*   %a.08 = phi i32 [ %20, %.lr.ph ], [ %28, %21 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_21_34) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_21_30_reg == 1'd1)))
begin
encode_residual_fixed_21_a_08_reg <= encode_residual_fixed_21_a_08;
if (reset == 1'b0 && ^(encode_residual_fixed_21_a_08) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_a_08_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %tmp31 = shl i32 %indvar, 1*/
begin
encode_residual_fixed_21_tmp31 = (encode_residual_fixed_21_indvar_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %tmp31 = shl i32 %indvar, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_tmp31_reg <= encode_residual_fixed_21_tmp31;
if (reset == 1'b0 && ^(encode_residual_fixed_21_tmp31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_tmp31_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %tmp32 = add i32 %tmp31, 2*/
begin
encode_residual_fixed_21_tmp32 = (encode_residual_fixed_21_tmp31 + 32'd2);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %tmp32 = add i32 %tmp31, 2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_tmp32_reg <= encode_residual_fixed_21_tmp32;
if (reset == 1'b0 && ^(encode_residual_fixed_21_tmp32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_tmp32_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %scevgep = getelementptr i32* %smp, i32 %tmp32*/
begin
encode_residual_fixed_21_scevgep = (arg_smp + (4 * encode_residual_fixed_21_tmp32_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %scevgep = getelementptr i32* %smp, i32 %tmp32*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
encode_residual_fixed_21_scevgep_reg <= encode_residual_fixed_21_scevgep;
if (reset == 1'b0 && ^(encode_residual_fixed_21_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %scevgep33 = getelementptr i32* %res, i32 %tmp32*/
begin
encode_residual_fixed_21_scevgep33 = (arg_res + (4 * encode_residual_fixed_21_tmp32_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %scevgep33 = getelementptr i32* %res, i32 %tmp32*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
encode_residual_fixed_21_scevgep33_reg <= encode_residual_fixed_21_scevgep33;
if (reset == 1'b0 && ^(encode_residual_fixed_21_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_scevgep33_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %tmp3480 = or i32 %tmp31, 1*/
begin
encode_residual_fixed_21_tmp3480 = (encode_residual_fixed_21_tmp31 | 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %tmp3480 = or i32 %tmp31, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_tmp3480_reg <= encode_residual_fixed_21_tmp3480;
if (reset == 1'b0 && ^(encode_residual_fixed_21_tmp3480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_tmp3480_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %scevgep35 = getelementptr i32* %smp, i32 %tmp3480*/
begin
encode_residual_fixed_21_scevgep35 = (arg_smp + (4 * encode_residual_fixed_21_tmp3480));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %scevgep35 = getelementptr i32* %smp, i32 %tmp3480*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_scevgep35_reg <= encode_residual_fixed_21_scevgep35;
if (reset == 1'b0 && ^(encode_residual_fixed_21_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_scevgep35_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %tmp36 = add i32 %tmp31, 3*/
begin
encode_residual_fixed_21_tmp36 = (encode_residual_fixed_21_tmp31 + 32'd3);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %tmp36 = add i32 %tmp31, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_tmp36_reg <= encode_residual_fixed_21_tmp36;
if (reset == 1'b0 && ^(encode_residual_fixed_21_tmp36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_tmp36_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %scevgep37 = getelementptr i32* %smp, i32 %tmp36*/
begin
encode_residual_fixed_21_scevgep37 = (arg_smp + (4 * encode_residual_fixed_21_tmp36_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %scevgep37 = getelementptr i32* %smp, i32 %tmp36*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
encode_residual_fixed_21_scevgep37_reg <= encode_residual_fixed_21_scevgep37;
if (reset == 1'b0 && ^(encode_residual_fixed_21_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_scevgep37_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %scevgep38 = getelementptr i32* %res, i32 %tmp36*/
begin
encode_residual_fixed_21_scevgep38 = (arg_res + (4 * encode_residual_fixed_21_tmp36_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %scevgep38 = getelementptr i32* %res, i32 %tmp36*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
encode_residual_fixed_21_scevgep38_reg <= encode_residual_fixed_21_scevgep38;
if (reset == 1'b0 && ^(encode_residual_fixed_21_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_scevgep38_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %tmp39 = add i32 %tmp31, 4*/
begin
encode_residual_fixed_21_tmp39 = (encode_residual_fixed_21_tmp31 + 32'd4);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %tmp39 = add i32 %tmp31, 4*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_tmp39_reg <= encode_residual_fixed_21_tmp39;
if (reset == 1'b0 && ^(encode_residual_fixed_21_tmp39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_tmp39_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
begin
encode_residual_fixed_21_22 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
encode_residual_fixed_21_22_reg <= encode_residual_fixed_21_22;
if (reset == 1'b0 && ^(encode_residual_fixed_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_22_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
begin
encode_residual_fixed_21_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_29))
begin
encode_residual_fixed_21_23_reg <= encode_residual_fixed_21_23;
if (reset == 1'b0 && ^(encode_residual_fixed_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_23_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %24 = sub nsw i32 %22, %23*/
begin
encode_residual_fixed_21_24 = (encode_residual_fixed_21_22 - encode_residual_fixed_21_23_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %24 = sub nsw i32 %22, %23*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
encode_residual_fixed_21_24_reg <= encode_residual_fixed_21_24;
if (reset == 1'b0 && ^(encode_residual_fixed_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_24_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %25 = sub nsw i32 %24, %a.08*/
begin
encode_residual_fixed_21_25 = (encode_residual_fixed_21_24 - encode_residual_fixed_21_a_08_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %25 = sub nsw i32 %24, %a.08*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
encode_residual_fixed_21_25_reg <= encode_residual_fixed_21_25;
if (reset == 1'b0 && ^(encode_residual_fixed_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_25_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
begin
encode_residual_fixed_21_26 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
encode_residual_fixed_21_26_reg <= encode_residual_fixed_21_26;
if (reset == 1'b0 && ^(encode_residual_fixed_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_26_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
begin
encode_residual_fixed_21_27 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
encode_residual_fixed_21_27_reg <= encode_residual_fixed_21_27;
if (reset == 1'b0 && ^(encode_residual_fixed_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_27_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %28 = sub nsw i32 %26, %27*/
begin
encode_residual_fixed_21_28 = (encode_residual_fixed_21_26 - encode_residual_fixed_21_27);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %28 = sub nsw i32 %26, %27*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
encode_residual_fixed_21_28_reg <= encode_residual_fixed_21_28;
if (reset == 1'b0 && ^(encode_residual_fixed_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_28_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %29 = sub nsw i32 %28, %24*/
begin
encode_residual_fixed_21_29 = (encode_residual_fixed_21_28 - encode_residual_fixed_21_24_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %29 = sub nsw i32 %28, %24*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
encode_residual_fixed_21_29_reg <= encode_residual_fixed_21_29;
if (reset == 1'b0 && ^(encode_residual_fixed_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_29_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %30 = icmp slt i32 %tmp39, %n*/
begin
encode_residual_fixed_21_30 = ($signed(encode_residual_fixed_21_tmp39) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %30 = icmp slt i32 %tmp39, %n*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_30_reg <= encode_residual_fixed_21_30;
if (reset == 1'b0 && ^(encode_residual_fixed_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_30_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %21*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
encode_residual_fixed_21_indvar_next = (encode_residual_fixed_21_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %21*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
encode_residual_fixed_21_indvar_next_reg <= encode_residual_fixed_21_indvar_next;
if (reset == 1'b0 && ^(encode_residual_fixed_21_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_21_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %32 = icmp eq i32 %order, 3*/
begin
encode_residual_fixed_31_32 = (arg_order == 32'd3);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %32 = icmp eq i32 %order, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35))
begin
encode_residual_fixed_31_32_reg <= encode_residual_fixed_31_32;
if (reset == 1'b0 && ^(encode_residual_fixed_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_32_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %33 = add nsw i32 %order, -1*/
begin
encode_residual_fixed_31_33 = (arg_order + -32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %33 = add nsw i32 %order, -1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35))
begin
encode_residual_fixed_31_33_reg <= encode_residual_fixed_31_33;
if (reset == 1'b0 && ^(encode_residual_fixed_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_33_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %34 = getelementptr inbounds i32* %smp, i32 %33*/
begin
encode_residual_fixed_31_34 = (arg_smp + (4 * encode_residual_fixed_31_33_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %34 = getelementptr inbounds i32* %smp, i32 %33*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
encode_residual_fixed_31_34_reg <= encode_residual_fixed_31_34;
if (reset == 1'b0 && ^(encode_residual_fixed_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_34_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
begin
encode_residual_fixed_31_35 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38))
begin
encode_residual_fixed_31_35_reg <= encode_residual_fixed_31_35;
if (reset == 1'b0 && ^(encode_residual_fixed_31_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_35_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %36 = add nsw i32 %order, -2*/
begin
encode_residual_fixed_31_36 = (arg_order + -32'd2);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %36 = add nsw i32 %order, -2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35))
begin
encode_residual_fixed_31_36_reg <= encode_residual_fixed_31_36;
if (reset == 1'b0 && ^(encode_residual_fixed_31_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_36_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %37 = getelementptr inbounds i32* %smp, i32 %36*/
begin
encode_residual_fixed_31_37 = (arg_smp + (4 * encode_residual_fixed_31_36_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %37 = getelementptr inbounds i32* %smp, i32 %36*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
encode_residual_fixed_31_37_reg <= encode_residual_fixed_31_37;
if (reset == 1'b0 && ^(encode_residual_fixed_31_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_37_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
begin
encode_residual_fixed_31_38 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38))
begin
encode_residual_fixed_31_38_reg <= encode_residual_fixed_31_38;
if (reset == 1'b0 && ^(encode_residual_fixed_31_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_38_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %39 = sub nsw i32 %35, %38*/
begin
encode_residual_fixed_31_39 = (encode_residual_fixed_31_35 - encode_residual_fixed_31_38);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %39 = sub nsw i32 %35, %38*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38))
begin
encode_residual_fixed_31_39_reg <= encode_residual_fixed_31_39;
if (reset == 1'b0 && ^(encode_residual_fixed_31_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_39_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %40 = shl nsw i32 %38, 1*/
begin
encode_residual_fixed_31_40 = (encode_residual_fixed_31_38 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %40 = shl nsw i32 %38, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38))
begin
encode_residual_fixed_31_40_reg <= encode_residual_fixed_31_40;
if (reset == 1'b0 && ^(encode_residual_fixed_31_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_40_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %41 = sub nsw i32 %35, %40*/
begin
encode_residual_fixed_31_41 = (encode_residual_fixed_31_35 - encode_residual_fixed_31_40);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %41 = sub nsw i32 %35, %40*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_38))
begin
encode_residual_fixed_31_41_reg <= encode_residual_fixed_31_41;
if (reset == 1'b0 && ^(encode_residual_fixed_31_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_41_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %42 = add nsw i32 %order, -3*/
begin
encode_residual_fixed_31_42 = (arg_order + -32'd3);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %42 = add nsw i32 %order, -3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_35))
begin
encode_residual_fixed_31_42_reg <= encode_residual_fixed_31_42;
if (reset == 1'b0 && ^(encode_residual_fixed_31_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_42_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %43 = getelementptr inbounds i32* %smp, i32 %42*/
begin
encode_residual_fixed_31_43 = (arg_smp + (4 * encode_residual_fixed_31_42_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %43 = getelementptr inbounds i32* %smp, i32 %42*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
encode_residual_fixed_31_43_reg <= encode_residual_fixed_31_43;
if (reset == 1'b0 && ^(encode_residual_fixed_31_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_43_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
begin
encode_residual_fixed_31_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_39))
begin
encode_residual_fixed_31_44_reg <= encode_residual_fixed_31_44;
if (reset == 1'b0 && ^(encode_residual_fixed_31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_44_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %31*/
/*   %45 = add nsw i32 %41, %44*/
begin
encode_residual_fixed_31_45 = (encode_residual_fixed_31_41_reg + encode_residual_fixed_31_44);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %31*/
/*   %45 = add nsw i32 %41, %44*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_39))
begin
encode_residual_fixed_31_45_reg <= encode_residual_fixed_31_45;
if (reset == 1'b0 && ^(encode_residual_fixed_31_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_31_45_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.preheader23*/
/*   %46 = icmp sgt i32 %n, 3*/
begin
encode_residual_fixed__preheader23_46 = ($signed(arg_n) > $signed(32'd3));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.preheader23*/
/*   %46 = icmp sgt i32 %n, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__preheader23_40))
begin
encode_residual_fixed__preheader23_46_reg <= encode_residual_fixed__preheader23_46;
if (reset == 1'b0 && ^(encode_residual_fixed__preheader23_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__preheader23_46_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar65 = phi i32 [ %indvar.next66, %.lr.ph28 ], [ 0, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_indvar65 = 32'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar65 = phi i32 [ %indvar.next66, %.lr.ph28 ], [ 0, %.lr.ph28.preheader ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1))) */
begin
encode_residual_fixed__lr_ph28_indvar65 = encode_residual_fixed__lr_ph28_indvar_next66_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar65 = phi i32 [ %indvar.next66, %.lr.ph28 ], [ 0, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_indvar65_reg <= encode_residual_fixed__lr_ph28_indvar65;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_indvar65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_indvar65_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar65 = phi i32 [ %indvar.next66, %.lr.ph28 ], [ 0, %.lr.ph28.preheader ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1)))
begin
encode_residual_fixed__lr_ph28_indvar65_reg <= encode_residual_fixed__lr_ph28_indvar65;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_indvar65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_indvar65_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %c.027 = phi i32 [ %55, %.lr.ph28 ], [ %45, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_c_027 = encode_residual_fixed_31_45_reg;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %c.027 = phi i32 [ %55, %.lr.ph28 ], [ %45, %.lr.ph28.preheader ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1))) */
begin
encode_residual_fixed__lr_ph28_c_027 = encode_residual_fixed__lr_ph28_55_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %c.027 = phi i32 [ %55, %.lr.ph28 ], [ %45, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_c_027_reg <= encode_residual_fixed__lr_ph28_c_027;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_c_027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_c_027_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %c.027 = phi i32 [ %55, %.lr.ph28 ], [ %45, %.lr.ph28.preheader ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1)))
begin
encode_residual_fixed__lr_ph28_c_027_reg <= encode_residual_fixed__lr_ph28_c_027;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_c_027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_c_027_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %a1.025 = phi i32 [ %54, %.lr.ph28 ], [ %39, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_a1_025 = encode_residual_fixed_31_39_reg;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %a1.025 = phi i32 [ %54, %.lr.ph28 ], [ %39, %.lr.ph28.preheader ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1))) */
begin
encode_residual_fixed__lr_ph28_a1_025 = encode_residual_fixed__lr_ph28_54_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %a1.025 = phi i32 [ %54, %.lr.ph28 ], [ %39, %.lr.ph28.preheader ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_preheader_41) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed__lr_ph28_a1_025_reg <= encode_residual_fixed__lr_ph28_a1_025;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_a1_025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_a1_025_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %a1.025 = phi i32 [ %54, %.lr.ph28 ], [ %39, %.lr.ph28.preheader ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_49) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed__lr_ph28_57_reg == 1'd1)))
begin
encode_residual_fixed__lr_ph28_a1_025_reg <= encode_residual_fixed__lr_ph28_a1_025;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_a1_025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_a1_025_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp67 = shl i32 %indvar65, 1*/
begin
encode_residual_fixed__lr_ph28_tmp67 = (encode_residual_fixed__lr_ph28_indvar65_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp67 = shl i32 %indvar65, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_tmp67_reg <= encode_residual_fixed__lr_ph28_tmp67;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_tmp67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_tmp67_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp68 = add i32 %tmp67, 3*/
begin
encode_residual_fixed__lr_ph28_tmp68 = (encode_residual_fixed__lr_ph28_tmp67 + 32'd3);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp68 = add i32 %tmp67, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_tmp68_reg <= encode_residual_fixed__lr_ph28_tmp68;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_tmp68_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep69 = getelementptr i32* %smp, i32 %tmp68*/
begin
encode_residual_fixed__lr_ph28_scevgep69 = (arg_smp + (4 * encode_residual_fixed__lr_ph28_tmp68_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep69 = getelementptr i32* %smp, i32 %tmp68*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
encode_residual_fixed__lr_ph28_scevgep69_reg <= encode_residual_fixed__lr_ph28_scevgep69;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_scevgep69_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep70 = getelementptr i32* %res, i32 %tmp68*/
begin
encode_residual_fixed__lr_ph28_scevgep70 = (arg_res + (4 * encode_residual_fixed__lr_ph28_tmp68_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep70 = getelementptr i32* %res, i32 %tmp68*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
encode_residual_fixed__lr_ph28_scevgep70_reg <= encode_residual_fixed__lr_ph28_scevgep70;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_scevgep70_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp71 = add i32 %tmp67, 2*/
begin
encode_residual_fixed__lr_ph28_tmp71 = (encode_residual_fixed__lr_ph28_tmp67 + 32'd2);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp71 = add i32 %tmp67, 2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_tmp71_reg <= encode_residual_fixed__lr_ph28_tmp71;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_tmp71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_tmp71_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep72 = getelementptr i32* %smp, i32 %tmp71*/
begin
encode_residual_fixed__lr_ph28_scevgep72 = (arg_smp + (4 * encode_residual_fixed__lr_ph28_tmp71_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep72 = getelementptr i32* %smp, i32 %tmp71*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
encode_residual_fixed__lr_ph28_scevgep72_reg <= encode_residual_fixed__lr_ph28_scevgep72;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_scevgep72_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp73 = add i32 %tmp67, 4*/
begin
encode_residual_fixed__lr_ph28_tmp73 = (encode_residual_fixed__lr_ph28_tmp67 + 32'd4);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp73 = add i32 %tmp67, 4*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_tmp73_reg <= encode_residual_fixed__lr_ph28_tmp73;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_tmp73_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep74 = getelementptr i32* %res, i32 %tmp73*/
begin
encode_residual_fixed__lr_ph28_scevgep74 = (arg_res + (4 * encode_residual_fixed__lr_ph28_tmp73_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep74 = getelementptr i32* %res, i32 %tmp73*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
encode_residual_fixed__lr_ph28_scevgep74_reg <= encode_residual_fixed__lr_ph28_scevgep74;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_scevgep74_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep75 = getelementptr i32* %smp, i32 %tmp73*/
begin
encode_residual_fixed__lr_ph28_scevgep75 = (arg_smp + (4 * encode_residual_fixed__lr_ph28_tmp73_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %scevgep75 = getelementptr i32* %smp, i32 %tmp73*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
encode_residual_fixed__lr_ph28_scevgep75_reg <= encode_residual_fixed__lr_ph28_scevgep75;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_scevgep75_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp76 = add i32 %tmp67, 5*/
begin
encode_residual_fixed__lr_ph28_tmp76 = (encode_residual_fixed__lr_ph28_tmp67 + 32'd5);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %tmp76 = add i32 %tmp67, 5*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_tmp76_reg <= encode_residual_fixed__lr_ph28_tmp76;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_tmp76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_tmp76_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph28_47 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
encode_residual_fixed__lr_ph28_47_reg <= encode_residual_fixed__lr_ph28_47;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_47_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph28_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
encode_residual_fixed__lr_ph28_48_reg <= encode_residual_fixed__lr_ph28_48;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_48_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %49 = sub nsw i32 %47, %48*/
begin
encode_residual_fixed__lr_ph28_49 = (encode_residual_fixed__lr_ph28_47 - encode_residual_fixed__lr_ph28_48);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %49 = sub nsw i32 %47, %48*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
encode_residual_fixed__lr_ph28_49_reg <= encode_residual_fixed__lr_ph28_49;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_49_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %50 = sub nsw i32 %49, %a1.025*/
begin
encode_residual_fixed__lr_ph28_50 = (encode_residual_fixed__lr_ph28_49 - encode_residual_fixed__lr_ph28_a1_025_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %50 = sub nsw i32 %49, %a1.025*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
encode_residual_fixed__lr_ph28_50_reg <= encode_residual_fixed__lr_ph28_50;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_50_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %51 = sub nsw i32 %50, %c.027*/
begin
encode_residual_fixed__lr_ph28_51 = (encode_residual_fixed__lr_ph28_50 - encode_residual_fixed__lr_ph28_c_027_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %51 = sub nsw i32 %50, %c.027*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
encode_residual_fixed__lr_ph28_51_reg <= encode_residual_fixed__lr_ph28_51;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_51_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph28_52 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
encode_residual_fixed__lr_ph28_52_reg <= encode_residual_fixed__lr_ph28_52;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_52_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph28_53 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
encode_residual_fixed__lr_ph28_53_reg <= encode_residual_fixed__lr_ph28_53;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_53_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %54 = sub nsw i32 %52, %53*/
begin
encode_residual_fixed__lr_ph28_54 = (encode_residual_fixed__lr_ph28_52 - encode_residual_fixed__lr_ph28_53);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %54 = sub nsw i32 %52, %53*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
encode_residual_fixed__lr_ph28_54_reg <= encode_residual_fixed__lr_ph28_54;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_54_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %55 = sub nsw i32 %54, %49*/
begin
encode_residual_fixed__lr_ph28_55 = (encode_residual_fixed__lr_ph28_54 - encode_residual_fixed__lr_ph28_49_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %55 = sub nsw i32 %54, %49*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
encode_residual_fixed__lr_ph28_55_reg <= encode_residual_fixed__lr_ph28_55;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_55_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %56 = sub nsw i32 %55, %50*/
begin
encode_residual_fixed__lr_ph28_56 = (encode_residual_fixed__lr_ph28_55 - encode_residual_fixed__lr_ph28_50_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %56 = sub nsw i32 %55, %50*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
encode_residual_fixed__lr_ph28_56_reg <= encode_residual_fixed__lr_ph28_56;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_56_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %57 = icmp slt i32 %tmp76, %n*/
begin
encode_residual_fixed__lr_ph28_57 = ($signed(encode_residual_fixed__lr_ph28_tmp76) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %57 = icmp slt i32 %tmp76, %n*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_57_reg <= encode_residual_fixed__lr_ph28_57;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_57_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar.next66 = add i32 %indvar65, 1*/
begin
encode_residual_fixed__lr_ph28_indvar_next66 = (encode_residual_fixed__lr_ph28_indvar65_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph28*/
/*   %indvar.next66 = add i32 %indvar65, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_42))
begin
encode_residual_fixed__lr_ph28_indvar_next66_reg <= encode_residual_fixed__lr_ph28_indvar_next66;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph28_indvar_next66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph28_indvar_next66_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %58*/
/*   %59 = icmp slt i32 %order, %n*/
begin
encode_residual_fixed_58_59 = ($signed(arg_order) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %58*/
/*   %59 = icmp slt i32 %order, %n*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_58_50))
begin
encode_residual_fixed_58_59_reg <= encode_residual_fixed_58_59;
if (reset == 1'b0 && ^(encode_residual_fixed_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_58_59_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %60 = add nsw i32 %order, -4*/
begin
encode_residual_fixed__lr_ph22_60 = (arg_order + -32'd4);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %60 = add nsw i32 %order, -4*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51))
begin
encode_residual_fixed__lr_ph22_60_reg <= encode_residual_fixed__lr_ph22_60;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_60_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %61 = getelementptr inbounds i32* %smp, i32 %60*/
begin
encode_residual_fixed__lr_ph22_61 = (arg_smp + (4 * encode_residual_fixed__lr_ph22_60_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %61 = getelementptr inbounds i32* %smp, i32 %60*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
encode_residual_fixed__lr_ph22_61_reg <= encode_residual_fixed__lr_ph22_61;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_61_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp = sub i32 %44, %38*/
begin
encode_residual_fixed__lr_ph22_tmp = (encode_residual_fixed_31_44_reg - encode_residual_fixed_31_38_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp = sub i32 %44, %38*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51))
begin
encode_residual_fixed__lr_ph22_tmp_reg <= encode_residual_fixed__lr_ph22_tmp;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_tmp_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
begin
encode_residual_fixed__lr_ph22_62 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54))
begin
encode_residual_fixed__lr_ph22_62_reg <= encode_residual_fixed__lr_ph22_62;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_62_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %63 = sub i32 %35, %62*/
begin
encode_residual_fixed__lr_ph22_63 = (encode_residual_fixed_31_35_reg - encode_residual_fixed__lr_ph22_62);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %63 = sub i32 %35, %62*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54))
begin
encode_residual_fixed__lr_ph22_63_reg <= encode_residual_fixed__lr_ph22_63;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_63_reg"); $finish; end
end
end
always @(*) begin
encode_residual_fixed__lr_ph22_tmp7 = encode_residual_fixed__lr_ph22_tmp7_stage0_reg;
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp7 = mul i32 %tmp, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
encode_residual_fixed__lr_ph22_tmp7_reg <= encode_residual_fixed__lr_ph22_tmp7;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_tmp7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_tmp7_reg"); $finish; end
end
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp7 = mul i32 %tmp, 3*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
encode_residual_fixed__lr_ph22_tmp7_reg <= encode_residual_fixed__lr_ph22_tmp7;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_tmp7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_tmp7_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %64 = add i32 %63, %tmp7*/
begin
encode_residual_fixed__lr_ph22_64 = (encode_residual_fixed__lr_ph22_63 + encode_residual_fixed__lr_ph22_tmp7_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %64 = add i32 %63, %tmp7*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54))
begin
encode_residual_fixed__lr_ph22_64_reg <= encode_residual_fixed__lr_ph22_64;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_64_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp59 = add i32 %order, 1*/
begin
encode_residual_fixed__lr_ph22_tmp59 = (arg_order + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp59 = add i32 %order, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51))
begin
encode_residual_fixed__lr_ph22_tmp59_reg <= encode_residual_fixed__lr_ph22_tmp59;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_tmp59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_tmp59_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp63 = add i32 %order, 2*/
begin
encode_residual_fixed__lr_ph22_tmp63 = (arg_order + 32'd2);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp63 = add i32 %order, 2*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_51))
begin
encode_residual_fixed__lr_ph22_tmp63_reg <= encode_residual_fixed__lr_ph22_tmp63;
if (reset == 1'b0 && ^(encode_residual_fixed__lr_ph22_tmp63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed__lr_ph22_tmp63_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %indvar50 = phi i32 [ 0, %.lr.ph22 ], [ %indvar.next51, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_indvar50 = 32'd0;
end
/* encode_residual_fixed: %65*/
/*   %indvar50 = phi i32 [ 0, %.lr.ph22 ], [ %indvar.next51, %65 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1))) */
begin
encode_residual_fixed_65_indvar50 = encode_residual_fixed_65_indvar_next51_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %indvar50 = phi i32 [ 0, %.lr.ph22 ], [ %indvar.next51, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_indvar50_reg <= encode_residual_fixed_65_indvar50;
if (reset == 1'b0 && ^(encode_residual_fixed_65_indvar50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_indvar50_reg"); $finish; end
end
/* encode_residual_fixed: %65*/
/*   %indvar50 = phi i32 [ 0, %.lr.ph22 ], [ %indvar.next51, %65 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1)))
begin
encode_residual_fixed_65_indvar50_reg <= encode_residual_fixed_65_indvar50;
if (reset == 1'b0 && ^(encode_residual_fixed_65_indvar50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_indvar50_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %e.021 = phi i32 [ %64, %.lr.ph22 ], [ %76, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_e_021 = encode_residual_fixed__lr_ph22_64;
end
/* encode_residual_fixed: %65*/
/*   %e.021 = phi i32 [ %64, %.lr.ph22 ], [ %76, %65 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1))) */
begin
encode_residual_fixed_65_e_021 = encode_residual_fixed_65_76_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %e.021 = phi i32 [ %64, %.lr.ph22 ], [ %76, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_e_021_reg <= encode_residual_fixed_65_e_021;
if (reset == 1'b0 && ^(encode_residual_fixed_65_e_021) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_e_021_reg"); $finish; end
end
/* encode_residual_fixed: %65*/
/*   %e.021 = phi i32 [ %64, %.lr.ph22 ], [ %76, %65 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1)))
begin
encode_residual_fixed_65_e_021_reg <= encode_residual_fixed_65_e_021;
if (reset == 1'b0 && ^(encode_residual_fixed_65_e_021) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_e_021_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %c4.020 = phi i32 [ %45, %.lr.ph22 ], [ %75, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_c4_020 = encode_residual_fixed_31_45_reg;
end
/* encode_residual_fixed: %65*/
/*   %c4.020 = phi i32 [ %45, %.lr.ph22 ], [ %75, %65 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1))) */
begin
encode_residual_fixed_65_c4_020 = encode_residual_fixed_65_75_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %c4.020 = phi i32 [ %45, %.lr.ph22 ], [ %75, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_c4_020_reg <= encode_residual_fixed_65_c4_020;
if (reset == 1'b0 && ^(encode_residual_fixed_65_c4_020) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_c4_020_reg"); $finish; end
end
/* encode_residual_fixed: %65*/
/*   %c4.020 = phi i32 [ %45, %.lr.ph22 ], [ %75, %65 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1)))
begin
encode_residual_fixed_65_c4_020_reg <= encode_residual_fixed_65_c4_020;
if (reset == 1'b0 && ^(encode_residual_fixed_65_c4_020) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_c4_020_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %a3.019 = phi i32 [ %39, %.lr.ph22 ], [ %74, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_a3_019 = encode_residual_fixed_31_39_reg;
end
/* encode_residual_fixed: %65*/
/*   %a3.019 = phi i32 [ %39, %.lr.ph22 ], [ %74, %65 ]*/
else /* if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1))) */
begin
encode_residual_fixed_65_a3_019 = encode_residual_fixed_65_74_reg;
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %a3.019 = phi i32 [ %39, %.lr.ph22 ], [ %74, %65 ]*/
if (((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_54) & (memory_controller_waitrequest == 1'd0)))
begin
encode_residual_fixed_65_a3_019_reg <= encode_residual_fixed_65_a3_019;
if (reset == 1'b0 && ^(encode_residual_fixed_65_a3_019) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_a3_019_reg"); $finish; end
end
/* encode_residual_fixed: %65*/
/*   %a3.019 = phi i32 [ %39, %.lr.ph22 ], [ %74, %65 ]*/
if ((((cur_state == LEGUP_F_encode_residual_fixed_BB_65_64) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_65_78_reg == 1'd1)))
begin
encode_residual_fixed_65_a3_019_reg <= encode_residual_fixed_65_a3_019;
if (reset == 1'b0 && ^(encode_residual_fixed_65_a3_019) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_a3_019_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %tmp52 = shl i32 %indvar50, 1*/
begin
encode_residual_fixed_65_tmp52 = (encode_residual_fixed_65_indvar50_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %tmp52 = shl i32 %indvar50, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_tmp52_reg <= encode_residual_fixed_65_tmp52;
if (reset == 1'b0 && ^(encode_residual_fixed_65_tmp52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_tmp52_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %tmp53 = add i32 %tmp52, %order*/
begin
encode_residual_fixed_65_tmp53 = (encode_residual_fixed_65_tmp52 + arg_order);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %tmp53 = add i32 %tmp52, %order*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_tmp53_reg <= encode_residual_fixed_65_tmp53;
if (reset == 1'b0 && ^(encode_residual_fixed_65_tmp53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_tmp53_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %scevgep54 = getelementptr i32* %smp, i32 %tmp53*/
begin
encode_residual_fixed_65_scevgep54 = (arg_smp + (4 * encode_residual_fixed_65_tmp53_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %scevgep54 = getelementptr i32* %smp, i32 %tmp53*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
encode_residual_fixed_65_scevgep54_reg <= encode_residual_fixed_65_scevgep54;
if (reset == 1'b0 && ^(encode_residual_fixed_65_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_scevgep54_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %scevgep55 = getelementptr i32* %res, i32 %tmp53*/
begin
encode_residual_fixed_65_scevgep55 = (arg_res + (4 * encode_residual_fixed_65_tmp53_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %scevgep55 = getelementptr i32* %res, i32 %tmp53*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
encode_residual_fixed_65_scevgep55_reg <= encode_residual_fixed_65_scevgep55;
if (reset == 1'b0 && ^(encode_residual_fixed_65_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_scevgep55_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %tmp57 = add i32 %33, %tmp52*/
begin
encode_residual_fixed_65_tmp57 = (encode_residual_fixed_31_33_reg + encode_residual_fixed_65_tmp52);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %tmp57 = add i32 %33, %tmp52*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_tmp57_reg <= encode_residual_fixed_65_tmp57;
if (reset == 1'b0 && ^(encode_residual_fixed_65_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %scevgep58 = getelementptr i32* %smp, i32 %tmp57*/
begin
encode_residual_fixed_65_scevgep58 = (arg_smp + (4 * encode_residual_fixed_65_tmp57_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %scevgep58 = getelementptr i32* %smp, i32 %tmp57*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
encode_residual_fixed_65_scevgep58_reg <= encode_residual_fixed_65_scevgep58;
if (reset == 1'b0 && ^(encode_residual_fixed_65_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %tmp60 = add i32 %tmp59, %tmp52*/
begin
encode_residual_fixed_65_tmp60 = (encode_residual_fixed__lr_ph22_tmp59_reg + encode_residual_fixed_65_tmp52);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %tmp60 = add i32 %tmp59, %tmp52*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_tmp60_reg <= encode_residual_fixed_65_tmp60;
if (reset == 1'b0 && ^(encode_residual_fixed_65_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %scevgep61 = getelementptr i32* %res, i32 %tmp60*/
begin
encode_residual_fixed_65_scevgep61 = (arg_res + (4 * encode_residual_fixed_65_tmp60_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %scevgep61 = getelementptr i32* %res, i32 %tmp60*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
encode_residual_fixed_65_scevgep61_reg <= encode_residual_fixed_65_scevgep61;
if (reset == 1'b0 && ^(encode_residual_fixed_65_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_scevgep61_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %scevgep62 = getelementptr i32* %smp, i32 %tmp60*/
begin
encode_residual_fixed_65_scevgep62 = (arg_smp + (4 * encode_residual_fixed_65_tmp60_reg));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %scevgep62 = getelementptr i32* %smp, i32 %tmp60*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
encode_residual_fixed_65_scevgep62_reg <= encode_residual_fixed_65_scevgep62;
if (reset == 1'b0 && ^(encode_residual_fixed_65_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_scevgep62_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %tmp64 = add i32 %tmp63, %tmp52*/
begin
encode_residual_fixed_65_tmp64 = (encode_residual_fixed__lr_ph22_tmp63_reg + encode_residual_fixed_65_tmp52);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %tmp64 = add i32 %tmp63, %tmp52*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_tmp64_reg <= encode_residual_fixed_65_tmp64;
if (reset == 1'b0 && ^(encode_residual_fixed_65_tmp64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_tmp64_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
begin
encode_residual_fixed_65_66 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58))
begin
encode_residual_fixed_65_66_reg <= encode_residual_fixed_65_66;
if (reset == 1'b0 && ^(encode_residual_fixed_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_66_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
begin
encode_residual_fixed_65_67 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58))
begin
encode_residual_fixed_65_67_reg <= encode_residual_fixed_65_67;
if (reset == 1'b0 && ^(encode_residual_fixed_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_67_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %68 = sub nsw i32 %66, %67*/
begin
encode_residual_fixed_65_68 = (encode_residual_fixed_65_66 - encode_residual_fixed_65_67);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %68 = sub nsw i32 %66, %67*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58))
begin
encode_residual_fixed_65_68_reg <= encode_residual_fixed_65_68;
if (reset == 1'b0 && ^(encode_residual_fixed_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_68_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %69 = sub nsw i32 %68, %a3.019*/
begin
encode_residual_fixed_65_69 = (encode_residual_fixed_65_68 - encode_residual_fixed_65_a3_019_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %69 = sub nsw i32 %68, %a3.019*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58))
begin
encode_residual_fixed_65_69_reg <= encode_residual_fixed_65_69;
if (reset == 1'b0 && ^(encode_residual_fixed_65_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_69_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %70 = sub nsw i32 %69, %c4.020*/
begin
encode_residual_fixed_65_70 = (encode_residual_fixed_65_69 - encode_residual_fixed_65_c4_020_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %70 = sub nsw i32 %69, %c4.020*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_58))
begin
encode_residual_fixed_65_70_reg <= encode_residual_fixed_65_70;
if (reset == 1'b0 && ^(encode_residual_fixed_65_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_70_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %71 = sub nsw i32 %70, %e.021*/
begin
encode_residual_fixed_65_71 = (encode_residual_fixed_65_70_reg - encode_residual_fixed_65_e_021_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %71 = sub nsw i32 %70, %e.021*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
encode_residual_fixed_65_71_reg <= encode_residual_fixed_65_71;
if (reset == 1'b0 && ^(encode_residual_fixed_65_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_71_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
begin
encode_residual_fixed_65_72 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62))
begin
encode_residual_fixed_65_72_reg <= encode_residual_fixed_65_72;
if (reset == 1'b0 && ^(encode_residual_fixed_65_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_72_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
begin
encode_residual_fixed_65_73 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62))
begin
encode_residual_fixed_65_73_reg <= encode_residual_fixed_65_73;
if (reset == 1'b0 && ^(encode_residual_fixed_65_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_73_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %74 = sub nsw i32 %72, %73*/
begin
encode_residual_fixed_65_74 = (encode_residual_fixed_65_72 - encode_residual_fixed_65_73);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %74 = sub nsw i32 %72, %73*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62))
begin
encode_residual_fixed_65_74_reg <= encode_residual_fixed_65_74;
if (reset == 1'b0 && ^(encode_residual_fixed_65_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_74_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %75 = sub nsw i32 %74, %68*/
begin
encode_residual_fixed_65_75 = (encode_residual_fixed_65_74 - encode_residual_fixed_65_68_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %75 = sub nsw i32 %74, %68*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62))
begin
encode_residual_fixed_65_75_reg <= encode_residual_fixed_65_75;
if (reset == 1'b0 && ^(encode_residual_fixed_65_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_75_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %76 = sub nsw i32 %75, %69*/
begin
encode_residual_fixed_65_76 = (encode_residual_fixed_65_75 - encode_residual_fixed_65_69_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %76 = sub nsw i32 %75, %69*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_62))
begin
encode_residual_fixed_65_76_reg <= encode_residual_fixed_65_76;
if (reset == 1'b0 && ^(encode_residual_fixed_65_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_76_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %77 = sub nsw i32 %76, %70*/
begin
encode_residual_fixed_65_77 = (encode_residual_fixed_65_76_reg - encode_residual_fixed_65_70_reg);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %77 = sub nsw i32 %76, %70*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
encode_residual_fixed_65_77_reg <= encode_residual_fixed_65_77;
if (reset == 1'b0 && ^(encode_residual_fixed_65_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_77_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %78 = icmp slt i32 %tmp64, %n*/
begin
encode_residual_fixed_65_78 = ($signed(encode_residual_fixed_65_tmp64) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %78 = icmp slt i32 %tmp64, %n*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_78_reg <= encode_residual_fixed_65_78;
if (reset == 1'b0 && ^(encode_residual_fixed_65_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_78_reg"); $finish; end
end
end
always @(*) begin
/* encode_residual_fixed: %65*/
/*   %indvar.next51 = add i32 %indvar50, 1*/
begin
encode_residual_fixed_65_indvar_next51 = (encode_residual_fixed_65_indvar50_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_residual_fixed: %65*/
/*   %indvar.next51 = add i32 %indvar50, 1*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_55))
begin
encode_residual_fixed_65_indvar_next51_reg <= encode_residual_fixed_65_indvar_next51;
if (reset == 1'b0 && ^(encode_residual_fixed_65_indvar_next51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_65_indvar_next51_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_encode_residual_fixed__lr_ph22_tmp7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* encode_residual_fixed: %.lr.ph22*/
/*   %tmp7 = mul i32 %tmp, 3*/
if ((lpm_mult_encode_residual_fixed__lr_ph22_tmp7_en == 1'd1))
begin
encode_residual_fixed__lr_ph22_tmp7_stage0_reg <= (encode_residual_fixed__lr_ph22_tmp * 32'd3);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* encode_residual_fixed: %.loopexit*/
/*   ret void*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__loopexit_70))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   store i32 %25, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   store i32 %29, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %56, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   store i32 %71, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph30_scevgep78;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph16_scevgep48;
end
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
memory_controller_address_a = encode_residual_fixed_8_scevgep46;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph_16;
end
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
memory_controller_address_a = encode_residual_fixed_21_scevgep35;
end
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
memory_controller_address_a = encode_residual_fixed_21_scevgep;
end
/* encode_residual_fixed: %21*/
/*   store i32 %25, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
memory_controller_address_a = encode_residual_fixed_21_scevgep33_reg;
end
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_address_a = encode_residual_fixed_21_scevgep_reg;
end
/* encode_residual_fixed: %21*/
/*   store i32 %29, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
memory_controller_address_a = encode_residual_fixed_21_scevgep38_reg;
end
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_address_a = encode_residual_fixed_31_34;
end
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37))
begin
memory_controller_address_a = encode_residual_fixed_31_43_reg;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph28_scevgep69;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph28_scevgep69_reg;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %56, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
memory_controller_address_a = encode_residual_fixed__lr_ph28_scevgep74_reg;
end
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_address_a = encode_residual_fixed_65_scevgep54;
end
/* encode_residual_fixed: %65*/
/*   store i32 %71, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
memory_controller_address_a = encode_residual_fixed_65_scevgep55_reg;
end
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_address_a = encode_residual_fixed_65_scevgep54_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   store i32 %25, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   store i32 %29, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %56, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_residual_fixed: %65*/
/*   store i32 %71, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   store i32 %25, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
memory_controller_in_a = encode_residual_fixed_21_25;
end
/* encode_residual_fixed: %21*/
/*   store i32 %29, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
memory_controller_in_a = encode_residual_fixed_21_29;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %56, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
memory_controller_in_a = encode_residual_fixed__lr_ph28_56;
end
/* encode_residual_fixed: %65*/
/*   store i32 %71, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
memory_controller_in_a = encode_residual_fixed_65_71;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   %2 = load i32* %scevgep78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_3))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   %6 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_13))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %8*/
/*   %10 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_17))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %18 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   %23 = load i32* %scevgep35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_27))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_28))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   store i32 %25, i32* %scevgep33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_30))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   %27 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   store i32 %29, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_33))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %31*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %31*/
/*   %44 = load i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_37))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %47 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %53 = load i32* %scevgep69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %56, i32* %scevgep74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_48))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   %66 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   store i32 %71, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_59))
begin
memory_controller_size_a = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   %73 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   store i32 %2, i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   store i32 %6, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %8*/
/*   store i32 %11, i32* %scevgep45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %51, i32* %scevgep70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_residual_fixed: %65*/
/*   store i32 %77, i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   store i32 %2, i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph30_scevgep79_reg;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   store i32 %6, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph16_scevgep49_reg;
end
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
memory_controller_address_b = encode_residual_fixed_8_scevgep44;
end
/* encode_residual_fixed: %8*/
/*   store i32 %11, i32* %scevgep45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
memory_controller_address_b = encode_residual_fixed_8_scevgep45_reg;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph_17;
end
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_address_b = encode_residual_fixed_21_scevgep37_reg;
end
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_address_b = encode_residual_fixed_31_37;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph28_scevgep72;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %51, i32* %scevgep70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph28_scevgep70_reg;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph28_scevgep75_reg;
end
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
memory_controller_address_b = encode_residual_fixed__lr_ph22_61;
end
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_address_b = encode_residual_fixed_65_scevgep58;
end
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_address_b = encode_residual_fixed_65_scevgep62_reg;
end
/* encode_residual_fixed: %65*/
/*   store i32 %77, i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
memory_controller_address_b = encode_residual_fixed_65_scevgep61_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   store i32 %2, i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   store i32 %6, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %8*/
/*   store i32 %11, i32* %scevgep45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %51, i32* %scevgep70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_residual_fixed: %65*/
/*   store i32 %77, i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   store i32 %2, i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
memory_controller_in_b = encode_residual_fixed__lr_ph30_2;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   store i32 %6, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
memory_controller_in_b = encode_residual_fixed__lr_ph16_6;
end
/* encode_residual_fixed: %8*/
/*   store i32 %11, i32* %scevgep45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
memory_controller_in_b = encode_residual_fixed_8_11;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %51, i32* %scevgep70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
memory_controller_in_b = encode_residual_fixed__lr_ph28_51;
end
/* encode_residual_fixed: %65*/
/*   store i32 %77, i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
memory_controller_in_b = encode_residual_fixed_65_77;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* encode_residual_fixed: %.lr.ph30*/
/*   store i32 %2, i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph30_5))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph16*/
/*   store i32 %6, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph16_15))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %8*/
/*   %9 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_18))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %8*/
/*   store i32 %11, i32* %scevgep45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_8_20))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph*/
/*   %19 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph_24))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %21*/
/*   %26 = load i32* %scevgep37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_21_31))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %31*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_31_36))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %48 = load i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_43))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   store i32 %51, i32* %scevgep70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_45))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph28*/
/*   %52 = load i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph28_46))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %.lr.ph22*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB__lr_ph22_52))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   %67 = load i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_56))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   %72 = load i32* %scevgep62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_60))
begin
memory_controller_size_b = 2'd2;
end
/* encode_residual_fixed: %65*/
/*   store i32 %77, i32* %scevgep61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_residual_fixed_BB_65_63))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  encode_residual_fixed_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_arg_res;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_arg_smp;
reg [31:0] encode_residual_fixed_arg_n;
reg [31:0] encode_residual_fixed_arg_order;
wire  encode_residual_fixed_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_memory_controller_address_a;
wire  encode_residual_fixed_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_residual_fixed_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_residual_fixed_memory_controller_out_a;
wire [1:0] encode_residual_fixed_memory_controller_size_a;
wire  encode_residual_fixed_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_residual_fixed_memory_controller_address_b;
wire  encode_residual_fixed_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_residual_fixed_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_residual_fixed_memory_controller_out_b;
wire [1:0] encode_residual_fixed_memory_controller_size_b;
reg  encode_residual_fixed_memory_controller_waitrequest;
wire  encode_residual_fixed_finish;
reg  encode_residual_fixed_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


encode_residual_fixed encode_residual_fixed_inst (
	.memory_controller_enable_a (encode_residual_fixed_memory_controller_enable_a),
	.memory_controller_address_a (encode_residual_fixed_memory_controller_address_a),
	.memory_controller_write_enable_a (encode_residual_fixed_memory_controller_write_enable_a),
	.memory_controller_in_a (encode_residual_fixed_memory_controller_in_a),
	.memory_controller_size_a (encode_residual_fixed_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (encode_residual_fixed_memory_controller_enable_b),
	.memory_controller_address_b (encode_residual_fixed_memory_controller_address_b),
	.memory_controller_write_enable_b (encode_residual_fixed_memory_controller_write_enable_b),
	.memory_controller_in_b (encode_residual_fixed_memory_controller_in_b),
	.memory_controller_size_b (encode_residual_fixed_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (encode_residual_fixed_start),
	.finish (encode_residual_fixed_finish),
	.arg_res (encode_residual_fixed_arg_res),
	.arg_smp (encode_residual_fixed_arg_smp),
	.arg_n (encode_residual_fixed_arg_n),
	.arg_order (encode_residual_fixed_arg_order)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (encode_residual_fixed_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_residual_fixed_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_start"); $finish; end
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
encode_residual_fixed_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_residual_fixed_arg_res <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_arg_res"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_residual_fixed_arg_smp <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_arg_smp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_residual_fixed_arg_n <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_arg_n"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_residual_fixed_arg_order <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_residual_fixed_arg_order"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
encode_residual_fixed_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
encode_residual_fixed_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
encode_residual_fixed_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
encode_residual_fixed_finish_final = encode_residual_fixed_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = encode_residual_fixed_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = encode_residual_fixed_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_residual_fixed_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_residual_fixed_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = encode_residual_fixed_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = encode_residual_fixed_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_residual_fixed_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_residual_fixed_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = encode_residual_fixed_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = encode_residual_fixed_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = encode_residual_fixed_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = encode_residual_fixed_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_residual_fixed_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_residual_fixed_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = encode_residual_fixed_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = encode_residual_fixed_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_residual_fixed_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_residual_fixed_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = encode_residual_fixed_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @encode_residual_fixed(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = encode_residual_fixed_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
