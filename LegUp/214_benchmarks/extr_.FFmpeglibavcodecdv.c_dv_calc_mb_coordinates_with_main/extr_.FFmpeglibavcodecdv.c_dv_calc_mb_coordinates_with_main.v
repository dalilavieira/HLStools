//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:45 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 10
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;










reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module dv_calc_mb_coordinates
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_d,
	arg_chan,
	arg_seq,
	arg_slot,
	arg_tbl
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_2 = 9'd2;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_3 = 9'd3;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_4 = 9'd4;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_5 = 9'd5;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_6 = 9'd6;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_7 = 9'd7;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_8 = 9'd8;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_9 = 9'd9;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_10 = 9'd10;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_11 = 9'd11;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_12 = 9'd12;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_13 = 9'd13;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_14 = 9'd14;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_15 = 9'd15;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_16 = 9'd16;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_17 = 9'd17;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_18 = 9'd18;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_19 = 9'd19;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_20 = 9'd20;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_21 = 9'd21;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_22 = 9'd22;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_23 = 9'd23;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_24 = 9'd24;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_25 = 9'd25;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_26 = 9'd26;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_27 = 9'd27;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_28 = 9'd28;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_29 = 9'd29;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_30 = 9'd30;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_31 = 9'd31;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_32 = 9'd32;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_33 = 9'd33;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_34 = 9'd34;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_35 = 9'd35;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_36 = 9'd36;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_37 = 9'd37;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_38 = 9'd38;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_39 = 9'd39;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_40 = 9'd40;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_41 = 9'd41;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_42 = 9'd42;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_43 = 9'd43;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_44 = 9'd44;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_45 = 9'd45;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_46 = 9'd46;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_47 = 9'd47;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_48 = 9'd48;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_49 = 9'd49;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_50 = 9'd50;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_51 = 9'd51;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_52 = 9'd52;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_53 = 9'd53;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_54 = 9'd54;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_55 = 9'd55;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_56 = 9'd56;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_57 = 9'd57;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_58 = 9'd58;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_59 = 9'd59;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_60 = 9'd60;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_61 = 9'd61;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_62 = 9'd62;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_63 = 9'd63;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_64 = 9'd64;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_65 = 9'd65;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_66 = 9'd66;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_67 = 9'd67;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_68 = 9'd68;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_69 = 9'd69;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_70 = 9'd70;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_71 = 9'd71;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_72 = 9'd72;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_73 = 9'd73;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_74 = 9'd74;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_75 = 9'd75;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_76 = 9'd76;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_77 = 9'd77;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_78 = 9'd78;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_79 = 9'd79;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_80 = 9'd80;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_81 = 9'd81;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_82 = 9'd82;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_83 = 9'd83;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_84 = 9'd84;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_85 = 9'd85;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_86 = 9'd86;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_87 = 9'd87;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_88 = 9'd88;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_89 = 9'd89;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_90 = 9'd90;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_91 = 9'd91;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_92 = 9'd92;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_93 = 9'd93;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_94 = 9'd94;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_95 = 9'd95;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_96 = 9'd96;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_97 = 9'd97;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_98 = 9'd98;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_99 = 9'd99;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_0_100 = 9'd100;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101 = 9'd101;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102 = 9'd102;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103 = 9'd103;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_39_104 = 9'd104;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_40_105 = 9'd105;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_42_106 = 9'd106;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_107 = 9'd107;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_108 = 9'd108;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_109 = 9'd109;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_110 = 9'd110;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_111 = 9'd111;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_112 = 9'd112;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_113 = 9'd113;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_114 = 9'd114;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_115 = 9'd115;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_116 = 9'd116;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_117 = 9'd117;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_118 = 9'd118;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_119 = 9'd119;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_120 = 9'd120;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_121 = 9'd121;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_122 = 9'd122;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_123 = 9'd123;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_124 = 9'd124;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_125 = 9'd125;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_126 = 9'd126;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_127 = 9'd127;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_128 = 9'd128;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_129 = 9'd129;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_130 = 9'd130;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_131 = 9'd131;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_132 = 9'd132;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_133 = 9'd133;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_134 = 9'd134;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_135 = 9'd135;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_136 = 9'd136;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_137 = 9'd137;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_138 = 9'd138;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_139 = 9'd139;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_140 = 9'd140;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_43_141 = 9'd141;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_55_142 = 9'd142;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_55_143 = 9'd143;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_144 = 9'd144;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_145 = 9'd145;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_146 = 9'd146;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_147 = 9'd147;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_148 = 9'd148;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_149 = 9'd149;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_150 = 9'd150;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_151 = 9'd151;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_152 = 9'd152;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_153 = 9'd153;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_154 = 9'd154;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_155 = 9'd155;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_156 = 9'd156;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_157 = 9'd157;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_158 = 9'd158;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_159 = 9'd159;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_160 = 9'd160;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_161 = 9'd161;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_162 = 9'd162;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_163 = 9'd163;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_164 = 9'd164;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_165 = 9'd165;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_166 = 9'd166;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_167 = 9'd167;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_168 = 9'd168;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_169 = 9'd169;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_170 = 9'd170;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_171 = 9'd171;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_172 = 9'd172;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_173 = 9'd173;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_174 = 9'd174;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_175 = 9'd175;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_176 = 9'd176;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_177 = 9'd177;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_58_178 = 9'd178;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_70_179 = 9'd179;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_70_180 = 9'd180;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_80_181 = 9'd181;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_80_182 = 9'd182;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_183 = 9'd183;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_184 = 9'd184;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_185 = 9'd185;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_186 = 9'd186;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_187 = 9'd187;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_188 = 9'd188;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_189 = 9'd189;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_190 = 9'd190;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_191 = 9'd191;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_192 = 9'd192;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_193 = 9'd193;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_194 = 9'd194;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_195 = 9'd195;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_196 = 9'd196;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_197 = 9'd197;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_198 = 9'd198;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_199 = 9'd199;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_200 = 9'd200;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_201 = 9'd201;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_202 = 9'd202;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_203 = 9'd203;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_204 = 9'd204;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_205 = 9'd205;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_206 = 9'd206;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_207 = 9'd207;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_208 = 9'd208;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_209 = 9'd209;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_210 = 9'd210;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_211 = 9'd211;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_212 = 9'd212;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_213 = 9'd213;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_214 = 9'd214;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_215 = 9'd215;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_216 = 9'd216;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_217 = 9'd217;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_218 = 9'd218;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_219 = 9'd219;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_220 = 9'd220;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_221 = 9'd221;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_222 = 9'd222;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_223 = 9'd223;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_224 = 9'd224;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_225 = 9'd225;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_226 = 9'd226;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_227 = 9'd227;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_228 = 9'd228;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_229 = 9'd229;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_230 = 9'd230;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_231 = 9'd231;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_232 = 9'd232;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_233 = 9'd233;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_234 = 9'd234;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_235 = 9'd235;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_236 = 9'd236;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_237 = 9'd237;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_238 = 9'd238;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_239 = 9'd239;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_240 = 9'd240;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_241 = 9'd241;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_242 = 9'd242;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_243 = 9'd243;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_244 = 9'd244;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_245 = 9'd245;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_246 = 9'd246;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_247 = 9'd247;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_248 = 9'd248;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_84_249 = 9'd249;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_103_250 = 9'd250;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_103_251 = 9'd251;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_103_252 = 9'd252;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_253 = 9'd253;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_254 = 9'd254;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_255 = 9'd255;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_256 = 9'd256;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_257 = 9'd257;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_258 = 9'd258;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_259 = 9'd259;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_260 = 9'd260;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_261 = 9'd261;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_262 = 9'd262;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_263 = 9'd263;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_264 = 9'd264;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_265 = 9'd265;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_266 = 9'd266;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_267 = 9'd267;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_268 = 9'd268;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_269 = 9'd269;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_270 = 9'd270;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_271 = 9'd271;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_272 = 9'd272;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_273 = 9'd273;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_274 = 9'd274;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_275 = 9'd275;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_276 = 9'd276;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_277 = 9'd277;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_278 = 9'd278;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_279 = 9'd279;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_280 = 9'd280;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_281 = 9'd281;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_282 = 9'd282;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_283 = 9'd283;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_284 = 9'd284;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_285 = 9'd285;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_286 = 9'd286;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_287 = 9'd287;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_288 = 9'd288;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_105_289 = 9'd289;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_290 = 9'd290;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_291 = 9'd291;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_292 = 9'd292;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_293 = 9'd293;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_294 = 9'd294;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_295 = 9'd295;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_296 = 9'd296;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_297 = 9'd297;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_298 = 9'd298;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_299 = 9'd299;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_300 = 9'd300;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_301 = 9'd301;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_302 = 9'd302;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_303 = 9'd303;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_304 = 9'd304;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_305 = 9'd305;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_306 = 9'd306;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_307 = 9'd307;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_308 = 9'd308;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_309 = 9'd309;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_310 = 9'd310;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_311 = 9'd311;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_312 = 9'd312;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_313 = 9'd313;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_314 = 9'd314;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_315 = 9'd315;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_316 = 9'd316;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_317 = 9'd317;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_318 = 9'd318;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_319 = 9'd319;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_320 = 9'd320;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_321 = 9'd321;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_322 = 9'd322;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_323 = 9'd323;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_324 = 9'd324;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_325 = 9'd325;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_120_326 = 9'd326;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_327 = 9'd327;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_328 = 9'd328;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_329 = 9'd329;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_330 = 9'd330;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_331 = 9'd331;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_332 = 9'd332;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_333 = 9'd333;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_334 = 9'd334;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_335 = 9'd335;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_336 = 9'd336;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_337 = 9'd337;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_338 = 9'd338;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_339 = 9'd339;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_340 = 9'd340;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_341 = 9'd341;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_342 = 9'd342;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_343 = 9'd343;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_344 = 9'd344;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_345 = 9'd345;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_346 = 9'd346;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_347 = 9'd347;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_348 = 9'd348;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_349 = 9'd349;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_350 = 9'd350;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_351 = 9'd351;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_352 = 9'd352;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_353 = 9'd353;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_354 = 9'd354;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_355 = 9'd355;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_356 = 9'd356;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_357 = 9'd357;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_358 = 9'd358;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_359 = 9'd359;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_360 = 9'd360;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_133_361 = 9'd361;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_139_362 = 9'd362;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_363 = 9'd363;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_364 = 9'd364;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_365 = 9'd365;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_366 = 9'd366;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_367 = 9'd367;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_368 = 9'd368;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_369 = 9'd369;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_370 = 9'd370;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_371 = 9'd371;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_372 = 9'd372;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_373 = 9'd373;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_374 = 9'd374;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_375 = 9'd375;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_376 = 9'd376;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_377 = 9'd377;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_378 = 9'd378;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_379 = 9'd379;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_380 = 9'd380;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_381 = 9'd381;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_382 = 9'd382;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_383 = 9'd383;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_384 = 9'd384;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_385 = 9'd385;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_386 = 9'd386;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_387 = 9'd387;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_388 = 9'd388;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_389 = 9'd389;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_390 = 9'd390;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_391 = 9'd391;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_392 = 9'd392;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_393 = 9'd393;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_394 = 9'd394;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_141_395 = 9'd395;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_152_396 = 9'd396;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_155_397 = 9'd397;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_155_398 = 9'd398;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_159_399 = 9'd399;
parameter [8:0] LEGUP_F_dv_calc_mb_coordinates_BB_161_400 = 9'd400;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [31:0] arg_chan;
input [31:0] arg_seq;
input [31:0] arg_slot;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_tbl;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_1_reg;
reg [31:0] dv_calc_mb_coordinates_0_2;
reg [31:0] dv_calc_mb_coordinates_0_2_reg;
reg [31:0] dv_calc_mb_coordinates_0_3;
reg [31:0] dv_calc_mb_coordinates_0_3_reg;
reg [31:0] dv_calc_mb_coordinates_0_4;
reg [31:0] dv_calc_mb_coordinates_0_4_reg;
reg [31:0] dv_calc_mb_coordinates_0_5;
reg [31:0] dv_calc_mb_coordinates_0_5_reg;
reg  dv_calc_mb_coordinates_0_6;
reg  dv_calc_mb_coordinates_0_6_reg;
reg  dv_calc_mb_coordinates_0_7;
reg  dv_calc_mb_coordinates_0_7_reg;
reg  dv_calc_mb_coordinates_0_or_cond;
reg  dv_calc_mb_coordinates_0_or_cond_reg;
reg [31:0] dv_calc_mb_coordinates_0_8;
reg [31:0] dv_calc_mb_coordinates_0_8_reg;
reg [31:0] dv_calc_mb_coordinates_0_9;
reg [31:0] dv_calc_mb_coordinates_0_9_reg;
reg [31:0] dv_calc_mb_coordinates_0_10;
reg [31:0] dv_calc_mb_coordinates_0_10_reg;
reg [31:0] dv_calc_mb_coordinates_0_11;
reg [31:0] dv_calc_mb_coordinates_0_11_reg;
reg [31:0] dv_calc_mb_coordinates_0_12;
reg [31:0] dv_calc_mb_coordinates_0_12_reg;
reg [31:0] dv_calc_mb_coordinates_0_tmp3;
reg [31:0] dv_calc_mb_coordinates_0_tmp3_reg;
reg [31:0] dv_calc_mb_coordinates_0_13;
reg [31:0] dv_calc_mb_coordinates_0_13_reg;
reg [31:0] dv_calc_mb_coordinates_0_14;
reg [31:0] dv_calc_mb_coordinates_0_14_reg;
reg [31:0] dv_calc_mb_coordinates_0_15;
reg [31:0] dv_calc_mb_coordinates_0_15_reg;
reg [31:0] dv_calc_mb_coordinates_0_16;
reg [31:0] dv_calc_mb_coordinates_0_16_reg;
reg [31:0] dv_calc_mb_coordinates_0_17;
reg [31:0] dv_calc_mb_coordinates_0_17_reg;
reg [31:0] dv_calc_mb_coordinates_0_18;
reg [31:0] dv_calc_mb_coordinates_0_18_reg;
reg [31:0] dv_calc_mb_coordinates_0_19;
reg [31:0] dv_calc_mb_coordinates_0_19_reg;
reg [31:0] dv_calc_mb_coordinates_0_20;
reg [31:0] dv_calc_mb_coordinates_0_20_reg;
reg [31:0] dv_calc_mb_coordinates_0_21;
reg [31:0] dv_calc_mb_coordinates_0_21_reg;
reg [31:0] dv_calc_mb_coordinates_0_22;
reg [31:0] dv_calc_mb_coordinates_0_22_reg;
reg [31:0] dv_calc_mb_coordinates_0_23;
reg [31:0] dv_calc_mb_coordinates_0_23_reg;
reg [31:0] dv_calc_mb_coordinates_0_24;
reg [31:0] dv_calc_mb_coordinates_0_24_reg;
reg [31:0] dv_calc_mb_coordinates_0_25;
reg [31:0] dv_calc_mb_coordinates_0_25_reg;
reg [31:0] dv_calc_mb_coordinates_0_26;
reg [31:0] dv_calc_mb_coordinates_0_26_reg;
reg [31:0] dv_calc_mb_coordinates_0_27;
reg [31:0] dv_calc_mb_coordinates_0_27_reg;
reg [31:0] dv_calc_mb_coordinates_0_28;
reg [31:0] dv_calc_mb_coordinates_0_28_reg;
reg [31:0] dv_calc_mb_coordinates_0_29;
reg [31:0] dv_calc_mb_coordinates_0_29_reg;
reg [31:0] dv_calc_mb_coordinates_0_30;
reg [31:0] dv_calc_mb_coordinates_0_30_reg;
reg [31:0] dv_calc_mb_coordinates_0_31;
reg [31:0] dv_calc_mb_coordinates_0_31_reg;
reg [31:0] dv_calc_mb_coordinates_0_32;
reg [31:0] dv_calc_mb_coordinates_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_33_reg;
reg [31:0] dv_calc_mb_coordinates_0_34;
reg [31:0] dv_calc_mb_coordinates_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_0_36_reg;
reg [31:0] dv_calc_mb_coordinates_0_tmp12;
reg [31:0] dv_calc_mb_coordinates_0_tmp12_reg;
reg [31:0] dv_calc_mb_coordinates_0_tmp13;
reg [31:0] dv_calc_mb_coordinates_0_tmp13_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_37;
reg [31:0] dv_calc_mb_coordinates___crit_edge_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates___crit_edge_scevgep10_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp11;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp11_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp14;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp14_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp15;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp15_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp16;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp16_reg;
reg [31:0] dv_calc_mb_coordinates___crit_edge_38;
reg [31:0] dv_calc_mb_coordinates___crit_edge_38_reg;
reg  dv_calc_mb_coordinates_40_41;
reg  dv_calc_mb_coordinates_40_41_reg;
reg [31:0] dv_calc_mb_coordinates_43_44;
reg [31:0] dv_calc_mb_coordinates_43_44_reg;
reg [31:0] dv_calc_mb_coordinates_43_45;
reg [31:0] dv_calc_mb_coordinates_43_45_reg;
reg [31:0] dv_calc_mb_coordinates_43_46;
reg [31:0] dv_calc_mb_coordinates_43_46_reg;
reg [31:0] dv_calc_mb_coordinates_43_47;
reg [31:0] dv_calc_mb_coordinates_43_47_reg;
reg [31:0] dv_calc_mb_coordinates_43_48;
reg [31:0] dv_calc_mb_coordinates_43_48_reg;
reg [31:0] dv_calc_mb_coordinates_43_49;
reg [31:0] dv_calc_mb_coordinates_43_49_reg;
reg [31:0] dv_calc_mb_coordinates_43_50;
reg [31:0] dv_calc_mb_coordinates_43_50_reg;
reg [31:0] dv_calc_mb_coordinates_43_51;
reg [31:0] dv_calc_mb_coordinates_43_51_reg;
reg [31:0] dv_calc_mb_coordinates_43_52;
reg [31:0] dv_calc_mb_coordinates_43_52_reg;
reg [31:0] dv_calc_mb_coordinates_43_53;
reg [31:0] dv_calc_mb_coordinates_43_53_reg;
reg [31:0] dv_calc_mb_coordinates_43_54;
reg [31:0] dv_calc_mb_coordinates_43_54_reg;
reg [31:0] dv_calc_mb_coordinates_43_phitmp4;
reg [31:0] dv_calc_mb_coordinates_43_phitmp4_reg;
reg [31:0] dv_calc_mb_coordinates_55_x_0;
reg [31:0] dv_calc_mb_coordinates_55_x_0_reg;
reg [31:0] dv_calc_mb_coordinates_55_y_0;
reg [31:0] dv_calc_mb_coordinates_55_y_0_reg;
reg [31:0] dv_calc_mb_coordinates_55_56;
reg [31:0] dv_calc_mb_coordinates_55_56_reg;
reg [31:0] dv_calc_mb_coordinates_55_57;
reg [31:0] dv_calc_mb_coordinates_55_57_reg;
reg [31:0] dv_calc_mb_coordinates_58_59;
reg [31:0] dv_calc_mb_coordinates_58_59_reg;
reg [31:0] dv_calc_mb_coordinates_58_60;
reg [31:0] dv_calc_mb_coordinates_58_60_reg;
reg [31:0] dv_calc_mb_coordinates_58_61;
reg [31:0] dv_calc_mb_coordinates_58_61_reg;
reg [31:0] dv_calc_mb_coordinates_58_62;
reg [31:0] dv_calc_mb_coordinates_58_62_reg;
reg [31:0] dv_calc_mb_coordinates_58_63;
reg [31:0] dv_calc_mb_coordinates_58_63_reg;
reg [31:0] dv_calc_mb_coordinates_58_64;
reg [31:0] dv_calc_mb_coordinates_58_64_reg;
reg [31:0] dv_calc_mb_coordinates_58_65;
reg [31:0] dv_calc_mb_coordinates_58_65_reg;
reg [31:0] dv_calc_mb_coordinates_58_66;
reg [31:0] dv_calc_mb_coordinates_58_66_reg;
reg [31:0] dv_calc_mb_coordinates_58_67;
reg [31:0] dv_calc_mb_coordinates_58_67_reg;
reg [31:0] dv_calc_mb_coordinates_58_68;
reg [31:0] dv_calc_mb_coordinates_58_68_reg;
reg  dv_calc_mb_coordinates_58_69;
reg  dv_calc_mb_coordinates_58_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_70_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_70_71_reg;
reg [31:0] dv_calc_mb_coordinates_70_72;
reg [31:0] dv_calc_mb_coordinates_70_72_reg;
reg [31:0] dv_calc_mb_coordinates_70_73;
reg [31:0] dv_calc_mb_coordinates_70_73_reg;
reg  dv_calc_mb_coordinates_70_74;
reg  dv_calc_mb_coordinates_70_74_reg;
reg [31:0] dv_calc_mb_coordinates_70_75;
reg [31:0] dv_calc_mb_coordinates_70_75_reg;
reg [31:0] dv_calc_mb_coordinates_70_76;
reg [31:0] dv_calc_mb_coordinates_70_76_reg;
reg [31:0] dv_calc_mb_coordinates_70_77;
reg [31:0] dv_calc_mb_coordinates_70_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_70_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_70_78_reg;
reg [31:0] dv_calc_mb_coordinates_70_79;
reg [31:0] dv_calc_mb_coordinates_70_79_reg;
reg [31:0] dv_calc_mb_coordinates_80_x_1;
reg [31:0] dv_calc_mb_coordinates_80_x_1_reg;
reg [31:0] dv_calc_mb_coordinates_80_y_1;
reg [31:0] dv_calc_mb_coordinates_80_y_1_reg;
reg [31:0] dv_calc_mb_coordinates_80_81;
reg [31:0] dv_calc_mb_coordinates_80_81_reg;
reg [31:0] dv_calc_mb_coordinates_80_82;
reg [31:0] dv_calc_mb_coordinates_80_82_reg;
reg [31:0] dv_calc_mb_coordinates_80_83;
reg [31:0] dv_calc_mb_coordinates_80_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_84_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_84_scevgep9_reg;
reg [31:0] dv_calc_mb_coordinates_84_85;
reg [31:0] dv_calc_mb_coordinates_84_85_reg;
reg [31:0] dv_calc_mb_coordinates_84_86;
reg [31:0] dv_calc_mb_coordinates_84_86_reg;
reg [31:0] dv_calc_mb_coordinates_84_87;
reg [31:0] dv_calc_mb_coordinates_84_87_reg;
reg [31:0] dv_calc_mb_coordinates_84_88;
reg [31:0] dv_calc_mb_coordinates_84_88_reg;
reg [31:0] dv_calc_mb_coordinates_84_tmp;
reg [31:0] dv_calc_mb_coordinates_84_tmp_reg;
reg [31:0] dv_calc_mb_coordinates_84_89;
reg [31:0] dv_calc_mb_coordinates_84_89_reg;
reg [31:0] dv_calc_mb_coordinates_84_90;
reg [31:0] dv_calc_mb_coordinates_84_90_reg;
reg [31:0] dv_calc_mb_coordinates_84_91;
reg [31:0] dv_calc_mb_coordinates_84_91_reg;
reg [31:0] dv_calc_mb_coordinates_84_92;
reg [31:0] dv_calc_mb_coordinates_84_92_reg;
reg [31:0] dv_calc_mb_coordinates_84_93;
reg [31:0] dv_calc_mb_coordinates_84_93_reg;
reg [31:0] dv_calc_mb_coordinates_84_94;
reg [31:0] dv_calc_mb_coordinates_84_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_84_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_84_95_reg;
reg [31:0] dv_calc_mb_coordinates_84_96;
reg [31:0] dv_calc_mb_coordinates_84_96_reg;
reg [31:0] dv_calc_mb_coordinates_84_97;
reg [31:0] dv_calc_mb_coordinates_84_97_reg;
reg [31:0] dv_calc_mb_coordinates_84_98;
reg [31:0] dv_calc_mb_coordinates_84_98_reg;
reg [31:0] dv_calc_mb_coordinates_84_99;
reg [31:0] dv_calc_mb_coordinates_84_99_reg;
reg [31:0] dv_calc_mb_coordinates_84_100;
reg [31:0] dv_calc_mb_coordinates_84_100_reg;
reg [31:0] dv_calc_mb_coordinates_84_101;
reg [31:0] dv_calc_mb_coordinates_84_101_reg;
reg [31:0] dv_calc_mb_coordinates_84_102;
reg [31:0] dv_calc_mb_coordinates_84_102_reg;
reg [31:0] dv_calc_mb_coordinates_103_104;
reg [31:0] dv_calc_mb_coordinates_103_104_reg;
reg [31:0] dv_calc_mb_coordinates_105_106;
reg [31:0] dv_calc_mb_coordinates_105_106_reg;
reg [31:0] dv_calc_mb_coordinates_105_107;
reg [31:0] dv_calc_mb_coordinates_105_107_reg;
reg [31:0] dv_calc_mb_coordinates_105_108;
reg [31:0] dv_calc_mb_coordinates_105_108_reg;
reg [31:0] dv_calc_mb_coordinates_105_109;
reg [31:0] dv_calc_mb_coordinates_105_109_reg;
reg [31:0] dv_calc_mb_coordinates_105_110;
reg [31:0] dv_calc_mb_coordinates_105_110_reg;
reg [31:0] dv_calc_mb_coordinates_105_111;
reg [31:0] dv_calc_mb_coordinates_105_111_reg;
reg [31:0] dv_calc_mb_coordinates_105_112;
reg [31:0] dv_calc_mb_coordinates_105_112_reg;
reg [31:0] dv_calc_mb_coordinates_105_113;
reg [31:0] dv_calc_mb_coordinates_105_113_reg;
reg [31:0] dv_calc_mb_coordinates_105_114;
reg [31:0] dv_calc_mb_coordinates_105_114_reg;
reg [31:0] dv_calc_mb_coordinates_105_115;
reg [31:0] dv_calc_mb_coordinates_105_115_reg;
reg [31:0] dv_calc_mb_coordinates_105_116;
reg [31:0] dv_calc_mb_coordinates_105_116_reg;
reg [31:0] dv_calc_mb_coordinates_105_117;
reg [31:0] dv_calc_mb_coordinates_105_117_reg;
reg [31:0] dv_calc_mb_coordinates_105_118;
reg [31:0] dv_calc_mb_coordinates_105_118_reg;
reg [31:0] dv_calc_mb_coordinates_105_119;
reg [31:0] dv_calc_mb_coordinates_105_119_reg;
reg [31:0] dv_calc_mb_coordinates_120_121;
reg [31:0] dv_calc_mb_coordinates_120_121_reg;
reg [31:0] dv_calc_mb_coordinates_120_122;
reg [31:0] dv_calc_mb_coordinates_120_122_reg;
reg [31:0] dv_calc_mb_coordinates_120_123;
reg [31:0] dv_calc_mb_coordinates_120_123_reg;
reg [31:0] dv_calc_mb_coordinates_120_124;
reg [31:0] dv_calc_mb_coordinates_120_124_reg;
reg [31:0] dv_calc_mb_coordinates_120_125;
reg [31:0] dv_calc_mb_coordinates_120_125_reg;
reg [31:0] dv_calc_mb_coordinates_120_126;
reg [31:0] dv_calc_mb_coordinates_120_126_reg;
reg [31:0] dv_calc_mb_coordinates_120_127;
reg [31:0] dv_calc_mb_coordinates_120_127_reg;
reg [31:0] dv_calc_mb_coordinates_120_128;
reg [31:0] dv_calc_mb_coordinates_120_128_reg;
reg [31:0] dv_calc_mb_coordinates_120_129;
reg [31:0] dv_calc_mb_coordinates_120_129_reg;
reg [31:0] dv_calc_mb_coordinates_120_130;
reg [31:0] dv_calc_mb_coordinates_120_130_reg;
reg [31:0] dv_calc_mb_coordinates_120_131;
reg [31:0] dv_calc_mb_coordinates_120_131_reg;
reg [31:0] dv_calc_mb_coordinates_120_132;
reg [31:0] dv_calc_mb_coordinates_120_132_reg;
reg [31:0] dv_calc_mb_coordinates_133_134;
reg [31:0] dv_calc_mb_coordinates_133_134_reg;
reg [31:0] dv_calc_mb_coordinates_133_135;
reg [31:0] dv_calc_mb_coordinates_133_135_reg;
reg [31:0] dv_calc_mb_coordinates_133_136;
reg [31:0] dv_calc_mb_coordinates_133_136_reg;
reg [31:0] dv_calc_mb_coordinates_133_137;
reg [31:0] dv_calc_mb_coordinates_133_137_reg;
reg  dv_calc_mb_coordinates_133_138;
reg  dv_calc_mb_coordinates_133_138_reg;
reg  dv_calc_mb_coordinates_139_140;
reg  dv_calc_mb_coordinates_139_140_reg;
reg [31:0] dv_calc_mb_coordinates_139_phitmp;
reg [31:0] dv_calc_mb_coordinates_139_phitmp_reg;
reg [31:0] dv_calc_mb_coordinates_141_142;
reg [31:0] dv_calc_mb_coordinates_141_142_reg;
reg [31:0] dv_calc_mb_coordinates_141_143;
reg [31:0] dv_calc_mb_coordinates_141_143_reg;
reg [31:0] dv_calc_mb_coordinates_141_144;
reg [31:0] dv_calc_mb_coordinates_141_144_reg;
reg [31:0] dv_calc_mb_coordinates_141_145;
reg [31:0] dv_calc_mb_coordinates_141_145_reg;
reg [31:0] dv_calc_mb_coordinates_141_146;
reg [31:0] dv_calc_mb_coordinates_141_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_141_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_141_147_reg;
reg [31:0] dv_calc_mb_coordinates_141_148;
reg [31:0] dv_calc_mb_coordinates_141_148_reg;
reg [31:0] dv_calc_mb_coordinates_141_149;
reg [31:0] dv_calc_mb_coordinates_141_149_reg;
reg [31:0] dv_calc_mb_coordinates_141_150;
reg [31:0] dv_calc_mb_coordinates_141_150_reg;
reg  dv_calc_mb_coordinates_141_151;
reg  dv_calc_mb_coordinates_141_151_reg;
reg [31:0] dv_calc_mb_coordinates_152_153;
reg [31:0] dv_calc_mb_coordinates_152_153_reg;
reg [31:0] dv_calc_mb_coordinates_152_154;
reg [31:0] dv_calc_mb_coordinates_152_154_reg;
reg [31:0] dv_calc_mb_coordinates_155_y_2;
reg [31:0] dv_calc_mb_coordinates_155_y_2_reg;
reg [31:0] dv_calc_mb_coordinates_155_156;
reg [31:0] dv_calc_mb_coordinates_155_156_reg;
reg [31:0] dv_calc_mb_coordinates_155_157;
reg [31:0] dv_calc_mb_coordinates_155_157_reg;
reg [31:0] dv_calc_mb_coordinates_155_158;
reg [31:0] dv_calc_mb_coordinates_155_158_reg;
reg [31:0] dv_calc_mb_coordinates_159_160;
reg [31:0] dv_calc_mb_coordinates_159_160_reg;
reg  dv_calc_mb_coordinates_159_exitcond;
reg  dv_calc_mb_coordinates_159_exitcond_reg;
reg [2:0] dv_calc_mb_coordinates_off_address_a;
reg  dv_calc_mb_coordinates_off_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_off_in_a;
wire [31:0] dv_calc_mb_coordinates_off_out_a;
wire [2:0] dv_calc_mb_coordinates_off_address_b;
wire  dv_calc_mb_coordinates_off_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_off_in_b;
wire [31:0] dv_calc_mb_coordinates_off_out_b;
reg [2:0] dv_calc_mb_coordinates_shuf1_address_a;
reg  dv_calc_mb_coordinates_shuf1_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf1_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf1_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf1_address_b;
wire  dv_calc_mb_coordinates_shuf1_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf1_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf1_out_b;
reg [2:0] dv_calc_mb_coordinates_shuf2_address_a;
reg  dv_calc_mb_coordinates_shuf2_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf2_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf2_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf2_address_b;
wire  dv_calc_mb_coordinates_shuf2_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf2_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf2_out_b;
reg [2:0] dv_calc_mb_coordinates_shuf3_address_a;
reg  dv_calc_mb_coordinates_shuf3_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf3_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf3_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf3_address_b;
wire  dv_calc_mb_coordinates_shuf3_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf3_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf3_out_b;
reg [3:0] dv_calc_mb_coordinates_l_start_address_a;
reg  dv_calc_mb_coordinates_l_start_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_l_start_in_a;
wire [31:0] dv_calc_mb_coordinates_l_start_out_a;
wire [3:0] dv_calc_mb_coordinates_l_start_address_b;
wire  dv_calc_mb_coordinates_l_start_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_l_start_in_b;
wire [31:0] dv_calc_mb_coordinates_l_start_out_b;
reg [2:0] dv_calc_mb_coordinates_l_start_shuffled_address_a;
reg  dv_calc_mb_coordinates_l_start_shuffled_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_in_a;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_out_a;
wire [2:0] dv_calc_mb_coordinates_l_start_shuffled_address_b;
wire  dv_calc_mb_coordinates_l_start_shuffled_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_in_b;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_out_b;
reg [4:0] dv_calc_mb_coordinates_serpent1_address_a;
reg  dv_calc_mb_coordinates_serpent1_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_serpent1_in_a;
wire [31:0] dv_calc_mb_coordinates_serpent1_out_a;
wire [4:0] dv_calc_mb_coordinates_serpent1_address_b;
wire  dv_calc_mb_coordinates_serpent1_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_serpent1_in_b;
wire [31:0] dv_calc_mb_coordinates_serpent1_out_b;
reg [4:0] dv_calc_mb_coordinates_serpent2_address_a;
reg  dv_calc_mb_coordinates_serpent2_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_serpent2_in_a;
wire [31:0] dv_calc_mb_coordinates_serpent2_out_a;
wire [4:0] dv_calc_mb_coordinates_serpent2_address_b;
wire  dv_calc_mb_coordinates_serpent2_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_serpent2_in_b;
wire [31:0] dv_calc_mb_coordinates_serpent2_out_b;
reg [6:0] dv_calc_mb_coordinates_remap_address_a;
reg  dv_calc_mb_coordinates_remap_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_remap_in_a;
wire [31:0] dv_calc_mb_coordinates_remap_out_a;
reg [6:0] dv_calc_mb_coordinates_remap_address_b;
reg  dv_calc_mb_coordinates_remap_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_remap_in_b;
wire [31:0] dv_calc_mb_coordinates_remap_out_b;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] dv_calc_mb_coordinates_signed_divide_32_0_op0;
reg [31:0] dv_calc_mb_coordinates_signed_divide_32_0_op1;
wire [31:0] lpm_divide_dv_calc_mb_coordinates_0_10_temp_out;
wire [31:0] dv_calc_mb_coordinates_0_10_unused;
reg  lpm_divide_dv_calc_mb_coordinates_0_10_en;
reg [31:0] lpm_divide_dv_calc_mb_coordinates_0_10_out;
reg [31:0] dv_calc_mb_coordinates_signed_divide_32_0;
reg [31:0] dv_calc_mb_coordinates_signed_modulus_32_0_op0;
reg [31:0] dv_calc_mb_coordinates_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_dv_calc_mb_coordinates_0_11_temp_out;
wire [31:0] dv_calc_mb_coordinates_0_11_unused;
reg  lpm_divide_dv_calc_mb_coordinates_0_11_en;
reg [31:0] lpm_divide_dv_calc_mb_coordinates_0_11_out;
reg [31:0] dv_calc_mb_coordinates_signed_modulus_32_0;
reg  lpm_mult_dv_calc_mb_coordinates_0_2_en;
reg [31:0] dv_calc_mb_coordinates_0_2_stage0_reg;
reg  lpm_mult_dv_calc_mb_coordinates_0_17_en;
reg [31:0] dv_calc_mb_coordinates_0_17_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_0_21_en;
reg  lpm_mult_dv_calc_mb_coordinates_0_32_en;
reg [31:0] dv_calc_mb_coordinates_0_32_stage0_reg;
reg  lpm_mult_dv_calc_mb_coordinates_0_4_en;
reg [31:0] dv_calc_mb_coordinates_0_4_stage0_reg;
reg  lpm_mult_dv_calc_mb_coordinates_0_19_en;
reg [31:0] dv_calc_mb_coordinates_0_19_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_0_34_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_25_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_26_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_14_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_15_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_27_en;
reg  lpm_divide_dv_calc_mb_coordinates_0_28_en;
reg  lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp11_en;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp11_stage0_reg;
reg  lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp15_en;
reg [31:0] dv_calc_mb_coordinates___crit_edge_tmp15_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_43_46_en;
reg  lpm_mult_dv_calc_mb_coordinates_43_50_en;
reg [31:0] dv_calc_mb_coordinates_43_50_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_58_61_en;
reg  lpm_mult_dv_calc_mb_coordinates_58_65_en;
reg [31:0] dv_calc_mb_coordinates_58_65_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_84_87_en;
reg  lpm_divide_dv_calc_mb_coordinates_84_92_en;
reg  lpm_divide_dv_calc_mb_coordinates_84_97_en;
reg  lpm_divide_dv_calc_mb_coordinates_105_112_en;
reg  lpm_mult_dv_calc_mb_coordinates_105_115_en;
reg [31:0] dv_calc_mb_coordinates_105_115_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_120_127_en;
reg  lpm_mult_dv_calc_mb_coordinates_120_128_en;
reg [31:0] dv_calc_mb_coordinates_120_128_stage0_reg;
reg  lpm_divide_dv_calc_mb_coordinates_133_137_en;
reg  lpm_divide_dv_calc_mb_coordinates_141_145_en;
reg  lpm_mult_dv_calc_mb_coordinates_141_149_en;
reg [31:0] dv_calc_mb_coordinates_141_149_stage0_reg;

/*   %10 = sdiv i32 %5, 11*/
lpm_divide lpm_divide_dv_calc_mb_coordinates_0_10 (
	.quotient (lpm_divide_dv_calc_mb_coordinates_0_10_temp_out),
	.remain (dv_calc_mb_coordinates_0_10_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_dv_calc_mb_coordinates_0_10_en),
	.numer (dv_calc_mb_coordinates_signed_divide_32_0_op0),
	.denom (dv_calc_mb_coordinates_signed_divide_32_0_op1)
);

defparam
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_pipeline = 32,
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_widthn = 32,
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_widthd = 32,
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_drepresentation = "SIGNED",
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_nrepresentation = "SIGNED",
	lpm_divide_dv_calc_mb_coordinates_0_10.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %11 = srem i32 %10, 27*/
lpm_divide lpm_divide_dv_calc_mb_coordinates_0_11 (
	.quotient (dv_calc_mb_coordinates_0_11_unused),
	.remain (lpm_divide_dv_calc_mb_coordinates_0_11_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_dv_calc_mb_coordinates_0_11_en),
	.numer (dv_calc_mb_coordinates_signed_modulus_32_0_op0),
	.denom (dv_calc_mb_coordinates_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_pipeline = 32,
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_widthn = 32,
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_widthd = 32,
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_drepresentation = "SIGNED",
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_dv_calc_mb_coordinates_0_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams

// @dv_calc_mb_coordinates.off = internal unnamed_addr constant [5 x i32] [i32 2, i32 6, i32 8, i32 0, i32 4], align 4

rom_dual_port dv_calc_mb_coordinates_off (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_off_address_a ),
	.address_b( dv_calc_mb_coordinates_off_address_b ),
	.q_a( dv_calc_mb_coordinates_off_out_a ),
	.q_b( dv_calc_mb_coordinates_off_out_b)
);
defparam dv_calc_mb_coordinates_off.width_a = 32;
defparam dv_calc_mb_coordinates_off.width_b = 32;
defparam dv_calc_mb_coordinates_off.widthad_a = 3;
defparam dv_calc_mb_coordinates_off.widthad_b = 3;
defparam dv_calc_mb_coordinates_off.numwords_a = 5;
defparam dv_calc_mb_coordinates_off.numwords_b = 5;
defparam dv_calc_mb_coordinates_off.latency = 1;
defparam dv_calc_mb_coordinates_off.init_file = "dv_calc_mb_coordinates_off.mif";

// @dv_calc_mb_coordinates.shuf1 = internal unnamed_addr constant [5 x i32] [i32 36, i32 18, i32 54, i32 0, i32 72], align 4

rom_dual_port dv_calc_mb_coordinates_shuf1 (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_shuf1_address_a ),
	.address_b( dv_calc_mb_coordinates_shuf1_address_b ),
	.q_a( dv_calc_mb_coordinates_shuf1_out_a ),
	.q_b( dv_calc_mb_coordinates_shuf1_out_b)
);
defparam dv_calc_mb_coordinates_shuf1.width_a = 32;
defparam dv_calc_mb_coordinates_shuf1.width_b = 32;
defparam dv_calc_mb_coordinates_shuf1.widthad_a = 3;
defparam dv_calc_mb_coordinates_shuf1.widthad_b = 3;
defparam dv_calc_mb_coordinates_shuf1.numwords_a = 5;
defparam dv_calc_mb_coordinates_shuf1.numwords_b = 5;
defparam dv_calc_mb_coordinates_shuf1.latency = 1;
defparam dv_calc_mb_coordinates_shuf1.init_file = "dv_calc_mb_coordinates_shuf1.mif";

// @dv_calc_mb_coordinates.shuf2 = internal unnamed_addr constant [5 x i32] [i32 24, i32 12, i32 36, i32 0, i32 48], align 4

rom_dual_port dv_calc_mb_coordinates_shuf2 (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_shuf2_address_a ),
	.address_b( dv_calc_mb_coordinates_shuf2_address_b ),
	.q_a( dv_calc_mb_coordinates_shuf2_out_a ),
	.q_b( dv_calc_mb_coordinates_shuf2_out_b)
);
defparam dv_calc_mb_coordinates_shuf2.width_a = 32;
defparam dv_calc_mb_coordinates_shuf2.width_b = 32;
defparam dv_calc_mb_coordinates_shuf2.widthad_a = 3;
defparam dv_calc_mb_coordinates_shuf2.widthad_b = 3;
defparam dv_calc_mb_coordinates_shuf2.numwords_a = 5;
defparam dv_calc_mb_coordinates_shuf2.numwords_b = 5;
defparam dv_calc_mb_coordinates_shuf2.latency = 1;
defparam dv_calc_mb_coordinates_shuf2.init_file = "dv_calc_mb_coordinates_shuf2.mif";

// @dv_calc_mb_coordinates.shuf3 = internal unnamed_addr constant [5 x i32] [i32 18, i32 9, i32 27, i32 0, i32 36], align 4

rom_dual_port dv_calc_mb_coordinates_shuf3 (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_shuf3_address_a ),
	.address_b( dv_calc_mb_coordinates_shuf3_address_b ),
	.q_a( dv_calc_mb_coordinates_shuf3_out_a ),
	.q_b( dv_calc_mb_coordinates_shuf3_out_b)
);
defparam dv_calc_mb_coordinates_shuf3.width_a = 32;
defparam dv_calc_mb_coordinates_shuf3.width_b = 32;
defparam dv_calc_mb_coordinates_shuf3.widthad_a = 3;
defparam dv_calc_mb_coordinates_shuf3.widthad_b = 3;
defparam dv_calc_mb_coordinates_shuf3.numwords_a = 5;
defparam dv_calc_mb_coordinates_shuf3.numwords_b = 5;
defparam dv_calc_mb_coordinates_shuf3.latency = 1;
defparam dv_calc_mb_coordinates_shuf3.init_file = "dv_calc_mb_coordinates_shuf3.mif";

// @dv_calc_mb_coordinates.l_start = internal unnamed_addr constant [10 x i32] [i32 0, i32 4, i32 9, i32 13, i32 18, i32 22, i32 27, i32 31, i32 36, i32 40], align 4

rom_dual_port dv_calc_mb_coordinates_l_start (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_l_start_address_a ),
	.address_b( dv_calc_mb_coordinates_l_start_address_b ),
	.q_a( dv_calc_mb_coordinates_l_start_out_a ),
	.q_b( dv_calc_mb_coordinates_l_start_out_b)
);
defparam dv_calc_mb_coordinates_l_start.width_a = 32;
defparam dv_calc_mb_coordinates_l_start.width_b = 32;
defparam dv_calc_mb_coordinates_l_start.widthad_a = 4;
defparam dv_calc_mb_coordinates_l_start.widthad_b = 4;
defparam dv_calc_mb_coordinates_l_start.numwords_a = 10;
defparam dv_calc_mb_coordinates_l_start.numwords_b = 10;
defparam dv_calc_mb_coordinates_l_start.latency = 1;
defparam dv_calc_mb_coordinates_l_start.init_file = "dv_calc_mb_coordinates_l_start.mif";

// @dv_calc_mb_coordinates.l_start_shuffled = internal unnamed_addr constant [5 x i32] [i32 9, i32 4, i32 13, i32 0, i32 18], align 4

rom_dual_port dv_calc_mb_coordinates_l_start_shuffled (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_l_start_shuffled_address_a ),
	.address_b( dv_calc_mb_coordinates_l_start_shuffled_address_b ),
	.q_a( dv_calc_mb_coordinates_l_start_shuffled_out_a ),
	.q_b( dv_calc_mb_coordinates_l_start_shuffled_out_b)
);
defparam dv_calc_mb_coordinates_l_start_shuffled.width_a = 32;
defparam dv_calc_mb_coordinates_l_start_shuffled.width_b = 32;
defparam dv_calc_mb_coordinates_l_start_shuffled.widthad_a = 3;
defparam dv_calc_mb_coordinates_l_start_shuffled.widthad_b = 3;
defparam dv_calc_mb_coordinates_l_start_shuffled.numwords_a = 5;
defparam dv_calc_mb_coordinates_l_start_shuffled.numwords_b = 5;
defparam dv_calc_mb_coordinates_l_start_shuffled.latency = 1;
defparam dv_calc_mb_coordinates_l_start_shuffled.init_file = "dv_calc_mb_coordinates_l_start_shuffled.mif";

// @dv_calc_mb_coordinates.serpent1 = internal unnamed_addr constant [27 x i32] [i32 0, i32 1, i32 2, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2], align 4

rom_dual_port dv_calc_mb_coordinates_serpent1 (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_serpent1_address_a ),
	.address_b( dv_calc_mb_coordinates_serpent1_address_b ),
	.q_a( dv_calc_mb_coordinates_serpent1_out_a ),
	.q_b( dv_calc_mb_coordinates_serpent1_out_b)
);
defparam dv_calc_mb_coordinates_serpent1.width_a = 32;
defparam dv_calc_mb_coordinates_serpent1.width_b = 32;
defparam dv_calc_mb_coordinates_serpent1.widthad_a = 5;
defparam dv_calc_mb_coordinates_serpent1.widthad_b = 5;
defparam dv_calc_mb_coordinates_serpent1.numwords_a = 27;
defparam dv_calc_mb_coordinates_serpent1.numwords_b = 27;
defparam dv_calc_mb_coordinates_serpent1.latency = 1;
defparam dv_calc_mb_coordinates_serpent1.init_file = "dv_calc_mb_coordinates_serpent1.mif";

// @dv_calc_mb_coordinates.serpent2 = internal unnamed_addr constant [30 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5], align 4

rom_dual_port dv_calc_mb_coordinates_serpent2 (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_serpent2_address_a ),
	.address_b( dv_calc_mb_coordinates_serpent2_address_b ),
	.q_a( dv_calc_mb_coordinates_serpent2_out_a ),
	.q_b( dv_calc_mb_coordinates_serpent2_out_b)
);
defparam dv_calc_mb_coordinates_serpent2.width_a = 32;
defparam dv_calc_mb_coordinates_serpent2.width_b = 32;
defparam dv_calc_mb_coordinates_serpent2.widthad_a = 5;
defparam dv_calc_mb_coordinates_serpent2.widthad_b = 5;
defparam dv_calc_mb_coordinates_serpent2.numwords_a = 30;
defparam dv_calc_mb_coordinates_serpent2.numwords_b = 30;
defparam dv_calc_mb_coordinates_serpent2.latency = 1;
defparam dv_calc_mb_coordinates_serpent2.init_file = "dv_calc_mb_coordinates_serpent2.mif";

// @dv_calc_mb_coordinates.remap = internal unnamed_addr constant [64 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] [i32 0, i32 1], [2 x i32] [i32 0, i32 2], [2 x i32] [i32 0, i32 3], [2 x i32] [i32 10, i32 0], [2 x i32] [i32 10, i32 1], [2 x i32] [i32 10, i32 2], [2 x i32] [i32 10, i32 3], [2 x i32] [i32 20, i32 0], [2 x i32] [i32 20, i32 1], [2 x i32] [i32 20, i32 2], [2 x i32] [i32 20, i32 3], [2 x i32] [i32 30, i32 0], [2 x i32] [i32 30, i32 1], [2 x i32] [i32 30, i32 2], [2 x i32] [i32 30, i32 3], [2 x i32] [i32 40, i32 0], [2 x i32] [i32 40, i32 1], [2 x i32] [i32 40, i32 2], [2 x i32] [i32 40, i32 3], [2 x i32] [i32 50, i32 0], [2 x i32] [i32 50, i32 1], [2 x i32] [i32 50, i32 2], [2 x i32] [i32 50, i32 3], [2 x i32] [i32 60, i32 0], [2 x i32] [i32 60, i32 1], [2 x i32] [i32 60, i32 2], [2 x i32] [i32 60, i32 3], [2 x i32] [i32 70, i32 0], [2 x i32] [i32 70, i32 1], [2 x i32] [i32 70, i32 2], [2 x i32] [i32 70, i32 3], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 0, i32 66], [2 x i32] [i32 10, i32 64], [2 x i32] [i32 10, i32 65], [2 x i32] [i32 10, i32 66], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 20, i32 65], [2 x i32] [i32 20, i32 66], [2 x i32] [i32 30, i32 64], [2 x i32] [i32 30, i32 65], [2 x i32] [i32 30, i32 66], [2 x i32] [i32 40, i32 64], [2 x i32] [i32 40, i32 65], [2 x i32] [i32 40, i32 66], [2 x i32] [i32 50, i32 64], [2 x i32] [i32 50, i32 65], [2 x i32] [i32 50, i32 66], [2 x i32] [i32 60, i32 64], [2 x i32] [i32 60, i32 65], [2 x i32] [i32 60, i32 66], [2 x i32] [i32 70, i32 64], [2 x i32] [i32 70, i32 65], [2 x i32] [i32 70, i32 66], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 20, i32 67], [2 x i32] [i32 40, i32 67], [2 x i32] [i32 60, i32 67]], align 4

rom_dual_port dv_calc_mb_coordinates_remap (
	.clk( clk ),
	.address_a( dv_calc_mb_coordinates_remap_address_a ),
	.address_b( dv_calc_mb_coordinates_remap_address_b ),
	.q_a( dv_calc_mb_coordinates_remap_out_a ),
	.q_b( dv_calc_mb_coordinates_remap_out_b)
);
defparam dv_calc_mb_coordinates_remap.width_a = 32;
defparam dv_calc_mb_coordinates_remap.width_b = 32;
defparam dv_calc_mb_coordinates_remap.widthad_a = 7;
defparam dv_calc_mb_coordinates_remap.widthad_b = 7;
defparam dv_calc_mb_coordinates_remap.numwords_a = 128;
defparam dv_calc_mb_coordinates_remap.numwords_b = 128;
defparam dv_calc_mb_coordinates_remap.latency = 1;
defparam dv_calc_mb_coordinates_remap.init_file = "dv_calc_mb_coordinates_remap.mif";


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates___crit_edge_38 == 32'd1440)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_39_104;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_39_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates___crit_edge_38 == 32'd1280)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_144;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates___crit_edge_38 == 32'd960)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_183;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates___crit_edge_38 == 32'd720)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_250;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates___crit_edge_38 != 32'd1440)) & (dv_calc_mb_coordinates___crit_edge_38 != 32'd1280)) & (dv_calc_mb_coordinates___crit_edge_38 != 32'd960)) & (dv_calc_mb_coordinates___crit_edge_38 != 32'd720)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_39_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_39_104;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_39_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_39_104) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_0_or_cond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_40_105;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_40_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_39_104) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_0_or_cond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_107;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_40_105;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_40_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_142;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_42_106;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_42_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_42_106;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_42_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_142;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_107;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_108;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_108;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_109;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_109;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_110;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_110;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_111;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_111;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_112;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_112;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_113;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_113;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_114;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_114;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_115;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_115;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_116;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_116;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_117;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_117;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_118;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_118;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_119;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_119;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_120;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_120;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_121;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_121;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_122;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_122;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_123;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_123;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_124;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_124;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_125;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_125;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_126;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_126;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_127;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_127;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_128;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_128;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_129;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_129;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_130;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_130;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_131;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_131;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_132;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_132;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_133;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_133;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_134;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_134;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_135;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_135;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_136;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_136;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_137;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_137;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_138;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_138;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_139;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_139;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_140;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_140;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_141;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_43_141;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_43_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_142;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_142;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_143;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_55_143;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_55_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_144;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_145;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_145;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_146;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_146;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_147;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_147;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_148;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_148;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_149;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_149;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_150;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_150;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_151;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_151;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_152;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_152;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_153;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_153;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_154;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_154;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_155;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_155;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_156;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_156;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_157;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_157;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_158;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_158;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_159;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_159;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_160;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_160;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_161;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_161;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_162;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_162;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_163;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_163;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_164;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_164;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_165;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_165;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_166;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_166;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_167;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_167;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_168;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_168;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_169;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_169;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_170;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_170;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_171;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_171;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_172;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_172;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_173;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_173;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_174;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_174;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_175;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_175;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_176;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_176;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_177;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_177;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_178;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_58_178;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_58_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_70_179;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_70_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_80_181;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_80_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_70_179;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_70_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_70_180;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_70_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_70_180;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_70_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_80_181;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_80_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_80_181;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_80_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_80_182;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_80_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_80_182;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_80_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_183;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_184;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_184;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_185;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_185;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_186;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_186;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_187;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_187;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_188;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_188;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_189;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_189;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_190;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_190;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_191;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_191;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_192;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_192;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_193;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_193;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_194;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_194;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_195;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_195;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_196;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_196;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_197;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_197;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_198;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_198;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_199;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_199;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_200;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_200;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_201;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_201;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_202;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_202;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_203;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_203;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_204;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_204;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_205;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_205;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_206;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_206;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_207;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_207;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_208;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_208;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_209;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_209;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_210;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_210;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_211;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_211;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_212;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_212;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_213;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_213;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_214;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_214;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_215;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_215;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_216;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_216;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_217;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_217;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_218;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_218;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_219;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_219;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_220;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_220;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_221;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_221;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_222;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_222;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_223;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_223;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_224;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_224;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_225;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_225;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_226;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_226;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_227;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_227;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_228;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_228;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_229;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_229;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_230;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_230;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_231;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_231;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_232;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_232;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_233;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_233;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_234;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_234;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_235;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_235;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_236;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_236;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_237;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_237;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_238;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_238;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_239;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_239;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_240;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_240;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_241;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_241;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_242;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_242;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_243;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_243;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_244;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_244;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_245;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_245;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_246;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_246;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_247;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_247;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_248;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_248;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_249;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_84_249;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_84_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_250;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_251;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_251;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_252;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_103_252;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_103_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_103_104 == 32'd128)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_253;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_103_104 == 32'd129)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_290;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_103_104 == 32'd130)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_327;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_103_104 != 32'd128)) & (dv_calc_mb_coordinates_103_104 != 32'd129)) & (dv_calc_mb_coordinates_103_104 != 32'd130)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_253;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_254;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_254;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_255;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_255;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_256;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_256;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_257;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_257;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_258;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_258;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_259;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_259;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_260;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_260) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_260;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_260) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_261;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_261) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_261;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_261) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_262;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_262) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_262;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_262) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_263;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_263) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_263;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_263) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_264;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_264) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_264;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_264) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_265;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_265) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_265;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_265) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_266;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_266) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_266;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_266) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_267;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_267) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_267;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_267) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_268;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_268) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_268;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_268) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_269;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_269) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_269;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_269) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_270;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_270) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_270;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_270) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_271;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_271) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_271;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_271) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_272;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_272) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_272;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_272) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_273;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_273) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_273;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_273) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_274;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_274) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_274;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_274) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_275;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_275) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_275;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_275) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_276;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_276) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_276;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_276) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_277;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_277) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_277;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_277) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_278;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_278) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_278;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_278) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_279;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_279) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_279;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_279) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_280;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_280) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_280;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_280) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_281;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_281) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_281;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_281) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_282;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_282) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_282;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_282) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_283;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_283) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_283;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_283) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_284;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_284) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_284;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_284) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_285;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_285) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_285;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_285) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_286;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_286) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_286;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_286) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_287;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_287;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_288;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_288;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_289;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_289) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_105_289;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_105_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_289) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_290;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_291;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_291;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_292;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_292) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_292;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_292) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_293;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_293) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_293;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_293) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_294;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_294) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_294;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_294) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_295;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_295) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_295;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_295) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_296;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_296) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_296;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_296) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_297;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_297) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_297;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_297) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_298;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_298) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_298;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_298) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_299;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_299) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_299;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_299) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_300;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_300) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_300;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_300) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_301;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_301) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_301;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_301) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_302;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_302) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_302;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_302) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_303;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_303) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_303;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_303) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_304;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_304) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_304;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_304) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_305;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_305) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_305;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_305) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_306;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_306) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_306;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_306) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_307;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_307) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_307;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_307) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_308;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_308) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_308;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_308) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_309;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_309) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_309;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_309) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_310;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_310) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_310;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_310) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_311;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_311) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_311;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_311) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_312;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_312) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_312;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_312) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_313;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_313) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_313;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_313) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_314;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_314) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_314;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_314) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_315;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_315) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_315;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_315) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_316;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_316) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_316;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_316) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_317;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_317) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_317;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_317) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_318;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_318) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_318;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_318) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_319;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_319) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_319;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_319) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_320;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_320) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_320;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_320) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_321;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_321) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_321;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_321) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_322;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_322) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_322;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_322) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_323;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_323) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_323;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_323) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_324;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_324) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_324;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_324) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_325;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_325;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_326;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_326) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_120_326;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_120_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_326) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_327;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_328;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_328) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_328;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_328) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_329;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_329) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_329;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_329) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_330;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_330) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_330;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_330) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_331;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_331) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_331;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_331) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_332;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_332) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_332;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_332) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_333;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_333) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_333;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_333) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_334;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_334) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_334;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_334) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_335;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_335) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_335;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_335) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_336;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_336) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_336;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_336) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_337;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_337) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_337;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_337) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_338;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_338) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_338;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_338) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_339;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_339) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_339;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_339) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_340;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_340) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_340;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_340) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_341;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_341) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_341;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_341) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_342;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_342) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_342;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_342) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_343;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_343) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_343;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_343) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_344;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_344) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_344;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_344) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_345;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_345) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_345;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_345) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_346;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_346) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_346;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_346) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_347;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_347) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_347;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_347) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_348;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_348) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_348;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_348) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_349;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_349) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_349;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_349) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_350;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_350) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_350;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_350) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_351;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_351) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_351;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_351) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_352;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_352) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_352;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_352) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_353;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_353) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_353;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_353) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_354;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_354) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_354;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_354) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_355;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_355) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_355;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_355) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_356;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_356) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_356;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_356) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_357;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_357) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_357;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_357) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_358;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_358) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_358;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_358) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_359;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_359) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_359;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_359) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_360;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_360) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_360;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_360) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_361;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_133_361;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_133_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_133_138_reg == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_363;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_133_138_reg == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_139_362;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_139_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_139_362;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_139_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_363;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_363;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_364;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_364;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_365;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_365) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_365;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_365) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_366;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_366) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_366;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_366) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_367;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_367) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_367;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_367) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_368;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_368) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_368;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_368) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_369;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_369) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_369;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_369) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_370;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_370) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_370;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_370) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_371;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_371) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_371;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_371) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_372;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_372) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_372;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_372) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_373;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_373) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_373;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_373) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_374;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_374) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_374;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_374) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_375;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_375) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_375;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_375) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_376;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_376) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_376;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_376) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_377;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_377) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_377;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_377) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_378;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_378) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_378;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_378) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_379;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_379) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_379;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_379) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_380;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_380) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_380;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_380) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_381;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_381) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_381;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_381) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_382;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_382) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_382;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_382) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_383;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_383) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_383;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_383) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_384;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_384) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_384;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_384) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_385;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_385) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_385;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_385) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_386;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_386) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_386;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_386) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_387;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_387) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_387;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_387) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_388;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_388) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_388;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_388) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_389;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_389) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_389;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_389) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_390;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_390) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_390;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_390) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_391;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_391) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_391;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_391) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_392;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_392) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_392;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_392) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_393;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_393) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_393;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_393) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_394;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_394) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_394;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_394) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_395;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_141_395;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_141_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_141_151 == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_152_396;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_152_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_141_151 == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_155_397;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_155_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_152_396;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_152_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_155_397;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_155_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_155_397;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_155_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_155_398;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_155_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_398) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_155_398;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_155_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_398) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_159_399;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_159_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_159_exitcond == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_161_400;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_161_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_159_exitcond == 1'd0)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_161_400) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_dv_calc_mb_coordinates_BB_161_400;
if (reset == 1'b0 && ^(LEGUP_F_dv_calc_mb_coordinates_BB_161_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_161_400) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 0*/
begin
dv_calc_mb_coordinates_0_1 = arg_d;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_1_reg <= dv_calc_mb_coordinates_0_1;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_1_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_2 = dv_calc_mb_coordinates_0_2_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %2 = mul nsw i32 %chan, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_2_reg <= dv_calc_mb_coordinates_0_2;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_2_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %2 = mul nsw i32 %chan, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_2_reg <= dv_calc_mb_coordinates_0_2;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_2_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %3 = add nsw i32 %2, %seq*/
begin
dv_calc_mb_coordinates_0_3 = (dv_calc_mb_coordinates_0_2 + arg_seq);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %3 = add nsw i32 %2, %seq*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_3_reg <= dv_calc_mb_coordinates_0_3;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_3_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_4 = dv_calc_mb_coordinates_0_4_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %4 = mul nsw i32 %3, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_4_reg <= dv_calc_mb_coordinates_0_4;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_4_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %4 = mul nsw i32 %3, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_4_reg <= dv_calc_mb_coordinates_0_4;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_4_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %5 = add nsw i32 %4, %slot*/
begin
dv_calc_mb_coordinates_0_5 = (dv_calc_mb_coordinates_0_4 + arg_slot);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %5 = add nsw i32 %4, %slot*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_5_reg <= dv_calc_mb_coordinates_0_5;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_5_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %6 = icmp eq i32 %chan, 0*/
begin
dv_calc_mb_coordinates_0_6 = (arg_chan == 32'd0);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %6 = icmp eq i32 %chan, 0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_6_reg <= dv_calc_mb_coordinates_0_6;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_6_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %7 = icmp eq i32 %seq, 11*/
begin
dv_calc_mb_coordinates_0_7 = (arg_seq == 32'd11);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %7 = icmp eq i32 %seq, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_7_reg <= dv_calc_mb_coordinates_0_7;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_7_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %or.cond = and i1 %6, %7*/
begin
dv_calc_mb_coordinates_0_or_cond = (dv_calc_mb_coordinates_0_6 & dv_calc_mb_coordinates_0_7);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %or.cond = and i1 %6, %7*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_or_cond_reg <= dv_calc_mb_coordinates_0_or_cond;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %8 = shl i32 %chan, 2*/
begin
dv_calc_mb_coordinates_0_8 = (arg_chan <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %8 = shl i32 %chan, 2*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_8_reg <= dv_calc_mb_coordinates_0_8;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_8_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %9 = add i32 %5, %8*/
begin
dv_calc_mb_coordinates_0_9 = (dv_calc_mb_coordinates_0_5 + dv_calc_mb_coordinates_0_8_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %9 = add i32 %5, %8*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_9_reg <= dv_calc_mb_coordinates_0_9;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_9_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_10 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %10 = sdiv i32 %5, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35))
begin
dv_calc_mb_coordinates_0_10_reg <= dv_calc_mb_coordinates_0_10;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_10_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %10 = sdiv i32 %5, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35))
begin
dv_calc_mb_coordinates_0_10_reg <= dv_calc_mb_coordinates_0_10;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_10_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_11 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %11 = srem i32 %10, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_0_11;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %11 = srem i32 %10, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_0_11;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %43*/
/*   %46 = srem i32 %45, 11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_140))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_43_46;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %58*/
/*   %61 = srem i32 %60, 10*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_177))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_58_61;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %120*/
/*   %127 = srem i32 %125, %126*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_324))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_120_127;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %133*/
/*   %137 = srem i32 %135, %136*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361))
begin
dv_calc_mb_coordinates_0_11_reg <= dv_calc_mb_coordinates_133_137;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_133_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_11_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %12 = and i32 %chan, 1*/
begin
dv_calc_mb_coordinates_0_12 = (arg_chan & 32'd1);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %12 = and i32 %chan, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_12_reg <= dv_calc_mb_coordinates_0_12;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_12_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp3 = sub i32 0, %12*/
begin
dv_calc_mb_coordinates_0_tmp3 = (32'd0 - dv_calc_mb_coordinates_0_12);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp3 = sub i32 0, %12*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_tmp3_reg <= dv_calc_mb_coordinates_0_tmp3;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_tmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_tmp3_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %13 = and i32 %tmp3, 9*/
begin
dv_calc_mb_coordinates_0_13 = (dv_calc_mb_coordinates_0_tmp3 & 32'd9);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %13 = and i32 %tmp3, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_13_reg <= dv_calc_mb_coordinates_0_13;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_13_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_14 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %14 = srem i32 %11, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99))
begin
dv_calc_mb_coordinates_0_14_reg <= dv_calc_mb_coordinates_0_14;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_14_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %14 = srem i32 %11, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99))
begin
dv_calc_mb_coordinates_0_14_reg <= dv_calc_mb_coordinates_0_14;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_14_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_15 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %15 = sdiv i32 %11, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99))
begin
dv_calc_mb_coordinates_0_15_reg <= dv_calc_mb_coordinates_0_15;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_15_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %15 = sdiv i32 %11, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_99))
begin
dv_calc_mb_coordinates_0_15_reg <= dv_calc_mb_coordinates_0_15;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_15_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %16 = lshr i32 %chan, 1*/
begin
dv_calc_mb_coordinates_0_16 = (arg_chan >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %16 = lshr i32 %chan, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_16_reg <= dv_calc_mb_coordinates_0_16;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_16_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_17 = dv_calc_mb_coordinates_0_17_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %17 = mul nsw i32 %chan, 10*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_17_reg <= dv_calc_mb_coordinates_0_17;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_17_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %17 = mul nsw i32 %chan, 10*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_17_reg <= dv_calc_mb_coordinates_0_17;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_17_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %18 = add nsw i32 %17, %seq*/
begin
dv_calc_mb_coordinates_0_18 = (dv_calc_mb_coordinates_0_17 + arg_seq);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %18 = add nsw i32 %17, %seq*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_18_reg <= dv_calc_mb_coordinates_0_18;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_18_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_19 = dv_calc_mb_coordinates_0_19_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %19 = mul nsw i32 %18, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_19_reg <= dv_calc_mb_coordinates_0_19;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_19_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %19 = mul nsw i32 %18, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_19_reg <= dv_calc_mb_coordinates_0_19;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_19_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %20 = add nsw i32 %19, %slot*/
begin
dv_calc_mb_coordinates_0_20 = (dv_calc_mb_coordinates_0_19 + arg_slot);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %20 = add nsw i32 %19, %slot*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_20_reg <= dv_calc_mb_coordinates_0_20;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_20_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_21 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %21 = sdiv i32 %seq, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_33))
begin
dv_calc_mb_coordinates_0_21_reg <= dv_calc_mb_coordinates_0_21;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_21_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %21 = sdiv i32 %seq, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_33))
begin
dv_calc_mb_coordinates_0_21_reg <= dv_calc_mb_coordinates_0_21;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_21_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %84*/
/*   %97 = sdiv i32 %90, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_0_21_reg <= dv_calc_mb_coordinates_84_97;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_21_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %141*/
/*   %145 = sdiv i32 %143, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395))
begin
dv_calc_mb_coordinates_0_21_reg <= dv_calc_mb_coordinates_141_145;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_21_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %22 = shl i32 %20, 1*/
begin
dv_calc_mb_coordinates_0_22 = (dv_calc_mb_coordinates_0_20 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %22 = shl i32 %20, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_22_reg <= dv_calc_mb_coordinates_0_22;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_22_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %23 = add i32 %22, %8*/
begin
dv_calc_mb_coordinates_0_23 = (dv_calc_mb_coordinates_0_22 + dv_calc_mb_coordinates_0_8_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %23 = add i32 %22, %8*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_0_23_reg <= dv_calc_mb_coordinates_0_23;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_23_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %24 = add i32 %23, %21*/
begin
dv_calc_mb_coordinates_0_24 = (dv_calc_mb_coordinates_0_23_reg + dv_calc_mb_coordinates_0_21);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %24 = add i32 %23, %21*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_33))
begin
dv_calc_mb_coordinates_0_24_reg <= dv_calc_mb_coordinates_0_24;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_24_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_25 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %25 = sdiv i32 %20, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36))
begin
dv_calc_mb_coordinates_0_25_reg <= dv_calc_mb_coordinates_0_25;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_25_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %25 = sdiv i32 %20, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36))
begin
dv_calc_mb_coordinates_0_25_reg <= dv_calc_mb_coordinates_0_25;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_25_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_26 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %26 = srem i32 %25, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_0_26_reg <= dv_calc_mb_coordinates_0_26;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_26_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %26 = srem i32 %25, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_0_26_reg <= dv_calc_mb_coordinates_0_26;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_26_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_27 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %27 = srem i32 %26, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100))
begin
dv_calc_mb_coordinates_0_27_reg <= dv_calc_mb_coordinates_0_27;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_27_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %27 = srem i32 %26, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100))
begin
dv_calc_mb_coordinates_0_27_reg <= dv_calc_mb_coordinates_0_27;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_27_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_28 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %28 = sdiv i32 %26, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100))
begin
dv_calc_mb_coordinates_0_28_reg <= dv_calc_mb_coordinates_0_28;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_28_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %28 = sdiv i32 %26, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100))
begin
dv_calc_mb_coordinates_0_28_reg <= dv_calc_mb_coordinates_0_28;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_28_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %29 = ashr i32 %chan, 1*/
begin
dv_calc_mb_coordinates_0_29 = ($signed(arg_chan) >>> 32'd1);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %29 = ashr i32 %chan, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_29_reg <= dv_calc_mb_coordinates_0_29;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_29_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %30 = add i32 %29, 4*/
begin
dv_calc_mb_coordinates_0_30 = (dv_calc_mb_coordinates_0_29 + 32'd4);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %30 = add i32 %29, 4*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_30_reg <= dv_calc_mb_coordinates_0_30;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_30_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %31 = and i32 %tmp3, 6*/
begin
dv_calc_mb_coordinates_0_31 = (dv_calc_mb_coordinates_0_tmp3 & 32'd6);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %31 = and i32 %tmp3, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_31_reg <= dv_calc_mb_coordinates_0_31;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_31_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_32 = dv_calc_mb_coordinates_0_32_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %32 = mul nsw i32 %29, 45*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_32_reg <= dv_calc_mb_coordinates_0_32;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_32_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %32 = mul nsw i32 %29, 45*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_0_32_reg <= dv_calc_mb_coordinates_0_32;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_32_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %33 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 2*/
begin
dv_calc_mb_coordinates_0_33 = (arg_d + 8);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %33 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 2*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_33_reg <= dv_calc_mb_coordinates_0_33;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_33_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_0_34 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %34 = sdiv i32 %slot, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_34))
begin
dv_calc_mb_coordinates_0_34_reg <= dv_calc_mb_coordinates_0_34;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_34_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %0*/
/*   %34 = sdiv i32 %slot, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_34))
begin
dv_calc_mb_coordinates_0_34_reg <= dv_calc_mb_coordinates_0_34;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_34_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %35 = getelementptr inbounds [27 x i32]* @dv_calc_mb_coordinates.serpent1, i32 0, i32 %slot*/
begin
dv_calc_mb_coordinates_0_35 = (1'd0 + (4 * arg_slot));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %35 = getelementptr inbounds [27 x i32]* @dv_calc_mb_coordinates.serpent1, i32 0, i32 %slot*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_35_reg <= dv_calc_mb_coordinates_0_35;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_35_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %36 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 1*/
begin
dv_calc_mb_coordinates_0_36 = (arg_d + 4);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %36 = getelementptr inbounds %struct.TYPE_3__* %d, i32 0, i32 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_36_reg <= dv_calc_mb_coordinates_0_36;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_36_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp12 = shl i32 %slot, 1*/
begin
dv_calc_mb_coordinates_0_tmp12 = (arg_slot <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp12 = shl i32 %slot, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_tmp12_reg <= dv_calc_mb_coordinates_0_tmp12;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_tmp12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_tmp12_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp13 = add i32 %tmp12, -180*/
begin
dv_calc_mb_coordinates_0_tmp13 = (dv_calc_mb_coordinates_0_tmp12 + -32'd180);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %tmp13 = add i32 %tmp12, -180*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_0_tmp13_reg <= dv_calc_mb_coordinates_0_tmp13;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_0_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_0_tmp13_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %37 = phi i32 [ 0, %0 ], [ %160, %159 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates___crit_edge_37 = 32'd0;
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %37 = phi i32 [ 0, %0 ], [ %160, %159 ]*/
else /* if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_159_exitcond == 1'd0))) */
begin
dv_calc_mb_coordinates___crit_edge_37 = dv_calc_mb_coordinates_159_160;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %37 = phi i32 [ 0, %0 ], [ %160, %159 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates___crit_edge_37_reg <= dv_calc_mb_coordinates___crit_edge_37;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_37_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %37 = phi i32 [ 0, %0 ], [ %160, %159 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_159_exitcond == 1'd0)))
begin
dv_calc_mb_coordinates___crit_edge_37_reg <= dv_calc_mb_coordinates___crit_edge_37;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_37_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep = getelementptr [5 x i32]* @dv_calc_mb_coordinates.off, i32 0, i32 %37*/
begin
dv_calc_mb_coordinates___crit_edge_scevgep = (1'd0 + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep = getelementptr [5 x i32]* @dv_calc_mb_coordinates.off, i32 0, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
dv_calc_mb_coordinates___crit_edge_scevgep_reg <= dv_calc_mb_coordinates___crit_edge_scevgep;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep6 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.l_start_shuffled, i32 0, i32 %37*/
begin
dv_calc_mb_coordinates___crit_edge_scevgep6 = (1'd0 + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep6 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.l_start_shuffled, i32 0, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
dv_calc_mb_coordinates___crit_edge_scevgep6_reg <= dv_calc_mb_coordinates___crit_edge_scevgep6;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_scevgep6_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep7 = getelementptr i32* %tbl, i32 %37*/
begin
dv_calc_mb_coordinates___crit_edge_scevgep7 = (arg_tbl + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep7 = getelementptr i32* %tbl, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
dv_calc_mb_coordinates___crit_edge_scevgep7_reg <= dv_calc_mb_coordinates___crit_edge_scevgep7;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_scevgep7_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep8 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf3, i32 0, i32 %37*/
begin
dv_calc_mb_coordinates___crit_edge_scevgep8 = (1'd0 + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep8 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf3, i32 0, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
dv_calc_mb_coordinates___crit_edge_scevgep8_reg <= dv_calc_mb_coordinates___crit_edge_scevgep8;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_scevgep8_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep10 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf1, i32 0, i32 %37*/
begin
dv_calc_mb_coordinates___crit_edge_scevgep10 = (1'd0 + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %scevgep10 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf1, i32 0, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
dv_calc_mb_coordinates___crit_edge_scevgep10_reg <= dv_calc_mb_coordinates___crit_edge_scevgep10;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_scevgep10_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates___crit_edge_tmp11 = dv_calc_mb_coordinates___crit_edge_tmp11_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp11 = mul i32 %37, 54*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp11_reg <= dv_calc_mb_coordinates___crit_edge_tmp11;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp11_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp11 = mul i32 %37, 54*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp11_reg <= dv_calc_mb_coordinates___crit_edge_tmp11;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp11_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp14 = add i32 %tmp13, %tmp11*/
begin
dv_calc_mb_coordinates___crit_edge_tmp14 = (dv_calc_mb_coordinates_0_tmp13_reg + dv_calc_mb_coordinates___crit_edge_tmp11);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp14 = add i32 %tmp13, %tmp11*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp14_reg <= dv_calc_mb_coordinates___crit_edge_tmp14;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp14_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates___crit_edge_tmp15 = dv_calc_mb_coordinates___crit_edge_tmp15_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp15 = mul i32 %37, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp15_reg <= dv_calc_mb_coordinates___crit_edge_tmp15;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp15_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp15 = mul i32 %37, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp15_reg <= dv_calc_mb_coordinates___crit_edge_tmp15;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp15_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp16 = add i32 %tmp15, %slot*/
begin
dv_calc_mb_coordinates___crit_edge_tmp16 = (dv_calc_mb_coordinates___crit_edge_tmp15 + arg_slot);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp16 = add i32 %tmp15, %slot*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_102))
begin
dv_calc_mb_coordinates___crit_edge_tmp16_reg <= dv_calc_mb_coordinates___crit_edge_tmp16;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_tmp16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_tmp16_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates___crit_edge_38 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_103))
begin
dv_calc_mb_coordinates___crit_edge_38_reg <= dv_calc_mb_coordinates___crit_edge_38;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates___crit_edge_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates___crit_edge_38_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %40*/
/*   %41 = icmp slt i32 %tmp16, 90*/
begin
dv_calc_mb_coordinates_40_41 = ($signed(dv_calc_mb_coordinates___crit_edge_tmp16_reg) < $signed(32'd90));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %40*/
/*   %41 = icmp slt i32 %tmp16, 90*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105))
begin
dv_calc_mb_coordinates_40_41_reg <= dv_calc_mb_coordinates_40_41;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_40_41_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %44 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_43_44 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %44 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_43_44_reg <= dv_calc_mb_coordinates_43_44;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_44_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %45 = add i32 %9, %44*/
begin
dv_calc_mb_coordinates_43_45 = (dv_calc_mb_coordinates_0_9_reg + dv_calc_mb_coordinates_43_44);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %45 = add i32 %9, %44*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_43_45_reg <= dv_calc_mb_coordinates_43_45;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_45_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_43_46 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %46 = srem i32 %45, 11*/
dv_calc_mb_coordinates_43_46_reg = dv_calc_mb_coordinates_0_11_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %47 = load i32* %scevgep10, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_43_47 = dv_calc_mb_coordinates_shuf1_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %47 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_43_47_reg <= dv_calc_mb_coordinates_43_47;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_47_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %48 = add i32 %47, %13*/
begin
dv_calc_mb_coordinates_43_48 = (dv_calc_mb_coordinates_43_47 + dv_calc_mb_coordinates_0_13_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %48 = add i32 %47, %13*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_43_48_reg <= dv_calc_mb_coordinates_43_48;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_48_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %49 = add i32 %48, %14*/
begin
dv_calc_mb_coordinates_43_49 = (dv_calc_mb_coordinates_43_48 + dv_calc_mb_coordinates_0_14_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %49 = add i32 %48, %14*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_43_49_reg <= dv_calc_mb_coordinates_43_49;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_49_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_43_50 = dv_calc_mb_coordinates_43_50_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %50 = mul nsw i32 %46, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_50_reg <= dv_calc_mb_coordinates_43_50;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_50_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %43*/
/*   %50 = mul nsw i32 %46, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_50_reg <= dv_calc_mb_coordinates_43_50;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_50_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %51 = add nsw i32 %15, %50*/
begin
dv_calc_mb_coordinates_43_51 = (dv_calc_mb_coordinates_0_15_reg + dv_calc_mb_coordinates_43_50);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %51 = add nsw i32 %15, %50*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_51_reg <= dv_calc_mb_coordinates_43_51;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_51_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %52 = shl i32 %51, 1*/
begin
dv_calc_mb_coordinates_43_52 = (dv_calc_mb_coordinates_43_51 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %52 = shl i32 %51, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_52_reg <= dv_calc_mb_coordinates_43_52;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_52_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %53 = add nsw i32 %52, %16*/
begin
dv_calc_mb_coordinates_43_53 = (dv_calc_mb_coordinates_43_52 + dv_calc_mb_coordinates_0_16_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %53 = add nsw i32 %52, %16*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_53_reg <= dv_calc_mb_coordinates_43_53;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_53_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %54 = shl i32 %53, 9*/
begin
dv_calc_mb_coordinates_43_54 = (dv_calc_mb_coordinates_43_53 <<< (32'd9 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %54 = shl i32 %53, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_54_reg <= dv_calc_mb_coordinates_43_54;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_54_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %43*/
/*   %phitmp4 = add i32 %54, 512*/
begin
dv_calc_mb_coordinates_43_phitmp4 = (dv_calc_mb_coordinates_43_54 + 32'd512);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %phitmp4 = add i32 %54, 512*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141))
begin
dv_calc_mb_coordinates_43_phitmp4_reg <= dv_calc_mb_coordinates_43_phitmp4;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_43_phitmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_43_phitmp4_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd1)))
begin
dv_calc_mb_coordinates_55_x_0 = dv_calc_mb_coordinates___crit_edge_tmp16_reg;
end
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
else if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_x_0 = dv_calc_mb_coordinates___crit_edge_tmp14_reg;
end
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_55_x_0 = dv_calc_mb_coordinates_43_49_reg;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd1)))
begin
dv_calc_mb_coordinates_55_x_0_reg <= dv_calc_mb_coordinates_55_x_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_x_0_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_x_0_reg <= dv_calc_mb_coordinates_55_x_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_x_0_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %55*/
/*   %x.0 = phi i32 [ %tmp14, %42 ], [ %49, %43 ], [ %tmp16, %40 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_x_0_reg <= dv_calc_mb_coordinates_55_x_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_x_0_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd1)))
begin
dv_calc_mb_coordinates_55_y_0 = 32'd0;
end
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
else if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_y_0 = 32'd34304;
end
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_55_y_0 = dv_calc_mb_coordinates_43_phitmp4;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_40_105) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_40_41 == 1'd1)))
begin
dv_calc_mb_coordinates_55_y_0_reg <= dv_calc_mb_coordinates_55_y_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_y_0_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_42_106) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_y_0_reg <= dv_calc_mb_coordinates_55_y_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_y_0_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %55*/
/*   %y.0 = phi i32 [ 34304, %42 ], [ %phitmp4, %43 ], [ 0, %40 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_141) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_55_y_0_reg <= dv_calc_mb_coordinates_55_y_0;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_y_0_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %55*/
/*   %56 = shl i32 %x.0, 1*/
begin
dv_calc_mb_coordinates_55_56 = (dv_calc_mb_coordinates_55_x_0_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %55*/
/*   %56 = shl i32 %x.0, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
dv_calc_mb_coordinates_55_56_reg <= dv_calc_mb_coordinates_55_56;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_56_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %55*/
/*   %57 = or i32 %56, %y.0*/
begin
dv_calc_mb_coordinates_55_57 = (dv_calc_mb_coordinates_55_56 | dv_calc_mb_coordinates_55_y_0_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %55*/
/*   %57 = or i32 %56, %y.0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
dv_calc_mb_coordinates_55_57_reg <= dv_calc_mb_coordinates_55_57;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_55_57_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %59 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_58_59 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %59 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_59_reg <= dv_calc_mb_coordinates_58_59;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_59_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %60 = add i32 %24, %59*/
begin
dv_calc_mb_coordinates_58_60 = (dv_calc_mb_coordinates_0_24_reg + dv_calc_mb_coordinates_58_59);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %60 = add i32 %24, %59*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_60_reg <= dv_calc_mb_coordinates_58_60;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_60_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_58_61 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %61 = srem i32 %60, 10*/
dv_calc_mb_coordinates_58_61_reg = dv_calc_mb_coordinates_0_11_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %62 = load i32* %scevgep10, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_58_62 = dv_calc_mb_coordinates_shuf1_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %62 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_62_reg <= dv_calc_mb_coordinates_58_62;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_62_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %63 = add i32 %62, %13*/
begin
dv_calc_mb_coordinates_58_63 = (dv_calc_mb_coordinates_58_62 + dv_calc_mb_coordinates_0_13_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %63 = add i32 %62, %13*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_63_reg <= dv_calc_mb_coordinates_58_63;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_63_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %64 = add i32 %63, %27*/
begin
dv_calc_mb_coordinates_58_64 = (dv_calc_mb_coordinates_58_63 + dv_calc_mb_coordinates_0_27_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %64 = add i32 %63, %27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_64_reg <= dv_calc_mb_coordinates_58_64;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_64_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_58_65 = dv_calc_mb_coordinates_58_65_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %65 = mul nsw i32 %61, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178))
begin
dv_calc_mb_coordinates_58_65_reg <= dv_calc_mb_coordinates_58_65;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_65_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %58*/
/*   %65 = mul nsw i32 %61, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178))
begin
dv_calc_mb_coordinates_58_65_reg <= dv_calc_mb_coordinates_58_65;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_65_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %66 = add nsw i32 %28, %65*/
begin
dv_calc_mb_coordinates_58_66 = (dv_calc_mb_coordinates_0_28_reg + dv_calc_mb_coordinates_58_65);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %66 = add nsw i32 %28, %65*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178))
begin
dv_calc_mb_coordinates_58_66_reg <= dv_calc_mb_coordinates_58_66;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_66_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %67 = shl i32 %66, 1*/
begin
dv_calc_mb_coordinates_58_67 = (dv_calc_mb_coordinates_58_66 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %67 = shl i32 %66, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178))
begin
dv_calc_mb_coordinates_58_67_reg <= dv_calc_mb_coordinates_58_67;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_67_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %68 = add i32 %30, %67*/
begin
dv_calc_mb_coordinates_58_68 = (dv_calc_mb_coordinates_0_30_reg + dv_calc_mb_coordinates_58_67);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %68 = add i32 %30, %67*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178))
begin
dv_calc_mb_coordinates_58_68_reg <= dv_calc_mb_coordinates_58_68;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_68_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %58*/
/*   %69 = icmp sgt i32 %64, 79*/
begin
dv_calc_mb_coordinates_58_69 = ($signed(dv_calc_mb_coordinates_58_64) > $signed(32'd79));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %69 = icmp sgt i32 %64, 79*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_58_69_reg <= dv_calc_mb_coordinates_58_69;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_58_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_58_69_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %71 = getelementptr inbounds [64 x [2 x i32]]* @dv_calc_mb_coordinates.remap, i32 0, i32 %68, i32 0*/
begin
dv_calc_mb_coordinates_70_71 = (1'd0 + (8 * dv_calc_mb_coordinates_58_68_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %71 = getelementptr inbounds [64 x [2 x i32]]* @dv_calc_mb_coordinates.remap, i32 0, i32 %68, i32 0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_71_reg <= dv_calc_mb_coordinates_70_71;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_71_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_70_72 = dv_calc_mb_coordinates_remap_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180))
begin
dv_calc_mb_coordinates_70_72_reg <= dv_calc_mb_coordinates_70_72;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_72_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %73 = add nsw i32 %64, -80*/
begin
dv_calc_mb_coordinates_70_73 = (dv_calc_mb_coordinates_58_64_reg + -32'd80);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %73 = add nsw i32 %64, -80*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_73_reg <= dv_calc_mb_coordinates_70_73;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_73_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %74 = icmp sgt i32 %68, 59*/
begin
dv_calc_mb_coordinates_70_74 = ($signed(dv_calc_mb_coordinates_58_68_reg) > $signed(32'd59));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %74 = icmp sgt i32 %68, 59*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_74_reg <= dv_calc_mb_coordinates_70_74;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_74_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %75 = zext i1 %74 to i32*/
begin
dv_calc_mb_coordinates_70_75 = dv_calc_mb_coordinates_70_74;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %75 = zext i1 %74 to i32*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_75_reg <= dv_calc_mb_coordinates_70_75;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_75_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %76 = shl i32 %73, %75*/
begin
dv_calc_mb_coordinates_70_76 = (dv_calc_mb_coordinates_70_73 <<< (dv_calc_mb_coordinates_70_75 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %76 = shl i32 %73, %75*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_76_reg <= dv_calc_mb_coordinates_70_76;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_76_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %77 = add nsw i32 %72, %76*/
begin
dv_calc_mb_coordinates_70_77 = (dv_calc_mb_coordinates_70_72 + dv_calc_mb_coordinates_70_76_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %77 = add nsw i32 %72, %76*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180))
begin
dv_calc_mb_coordinates_70_77_reg <= dv_calc_mb_coordinates_70_77;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_77_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %78 = getelementptr inbounds [64 x [2 x i32]]* @dv_calc_mb_coordinates.remap, i32 0, i32 %68, i32 1*/
begin
dv_calc_mb_coordinates_70_78 = (1'd0 + ((8 * dv_calc_mb_coordinates_58_68_reg) + (4 * 32'd1)));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %78 = getelementptr inbounds [64 x [2 x i32]]* @dv_calc_mb_coordinates.remap, i32 0, i32 %68, i32 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_70_78_reg <= dv_calc_mb_coordinates_70_78;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_78_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %70*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_70_79 = dv_calc_mb_coordinates_remap_out_b;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %70*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180))
begin
dv_calc_mb_coordinates_70_79_reg <= dv_calc_mb_coordinates_70_79;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_70_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_70_79_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %80*/
/*   %x.1 = phi i32 [ %77, %70 ], [ %64, %58 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd0)))
begin
dv_calc_mb_coordinates_80_x_1 = dv_calc_mb_coordinates_58_64_reg;
end
/* dv_calc_mb_coordinates: %80*/
/*   %x.1 = phi i32 [ %77, %70 ], [ %64, %58 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_80_x_1 = dv_calc_mb_coordinates_70_77;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %80*/
/*   %x.1 = phi i32 [ %77, %70 ], [ %64, %58 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd0)))
begin
dv_calc_mb_coordinates_80_x_1_reg <= dv_calc_mb_coordinates_80_x_1;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_x_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_x_1_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %80*/
/*   %x.1 = phi i32 [ %77, %70 ], [ %64, %58 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_80_x_1_reg <= dv_calc_mb_coordinates_80_x_1;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_x_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_x_1_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %80*/
/*   %y.1 = phi i32 [ %79, %70 ], [ %68, %58 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd0)))
begin
dv_calc_mb_coordinates_80_y_1 = dv_calc_mb_coordinates_58_68;
end
/* dv_calc_mb_coordinates: %80*/
/*   %y.1 = phi i32 [ %79, %70 ], [ %68, %58 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_80_y_1 = dv_calc_mb_coordinates_70_79;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %80*/
/*   %y.1 = phi i32 [ %79, %70 ], [ %68, %58 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_178) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_58_69_reg == 1'd0)))
begin
dv_calc_mb_coordinates_80_y_1_reg <= dv_calc_mb_coordinates_80_y_1;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_y_1_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %80*/
/*   %y.1 = phi i32 [ %79, %70 ], [ %68, %58 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_180) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_80_y_1_reg <= dv_calc_mb_coordinates_80_y_1;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_y_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_y_1_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %80*/
/*   %81 = shl i32 %x.1, 1*/
begin
dv_calc_mb_coordinates_80_81 = (dv_calc_mb_coordinates_80_x_1_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %80*/
/*   %81 = shl i32 %x.1, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
dv_calc_mb_coordinates_80_81_reg <= dv_calc_mb_coordinates_80_81;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_81_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %80*/
/*   %82 = shl i32 %y.1, 9*/
begin
dv_calc_mb_coordinates_80_82 = (dv_calc_mb_coordinates_80_y_1_reg <<< (32'd9 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %80*/
/*   %82 = shl i32 %y.1, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
dv_calc_mb_coordinates_80_82_reg <= dv_calc_mb_coordinates_80_82;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_82_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %80*/
/*   %83 = or i32 %82, %81*/
begin
dv_calc_mb_coordinates_80_83 = (dv_calc_mb_coordinates_80_82 | dv_calc_mb_coordinates_80_81);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %80*/
/*   %83 = or i32 %82, %81*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
dv_calc_mb_coordinates_80_83_reg <= dv_calc_mb_coordinates_80_83;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_80_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_80_83_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %scevgep9 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf2, i32 0, i32 %37*/
begin
dv_calc_mb_coordinates_84_scevgep9 = (1'd0 + (4 * dv_calc_mb_coordinates___crit_edge_37_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %scevgep9 = getelementptr [5 x i32]* @dv_calc_mb_coordinates.shuf2, i32 0, i32 %37*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183))
begin
dv_calc_mb_coordinates_84_scevgep9_reg <= dv_calc_mb_coordinates_84_scevgep9;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_scevgep9_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %85 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_84_85 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %85 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_84_85_reg <= dv_calc_mb_coordinates_84_85;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_85_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %86 = add i32 %24, %85*/
begin
dv_calc_mb_coordinates_84_86 = (dv_calc_mb_coordinates_0_24_reg + dv_calc_mb_coordinates_84_85);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %86 = add i32 %24, %85*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_84_86_reg <= dv_calc_mb_coordinates_84_86;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_86_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_84_87 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %87 = srem i32 %86, 10*/
dv_calc_mb_coordinates_84_87_reg = dv_calc_mb_coordinates_105_112_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %88 = and i32 %87, 1*/
begin
dv_calc_mb_coordinates_84_88 = (dv_calc_mb_coordinates_84_87 & 32'd1);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %88 = and i32 %87, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_84_88_reg <= dv_calc_mb_coordinates_84_88;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_88_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %tmp = sub i32 0, %88*/
begin
dv_calc_mb_coordinates_84_tmp = (32'd0 - dv_calc_mb_coordinates_84_88);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %tmp = sub i32 0, %88*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_84_tmp_reg <= dv_calc_mb_coordinates_84_tmp;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_tmp_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %89 = and i32 %tmp, 3*/
begin
dv_calc_mb_coordinates_84_89 = (dv_calc_mb_coordinates_84_tmp & 32'd3);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %89 = and i32 %tmp, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_84_89_reg <= dv_calc_mb_coordinates_84_89;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_89_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %90 = add nsw i32 %26, %89*/
begin
dv_calc_mb_coordinates_84_90 = (dv_calc_mb_coordinates_0_26_reg + dv_calc_mb_coordinates_84_89);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %90 = add nsw i32 %26, %89*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_84_90_reg <= dv_calc_mb_coordinates_84_90;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_90_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %91 = load i32* %scevgep9, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_84_91 = dv_calc_mb_coordinates_shuf2_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %91 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_84_91_reg <= dv_calc_mb_coordinates_84_91;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_91_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_84_92 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %92 = srem i32 %90, 6*/
dv_calc_mb_coordinates_84_92_reg = dv_calc_mb_coordinates_105_112_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %93 = add i32 %91, %31*/
begin
dv_calc_mb_coordinates_84_93 = (dv_calc_mb_coordinates_84_91 + dv_calc_mb_coordinates_0_31_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %93 = add i32 %91, %31*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_84_93_reg <= dv_calc_mb_coordinates_84_93;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_93_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %94 = add i32 %93, %92*/
begin
dv_calc_mb_coordinates_84_94 = (dv_calc_mb_coordinates_84_93_reg + dv_calc_mb_coordinates_84_92);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %94 = add i32 %93, %92*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_84_94_reg <= dv_calc_mb_coordinates_84_94;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_94_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %95 = getelementptr inbounds [10 x i32]* @dv_calc_mb_coordinates.l_start, i32 0, i32 %87*/
begin
dv_calc_mb_coordinates_84_95 = (1'd0 + (4 * dv_calc_mb_coordinates_84_87));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %95 = getelementptr inbounds [10 x i32]* @dv_calc_mb_coordinates.l_start, i32 0, i32 %87*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_84_95_reg <= dv_calc_mb_coordinates_84_95;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_95_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_84_96 = dv_calc_mb_coordinates_l_start_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_217))
begin
dv_calc_mb_coordinates_84_96_reg <= dv_calc_mb_coordinates_84_96;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_96_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_84_97 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %97 = sdiv i32 %90, 6*/
dv_calc_mb_coordinates_84_97_reg = dv_calc_mb_coordinates_0_21_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %98 = add i32 %96, %32*/
begin
dv_calc_mb_coordinates_84_98 = (dv_calc_mb_coordinates_84_96 + dv_calc_mb_coordinates_0_32_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %98 = add i32 %96, %32*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_217))
begin
dv_calc_mb_coordinates_84_98_reg <= dv_calc_mb_coordinates_84_98;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_98_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %99 = add i32 %98, %97*/
begin
dv_calc_mb_coordinates_84_99 = (dv_calc_mb_coordinates_84_98_reg + dv_calc_mb_coordinates_84_97);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %99 = add i32 %98, %97*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_84_99_reg <= dv_calc_mb_coordinates_84_99;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_99_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %100 = shl i32 %94, 1*/
begin
dv_calc_mb_coordinates_84_100 = (dv_calc_mb_coordinates_84_94 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %100 = shl i32 %94, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_84_100_reg <= dv_calc_mb_coordinates_84_100;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_100_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %101 = shl i32 %99, 9*/
begin
dv_calc_mb_coordinates_84_101 = (dv_calc_mb_coordinates_84_99 <<< (32'd9 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %101 = shl i32 %99, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_84_101_reg <= dv_calc_mb_coordinates_84_101;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_101_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %84*/
/*   %102 = or i32 %101, %100*/
begin
dv_calc_mb_coordinates_84_102 = (dv_calc_mb_coordinates_84_101 | dv_calc_mb_coordinates_84_100);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %84*/
/*   %102 = or i32 %101, %100*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_84_102_reg <= dv_calc_mb_coordinates_84_102;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_84_102_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_103_104 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_252))
begin
dv_calc_mb_coordinates_103_104_reg <= dv_calc_mb_coordinates_103_104;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_103_104_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %106 = load i32* %scevgep8, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_105_106 = dv_calc_mb_coordinates_shuf3_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %106 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_106_reg <= dv_calc_mb_coordinates_105_106;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_106_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %107 = add nsw i32 %34, %106*/
begin
dv_calc_mb_coordinates_105_107 = (dv_calc_mb_coordinates_0_34_reg + dv_calc_mb_coordinates_105_106);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %107 = add nsw i32 %34, %106*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_107_reg <= dv_calc_mb_coordinates_105_107;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_107_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %108 = load i32* %35, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_105_108 = dv_calc_mb_coordinates_serpent1_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %108 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_108_reg <= dv_calc_mb_coordinates_105_108;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_108_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %109 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_105_109 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %109 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_109_reg <= dv_calc_mb_coordinates_105_109;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_109_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %110 = add nsw i32 %109, %seq*/
begin
dv_calc_mb_coordinates_105_110 = (dv_calc_mb_coordinates_105_109 + arg_seq);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %110 = add nsw i32 %109, %seq*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_110_reg <= dv_calc_mb_coordinates_105_110;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_110_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_105_111 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_255))
begin
dv_calc_mb_coordinates_105_111_reg <= dv_calc_mb_coordinates_105_111;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_111_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_105_112 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %112 = srem i32 %110, %111*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287))
begin
dv_calc_mb_coordinates_105_112_reg <= dv_calc_mb_coordinates_105_112;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_112_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %105*/
/*   %112 = srem i32 %110, %111*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287))
begin
dv_calc_mb_coordinates_105_112_reg <= dv_calc_mb_coordinates_105_112;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_112_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %84*/
/*   %87 = srem i32 %86, 10*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_105_112_reg <= dv_calc_mb_coordinates_84_87;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_112_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %84*/
/*   %92 = srem i32 %90, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
dv_calc_mb_coordinates_105_112_reg <= dv_calc_mb_coordinates_84_92;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_84_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_112_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %113 = shl i32 %112, 1*/
begin
dv_calc_mb_coordinates_105_113 = (dv_calc_mb_coordinates_105_112 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %113 = shl i32 %112, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287))
begin
dv_calc_mb_coordinates_105_113_reg <= dv_calc_mb_coordinates_105_113;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_113_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %114 = add nsw i32 %113, %chan*/
begin
dv_calc_mb_coordinates_105_114 = (dv_calc_mb_coordinates_105_113 + arg_chan);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %114 = add nsw i32 %113, %chan*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_287))
begin
dv_calc_mb_coordinates_105_114_reg <= dv_calc_mb_coordinates_105_114;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_114_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_105_115 = dv_calc_mb_coordinates_105_115_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %115 = mul nsw i32 %114, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
dv_calc_mb_coordinates_105_115_reg <= dv_calc_mb_coordinates_105_115;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_115_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %105*/
/*   %115 = mul nsw i32 %114, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
dv_calc_mb_coordinates_105_115_reg <= dv_calc_mb_coordinates_105_115;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_115_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %116 = add nsw i32 %115, %108*/
begin
dv_calc_mb_coordinates_105_116 = (dv_calc_mb_coordinates_105_115 + dv_calc_mb_coordinates_105_108_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %116 = add nsw i32 %115, %108*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
dv_calc_mb_coordinates_105_116_reg <= dv_calc_mb_coordinates_105_116;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_116_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %117 = shl i32 %107, 1*/
begin
dv_calc_mb_coordinates_105_117 = (dv_calc_mb_coordinates_105_107 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %117 = shl i32 %107, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_254))
begin
dv_calc_mb_coordinates_105_117_reg <= dv_calc_mb_coordinates_105_117;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_117_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %118 = shl i32 %116, 8*/
begin
dv_calc_mb_coordinates_105_118 = (dv_calc_mb_coordinates_105_116 <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %118 = shl i32 %116, 8*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
dv_calc_mb_coordinates_105_118_reg <= dv_calc_mb_coordinates_105_118;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_118_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %105*/
/*   %119 = or i32 %118, %117*/
begin
dv_calc_mb_coordinates_105_119 = (dv_calc_mb_coordinates_105_118 | dv_calc_mb_coordinates_105_117_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %119 = or i32 %118, %117*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
dv_calc_mb_coordinates_105_119_reg <= dv_calc_mb_coordinates_105_119;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_105_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_105_119_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %121 = load i32* %scevgep8, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_120_121 = dv_calc_mb_coordinates_shuf3_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %121 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_121_reg <= dv_calc_mb_coordinates_120_121;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_121_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %122 = add nsw i32 %34, %121*/
begin
dv_calc_mb_coordinates_120_122 = (dv_calc_mb_coordinates_0_34_reg + dv_calc_mb_coordinates_120_121);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %122 = add nsw i32 %34, %121*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_122_reg <= dv_calc_mb_coordinates_120_122;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_122_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %123 = load i32* %35, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_120_123 = dv_calc_mb_coordinates_serpent1_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %123 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_123_reg <= dv_calc_mb_coordinates_120_123;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_123_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %124 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_120_124 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %124 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_124_reg <= dv_calc_mb_coordinates_120_124;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_124_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %125 = add nsw i32 %124, %seq*/
begin
dv_calc_mb_coordinates_120_125 = (dv_calc_mb_coordinates_120_124 + arg_seq);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %125 = add nsw i32 %124, %seq*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_125_reg <= dv_calc_mb_coordinates_120_125;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_125_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_120_126 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_292))
begin
dv_calc_mb_coordinates_120_126_reg <= dv_calc_mb_coordinates_120_126;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_126_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_120_127 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %127 = srem i32 %125, %126*/
dv_calc_mb_coordinates_120_127_reg = dv_calc_mb_coordinates_0_11_reg;
end
always @(*) begin
dv_calc_mb_coordinates_120_128 = dv_calc_mb_coordinates_120_128_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %128 = mul nsw i32 %127, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
dv_calc_mb_coordinates_120_128_reg <= dv_calc_mb_coordinates_120_128;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_128_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %120*/
/*   %128 = mul nsw i32 %127, 3*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
dv_calc_mb_coordinates_120_128_reg <= dv_calc_mb_coordinates_120_128;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_128_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %129 = add nsw i32 %128, %123*/
begin
dv_calc_mb_coordinates_120_129 = (dv_calc_mb_coordinates_120_128 + dv_calc_mb_coordinates_120_123_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %129 = add nsw i32 %128, %123*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
dv_calc_mb_coordinates_120_129_reg <= dv_calc_mb_coordinates_120_129;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_129_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %130 = shl i32 %122, 1*/
begin
dv_calc_mb_coordinates_120_130 = (dv_calc_mb_coordinates_120_122 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %130 = shl i32 %122, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_291))
begin
dv_calc_mb_coordinates_120_130_reg <= dv_calc_mb_coordinates_120_130;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_130_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %131 = shl i32 %129, 9*/
begin
dv_calc_mb_coordinates_120_131 = (dv_calc_mb_coordinates_120_129 <<< (32'd9 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %131 = shl i32 %129, 9*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
dv_calc_mb_coordinates_120_131_reg <= dv_calc_mb_coordinates_120_131;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_131_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %120*/
/*   %132 = or i32 %131, %130*/
begin
dv_calc_mb_coordinates_120_132 = (dv_calc_mb_coordinates_120_131 | dv_calc_mb_coordinates_120_130_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %132 = or i32 %131, %130*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
dv_calc_mb_coordinates_120_132_reg <= dv_calc_mb_coordinates_120_132;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_120_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_120_132_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %133*/
/*   %134 = load i32* %scevgep, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_133_134 = dv_calc_mb_coordinates_off_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %133*/
/*   %134 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_328))
begin
dv_calc_mb_coordinates_133_134_reg <= dv_calc_mb_coordinates_133_134;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_133_134_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %133*/
/*   %135 = add nsw i32 %134, %seq*/
begin
dv_calc_mb_coordinates_133_135 = (dv_calc_mb_coordinates_133_134 + arg_seq);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %133*/
/*   %135 = add nsw i32 %134, %seq*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_328))
begin
dv_calc_mb_coordinates_133_135_reg <= dv_calc_mb_coordinates_133_135;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_133_135_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_133_136 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_329))
begin
dv_calc_mb_coordinates_133_136_reg <= dv_calc_mb_coordinates_133_136;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_133_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_133_136_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_133_137 = dv_calc_mb_coordinates_signed_modulus_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %133*/
/*   %137 = srem i32 %135, %136*/
dv_calc_mb_coordinates_133_137_reg = dv_calc_mb_coordinates_0_11_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %133*/
/*   %138 = icmp eq i32 %37, 1*/
begin
dv_calc_mb_coordinates_133_138 = (dv_calc_mb_coordinates___crit_edge_37_reg == 32'd1);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %133*/
/*   %138 = icmp eq i32 %37, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
dv_calc_mb_coordinates_133_138_reg <= dv_calc_mb_coordinates_133_138;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_133_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_133_138_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %139*/
/*   %140 = icmp eq i32 %37, 2*/
begin
dv_calc_mb_coordinates_139_140 = (dv_calc_mb_coordinates___crit_edge_37_reg == 32'd2);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %139*/
/*   %140 = icmp eq i32 %37, 2*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362))
begin
dv_calc_mb_coordinates_139_140_reg <= dv_calc_mb_coordinates_139_140;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_139_140_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %139*/
/*   %phitmp = select i1 %140, i32 3, i32 0*/
begin
dv_calc_mb_coordinates_139_phitmp = (dv_calc_mb_coordinates_139_140 ? 32'd3 : 32'd0);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %139*/
/*   %phitmp = select i1 %140, i32 3, i32 0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362))
begin
dv_calc_mb_coordinates_139_phitmp_reg <= dv_calc_mb_coordinates_139_phitmp;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_139_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_139_phitmp_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %142 = phi i32 [ 3, %133 ], [ %phitmp, %139 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_133_138_reg == 1'd1)))
begin
dv_calc_mb_coordinates_141_142 = 32'd3;
end
/* dv_calc_mb_coordinates: %141*/
/*   %142 = phi i32 [ 3, %133 ], [ %phitmp, %139 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_141_142 = dv_calc_mb_coordinates_139_phitmp;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %142 = phi i32 [ 3, %133 ], [ %phitmp, %139 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_361) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_133_138_reg == 1'd1)))
begin
dv_calc_mb_coordinates_141_142_reg <= dv_calc_mb_coordinates_141_142;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_142_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %141*/
/*   %142 = phi i32 [ 3, %133 ], [ %phitmp, %139 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_139_362) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_141_142_reg <= dv_calc_mb_coordinates_141_142;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_142_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %143 = add nsw i32 %142, %slot*/
begin
dv_calc_mb_coordinates_141_143 = (dv_calc_mb_coordinates_141_142_reg + arg_slot);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %143 = add nsw i32 %142, %slot*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363))
begin
dv_calc_mb_coordinates_141_143_reg <= dv_calc_mb_coordinates_141_143;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_143_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %144 = load i32* %scevgep6, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_141_144 = dv_calc_mb_coordinates_l_start_shuffled_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %144 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_141_144_reg <= dv_calc_mb_coordinates_141_144;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_144_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_141_145 = dv_calc_mb_coordinates_signed_divide_32_0;
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %145 = sdiv i32 %143, 6*/
dv_calc_mb_coordinates_141_145_reg = dv_calc_mb_coordinates_0_21_reg;
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %146 = add nsw i32 %145, %144*/
begin
dv_calc_mb_coordinates_141_146 = (dv_calc_mb_coordinates_141_145 + dv_calc_mb_coordinates_141_144_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %146 = add nsw i32 %145, %144*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395))
begin
dv_calc_mb_coordinates_141_146_reg <= dv_calc_mb_coordinates_141_146;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_146_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %147 = getelementptr inbounds [30 x i32]* @dv_calc_mb_coordinates.serpent2, i32 0, i32 %143*/
begin
dv_calc_mb_coordinates_141_147 = (1'd0 + (4 * dv_calc_mb_coordinates_141_143_reg));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %147 = getelementptr inbounds [30 x i32]* @dv_calc_mb_coordinates.serpent2, i32 0, i32 %143*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_141_147_reg <= dv_calc_mb_coordinates_141_147;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_147_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
begin
dv_calc_mb_coordinates_141_148 = dv_calc_mb_coordinates_serpent2_out_a;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_365))
begin
dv_calc_mb_coordinates_141_148_reg <= dv_calc_mb_coordinates_141_148;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_148_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_141_149 = dv_calc_mb_coordinates_141_149_stage0_reg;
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %149 = mul nsw i32 %137, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_141_149_reg <= dv_calc_mb_coordinates_141_149;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_149_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %141*/
/*   %149 = mul nsw i32 %137, 6*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_141_149_reg <= dv_calc_mb_coordinates_141_149;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_149_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %150 = add nsw i32 %148, %149*/
begin
dv_calc_mb_coordinates_141_150 = (dv_calc_mb_coordinates_141_148 + dv_calc_mb_coordinates_141_149_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %150 = add nsw i32 %148, %149*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_365))
begin
dv_calc_mb_coordinates_141_150_reg <= dv_calc_mb_coordinates_141_150;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_150_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %141*/
/*   %151 = icmp sgt i32 %146, 21*/
begin
dv_calc_mb_coordinates_141_151 = ($signed(dv_calc_mb_coordinates_141_146) > $signed(32'd21));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %151 = icmp sgt i32 %146, 21*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395))
begin
dv_calc_mb_coordinates_141_151_reg <= dv_calc_mb_coordinates_141_151;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_141_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_141_151_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %152*/
/*   %153 = shl nsw i32 %150, 1*/
begin
dv_calc_mb_coordinates_152_153 = (dv_calc_mb_coordinates_141_150_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %152*/
/*   %153 = shl nsw i32 %150, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396))
begin
dv_calc_mb_coordinates_152_153_reg <= dv_calc_mb_coordinates_152_153;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_152_153_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %152*/
/*   %154 = sub nsw i32 %153, %149*/
begin
dv_calc_mb_coordinates_152_154 = (dv_calc_mb_coordinates_152_153 - dv_calc_mb_coordinates_141_149_reg);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %152*/
/*   %154 = sub nsw i32 %153, %149*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396))
begin
dv_calc_mb_coordinates_152_154_reg <= dv_calc_mb_coordinates_152_154;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_152_154_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %155*/
/*   %y.2 = phi i32 [ %154, %152 ], [ %150, %141 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_141_151 == 1'd0)))
begin
dv_calc_mb_coordinates_155_y_2 = dv_calc_mb_coordinates_141_150_reg;
end
/* dv_calc_mb_coordinates: %155*/
/*   %y.2 = phi i32 [ %154, %152 ], [ %150, %141 ]*/
else /* if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396) & (memory_controller_waitrequest == 1'd0))) */
begin
dv_calc_mb_coordinates_155_y_2 = dv_calc_mb_coordinates_152_154;
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %155*/
/*   %y.2 = phi i32 [ %154, %152 ], [ %150, %141 ]*/
if ((((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_395) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_141_151 == 1'd0)))
begin
dv_calc_mb_coordinates_155_y_2_reg <= dv_calc_mb_coordinates_155_y_2;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_155_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_155_y_2_reg"); $finish; end
end
/* dv_calc_mb_coordinates: %155*/
/*   %y.2 = phi i32 [ %154, %152 ], [ %150, %141 ]*/
if (((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_152_396) & (memory_controller_waitrequest == 1'd0)))
begin
dv_calc_mb_coordinates_155_y_2_reg <= dv_calc_mb_coordinates_155_y_2;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_155_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_155_y_2_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %155*/
/*   %156 = shl i32 %146, 2*/
begin
dv_calc_mb_coordinates_155_156 = (dv_calc_mb_coordinates_141_146_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %155*/
/*   %156 = shl i32 %146, 2*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
dv_calc_mb_coordinates_155_156_reg <= dv_calc_mb_coordinates_155_156;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_155_156_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %155*/
/*   %157 = shl i32 %y.2, 8*/
begin
dv_calc_mb_coordinates_155_157 = (dv_calc_mb_coordinates_155_y_2_reg <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %155*/
/*   %157 = shl i32 %y.2, 8*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
dv_calc_mb_coordinates_155_157_reg <= dv_calc_mb_coordinates_155_157;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_155_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_155_157_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %155*/
/*   %158 = or i32 %157, %156*/
begin
dv_calc_mb_coordinates_155_158 = (dv_calc_mb_coordinates_155_157 | dv_calc_mb_coordinates_155_156);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %155*/
/*   %158 = or i32 %157, %156*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
dv_calc_mb_coordinates_155_158_reg <= dv_calc_mb_coordinates_155_158;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_155_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_155_158_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %159*/
/*   %160 = add nsw i32 %37, 1*/
begin
dv_calc_mb_coordinates_159_160 = (dv_calc_mb_coordinates___crit_edge_37_reg + 32'd1);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %159*/
/*   %160 = add nsw i32 %37, 1*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399))
begin
dv_calc_mb_coordinates_159_160_reg <= dv_calc_mb_coordinates_159_160;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_159_160_reg"); $finish; end
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %159*/
/*   %exitcond = icmp eq i32 %160, 5*/
begin
dv_calc_mb_coordinates_159_exitcond = (dv_calc_mb_coordinates_159_160 == 32'd5);
end
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %159*/
/*   %exitcond = icmp eq i32 %160, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_159_399))
begin
dv_calc_mb_coordinates_159_exitcond_reg <= dv_calc_mb_coordinates_159_exitcond;
if (reset == 1'b0 && ^(dv_calc_mb_coordinates_159_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_159_exitcond_reg"); $finish; end
end
end
always @(*) begin
dv_calc_mb_coordinates_off_address_a = 1'd0;
/* dv_calc_mb_coordinates: %43*/
/*   %44 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %58*/
/*   %59 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %84*/
/*   %85 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %105*/
/*   %109 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %120*/
/*   %124 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %133*/
/*   %134 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
dv_calc_mb_coordinates_off_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep_reg >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %43*/
/*   %44 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %58*/
/*   %59 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %84*/
/*   %85 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %105*/
/*   %109 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %120*/
/*   %124 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %133*/
/*   %134 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
dv_calc_mb_coordinates_off_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf1_address_a = 1'd0;
/* dv_calc_mb_coordinates: %43*/
/*   %47 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107))
begin
dv_calc_mb_coordinates_shuf1_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep10_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %58*/
/*   %62 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144))
begin
dv_calc_mb_coordinates_shuf1_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep10_reg >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf1_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %43*/
/*   %47 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_107))
begin
dv_calc_mb_coordinates_shuf1_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %58*/
/*   %62 = load i32* %scevgep10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_144))
begin
dv_calc_mb_coordinates_shuf1_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf2_address_a = 1'd0;
/* dv_calc_mb_coordinates: %84*/
/*   %91 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183))
begin
dv_calc_mb_coordinates_shuf2_address_a = (dv_calc_mb_coordinates_84_scevgep9 >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf2_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %84*/
/*   %91 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_183))
begin
dv_calc_mb_coordinates_shuf2_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf3_address_a = 1'd0;
/* dv_calc_mb_coordinates: %105*/
/*   %106 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_shuf3_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep8_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %120*/
/*   %121 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_shuf3_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep8_reg >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_shuf3_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %105*/
/*   %106 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_shuf3_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %120*/
/*   %121 = load i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_shuf3_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_l_start_address_a = 1'd0;
/* dv_calc_mb_coordinates: %84*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_l_start_address_a = (dv_calc_mb_coordinates_84_95 >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_l_start_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %84*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_l_start_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_l_start_shuffled_address_a = 1'd0;
/* dv_calc_mb_coordinates: %141*/
/*   %144 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363))
begin
dv_calc_mb_coordinates_l_start_shuffled_address_a = (dv_calc_mb_coordinates___crit_edge_scevgep6_reg >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_l_start_shuffled_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %141*/
/*   %144 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363))
begin
dv_calc_mb_coordinates_l_start_shuffled_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_serpent1_address_a = 1'd0;
/* dv_calc_mb_coordinates: %105*/
/*   %108 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_serpent1_address_a = (dv_calc_mb_coordinates_0_35_reg >>> 3'd2);
end
/* dv_calc_mb_coordinates: %120*/
/*   %123 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_serpent1_address_a = (dv_calc_mb_coordinates_0_35_reg >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_serpent1_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %105*/
/*   %108 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
dv_calc_mb_coordinates_serpent1_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %120*/
/*   %123 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
dv_calc_mb_coordinates_serpent1_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_serpent2_address_a = 1'd0;
/* dv_calc_mb_coordinates: %141*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_serpent2_address_a = (dv_calc_mb_coordinates_141_147 >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_serpent2_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %141*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_364))
begin
dv_calc_mb_coordinates_serpent2_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_remap_address_a = 1'd0;
/* dv_calc_mb_coordinates: %70*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_remap_address_a = (dv_calc_mb_coordinates_70_71 >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_remap_write_enable_a = 1'd0;
/* dv_calc_mb_coordinates: %70*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_remap_write_enable_a = 1'd0;
end
end
always @(*) begin
dv_calc_mb_coordinates_remap_address_b = 1'd0;
/* dv_calc_mb_coordinates: %70*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_remap_address_b = (dv_calc_mb_coordinates_70_78 >>> 3'd2);
end
end
always @(*) begin
dv_calc_mb_coordinates_remap_write_enable_b = 1'd0;
/* dv_calc_mb_coordinates: %70*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_70_179))
begin
dv_calc_mb_coordinates_remap_write_enable_b = 1'd0;
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %21 = sdiv i32 %seq, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = arg_seq;
end
/* dv_calc_mb_coordinates: %0*/
/*   %34 = sdiv i32 %slot, 3*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = arg_slot;
end
/* dv_calc_mb_coordinates: %0*/
/*   %10 = sdiv i32 %5, 11*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_0_5;
end
/* dv_calc_mb_coordinates: %0*/
/*   %25 = sdiv i32 %20, 5*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_4))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_0_20_reg;
end
/* dv_calc_mb_coordinates: %0*/
/*   %15 = sdiv i32 %11, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_0_11;
end
/* dv_calc_mb_coordinates: %0*/
/*   %28 = sdiv i32 %26, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_0_26;
end
/* dv_calc_mb_coordinates: %84*/
/*   %97 = sdiv i32 %90, 6*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_84_90;
end
/* dv_calc_mb_coordinates: %141*/
/*   %145 = sdiv i32 %143, 6*/
else /* if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363)) */
begin
dv_calc_mb_coordinates_signed_divide_32_0_op0 = dv_calc_mb_coordinates_141_143;
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %21 = sdiv i32 %seq, 5*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_1))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd5;
end
/* dv_calc_mb_coordinates: %0*/
/*   %34 = sdiv i32 %slot, 3*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_2))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd3;
end
/* dv_calc_mb_coordinates: %0*/
/*   %10 = sdiv i32 %5, 11*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_3))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd11;
end
/* dv_calc_mb_coordinates: %0*/
/*   %25 = sdiv i32 %20, 5*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_4))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd5;
end
/* dv_calc_mb_coordinates: %0*/
/*   %15 = sdiv i32 %11, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd9;
end
/* dv_calc_mb_coordinates: %0*/
/*   %28 = sdiv i32 %26, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd9;
end
/* dv_calc_mb_coordinates: %84*/
/*   %97 = sdiv i32 %90, 6*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd6;
end
/* dv_calc_mb_coordinates: %141*/
/*   %145 = sdiv i32 %143, 6*/
else /* if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_141_363)) */
begin
dv_calc_mb_coordinates_signed_divide_32_0_op1 = 32'd6;
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_10_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_10_out = lpm_divide_dv_calc_mb_coordinates_0_10_temp_out;
end
always @(*) begin
dv_calc_mb_coordinates_signed_divide_32_0 = lpm_divide_dv_calc_mb_coordinates_0_10_out;
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %11 = srem i32 %10, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_0_10;
end
/* dv_calc_mb_coordinates: %0*/
/*   %26 = srem i32 %25, 27*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_0_25;
end
/* dv_calc_mb_coordinates: %0*/
/*   %14 = srem i32 %11, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_0_11;
end
/* dv_calc_mb_coordinates: %0*/
/*   %27 = srem i32 %26, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_0_26;
end
/* dv_calc_mb_coordinates: %43*/
/*   %46 = srem i32 %45, 11*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_43_45;
end
/* dv_calc_mb_coordinates: %58*/
/*   %61 = srem i32 %60, 10*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_58_60;
end
/* dv_calc_mb_coordinates: %84*/
/*   %87 = srem i32 %86, 10*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_84_86;
end
/* dv_calc_mb_coordinates: %84*/
/*   %92 = srem i32 %90, 6*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_84_90;
end
/* dv_calc_mb_coordinates: %105*/
/*   %112 = srem i32 %110, %111*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_255))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_105_110_reg;
end
/* dv_calc_mb_coordinates: %120*/
/*   %127 = srem i32 %125, %126*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_292))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_120_125_reg;
end
/* dv_calc_mb_coordinates: %133*/
/*   %137 = srem i32 %135, %136*/
else /* if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_329)) */
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op0 = dv_calc_mb_coordinates_133_135_reg;
end
end
always @(*) begin
/* dv_calc_mb_coordinates: %0*/
/*   %11 = srem i32 %10, 27*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_35))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd27;
end
/* dv_calc_mb_coordinates: %0*/
/*   %26 = srem i32 %25, 27*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_36))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd27;
end
/* dv_calc_mb_coordinates: %0*/
/*   %14 = srem i32 %11, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_67))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd9;
end
/* dv_calc_mb_coordinates: %0*/
/*   %27 = srem i32 %26, 9*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_0_68))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd9;
end
/* dv_calc_mb_coordinates: %43*/
/*   %46 = srem i32 %45, 11*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_43_108))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd11;
end
/* dv_calc_mb_coordinates: %58*/
/*   %61 = srem i32 %60, 10*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_58_145))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd10;
end
/* dv_calc_mb_coordinates: %84*/
/*   %87 = srem i32 %86, 10*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_184))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd10;
end
/* dv_calc_mb_coordinates: %84*/
/*   %92 = srem i32 %90, 6*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_216))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = 32'd6;
end
/* dv_calc_mb_coordinates: %105*/
/*   %112 = srem i32 %110, %111*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_255))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = dv_calc_mb_coordinates_105_111;
end
/* dv_calc_mb_coordinates: %120*/
/*   %127 = srem i32 %125, %126*/
else if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_292))
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = dv_calc_mb_coordinates_120_126;
end
/* dv_calc_mb_coordinates: %133*/
/*   %137 = srem i32 %135, %136*/
else /* if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_329)) */
begin
dv_calc_mb_coordinates_signed_modulus_32_0_op1 = dv_calc_mb_coordinates_133_136;
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_11_out = lpm_divide_dv_calc_mb_coordinates_0_11_temp_out;
end
always @(*) begin
dv_calc_mb_coordinates_signed_modulus_32_0 = lpm_divide_dv_calc_mb_coordinates_0_11_out;
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %2 = mul nsw i32 %chan, 11*/
if ((lpm_mult_dv_calc_mb_coordinates_0_2_en == 1'd1))
begin
dv_calc_mb_coordinates_0_2_stage0_reg <= (arg_chan * 32'd11);
end
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_0_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %17 = mul nsw i32 %chan, 10*/
if ((lpm_mult_dv_calc_mb_coordinates_0_17_en == 1'd1))
begin
dv_calc_mb_coordinates_0_17_stage0_reg <= (arg_chan * 32'd10);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_21_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_0_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %32 = mul nsw i32 %29, 45*/
if ((lpm_mult_dv_calc_mb_coordinates_0_32_en == 1'd1))
begin
dv_calc_mb_coordinates_0_32_stage0_reg <= (dv_calc_mb_coordinates_0_29 * 32'd45);
end
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_0_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %4 = mul nsw i32 %3, 27*/
if ((lpm_mult_dv_calc_mb_coordinates_0_4_en == 1'd1))
begin
dv_calc_mb_coordinates_0_4_stage0_reg <= (dv_calc_mb_coordinates_0_3 * 32'd27);
end
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_0_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %0*/
/*   %19 = mul nsw i32 %18, 27*/
if ((lpm_mult_dv_calc_mb_coordinates_0_19_en == 1'd1))
begin
dv_calc_mb_coordinates_0_19_stage0_reg <= (dv_calc_mb_coordinates_0_18 * 32'd27);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_26_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_14_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_0_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp11 = mul i32 %37, 54*/
if ((lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp11_en == 1'd1))
begin
dv_calc_mb_coordinates___crit_edge_tmp11_stage0_reg <= (dv_calc_mb_coordinates___crit_edge_37_reg * 32'd54);
end
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %tmp15 = mul i32 %37, 27*/
if ((lpm_mult_dv_calc_mb_coordinates___crit_edge_tmp15_en == 1'd1))
begin
dv_calc_mb_coordinates___crit_edge_tmp15_stage0_reg <= (dv_calc_mb_coordinates___crit_edge_37_reg * 32'd27);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_43_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_43_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %43*/
/*   %50 = mul nsw i32 %46, 3*/
if ((lpm_mult_dv_calc_mb_coordinates_43_50_en == 1'd1))
begin
dv_calc_mb_coordinates_43_50_stage0_reg <= (dv_calc_mb_coordinates_43_46 * 32'd3);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_58_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_58_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %58*/
/*   %65 = mul nsw i32 %61, 3*/
if ((lpm_mult_dv_calc_mb_coordinates_58_65_en == 1'd1))
begin
dv_calc_mb_coordinates_58_65_stage0_reg <= (dv_calc_mb_coordinates_58_61 * 32'd3);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_84_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_84_92_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_84_97_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_105_112_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_105_115_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %105*/
/*   %115 = mul nsw i32 %114, 3*/
if ((lpm_mult_dv_calc_mb_coordinates_105_115_en == 1'd1))
begin
dv_calc_mb_coordinates_105_115_stage0_reg <= (dv_calc_mb_coordinates_105_114 * 32'd3);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_120_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_120_128_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %120*/
/*   %128 = mul nsw i32 %127, 3*/
if ((lpm_mult_dv_calc_mb_coordinates_120_128_en == 1'd1))
begin
dv_calc_mb_coordinates_120_128_stage0_reg <= (dv_calc_mb_coordinates_120_127 * 32'd3);
end
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_133_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_dv_calc_mb_coordinates_141_145_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_dv_calc_mb_coordinates_141_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* dv_calc_mb_coordinates: %141*/
/*   %149 = mul nsw i32 %137, 6*/
if ((lpm_mult_dv_calc_mb_coordinates_141_149_en == 1'd1))
begin
dv_calc_mb_coordinates_141_149_stage0_reg <= (dv_calc_mb_coordinates_133_137_reg * 32'd6);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* dv_calc_mb_coordinates: %161*/
/*   ret void*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_161_400))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %55*/
/*   store i32 %57, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %80*/
/*   store i32 %83, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %84*/
/*   store i32 %102, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %105*/
/*   store i32 %119, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %120*/
/*   store i32 %132, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
memory_controller_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %155*/
/*   store i32 %158, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
memory_controller_address_a = dv_calc_mb_coordinates_0_1_reg;
end
/* dv_calc_mb_coordinates: %55*/
/*   store i32 %57, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
/* dv_calc_mb_coordinates: %80*/
/*   store i32 %83, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
/* dv_calc_mb_coordinates: %84*/
/*   store i32 %102, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250))
begin
memory_controller_address_a = dv_calc_mb_coordinates_0_33_reg;
end
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
memory_controller_address_a = dv_calc_mb_coordinates_0_36_reg;
end
/* dv_calc_mb_coordinates: %105*/
/*   store i32 %119, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
memory_controller_address_a = dv_calc_mb_coordinates_0_36_reg;
end
/* dv_calc_mb_coordinates: %120*/
/*   store i32 %132, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
memory_controller_address_a = dv_calc_mb_coordinates_0_36_reg;
end
/* dv_calc_mb_coordinates: %155*/
/*   store i32 %158, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
memory_controller_address_a = dv_calc_mb_coordinates___crit_edge_scevgep7_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %55*/
/*   store i32 %57, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
memory_controller_write_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %80*/
/*   store i32 %83, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
memory_controller_write_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %84*/
/*   store i32 %102, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
memory_controller_write_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %105*/
/*   store i32 %119, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
memory_controller_write_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %120*/
/*   store i32 %132, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
memory_controller_write_enable_a = 1'd1;
end
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
memory_controller_write_enable_a = 1'd0;
end
/* dv_calc_mb_coordinates: %155*/
/*   store i32 %158, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* dv_calc_mb_coordinates: %55*/
/*   store i32 %57, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
memory_controller_in_a = dv_calc_mb_coordinates_55_57;
end
/* dv_calc_mb_coordinates: %80*/
/*   store i32 %83, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
memory_controller_in_a = dv_calc_mb_coordinates_80_83;
end
/* dv_calc_mb_coordinates: %84*/
/*   store i32 %102, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
memory_controller_in_a = dv_calc_mb_coordinates_84_102;
end
/* dv_calc_mb_coordinates: %105*/
/*   store i32 %119, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
memory_controller_in_a = dv_calc_mb_coordinates_105_119;
end
/* dv_calc_mb_coordinates: %120*/
/*   store i32 %132, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
memory_controller_in_a = dv_calc_mb_coordinates_120_132;
end
/* dv_calc_mb_coordinates: %155*/
/*   store i32 %158, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
memory_controller_in_a = dv_calc_mb_coordinates_155_158;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* dv_calc_mb_coordinates: %._crit_edge*/
/*   %38 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB___crit_edge_101))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %55*/
/*   store i32 %57, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_55_142))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %80*/
/*   store i32 %83, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_80_181))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %84*/
/*   store i32 %102, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_84_248))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %103*/
/*   %104 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_103_250))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %105*/
/*   %111 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_253))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %105*/
/*   store i32 %119, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_105_288))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %120*/
/*   %126 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_290))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %120*/
/*   store i32 %132, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_120_325))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %133*/
/*   %136 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_133_327))
begin
memory_controller_size_a = 2'd2;
end
/* dv_calc_mb_coordinates: %155*/
/*   store i32 %158, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_dv_calc_mb_coordinates_BB_155_397))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] dv_calc_mb_coordinates_off_address_a;
wire  dv_calc_mb_coordinates_off_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_off_in_a;
wire [31:0] dv_calc_mb_coordinates_off_out_a;
wire [2:0] dv_calc_mb_coordinates_off_address_b;
wire  dv_calc_mb_coordinates_off_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_off_in_b;
wire [31:0] dv_calc_mb_coordinates_off_out_b;
wire [2:0] dv_calc_mb_coordinates_shuf1_address_a;
wire  dv_calc_mb_coordinates_shuf1_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf1_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf1_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf1_address_b;
wire  dv_calc_mb_coordinates_shuf1_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf1_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf1_out_b;
wire [2:0] dv_calc_mb_coordinates_shuf2_address_a;
wire  dv_calc_mb_coordinates_shuf2_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf2_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf2_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf2_address_b;
wire  dv_calc_mb_coordinates_shuf2_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf2_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf2_out_b;
wire [2:0] dv_calc_mb_coordinates_shuf3_address_a;
wire  dv_calc_mb_coordinates_shuf3_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_shuf3_in_a;
wire [31:0] dv_calc_mb_coordinates_shuf3_out_a;
wire [2:0] dv_calc_mb_coordinates_shuf3_address_b;
wire  dv_calc_mb_coordinates_shuf3_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_shuf3_in_b;
wire [31:0] dv_calc_mb_coordinates_shuf3_out_b;
wire [3:0] dv_calc_mb_coordinates_l_start_address_a;
wire  dv_calc_mb_coordinates_l_start_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_l_start_in_a;
wire [31:0] dv_calc_mb_coordinates_l_start_out_a;
wire [3:0] dv_calc_mb_coordinates_l_start_address_b;
wire  dv_calc_mb_coordinates_l_start_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_l_start_in_b;
wire [31:0] dv_calc_mb_coordinates_l_start_out_b;
wire [2:0] dv_calc_mb_coordinates_l_start_shuffled_address_a;
wire  dv_calc_mb_coordinates_l_start_shuffled_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_in_a;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_out_a;
wire [2:0] dv_calc_mb_coordinates_l_start_shuffled_address_b;
wire  dv_calc_mb_coordinates_l_start_shuffled_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_in_b;
wire [31:0] dv_calc_mb_coordinates_l_start_shuffled_out_b;
wire [4:0] dv_calc_mb_coordinates_serpent1_address_a;
wire  dv_calc_mb_coordinates_serpent1_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_serpent1_in_a;
wire [31:0] dv_calc_mb_coordinates_serpent1_out_a;
wire [4:0] dv_calc_mb_coordinates_serpent1_address_b;
wire  dv_calc_mb_coordinates_serpent1_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_serpent1_in_b;
wire [31:0] dv_calc_mb_coordinates_serpent1_out_b;
wire [4:0] dv_calc_mb_coordinates_serpent2_address_a;
wire  dv_calc_mb_coordinates_serpent2_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_serpent2_in_a;
wire [31:0] dv_calc_mb_coordinates_serpent2_out_a;
wire [4:0] dv_calc_mb_coordinates_serpent2_address_b;
wire  dv_calc_mb_coordinates_serpent2_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_serpent2_in_b;
wire [31:0] dv_calc_mb_coordinates_serpent2_out_b;
wire [6:0] dv_calc_mb_coordinates_remap_address_a;
wire  dv_calc_mb_coordinates_remap_write_enable_a;
wire [31:0] dv_calc_mb_coordinates_remap_in_a;
wire [31:0] dv_calc_mb_coordinates_remap_out_a;
wire [6:0] dv_calc_mb_coordinates_remap_address_b;
wire  dv_calc_mb_coordinates_remap_write_enable_b;
wire [31:0] dv_calc_mb_coordinates_remap_in_b;
wire [31:0] dv_calc_mb_coordinates_remap_out_b;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  dv_calc_mb_coordinates_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_arg_d;
reg [31:0] dv_calc_mb_coordinates_arg_chan;
reg [31:0] dv_calc_mb_coordinates_arg_seq;
reg [31:0] dv_calc_mb_coordinates_arg_slot;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_arg_tbl;
wire  dv_calc_mb_coordinates_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_address_a;
wire  dv_calc_mb_coordinates_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_out_a;
wire [1:0] dv_calc_mb_coordinates_memory_controller_size_a;
wire  dv_calc_mb_coordinates_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_address_b;
wire  dv_calc_mb_coordinates_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] dv_calc_mb_coordinates_memory_controller_out_b;
wire [1:0] dv_calc_mb_coordinates_memory_controller_size_b;
reg  dv_calc_mb_coordinates_memory_controller_waitrequest;
wire  dv_calc_mb_coordinates_finish;
reg  dv_calc_mb_coordinates_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


dv_calc_mb_coordinates dv_calc_mb_coordinates_inst (
	.memory_controller_enable_a (dv_calc_mb_coordinates_memory_controller_enable_a),
	.memory_controller_address_a (dv_calc_mb_coordinates_memory_controller_address_a),
	.memory_controller_write_enable_a (dv_calc_mb_coordinates_memory_controller_write_enable_a),
	.memory_controller_in_a (dv_calc_mb_coordinates_memory_controller_in_a),
	.memory_controller_size_a (dv_calc_mb_coordinates_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (dv_calc_mb_coordinates_memory_controller_enable_b),
	.memory_controller_address_b (dv_calc_mb_coordinates_memory_controller_address_b),
	.memory_controller_write_enable_b (dv_calc_mb_coordinates_memory_controller_write_enable_b),
	.memory_controller_in_b (dv_calc_mb_coordinates_memory_controller_in_b),
	.memory_controller_size_b (dv_calc_mb_coordinates_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (dv_calc_mb_coordinates_start),
	.finish (dv_calc_mb_coordinates_finish),
	.arg_d (dv_calc_mb_coordinates_arg_d),
	.arg_chan (dv_calc_mb_coordinates_arg_chan),
	.arg_seq (dv_calc_mb_coordinates_arg_seq),
	.arg_slot (dv_calc_mb_coordinates_arg_slot),
	.arg_tbl (dv_calc_mb_coordinates_arg_tbl)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (dv_calc_mb_coordinates_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_start"); $finish; end
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
dv_calc_mb_coordinates_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_arg_d <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_arg_d"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_arg_chan <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_arg_chan"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_arg_seq <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_arg_seq"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_arg_slot <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_arg_slot"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
dv_calc_mb_coordinates_arg_tbl <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to dv_calc_mb_coordinates_arg_tbl"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
begin
dv_calc_mb_coordinates_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
begin
dv_calc_mb_coordinates_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
dv_calc_mb_coordinates_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
dv_calc_mb_coordinates_finish_final = dv_calc_mb_coordinates_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = dv_calc_mb_coordinates_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = dv_calc_mb_coordinates_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = dv_calc_mb_coordinates_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = dv_calc_mb_coordinates_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = dv_calc_mb_coordinates_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = dv_calc_mb_coordinates_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = dv_calc_mb_coordinates_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = dv_calc_mb_coordinates_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = dv_calc_mb_coordinates_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = dv_calc_mb_coordinates_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = dv_calc_mb_coordinates_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = dv_calc_mb_coordinates_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @dv_calc_mb_coordinates(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32 undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = dv_calc_mb_coordinates_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
