//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:30 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module handle_small_bpp
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_s,
	arg_p
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_0_2 = 9'd2;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_0_3 = 9'd3;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_3_4 = 9'd4;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_3_5 = 9'd5;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_3_6 = 9'd6;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_7_7 = 9'd7;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_7_8 = 9'd8;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_7_9 = 9'd9;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph45_10 = 9'd10;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph45_11 = 9'd11;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph45_12 = 9'd12;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph45_13 = 9'd13;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph45_14 = 9'd14;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_15 = 9'd15;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_16 = 9'd16;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_17 = 9'd17;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_18 = 9'd18;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_19 = 9'd19;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_20 = 9'd20;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_21 = 9'd21;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_22 = 9'd22;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_23 = 9'd23;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_24 = 9'd24;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_25 = 9'd25;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_26 = 9'd26;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_27 = 9'd27;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_28 = 9'd28;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_29 = 9'd29;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_30 = 9'd30;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_31 = 9'd31;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_32 = 9'd32;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_33 = 9'd33;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_34 = 9'd34;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_35 = 9'd35;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_36 = 9'd36;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_37 = 9'd37;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_38 = 9'd38;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_39 = 9'd39;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_40 = 9'd40;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_41 = 9'd41;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_42 = 9'd42;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_43 = 9'd43;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_44 = 9'd44;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_45 = 9'd45;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_46 = 9'd46;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_47 = 9'd47;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_48 = 9'd48;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_16_49 = 9'd49;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_50 = 9'd50;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_51 = 9'd51;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_52 = 9'd52;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_53 = 9'd53;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_54 = 9'd54;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_22_55 = 9'd55;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_26_56 = 9'd56;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph40_57 = 9'd57;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph40_58 = 9'd58;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_59 = 9'd59;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_60 = 9'd60;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_61 = 9'd61;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_62 = 9'd62;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_63 = 9'd63;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_64 = 9'd64;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_65 = 9'd65;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_66 = 9'd66;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_67 = 9'd67;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_68 = 9'd68;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_69 = 9'd69;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_70 = 9'd70;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_71 = 9'd71;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_72 = 9'd72;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_73 = 9'd73;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_74 = 9'd74;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_75 = 9'd75;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_76 = 9'd76;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_77 = 9'd77;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_78 = 9'd78;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_79 = 9'd79;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_80 = 9'd80;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_81 = 9'd81;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_82 = 9'd82;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_83 = 9'd83;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_30_84 = 9'd84;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85 = 9'd85;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge_86 = 9'd86;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge_87 = 9'd87;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge_88 = 9'd88;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge195_89 = 9'd89;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge195_90 = 9'd90;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge195_91 = 9'd91;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_57_92 = 9'd92;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_57_93 = 9'd93;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_57_94 = 9'd94;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph35_95 = 9'd95;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph35_96 = 9'd96;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph35_97 = 9'd97;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph35_98 = 9'd98;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph35_99 = 9'd99;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_100 = 9'd100;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_101 = 9'd101;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_102 = 9'd102;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_103 = 9'd103;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_104 = 9'd104;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_105 = 9'd105;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_106 = 9'd106;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_107 = 9'd107;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_108 = 9'd108;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_109 = 9'd109;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_110 = 9'd110;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_111 = 9'd111;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_112 = 9'd112;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_113 = 9'd113;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_114 = 9'd114;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_115 = 9'd115;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_116 = 9'd116;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_117 = 9'd117;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_118 = 9'd118;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_119 = 9'd119;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_120 = 9'd120;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_121 = 9'd121;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_122 = 9'd122;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_123 = 9'd123;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_124 = 9'd124;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_125 = 9'd125;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_126 = 9'd126;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_127 = 9'd127;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_128 = 9'd128;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_129 = 9'd129;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_130 = 9'd130;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_131 = 9'd131;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_132 = 9'd132;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_133 = 9'd133;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_67_134 = 9'd134;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_74_135 = 9'd135;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_136 = 9'd136;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_137 = 9'd137;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_138 = 9'd138;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_139 = 9'd139;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_140 = 9'd140;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_75_141 = 9'd141;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_83_142 = 9'd142;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_143 = 9'd143;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_144 = 9'd144;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_145 = 9'd145;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_146 = 9'd146;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_147 = 9'd147;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_87_148 = 9'd148;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_95_149 = 9'd149;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_99_150 = 9'd150;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_99_151 = 9'd151;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_99_152 = 9'd152;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_99_153 = 9'd153;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__preheader25_154 = 9'd154;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph29_155 = 9'd155;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph29_156 = 9'd156;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_157 = 9'd157;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_158 = 9'd158;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_159 = 9'd159;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_160 = 9'd160;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_161 = 9'd161;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_162 = 9'd162;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_163 = 9'd163;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_164 = 9'd164;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_165 = 9'd165;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_166 = 9'd166;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_167 = 9'd167;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_168 = 9'd168;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_169 = 9'd169;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_106_170 = 9'd170;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_117_171 = 9'd171;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_172 = 9'd172;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_173 = 9'd173;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_174 = 9'd174;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_175 = 9'd175;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_176 = 9'd176;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_177 = 9'd177;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_118_178 = 9'd178;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_127_179 = 9'd179;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_180 = 9'd180;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_181 = 9'd181;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_182 = 9'd182;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_183 = 9'd183;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_184 = 9'd184;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_185 = 9'd185;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_131_186 = 9'd186;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_140_187 = 9'd187;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_144_188 = 9'd188;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_144_189 = 9'd189;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_144_190 = 9'd190;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_144_191 = 9'd191;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_144_192 = 9'd192;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__preheader20_193 = 9'd193;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph24_194 = 9'd194;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph24_195 = 9'd195;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_196 = 9'd196;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_197 = 9'd197;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_198 = 9'd198;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_199 = 9'd199;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_200 = 9'd200;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_201 = 9'd201;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_202 = 9'd202;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_203 = 9'd203;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_204 = 9'd204;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_205 = 9'd205;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_206 = 9'd206;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_207 = 9'd207;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_208 = 9'd208;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_209 = 9'd209;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_210 = 9'd210;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_211 = 9'd211;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_212 = 9'd212;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_152_213 = 9'd213;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214 = 9'd214;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215 = 9'd215;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit21_216 = 9'd216;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit21_217 = 9'd217;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit21_218 = 9'd218;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge194_219 = 9'd219;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge194_220 = 9'd220;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge194_221 = 9'd221;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_171_222 = 9'd222;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_171_223 = 9'd223;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_171_224 = 9'd224;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph19_225 = 9'd225;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph19_226 = 9'd226;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph19_227 = 9'd227;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph19_228 = 9'd228;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph19_229 = 9'd229;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_230 = 9'd230;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_231 = 9'd231;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_232 = 9'd232;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_233 = 9'd233;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_234 = 9'd234;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_235 = 9'd235;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_236 = 9'd236;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_237 = 9'd237;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_238 = 9'd238;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_239 = 9'd239;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_240 = 9'd240;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_241 = 9'd241;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_242 = 9'd242;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_243 = 9'd243;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_244 = 9'd244;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_245 = 9'd245;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_246 = 9'd246;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_247 = 9'd247;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_248 = 9'd248;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_249 = 9'd249;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_250 = 9'd250;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_251 = 9'd251;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_252 = 9'd252;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_253 = 9'd253;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_254 = 9'd254;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_255 = 9'd255;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_256 = 9'd256;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_257 = 9'd257;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_258 = 9'd258;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_259 = 9'd259;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_260 = 9'd260;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_261 = 9'd261;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_262 = 9'd262;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_263 = 9'd263;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_181_264 = 9'd264;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_188_265 = 9'd265;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_189_266 = 9'd266;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_189_267 = 9'd267;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_189_268 = 9'd268;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_189_269 = 9'd269;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__preheader9_270 = 9'd270;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph13_271 = 9'd271;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph13_272 = 9'd272;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_273 = 9'd273;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_274 = 9'd274;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_275 = 9'd275;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_276 = 9'd276;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_277 = 9'd277;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_278 = 9'd278;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_279 = 9'd279;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_196_280 = 9'd280;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_201_281 = 9'd281;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_202_282 = 9'd282;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_202_283 = 9'd283;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_202_284 = 9'd284;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_202_285 = 9'd285;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_202_286 = 9'd286;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__preheader_287 = 9'd287;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph_288 = 9'd288;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__lr_ph_289 = 9'd289;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_290 = 9'd290;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_291 = 9'd291;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_292 = 9'd292;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_293 = 9'd293;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_294 = 9'd294;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_295 = 9'd295;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_296 = 9'd296;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_297 = 9'd297;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_298 = 9'd298;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_210_299 = 9'd299;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300 = 9'd300;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301 = 9'd301;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit_302 = 9'd302;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit_303 = 9'd303;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit_304 = 9'd304;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge193_305 = 9'd305;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge193_306 = 9'd306;
parameter [8:0] LEGUP_F_handle_small_bpp_BB___crit_edge193_307 = 9'd307;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308 = 9'd308;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309 = 9'd309;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310 = 9'd310;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit14_311 = 9'd311;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_221_312 = 9'd312;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_313 = 9'd313;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_314 = 9'd314;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_315 = 9'd315;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_316 = 9'd316;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_317 = 9'd317;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_225_318 = 9'd318;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_229_319 = 9'd319;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_320 = 9'd320;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_321 = 9'd321;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_322 = 9'd322;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_323 = 9'd323;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_324 = 9'd324;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_233_325 = 9'd325;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_237_326 = 9'd326;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_327 = 9'd327;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_328 = 9'd328;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_329 = 9'd329;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_330 = 9'd330;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_331 = 9'd331;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_241_332 = 9'd332;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_245_333 = 9'd333;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_334 = 9'd334;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_335 = 9'd335;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_336 = 9'd336;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_337 = 9'd337;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_338 = 9'd338;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_249_339 = 9'd339;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_253_340 = 9'd340;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_341 = 9'd341;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_342 = 9'd342;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_343 = 9'd343;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_344 = 9'd344;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_345 = 9'd345;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_257_346 = 9'd346;
parameter [8:0] LEGUP_F_handle_small_bpp_BB__loopexit36_347 = 9'd347;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_262_348 = 9'd348;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_262_349 = 9'd349;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_262_350 = 9'd350;
parameter [8:0] LEGUP_F_handle_small_bpp_BB_262_351 = 9'd351;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_0_1_reg;
reg [31:0] handle_small_bpp_0_2;
reg [31:0] handle_small_bpp_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_3_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_3_4_reg;
reg [31:0] handle_small_bpp_3_5;
reg [31:0] handle_small_bpp_3_5_reg;
reg  handle_small_bpp_3_6;
reg  handle_small_bpp_3_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_7_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_7_8_reg;
reg [31:0] handle_small_bpp_7_9;
reg [31:0] handle_small_bpp_7_9_reg;
reg  handle_small_bpp_7_10;
reg  handle_small_bpp_7_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph45_15_reg;
reg [31:0] handle_small_bpp_16_j_043;
reg [31:0] handle_small_bpp_16_j_043_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_16_pd_042;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_16_pd_042_reg;
reg [31:0] handle_small_bpp_16_17;
reg [31:0] handle_small_bpp_16_17_reg;
reg [31:0] handle_small_bpp_16_18;
reg [31:0] handle_small_bpp_16_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_16_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_16_19_reg;
reg [31:0] handle_small_bpp_16_tmp140;
reg [31:0] handle_small_bpp_16_tmp140_reg;
reg [31:0] handle_small_bpp_16_tmp141183;
reg [31:0] handle_small_bpp_16_tmp141183_reg;
reg [31:0] handle_small_bpp_16_20;
reg [31:0] handle_small_bpp_16_20_reg;
reg  handle_small_bpp_16_21;
reg  handle_small_bpp_16_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_22_scevgep143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_22_scevgep143_reg;
reg [31:0] handle_small_bpp_22_23;
reg [31:0] handle_small_bpp_22_23_reg;
reg [31:0] handle_small_bpp_22_24;
reg [31:0] handle_small_bpp_22_24_reg;
reg [31:0] handle_small_bpp_22_25;
reg [31:0] handle_small_bpp_22_25_reg;
reg [31:0] handle_small_bpp_22__pre;
reg [31:0] handle_small_bpp_22__pre_reg;
reg [31:0] handle_small_bpp_26_27;
reg [31:0] handle_small_bpp_26_27_reg;
reg [31:0] handle_small_bpp_26_28;
reg [31:0] handle_small_bpp_26_28_reg;
reg  handle_small_bpp_26_29;
reg  handle_small_bpp_26_29_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp146;
reg [31:0] handle_small_bpp__lr_ph40_tmp146_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp147;
reg [31:0] handle_small_bpp__lr_ph40_tmp147_reg;
reg  handle_small_bpp__lr_ph40_tmp148;
reg  handle_small_bpp__lr_ph40_tmp148_reg;
reg [31:0] handle_small_bpp__lr_ph40_smax149;
reg [31:0] handle_small_bpp__lr_ph40_smax149_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp150;
reg [31:0] handle_small_bpp__lr_ph40_tmp150_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp154;
reg [31:0] handle_small_bpp__lr_ph40_tmp154_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp157;
reg [31:0] handle_small_bpp__lr_ph40_tmp157_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp160;
reg [31:0] handle_small_bpp__lr_ph40_tmp160_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp163;
reg [31:0] handle_small_bpp__lr_ph40_tmp163_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp166;
reg [31:0] handle_small_bpp__lr_ph40_tmp166_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp169;
reg [31:0] handle_small_bpp__lr_ph40_tmp169_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp172;
reg [31:0] handle_small_bpp__lr_ph40_tmp172_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp175;
reg [31:0] handle_small_bpp__lr_ph40_tmp175_reg;
reg [31:0] handle_small_bpp__lr_ph40_tmp179;
reg [31:0] handle_small_bpp__lr_ph40_tmp179_reg;
reg [31:0] handle_small_bpp_30_indvar144;
reg [31:0] handle_small_bpp_30_indvar144_reg;
reg [31:0] handle_small_bpp_30_tmp152;
reg [31:0] handle_small_bpp_30_tmp152_reg;
reg [31:0] handle_small_bpp_30_tmp155;
reg [31:0] handle_small_bpp_30_tmp155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep156_reg;
reg [31:0] handle_small_bpp_30_tmp158;
reg [31:0] handle_small_bpp_30_tmp158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep159_reg;
reg [31:0] handle_small_bpp_30_tmp161;
reg [31:0] handle_small_bpp_30_tmp161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep162_reg;
reg [31:0] handle_small_bpp_30_tmp164;
reg [31:0] handle_small_bpp_30_tmp164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep165_reg;
reg [31:0] handle_small_bpp_30_tmp167;
reg [31:0] handle_small_bpp_30_tmp167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep168_reg;
reg [31:0] handle_small_bpp_30_tmp170;
reg [31:0] handle_small_bpp_30_tmp170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep171_reg;
reg [31:0] handle_small_bpp_30_tmp173;
reg [31:0] handle_small_bpp_30_tmp173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep174_reg;
reg [31:0] handle_small_bpp_30_tmp176;
reg [31:0] handle_small_bpp_30_tmp176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep177_reg;
reg [31:0] handle_small_bpp_30_tmp180;
reg [31:0] handle_small_bpp_30_tmp180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_30_scevgep181_reg;
reg [31:0] handle_small_bpp_30_31;
reg [31:0] handle_small_bpp_30_31_reg;
reg [31:0] handle_small_bpp_30_32;
reg [31:0] handle_small_bpp_30_32_reg;
reg [31:0] handle_small_bpp_30_33;
reg [31:0] handle_small_bpp_30_33_reg;
reg [31:0] handle_small_bpp_30_34;
reg [31:0] handle_small_bpp_30_34_reg;
reg [31:0] handle_small_bpp_30_35;
reg [31:0] handle_small_bpp_30_35_reg;
reg [31:0] handle_small_bpp_30_36;
reg [31:0] handle_small_bpp_30_36_reg;
reg [31:0] handle_small_bpp_30_37;
reg [31:0] handle_small_bpp_30_37_reg;
reg [31:0] handle_small_bpp_30_38;
reg [31:0] handle_small_bpp_30_38_reg;
reg [31:0] handle_small_bpp_30_39;
reg [31:0] handle_small_bpp_30_39_reg;
reg [31:0] handle_small_bpp_30_40;
reg [31:0] handle_small_bpp_30_40_reg;
reg [31:0] handle_small_bpp_30_41;
reg [31:0] handle_small_bpp_30_41_reg;
reg [31:0] handle_small_bpp_30_42;
reg [31:0] handle_small_bpp_30_42_reg;
reg [31:0] handle_small_bpp_30_43;
reg [31:0] handle_small_bpp_30_43_reg;
reg [31:0] handle_small_bpp_30_44;
reg [31:0] handle_small_bpp_30_44_reg;
reg [31:0] handle_small_bpp_30_45;
reg [31:0] handle_small_bpp_30_45_reg;
reg [31:0] handle_small_bpp_30_46;
reg [31:0] handle_small_bpp_30_46_reg;
reg [31:0] handle_small_bpp_30_47;
reg [31:0] handle_small_bpp_30_47_reg;
reg [31:0] handle_small_bpp_30_48;
reg [31:0] handle_small_bpp_30_48_reg;
reg [31:0] handle_small_bpp_30_49;
reg [31:0] handle_small_bpp_30_49_reg;
reg [31:0] handle_small_bpp_30_50;
reg [31:0] handle_small_bpp_30_50_reg;
reg [31:0] handle_small_bpp_30_51;
reg [31:0] handle_small_bpp_30_51_reg;
reg [31:0] handle_small_bpp_30_52;
reg [31:0] handle_small_bpp_30_52_reg;
reg [31:0] handle_small_bpp_30_indvar_next145;
reg [31:0] handle_small_bpp_30_indvar_next145_reg;
reg  handle_small_bpp_30_exitcond151;
reg  handle_small_bpp_30_exitcond151_reg;
reg [31:0] handle_small_bpp___crit_edge_53;
reg [31:0] handle_small_bpp___crit_edge_53_reg;
reg  handle_small_bpp___crit_edge_54;
reg  handle_small_bpp___crit_edge_54_reg;
reg [31:0] handle_small_bpp___crit_edge195_55;
reg [31:0] handle_small_bpp___crit_edge195_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge195_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge195_56_reg;
reg [31:0] handle_small_bpp___crit_edge195_phitmp197;
reg [31:0] handle_small_bpp___crit_edge195_phitmp197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_57_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_57_58_reg;
reg [31:0] handle_small_bpp_57_59;
reg [31:0] handle_small_bpp_57_59_reg;
reg  handle_small_bpp_57_60;
reg  handle_small_bpp_57_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph35_66_reg;
reg [31:0] handle_small_bpp_67_j2_034;
reg [31:0] handle_small_bpp_67_j2_034_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_67_pd3_031;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_67_pd3_031_reg;
reg [31:0] handle_small_bpp_67_68;
reg [31:0] handle_small_bpp_67_68_reg;
reg [31:0] handle_small_bpp_67_69;
reg [31:0] handle_small_bpp_67_69_reg;
reg [31:0] handle_small_bpp_67_70;
reg [31:0] handle_small_bpp_67_70_reg;
reg  handle_small_bpp_67_71;
reg  handle_small_bpp_67_71_reg;
reg [31:0] handle_small_bpp_67_72;
reg [31:0] handle_small_bpp_67_72_reg;
reg  handle_small_bpp_67_73;
reg  handle_small_bpp_67_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_75_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_75_76_reg;
reg [31:0] handle_small_bpp_75_77;
reg [31:0] handle_small_bpp_75_77_reg;
reg [31:0] handle_small_bpp_75_78;
reg [31:0] handle_small_bpp_75_78_reg;
reg [31:0] handle_small_bpp_75_79;
reg [31:0] handle_small_bpp_75_79_reg;
reg [31:0] handle_small_bpp_75_80;
reg [31:0] handle_small_bpp_75_80_reg;
reg [31:0] handle_small_bpp_75_81;
reg [31:0] handle_small_bpp_75_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_75_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_75_82_reg;
reg [31:0] handle_small_bpp_75__pre189;
reg [31:0] handle_small_bpp_75__pre189_reg;
reg [31:0] handle_small_bpp_83_84;
reg [31:0] handle_small_bpp_83_84_reg;
reg [31:0] handle_small_bpp_83_85;
reg [31:0] handle_small_bpp_83_85_reg;
reg  handle_small_bpp_83_86;
reg  handle_small_bpp_83_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_87_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_87_88_reg;
reg [31:0] handle_small_bpp_87_89;
reg [31:0] handle_small_bpp_87_89_reg;
reg [31:0] handle_small_bpp_87_90;
reg [31:0] handle_small_bpp_87_90_reg;
reg [31:0] handle_small_bpp_87_91;
reg [31:0] handle_small_bpp_87_91_reg;
reg [31:0] handle_small_bpp_87_92;
reg [31:0] handle_small_bpp_87_92_reg;
reg [31:0] handle_small_bpp_87_93;
reg [31:0] handle_small_bpp_87_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_87_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_87_94_reg;
reg [31:0] handle_small_bpp_87__pre190;
reg [31:0] handle_small_bpp_87__pre190_reg;
reg [31:0] handle_small_bpp_95_96;
reg [31:0] handle_small_bpp_95_96_reg;
reg [31:0] handle_small_bpp_95_97;
reg [31:0] handle_small_bpp_95_97_reg;
reg  handle_small_bpp_95_98;
reg  handle_small_bpp_95_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_99_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_99_100_reg;
reg [31:0] handle_small_bpp_99_101;
reg [31:0] handle_small_bpp_99_101_reg;
reg [31:0] handle_small_bpp_99_102;
reg [31:0] handle_small_bpp_99_102_reg;
reg [31:0] handle_small_bpp_99_103;
reg [31:0] handle_small_bpp_99_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_99_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_99_104_reg;
reg  handle_small_bpp__preheader25_105;
reg  handle_small_bpp__preheader25_105_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp109;
reg [31:0] handle_small_bpp__lr_ph29_tmp109_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp110;
reg [31:0] handle_small_bpp__lr_ph29_tmp110_reg;
reg  handle_small_bpp__lr_ph29_tmp111;
reg  handle_small_bpp__lr_ph29_tmp111_reg;
reg [31:0] handle_small_bpp__lr_ph29_smax112;
reg [31:0] handle_small_bpp__lr_ph29_smax112_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp113;
reg [31:0] handle_small_bpp__lr_ph29_tmp113_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp116;
reg [31:0] handle_small_bpp__lr_ph29_tmp116_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp117;
reg [31:0] handle_small_bpp__lr_ph29_tmp117_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp120;
reg [31:0] handle_small_bpp__lr_ph29_tmp120_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp123;
reg [31:0] handle_small_bpp__lr_ph29_tmp123_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp126;
reg [31:0] handle_small_bpp__lr_ph29_tmp126_reg;
reg [31:0] handle_small_bpp__lr_ph29_tmp130;
reg [31:0] handle_small_bpp__lr_ph29_tmp130_reg;
reg [31:0] handle_small_bpp_106_indvar107;
reg [31:0] handle_small_bpp_106_indvar107_reg;
reg [31:0] handle_small_bpp_106_tmp115;
reg [31:0] handle_small_bpp_106_tmp115_reg;
reg [31:0] handle_small_bpp_106_tmp118;
reg [31:0] handle_small_bpp_106_tmp118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep119_reg;
reg [31:0] handle_small_bpp_106_tmp121;
reg [31:0] handle_small_bpp_106_tmp121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep122_reg;
reg [31:0] handle_small_bpp_106_tmp124;
reg [31:0] handle_small_bpp_106_tmp124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep125_reg;
reg [31:0] handle_small_bpp_106_tmp127;
reg [31:0] handle_small_bpp_106_tmp127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep128_reg;
reg [31:0] handle_small_bpp_106_tmp131;
reg [31:0] handle_small_bpp_106_tmp131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_106_scevgep132_reg;
reg [31:0] handle_small_bpp_106_107;
reg [31:0] handle_small_bpp_106_107_reg;
reg [31:0] handle_small_bpp_106_108;
reg [31:0] handle_small_bpp_106_108_reg;
reg [31:0] handle_small_bpp_106_109;
reg [31:0] handle_small_bpp_106_109_reg;
reg [31:0] handle_small_bpp_106_110;
reg [31:0] handle_small_bpp_106_110_reg;
reg [31:0] handle_small_bpp_106_111;
reg [31:0] handle_small_bpp_106_111_reg;
reg [31:0] handle_small_bpp_106_112;
reg [31:0] handle_small_bpp_106_112_reg;
reg [31:0] handle_small_bpp_106_113;
reg [31:0] handle_small_bpp_106_113_reg;
reg [31:0] handle_small_bpp_106_114;
reg [31:0] handle_small_bpp_106_114_reg;
reg [31:0] handle_small_bpp_106_115;
reg [31:0] handle_small_bpp_106_115_reg;
reg [31:0] handle_small_bpp_106_116;
reg [31:0] handle_small_bpp_106_116_reg;
reg [31:0] handle_small_bpp_106_indvar_next108;
reg [31:0] handle_small_bpp_106_indvar_next108_reg;
reg  handle_small_bpp_106_exitcond114;
reg  handle_small_bpp_106_exitcond114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_118_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_118_119_reg;
reg [31:0] handle_small_bpp_118_120;
reg [31:0] handle_small_bpp_118_120_reg;
reg [31:0] handle_small_bpp_118_121;
reg [31:0] handle_small_bpp_118_121_reg;
reg [31:0] handle_small_bpp_118_122;
reg [31:0] handle_small_bpp_118_122_reg;
reg [31:0] handle_small_bpp_118_123;
reg [31:0] handle_small_bpp_118_123_reg;
reg [31:0] handle_small_bpp_118_124;
reg [31:0] handle_small_bpp_118_124_reg;
reg [31:0] handle_small_bpp_118_125;
reg [31:0] handle_small_bpp_118_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_118_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_118_126_reg;
reg [31:0] handle_small_bpp_118__pre191;
reg [31:0] handle_small_bpp_118__pre191_reg;
reg [31:0] handle_small_bpp_127_128;
reg [31:0] handle_small_bpp_127_128_reg;
reg [31:0] handle_small_bpp_127_129;
reg [31:0] handle_small_bpp_127_129_reg;
reg  handle_small_bpp_127_130;
reg  handle_small_bpp_127_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_131_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_131_132_reg;
reg [31:0] handle_small_bpp_131_133;
reg [31:0] handle_small_bpp_131_133_reg;
reg [31:0] handle_small_bpp_131_134;
reg [31:0] handle_small_bpp_131_134_reg;
reg [31:0] handle_small_bpp_131_135;
reg [31:0] handle_small_bpp_131_135_reg;
reg [31:0] handle_small_bpp_131_136;
reg [31:0] handle_small_bpp_131_136_reg;
reg [31:0] handle_small_bpp_131_137;
reg [31:0] handle_small_bpp_131_137_reg;
reg [31:0] handle_small_bpp_131_138;
reg [31:0] handle_small_bpp_131_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_131_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_131_139_reg;
reg [31:0] handle_small_bpp_131__pre192;
reg [31:0] handle_small_bpp_131__pre192_reg;
reg [31:0] handle_small_bpp_140_141;
reg [31:0] handle_small_bpp_140_141_reg;
reg [31:0] handle_small_bpp_140_142;
reg [31:0] handle_small_bpp_140_142_reg;
reg  handle_small_bpp_140_143;
reg  handle_small_bpp_140_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_144_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_144_145_reg;
reg [31:0] handle_small_bpp_144_146;
reg [31:0] handle_small_bpp_144_146_reg;
reg [31:0] handle_small_bpp_144_147;
reg [31:0] handle_small_bpp_144_147_reg;
reg [31:0] handle_small_bpp_144_148;
reg [31:0] handle_small_bpp_144_148_reg;
reg [31:0] handle_small_bpp_144_149;
reg [31:0] handle_small_bpp_144_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_144_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_144_150_reg;
reg  handle_small_bpp__preheader20_151;
reg  handle_small_bpp__preheader20_151_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp83;
reg [31:0] handle_small_bpp__lr_ph24_tmp83_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp84;
reg [31:0] handle_small_bpp__lr_ph24_tmp84_reg;
reg  handle_small_bpp__lr_ph24_tmp85;
reg  handle_small_bpp__lr_ph24_tmp85_reg;
reg [31:0] handle_small_bpp__lr_ph24_smax86;
reg [31:0] handle_small_bpp__lr_ph24_smax86_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp87;
reg [31:0] handle_small_bpp__lr_ph24_tmp87_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp90;
reg [31:0] handle_small_bpp__lr_ph24_tmp90_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp91;
reg [31:0] handle_small_bpp__lr_ph24_tmp91_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp94;
reg [31:0] handle_small_bpp__lr_ph24_tmp94_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp97;
reg [31:0] handle_small_bpp__lr_ph24_tmp97_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp100;
reg [31:0] handle_small_bpp__lr_ph24_tmp100_reg;
reg [31:0] handle_small_bpp__lr_ph24_tmp104;
reg [31:0] handle_small_bpp__lr_ph24_tmp104_reg;
reg [31:0] handle_small_bpp_152_indvar81;
reg [31:0] handle_small_bpp_152_indvar81_reg;
reg [31:0] handle_small_bpp_152_tmp89;
reg [31:0] handle_small_bpp_152_tmp89_reg;
reg [31:0] handle_small_bpp_152_tmp92;
reg [31:0] handle_small_bpp_152_tmp92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep93_reg;
reg [31:0] handle_small_bpp_152_tmp95;
reg [31:0] handle_small_bpp_152_tmp95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep96_reg;
reg [31:0] handle_small_bpp_152_tmp98;
reg [31:0] handle_small_bpp_152_tmp98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep99_reg;
reg [31:0] handle_small_bpp_152_tmp101;
reg [31:0] handle_small_bpp_152_tmp101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep102_reg;
reg [31:0] handle_small_bpp_152_tmp105;
reg [31:0] handle_small_bpp_152_tmp105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_152_scevgep106_reg;
reg [31:0] handle_small_bpp_152_153;
reg [31:0] handle_small_bpp_152_153_reg;
reg [31:0] handle_small_bpp_152_154;
reg [31:0] handle_small_bpp_152_154_reg;
reg [31:0] handle_small_bpp_152_155;
reg [31:0] handle_small_bpp_152_155_reg;
reg [31:0] handle_small_bpp_152_156;
reg [31:0] handle_small_bpp_152_156_reg;
reg [31:0] handle_small_bpp_152_157;
reg [31:0] handle_small_bpp_152_157_reg;
reg [31:0] handle_small_bpp_152_158;
reg [31:0] handle_small_bpp_152_158_reg;
reg [31:0] handle_small_bpp_152_159;
reg [31:0] handle_small_bpp_152_159_reg;
reg [31:0] handle_small_bpp_152_160;
reg [31:0] handle_small_bpp_152_160_reg;
reg [31:0] handle_small_bpp_152_161;
reg [31:0] handle_small_bpp_152_161_reg;
reg [31:0] handle_small_bpp_152_162;
reg [31:0] handle_small_bpp_152_162_reg;
reg [31:0] handle_small_bpp_152_163;
reg [31:0] handle_small_bpp_152_163_reg;
reg [31:0] handle_small_bpp_152_164;
reg [31:0] handle_small_bpp_152_164_reg;
reg [31:0] handle_small_bpp_152_165;
reg [31:0] handle_small_bpp_152_165_reg;
reg [31:0] handle_small_bpp_152_166;
reg [31:0] handle_small_bpp_152_166_reg;
reg [31:0] handle_small_bpp_152_indvar_next82;
reg [31:0] handle_small_bpp_152_indvar_next82_reg;
reg  handle_small_bpp_152_exitcond88;
reg  handle_small_bpp_152_exitcond88_reg;
reg [31:0] handle_small_bpp__loopexit21_167;
reg [31:0] handle_small_bpp__loopexit21_167_reg;
reg  handle_small_bpp__loopexit21_168;
reg  handle_small_bpp__loopexit21_168_reg;
reg [31:0] handle_small_bpp___crit_edge194_169;
reg [31:0] handle_small_bpp___crit_edge194_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge194_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge194_170_reg;
reg [31:0] handle_small_bpp___crit_edge194_phitmp196;
reg [31:0] handle_small_bpp___crit_edge194_phitmp196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_171_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_171_172_reg;
reg [31:0] handle_small_bpp_171_173;
reg [31:0] handle_small_bpp_171_173_reg;
reg  handle_small_bpp_171_174;
reg  handle_small_bpp_171_174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp__lr_ph19_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_181_pd6_016;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_181_pd6_016_reg;
reg [31:0] handle_small_bpp_181_j5_015;
reg [31:0] handle_small_bpp_181_j5_015_reg;
reg [31:0] handle_small_bpp_181_182;
reg [31:0] handle_small_bpp_181_182_reg;
reg [31:0] handle_small_bpp_181_183;
reg [31:0] handle_small_bpp_181_183_reg;
reg [31:0] handle_small_bpp_181_184;
reg [31:0] handle_small_bpp_181_184_reg;
reg  handle_small_bpp_181_185;
reg  handle_small_bpp_181_185_reg;
reg [31:0] handle_small_bpp_181_186;
reg [31:0] handle_small_bpp_181_186_reg;
reg  handle_small_bpp_181_187;
reg  handle_small_bpp_181_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_189_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_189_190_reg;
reg [31:0] handle_small_bpp_189_191;
reg [31:0] handle_small_bpp_189_191_reg;
reg [31:0] handle_small_bpp_189_192;
reg [31:0] handle_small_bpp_189_192_reg;
reg [31:0] handle_small_bpp_189_193;
reg [31:0] handle_small_bpp_189_193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_189_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_189_194_reg;
reg  handle_small_bpp__preheader9_195;
reg  handle_small_bpp__preheader9_195_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp62;
reg [31:0] handle_small_bpp__lr_ph13_tmp62_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp63;
reg [31:0] handle_small_bpp__lr_ph13_tmp63_reg;
reg  handle_small_bpp__lr_ph13_tmp64;
reg  handle_small_bpp__lr_ph13_tmp64_reg;
reg [31:0] handle_small_bpp__lr_ph13_smax65;
reg [31:0] handle_small_bpp__lr_ph13_smax65_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp66;
reg [31:0] handle_small_bpp__lr_ph13_tmp66_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp69;
reg [31:0] handle_small_bpp__lr_ph13_tmp69_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp70;
reg [31:0] handle_small_bpp__lr_ph13_tmp70_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp73;
reg [31:0] handle_small_bpp__lr_ph13_tmp73_reg;
reg [31:0] handle_small_bpp__lr_ph13_tmp77;
reg [31:0] handle_small_bpp__lr_ph13_tmp77_reg;
reg [31:0] handle_small_bpp_196_indvar60;
reg [31:0] handle_small_bpp_196_indvar60_reg;
reg [31:0] handle_small_bpp_196_tmp68;
reg [31:0] handle_small_bpp_196_tmp68_reg;
reg [31:0] handle_small_bpp_196_tmp71;
reg [31:0] handle_small_bpp_196_tmp71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep72_reg;
reg [31:0] handle_small_bpp_196_tmp74;
reg [31:0] handle_small_bpp_196_tmp74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep75_reg;
reg [31:0] handle_small_bpp_196_tmp78;
reg [31:0] handle_small_bpp_196_tmp78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_196_scevgep79_reg;
reg [31:0] handle_small_bpp_196_197;
reg [31:0] handle_small_bpp_196_197_reg;
reg [31:0] handle_small_bpp_196_198;
reg [31:0] handle_small_bpp_196_198_reg;
reg [31:0] handle_small_bpp_196_199;
reg [31:0] handle_small_bpp_196_199_reg;
reg [31:0] handle_small_bpp_196_200;
reg [31:0] handle_small_bpp_196_200_reg;
reg [31:0] handle_small_bpp_196_indvar_next61;
reg [31:0] handle_small_bpp_196_indvar_next61_reg;
reg  handle_small_bpp_196_exitcond67;
reg  handle_small_bpp_196_exitcond67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_202_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_202_203_reg;
reg [31:0] handle_small_bpp_202_204;
reg [31:0] handle_small_bpp_202_204_reg;
reg [31:0] handle_small_bpp_202_205;
reg [31:0] handle_small_bpp_202_205_reg;
reg [31:0] handle_small_bpp_202_206;
reg [31:0] handle_small_bpp_202_206_reg;
reg [31:0] handle_small_bpp_202_207;
reg [31:0] handle_small_bpp_202_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_202_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_202_208_reg;
reg  handle_small_bpp__preheader_209;
reg  handle_small_bpp__preheader_209_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp;
reg [31:0] handle_small_bpp__lr_ph_tmp_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp46;
reg [31:0] handle_small_bpp__lr_ph_tmp46_reg;
reg  handle_small_bpp__lr_ph_tmp47;
reg  handle_small_bpp__lr_ph_tmp47_reg;
reg [31:0] handle_small_bpp__lr_ph_smax;
reg [31:0] handle_small_bpp__lr_ph_smax_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp48;
reg [31:0] handle_small_bpp__lr_ph_tmp48_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp50;
reg [31:0] handle_small_bpp__lr_ph_tmp50_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp51;
reg [31:0] handle_small_bpp__lr_ph_tmp51_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp53;
reg [31:0] handle_small_bpp__lr_ph_tmp53_reg;
reg [31:0] handle_small_bpp__lr_ph_tmp57;
reg [31:0] handle_small_bpp__lr_ph_tmp57_reg;
reg [31:0] handle_small_bpp_210_indvar;
reg [31:0] handle_small_bpp_210_indvar_reg;
reg [31:0] handle_small_bpp_210_tmp49;
reg [31:0] handle_small_bpp_210_tmp49_reg;
reg [31:0] handle_small_bpp_210_tmp52;
reg [31:0] handle_small_bpp_210_tmp52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep_reg;
reg [31:0] handle_small_bpp_210_tmp54;
reg [31:0] handle_small_bpp_210_tmp54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep55_reg;
reg [31:0] handle_small_bpp_210_tmp58;
reg [31:0] handle_small_bpp_210_tmp58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_210_scevgep59_reg;
reg [31:0] handle_small_bpp_210_211;
reg [31:0] handle_small_bpp_210_211_reg;
reg [31:0] handle_small_bpp_210_212;
reg [31:0] handle_small_bpp_210_212_reg;
reg [31:0] handle_small_bpp_210_213;
reg [31:0] handle_small_bpp_210_213_reg;
reg [31:0] handle_small_bpp_210_214;
reg [31:0] handle_small_bpp_210_214_reg;
reg [31:0] handle_small_bpp_210_215;
reg [31:0] handle_small_bpp_210_215_reg;
reg [31:0] handle_small_bpp_210_216;
reg [31:0] handle_small_bpp_210_216_reg;
reg [31:0] handle_small_bpp_210_indvar_next;
reg [31:0] handle_small_bpp_210_indvar_next_reg;
reg  handle_small_bpp_210_exitcond;
reg  handle_small_bpp_210_exitcond_reg;
reg [31:0] handle_small_bpp__loopexit_217;
reg [31:0] handle_small_bpp__loopexit_217_reg;
reg  handle_small_bpp__loopexit_218;
reg  handle_small_bpp__loopexit_218_reg;
reg [31:0] handle_small_bpp___crit_edge193_219;
reg [31:0] handle_small_bpp___crit_edge193_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge193_220;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp___crit_edge193_220_reg;
reg [31:0] handle_small_bpp___crit_edge193_phitmp;
reg [31:0] handle_small_bpp___crit_edge193_phitmp_reg;
reg [31:0] handle_small_bpp_221_222;
reg [31:0] handle_small_bpp_221_222_reg;
reg [31:0] handle_small_bpp_221_223;
reg [31:0] handle_small_bpp_221_223_reg;
reg  handle_small_bpp_221_224;
reg  handle_small_bpp_221_224_reg;
reg [31:0] handle_small_bpp_225_tmp142_1;
reg [31:0] handle_small_bpp_225_tmp142_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_225_scevgep143_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_225_scevgep143_1_reg;
reg [31:0] handle_small_bpp_225_226;
reg [31:0] handle_small_bpp_225_226_reg;
reg [31:0] handle_small_bpp_225_227;
reg [31:0] handle_small_bpp_225_227_reg;
reg [31:0] handle_small_bpp_225_228;
reg [31:0] handle_small_bpp_225_228_reg;
reg [31:0] handle_small_bpp_225__pre184;
reg [31:0] handle_small_bpp_225__pre184_reg;
reg [31:0] handle_small_bpp_229_230;
reg [31:0] handle_small_bpp_229_230_reg;
reg [31:0] handle_small_bpp_229_231;
reg [31:0] handle_small_bpp_229_231_reg;
reg  handle_small_bpp_229_232;
reg  handle_small_bpp_229_232_reg;
reg [31:0] handle_small_bpp_233_tmp142_2;
reg [31:0] handle_small_bpp_233_tmp142_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_233_scevgep143_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_233_scevgep143_2_reg;
reg [31:0] handle_small_bpp_233_234;
reg [31:0] handle_small_bpp_233_234_reg;
reg [31:0] handle_small_bpp_233_235;
reg [31:0] handle_small_bpp_233_235_reg;
reg [31:0] handle_small_bpp_233_236;
reg [31:0] handle_small_bpp_233_236_reg;
reg [31:0] handle_small_bpp_233__pre185;
reg [31:0] handle_small_bpp_233__pre185_reg;
reg [31:0] handle_small_bpp_237_238;
reg [31:0] handle_small_bpp_237_238_reg;
reg [31:0] handle_small_bpp_237_239;
reg [31:0] handle_small_bpp_237_239_reg;
reg  handle_small_bpp_237_240;
reg  handle_small_bpp_237_240_reg;
reg [31:0] handle_small_bpp_241_tmp142_3;
reg [31:0] handle_small_bpp_241_tmp142_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_241_scevgep143_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_241_scevgep143_3_reg;
reg [31:0] handle_small_bpp_241_242;
reg [31:0] handle_small_bpp_241_242_reg;
reg [31:0] handle_small_bpp_241_243;
reg [31:0] handle_small_bpp_241_243_reg;
reg [31:0] handle_small_bpp_241_244;
reg [31:0] handle_small_bpp_241_244_reg;
reg [31:0] handle_small_bpp_241__pre186;
reg [31:0] handle_small_bpp_241__pre186_reg;
reg [31:0] handle_small_bpp_245_246;
reg [31:0] handle_small_bpp_245_246_reg;
reg [31:0] handle_small_bpp_245_247;
reg [31:0] handle_small_bpp_245_247_reg;
reg  handle_small_bpp_245_248;
reg  handle_small_bpp_245_248_reg;
reg [31:0] handle_small_bpp_249_tmp142_4;
reg [31:0] handle_small_bpp_249_tmp142_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_249_scevgep143_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_249_scevgep143_4_reg;
reg [31:0] handle_small_bpp_249_250;
reg [31:0] handle_small_bpp_249_250_reg;
reg [31:0] handle_small_bpp_249_251;
reg [31:0] handle_small_bpp_249_251_reg;
reg [31:0] handle_small_bpp_249_252;
reg [31:0] handle_small_bpp_249_252_reg;
reg [31:0] handle_small_bpp_249__pre187;
reg [31:0] handle_small_bpp_249__pre187_reg;
reg [31:0] handle_small_bpp_253_254;
reg [31:0] handle_small_bpp_253_254_reg;
reg [31:0] handle_small_bpp_253_255;
reg [31:0] handle_small_bpp_253_255_reg;
reg  handle_small_bpp_253_256;
reg  handle_small_bpp_253_256_reg;
reg [31:0] handle_small_bpp_257_tmp142_5;
reg [31:0] handle_small_bpp_257_tmp142_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_257_scevgep143_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_257_scevgep143_5_reg;
reg [31:0] handle_small_bpp_257_258;
reg [31:0] handle_small_bpp_257_258_reg;
reg [31:0] handle_small_bpp_257_259;
reg [31:0] handle_small_bpp_257_259_reg;
reg [31:0] handle_small_bpp_257_260;
reg [31:0] handle_small_bpp_257_260_reg;
reg [31:0] handle_small_bpp_257__pre188;
reg [31:0] handle_small_bpp_257__pre188_reg;
reg  handle_small_bpp__loopexit36_261;
reg  handle_small_bpp__loopexit36_261_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_262_scevgep143_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_262_scevgep143_6_reg;
reg [31:0] handle_small_bpp_262_263;
reg [31:0] handle_small_bpp_262_263_reg;
reg [31:0] handle_small_bpp_262_264;
reg [31:0] handle_small_bpp_262_264_reg;
reg [31:0] handle_small_bpp_262_265;
reg [31:0] handle_small_bpp_262_265_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] handle_small_bpp_signed_divide_32_0_op0;
reg [31:0] handle_small_bpp_signed_divide_32_0_op1;
wire [31:0] lpm_divide_handle_small_bpp_16_18_temp_out;
wire [31:0] handle_small_bpp_16_18_unused;
reg  lpm_divide_handle_small_bpp_16_18_en;
reg [31:0] lpm_divide_handle_small_bpp_16_18_out;
reg [31:0] handle_small_bpp_signed_divide_32_0;
reg  lpm_mult_handle_small_bpp_30_tmp152_en;
reg [31:0] handle_small_bpp_30_tmp152_stage0_reg;
reg  lpm_divide_handle_small_bpp_67_69_en;
reg  lpm_mult_handle_small_bpp_106_tmp115_en;
reg [31:0] handle_small_bpp_106_tmp115_stage0_reg;
reg  lpm_mult_handle_small_bpp_118_123_en;
reg [31:0] handle_small_bpp_118_123_stage0_reg;
reg  lpm_mult_handle_small_bpp_131_136_en;
reg [31:0] handle_small_bpp_131_136_stage0_reg;
reg  lpm_mult_handle_small_bpp_144_148_en;
reg [31:0] handle_small_bpp_144_148_stage0_reg;
reg  lpm_mult_handle_small_bpp_152_tmp89_en;
reg [31:0] handle_small_bpp_152_tmp89_stage0_reg;
reg  lpm_mult_handle_small_bpp_152_155_en;
reg [31:0] handle_small_bpp_152_155_stage0_reg;
reg  lpm_mult_handle_small_bpp_152_159_en;
reg [31:0] handle_small_bpp_152_159_stage0_reg;
reg  lpm_mult_handle_small_bpp_152_163_en;
reg [31:0] handle_small_bpp_152_163_stage0_reg;
reg  lpm_mult_handle_small_bpp_152_166_en;
reg [31:0] handle_small_bpp_152_166_stage0_reg;
reg  lpm_divide_handle_small_bpp_181_183_en;
reg  lpm_mult_handle_small_bpp_196_tmp68_en;
reg [31:0] handle_small_bpp_196_tmp68_stage0_reg;
reg  lpm_mult_handle_small_bpp_202_206_en;
reg [31:0] handle_small_bpp_202_206_stage0_reg;
reg  lpm_mult_handle_small_bpp_210_tmp49_en;
reg [31:0] handle_small_bpp_210_tmp49_stage0_reg;
reg  lpm_mult_handle_small_bpp_210_213_en;
reg [31:0] handle_small_bpp_210_213_stage0_reg;
reg  lpm_mult_handle_small_bpp_210_216_en;
reg [31:0] handle_small_bpp_210_216_stage0_reg;

/*   %18 = sdiv i32 %17, 8*/
lpm_divide lpm_divide_handle_small_bpp_16_18 (
	.quotient (lpm_divide_handle_small_bpp_16_18_temp_out),
	.remain (handle_small_bpp_16_18_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_handle_small_bpp_16_18_en),
	.numer (handle_small_bpp_signed_divide_32_0_op0),
	.denom (handle_small_bpp_signed_divide_32_0_op1)
);

defparam
	lpm_divide_handle_small_bpp_16_18.lpm_pipeline = 32,
	lpm_divide_handle_small_bpp_16_18.lpm_widthn = 32,
	lpm_divide_handle_small_bpp_16_18.lpm_widthd = 32,
	lpm_divide_handle_small_bpp_16_18.lpm_drepresentation = "SIGNED",
	lpm_divide_handle_small_bpp_16_18.lpm_nrepresentation = "SIGNED",
	lpm_divide_handle_small_bpp_16_18.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_0_2 == 32'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_0_2 == 32'd2)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_92;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_0_2 == 32'd4)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_222;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_handle_small_bpp_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_0_2 != 32'd1)) & (handle_small_bpp_0_2 != 32'd2)) & (handle_small_bpp_0_2 != 32'd4)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_3_6 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_7;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_3_6) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_3_6 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_7_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_7;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_8;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_7_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_8;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_7_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_9;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_7_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_7_9;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_7_9) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_7_10 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_10;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_7_9) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_7_10 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_10;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_11;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_11;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_12;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_12;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_13;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_13;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_14;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph45_14;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph45_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_18;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_18;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_19;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_19;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_20;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_20;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_21;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_21;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_22;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_22;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_23;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_23;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_24;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_24;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_25;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_25;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_26;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_26;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_27;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_27;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_28;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_28;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_29;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_29;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_30;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_30;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_31;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_31;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_32;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_32;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_33;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_33;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_34;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_34;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_35;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_35;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_36;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_36;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_37;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_37;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_38;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_38;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_40;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_40;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_41;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_41;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_42;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_42;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_43;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_43;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_44;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_44;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_45;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_45;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_46;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_46;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_47;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_47;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_48;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_48;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_49;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_16_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_49;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_16_49) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_16_21_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_50;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_16_49) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_16_21_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_26_56;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_26_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_50;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_51;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_51;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_52;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_52;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_53;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_53;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_54;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_54;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_55;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_22_55;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_22_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_26_56;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_26_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_26_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_26_56;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_26_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_26_56) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_26_29 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_221_312;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_221_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_26_56) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_26_29 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_313;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph40_57;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph40_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph40_58;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph40_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph40_58;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph40_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_59;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_59;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_60;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_60;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_61;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_61;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_62;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_62;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_63;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_63;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_64;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_64;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_65;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_65;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_66;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_66;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_67;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_67;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_68;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_68;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_69;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_69;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_70;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_70;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_71;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_71;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_72;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_72;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_73;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_73;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_74;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_74;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_75;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_75;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_76;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_76;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_77;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_77;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_78;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_78;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_79;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_79;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_80;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_80;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_81;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_81;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_82;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_82;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_83;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_83;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_84;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_30_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_84;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_30_84) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_30_exitcond151_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_30_84) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_30_exitcond151_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_30_59;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_30_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_loopexit_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_86;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_86;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_87;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_87;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_88;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_88;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_88) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp___crit_edge_54 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_89;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_88) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp___crit_edge_54 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_89;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_90;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_90;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_91;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge195_91;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge195_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_57_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_92;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_57_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_93;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_57_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_93;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_57_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_94;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_57_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_57_94;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_57_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_57_94) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_57_60 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_95;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_57_94) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_57_60 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_95;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_96;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_96;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_97;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_97;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_98;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_98;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_99;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph35_99;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph35_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_100;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_100;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_101;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_101;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_102;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_102;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_103;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_103;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_104;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_104;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_105;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_105;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_106;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_106;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_107;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_107;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_108;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_108;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_109;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_109;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_110;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_110;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_111;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_111;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_112;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_112;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_113;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_113;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_114;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_114;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_115;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_115;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_116;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_116;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_117;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_117;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_118;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_118;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_119;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_119;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_120;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_120;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_121;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_121;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_122;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_122;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_123;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_123;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_124;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_124;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_125;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_125;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_126;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_126;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_127;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_127;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_128;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_128;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_129;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_129;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_130;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_130;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_131;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_131;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_132;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_132;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_133;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_133;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_134;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_67_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_134;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_67_134) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_71_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_74_135;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_74_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_67_134) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_71_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_117_171;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_117_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_74_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_74_135;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_74_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_74_135) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_136;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_74_135) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_83_142;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_83_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_136;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_137;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_137;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_138;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_138;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_139;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_139;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_140;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_140;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_141;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_75_141;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_75_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_83_142;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_83_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_83_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_83_142;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_83_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_83_142) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_83_86 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_143;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_83_142) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_83_86 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_95_149;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_95_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_143;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_144;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_144;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_145;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_145;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_146;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_146;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_147;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_147;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_148;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_87_148;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_87_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_95_149;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_95_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_95_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_95_149;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_95_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_95_149) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_95_98 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader25_154;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader25_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_95_149) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_95_98 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_150;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_150;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_151;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_151;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_152;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_152;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_153;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_99_153;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_99_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_99_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader25_154;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader25_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__preheader25_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader25_154;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader25_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader25_154) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader25_105 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph29_155;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph29_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader25_154) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader25_105 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_216;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph29_155;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph29_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph29_156;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph29_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph29_156;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph29_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_157;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_157;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_158;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_158;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_159;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_159;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_160;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_160;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_161;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_161;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_162;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_162;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_163;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_163;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_164;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_164;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_165;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_165;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_166;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_166;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_167;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_167;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_168;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_168;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_169;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_169;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_170;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_106_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_170;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_106_170) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_106_exitcond114_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_106_170) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_106_exitcond114_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_106_157;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_106_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_117_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_117_171;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_117_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_117_171) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_172;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_117_171) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_127_179;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_127_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_172;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_173;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_173;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_174;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_174;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_175;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_175;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_176;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_176;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_177;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_177;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_178;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_118_178;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_118_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_127_179;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_127_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_127_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_127_179;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_127_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_127_179) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_127_130 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_180;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_127_179) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_127_130 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_140_187;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_140_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_180;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_181;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_181;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_182;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_182;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_183;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_183;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_184;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_184;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_185;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_185;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_186;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_131_186;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_131_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_140_187;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_140_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_140_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_140_187;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_140_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_140_187) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_140_143 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader20_193;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader20_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_140_187) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_140_143 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_188;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_188;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_189;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_189;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_190;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_190;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_191;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_191;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_192;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_144_192;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_144_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_144_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader20_193;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader20_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__preheader20_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader20_193;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader20_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader20_193) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader20_151 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph24_194;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph24_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader20_193) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader20_151 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_216;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph24_194;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph24_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph24_195;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph24_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph24_195;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph24_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_196;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_196;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_197;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_197;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_198;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_198;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_199;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_199;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_200;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_200;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_201;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_201;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_202;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_202;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_203;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_203;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_204;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_204;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_205;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_205;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_206;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_206;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_207;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_207;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_208;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_208;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_209;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_209;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_210;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_210;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_211;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_211;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_212;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_212;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_213;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_152_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_213;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_152_213) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_152_exitcond88_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_152_213) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_152_exitcond88_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_152_196;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_152_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_216;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_loopexit2_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_216;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_216;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_217;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_217;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_218;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit21_218;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit21_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_218) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit21_168 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_219;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_218) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit21_168 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_219;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_220;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_220;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_221;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge194_221;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge194_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_67_100;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_67_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_171_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_222;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_171_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_223;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_171_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_223;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_171_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_224;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_171_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_171_224;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_171_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_171_224) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_171_174 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_225;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_171_224) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_171_174 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_225;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_226;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_226;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_227;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_227;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_228;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_228;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_229;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph19_229;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph19_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_230;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_230;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_231;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_231;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_232;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_232;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_233;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_233;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_234;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_234;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_235;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_235;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_236;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_236;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_237;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_237;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_238;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_238;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_239;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_239;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_240;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_240;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_241;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_241;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_242;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_242;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_243;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_243;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_244;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_244;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_245;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_245;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_246;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_246;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_247;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_247;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_248;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_248;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_249;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_249;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_250;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_250;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_251;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_251;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_252;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_252;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_253;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_253;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_254;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_254;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_255;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_255;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_256;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_256;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_257;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_257;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_258;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_258;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_259;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_259;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_260;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_260) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_260;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_260) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_261;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_261) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_261;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_261) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_262;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_262) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_262;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_262) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_263;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_263) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_263;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_263) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_264;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_181_264) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_264;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_181_264) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_185_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_188_265;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_188_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_181_264) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_185_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_201_281;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_201_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_188_265) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_188_265;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_188_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_188_265) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_187_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_266;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_188_265) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_187_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader9_270;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader9_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_266) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_266;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_266) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_267;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_267) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_267;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_267) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_268;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_268) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_268;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_268) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_269;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_269) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_189_269;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_189_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_189_269) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader9_270;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader9_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__preheader9_270) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader9_270;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader9_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader9_270) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader9_195 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph13_271;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph13_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader9_270) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader9_195 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_302;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph13_271;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph13_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph13_272;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph13_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_272) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph13_272;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph13_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_272) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_273;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_273) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_273;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_273) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_274;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_274) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_274;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_274) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_275;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_275) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_275;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_275) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_276;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_276) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_276;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_276) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_277;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_277) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_277;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_277) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_278;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_278) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_278;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_278) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_279;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_279) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_279;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_279) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_280;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_196_280) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_280;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_196_280) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_196_exitcond67_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_196_280) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_196_exitcond67_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_196_273;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_196_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_201_281) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_201_281;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_201_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_201_281) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_187_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_282;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_201_281) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_181_187_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader_287;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_282) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_282;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_282) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_283;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_283) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_283;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_283) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_284;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_284) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_284;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_284) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_285;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_285) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_285;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_285) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_286;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_286) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_202_286;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_202_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_202_286) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader_287;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__preheader_287) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__preheader_287;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__preheader_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader_287) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader_209 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph_288;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__preheader_287) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__preheader_209 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_302;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph_288;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph_289;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_289) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph_289;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_289) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_290;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_290) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_290;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_290) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_291;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_291) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_291;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_291) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_292;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_292) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_292;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_292) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_293;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_293) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_293;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_293) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_294;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_294) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_294;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_294) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_295;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_295) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_295;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_295) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_296;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_296) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_296;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_296) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_297;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_297) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_297;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_297) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_298;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_298) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_298;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_298) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_299;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_210_299) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_299;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_210_299) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_210_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_210_299) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_210_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_210_290;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_210_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_loopexit_300) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_302;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_loopexit1_301) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_302;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_302;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_303;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_303) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_303;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_303) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_304;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_304) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit_304;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_304) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit_218 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_305;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_304) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit_218 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_305;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_306;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_306) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_306;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_306) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_307;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge193_307;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge193_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_181_230;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_181_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit_308) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit3_309) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_loopexit4_310) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_311) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit14_311;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit14_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_311) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_221_312) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_221_312;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_221_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_221_312) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_221_224 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_229_319;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_229_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_221_312) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_221_224 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_320;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_313) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_313;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_313) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_314;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_314) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_314;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_314) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_315;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_315) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_315;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_315) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_316;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_316) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_316;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_316) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_317;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_317) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_317;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_317) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_318;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_318) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_225_318;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_225_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_318) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_221_312;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_221_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_229_319) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_229_319;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_229_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_229_319) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_229_232 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_237_326;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_237_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_229_319) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_229_232 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_327;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_320) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_320;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_320) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_321;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_321) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_321;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_321) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_322;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_322) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_322;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_322) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_323;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_323) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_323;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_323) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_324;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_324) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_324;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_324) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_325;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_325) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_233_325;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_233_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_325) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_229_319;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_229_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_237_326) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_237_326;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_237_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_237_326) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_237_240 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_245_333;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_245_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_237_326) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_237_240 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_334;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_327) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_327;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_327) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_328;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_328) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_328;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_328) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_329;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_329) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_329;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_329) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_330;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_330) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_330;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_330) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_331;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_331) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_331;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_331) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_332;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_332) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_241_332;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_241_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_332) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_237_326;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_237_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_245_333) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_245_333;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_245_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_245_333) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_245_248 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_253_340;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_253_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_245_333) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_245_248 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_341;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_334) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_334;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_334) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_335;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_335) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_335;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_335) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_336;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_336) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_336;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_336) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_337;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_337) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_337;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_337) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_338;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_338) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_338;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_338) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_339;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_339) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_249_339;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_249_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_339) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_245_333;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_245_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_253_340) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_253_340;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_253_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_253_340) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_253_256 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit36_347;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit36_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_253_340) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_253_256 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_348;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_341) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_341;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_341) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_342;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_342) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_342;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_342) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_343;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_343) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_343;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_343) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_344;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_344) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_344;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_344) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_345;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_345) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_345;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_345) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_346;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_346) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_257_346;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_257_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_346) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_253_340;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_253_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit36_347) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit36_347;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit36_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit36_347) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit36_261 == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__lr_ph40_57;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__lr_ph40_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit36_347) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp__loopexit36_261 == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB___crit_edge_86;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB___crit_edge_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_348) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_348;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_348) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_349;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_349) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_349;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_349) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_350;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_350) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_350;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_350) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_351;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_351) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB_262_351;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB_262_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_handle_small_bpp_BB_262_351) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_handle_small_bpp_BB__loopexit36_347;
if (reset == 1'b0 && ^(LEGUP_F_handle_small_bpp_BB__loopexit36_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
begin
handle_small_bpp_0_1 = arg_s;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_1))
begin
handle_small_bpp_0_1_reg <= handle_small_bpp_0_1;
if (reset == 1'b0 && ^(handle_small_bpp_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_0_1_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
handle_small_bpp_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_3))
begin
handle_small_bpp_0_2_reg <= handle_small_bpp_0_2;
if (reset == 1'b0 && ^(handle_small_bpp_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_0_2_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %3*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
handle_small_bpp_3_4 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %3*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_4))
begin
handle_small_bpp_3_4_reg <= handle_small_bpp_3_4;
if (reset == 1'b0 && ^(handle_small_bpp_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_3_4_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
handle_small_bpp_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_6))
begin
handle_small_bpp_3_5_reg <= handle_small_bpp_3_5;
if (reset == 1'b0 && ^(handle_small_bpp_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_3_5_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %3*/
/*   %6 = icmp eq i32 %5, 0*/
begin
handle_small_bpp_3_6 = (handle_small_bpp_3_5 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %3*/
/*   %6 = icmp eq i32 %5, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_6))
begin
handle_small_bpp_3_6_reg <= handle_small_bpp_3_6;
if (reset == 1'b0 && ^(handle_small_bpp_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_3_6_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %7*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
begin
handle_small_bpp_7_8 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %7*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_7))
begin
handle_small_bpp_7_8_reg <= handle_small_bpp_7_8;
if (reset == 1'b0 && ^(handle_small_bpp_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_7_8_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
handle_small_bpp_7_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_9))
begin
handle_small_bpp_7_9_reg <= handle_small_bpp_7_9;
if (reset == 1'b0 && ^(handle_small_bpp_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_7_9_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %7*/
/*   %10 = icmp sgt i32 %9, 0*/
begin
handle_small_bpp_7_10 = ($signed(handle_small_bpp_7_9) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %7*/
/*   %10 = icmp sgt i32 %9, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_9))
begin
handle_small_bpp_7_10_reg <= handle_small_bpp_7_10;
if (reset == 1'b0 && ^(handle_small_bpp_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_7_10_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %11 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
begin
handle_small_bpp__lr_ph45_11 = arg_p;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %11 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
handle_small_bpp__lr_ph45_11_reg <= handle_small_bpp__lr_ph45_11;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph45_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph45_11_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph45_12 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12))
begin
handle_small_bpp__lr_ph45_12_reg <= handle_small_bpp__lr_ph45_12;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph45_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph45_12_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph45_13 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14))
begin
handle_small_bpp__lr_ph45_13_reg <= handle_small_bpp__lr_ph45_13;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph45_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph45_13_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
begin
handle_small_bpp__lr_ph45_14 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
handle_small_bpp__lr_ph45_14_reg <= handle_small_bpp__lr_ph45_14;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph45_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph45_14_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %15 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
begin
handle_small_bpp__lr_ph45_15 = (arg_s + 16);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph45*/
/*   %15 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
handle_small_bpp__lr_ph45_15_reg <= handle_small_bpp__lr_ph45_15;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph45_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph45_15_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %j.043 = phi i32 [ 1, %.lr.ph45 ], [ %phitmp197, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_j_043 = 32'd1;
end
/* handle_small_bpp: %16*/
/*   %j.043 = phi i32 [ 1, %.lr.ph45 ], [ %phitmp197, %._crit_edge195 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_16_j_043 = handle_small_bpp___crit_edge195_phitmp197_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %j.043 = phi i32 [ 1, %.lr.ph45 ], [ %phitmp197, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_j_043_reg <= handle_small_bpp_16_j_043;
if (reset == 1'b0 && ^(handle_small_bpp_16_j_043) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_j_043_reg"); $finish; end
end
/* handle_small_bpp: %16*/
/*   %j.043 = phi i32 [ 1, %.lr.ph45 ], [ %phitmp197, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_j_043_reg <= handle_small_bpp_16_j_043;
if (reset == 1'b0 && ^(handle_small_bpp_16_j_043) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_j_043_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %pd.042 = phi i32* [ %13, %.lr.ph45 ], [ %56, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_pd_042 = handle_small_bpp__lr_ph45_13;
end
/* handle_small_bpp: %16*/
/*   %pd.042 = phi i32* [ %13, %.lr.ph45 ], [ %56, %._crit_edge195 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_16_pd_042 = handle_small_bpp___crit_edge195_56;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %pd.042 = phi i32* [ %13, %.lr.ph45 ], [ %56, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_14) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_pd_042_reg <= handle_small_bpp_16_pd_042;
if (reset == 1'b0 && ^(handle_small_bpp_16_pd_042) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_pd_042_reg"); $finish; end
end
/* handle_small_bpp: %16*/
/*   %pd.042 = phi i32* [ %13, %.lr.ph45 ], [ %56, %._crit_edge195 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_16_pd_042_reg <= handle_small_bpp_16_pd_042;
if (reset == 1'b0 && ^(handle_small_bpp_16_pd_042) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_pd_042_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_16_17 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_17))
begin
handle_small_bpp_16_17_reg <= handle_small_bpp_16_17;
if (reset == 1'b0 && ^(handle_small_bpp_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_17_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_16_18 = handle_small_bpp_signed_divide_32_0;
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %18 = sdiv i32 %17, 8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_49))
begin
handle_small_bpp_16_18_reg <= handle_small_bpp_16_18;
if (reset == 1'b0 && ^(handle_small_bpp_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_18_reg"); $finish; end
end
/* handle_small_bpp: %16*/
/*   %18 = sdiv i32 %17, 8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_49))
begin
handle_small_bpp_16_18_reg <= handle_small_bpp_16_18;
if (reset == 1'b0 && ^(handle_small_bpp_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_18_reg"); $finish; end
end
/* handle_small_bpp: %67*/
/*   %69 = sdiv i32 %68, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_134))
begin
handle_small_bpp_16_18_reg <= handle_small_bpp_67_69;
if (reset == 1'b0 && ^(handle_small_bpp_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_18_reg"); $finish; end
end
/* handle_small_bpp: %181*/
/*   %183 = sdiv i32 %182, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_264))
begin
handle_small_bpp_16_18_reg <= handle_small_bpp_181_183;
if (reset == 1'b0 && ^(handle_small_bpp_181_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_18_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %19 = getelementptr inbounds i32* %pd.042, i32 %18*/
begin
handle_small_bpp_16_19 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_16_18));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %19 = getelementptr inbounds i32* %pd.042, i32 %18*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_49))
begin
handle_small_bpp_16_19_reg <= handle_small_bpp_16_19;
if (reset == 1'b0 && ^(handle_small_bpp_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_19_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %tmp140 = shl i32 %18, 3*/
begin
handle_small_bpp_16_tmp140 = (handle_small_bpp_16_18 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %tmp140 = shl i32 %18, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_49))
begin
handle_small_bpp_16_tmp140_reg <= handle_small_bpp_16_tmp140;
if (reset == 1'b0 && ^(handle_small_bpp_16_tmp140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_tmp140_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %tmp141183 = or i32 %tmp140, 6*/
begin
handle_small_bpp_16_tmp141183 = (handle_small_bpp_16_tmp140 | 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %tmp141183 = or i32 %tmp140, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_49))
begin
handle_small_bpp_16_tmp141183_reg <= handle_small_bpp_16_tmp141183;
if (reset == 1'b0 && ^(handle_small_bpp_16_tmp141183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_tmp141183_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %20 = and i32 %17, 7*/
begin
handle_small_bpp_16_20 = (handle_small_bpp_16_17 & 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %20 = and i32 %17, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_17))
begin
handle_small_bpp_16_20_reg <= handle_small_bpp_16_20;
if (reset == 1'b0 && ^(handle_small_bpp_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_20_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %21 = icmp eq i32 %20, 7*/
begin
handle_small_bpp_16_21 = (handle_small_bpp_16_20 == 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %16*/
/*   %21 = icmp eq i32 %20, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_17))
begin
handle_small_bpp_16_21_reg <= handle_small_bpp_16_21;
if (reset == 1'b0 && ^(handle_small_bpp_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_16_21_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %22*/
/*   %scevgep143 = getelementptr i32* %pd.042, i32 %tmp141183*/
begin
handle_small_bpp_22_scevgep143 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_16_tmp141183_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %22*/
/*   %scevgep143 = getelementptr i32* %pd.042, i32 %tmp141183*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_50))
begin
handle_small_bpp_22_scevgep143_reg <= handle_small_bpp_22_scevgep143;
if (reset == 1'b0 && ^(handle_small_bpp_22_scevgep143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_22_scevgep143_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_22_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
handle_small_bpp_22_23_reg <= handle_small_bpp_22_23;
if (reset == 1'b0 && ^(handle_small_bpp_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_22_23_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %22*/
/*   %24 = lshr i32 %23, 1*/
begin
handle_small_bpp_22_24 = (handle_small_bpp_22_23 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %22*/
/*   %24 = lshr i32 %23, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
handle_small_bpp_22_24_reg <= handle_small_bpp_22_24;
if (reset == 1'b0 && ^(handle_small_bpp_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_22_24_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %22*/
/*   %25 = and i32 %24, 1*/
begin
handle_small_bpp_22_25 = (handle_small_bpp_22_24 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %22*/
/*   %25 = and i32 %24, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
handle_small_bpp_22_25_reg <= handle_small_bpp_22_25;
if (reset == 1'b0 && ^(handle_small_bpp_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_22_25_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_22__pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_55))
begin
handle_small_bpp_22__pre_reg <= handle_small_bpp_22__pre;
if (reset == 1'b0 && ^(handle_small_bpp_22__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_22__pre_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %26*/
/*   %27 = phi i32 [ %17, %16 ], [ %.pre, %22 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_16_49) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_16_21_reg == 1'd0)))
begin
handle_small_bpp_26_27 = handle_small_bpp_16_17_reg;
end
/* handle_small_bpp: %26*/
/*   %27 = phi i32 [ %17, %16 ], [ %.pre, %22 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_55) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_26_27 = handle_small_bpp_22__pre;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %26*/
/*   %27 = phi i32 [ %17, %16 ], [ %.pre, %22 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_16_49) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_16_21_reg == 1'd0)))
begin
handle_small_bpp_26_27_reg <= handle_small_bpp_26_27;
if (reset == 1'b0 && ^(handle_small_bpp_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_26_27_reg"); $finish; end
end
/* handle_small_bpp: %26*/
/*   %27 = phi i32 [ %17, %16 ], [ %.pre, %22 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_22_55) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_26_27_reg <= handle_small_bpp_26_27;
if (reset == 1'b0 && ^(handle_small_bpp_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_26_27_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %26*/
/*   %28 = and i32 %27, 6*/
begin
handle_small_bpp_26_28 = (handle_small_bpp_26_27_reg & 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %26*/
/*   %28 = and i32 %27, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_26_56))
begin
handle_small_bpp_26_28_reg <= handle_small_bpp_26_28;
if (reset == 1'b0 && ^(handle_small_bpp_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_26_28_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %26*/
/*   %29 = icmp ult i32 %28, 6*/
begin
handle_small_bpp_26_29 = (handle_small_bpp_26_28 < 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %26*/
/*   %29 = icmp ult i32 %28, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_26_56))
begin
handle_small_bpp_26_29_reg <= handle_small_bpp_26_29;
if (reset == 1'b0 && ^(handle_small_bpp_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_26_29_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp146 = add i32 %18, 1*/
begin
handle_small_bpp__lr_ph40_tmp146 = (handle_small_bpp_16_18_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp146 = add i32 %18, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp146_reg <= handle_small_bpp__lr_ph40_tmp146;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp146_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp147 = sub i32 0, %18*/
begin
handle_small_bpp__lr_ph40_tmp147 = (32'd0 - handle_small_bpp_16_18_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp147 = sub i32 0, %18*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp147_reg <= handle_small_bpp__lr_ph40_tmp147;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp147_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp148 = icmp sgt i32 %tmp147, -1*/
begin
handle_small_bpp__lr_ph40_tmp148 = ($signed(handle_small_bpp__lr_ph40_tmp147) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp148 = icmp sgt i32 %tmp147, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp148_reg <= handle_small_bpp__lr_ph40_tmp148;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp148_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %smax149 = select i1 %tmp148, i32 %tmp147, i32 -1*/
begin
handle_small_bpp__lr_ph40_smax149 = (handle_small_bpp__lr_ph40_tmp148 ? handle_small_bpp__lr_ph40_tmp147 : -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %smax149 = select i1 %tmp148, i32 %tmp147, i32 -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_smax149_reg <= handle_small_bpp__lr_ph40_smax149;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_smax149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_smax149_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp150 = add i32 %tmp146, %smax149*/
begin
handle_small_bpp__lr_ph40_tmp150 = (handle_small_bpp__lr_ph40_tmp146_reg + handle_small_bpp__lr_ph40_smax149_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp150 = add i32 %tmp146, %smax149*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_58))
begin
handle_small_bpp__lr_ph40_tmp150_reg <= handle_small_bpp__lr_ph40_tmp150;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp150_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp154 = add i32 %tmp140, -7*/
begin
handle_small_bpp__lr_ph40_tmp154 = (handle_small_bpp_16_tmp140_reg + -32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp154 = add i32 %tmp140, -7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp154_reg <= handle_small_bpp__lr_ph40_tmp154;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp154_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp157 = add i32 %tmp140, -6*/
begin
handle_small_bpp__lr_ph40_tmp157 = (handle_small_bpp_16_tmp140_reg + -32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp157 = add i32 %tmp140, -6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp157_reg <= handle_small_bpp__lr_ph40_tmp157;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp157_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp160 = add i32 %tmp140, -5*/
begin
handle_small_bpp__lr_ph40_tmp160 = (handle_small_bpp_16_tmp140_reg + -32'd5);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp160 = add i32 %tmp140, -5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp160_reg <= handle_small_bpp__lr_ph40_tmp160;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp160_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp163 = add i32 %tmp140, -4*/
begin
handle_small_bpp__lr_ph40_tmp163 = (handle_small_bpp_16_tmp140_reg + -32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp163 = add i32 %tmp140, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp163_reg <= handle_small_bpp__lr_ph40_tmp163;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp163_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp166 = add i32 %tmp140, -3*/
begin
handle_small_bpp__lr_ph40_tmp166 = (handle_small_bpp_16_tmp140_reg + -32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp166 = add i32 %tmp140, -3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp166_reg <= handle_small_bpp__lr_ph40_tmp166;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp166_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp169 = add i32 %tmp140, -2*/
begin
handle_small_bpp__lr_ph40_tmp169 = (handle_small_bpp_16_tmp140_reg + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp169 = add i32 %tmp140, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp169_reg <= handle_small_bpp__lr_ph40_tmp169;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp169_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp172 = add i32 %tmp140, -1*/
begin
handle_small_bpp__lr_ph40_tmp172 = (handle_small_bpp_16_tmp140_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp172 = add i32 %tmp140, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp172_reg <= handle_small_bpp__lr_ph40_tmp172;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp172_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp175 = add i32 %tmp140, -8*/
begin
handle_small_bpp__lr_ph40_tmp175 = (handle_small_bpp_16_tmp140_reg + -32'd8);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp175 = add i32 %tmp140, -8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp175_reg <= handle_small_bpp__lr_ph40_tmp175;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp175_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp179 = add i32 %18, -1*/
begin
handle_small_bpp__lr_ph40_tmp179 = (handle_small_bpp_16_18_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph40*/
/*   %tmp179 = add i32 %18, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_57))
begin
handle_small_bpp__lr_ph40_tmp179_reg <= handle_small_bpp__lr_ph40_tmp179;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph40_tmp179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph40_tmp179_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %indvar144 = phi i32 [ 0, %.lr.ph40 ], [ %indvar.next145, %30 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_58) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_30_indvar144 = 32'd0;
end
/* handle_small_bpp: %30*/
/*   %indvar144 = phi i32 [ 0, %.lr.ph40 ], [ %indvar.next145, %30 ]*/
else /* if ((((cur_state == LEGUP_F_handle_small_bpp_BB_30_84) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_30_exitcond151_reg == 1'd0))) */
begin
handle_small_bpp_30_indvar144 = handle_small_bpp_30_indvar_next145_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %indvar144 = phi i32 [ 0, %.lr.ph40 ], [ %indvar.next145, %30 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph40_58) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_30_indvar144_reg <= handle_small_bpp_30_indvar144;
if (reset == 1'b0 && ^(handle_small_bpp_30_indvar144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_indvar144_reg"); $finish; end
end
/* handle_small_bpp: %30*/
/*   %indvar144 = phi i32 [ 0, %.lr.ph40 ], [ %indvar.next145, %30 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_30_84) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_30_exitcond151_reg == 1'd0)))
begin
handle_small_bpp_30_indvar144_reg <= handle_small_bpp_30_indvar144;
if (reset == 1'b0 && ^(handle_small_bpp_30_indvar144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_indvar144_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_30_tmp152 = handle_small_bpp_30_tmp152_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp152 = mul i32 %indvar144, -8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp152_reg <= handle_small_bpp_30_tmp152;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp152_reg"); $finish; end
end
/* handle_small_bpp: %30*/
/*   %tmp152 = mul i32 %indvar144, -8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp152_reg <= handle_small_bpp_30_tmp152;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp152_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp155 = add i32 %tmp154, %tmp152*/
begin
handle_small_bpp_30_tmp155 = (handle_small_bpp__lr_ph40_tmp154_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp155 = add i32 %tmp154, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp155_reg <= handle_small_bpp_30_tmp155;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp155_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep156 = getelementptr i32* %pd.042, i32 %tmp155*/
begin
handle_small_bpp_30_scevgep156 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp155_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep156 = getelementptr i32* %pd.042, i32 %tmp155*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep156_reg <= handle_small_bpp_30_scevgep156;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep156_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp158 = add i32 %tmp157, %tmp152*/
begin
handle_small_bpp_30_tmp158 = (handle_small_bpp__lr_ph40_tmp157_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp158 = add i32 %tmp157, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp158_reg <= handle_small_bpp_30_tmp158;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp158_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep159 = getelementptr i32* %pd.042, i32 %tmp158*/
begin
handle_small_bpp_30_scevgep159 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp158_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep159 = getelementptr i32* %pd.042, i32 %tmp158*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep159_reg <= handle_small_bpp_30_scevgep159;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep159_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp161 = add i32 %tmp160, %tmp152*/
begin
handle_small_bpp_30_tmp161 = (handle_small_bpp__lr_ph40_tmp160_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp161 = add i32 %tmp160, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp161_reg <= handle_small_bpp_30_tmp161;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp161_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep162 = getelementptr i32* %pd.042, i32 %tmp161*/
begin
handle_small_bpp_30_scevgep162 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp161_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep162 = getelementptr i32* %pd.042, i32 %tmp161*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep162_reg <= handle_small_bpp_30_scevgep162;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep162_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp164 = add i32 %tmp163, %tmp152*/
begin
handle_small_bpp_30_tmp164 = (handle_small_bpp__lr_ph40_tmp163_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp164 = add i32 %tmp163, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp164_reg <= handle_small_bpp_30_tmp164;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp164_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep165 = getelementptr i32* %pd.042, i32 %tmp164*/
begin
handle_small_bpp_30_scevgep165 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp164_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep165 = getelementptr i32* %pd.042, i32 %tmp164*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep165_reg <= handle_small_bpp_30_scevgep165;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep165_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp167 = add i32 %tmp166, %tmp152*/
begin
handle_small_bpp_30_tmp167 = (handle_small_bpp__lr_ph40_tmp166_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp167 = add i32 %tmp166, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp167_reg <= handle_small_bpp_30_tmp167;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp167_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep168 = getelementptr i32* %pd.042, i32 %tmp167*/
begin
handle_small_bpp_30_scevgep168 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp167_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep168 = getelementptr i32* %pd.042, i32 %tmp167*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep168_reg <= handle_small_bpp_30_scevgep168;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep168_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp170 = add i32 %tmp169, %tmp152*/
begin
handle_small_bpp_30_tmp170 = (handle_small_bpp__lr_ph40_tmp169_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp170 = add i32 %tmp169, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp170_reg <= handle_small_bpp_30_tmp170;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp170_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep171 = getelementptr i32* %pd.042, i32 %tmp170*/
begin
handle_small_bpp_30_scevgep171 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp170_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep171 = getelementptr i32* %pd.042, i32 %tmp170*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep171_reg <= handle_small_bpp_30_scevgep171;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep171_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp173 = add i32 %tmp172, %tmp152*/
begin
handle_small_bpp_30_tmp173 = (handle_small_bpp__lr_ph40_tmp172_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp173 = add i32 %tmp172, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp173_reg <= handle_small_bpp_30_tmp173;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp173_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep174 = getelementptr i32* %pd.042, i32 %tmp173*/
begin
handle_small_bpp_30_scevgep174 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp173_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep174 = getelementptr i32* %pd.042, i32 %tmp173*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep174_reg <= handle_small_bpp_30_scevgep174;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep174_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp176 = add i32 %tmp175, %tmp152*/
begin
handle_small_bpp_30_tmp176 = (handle_small_bpp__lr_ph40_tmp175_reg + handle_small_bpp_30_tmp152);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp176 = add i32 %tmp175, %tmp152*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_tmp176_reg <= handle_small_bpp_30_tmp176;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp176_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep177 = getelementptr i32* %pd.042, i32 %tmp176*/
begin
handle_small_bpp_30_scevgep177 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp176_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep177 = getelementptr i32* %pd.042, i32 %tmp176*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_61))
begin
handle_small_bpp_30_scevgep177_reg <= handle_small_bpp_30_scevgep177;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep177_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %tmp180 = sub i32 %tmp179, %indvar144*/
begin
handle_small_bpp_30_tmp180 = (handle_small_bpp__lr_ph40_tmp179_reg - handle_small_bpp_30_indvar144_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp180 = sub i32 %tmp179, %indvar144*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_59))
begin
handle_small_bpp_30_tmp180_reg <= handle_small_bpp_30_tmp180;
if (reset == 1'b0 && ^(handle_small_bpp_30_tmp180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_tmp180_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %scevgep181 = getelementptr i32* %pd.042, i32 %tmp180*/
begin
handle_small_bpp_30_scevgep181 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_30_tmp180_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %scevgep181 = getelementptr i32* %pd.042, i32 %tmp180*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
handle_small_bpp_30_scevgep181_reg <= handle_small_bpp_30_scevgep181;
if (reset == 1'b0 && ^(handle_small_bpp_30_scevgep181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_scevgep181_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
handle_small_bpp_30_31_reg <= handle_small_bpp_30_31;
if (reset == 1'b0 && ^(handle_small_bpp_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_31_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %32 = and i32 %31, 1*/
begin
handle_small_bpp_30_32 = (handle_small_bpp_30_31 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %32 = and i32 %31, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
handle_small_bpp_30_32_reg <= handle_small_bpp_30_32;
if (reset == 1'b0 && ^(handle_small_bpp_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_32_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_33 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
handle_small_bpp_30_33_reg <= handle_small_bpp_30_33;
if (reset == 1'b0 && ^(handle_small_bpp_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_33_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %34 = lshr i32 %33, 1*/
begin
handle_small_bpp_30_34 = (handle_small_bpp_30_33 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %34 = lshr i32 %33, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
handle_small_bpp_30_34_reg <= handle_small_bpp_30_34;
if (reset == 1'b0 && ^(handle_small_bpp_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_34_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %35 = and i32 %34, 1*/
begin
handle_small_bpp_30_35 = (handle_small_bpp_30_34 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %35 = and i32 %34, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
handle_small_bpp_30_35_reg <= handle_small_bpp_30_35;
if (reset == 1'b0 && ^(handle_small_bpp_30_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_35_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
handle_small_bpp_30_36_reg <= handle_small_bpp_30_36;
if (reset == 1'b0 && ^(handle_small_bpp_30_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_36_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %37 = lshr i32 %36, 2*/
begin
handle_small_bpp_30_37 = (handle_small_bpp_30_36 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %37 = lshr i32 %36, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
handle_small_bpp_30_37_reg <= handle_small_bpp_30_37;
if (reset == 1'b0 && ^(handle_small_bpp_30_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_37_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %38 = and i32 %37, 1*/
begin
handle_small_bpp_30_38 = (handle_small_bpp_30_37 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %38 = and i32 %37, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
handle_small_bpp_30_38_reg <= handle_small_bpp_30_38;
if (reset == 1'b0 && ^(handle_small_bpp_30_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_38_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
handle_small_bpp_30_39_reg <= handle_small_bpp_30_39;
if (reset == 1'b0 && ^(handle_small_bpp_30_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_39_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %40 = lshr i32 %39, 3*/
begin
handle_small_bpp_30_40 = (handle_small_bpp_30_39 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %40 = lshr i32 %39, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
handle_small_bpp_30_40_reg <= handle_small_bpp_30_40;
if (reset == 1'b0 && ^(handle_small_bpp_30_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_40_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %41 = and i32 %40, 1*/
begin
handle_small_bpp_30_41 = (handle_small_bpp_30_40 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %41 = and i32 %40, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
handle_small_bpp_30_41_reg <= handle_small_bpp_30_41;
if (reset == 1'b0 && ^(handle_small_bpp_30_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_41_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_42 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
handle_small_bpp_30_42_reg <= handle_small_bpp_30_42;
if (reset == 1'b0 && ^(handle_small_bpp_30_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_42_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %43 = lshr i32 %42, 4*/
begin
handle_small_bpp_30_43 = (handle_small_bpp_30_42 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %43 = lshr i32 %42, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
handle_small_bpp_30_43_reg <= handle_small_bpp_30_43;
if (reset == 1'b0 && ^(handle_small_bpp_30_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_43_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %44 = and i32 %43, 1*/
begin
handle_small_bpp_30_44 = (handle_small_bpp_30_43 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %44 = and i32 %43, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
handle_small_bpp_30_44_reg <= handle_small_bpp_30_44;
if (reset == 1'b0 && ^(handle_small_bpp_30_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_44_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_45 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
handle_small_bpp_30_45_reg <= handle_small_bpp_30_45;
if (reset == 1'b0 && ^(handle_small_bpp_30_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_45_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %46 = lshr i32 %45, 5*/
begin
handle_small_bpp_30_46 = (handle_small_bpp_30_45 >>> (32'd5 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %46 = lshr i32 %45, 5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
handle_small_bpp_30_46_reg <= handle_small_bpp_30_46;
if (reset == 1'b0 && ^(handle_small_bpp_30_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_46_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %47 = and i32 %46, 1*/
begin
handle_small_bpp_30_47 = (handle_small_bpp_30_46 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %47 = and i32 %46, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
handle_small_bpp_30_47_reg <= handle_small_bpp_30_47;
if (reset == 1'b0 && ^(handle_small_bpp_30_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_47_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
handle_small_bpp_30_48_reg <= handle_small_bpp_30_48;
if (reset == 1'b0 && ^(handle_small_bpp_30_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_48_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %49 = lshr i32 %48, 6*/
begin
handle_small_bpp_30_49 = (handle_small_bpp_30_48 >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %49 = lshr i32 %48, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
handle_small_bpp_30_49_reg <= handle_small_bpp_30_49;
if (reset == 1'b0 && ^(handle_small_bpp_30_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_49_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %50 = and i32 %49, 1*/
begin
handle_small_bpp_30_50 = (handle_small_bpp_30_49 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %50 = and i32 %49, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
handle_small_bpp_30_50_reg <= handle_small_bpp_30_50;
if (reset == 1'b0 && ^(handle_small_bpp_30_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_50_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
begin
handle_small_bpp_30_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
handle_small_bpp_30_51_reg <= handle_small_bpp_30_51;
if (reset == 1'b0 && ^(handle_small_bpp_30_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_51_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %52 = ashr i32 %51, 7*/
begin
handle_small_bpp_30_52 = ($signed(handle_small_bpp_30_51) >>> 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %52 = ashr i32 %51, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
handle_small_bpp_30_52_reg <= handle_small_bpp_30_52;
if (reset == 1'b0 && ^(handle_small_bpp_30_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_52_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %indvar.next145 = add i32 %indvar144, 1*/
begin
handle_small_bpp_30_indvar_next145 = (handle_small_bpp_30_indvar144_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %indvar.next145 = add i32 %indvar144, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_59))
begin
handle_small_bpp_30_indvar_next145_reg <= handle_small_bpp_30_indvar_next145;
if (reset == 1'b0 && ^(handle_small_bpp_30_indvar_next145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_indvar_next145_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %30*/
/*   %exitcond151 = icmp eq i32 %indvar.next145, %tmp150*/
begin
handle_small_bpp_30_exitcond151 = (handle_small_bpp_30_indvar_next145 == handle_small_bpp__lr_ph40_tmp150_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %exitcond151 = icmp eq i32 %indvar.next145, %tmp150*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_59))
begin
handle_small_bpp_30_exitcond151_reg <= handle_small_bpp_30_exitcond151;
if (reset == 1'b0 && ^(handle_small_bpp_30_exitcond151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_30_exitcond151_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
begin
handle_small_bpp___crit_edge_53 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_88))
begin
handle_small_bpp___crit_edge_53_reg <= handle_small_bpp___crit_edge_53;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge_53_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge*/
/*   %54 = icmp slt i32 %j.043, %53*/
begin
handle_small_bpp___crit_edge_54 = ($signed(handle_small_bpp_16_j_043_reg) < $signed(handle_small_bpp___crit_edge_53));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge*/
/*   %54 = icmp slt i32 %j.043, %53*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_88))
begin
handle_small_bpp___crit_edge_54_reg <= handle_small_bpp___crit_edge_54;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge_54_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
begin
handle_small_bpp___crit_edge195_55 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91))
begin
handle_small_bpp___crit_edge195_55_reg <= handle_small_bpp___crit_edge195_55;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge195_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge195_55_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %56 = getelementptr inbounds i32* %pd.042, i32 %55*/
begin
handle_small_bpp___crit_edge195_56 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp___crit_edge195_55));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %56 = getelementptr inbounds i32* %pd.042, i32 %55*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_91))
begin
handle_small_bpp___crit_edge195_56_reg <= handle_small_bpp___crit_edge195_56;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge195_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge195_56_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %phitmp197 = add i32 %j.043, 1*/
begin
handle_small_bpp___crit_edge195_phitmp197 = (handle_small_bpp_16_j_043_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge195*/
/*   %phitmp197 = add i32 %j.043, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89))
begin
handle_small_bpp___crit_edge195_phitmp197_reg <= handle_small_bpp___crit_edge195_phitmp197;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge195_phitmp197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge195_phitmp197_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %57*/
/*   %58 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
begin
handle_small_bpp_57_58 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %57*/
/*   %58 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_92))
begin
handle_small_bpp_57_58_reg <= handle_small_bpp_57_58;
if (reset == 1'b0 && ^(handle_small_bpp_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_57_58_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
begin
handle_small_bpp_57_59 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_94))
begin
handle_small_bpp_57_59_reg <= handle_small_bpp_57_59;
if (reset == 1'b0 && ^(handle_small_bpp_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_57_59_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %57*/
/*   %60 = icmp sgt i32 %59, 0*/
begin
handle_small_bpp_57_60 = ($signed(handle_small_bpp_57_59) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %57*/
/*   %60 = icmp sgt i32 %59, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_94))
begin
handle_small_bpp_57_60_reg <= handle_small_bpp_57_60;
if (reset == 1'b0 && ^(handle_small_bpp_57_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_57_60_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %61 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
begin
handle_small_bpp__lr_ph35_61 = arg_p;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %61 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
handle_small_bpp__lr_ph35_61_reg <= handle_small_bpp__lr_ph35_61;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_61_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph35_62 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97))
begin
handle_small_bpp__lr_ph35_62_reg <= handle_small_bpp__lr_ph35_62;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_62_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph35_63 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99))
begin
handle_small_bpp__lr_ph35_63_reg <= handle_small_bpp__lr_ph35_63;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_63_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %64 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
begin
handle_small_bpp__lr_ph35_64 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %64 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
handle_small_bpp__lr_ph35_64_reg <= handle_small_bpp__lr_ph35_64;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_64_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %65 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
handle_small_bpp__lr_ph35_65 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %65 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
handle_small_bpp__lr_ph35_65_reg <= handle_small_bpp__lr_ph35_65;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_65_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %66 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
begin
handle_small_bpp__lr_ph35_66 = (arg_s + 16);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph35*/
/*   %66 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
handle_small_bpp__lr_ph35_66_reg <= handle_small_bpp__lr_ph35_66;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph35_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph35_66_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %j2.034 = phi i32 [ 1, %.lr.ph35 ], [ %phitmp196, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_j2_034 = 32'd1;
end
/* handle_small_bpp: %67*/
/*   %j2.034 = phi i32 [ 1, %.lr.ph35 ], [ %phitmp196, %._crit_edge194 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_67_j2_034 = handle_small_bpp___crit_edge194_phitmp196_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %j2.034 = phi i32 [ 1, %.lr.ph35 ], [ %phitmp196, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_j2_034_reg <= handle_small_bpp_67_j2_034;
if (reset == 1'b0 && ^(handle_small_bpp_67_j2_034) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_j2_034_reg"); $finish; end
end
/* handle_small_bpp: %67*/
/*   %j2.034 = phi i32 [ 1, %.lr.ph35 ], [ %phitmp196, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_j2_034_reg <= handle_small_bpp_67_j2_034;
if (reset == 1'b0 && ^(handle_small_bpp_67_j2_034) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_j2_034_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %pd3.031 = phi i32* [ %63, %.lr.ph35 ], [ %170, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_pd3_031 = handle_small_bpp__lr_ph35_63;
end
/* handle_small_bpp: %67*/
/*   %pd3.031 = phi i32* [ %63, %.lr.ph35 ], [ %170, %._crit_edge194 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_67_pd3_031 = handle_small_bpp___crit_edge194_170;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %pd3.031 = phi i32* [ %63, %.lr.ph35 ], [ %170, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_99) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_pd3_031_reg <= handle_small_bpp_67_pd3_031;
if (reset == 1'b0 && ^(handle_small_bpp_67_pd3_031) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_pd3_031_reg"); $finish; end
end
/* handle_small_bpp: %67*/
/*   %pd3.031 = phi i32* [ %63, %.lr.ph35 ], [ %170, %._crit_edge194 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_67_pd3_031_reg <= handle_small_bpp_67_pd3_031;
if (reset == 1'b0 && ^(handle_small_bpp_67_pd3_031) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_pd3_031_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
begin
handle_small_bpp_67_68 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_67_68_reg <= handle_small_bpp_67_68;
if (reset == 1'b0 && ^(handle_small_bpp_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_68_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_67_69 = handle_small_bpp_signed_divide_32_0;
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %69 = sdiv i32 %68, 4*/
handle_small_bpp_67_69_reg = handle_small_bpp_16_18_reg;
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
begin
handle_small_bpp_67_70 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_67_70_reg <= handle_small_bpp_67_70;
if (reset == 1'b0 && ^(handle_small_bpp_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_70_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %71 = icmp eq i32 %70, 0*/
begin
handle_small_bpp_67_71 = (handle_small_bpp_67_70 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %71 = icmp eq i32 %70, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_67_71_reg <= handle_small_bpp_67_71;
if (reset == 1'b0 && ^(handle_small_bpp_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_71_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %72 = and i32 %68, 3*/
begin
handle_small_bpp_67_72 = (handle_small_bpp_67_68 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %72 = and i32 %68, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_67_72_reg <= handle_small_bpp_67_72;
if (reset == 1'b0 && ^(handle_small_bpp_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_72_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %67*/
/*   %73 = icmp eq i32 %72, 3*/
begin
handle_small_bpp_67_73 = (handle_small_bpp_67_72 == 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %67*/
/*   %73 = icmp eq i32 %72, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_67_73_reg <= handle_small_bpp_67_73;
if (reset == 1'b0 && ^(handle_small_bpp_67_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_67_73_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %76 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_75_76 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %76 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
handle_small_bpp_75_76_reg <= handle_small_bpp_75_76;
if (reset == 1'b0 && ^(handle_small_bpp_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_76_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
begin
handle_small_bpp_75_77 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
handle_small_bpp_75_77_reg <= handle_small_bpp_75_77;
if (reset == 1'b0 && ^(handle_small_bpp_75_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_77_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %78 = lshr i32 %77, 2*/
begin
handle_small_bpp_75_78 = (handle_small_bpp_75_77 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %78 = lshr i32 %77, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
handle_small_bpp_75_78_reg <= handle_small_bpp_75_78;
if (reset == 1'b0 && ^(handle_small_bpp_75_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_78_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %79 = and i32 %78, 3*/
begin
handle_small_bpp_75_79 = (handle_small_bpp_75_78 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %79 = and i32 %78, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
handle_small_bpp_75_79_reg <= handle_small_bpp_75_79;
if (reset == 1'b0 && ^(handle_small_bpp_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_79_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %80 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_75_80 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %80 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
handle_small_bpp_75_80_reg <= handle_small_bpp_75_80;
if (reset == 1'b0 && ^(handle_small_bpp_75_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_80_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %81 = or i32 %80, 2*/
begin
handle_small_bpp_75_81 = (handle_small_bpp_75_80 | 32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %81 = or i32 %80, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
handle_small_bpp_75_81_reg <= handle_small_bpp_75_81;
if (reset == 1'b0 && ^(handle_small_bpp_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_81_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %82 = getelementptr inbounds i32* %pd3.031, i32 %81*/
begin
handle_small_bpp_75_82 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_75_81));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %82 = getelementptr inbounds i32* %pd3.031, i32 %81*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
handle_small_bpp_75_82_reg <= handle_small_bpp_75_82;
if (reset == 1'b0 && ^(handle_small_bpp_75_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75_82_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
begin
handle_small_bpp_75__pre189 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_141))
begin
handle_small_bpp_75__pre189_reg <= handle_small_bpp_75__pre189;
if (reset == 1'b0 && ^(handle_small_bpp_75__pre189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_75__pre189_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %83*/
/*   %84 = phi i32 [ %.pre189, %75 ], [ %68, %74 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_74_135) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
handle_small_bpp_83_84 = handle_small_bpp_67_68_reg;
end
/* handle_small_bpp: %83*/
/*   %84 = phi i32 [ %.pre189, %75 ], [ %68, %74 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_141) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_83_84 = handle_small_bpp_75__pre189;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %83*/
/*   %84 = phi i32 [ %.pre189, %75 ], [ %68, %74 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_74_135) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
handle_small_bpp_83_84_reg <= handle_small_bpp_83_84;
if (reset == 1'b0 && ^(handle_small_bpp_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_83_84_reg"); $finish; end
end
/* handle_small_bpp: %83*/
/*   %84 = phi i32 [ %.pre189, %75 ], [ %68, %74 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_75_141) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_83_84_reg <= handle_small_bpp_83_84;
if (reset == 1'b0 && ^(handle_small_bpp_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_83_84_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %83*/
/*   %85 = and i32 %84, 2*/
begin
handle_small_bpp_83_85 = (handle_small_bpp_83_84_reg & 32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %83*/
/*   %85 = and i32 %84, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_83_142))
begin
handle_small_bpp_83_85_reg <= handle_small_bpp_83_85;
if (reset == 1'b0 && ^(handle_small_bpp_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_83_85_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %83*/
/*   %86 = icmp ugt i32 %85, 1*/
begin
handle_small_bpp_83_86 = (handle_small_bpp_83_85 > 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %83*/
/*   %86 = icmp ugt i32 %85, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_83_142))
begin
handle_small_bpp_83_86_reg <= handle_small_bpp_83_86;
if (reset == 1'b0 && ^(handle_small_bpp_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_83_86_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %88 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_87_88 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %88 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
handle_small_bpp_87_88_reg <= handle_small_bpp_87_88;
if (reset == 1'b0 && ^(handle_small_bpp_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_88_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
begin
handle_small_bpp_87_89 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
handle_small_bpp_87_89_reg <= handle_small_bpp_87_89;
if (reset == 1'b0 && ^(handle_small_bpp_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_89_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %90 = lshr i32 %89, 4*/
begin
handle_small_bpp_87_90 = (handle_small_bpp_87_89 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %90 = lshr i32 %89, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
handle_small_bpp_87_90_reg <= handle_small_bpp_87_90;
if (reset == 1'b0 && ^(handle_small_bpp_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_90_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %91 = and i32 %90, 3*/
begin
handle_small_bpp_87_91 = (handle_small_bpp_87_90 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %91 = and i32 %90, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
handle_small_bpp_87_91_reg <= handle_small_bpp_87_91;
if (reset == 1'b0 && ^(handle_small_bpp_87_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_91_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %92 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_87_92 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %92 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
handle_small_bpp_87_92_reg <= handle_small_bpp_87_92;
if (reset == 1'b0 && ^(handle_small_bpp_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_92_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %93 = or i32 %92, 1*/
begin
handle_small_bpp_87_93 = (handle_small_bpp_87_92 | 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %93 = or i32 %92, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
handle_small_bpp_87_93_reg <= handle_small_bpp_87_93;
if (reset == 1'b0 && ^(handle_small_bpp_87_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_93_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %94 = getelementptr inbounds i32* %pd3.031, i32 %93*/
begin
handle_small_bpp_87_94 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_87_93));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %94 = getelementptr inbounds i32* %pd3.031, i32 %93*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
handle_small_bpp_87_94_reg <= handle_small_bpp_87_94;
if (reset == 1'b0 && ^(handle_small_bpp_87_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87_94_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
begin
handle_small_bpp_87__pre190 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_148))
begin
handle_small_bpp_87__pre190_reg <= handle_small_bpp_87__pre190;
if (reset == 1'b0 && ^(handle_small_bpp_87__pre190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_87__pre190_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %95*/
/*   %96 = phi i32 [ %.pre190, %87 ], [ %84, %83 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_83_142) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_83_86 == 1'd0)))
begin
handle_small_bpp_95_96 = handle_small_bpp_83_84_reg;
end
/* handle_small_bpp: %95*/
/*   %96 = phi i32 [ %.pre190, %87 ], [ %84, %83 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_148) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_95_96 = handle_small_bpp_87__pre190;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %95*/
/*   %96 = phi i32 [ %.pre190, %87 ], [ %84, %83 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_83_142) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_83_86 == 1'd0)))
begin
handle_small_bpp_95_96_reg <= handle_small_bpp_95_96;
if (reset == 1'b0 && ^(handle_small_bpp_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_95_96_reg"); $finish; end
end
/* handle_small_bpp: %95*/
/*   %96 = phi i32 [ %.pre190, %87 ], [ %84, %83 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_87_148) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_95_96_reg <= handle_small_bpp_95_96;
if (reset == 1'b0 && ^(handle_small_bpp_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_95_96_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %95*/
/*   %97 = and i32 %96, 3*/
begin
handle_small_bpp_95_97 = (handle_small_bpp_95_96_reg & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %95*/
/*   %97 = and i32 %96, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_95_149))
begin
handle_small_bpp_95_97_reg <= handle_small_bpp_95_97;
if (reset == 1'b0 && ^(handle_small_bpp_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_95_97_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %95*/
/*   %98 = icmp eq i32 %97, 0*/
begin
handle_small_bpp_95_98 = (handle_small_bpp_95_97 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %95*/
/*   %98 = icmp eq i32 %97, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_95_149))
begin
handle_small_bpp_95_98_reg <= handle_small_bpp_95_98;
if (reset == 1'b0 && ^(handle_small_bpp_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_95_98_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %99*/
/*   %100 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_99_100 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %99*/
/*   %100 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
handle_small_bpp_99_100_reg <= handle_small_bpp_99_100;
if (reset == 1'b0 && ^(handle_small_bpp_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_99_100_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
begin
handle_small_bpp_99_101 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
handle_small_bpp_99_101_reg <= handle_small_bpp_99_101;
if (reset == 1'b0 && ^(handle_small_bpp_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_99_101_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %99*/
/*   %102 = ashr i32 %101, 6*/
begin
handle_small_bpp_99_102 = ($signed(handle_small_bpp_99_101) >>> 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %99*/
/*   %102 = ashr i32 %101, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
handle_small_bpp_99_102_reg <= handle_small_bpp_99_102;
if (reset == 1'b0 && ^(handle_small_bpp_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_99_102_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %99*/
/*   %103 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_99_103 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %99*/
/*   %103 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
handle_small_bpp_99_103_reg <= handle_small_bpp_99_103;
if (reset == 1'b0 && ^(handle_small_bpp_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_99_103_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %99*/
/*   %104 = getelementptr inbounds i32* %pd3.031, i32 %103*/
begin
handle_small_bpp_99_104 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_99_103));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %99*/
/*   %104 = getelementptr inbounds i32* %pd3.031, i32 %103*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
handle_small_bpp_99_104_reg <= handle_small_bpp_99_104;
if (reset == 1'b0 && ^(handle_small_bpp_99_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_99_104_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.preheader25*/
/*   %105 = icmp sgt i32 %68, 3*/
begin
handle_small_bpp__preheader25_105 = ($signed(handle_small_bpp_67_68_reg) > $signed(32'd3));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.preheader25*/
/*   %105 = icmp sgt i32 %68, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__preheader25_154))
begin
handle_small_bpp__preheader25_105_reg <= handle_small_bpp__preheader25_105;
if (reset == 1'b0 && ^(handle_small_bpp__preheader25_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__preheader25_105_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp109 = add i32 %69, 1*/
begin
handle_small_bpp__lr_ph29_tmp109 = (handle_small_bpp_67_69_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp109 = add i32 %69, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp109_reg <= handle_small_bpp__lr_ph29_tmp109;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp109_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp110 = sub i32 0, %69*/
begin
handle_small_bpp__lr_ph29_tmp110 = (32'd0 - handle_small_bpp_67_69_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp110 = sub i32 0, %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp110_reg <= handle_small_bpp__lr_ph29_tmp110;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp110_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp111 = icmp sgt i32 %tmp110, -1*/
begin
handle_small_bpp__lr_ph29_tmp111 = ($signed(handle_small_bpp__lr_ph29_tmp110) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp111 = icmp sgt i32 %tmp110, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp111_reg <= handle_small_bpp__lr_ph29_tmp111;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp111_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %smax112 = select i1 %tmp111, i32 %tmp110, i32 -1*/
begin
handle_small_bpp__lr_ph29_smax112 = (handle_small_bpp__lr_ph29_tmp111 ? handle_small_bpp__lr_ph29_tmp110 : -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %smax112 = select i1 %tmp111, i32 %tmp110, i32 -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_smax112_reg <= handle_small_bpp__lr_ph29_smax112;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_smax112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_smax112_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp113 = add i32 %tmp109, %smax112*/
begin
handle_small_bpp__lr_ph29_tmp113 = (handle_small_bpp__lr_ph29_tmp109_reg + handle_small_bpp__lr_ph29_smax112_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp113 = add i32 %tmp109, %smax112*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_156))
begin
handle_small_bpp__lr_ph29_tmp113_reg <= handle_small_bpp__lr_ph29_tmp113;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp113_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp116 = shl i32 %69, 2*/
begin
handle_small_bpp__lr_ph29_tmp116 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp116 = shl i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp116_reg <= handle_small_bpp__lr_ph29_tmp116;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp116_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp117 = add i32 %tmp116, -3*/
begin
handle_small_bpp__lr_ph29_tmp117 = (handle_small_bpp__lr_ph29_tmp116 + -32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp117 = add i32 %tmp116, -3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp117_reg <= handle_small_bpp__lr_ph29_tmp117;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp117_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp120 = add i32 %tmp116, -2*/
begin
handle_small_bpp__lr_ph29_tmp120 = (handle_small_bpp__lr_ph29_tmp116 + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp120 = add i32 %tmp116, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp120_reg <= handle_small_bpp__lr_ph29_tmp120;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp120_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp123 = add i32 %tmp116, -1*/
begin
handle_small_bpp__lr_ph29_tmp123 = (handle_small_bpp__lr_ph29_tmp116 + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp123 = add i32 %tmp116, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp123_reg <= handle_small_bpp__lr_ph29_tmp123;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp123_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp126 = add i32 %tmp116, -4*/
begin
handle_small_bpp__lr_ph29_tmp126 = (handle_small_bpp__lr_ph29_tmp116 + -32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp126 = add i32 %tmp116, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp126_reg <= handle_small_bpp__lr_ph29_tmp126;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp130 = add i32 %69, -1*/
begin
handle_small_bpp__lr_ph29_tmp130 = (handle_small_bpp_67_69_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph29*/
/*   %tmp130 = add i32 %69, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_155))
begin
handle_small_bpp__lr_ph29_tmp130_reg <= handle_small_bpp__lr_ph29_tmp130;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph29_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph29_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %indvar107 = phi i32 [ 0, %.lr.ph29 ], [ %indvar.next108, %106 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_156) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_106_indvar107 = 32'd0;
end
/* handle_small_bpp: %106*/
/*   %indvar107 = phi i32 [ 0, %.lr.ph29 ], [ %indvar.next108, %106 ]*/
else /* if ((((cur_state == LEGUP_F_handle_small_bpp_BB_106_170) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_106_exitcond114_reg == 1'd0))) */
begin
handle_small_bpp_106_indvar107 = handle_small_bpp_106_indvar_next108_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %indvar107 = phi i32 [ 0, %.lr.ph29 ], [ %indvar.next108, %106 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph29_156) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_106_indvar107_reg <= handle_small_bpp_106_indvar107;
if (reset == 1'b0 && ^(handle_small_bpp_106_indvar107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_indvar107_reg"); $finish; end
end
/* handle_small_bpp: %106*/
/*   %indvar107 = phi i32 [ 0, %.lr.ph29 ], [ %indvar.next108, %106 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_106_170) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_106_exitcond114_reg == 1'd0)))
begin
handle_small_bpp_106_indvar107_reg <= handle_small_bpp_106_indvar107;
if (reset == 1'b0 && ^(handle_small_bpp_106_indvar107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_indvar107_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_106_tmp115 = handle_small_bpp_106_tmp115_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp115 = mul i32 %indvar107, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp115_reg <= handle_small_bpp_106_tmp115;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp115_reg"); $finish; end
end
/* handle_small_bpp: %106*/
/*   %tmp115 = mul i32 %indvar107, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp115_reg <= handle_small_bpp_106_tmp115;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp115_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %tmp118 = add i32 %tmp117, %tmp115*/
begin
handle_small_bpp_106_tmp118 = (handle_small_bpp__lr_ph29_tmp117_reg + handle_small_bpp_106_tmp115);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp118 = add i32 %tmp117, %tmp115*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp118_reg <= handle_small_bpp_106_tmp118;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp118_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %scevgep119 = getelementptr i32* %pd3.031, i32 %tmp118*/
begin
handle_small_bpp_106_scevgep119 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_106_tmp118_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %scevgep119 = getelementptr i32* %pd3.031, i32 %tmp118*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_159))
begin
handle_small_bpp_106_scevgep119_reg <= handle_small_bpp_106_scevgep119;
if (reset == 1'b0 && ^(handle_small_bpp_106_scevgep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_scevgep119_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %tmp121 = add i32 %tmp120, %tmp115*/
begin
handle_small_bpp_106_tmp121 = (handle_small_bpp__lr_ph29_tmp120_reg + handle_small_bpp_106_tmp115);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp121 = add i32 %tmp120, %tmp115*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp121_reg <= handle_small_bpp_106_tmp121;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp121_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %scevgep122 = getelementptr i32* %pd3.031, i32 %tmp121*/
begin
handle_small_bpp_106_scevgep122 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_106_tmp121_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %scevgep122 = getelementptr i32* %pd3.031, i32 %tmp121*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_159))
begin
handle_small_bpp_106_scevgep122_reg <= handle_small_bpp_106_scevgep122;
if (reset == 1'b0 && ^(handle_small_bpp_106_scevgep122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_scevgep122_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %tmp124 = add i32 %tmp123, %tmp115*/
begin
handle_small_bpp_106_tmp124 = (handle_small_bpp__lr_ph29_tmp123_reg + handle_small_bpp_106_tmp115);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp124 = add i32 %tmp123, %tmp115*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp124_reg <= handle_small_bpp_106_tmp124;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp124_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %scevgep125 = getelementptr i32* %pd3.031, i32 %tmp124*/
begin
handle_small_bpp_106_scevgep125 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_106_tmp124_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %scevgep125 = getelementptr i32* %pd3.031, i32 %tmp124*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_159))
begin
handle_small_bpp_106_scevgep125_reg <= handle_small_bpp_106_scevgep125;
if (reset == 1'b0 && ^(handle_small_bpp_106_scevgep125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_scevgep125_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %tmp127 = add i32 %tmp126, %tmp115*/
begin
handle_small_bpp_106_tmp127 = (handle_small_bpp__lr_ph29_tmp126_reg + handle_small_bpp_106_tmp115);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp127 = add i32 %tmp126, %tmp115*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_tmp127_reg <= handle_small_bpp_106_tmp127;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp127_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %scevgep128 = getelementptr i32* %pd3.031, i32 %tmp127*/
begin
handle_small_bpp_106_scevgep128 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_106_tmp127_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %scevgep128 = getelementptr i32* %pd3.031, i32 %tmp127*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_159))
begin
handle_small_bpp_106_scevgep128_reg <= handle_small_bpp_106_scevgep128;
if (reset == 1'b0 && ^(handle_small_bpp_106_scevgep128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_scevgep128_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %tmp131 = sub i32 %tmp130, %indvar107*/
begin
handle_small_bpp_106_tmp131 = (handle_small_bpp__lr_ph29_tmp130_reg - handle_small_bpp_106_indvar107_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp131 = sub i32 %tmp130, %indvar107*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_157))
begin
handle_small_bpp_106_tmp131_reg <= handle_small_bpp_106_tmp131;
if (reset == 1'b0 && ^(handle_small_bpp_106_tmp131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_tmp131_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %scevgep132 = getelementptr i32* %pd3.031, i32 %tmp131*/
begin
handle_small_bpp_106_scevgep132 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_106_tmp131_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %scevgep132 = getelementptr i32* %pd3.031, i32 %tmp131*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
handle_small_bpp_106_scevgep132_reg <= handle_small_bpp_106_scevgep132;
if (reset == 1'b0 && ^(handle_small_bpp_106_scevgep132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_scevgep132_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
begin
handle_small_bpp_106_107 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
handle_small_bpp_106_107_reg <= handle_small_bpp_106_107;
if (reset == 1'b0 && ^(handle_small_bpp_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_107_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %108 = and i32 %107, 3*/
begin
handle_small_bpp_106_108 = (handle_small_bpp_106_107 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %108 = and i32 %107, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
handle_small_bpp_106_108_reg <= handle_small_bpp_106_108;
if (reset == 1'b0 && ^(handle_small_bpp_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_108_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
begin
handle_small_bpp_106_109 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
handle_small_bpp_106_109_reg <= handle_small_bpp_106_109;
if (reset == 1'b0 && ^(handle_small_bpp_106_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_109_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %110 = lshr i32 %109, 2*/
begin
handle_small_bpp_106_110 = (handle_small_bpp_106_109 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %110 = lshr i32 %109, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
handle_small_bpp_106_110_reg <= handle_small_bpp_106_110;
if (reset == 1'b0 && ^(handle_small_bpp_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_110_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %111 = and i32 %110, 3*/
begin
handle_small_bpp_106_111 = (handle_small_bpp_106_110 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %111 = and i32 %110, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
handle_small_bpp_106_111_reg <= handle_small_bpp_106_111;
if (reset == 1'b0 && ^(handle_small_bpp_106_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_111_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
begin
handle_small_bpp_106_112 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
handle_small_bpp_106_112_reg <= handle_small_bpp_106_112;
if (reset == 1'b0 && ^(handle_small_bpp_106_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_112_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %113 = lshr i32 %112, 4*/
begin
handle_small_bpp_106_113 = (handle_small_bpp_106_112 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %113 = lshr i32 %112, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
handle_small_bpp_106_113_reg <= handle_small_bpp_106_113;
if (reset == 1'b0 && ^(handle_small_bpp_106_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_113_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %114 = and i32 %113, 3*/
begin
handle_small_bpp_106_114 = (handle_small_bpp_106_113 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %114 = and i32 %113, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
handle_small_bpp_106_114_reg <= handle_small_bpp_106_114;
if (reset == 1'b0 && ^(handle_small_bpp_106_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_114_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
begin
handle_small_bpp_106_115 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
handle_small_bpp_106_115_reg <= handle_small_bpp_106_115;
if (reset == 1'b0 && ^(handle_small_bpp_106_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_115_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %116 = ashr i32 %115, 6*/
begin
handle_small_bpp_106_116 = ($signed(handle_small_bpp_106_115) >>> 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %116 = ashr i32 %115, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
handle_small_bpp_106_116_reg <= handle_small_bpp_106_116;
if (reset == 1'b0 && ^(handle_small_bpp_106_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_116_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %indvar.next108 = add i32 %indvar107, 1*/
begin
handle_small_bpp_106_indvar_next108 = (handle_small_bpp_106_indvar107_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %indvar.next108 = add i32 %indvar107, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_157))
begin
handle_small_bpp_106_indvar_next108_reg <= handle_small_bpp_106_indvar_next108;
if (reset == 1'b0 && ^(handle_small_bpp_106_indvar_next108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_indvar_next108_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %106*/
/*   %exitcond114 = icmp eq i32 %indvar.next108, %tmp113*/
begin
handle_small_bpp_106_exitcond114 = (handle_small_bpp_106_indvar_next108 == handle_small_bpp__lr_ph29_tmp113_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %exitcond114 = icmp eq i32 %indvar.next108, %tmp113*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_157))
begin
handle_small_bpp_106_exitcond114_reg <= handle_small_bpp_106_exitcond114;
if (reset == 1'b0 && ^(handle_small_bpp_106_exitcond114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_106_exitcond114_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %119 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_118_119 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %119 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
handle_small_bpp_118_119_reg <= handle_small_bpp_118_119;
if (reset == 1'b0 && ^(handle_small_bpp_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_119_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
begin
handle_small_bpp_118_120 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_174))
begin
handle_small_bpp_118_120_reg <= handle_small_bpp_118_120;
if (reset == 1'b0 && ^(handle_small_bpp_118_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_120_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %121 = lshr i32 %120, 2*/
begin
handle_small_bpp_118_121 = (handle_small_bpp_118_120 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %121 = lshr i32 %120, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_174))
begin
handle_small_bpp_118_121_reg <= handle_small_bpp_118_121;
if (reset == 1'b0 && ^(handle_small_bpp_118_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_121_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %122 = and i32 %121, 3*/
begin
handle_small_bpp_118_122 = (handle_small_bpp_118_121 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %122 = and i32 %121, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_174))
begin
handle_small_bpp_118_122_reg <= handle_small_bpp_118_122;
if (reset == 1'b0 && ^(handle_small_bpp_118_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_122_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_118_123 = handle_small_bpp_118_123_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %123 = mul nsw i32 %122, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
handle_small_bpp_118_123_reg <= handle_small_bpp_118_123;
if (reset == 1'b0 && ^(handle_small_bpp_118_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_123_reg"); $finish; end
end
/* handle_small_bpp: %118*/
/*   %123 = mul nsw i32 %122, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
handle_small_bpp_118_123_reg <= handle_small_bpp_118_123;
if (reset == 1'b0 && ^(handle_small_bpp_118_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_123_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %124 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_118_124 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %124 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
handle_small_bpp_118_124_reg <= handle_small_bpp_118_124;
if (reset == 1'b0 && ^(handle_small_bpp_118_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_124_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %125 = or i32 %124, 2*/
begin
handle_small_bpp_118_125 = (handle_small_bpp_118_124 | 32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %125 = or i32 %124, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
handle_small_bpp_118_125_reg <= handle_small_bpp_118_125;
if (reset == 1'b0 && ^(handle_small_bpp_118_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_125_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %126 = getelementptr inbounds i32* %pd3.031, i32 %125*/
begin
handle_small_bpp_118_126 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_118_125));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %126 = getelementptr inbounds i32* %pd3.031, i32 %125*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
handle_small_bpp_118_126_reg <= handle_small_bpp_118_126;
if (reset == 1'b0 && ^(handle_small_bpp_118_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118_126_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
begin
handle_small_bpp_118__pre191 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_178))
begin
handle_small_bpp_118__pre191_reg <= handle_small_bpp_118__pre191;
if (reset == 1'b0 && ^(handle_small_bpp_118__pre191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_118__pre191_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %127*/
/*   %128 = phi i32 [ %.pre191, %118 ], [ %68, %117 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_117_171) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
handle_small_bpp_127_128 = handle_small_bpp_67_68_reg;
end
/* handle_small_bpp: %127*/
/*   %128 = phi i32 [ %.pre191, %118 ], [ %68, %117 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_178) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_127_128 = handle_small_bpp_118__pre191;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %127*/
/*   %128 = phi i32 [ %.pre191, %118 ], [ %68, %117 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_117_171) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_67_73_reg == 1'd0)))
begin
handle_small_bpp_127_128_reg <= handle_small_bpp_127_128;
if (reset == 1'b0 && ^(handle_small_bpp_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_127_128_reg"); $finish; end
end
/* handle_small_bpp: %127*/
/*   %128 = phi i32 [ %.pre191, %118 ], [ %68, %117 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_118_178) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_127_128_reg <= handle_small_bpp_127_128;
if (reset == 1'b0 && ^(handle_small_bpp_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_127_128_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %127*/
/*   %129 = and i32 %128, 2*/
begin
handle_small_bpp_127_129 = (handle_small_bpp_127_128_reg & 32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %127*/
/*   %129 = and i32 %128, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_127_179))
begin
handle_small_bpp_127_129_reg <= handle_small_bpp_127_129;
if (reset == 1'b0 && ^(handle_small_bpp_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_127_129_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %127*/
/*   %130 = icmp ugt i32 %129, 1*/
begin
handle_small_bpp_127_130 = (handle_small_bpp_127_129 > 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %127*/
/*   %130 = icmp ugt i32 %129, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_127_179))
begin
handle_small_bpp_127_130_reg <= handle_small_bpp_127_130;
if (reset == 1'b0 && ^(handle_small_bpp_127_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_127_130_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %132 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_131_132 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %132 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
handle_small_bpp_131_132_reg <= handle_small_bpp_131_132;
if (reset == 1'b0 && ^(handle_small_bpp_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_132_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
begin
handle_small_bpp_131_133 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_182))
begin
handle_small_bpp_131_133_reg <= handle_small_bpp_131_133;
if (reset == 1'b0 && ^(handle_small_bpp_131_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_133_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %134 = lshr i32 %133, 4*/
begin
handle_small_bpp_131_134 = (handle_small_bpp_131_133 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %134 = lshr i32 %133, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_182))
begin
handle_small_bpp_131_134_reg <= handle_small_bpp_131_134;
if (reset == 1'b0 && ^(handle_small_bpp_131_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_134_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %135 = and i32 %134, 3*/
begin
handle_small_bpp_131_135 = (handle_small_bpp_131_134 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %135 = and i32 %134, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_182))
begin
handle_small_bpp_131_135_reg <= handle_small_bpp_131_135;
if (reset == 1'b0 && ^(handle_small_bpp_131_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_135_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_131_136 = handle_small_bpp_131_136_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %136 = mul nsw i32 %135, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
handle_small_bpp_131_136_reg <= handle_small_bpp_131_136;
if (reset == 1'b0 && ^(handle_small_bpp_131_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_136_reg"); $finish; end
end
/* handle_small_bpp: %131*/
/*   %136 = mul nsw i32 %135, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
handle_small_bpp_131_136_reg <= handle_small_bpp_131_136;
if (reset == 1'b0 && ^(handle_small_bpp_131_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_136_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %137 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_131_137 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %137 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
handle_small_bpp_131_137_reg <= handle_small_bpp_131_137;
if (reset == 1'b0 && ^(handle_small_bpp_131_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_137_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %138 = or i32 %137, 1*/
begin
handle_small_bpp_131_138 = (handle_small_bpp_131_137 | 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %138 = or i32 %137, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
handle_small_bpp_131_138_reg <= handle_small_bpp_131_138;
if (reset == 1'b0 && ^(handle_small_bpp_131_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_138_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %139 = getelementptr inbounds i32* %pd3.031, i32 %138*/
begin
handle_small_bpp_131_139 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_131_138));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %139 = getelementptr inbounds i32* %pd3.031, i32 %138*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
handle_small_bpp_131_139_reg <= handle_small_bpp_131_139;
if (reset == 1'b0 && ^(handle_small_bpp_131_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131_139_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
begin
handle_small_bpp_131__pre192 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_186))
begin
handle_small_bpp_131__pre192_reg <= handle_small_bpp_131__pre192;
if (reset == 1'b0 && ^(handle_small_bpp_131__pre192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_131__pre192_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %140*/
/*   %141 = phi i32 [ %.pre192, %131 ], [ %128, %127 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_127_179) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_127_130 == 1'd0)))
begin
handle_small_bpp_140_141 = handle_small_bpp_127_128_reg;
end
/* handle_small_bpp: %140*/
/*   %141 = phi i32 [ %.pre192, %131 ], [ %128, %127 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_186) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_140_141 = handle_small_bpp_131__pre192;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %140*/
/*   %141 = phi i32 [ %.pre192, %131 ], [ %128, %127 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_127_179) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_127_130 == 1'd0)))
begin
handle_small_bpp_140_141_reg <= handle_small_bpp_140_141;
if (reset == 1'b0 && ^(handle_small_bpp_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_140_141_reg"); $finish; end
end
/* handle_small_bpp: %140*/
/*   %141 = phi i32 [ %.pre192, %131 ], [ %128, %127 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_131_186) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_140_141_reg <= handle_small_bpp_140_141;
if (reset == 1'b0 && ^(handle_small_bpp_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_140_141_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %140*/
/*   %142 = and i32 %141, 3*/
begin
handle_small_bpp_140_142 = (handle_small_bpp_140_141_reg & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %140*/
/*   %142 = and i32 %141, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_140_187))
begin
handle_small_bpp_140_142_reg <= handle_small_bpp_140_142;
if (reset == 1'b0 && ^(handle_small_bpp_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_140_142_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %140*/
/*   %143 = icmp eq i32 %142, 0*/
begin
handle_small_bpp_140_143 = (handle_small_bpp_140_142 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %140*/
/*   %143 = icmp eq i32 %142, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_140_187))
begin
handle_small_bpp_140_143_reg <= handle_small_bpp_140_143;
if (reset == 1'b0 && ^(handle_small_bpp_140_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_140_143_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %144*/
/*   %145 = getelementptr inbounds i32* %pd3.031, i32 %69*/
begin
handle_small_bpp_144_145 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_67_69_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %145 = getelementptr inbounds i32* %pd3.031, i32 %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
handle_small_bpp_144_145_reg <= handle_small_bpp_144_145;
if (reset == 1'b0 && ^(handle_small_bpp_144_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_145_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
begin
handle_small_bpp_144_146 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_190))
begin
handle_small_bpp_144_146_reg <= handle_small_bpp_144_146;
if (reset == 1'b0 && ^(handle_small_bpp_144_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_146_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %144*/
/*   %147 = ashr i32 %146, 6*/
begin
handle_small_bpp_144_147 = ($signed(handle_small_bpp_144_146) >>> 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %147 = ashr i32 %146, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_190))
begin
handle_small_bpp_144_147_reg <= handle_small_bpp_144_147;
if (reset == 1'b0 && ^(handle_small_bpp_144_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_147_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_144_148 = handle_small_bpp_144_148_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %148 = mul nsw i32 %147, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
handle_small_bpp_144_148_reg <= handle_small_bpp_144_148;
if (reset == 1'b0 && ^(handle_small_bpp_144_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_148_reg"); $finish; end
end
/* handle_small_bpp: %144*/
/*   %148 = mul nsw i32 %147, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
handle_small_bpp_144_148_reg <= handle_small_bpp_144_148;
if (reset == 1'b0 && ^(handle_small_bpp_144_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_148_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %144*/
/*   %149 = shl nsw i32 %69, 2*/
begin
handle_small_bpp_144_149 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %149 = shl nsw i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
handle_small_bpp_144_149_reg <= handle_small_bpp_144_149;
if (reset == 1'b0 && ^(handle_small_bpp_144_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_149_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %144*/
/*   %150 = getelementptr inbounds i32* %pd3.031, i32 %149*/
begin
handle_small_bpp_144_150 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_144_149));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %150 = getelementptr inbounds i32* %pd3.031, i32 %149*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
handle_small_bpp_144_150_reg <= handle_small_bpp_144_150;
if (reset == 1'b0 && ^(handle_small_bpp_144_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_144_150_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.preheader20*/
/*   %151 = icmp sgt i32 %68, 3*/
begin
handle_small_bpp__preheader20_151 = ($signed(handle_small_bpp_67_68_reg) > $signed(32'd3));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.preheader20*/
/*   %151 = icmp sgt i32 %68, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__preheader20_193))
begin
handle_small_bpp__preheader20_151_reg <= handle_small_bpp__preheader20_151;
if (reset == 1'b0 && ^(handle_small_bpp__preheader20_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__preheader20_151_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp83 = add i32 %69, 1*/
begin
handle_small_bpp__lr_ph24_tmp83 = (handle_small_bpp_67_69_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp83 = add i32 %69, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp83_reg <= handle_small_bpp__lr_ph24_tmp83;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp83_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp84 = sub i32 0, %69*/
begin
handle_small_bpp__lr_ph24_tmp84 = (32'd0 - handle_small_bpp_67_69_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp84 = sub i32 0, %69*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp84_reg <= handle_small_bpp__lr_ph24_tmp84;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp84_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp85 = icmp sgt i32 %tmp84, -1*/
begin
handle_small_bpp__lr_ph24_tmp85 = ($signed(handle_small_bpp__lr_ph24_tmp84) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp85 = icmp sgt i32 %tmp84, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp85_reg <= handle_small_bpp__lr_ph24_tmp85;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp85_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %smax86 = select i1 %tmp85, i32 %tmp84, i32 -1*/
begin
handle_small_bpp__lr_ph24_smax86 = (handle_small_bpp__lr_ph24_tmp85 ? handle_small_bpp__lr_ph24_tmp84 : -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %smax86 = select i1 %tmp85, i32 %tmp84, i32 -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_smax86_reg <= handle_small_bpp__lr_ph24_smax86;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_smax86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_smax86_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp87 = add i32 %tmp83, %smax86*/
begin
handle_small_bpp__lr_ph24_tmp87 = (handle_small_bpp__lr_ph24_tmp83_reg + handle_small_bpp__lr_ph24_smax86_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp87 = add i32 %tmp83, %smax86*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_195))
begin
handle_small_bpp__lr_ph24_tmp87_reg <= handle_small_bpp__lr_ph24_tmp87;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp87_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp90 = shl i32 %69, 2*/
begin
handle_small_bpp__lr_ph24_tmp90 = (handle_small_bpp_67_69_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp90 = shl i32 %69, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp90_reg <= handle_small_bpp__lr_ph24_tmp90;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp90_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp91 = add i32 %tmp90, -3*/
begin
handle_small_bpp__lr_ph24_tmp91 = (handle_small_bpp__lr_ph24_tmp90 + -32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp91 = add i32 %tmp90, -3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp91_reg <= handle_small_bpp__lr_ph24_tmp91;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp91_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp94 = add i32 %tmp90, -2*/
begin
handle_small_bpp__lr_ph24_tmp94 = (handle_small_bpp__lr_ph24_tmp90 + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp94 = add i32 %tmp90, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp94_reg <= handle_small_bpp__lr_ph24_tmp94;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp94_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp97 = add i32 %tmp90, -1*/
begin
handle_small_bpp__lr_ph24_tmp97 = (handle_small_bpp__lr_ph24_tmp90 + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp97 = add i32 %tmp90, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp97_reg <= handle_small_bpp__lr_ph24_tmp97;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp97_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp100 = add i32 %tmp90, -4*/
begin
handle_small_bpp__lr_ph24_tmp100 = (handle_small_bpp__lr_ph24_tmp90 + -32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp100 = add i32 %tmp90, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp100_reg <= handle_small_bpp__lr_ph24_tmp100;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp100_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp104 = add i32 %69, -1*/
begin
handle_small_bpp__lr_ph24_tmp104 = (handle_small_bpp_67_69_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph24*/
/*   %tmp104 = add i32 %69, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_194))
begin
handle_small_bpp__lr_ph24_tmp104_reg <= handle_small_bpp__lr_ph24_tmp104;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph24_tmp104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph24_tmp104_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %indvar81 = phi i32 [ 0, %.lr.ph24 ], [ %indvar.next82, %152 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_195) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_152_indvar81 = 32'd0;
end
/* handle_small_bpp: %152*/
/*   %indvar81 = phi i32 [ 0, %.lr.ph24 ], [ %indvar.next82, %152 ]*/
else /* if ((((cur_state == LEGUP_F_handle_small_bpp_BB_152_213) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_152_exitcond88_reg == 1'd0))) */
begin
handle_small_bpp_152_indvar81 = handle_small_bpp_152_indvar_next82_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %indvar81 = phi i32 [ 0, %.lr.ph24 ], [ %indvar.next82, %152 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph24_195) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_152_indvar81_reg <= handle_small_bpp_152_indvar81;
if (reset == 1'b0 && ^(handle_small_bpp_152_indvar81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_indvar81_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %indvar81 = phi i32 [ 0, %.lr.ph24 ], [ %indvar.next82, %152 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_152_213) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_152_exitcond88_reg == 1'd0)))
begin
handle_small_bpp_152_indvar81_reg <= handle_small_bpp_152_indvar81;
if (reset == 1'b0 && ^(handle_small_bpp_152_indvar81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_indvar81_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_152_tmp89 = handle_small_bpp_152_tmp89_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp89 = mul i32 %indvar81, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp89_reg <= handle_small_bpp_152_tmp89;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp89_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %tmp89 = mul i32 %indvar81, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp89_reg <= handle_small_bpp_152_tmp89;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp89_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %tmp92 = add i32 %tmp91, %tmp89*/
begin
handle_small_bpp_152_tmp92 = (handle_small_bpp__lr_ph24_tmp91_reg + handle_small_bpp_152_tmp89);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp92 = add i32 %tmp91, %tmp89*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp92_reg <= handle_small_bpp_152_tmp92;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp92_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %scevgep93 = getelementptr i32* %pd3.031, i32 %tmp92*/
begin
handle_small_bpp_152_scevgep93 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_152_tmp92_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %scevgep93 = getelementptr i32* %pd3.031, i32 %tmp92*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_198))
begin
handle_small_bpp_152_scevgep93_reg <= handle_small_bpp_152_scevgep93;
if (reset == 1'b0 && ^(handle_small_bpp_152_scevgep93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_scevgep93_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %tmp95 = add i32 %tmp94, %tmp89*/
begin
handle_small_bpp_152_tmp95 = (handle_small_bpp__lr_ph24_tmp94_reg + handle_small_bpp_152_tmp89);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp95 = add i32 %tmp94, %tmp89*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp95_reg <= handle_small_bpp_152_tmp95;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp95_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %scevgep96 = getelementptr i32* %pd3.031, i32 %tmp95*/
begin
handle_small_bpp_152_scevgep96 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_152_tmp95_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %scevgep96 = getelementptr i32* %pd3.031, i32 %tmp95*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_198))
begin
handle_small_bpp_152_scevgep96_reg <= handle_small_bpp_152_scevgep96;
if (reset == 1'b0 && ^(handle_small_bpp_152_scevgep96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_scevgep96_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %tmp98 = add i32 %tmp97, %tmp89*/
begin
handle_small_bpp_152_tmp98 = (handle_small_bpp__lr_ph24_tmp97_reg + handle_small_bpp_152_tmp89);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp98 = add i32 %tmp97, %tmp89*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp98_reg <= handle_small_bpp_152_tmp98;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %scevgep99 = getelementptr i32* %pd3.031, i32 %tmp98*/
begin
handle_small_bpp_152_scevgep99 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_152_tmp98_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %scevgep99 = getelementptr i32* %pd3.031, i32 %tmp98*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_198))
begin
handle_small_bpp_152_scevgep99_reg <= handle_small_bpp_152_scevgep99;
if (reset == 1'b0 && ^(handle_small_bpp_152_scevgep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_scevgep99_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %tmp101 = add i32 %tmp100, %tmp89*/
begin
handle_small_bpp_152_tmp101 = (handle_small_bpp__lr_ph24_tmp100_reg + handle_small_bpp_152_tmp89);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp101 = add i32 %tmp100, %tmp89*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_tmp101_reg <= handle_small_bpp_152_tmp101;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp101_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %scevgep102 = getelementptr i32* %pd3.031, i32 %tmp101*/
begin
handle_small_bpp_152_scevgep102 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_152_tmp101_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %scevgep102 = getelementptr i32* %pd3.031, i32 %tmp101*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_198))
begin
handle_small_bpp_152_scevgep102_reg <= handle_small_bpp_152_scevgep102;
if (reset == 1'b0 && ^(handle_small_bpp_152_scevgep102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_scevgep102_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %tmp105 = sub i32 %tmp104, %indvar81*/
begin
handle_small_bpp_152_tmp105 = (handle_small_bpp__lr_ph24_tmp104_reg - handle_small_bpp_152_indvar81_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp105 = sub i32 %tmp104, %indvar81*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_196))
begin
handle_small_bpp_152_tmp105_reg <= handle_small_bpp_152_tmp105;
if (reset == 1'b0 && ^(handle_small_bpp_152_tmp105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_tmp105_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %scevgep106 = getelementptr i32* %pd3.031, i32 %tmp105*/
begin
handle_small_bpp_152_scevgep106 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp_152_tmp105_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %scevgep106 = getelementptr i32* %pd3.031, i32 %tmp105*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
handle_small_bpp_152_scevgep106_reg <= handle_small_bpp_152_scevgep106;
if (reset == 1'b0 && ^(handle_small_bpp_152_scevgep106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_scevgep106_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
begin
handle_small_bpp_152_153 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_199))
begin
handle_small_bpp_152_153_reg <= handle_small_bpp_152_153;
if (reset == 1'b0 && ^(handle_small_bpp_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_153_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %154 = and i32 %153, 3*/
begin
handle_small_bpp_152_154 = (handle_small_bpp_152_153 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %154 = and i32 %153, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_199))
begin
handle_small_bpp_152_154_reg <= handle_small_bpp_152_154;
if (reset == 1'b0 && ^(handle_small_bpp_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_154_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_152_155 = handle_small_bpp_152_155_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %155 = mul nsw i32 %154, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
handle_small_bpp_152_155_reg <= handle_small_bpp_152_155;
if (reset == 1'b0 && ^(handle_small_bpp_152_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_155_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %155 = mul nsw i32 %154, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
handle_small_bpp_152_155_reg <= handle_small_bpp_152_155;
if (reset == 1'b0 && ^(handle_small_bpp_152_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_155_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
begin
handle_small_bpp_152_156 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_203))
begin
handle_small_bpp_152_156_reg <= handle_small_bpp_152_156;
if (reset == 1'b0 && ^(handle_small_bpp_152_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_156_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %157 = lshr i32 %156, 2*/
begin
handle_small_bpp_152_157 = (handle_small_bpp_152_156 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %157 = lshr i32 %156, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_203))
begin
handle_small_bpp_152_157_reg <= handle_small_bpp_152_157;
if (reset == 1'b0 && ^(handle_small_bpp_152_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_157_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %158 = and i32 %157, 3*/
begin
handle_small_bpp_152_158 = (handle_small_bpp_152_157 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %158 = and i32 %157, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_203))
begin
handle_small_bpp_152_158_reg <= handle_small_bpp_152_158;
if (reset == 1'b0 && ^(handle_small_bpp_152_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_158_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_152_159 = handle_small_bpp_152_159_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %159 = mul nsw i32 %158, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
handle_small_bpp_152_159_reg <= handle_small_bpp_152_159;
if (reset == 1'b0 && ^(handle_small_bpp_152_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_159_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %159 = mul nsw i32 %158, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
handle_small_bpp_152_159_reg <= handle_small_bpp_152_159;
if (reset == 1'b0 && ^(handle_small_bpp_152_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_159_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
begin
handle_small_bpp_152_160 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_207))
begin
handle_small_bpp_152_160_reg <= handle_small_bpp_152_160;
if (reset == 1'b0 && ^(handle_small_bpp_152_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_160_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %161 = lshr i32 %160, 4*/
begin
handle_small_bpp_152_161 = (handle_small_bpp_152_160 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %161 = lshr i32 %160, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_207))
begin
handle_small_bpp_152_161_reg <= handle_small_bpp_152_161;
if (reset == 1'b0 && ^(handle_small_bpp_152_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_161_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %162 = and i32 %161, 3*/
begin
handle_small_bpp_152_162 = (handle_small_bpp_152_161 & 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %162 = and i32 %161, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_207))
begin
handle_small_bpp_152_162_reg <= handle_small_bpp_152_162;
if (reset == 1'b0 && ^(handle_small_bpp_152_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_162_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_152_163 = handle_small_bpp_152_163_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %163 = mul nsw i32 %162, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
handle_small_bpp_152_163_reg <= handle_small_bpp_152_163;
if (reset == 1'b0 && ^(handle_small_bpp_152_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_163_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %163 = mul nsw i32 %162, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
handle_small_bpp_152_163_reg <= handle_small_bpp_152_163;
if (reset == 1'b0 && ^(handle_small_bpp_152_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_163_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
begin
handle_small_bpp_152_164 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_211))
begin
handle_small_bpp_152_164_reg <= handle_small_bpp_152_164;
if (reset == 1'b0 && ^(handle_small_bpp_152_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_164_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %165 = ashr i32 %164, 6*/
begin
handle_small_bpp_152_165 = ($signed(handle_small_bpp_152_164) >>> 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %165 = ashr i32 %164, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_211))
begin
handle_small_bpp_152_165_reg <= handle_small_bpp_152_165;
if (reset == 1'b0 && ^(handle_small_bpp_152_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_165_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_152_166 = handle_small_bpp_152_166_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %166 = mul nsw i32 %165, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
handle_small_bpp_152_166_reg <= handle_small_bpp_152_166;
if (reset == 1'b0 && ^(handle_small_bpp_152_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_166_reg"); $finish; end
end
/* handle_small_bpp: %152*/
/*   %166 = mul nsw i32 %165, 85*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
handle_small_bpp_152_166_reg <= handle_small_bpp_152_166;
if (reset == 1'b0 && ^(handle_small_bpp_152_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_166_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %indvar.next82 = add i32 %indvar81, 1*/
begin
handle_small_bpp_152_indvar_next82 = (handle_small_bpp_152_indvar81_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %indvar.next82 = add i32 %indvar81, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_196))
begin
handle_small_bpp_152_indvar_next82_reg <= handle_small_bpp_152_indvar_next82;
if (reset == 1'b0 && ^(handle_small_bpp_152_indvar_next82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_indvar_next82_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %152*/
/*   %exitcond88 = icmp eq i32 %indvar.next82, %tmp87*/
begin
handle_small_bpp_152_exitcond88 = (handle_small_bpp_152_indvar_next82 == handle_small_bpp__lr_ph24_tmp87_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %exitcond88 = icmp eq i32 %indvar.next82, %tmp87*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_196))
begin
handle_small_bpp_152_exitcond88_reg <= handle_small_bpp_152_exitcond88;
if (reset == 1'b0 && ^(handle_small_bpp_152_exitcond88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_152_exitcond88_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
begin
handle_small_bpp__loopexit21_167 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_218))
begin
handle_small_bpp__loopexit21_167_reg <= handle_small_bpp__loopexit21_167;
if (reset == 1'b0 && ^(handle_small_bpp__loopexit21_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__loopexit21_167_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.loopexit21*/
/*   %168 = icmp slt i32 %j2.034, %167*/
begin
handle_small_bpp__loopexit21_168 = ($signed(handle_small_bpp_67_j2_034_reg) < $signed(handle_small_bpp__loopexit21_167));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.loopexit21*/
/*   %168 = icmp slt i32 %j2.034, %167*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_218))
begin
handle_small_bpp__loopexit21_168_reg <= handle_small_bpp__loopexit21_168;
if (reset == 1'b0 && ^(handle_small_bpp__loopexit21_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__loopexit21_168_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
begin
handle_small_bpp___crit_edge194_169 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221))
begin
handle_small_bpp___crit_edge194_169_reg <= handle_small_bpp___crit_edge194_169;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge194_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge194_169_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %170 = getelementptr inbounds i32* %pd3.031, i32 %169*/
begin
handle_small_bpp___crit_edge194_170 = (handle_small_bpp_67_pd3_031_reg + (4 * handle_small_bpp___crit_edge194_169));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %170 = getelementptr inbounds i32* %pd3.031, i32 %169*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_221))
begin
handle_small_bpp___crit_edge194_170_reg <= handle_small_bpp___crit_edge194_170;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge194_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge194_170_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %phitmp196 = add i32 %j2.034, 1*/
begin
handle_small_bpp___crit_edge194_phitmp196 = (handle_small_bpp_67_j2_034_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge194*/
/*   %phitmp196 = add i32 %j2.034, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219))
begin
handle_small_bpp___crit_edge194_phitmp196_reg <= handle_small_bpp___crit_edge194_phitmp196;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge194_phitmp196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge194_phitmp196_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %171*/
/*   %172 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
begin
handle_small_bpp_171_172 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %171*/
/*   %172 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_222))
begin
handle_small_bpp_171_172_reg <= handle_small_bpp_171_172;
if (reset == 1'b0 && ^(handle_small_bpp_171_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_171_172_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
begin
handle_small_bpp_171_173 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_224))
begin
handle_small_bpp_171_173_reg <= handle_small_bpp_171_173;
if (reset == 1'b0 && ^(handle_small_bpp_171_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_171_173_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %171*/
/*   %174 = icmp sgt i32 %173, 0*/
begin
handle_small_bpp_171_174 = ($signed(handle_small_bpp_171_173) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %171*/
/*   %174 = icmp sgt i32 %173, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_224))
begin
handle_small_bpp_171_174_reg <= handle_small_bpp_171_174;
if (reset == 1'b0 && ^(handle_small_bpp_171_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_171_174_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %175 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
begin
handle_small_bpp__lr_ph19_175 = arg_p;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %175 = getelementptr inbounds %struct.TYPE_6__* %p, i32 0, i32 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
handle_small_bpp__lr_ph19_175_reg <= handle_small_bpp__lr_ph19_175;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_175_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph19_176 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227))
begin
handle_small_bpp__lr_ph19_176_reg <= handle_small_bpp__lr_ph19_176;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_176_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
begin
handle_small_bpp__lr_ph19_177 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229))
begin
handle_small_bpp__lr_ph19_177_reg <= handle_small_bpp__lr_ph19_177;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_177_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %178 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
begin
handle_small_bpp__lr_ph19_178 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %178 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
handle_small_bpp__lr_ph19_178_reg <= handle_small_bpp__lr_ph19_178;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_178_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %179 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
begin
handle_small_bpp__lr_ph19_179 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %179 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
handle_small_bpp__lr_ph19_179_reg <= handle_small_bpp__lr_ph19_179;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_179_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %180 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
begin
handle_small_bpp__lr_ph19_180 = (arg_s + 16);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph19*/
/*   %180 = getelementptr inbounds %struct.TYPE_5__* %s, i32 0, i32 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
handle_small_bpp__lr_ph19_180_reg <= handle_small_bpp__lr_ph19_180;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph19_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph19_180_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %pd6.016 = phi i32* [ %177, %.lr.ph19 ], [ %220, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_pd6_016 = handle_small_bpp__lr_ph19_177;
end
/* handle_small_bpp: %181*/
/*   %pd6.016 = phi i32* [ %177, %.lr.ph19 ], [ %220, %._crit_edge193 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_181_pd6_016 = handle_small_bpp___crit_edge193_220;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %pd6.016 = phi i32* [ %177, %.lr.ph19 ], [ %220, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_pd6_016_reg <= handle_small_bpp_181_pd6_016;
if (reset == 1'b0 && ^(handle_small_bpp_181_pd6_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_pd6_016_reg"); $finish; end
end
/* handle_small_bpp: %181*/
/*   %pd6.016 = phi i32* [ %177, %.lr.ph19 ], [ %220, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_pd6_016_reg <= handle_small_bpp_181_pd6_016;
if (reset == 1'b0 && ^(handle_small_bpp_181_pd6_016) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_pd6_016_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %j5.015 = phi i32 [ 1, %.lr.ph19 ], [ %phitmp, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_j5_015 = 32'd1;
end
/* handle_small_bpp: %181*/
/*   %j5.015 = phi i32 [ 1, %.lr.ph19 ], [ %phitmp, %._crit_edge193 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_181_j5_015 = handle_small_bpp___crit_edge193_phitmp_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %j5.015 = phi i32 [ 1, %.lr.ph19 ], [ %phitmp, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_229) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_j5_015_reg <= handle_small_bpp_181_j5_015;
if (reset == 1'b0 && ^(handle_small_bpp_181_j5_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_j5_015_reg"); $finish; end
end
/* handle_small_bpp: %181*/
/*   %j5.015 = phi i32 [ 1, %.lr.ph19 ], [ %phitmp, %._crit_edge193 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_181_j5_015_reg <= handle_small_bpp_181_j5_015;
if (reset == 1'b0 && ^(handle_small_bpp_181_j5_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_j5_015_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
begin
handle_small_bpp_181_182 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232))
begin
handle_small_bpp_181_182_reg <= handle_small_bpp_181_182;
if (reset == 1'b0 && ^(handle_small_bpp_181_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_182_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_181_183 = handle_small_bpp_signed_divide_32_0;
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %183 = sdiv i32 %182, 2*/
handle_small_bpp_181_183_reg = handle_small_bpp_16_18_reg;
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
begin
handle_small_bpp_181_184 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232))
begin
handle_small_bpp_181_184_reg <= handle_small_bpp_181_184;
if (reset == 1'b0 && ^(handle_small_bpp_181_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_184_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %185 = icmp eq i32 %184, 0*/
begin
handle_small_bpp_181_185 = (handle_small_bpp_181_184 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %185 = icmp eq i32 %184, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232))
begin
handle_small_bpp_181_185_reg <= handle_small_bpp_181_185;
if (reset == 1'b0 && ^(handle_small_bpp_181_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_185_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %186 = and i32 %182, 1*/
begin
handle_small_bpp_181_186 = (handle_small_bpp_181_182 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %186 = and i32 %182, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232))
begin
handle_small_bpp_181_186_reg <= handle_small_bpp_181_186;
if (reset == 1'b0 && ^(handle_small_bpp_181_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_186_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %181*/
/*   %187 = icmp ne i32 %186, 0*/
begin
handle_small_bpp_181_187 = (handle_small_bpp_181_186 != 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %181*/
/*   %187 = icmp ne i32 %186, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232))
begin
handle_small_bpp_181_187_reg <= handle_small_bpp_181_187;
if (reset == 1'b0 && ^(handle_small_bpp_181_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_181_187_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %189*/
/*   %190 = getelementptr inbounds i32* %pd6.016, i32 %183*/
begin
handle_small_bpp_189_190 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_181_183_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %189*/
/*   %190 = getelementptr inbounds i32* %pd6.016, i32 %183*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
handle_small_bpp_189_190_reg <= handle_small_bpp_189_190;
if (reset == 1'b0 && ^(handle_small_bpp_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_189_190_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
begin
handle_small_bpp_189_191 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
handle_small_bpp_189_191_reg <= handle_small_bpp_189_191;
if (reset == 1'b0 && ^(handle_small_bpp_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_189_191_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %189*/
/*   %192 = ashr i32 %191, 4*/
begin
handle_small_bpp_189_192 = ($signed(handle_small_bpp_189_191) >>> 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %189*/
/*   %192 = ashr i32 %191, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
handle_small_bpp_189_192_reg <= handle_small_bpp_189_192;
if (reset == 1'b0 && ^(handle_small_bpp_189_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_189_192_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %189*/
/*   %193 = shl nsw i32 %183, 1*/
begin
handle_small_bpp_189_193 = (handle_small_bpp_181_183_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %189*/
/*   %193 = shl nsw i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
handle_small_bpp_189_193_reg <= handle_small_bpp_189_193;
if (reset == 1'b0 && ^(handle_small_bpp_189_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_189_193_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %189*/
/*   %194 = getelementptr inbounds i32* %pd6.016, i32 %193*/
begin
handle_small_bpp_189_194 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_189_193));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %189*/
/*   %194 = getelementptr inbounds i32* %pd6.016, i32 %193*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
handle_small_bpp_189_194_reg <= handle_small_bpp_189_194;
if (reset == 1'b0 && ^(handle_small_bpp_189_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_189_194_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.preheader9*/
/*   %195 = icmp sgt i32 %182, 1*/
begin
handle_small_bpp__preheader9_195 = ($signed(handle_small_bpp_181_182_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.preheader9*/
/*   %195 = icmp sgt i32 %182, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__preheader9_270))
begin
handle_small_bpp__preheader9_195_reg <= handle_small_bpp__preheader9_195;
if (reset == 1'b0 && ^(handle_small_bpp__preheader9_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__preheader9_195_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp62 = add i32 %183, 1*/
begin
handle_small_bpp__lr_ph13_tmp62 = (handle_small_bpp_181_183_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp62 = add i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp62_reg <= handle_small_bpp__lr_ph13_tmp62;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp62_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp63 = sub i32 0, %183*/
begin
handle_small_bpp__lr_ph13_tmp63 = (32'd0 - handle_small_bpp_181_183_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp63 = sub i32 0, %183*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp63_reg <= handle_small_bpp__lr_ph13_tmp63;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp63_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp64 = icmp sgt i32 %tmp63, -1*/
begin
handle_small_bpp__lr_ph13_tmp64 = ($signed(handle_small_bpp__lr_ph13_tmp63) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp64 = icmp sgt i32 %tmp63, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp64_reg <= handle_small_bpp__lr_ph13_tmp64;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp64_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %smax65 = select i1 %tmp64, i32 %tmp63, i32 -1*/
begin
handle_small_bpp__lr_ph13_smax65 = (handle_small_bpp__lr_ph13_tmp64 ? handle_small_bpp__lr_ph13_tmp63 : -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %smax65 = select i1 %tmp64, i32 %tmp63, i32 -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_smax65_reg <= handle_small_bpp__lr_ph13_smax65;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_smax65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_smax65_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp66 = add i32 %tmp62, %smax65*/
begin
handle_small_bpp__lr_ph13_tmp66 = (handle_small_bpp__lr_ph13_tmp62_reg + handle_small_bpp__lr_ph13_smax65_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp66 = add i32 %tmp62, %smax65*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_272))
begin
handle_small_bpp__lr_ph13_tmp66_reg <= handle_small_bpp__lr_ph13_tmp66;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp66_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp69 = shl i32 %183, 1*/
begin
handle_small_bpp__lr_ph13_tmp69 = (handle_small_bpp_181_183_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp69 = shl i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp69_reg <= handle_small_bpp__lr_ph13_tmp69;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp69_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp70 = add i32 %tmp69, -1*/
begin
handle_small_bpp__lr_ph13_tmp70 = (handle_small_bpp__lr_ph13_tmp69 + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp70 = add i32 %tmp69, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp70_reg <= handle_small_bpp__lr_ph13_tmp70;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp70_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp73 = add i32 %tmp69, -2*/
begin
handle_small_bpp__lr_ph13_tmp73 = (handle_small_bpp__lr_ph13_tmp69 + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp73 = add i32 %tmp69, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp73_reg <= handle_small_bpp__lr_ph13_tmp73;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp73_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp77 = add i32 %183, -1*/
begin
handle_small_bpp__lr_ph13_tmp77 = (handle_small_bpp_181_183_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph13*/
/*   %tmp77 = add i32 %183, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_271))
begin
handle_small_bpp__lr_ph13_tmp77_reg <= handle_small_bpp__lr_ph13_tmp77;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph13_tmp77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph13_tmp77_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %indvar60 = phi i32 [ 0, %.lr.ph13 ], [ %indvar.next61, %196 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_272) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_196_indvar60 = 32'd0;
end
/* handle_small_bpp: %196*/
/*   %indvar60 = phi i32 [ 0, %.lr.ph13 ], [ %indvar.next61, %196 ]*/
else /* if ((((cur_state == LEGUP_F_handle_small_bpp_BB_196_280) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_196_exitcond67_reg == 1'd0))) */
begin
handle_small_bpp_196_indvar60 = handle_small_bpp_196_indvar_next61_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %indvar60 = phi i32 [ 0, %.lr.ph13 ], [ %indvar.next61, %196 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph13_272) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_196_indvar60_reg <= handle_small_bpp_196_indvar60;
if (reset == 1'b0 && ^(handle_small_bpp_196_indvar60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_indvar60_reg"); $finish; end
end
/* handle_small_bpp: %196*/
/*   %indvar60 = phi i32 [ 0, %.lr.ph13 ], [ %indvar.next61, %196 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_196_280) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_196_exitcond67_reg == 1'd0)))
begin
handle_small_bpp_196_indvar60_reg <= handle_small_bpp_196_indvar60;
if (reset == 1'b0 && ^(handle_small_bpp_196_indvar60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_indvar60_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_196_tmp68 = handle_small_bpp_196_tmp68_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %tmp68 = mul i32 %indvar60, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
handle_small_bpp_196_tmp68_reg <= handle_small_bpp_196_tmp68;
if (reset == 1'b0 && ^(handle_small_bpp_196_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_tmp68_reg"); $finish; end
end
/* handle_small_bpp: %196*/
/*   %tmp68 = mul i32 %indvar60, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
handle_small_bpp_196_tmp68_reg <= handle_small_bpp_196_tmp68;
if (reset == 1'b0 && ^(handle_small_bpp_196_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_tmp68_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %tmp71 = add i32 %tmp70, %tmp68*/
begin
handle_small_bpp_196_tmp71 = (handle_small_bpp__lr_ph13_tmp70_reg + handle_small_bpp_196_tmp68);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %tmp71 = add i32 %tmp70, %tmp68*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
handle_small_bpp_196_tmp71_reg <= handle_small_bpp_196_tmp71;
if (reset == 1'b0 && ^(handle_small_bpp_196_tmp71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_tmp71_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %scevgep72 = getelementptr i32* %pd6.016, i32 %tmp71*/
begin
handle_small_bpp_196_scevgep72 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_196_tmp71_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %scevgep72 = getelementptr i32* %pd6.016, i32 %tmp71*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_275))
begin
handle_small_bpp_196_scevgep72_reg <= handle_small_bpp_196_scevgep72;
if (reset == 1'b0 && ^(handle_small_bpp_196_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_scevgep72_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %tmp74 = add i32 %tmp73, %tmp68*/
begin
handle_small_bpp_196_tmp74 = (handle_small_bpp__lr_ph13_tmp73_reg + handle_small_bpp_196_tmp68);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %tmp74 = add i32 %tmp73, %tmp68*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
handle_small_bpp_196_tmp74_reg <= handle_small_bpp_196_tmp74;
if (reset == 1'b0 && ^(handle_small_bpp_196_tmp74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_tmp74_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %scevgep75 = getelementptr i32* %pd6.016, i32 %tmp74*/
begin
handle_small_bpp_196_scevgep75 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_196_tmp74_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %scevgep75 = getelementptr i32* %pd6.016, i32 %tmp74*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_275))
begin
handle_small_bpp_196_scevgep75_reg <= handle_small_bpp_196_scevgep75;
if (reset == 1'b0 && ^(handle_small_bpp_196_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_scevgep75_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %tmp78 = sub i32 %tmp77, %indvar60*/
begin
handle_small_bpp_196_tmp78 = (handle_small_bpp__lr_ph13_tmp77_reg - handle_small_bpp_196_indvar60_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %tmp78 = sub i32 %tmp77, %indvar60*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_273))
begin
handle_small_bpp_196_tmp78_reg <= handle_small_bpp_196_tmp78;
if (reset == 1'b0 && ^(handle_small_bpp_196_tmp78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_tmp78_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %scevgep79 = getelementptr i32* %pd6.016, i32 %tmp78*/
begin
handle_small_bpp_196_scevgep79 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_196_tmp78_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %scevgep79 = getelementptr i32* %pd6.016, i32 %tmp78*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
handle_small_bpp_196_scevgep79_reg <= handle_small_bpp_196_scevgep79;
if (reset == 1'b0 && ^(handle_small_bpp_196_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_scevgep79_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
begin
handle_small_bpp_196_197 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
handle_small_bpp_196_197_reg <= handle_small_bpp_196_197;
if (reset == 1'b0 && ^(handle_small_bpp_196_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_197_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %198 = and i32 %197, 15*/
begin
handle_small_bpp_196_198 = (handle_small_bpp_196_197 & 32'd15);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %198 = and i32 %197, 15*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
handle_small_bpp_196_198_reg <= handle_small_bpp_196_198;
if (reset == 1'b0 && ^(handle_small_bpp_196_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_198_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
begin
handle_small_bpp_196_199 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
handle_small_bpp_196_199_reg <= handle_small_bpp_196_199;
if (reset == 1'b0 && ^(handle_small_bpp_196_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_199_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %200 = ashr i32 %199, 4*/
begin
handle_small_bpp_196_200 = ($signed(handle_small_bpp_196_199) >>> 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %200 = ashr i32 %199, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
handle_small_bpp_196_200_reg <= handle_small_bpp_196_200;
if (reset == 1'b0 && ^(handle_small_bpp_196_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_200_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %indvar.next61 = add i32 %indvar60, 1*/
begin
handle_small_bpp_196_indvar_next61 = (handle_small_bpp_196_indvar60_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %indvar.next61 = add i32 %indvar60, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_273))
begin
handle_small_bpp_196_indvar_next61_reg <= handle_small_bpp_196_indvar_next61;
if (reset == 1'b0 && ^(handle_small_bpp_196_indvar_next61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_indvar_next61_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %196*/
/*   %exitcond67 = icmp eq i32 %indvar.next61, %tmp66*/
begin
handle_small_bpp_196_exitcond67 = (handle_small_bpp_196_indvar_next61 == handle_small_bpp__lr_ph13_tmp66_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %exitcond67 = icmp eq i32 %indvar.next61, %tmp66*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_273))
begin
handle_small_bpp_196_exitcond67_reg <= handle_small_bpp_196_exitcond67;
if (reset == 1'b0 && ^(handle_small_bpp_196_exitcond67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_196_exitcond67_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %202*/
/*   %203 = getelementptr inbounds i32* %pd6.016, i32 %183*/
begin
handle_small_bpp_202_203 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_181_183_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %203 = getelementptr inbounds i32* %pd6.016, i32 %183*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
handle_small_bpp_202_203_reg <= handle_small_bpp_202_203;
if (reset == 1'b0 && ^(handle_small_bpp_202_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_203_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
begin
handle_small_bpp_202_204 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_284))
begin
handle_small_bpp_202_204_reg <= handle_small_bpp_202_204;
if (reset == 1'b0 && ^(handle_small_bpp_202_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_204_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %202*/
/*   %205 = ashr i32 %204, 4*/
begin
handle_small_bpp_202_205 = ($signed(handle_small_bpp_202_204) >>> 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %205 = ashr i32 %204, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_284))
begin
handle_small_bpp_202_205_reg <= handle_small_bpp_202_205;
if (reset == 1'b0 && ^(handle_small_bpp_202_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_205_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_202_206 = handle_small_bpp_202_206_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %206 = mul nsw i32 %205, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
handle_small_bpp_202_206_reg <= handle_small_bpp_202_206;
if (reset == 1'b0 && ^(handle_small_bpp_202_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_206_reg"); $finish; end
end
/* handle_small_bpp: %202*/
/*   %206 = mul nsw i32 %205, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
handle_small_bpp_202_206_reg <= handle_small_bpp_202_206;
if (reset == 1'b0 && ^(handle_small_bpp_202_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_206_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %202*/
/*   %207 = shl nsw i32 %183, 1*/
begin
handle_small_bpp_202_207 = (handle_small_bpp_181_183_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %207 = shl nsw i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
handle_small_bpp_202_207_reg <= handle_small_bpp_202_207;
if (reset == 1'b0 && ^(handle_small_bpp_202_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_207_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %202*/
/*   %208 = getelementptr inbounds i32* %pd6.016, i32 %207*/
begin
handle_small_bpp_202_208 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_202_207));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %208 = getelementptr inbounds i32* %pd6.016, i32 %207*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
handle_small_bpp_202_208_reg <= handle_small_bpp_202_208;
if (reset == 1'b0 && ^(handle_small_bpp_202_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_202_208_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.preheader*/
/*   %209 = icmp sgt i32 %182, 1*/
begin
handle_small_bpp__preheader_209 = ($signed(handle_small_bpp_181_182_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.preheader*/
/*   %209 = icmp sgt i32 %182, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__preheader_287))
begin
handle_small_bpp__preheader_209_reg <= handle_small_bpp__preheader_209;
if (reset == 1'b0 && ^(handle_small_bpp__preheader_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__preheader_209_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp = add i32 %183, 1*/
begin
handle_small_bpp__lr_ph_tmp = (handle_small_bpp_181_183_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp = add i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp_reg <= handle_small_bpp__lr_ph_tmp;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp46 = sub i32 0, %183*/
begin
handle_small_bpp__lr_ph_tmp46 = (32'd0 - handle_small_bpp_181_183_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp46 = sub i32 0, %183*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp46_reg <= handle_small_bpp__lr_ph_tmp46;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp46_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp47 = icmp sgt i32 %tmp46, -1*/
begin
handle_small_bpp__lr_ph_tmp47 = ($signed(handle_small_bpp__lr_ph_tmp46) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp47 = icmp sgt i32 %tmp46, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp47_reg <= handle_small_bpp__lr_ph_tmp47;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp47_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %smax = select i1 %tmp47, i32 %tmp46, i32 -1*/
begin
handle_small_bpp__lr_ph_smax = (handle_small_bpp__lr_ph_tmp47 ? handle_small_bpp__lr_ph_tmp46 : -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %smax = select i1 %tmp47, i32 %tmp46, i32 -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_smax_reg <= handle_small_bpp__lr_ph_smax;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_smax_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp48 = add i32 %tmp, %smax*/
begin
handle_small_bpp__lr_ph_tmp48 = (handle_small_bpp__lr_ph_tmp_reg + handle_small_bpp__lr_ph_smax_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp48 = add i32 %tmp, %smax*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_289))
begin
handle_small_bpp__lr_ph_tmp48_reg <= handle_small_bpp__lr_ph_tmp48;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp48_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp50 = shl i32 %183, 1*/
begin
handle_small_bpp__lr_ph_tmp50 = (handle_small_bpp_181_183_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp50 = shl i32 %183, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp50_reg <= handle_small_bpp__lr_ph_tmp50;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp50_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp51 = add i32 %tmp50, -1*/
begin
handle_small_bpp__lr_ph_tmp51 = (handle_small_bpp__lr_ph_tmp50 + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp51 = add i32 %tmp50, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp51_reg <= handle_small_bpp__lr_ph_tmp51;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp51_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp53 = add i32 %tmp50, -2*/
begin
handle_small_bpp__lr_ph_tmp53 = (handle_small_bpp__lr_ph_tmp50 + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp53 = add i32 %tmp50, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp53_reg <= handle_small_bpp__lr_ph_tmp53;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp53_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp57 = add i32 %183, -1*/
begin
handle_small_bpp__lr_ph_tmp57 = (handle_small_bpp_181_183_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.lr.ph*/
/*   %tmp57 = add i32 %183, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_288))
begin
handle_small_bpp__lr_ph_tmp57_reg <= handle_small_bpp__lr_ph_tmp57;
if (reset == 1'b0 && ^(handle_small_bpp__lr_ph_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__lr_ph_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %210 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_289) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_210_indvar = 32'd0;
end
/* handle_small_bpp: %210*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %210 ]*/
else /* if ((((cur_state == LEGUP_F_handle_small_bpp_BB_210_299) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_210_exitcond_reg == 1'd0))) */
begin
handle_small_bpp_210_indvar = handle_small_bpp_210_indvar_next_reg;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %210 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph_289) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_210_indvar_reg <= handle_small_bpp_210_indvar;
if (reset == 1'b0 && ^(handle_small_bpp_210_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_indvar_reg"); $finish; end
end
/* handle_small_bpp: %210*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %210 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_210_299) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_210_exitcond_reg == 1'd0)))
begin
handle_small_bpp_210_indvar_reg <= handle_small_bpp_210_indvar;
if (reset == 1'b0 && ^(handle_small_bpp_210_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_indvar_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_210_tmp49 = handle_small_bpp_210_tmp49_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %tmp49 = mul i32 %indvar, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
handle_small_bpp_210_tmp49_reg <= handle_small_bpp_210_tmp49;
if (reset == 1'b0 && ^(handle_small_bpp_210_tmp49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_tmp49_reg"); $finish; end
end
/* handle_small_bpp: %210*/
/*   %tmp49 = mul i32 %indvar, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
handle_small_bpp_210_tmp49_reg <= handle_small_bpp_210_tmp49;
if (reset == 1'b0 && ^(handle_small_bpp_210_tmp49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_tmp49_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %tmp52 = add i32 %tmp51, %tmp49*/
begin
handle_small_bpp_210_tmp52 = (handle_small_bpp__lr_ph_tmp51_reg + handle_small_bpp_210_tmp49);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %tmp52 = add i32 %tmp51, %tmp49*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
handle_small_bpp_210_tmp52_reg <= handle_small_bpp_210_tmp52;
if (reset == 1'b0 && ^(handle_small_bpp_210_tmp52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_tmp52_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %scevgep = getelementptr i32* %pd6.016, i32 %tmp52*/
begin
handle_small_bpp_210_scevgep = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_210_tmp52_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %scevgep = getelementptr i32* %pd6.016, i32 %tmp52*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_292))
begin
handle_small_bpp_210_scevgep_reg <= handle_small_bpp_210_scevgep;
if (reset == 1'b0 && ^(handle_small_bpp_210_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %tmp54 = add i32 %tmp53, %tmp49*/
begin
handle_small_bpp_210_tmp54 = (handle_small_bpp__lr_ph_tmp53_reg + handle_small_bpp_210_tmp49);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %tmp54 = add i32 %tmp53, %tmp49*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
handle_small_bpp_210_tmp54_reg <= handle_small_bpp_210_tmp54;
if (reset == 1'b0 && ^(handle_small_bpp_210_tmp54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_tmp54_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %scevgep55 = getelementptr i32* %pd6.016, i32 %tmp54*/
begin
handle_small_bpp_210_scevgep55 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_210_tmp54_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %scevgep55 = getelementptr i32* %pd6.016, i32 %tmp54*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_292))
begin
handle_small_bpp_210_scevgep55_reg <= handle_small_bpp_210_scevgep55;
if (reset == 1'b0 && ^(handle_small_bpp_210_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_scevgep55_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %tmp58 = sub i32 %tmp57, %indvar*/
begin
handle_small_bpp_210_tmp58 = (handle_small_bpp__lr_ph_tmp57_reg - handle_small_bpp_210_indvar_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %tmp58 = sub i32 %tmp57, %indvar*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_290))
begin
handle_small_bpp_210_tmp58_reg <= handle_small_bpp_210_tmp58;
if (reset == 1'b0 && ^(handle_small_bpp_210_tmp58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_tmp58_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %scevgep59 = getelementptr i32* %pd6.016, i32 %tmp58*/
begin
handle_small_bpp_210_scevgep59 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp_210_tmp58_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %scevgep59 = getelementptr i32* %pd6.016, i32 %tmp58*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
handle_small_bpp_210_scevgep59_reg <= handle_small_bpp_210_scevgep59;
if (reset == 1'b0 && ^(handle_small_bpp_210_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_scevgep59_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
begin
handle_small_bpp_210_211 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_293))
begin
handle_small_bpp_210_211_reg <= handle_small_bpp_210_211;
if (reset == 1'b0 && ^(handle_small_bpp_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_211_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %212 = and i32 %211, 15*/
begin
handle_small_bpp_210_212 = (handle_small_bpp_210_211 & 32'd15);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %212 = and i32 %211, 15*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_293))
begin
handle_small_bpp_210_212_reg <= handle_small_bpp_210_212;
if (reset == 1'b0 && ^(handle_small_bpp_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_212_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_210_213 = handle_small_bpp_210_213_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %213 = mul nsw i32 %212, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
handle_small_bpp_210_213_reg <= handle_small_bpp_210_213;
if (reset == 1'b0 && ^(handle_small_bpp_210_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_213_reg"); $finish; end
end
/* handle_small_bpp: %210*/
/*   %213 = mul nsw i32 %212, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
handle_small_bpp_210_213_reg <= handle_small_bpp_210_213;
if (reset == 1'b0 && ^(handle_small_bpp_210_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_213_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
begin
handle_small_bpp_210_214 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_297))
begin
handle_small_bpp_210_214_reg <= handle_small_bpp_210_214;
if (reset == 1'b0 && ^(handle_small_bpp_210_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_214_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %215 = ashr i32 %214, 4*/
begin
handle_small_bpp_210_215 = ($signed(handle_small_bpp_210_214) >>> 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %215 = ashr i32 %214, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_297))
begin
handle_small_bpp_210_215_reg <= handle_small_bpp_210_215;
if (reset == 1'b0 && ^(handle_small_bpp_210_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_215_reg"); $finish; end
end
end
always @(*) begin
handle_small_bpp_210_216 = handle_small_bpp_210_216_stage0_reg;
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %216 = mul nsw i32 %215, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
handle_small_bpp_210_216_reg <= handle_small_bpp_210_216;
if (reset == 1'b0 && ^(handle_small_bpp_210_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_216_reg"); $finish; end
end
/* handle_small_bpp: %210*/
/*   %216 = mul nsw i32 %215, 17*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
handle_small_bpp_210_216_reg <= handle_small_bpp_210_216;
if (reset == 1'b0 && ^(handle_small_bpp_210_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_216_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
handle_small_bpp_210_indvar_next = (handle_small_bpp_210_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_290))
begin
handle_small_bpp_210_indvar_next_reg <= handle_small_bpp_210_indvar_next;
if (reset == 1'b0 && ^(handle_small_bpp_210_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %210*/
/*   %exitcond = icmp eq i32 %indvar.next, %tmp48*/
begin
handle_small_bpp_210_exitcond = (handle_small_bpp_210_indvar_next == handle_small_bpp__lr_ph_tmp48_reg);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %exitcond = icmp eq i32 %indvar.next, %tmp48*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_290))
begin
handle_small_bpp_210_exitcond_reg <= handle_small_bpp_210_exitcond;
if (reset == 1'b0 && ^(handle_small_bpp_210_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_210_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
begin
handle_small_bpp__loopexit_217 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_304))
begin
handle_small_bpp__loopexit_217_reg <= handle_small_bpp__loopexit_217;
if (reset == 1'b0 && ^(handle_small_bpp__loopexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__loopexit_217_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.loopexit*/
/*   %218 = icmp slt i32 %j5.015, %217*/
begin
handle_small_bpp__loopexit_218 = ($signed(handle_small_bpp_181_j5_015_reg) < $signed(handle_small_bpp__loopexit_217));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.loopexit*/
/*   %218 = icmp slt i32 %j5.015, %217*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_304))
begin
handle_small_bpp__loopexit_218_reg <= handle_small_bpp__loopexit_218;
if (reset == 1'b0 && ^(handle_small_bpp__loopexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__loopexit_218_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
begin
handle_small_bpp___crit_edge193_219 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307))
begin
handle_small_bpp___crit_edge193_219_reg <= handle_small_bpp___crit_edge193_219;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge193_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge193_219_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %220 = getelementptr inbounds i32* %pd6.016, i32 %219*/
begin
handle_small_bpp___crit_edge193_220 = (handle_small_bpp_181_pd6_016_reg + (4 * handle_small_bpp___crit_edge193_219));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %220 = getelementptr inbounds i32* %pd6.016, i32 %219*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_307))
begin
handle_small_bpp___crit_edge193_220_reg <= handle_small_bpp___crit_edge193_220;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge193_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge193_220_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %phitmp = add i32 %j5.015, 1*/
begin
handle_small_bpp___crit_edge193_phitmp = (handle_small_bpp_181_j5_015_reg + 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %._crit_edge193*/
/*   %phitmp = add i32 %j5.015, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305))
begin
handle_small_bpp___crit_edge193_phitmp_reg <= handle_small_bpp___crit_edge193_phitmp;
if (reset == 1'b0 && ^(handle_small_bpp___crit_edge193_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp___crit_edge193_phitmp_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %221*/
/*   %222 = phi i32 [ %.pre184, %225 ], [ %27, %26 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_26_56) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_26_29 == 1'd1)))
begin
handle_small_bpp_221_222 = handle_small_bpp_26_27_reg;
end
/* handle_small_bpp: %221*/
/*   %222 = phi i32 [ %.pre184, %225 ], [ %27, %26 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_318) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_221_222 = handle_small_bpp_225__pre184;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %221*/
/*   %222 = phi i32 [ %.pre184, %225 ], [ %27, %26 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_26_56) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_26_29 == 1'd1)))
begin
handle_small_bpp_221_222_reg <= handle_small_bpp_221_222;
if (reset == 1'b0 && ^(handle_small_bpp_221_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_221_222_reg"); $finish; end
end
/* handle_small_bpp: %221*/
/*   %222 = phi i32 [ %.pre184, %225 ], [ %27, %26 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_225_318) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_221_222_reg <= handle_small_bpp_221_222;
if (reset == 1'b0 && ^(handle_small_bpp_221_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_221_222_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %221*/
/*   %223 = and i32 %222, 7*/
begin
handle_small_bpp_221_223 = (handle_small_bpp_221_222_reg & 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %221*/
/*   %223 = and i32 %222, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_221_312))
begin
handle_small_bpp_221_223_reg <= handle_small_bpp_221_223;
if (reset == 1'b0 && ^(handle_small_bpp_221_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_221_223_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %221*/
/*   %224 = icmp ult i32 %223, 5*/
begin
handle_small_bpp_221_224 = (handle_small_bpp_221_223 < 32'd5);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %221*/
/*   %224 = icmp ult i32 %223, 5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_221_312))
begin
handle_small_bpp_221_224_reg <= handle_small_bpp_221_224;
if (reset == 1'b0 && ^(handle_small_bpp_221_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_221_224_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %tmp142.1 = add i32 %tmp141183, -1*/
begin
handle_small_bpp_225_tmp142_1 = (handle_small_bpp_16_tmp141183_reg + -32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %tmp142.1 = add i32 %tmp141183, -1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_313))
begin
handle_small_bpp_225_tmp142_1_reg <= handle_small_bpp_225_tmp142_1;
if (reset == 1'b0 && ^(handle_small_bpp_225_tmp142_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225_tmp142_1_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %scevgep143.1 = getelementptr i32* %pd.042, i32 %tmp142.1*/
begin
handle_small_bpp_225_scevgep143_1 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_225_tmp142_1_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %scevgep143.1 = getelementptr i32* %pd.042, i32 %tmp142.1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_314))
begin
handle_small_bpp_225_scevgep143_1_reg <= handle_small_bpp_225_scevgep143_1;
if (reset == 1'b0 && ^(handle_small_bpp_225_scevgep143_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225_scevgep143_1_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_225_226 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
handle_small_bpp_225_226_reg <= handle_small_bpp_225_226;
if (reset == 1'b0 && ^(handle_small_bpp_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225_226_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %227 = lshr i32 %226, 2*/
begin
handle_small_bpp_225_227 = (handle_small_bpp_225_226 >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %227 = lshr i32 %226, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
handle_small_bpp_225_227_reg <= handle_small_bpp_225_227;
if (reset == 1'b0 && ^(handle_small_bpp_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225_227_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %228 = and i32 %227, 1*/
begin
handle_small_bpp_225_228 = (handle_small_bpp_225_227 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %228 = and i32 %227, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
handle_small_bpp_225_228_reg <= handle_small_bpp_225_228;
if (reset == 1'b0 && ^(handle_small_bpp_225_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225_228_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_225__pre184 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_318))
begin
handle_small_bpp_225__pre184_reg <= handle_small_bpp_225__pre184;
if (reset == 1'b0 && ^(handle_small_bpp_225__pre184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_225__pre184_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %229*/
/*   %230 = phi i32 [ %.pre185, %233 ], [ %222, %221 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_221_312) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_221_224 == 1'd1)))
begin
handle_small_bpp_229_230 = handle_small_bpp_221_222_reg;
end
/* handle_small_bpp: %229*/
/*   %230 = phi i32 [ %.pre185, %233 ], [ %222, %221 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_325) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_229_230 = handle_small_bpp_233__pre185;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %229*/
/*   %230 = phi i32 [ %.pre185, %233 ], [ %222, %221 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_221_312) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_221_224 == 1'd1)))
begin
handle_small_bpp_229_230_reg <= handle_small_bpp_229_230;
if (reset == 1'b0 && ^(handle_small_bpp_229_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_229_230_reg"); $finish; end
end
/* handle_small_bpp: %229*/
/*   %230 = phi i32 [ %.pre185, %233 ], [ %222, %221 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_233_325) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_229_230_reg <= handle_small_bpp_229_230;
if (reset == 1'b0 && ^(handle_small_bpp_229_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_229_230_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %229*/
/*   %231 = and i32 %230, 4*/
begin
handle_small_bpp_229_231 = (handle_small_bpp_229_230_reg & 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %229*/
/*   %231 = and i32 %230, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_229_319))
begin
handle_small_bpp_229_231_reg <= handle_small_bpp_229_231;
if (reset == 1'b0 && ^(handle_small_bpp_229_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_229_231_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %229*/
/*   %232 = icmp ult i32 %231, 4*/
begin
handle_small_bpp_229_232 = (handle_small_bpp_229_231 < 32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %229*/
/*   %232 = icmp ult i32 %231, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_229_319))
begin
handle_small_bpp_229_232_reg <= handle_small_bpp_229_232;
if (reset == 1'b0 && ^(handle_small_bpp_229_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_229_232_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %tmp142.2 = add i32 %tmp141183, -2*/
begin
handle_small_bpp_233_tmp142_2 = (handle_small_bpp_16_tmp141183_reg + -32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %tmp142.2 = add i32 %tmp141183, -2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_320))
begin
handle_small_bpp_233_tmp142_2_reg <= handle_small_bpp_233_tmp142_2;
if (reset == 1'b0 && ^(handle_small_bpp_233_tmp142_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233_tmp142_2_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %scevgep143.2 = getelementptr i32* %pd.042, i32 %tmp142.2*/
begin
handle_small_bpp_233_scevgep143_2 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_233_tmp142_2_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %scevgep143.2 = getelementptr i32* %pd.042, i32 %tmp142.2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_321))
begin
handle_small_bpp_233_scevgep143_2_reg <= handle_small_bpp_233_scevgep143_2;
if (reset == 1'b0 && ^(handle_small_bpp_233_scevgep143_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233_scevgep143_2_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_233_234 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
handle_small_bpp_233_234_reg <= handle_small_bpp_233_234;
if (reset == 1'b0 && ^(handle_small_bpp_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233_234_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %235 = lshr i32 %234, 3*/
begin
handle_small_bpp_233_235 = (handle_small_bpp_233_234 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %235 = lshr i32 %234, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
handle_small_bpp_233_235_reg <= handle_small_bpp_233_235;
if (reset == 1'b0 && ^(handle_small_bpp_233_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233_235_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %236 = and i32 %235, 1*/
begin
handle_small_bpp_233_236 = (handle_small_bpp_233_235 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %236 = and i32 %235, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
handle_small_bpp_233_236_reg <= handle_small_bpp_233_236;
if (reset == 1'b0 && ^(handle_small_bpp_233_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233_236_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_233__pre185 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_325))
begin
handle_small_bpp_233__pre185_reg <= handle_small_bpp_233__pre185;
if (reset == 1'b0 && ^(handle_small_bpp_233__pre185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_233__pre185_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %237*/
/*   %238 = phi i32 [ %.pre186, %241 ], [ %230, %229 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_229_319) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_229_232 == 1'd1)))
begin
handle_small_bpp_237_238 = handle_small_bpp_229_230_reg;
end
/* handle_small_bpp: %237*/
/*   %238 = phi i32 [ %.pre186, %241 ], [ %230, %229 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_332) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_237_238 = handle_small_bpp_241__pre186;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %237*/
/*   %238 = phi i32 [ %.pre186, %241 ], [ %230, %229 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_229_319) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_229_232 == 1'd1)))
begin
handle_small_bpp_237_238_reg <= handle_small_bpp_237_238;
if (reset == 1'b0 && ^(handle_small_bpp_237_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_237_238_reg"); $finish; end
end
/* handle_small_bpp: %237*/
/*   %238 = phi i32 [ %.pre186, %241 ], [ %230, %229 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_241_332) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_237_238_reg <= handle_small_bpp_237_238;
if (reset == 1'b0 && ^(handle_small_bpp_237_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_237_238_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %237*/
/*   %239 = and i32 %238, 7*/
begin
handle_small_bpp_237_239 = (handle_small_bpp_237_238_reg & 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %237*/
/*   %239 = and i32 %238, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_237_326))
begin
handle_small_bpp_237_239_reg <= handle_small_bpp_237_239;
if (reset == 1'b0 && ^(handle_small_bpp_237_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_237_239_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %237*/
/*   %240 = icmp ult i32 %239, 3*/
begin
handle_small_bpp_237_240 = (handle_small_bpp_237_239 < 32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %237*/
/*   %240 = icmp ult i32 %239, 3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_237_326))
begin
handle_small_bpp_237_240_reg <= handle_small_bpp_237_240;
if (reset == 1'b0 && ^(handle_small_bpp_237_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_237_240_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %tmp142.3 = add i32 %tmp141183, -3*/
begin
handle_small_bpp_241_tmp142_3 = (handle_small_bpp_16_tmp141183_reg + -32'd3);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %tmp142.3 = add i32 %tmp141183, -3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_327))
begin
handle_small_bpp_241_tmp142_3_reg <= handle_small_bpp_241_tmp142_3;
if (reset == 1'b0 && ^(handle_small_bpp_241_tmp142_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241_tmp142_3_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %scevgep143.3 = getelementptr i32* %pd.042, i32 %tmp142.3*/
begin
handle_small_bpp_241_scevgep143_3 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_241_tmp142_3_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %scevgep143.3 = getelementptr i32* %pd.042, i32 %tmp142.3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_328))
begin
handle_small_bpp_241_scevgep143_3_reg <= handle_small_bpp_241_scevgep143_3;
if (reset == 1'b0 && ^(handle_small_bpp_241_scevgep143_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241_scevgep143_3_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_241_242 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
handle_small_bpp_241_242_reg <= handle_small_bpp_241_242;
if (reset == 1'b0 && ^(handle_small_bpp_241_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241_242_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %243 = lshr i32 %242, 4*/
begin
handle_small_bpp_241_243 = (handle_small_bpp_241_242 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %243 = lshr i32 %242, 4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
handle_small_bpp_241_243_reg <= handle_small_bpp_241_243;
if (reset == 1'b0 && ^(handle_small_bpp_241_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241_243_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %244 = and i32 %243, 1*/
begin
handle_small_bpp_241_244 = (handle_small_bpp_241_243 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %244 = and i32 %243, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
handle_small_bpp_241_244_reg <= handle_small_bpp_241_244;
if (reset == 1'b0 && ^(handle_small_bpp_241_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241_244_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_241__pre186 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_332))
begin
handle_small_bpp_241__pre186_reg <= handle_small_bpp_241__pre186;
if (reset == 1'b0 && ^(handle_small_bpp_241__pre186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_241__pre186_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %245*/
/*   %246 = phi i32 [ %.pre187, %249 ], [ %238, %237 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_237_326) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_237_240 == 1'd1)))
begin
handle_small_bpp_245_246 = handle_small_bpp_237_238_reg;
end
/* handle_small_bpp: %245*/
/*   %246 = phi i32 [ %.pre187, %249 ], [ %238, %237 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_339) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_245_246 = handle_small_bpp_249__pre187;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %245*/
/*   %246 = phi i32 [ %.pre187, %249 ], [ %238, %237 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_237_326) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_237_240 == 1'd1)))
begin
handle_small_bpp_245_246_reg <= handle_small_bpp_245_246;
if (reset == 1'b0 && ^(handle_small_bpp_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_245_246_reg"); $finish; end
end
/* handle_small_bpp: %245*/
/*   %246 = phi i32 [ %.pre187, %249 ], [ %238, %237 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_249_339) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_245_246_reg <= handle_small_bpp_245_246;
if (reset == 1'b0 && ^(handle_small_bpp_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_245_246_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %245*/
/*   %247 = and i32 %246, 6*/
begin
handle_small_bpp_245_247 = (handle_small_bpp_245_246_reg & 32'd6);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %245*/
/*   %247 = and i32 %246, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_245_333))
begin
handle_small_bpp_245_247_reg <= handle_small_bpp_245_247;
if (reset == 1'b0 && ^(handle_small_bpp_245_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_245_247_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %245*/
/*   %248 = icmp ult i32 %247, 2*/
begin
handle_small_bpp_245_248 = (handle_small_bpp_245_247 < 32'd2);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %245*/
/*   %248 = icmp ult i32 %247, 2*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_245_333))
begin
handle_small_bpp_245_248_reg <= handle_small_bpp_245_248;
if (reset == 1'b0 && ^(handle_small_bpp_245_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_245_248_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %tmp142.4 = add i32 %tmp141183, -4*/
begin
handle_small_bpp_249_tmp142_4 = (handle_small_bpp_16_tmp141183_reg + -32'd4);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %tmp142.4 = add i32 %tmp141183, -4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_334))
begin
handle_small_bpp_249_tmp142_4_reg <= handle_small_bpp_249_tmp142_4;
if (reset == 1'b0 && ^(handle_small_bpp_249_tmp142_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249_tmp142_4_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %scevgep143.4 = getelementptr i32* %pd.042, i32 %tmp142.4*/
begin
handle_small_bpp_249_scevgep143_4 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_249_tmp142_4_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %scevgep143.4 = getelementptr i32* %pd.042, i32 %tmp142.4*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_335))
begin
handle_small_bpp_249_scevgep143_4_reg <= handle_small_bpp_249_scevgep143_4;
if (reset == 1'b0 && ^(handle_small_bpp_249_scevgep143_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249_scevgep143_4_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_249_250 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
handle_small_bpp_249_250_reg <= handle_small_bpp_249_250;
if (reset == 1'b0 && ^(handle_small_bpp_249_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249_250_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %251 = lshr i32 %250, 5*/
begin
handle_small_bpp_249_251 = (handle_small_bpp_249_250 >>> (32'd5 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %251 = lshr i32 %250, 5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
handle_small_bpp_249_251_reg <= handle_small_bpp_249_251;
if (reset == 1'b0 && ^(handle_small_bpp_249_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249_251_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %252 = and i32 %251, 1*/
begin
handle_small_bpp_249_252 = (handle_small_bpp_249_251 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %252 = and i32 %251, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
handle_small_bpp_249_252_reg <= handle_small_bpp_249_252;
if (reset == 1'b0 && ^(handle_small_bpp_249_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249_252_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_249__pre187 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_339))
begin
handle_small_bpp_249__pre187_reg <= handle_small_bpp_249__pre187;
if (reset == 1'b0 && ^(handle_small_bpp_249__pre187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_249__pre187_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %253*/
/*   %254 = phi i32 [ %.pre188, %257 ], [ %246, %245 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_245_333) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_245_248 == 1'd1)))
begin
handle_small_bpp_253_254 = handle_small_bpp_245_246_reg;
end
/* handle_small_bpp: %253*/
/*   %254 = phi i32 [ %.pre188, %257 ], [ %246, %245 ]*/
else /* if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_346) & (memory_controller_waitrequest == 1'd0))) */
begin
handle_small_bpp_253_254 = handle_small_bpp_257__pre188;
end
end
always @(posedge clk) begin
/* handle_small_bpp: %253*/
/*   %254 = phi i32 [ %.pre188, %257 ], [ %246, %245 ]*/
if ((((cur_state == LEGUP_F_handle_small_bpp_BB_245_333) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_245_248 == 1'd1)))
begin
handle_small_bpp_253_254_reg <= handle_small_bpp_253_254;
if (reset == 1'b0 && ^(handle_small_bpp_253_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_253_254_reg"); $finish; end
end
/* handle_small_bpp: %253*/
/*   %254 = phi i32 [ %.pre188, %257 ], [ %246, %245 ]*/
if (((cur_state == LEGUP_F_handle_small_bpp_BB_257_346) & (memory_controller_waitrequest == 1'd0)))
begin
handle_small_bpp_253_254_reg <= handle_small_bpp_253_254;
if (reset == 1'b0 && ^(handle_small_bpp_253_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_253_254_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %253*/
/*   %255 = and i32 %254, 7*/
begin
handle_small_bpp_253_255 = (handle_small_bpp_253_254_reg & 32'd7);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %253*/
/*   %255 = and i32 %254, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_253_340))
begin
handle_small_bpp_253_255_reg <= handle_small_bpp_253_255;
if (reset == 1'b0 && ^(handle_small_bpp_253_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_253_255_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %253*/
/*   %256 = icmp eq i32 %255, 0*/
begin
handle_small_bpp_253_256 = (handle_small_bpp_253_255 == 32'd0);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %253*/
/*   %256 = icmp eq i32 %255, 0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_253_340))
begin
handle_small_bpp_253_256_reg <= handle_small_bpp_253_256;
if (reset == 1'b0 && ^(handle_small_bpp_253_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_253_256_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %tmp142.5 = add i32 %tmp141183, -5*/
begin
handle_small_bpp_257_tmp142_5 = (handle_small_bpp_16_tmp141183_reg + -32'd5);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %tmp142.5 = add i32 %tmp141183, -5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_341))
begin
handle_small_bpp_257_tmp142_5_reg <= handle_small_bpp_257_tmp142_5;
if (reset == 1'b0 && ^(handle_small_bpp_257_tmp142_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257_tmp142_5_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %scevgep143.5 = getelementptr i32* %pd.042, i32 %tmp142.5*/
begin
handle_small_bpp_257_scevgep143_5 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_257_tmp142_5_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %scevgep143.5 = getelementptr i32* %pd.042, i32 %tmp142.5*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_342))
begin
handle_small_bpp_257_scevgep143_5_reg <= handle_small_bpp_257_scevgep143_5;
if (reset == 1'b0 && ^(handle_small_bpp_257_scevgep143_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257_scevgep143_5_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_257_258 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
handle_small_bpp_257_258_reg <= handle_small_bpp_257_258;
if (reset == 1'b0 && ^(handle_small_bpp_257_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257_258_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %259 = lshr i32 %258, 6*/
begin
handle_small_bpp_257_259 = (handle_small_bpp_257_258 >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %259 = lshr i32 %258, 6*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
handle_small_bpp_257_259_reg <= handle_small_bpp_257_259;
if (reset == 1'b0 && ^(handle_small_bpp_257_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257_259_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %260 = and i32 %259, 1*/
begin
handle_small_bpp_257_260 = (handle_small_bpp_257_259 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %260 = and i32 %259, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
handle_small_bpp_257_260_reg <= handle_small_bpp_257_260;
if (reset == 1'b0 && ^(handle_small_bpp_257_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257_260_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
begin
handle_small_bpp_257__pre188 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_346))
begin
handle_small_bpp_257__pre188_reg <= handle_small_bpp_257__pre188;
if (reset == 1'b0 && ^(handle_small_bpp_257__pre188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_257__pre188_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %.loopexit36*/
/*   %261 = icmp sgt i32 %17, 7*/
begin
handle_small_bpp__loopexit36_261 = ($signed(handle_small_bpp_16_17_reg) > $signed(32'd7));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %.loopexit36*/
/*   %261 = icmp sgt i32 %17, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit36_347))
begin
handle_small_bpp__loopexit36_261_reg <= handle_small_bpp__loopexit36_261;
if (reset == 1'b0 && ^(handle_small_bpp__loopexit36_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp__loopexit36_261_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %262*/
/*   %scevgep143.6 = getelementptr i32* %pd.042, i32 %tmp140*/
begin
handle_small_bpp_262_scevgep143_6 = (handle_small_bpp_16_pd_042_reg + (4 * handle_small_bpp_16_tmp140_reg));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %262*/
/*   %scevgep143.6 = getelementptr i32* %pd.042, i32 %tmp140*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_348))
begin
handle_small_bpp_262_scevgep143_6_reg <= handle_small_bpp_262_scevgep143_6;
if (reset == 1'b0 && ^(handle_small_bpp_262_scevgep143_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_262_scevgep143_6_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
begin
handle_small_bpp_262_263 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
handle_small_bpp_262_263_reg <= handle_small_bpp_262_263;
if (reset == 1'b0 && ^(handle_small_bpp_262_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_262_263_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %262*/
/*   %264 = lshr i32 %263, 7*/
begin
handle_small_bpp_262_264 = (handle_small_bpp_262_263 >>> (32'd7 % 32));
end
end
always @(posedge clk) begin
/* handle_small_bpp: %262*/
/*   %264 = lshr i32 %263, 7*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
handle_small_bpp_262_264_reg <= handle_small_bpp_262_264;
if (reset == 1'b0 && ^(handle_small_bpp_262_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_262_264_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %262*/
/*   %265 = and i32 %264, 1*/
begin
handle_small_bpp_262_265 = (handle_small_bpp_262_264 & 32'd1);
end
end
always @(posedge clk) begin
/* handle_small_bpp: %262*/
/*   %265 = and i32 %264, 1*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
handle_small_bpp_262_265_reg <= handle_small_bpp_262_265;
if (reset == 1'b0 && ^(handle_small_bpp_262_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_262_265_reg"); $finish; end
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %18 = sdiv i32 %17, 8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_17))
begin
handle_small_bpp_signed_divide_32_0_op0 = handle_small_bpp_16_17;
end
/* handle_small_bpp: %67*/
/*   %69 = sdiv i32 %68, 4*/
else if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_signed_divide_32_0_op0 = handle_small_bpp_67_68;
end
/* handle_small_bpp: %181*/
/*   %183 = sdiv i32 %182, 2*/
else /* if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232)) */
begin
handle_small_bpp_signed_divide_32_0_op0 = handle_small_bpp_181_182;
end
end
always @(*) begin
/* handle_small_bpp: %16*/
/*   %18 = sdiv i32 %17, 8*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_17))
begin
handle_small_bpp_signed_divide_32_0_op1 = 32'd8;
end
/* handle_small_bpp: %67*/
/*   %69 = sdiv i32 %68, 4*/
else if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_102))
begin
handle_small_bpp_signed_divide_32_0_op1 = 32'd4;
end
/* handle_small_bpp: %181*/
/*   %183 = sdiv i32 %182, 2*/
else /* if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_232)) */
begin
handle_small_bpp_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_handle_small_bpp_16_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_handle_small_bpp_16_18_out = lpm_divide_handle_small_bpp_16_18_temp_out;
end
always @(*) begin
handle_small_bpp_signed_divide_32_0 = lpm_divide_handle_small_bpp_16_18_out;
end
always @(*) begin
lpm_mult_handle_small_bpp_30_tmp152_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %30*/
/*   %tmp152 = mul i32 %indvar144, -8*/
if ((lpm_mult_handle_small_bpp_30_tmp152_en == 1'd1))
begin
handle_small_bpp_30_tmp152_stage0_reg <= (handle_small_bpp_30_indvar144_reg * -32'd8);
end
end
always @(*) begin
lpm_divide_handle_small_bpp_67_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_handle_small_bpp_106_tmp115_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %106*/
/*   %tmp115 = mul i32 %indvar107, -4*/
if ((lpm_mult_handle_small_bpp_106_tmp115_en == 1'd1))
begin
handle_small_bpp_106_tmp115_stage0_reg <= (handle_small_bpp_106_indvar107_reg * -32'd4);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_118_123_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %118*/
/*   %123 = mul nsw i32 %122, 85*/
if ((lpm_mult_handle_small_bpp_118_123_en == 1'd1))
begin
handle_small_bpp_118_123_stage0_reg <= (handle_small_bpp_118_122 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_131_136_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %131*/
/*   %136 = mul nsw i32 %135, 85*/
if ((lpm_mult_handle_small_bpp_131_136_en == 1'd1))
begin
handle_small_bpp_131_136_stage0_reg <= (handle_small_bpp_131_135 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_144_148_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %144*/
/*   %148 = mul nsw i32 %147, 85*/
if ((lpm_mult_handle_small_bpp_144_148_en == 1'd1))
begin
handle_small_bpp_144_148_stage0_reg <= (handle_small_bpp_144_147 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_152_tmp89_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %tmp89 = mul i32 %indvar81, -4*/
if ((lpm_mult_handle_small_bpp_152_tmp89_en == 1'd1))
begin
handle_small_bpp_152_tmp89_stage0_reg <= (handle_small_bpp_152_indvar81_reg * -32'd4);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_152_155_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %155 = mul nsw i32 %154, 85*/
if ((lpm_mult_handle_small_bpp_152_155_en == 1'd1))
begin
handle_small_bpp_152_155_stage0_reg <= (handle_small_bpp_152_154 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_152_159_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %159 = mul nsw i32 %158, 85*/
if ((lpm_mult_handle_small_bpp_152_159_en == 1'd1))
begin
handle_small_bpp_152_159_stage0_reg <= (handle_small_bpp_152_158 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_152_163_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %163 = mul nsw i32 %162, 85*/
if ((lpm_mult_handle_small_bpp_152_163_en == 1'd1))
begin
handle_small_bpp_152_163_stage0_reg <= (handle_small_bpp_152_162 * 32'd85);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_152_166_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %152*/
/*   %166 = mul nsw i32 %165, 85*/
if ((lpm_mult_handle_small_bpp_152_166_en == 1'd1))
begin
handle_small_bpp_152_166_stage0_reg <= (handle_small_bpp_152_165 * 32'd85);
end
end
always @(*) begin
lpm_divide_handle_small_bpp_181_183_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_handle_small_bpp_196_tmp68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %196*/
/*   %tmp68 = mul i32 %indvar60, -2*/
if ((lpm_mult_handle_small_bpp_196_tmp68_en == 1'd1))
begin
handle_small_bpp_196_tmp68_stage0_reg <= (handle_small_bpp_196_indvar60_reg * -32'd2);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_202_206_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %202*/
/*   %206 = mul nsw i32 %205, 17*/
if ((lpm_mult_handle_small_bpp_202_206_en == 1'd1))
begin
handle_small_bpp_202_206_stage0_reg <= (handle_small_bpp_202_205 * 32'd17);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_210_tmp49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %tmp49 = mul i32 %indvar, -2*/
if ((lpm_mult_handle_small_bpp_210_tmp49_en == 1'd1))
begin
handle_small_bpp_210_tmp49_stage0_reg <= (handle_small_bpp_210_indvar_reg * -32'd2);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_210_213_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %213 = mul nsw i32 %212, 17*/
if ((lpm_mult_handle_small_bpp_210_213_en == 1'd1))
begin
handle_small_bpp_210_213_stage0_reg <= (handle_small_bpp_210_212 * 32'd17);
end
end
always @(*) begin
lpm_mult_handle_small_bpp_210_216_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* handle_small_bpp: %210*/
/*   %216 = mul nsw i32 %215, 17*/
if ((lpm_mult_handle_small_bpp_210_216_en == 1'd1))
begin
handle_small_bpp_210_216_stage0_reg <= (handle_small_bpp_210_215 * 32'd17);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* handle_small_bpp: %.loopexit14*/
/*   ret void*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit14_311))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_4))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_7))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_50))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %22*/
/*   store i32 %25, i32* %scevgep143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %38, i32* %scevgep168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %44, i32* %scevgep162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %50, i32* %scevgep156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %87*/
/*   store i32 %91, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %108, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_161))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_164))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %114, i32* %scevgep119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_167))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %131*/
/*   store i32 %136, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %155, i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_201))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_205))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %163, i32* %scevgep93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_209))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %196*/
/*   store i32 %198, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_277))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %210*/
/*   store i32 %213, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_295))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_313))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_320))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %233*/
/*   store i32 %236, i32* %scevgep143.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_327))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_334))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %249*/
/*   store i32 %252, i32* %scevgep143.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_341))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_348))
begin
memory_controller_enable_a = 1'd1;
end
/* handle_small_bpp: %262*/
/*   store i32 %265, i32* %scevgep143.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_1))
begin
memory_controller_address_a = handle_small_bpp_0_1;
end
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_4))
begin
memory_controller_address_a = handle_small_bpp_3_4;
end
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_7))
begin
memory_controller_address_a = handle_small_bpp_7_8;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12))
begin
memory_controller_address_a = handle_small_bpp__lr_ph45_12;
end
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_50))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %22*/
/*   store i32 %25, i32* %scevgep143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
memory_controller_address_a = handle_small_bpp_22_scevgep143_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %38, i32* %scevgep168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
memory_controller_address_a = handle_small_bpp_30_scevgep168_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %44, i32* %scevgep162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
memory_controller_address_a = handle_small_bpp_30_scevgep162_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %50, i32* %scevgep156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
memory_controller_address_a = handle_small_bpp_30_scevgep156_reg;
end
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86))
begin
memory_controller_address_a = handle_small_bpp_7_8_reg;
end
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89))
begin
memory_controller_address_a = handle_small_bpp__lr_ph45_15_reg;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97))
begin
memory_controller_address_a = handle_small_bpp__lr_ph35_62;
end
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_address_a = handle_small_bpp__lr_ph35_65_reg;
end
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
memory_controller_address_a = handle_small_bpp_75_76;
end
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
memory_controller_address_a = handle_small_bpp_87_88;
end
/* handle_small_bpp: %87*/
/*   store i32 %91, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
memory_controller_address_a = handle_small_bpp_87_94_reg;
end
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep132;
end
/* handle_small_bpp: %106*/
/*   store i32 %108, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep125_reg;
end
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_161))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep132_reg;
end
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_164))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep132_reg;
end
/* handle_small_bpp: %106*/
/*   store i32 %114, i32* %scevgep119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep119_reg;
end
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_167))
begin
memory_controller_address_a = handle_small_bpp_106_scevgep132_reg;
end
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
memory_controller_address_a = handle_small_bpp_118_119;
end
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
memory_controller_address_a = handle_small_bpp_131_132;
end
/* handle_small_bpp: %131*/
/*   store i32 %136, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
memory_controller_address_a = handle_small_bpp_131_139_reg;
end
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep106;
end
/* handle_small_bpp: %152*/
/*   store i32 %155, i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep99_reg;
end
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_201))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep106_reg;
end
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_205))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep106_reg;
end
/* handle_small_bpp: %152*/
/*   store i32 %163, i32* %scevgep93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep93_reg;
end
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_209))
begin
memory_controller_address_a = handle_small_bpp_152_scevgep106_reg;
end
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219))
begin
memory_controller_address_a = handle_small_bpp__lr_ph35_66_reg;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227))
begin
memory_controller_address_a = handle_small_bpp__lr_ph19_176;
end
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_address_a = handle_small_bpp__lr_ph19_179_reg;
end
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
memory_controller_address_a = handle_small_bpp_189_190;
end
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
memory_controller_address_a = handle_small_bpp_196_scevgep79;
end
/* handle_small_bpp: %196*/
/*   store i32 %198, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
memory_controller_address_a = handle_small_bpp_196_scevgep72_reg;
end
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_277))
begin
memory_controller_address_a = handle_small_bpp_196_scevgep79_reg;
end
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
memory_controller_address_a = handle_small_bpp_202_203;
end
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
memory_controller_address_a = handle_small_bpp_210_scevgep59;
end
/* handle_small_bpp: %210*/
/*   store i32 %213, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
memory_controller_address_a = handle_small_bpp_210_scevgep_reg;
end
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_295))
begin
memory_controller_address_a = handle_small_bpp_210_scevgep59_reg;
end
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305))
begin
memory_controller_address_a = handle_small_bpp__lr_ph19_180_reg;
end
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_313))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_320))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %233*/
/*   store i32 %236, i32* %scevgep143.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
memory_controller_address_a = handle_small_bpp_233_scevgep143_2_reg;
end
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_327))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_334))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %249*/
/*   store i32 %252, i32* %scevgep143.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
memory_controller_address_a = handle_small_bpp_249_scevgep143_4_reg;
end
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_341))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_348))
begin
memory_controller_address_a = handle_small_bpp_16_19_reg;
end
/* handle_small_bpp: %262*/
/*   store i32 %265, i32* %scevgep143.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
memory_controller_address_a = handle_small_bpp_262_scevgep143_6_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_50))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %22*/
/*   store i32 %25, i32* %scevgep143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %38, i32* %scevgep168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %44, i32* %scevgep162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %50, i32* %scevgep156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %87*/
/*   store i32 %91, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %106*/
/*   store i32 %108, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_161))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_164))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %106*/
/*   store i32 %114, i32* %scevgep119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_167))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %131*/
/*   store i32 %136, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %152*/
/*   store i32 %155, i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_201))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_205))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %152*/
/*   store i32 %163, i32* %scevgep93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_209))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %196*/
/*   store i32 %198, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_277))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %210*/
/*   store i32 %213, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_295))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_313))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_320))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %233*/
/*   store i32 %236, i32* %scevgep143.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_327))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_334))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %249*/
/*   store i32 %252, i32* %scevgep143.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
memory_controller_write_enable_a = 1'd1;
end
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_341))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_348))
begin
memory_controller_write_enable_a = 1'd0;
end
/* handle_small_bpp: %262*/
/*   store i32 %265, i32* %scevgep143.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* handle_small_bpp: %22*/
/*   store i32 %25, i32* %scevgep143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
memory_controller_in_a = handle_small_bpp_22_25;
end
/* handle_small_bpp: %30*/
/*   store i32 %38, i32* %scevgep168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
memory_controller_in_a = handle_small_bpp_30_38;
end
/* handle_small_bpp: %30*/
/*   store i32 %44, i32* %scevgep162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
memory_controller_in_a = handle_small_bpp_30_44;
end
/* handle_small_bpp: %30*/
/*   store i32 %50, i32* %scevgep156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
memory_controller_in_a = handle_small_bpp_30_50;
end
/* handle_small_bpp: %87*/
/*   store i32 %91, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
memory_controller_in_a = handle_small_bpp_87_91;
end
/* handle_small_bpp: %106*/
/*   store i32 %108, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
memory_controller_in_a = handle_small_bpp_106_108;
end
/* handle_small_bpp: %106*/
/*   store i32 %114, i32* %scevgep119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
memory_controller_in_a = handle_small_bpp_106_114;
end
/* handle_small_bpp: %131*/
/*   store i32 %136, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
memory_controller_in_a = handle_small_bpp_131_136;
end
/* handle_small_bpp: %152*/
/*   store i32 %155, i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
memory_controller_in_a = handle_small_bpp_152_155;
end
/* handle_small_bpp: %152*/
/*   store i32 %163, i32* %scevgep93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
memory_controller_in_a = handle_small_bpp_152_163;
end
/* handle_small_bpp: %196*/
/*   store i32 %198, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
memory_controller_in_a = handle_small_bpp_196_198;
end
/* handle_small_bpp: %210*/
/*   store i32 %213, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
memory_controller_in_a = handle_small_bpp_210_213;
end
/* handle_small_bpp: %233*/
/*   store i32 %236, i32* %scevgep143.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
memory_controller_in_a = handle_small_bpp_233_236;
end
/* handle_small_bpp: %249*/
/*   store i32 %252, i32* %scevgep143.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
memory_controller_in_a = handle_small_bpp_249_252;
end
/* handle_small_bpp: %262*/
/*   store i32 %265, i32* %scevgep143.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
memory_controller_in_a = handle_small_bpp_262_265;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* handle_small_bpp: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %3*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_3_4))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %7*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_7_7))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %13 = load i32** %12, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_12))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %22*/
/*   %23 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_50))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %22*/
/*   store i32 %25, i32* %scevgep143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_52))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %38, i32* %scevgep168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_68))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %44, i32* %scevgep162, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_74))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %50, i32* %scevgep156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_80))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %._crit_edge*/
/*   %53 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge_86))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %._crit_edge195*/
/*   %55 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge195_89))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %63 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_97))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %67*/
/*   %70 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %75*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_136))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %87*/
/*   %89 = load i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_143))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %87*/
/*   store i32 %91, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_145))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   %107 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_158))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   store i32 %108, i32* %scevgep125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_160))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   %109 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_161))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   %112 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_164))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   store i32 %114, i32* %scevgep119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_166))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %106*/
/*   %115 = load i32* %scevgep132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_167))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_172))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %131*/
/*   %133 = load i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_180))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %131*/
/*   store i32 %136, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_183))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   %153 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_197))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   store i32 %155, i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_200))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   %156 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_201))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   %160 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_205))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   store i32 %163, i32* %scevgep93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_208))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %152*/
/*   %164 = load i32* %scevgep106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_209))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %._crit_edge194*/
/*   %169 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge194_219))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %177 = load i32** %176, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_227))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %181*/
/*   %184 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %189*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_266))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %196*/
/*   %197 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_274))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %196*/
/*   store i32 %198, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_276))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %196*/
/*   %199 = load i32* %scevgep79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_277))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %202*/
/*   %204 = load i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_282))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %210*/
/*   %211 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_291))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %210*/
/*   store i32 %213, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_294))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %210*/
/*   %214 = load i32* %scevgep59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_295))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %._crit_edge193*/
/*   %219 = load i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB___crit_edge193_305))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %225*/
/*   %226 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_313))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %233*/
/*   %234 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_320))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %233*/
/*   store i32 %236, i32* %scevgep143.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_322))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %241*/
/*   %242 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_327))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %249*/
/*   %250 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_334))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %249*/
/*   store i32 %252, i32* %scevgep143.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_336))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %257*/
/*   %258 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_341))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %262*/
/*   %263 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_348))
begin
memory_controller_size_a = 2'd2;
end
/* handle_small_bpp: %262*/
/*   store i32 %265, i32* %scevgep143.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_262_350))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_15))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_53))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %32, i32* %scevgep174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_63))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %35, i32* %scevgep171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_66))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_69))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %41, i32* %scevgep165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_72))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_75))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %47, i32* %scevgep159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_78))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_81))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   store i32 %52, i32* %scevgep177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_92))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %75*/
/*   store i32 %79, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_139))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_146))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %99*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %111, i32* %scevgep122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %116, i32* %scevgep128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %118*/
/*   store i32 %123, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_176))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_184))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %144*/
/*   store i32 %148, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %159, i32* %scevgep96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %166, i32* %scevgep102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_222))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %189*/
/*   store i32 %192, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %196*/
/*   store i32 %200, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %202*/
/*   store i32 %206, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %210*/
/*   store i32 %216, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %225*/
/*   store i32 %228, i32* %scevgep143.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_316))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_323))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %241*/
/*   store i32 %244, i32* %scevgep143.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_330))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_337))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %257*/
/*   store i32 %260, i32* %scevgep143.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
memory_controller_enable_b = 1'd1;
end
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_344))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_11;
end
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_15))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_53))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181;
end
/* handle_small_bpp: %30*/
/*   store i32 %32, i32* %scevgep174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep174_reg;
end
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_63))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %35, i32* %scevgep171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep171_reg;
end
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_66))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_69))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %41, i32* %scevgep165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep165_reg;
end
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_72))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_75))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %47, i32* %scevgep159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep159_reg;
end
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_78))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_81))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep181_reg;
end
/* handle_small_bpp: %30*/
/*   store i32 %52, i32* %scevgep177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
memory_controller_address_b = handle_small_bpp_30_scevgep177_reg;
end
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_92))
begin
memory_controller_address_b = handle_small_bpp_57_58;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_61;
end
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_64_reg;
end
/* handle_small_bpp: %75*/
/*   store i32 %79, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
memory_controller_address_b = handle_small_bpp_75_82_reg;
end
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_139))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_64_reg;
end
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_146))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_64_reg;
end
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
memory_controller_address_b = handle_small_bpp_99_100;
end
/* handle_small_bpp: %99*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
memory_controller_address_b = handle_small_bpp_99_104_reg;
end
/* handle_small_bpp: %106*/
/*   store i32 %111, i32* %scevgep122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
memory_controller_address_b = handle_small_bpp_106_scevgep122_reg;
end
/* handle_small_bpp: %106*/
/*   store i32 %116, i32* %scevgep128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
memory_controller_address_b = handle_small_bpp_106_scevgep128_reg;
end
/* handle_small_bpp: %118*/
/*   store i32 %123, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
memory_controller_address_b = handle_small_bpp_118_126_reg;
end
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_176))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_64_reg;
end
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_184))
begin
memory_controller_address_b = handle_small_bpp__lr_ph35_64_reg;
end
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
memory_controller_address_b = handle_small_bpp_144_145;
end
/* handle_small_bpp: %144*/
/*   store i32 %148, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
memory_controller_address_b = handle_small_bpp_144_150_reg;
end
/* handle_small_bpp: %152*/
/*   store i32 %159, i32* %scevgep96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
memory_controller_address_b = handle_small_bpp_152_scevgep96_reg;
end
/* handle_small_bpp: %152*/
/*   store i32 %166, i32* %scevgep102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
memory_controller_address_b = handle_small_bpp_152_scevgep102_reg;
end
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216))
begin
memory_controller_address_b = handle_small_bpp_57_58_reg;
end
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_222))
begin
memory_controller_address_b = handle_small_bpp_171_172;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
memory_controller_address_b = handle_small_bpp__lr_ph19_175;
end
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_address_b = handle_small_bpp__lr_ph19_178_reg;
end
/* handle_small_bpp: %189*/
/*   store i32 %192, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
memory_controller_address_b = handle_small_bpp_189_194_reg;
end
/* handle_small_bpp: %196*/
/*   store i32 %200, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
memory_controller_address_b = handle_small_bpp_196_scevgep75_reg;
end
/* handle_small_bpp: %202*/
/*   store i32 %206, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
memory_controller_address_b = handle_small_bpp_202_208_reg;
end
/* handle_small_bpp: %210*/
/*   store i32 %216, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
memory_controller_address_b = handle_small_bpp_210_scevgep55_reg;
end
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302))
begin
memory_controller_address_b = handle_small_bpp_171_172_reg;
end
/* handle_small_bpp: %225*/
/*   store i32 %228, i32* %scevgep143.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
memory_controller_address_b = handle_small_bpp_225_scevgep143_1_reg;
end
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_316))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_323))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %241*/
/*   store i32 %244, i32* %scevgep143.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
memory_controller_address_b = handle_small_bpp_241_scevgep143_3_reg;
end
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_330))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_337))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
/* handle_small_bpp: %257*/
/*   store i32 %260, i32* %scevgep143.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
memory_controller_address_b = handle_small_bpp_257_scevgep143_5_reg;
end
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_344))
begin
memory_controller_address_b = handle_small_bpp__lr_ph45_14_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %32, i32* %scevgep174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %35, i32* %scevgep171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_66))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %41, i32* %scevgep165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_75))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %47, i32* %scevgep159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %52, i32* %scevgep177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_92))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %75*/
/*   store i32 %79, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_139))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_146))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %99*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %111, i32* %scevgep122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %106*/
/*   store i32 %116, i32* %scevgep128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %118*/
/*   store i32 %123, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_176))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_184))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %144*/
/*   store i32 %148, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %159, i32* %scevgep96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %152*/
/*   store i32 %166, i32* %scevgep102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_222))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %189*/
/*   store i32 %192, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %196*/
/*   store i32 %200, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %202*/
/*   store i32 %206, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %210*/
/*   store i32 %216, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %225*/
/*   store i32 %228, i32* %scevgep143.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_316))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_323))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %241*/
/*   store i32 %244, i32* %scevgep143.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_330))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_337))
begin
memory_controller_write_enable_b = 1'd0;
end
/* handle_small_bpp: %257*/
/*   store i32 %260, i32* %scevgep143.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
memory_controller_write_enable_b = 1'd1;
end
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_344))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* handle_small_bpp: %30*/
/*   store i32 %32, i32* %scevgep174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
memory_controller_in_b = handle_small_bpp_30_32;
end
/* handle_small_bpp: %30*/
/*   store i32 %35, i32* %scevgep171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
memory_controller_in_b = handle_small_bpp_30_35;
end
/* handle_small_bpp: %30*/
/*   store i32 %41, i32* %scevgep165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
memory_controller_in_b = handle_small_bpp_30_41;
end
/* handle_small_bpp: %30*/
/*   store i32 %47, i32* %scevgep159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
memory_controller_in_b = handle_small_bpp_30_47;
end
/* handle_small_bpp: %30*/
/*   store i32 %52, i32* %scevgep177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
memory_controller_in_b = handle_small_bpp_30_52;
end
/* handle_small_bpp: %75*/
/*   store i32 %79, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
memory_controller_in_b = handle_small_bpp_75_79;
end
/* handle_small_bpp: %99*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
memory_controller_in_b = handle_small_bpp_99_102;
end
/* handle_small_bpp: %106*/
/*   store i32 %111, i32* %scevgep122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
memory_controller_in_b = handle_small_bpp_106_111;
end
/* handle_small_bpp: %106*/
/*   store i32 %116, i32* %scevgep128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
memory_controller_in_b = handle_small_bpp_106_116;
end
/* handle_small_bpp: %118*/
/*   store i32 %123, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
memory_controller_in_b = handle_small_bpp_118_123;
end
/* handle_small_bpp: %144*/
/*   store i32 %148, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
memory_controller_in_b = handle_small_bpp_144_148;
end
/* handle_small_bpp: %152*/
/*   store i32 %159, i32* %scevgep96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
memory_controller_in_b = handle_small_bpp_152_159;
end
/* handle_small_bpp: %152*/
/*   store i32 %166, i32* %scevgep102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
memory_controller_in_b = handle_small_bpp_152_166;
end
/* handle_small_bpp: %189*/
/*   store i32 %192, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
memory_controller_in_b = handle_small_bpp_189_192;
end
/* handle_small_bpp: %196*/
/*   store i32 %200, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
memory_controller_in_b = handle_small_bpp_196_200;
end
/* handle_small_bpp: %202*/
/*   store i32 %206, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
memory_controller_in_b = handle_small_bpp_202_206;
end
/* handle_small_bpp: %210*/
/*   store i32 %216, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
memory_controller_in_b = handle_small_bpp_210_216;
end
/* handle_small_bpp: %225*/
/*   store i32 %228, i32* %scevgep143.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
memory_controller_in_b = handle_small_bpp_225_228;
end
/* handle_small_bpp: %241*/
/*   store i32 %244, i32* %scevgep143.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
memory_controller_in_b = handle_small_bpp_241_244;
end
/* handle_small_bpp: %257*/
/*   store i32 %260, i32* %scevgep143.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
memory_controller_in_b = handle_small_bpp_257_260;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* handle_small_bpp: %.lr.ph45*/
/*   %12 = load i32*** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph45_10))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %16*/
/*   %17 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_16_15))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %22*/
/*   %.pre = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_22_53))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %31 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_60))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %32, i32* %scevgep174, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_62))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %33 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_63))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %35, i32* %scevgep171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_65))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %36 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_66))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %39 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_69))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %41, i32* %scevgep165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_71))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %42 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_72))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %45 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_75))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %47, i32* %scevgep159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_77))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %48 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_78))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   %51 = load i32* %scevgep181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_81))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %30*/
/*   store i32 %52, i32* %scevgep177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_30_83))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %57*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_57_92))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %.lr.ph35*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph35_95))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %67*/
/*   %68 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_67_100))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %75*/
/*   store i32 %79, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_138))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %75*/
/*   %.pre189 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_75_139))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %87*/
/*   %.pre190 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_87_146))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_150))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %99*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_99_152))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %106*/
/*   store i32 %111, i32* %scevgep122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_163))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %106*/
/*   store i32 %116, i32* %scevgep128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_106_169))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %118*/
/*   store i32 %123, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_175))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %118*/
/*   %.pre191 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_118_176))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %131*/
/*   %.pre192 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_131_184))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_188))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %144*/
/*   store i32 %148, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_144_191))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %152*/
/*   store i32 %159, i32* %scevgep96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_204))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %152*/
/*   store i32 %166, i32* %scevgep102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_152_212))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %.loopexit21*/
/*   %167 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit21_216))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %171*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_171_222))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %.lr.ph19*/
/*   %176 = load i32*** %175, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__lr_ph19_225))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %181*/
/*   %182 = load i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_181_230))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %189*/
/*   store i32 %192, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_189_268))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %196*/
/*   store i32 %200, i32* %scevgep75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_196_279))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %202*/
/*   store i32 %206, i32* %208, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_202_285))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %210*/
/*   store i32 %216, i32* %scevgep55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_210_298))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %.loopexit*/
/*   %217 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB__loopexit_302))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %225*/
/*   store i32 %228, i32* %scevgep143.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_315))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %225*/
/*   %.pre184 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_225_316))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %233*/
/*   %.pre185 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_233_323))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %241*/
/*   store i32 %244, i32* %scevgep143.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_329))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %241*/
/*   %.pre186 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_241_330))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %249*/
/*   %.pre187 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_249_337))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %257*/
/*   store i32 %260, i32* %scevgep143.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_343))
begin
memory_controller_size_b = 2'd2;
end
/* handle_small_bpp: %257*/
/*   %.pre188 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_handle_small_bpp_BB_257_344))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  handle_small_bpp_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_arg_s;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_arg_p;
wire  handle_small_bpp_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_memory_controller_address_a;
wire  handle_small_bpp_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] handle_small_bpp_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] handle_small_bpp_memory_controller_out_a;
wire [1:0] handle_small_bpp_memory_controller_size_a;
wire  handle_small_bpp_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] handle_small_bpp_memory_controller_address_b;
wire  handle_small_bpp_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] handle_small_bpp_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] handle_small_bpp_memory_controller_out_b;
wire [1:0] handle_small_bpp_memory_controller_size_b;
reg  handle_small_bpp_memory_controller_waitrequest;
wire  handle_small_bpp_finish;
reg  handle_small_bpp_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


handle_small_bpp handle_small_bpp_inst (
	.memory_controller_enable_a (handle_small_bpp_memory_controller_enable_a),
	.memory_controller_address_a (handle_small_bpp_memory_controller_address_a),
	.memory_controller_write_enable_a (handle_small_bpp_memory_controller_write_enable_a),
	.memory_controller_in_a (handle_small_bpp_memory_controller_in_a),
	.memory_controller_size_a (handle_small_bpp_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (handle_small_bpp_memory_controller_enable_b),
	.memory_controller_address_b (handle_small_bpp_memory_controller_address_b),
	.memory_controller_write_enable_b (handle_small_bpp_memory_controller_write_enable_b),
	.memory_controller_in_b (handle_small_bpp_memory_controller_in_b),
	.memory_controller_size_b (handle_small_bpp_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (handle_small_bpp_start),
	.finish (handle_small_bpp_finish),
	.arg_s (handle_small_bpp_arg_s),
	.arg_p (handle_small_bpp_arg_p)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (handle_small_bpp_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
handle_small_bpp_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_start"); $finish; end
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
handle_small_bpp_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
handle_small_bpp_arg_s <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_arg_s"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
handle_small_bpp_arg_p <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to handle_small_bpp_arg_p"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
begin
handle_small_bpp_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
begin
handle_small_bpp_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
handle_small_bpp_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
handle_small_bpp_finish_final = handle_small_bpp_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = handle_small_bpp_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = handle_small_bpp_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = handle_small_bpp_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = handle_small_bpp_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = handle_small_bpp_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = handle_small_bpp_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = handle_small_bpp_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = handle_small_bpp_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = handle_small_bpp_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = handle_small_bpp_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = handle_small_bpp_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = handle_small_bpp_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = handle_small_bpp_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = handle_small_bpp_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = handle_small_bpp_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = handle_small_bpp_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = handle_small_bpp_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = handle_small_bpp_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = handle_small_bpp_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @handle_small_bpp(%struct.TYPE_5__* undef, %struct.TYPE_6__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = handle_small_bpp_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
