//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:31 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fwht16
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_block,
	arg_output_block,
	arg_stride,
	arg_intra
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_fwht16_BB_1_1 = 5'd1;
parameter [4:0] LEGUP_F_fwht16_BB_1_2 = 5'd2;
parameter [4:0] LEGUP_F_fwht16_BB_1_3 = 5'd3;
parameter [4:0] LEGUP_F_fwht16_BB_1_4 = 5'd4;
parameter [4:0] LEGUP_F_fwht16_BB_1_5 = 5'd5;
parameter [4:0] LEGUP_F_fwht16_BB_1_6 = 5'd6;
parameter [4:0] LEGUP_F_fwht16_BB_1_7 = 5'd7;
parameter [4:0] LEGUP_F_fwht16_BB_1_8 = 5'd8;
parameter [4:0] LEGUP_F_fwht16_BB_1_9 = 5'd9;
parameter [4:0] LEGUP_F_fwht16_BB_1_10 = 5'd10;
parameter [4:0] LEGUP_F_fwht16_BB_1_11 = 5'd11;
parameter [4:0] LEGUP_F_fwht16_BB_1_12 = 5'd12;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_preheader_13 = 5'd13;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_14 = 5'd14;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_15 = 5'd15;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_16 = 5'd16;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_17 = 5'd17;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_18 = 5'd18;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_19 = 5'd19;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_20 = 5'd20;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_21 = 5'd21;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_22 = 5'd22;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_23 = 5'd23;
parameter [4:0] LEGUP_F_fwht16_BB__preheader_24 = 5'd24;
parameter [4:0] LEGUP_F_fwht16_BB_68_25 = 5'd25;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_block;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_output_block;
input [31:0] arg_stride;
input [31:0] arg_intra;
reg [4:0] cur_state;
reg [31:0] fwht16_1_i_05;
reg [31:0] fwht16_1_i_05_reg;
reg [31:0] fwht16_1_tmp20;
reg [31:0] fwht16_1_tmp20_reg;
reg [31:0] fwht16_1_tmp2152;
reg [31:0] fwht16_1_tmp2152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep22_reg;
reg [31:0] fwht16_1_tmp2353;
reg [31:0] fwht16_1_tmp2353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep24_reg;
reg [31:0] fwht16_1_tmp2554;
reg [31:0] fwht16_1_tmp2554_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep26_reg;
reg [31:0] fwht16_1_tmp2755;
reg [31:0] fwht16_1_tmp2755_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep28_reg;
reg [31:0] fwht16_1_tmp2956;
reg [31:0] fwht16_1_tmp2956_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep30_reg;
reg [31:0] fwht16_1_tmp3157;
reg [31:0] fwht16_1_tmp3157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep32_reg;
reg [31:0] fwht16_1_tmp3358;
reg [31:0] fwht16_1_tmp3358_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_out_04;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_out_04_reg;
reg [31:0] fwht16_1_tmp36;
reg [31:0] fwht16_1_tmp36_reg;
reg [31:0] fwht16_1_tmp37;
reg [31:0] fwht16_1_tmp37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep38_reg;
reg [31:0] fwht16_1_tmp39;
reg [31:0] fwht16_1_tmp39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep40_reg;
reg [31:0] fwht16_1_tmp41;
reg [31:0] fwht16_1_tmp41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep42_reg;
reg [31:0] fwht16_1_tmp43;
reg [31:0] fwht16_1_tmp43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep44_reg;
reg [31:0] fwht16_1_tmp45;
reg [31:0] fwht16_1_tmp45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep46_reg;
reg [31:0] fwht16_1_tmp47;
reg [31:0] fwht16_1_tmp47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep48_reg;
reg [31:0] fwht16_1_tmp49;
reg [31:0] fwht16_1_tmp49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_tmp_03;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_1_tmp_03_reg;
reg [31:0] fwht16_1_2;
reg [31:0] fwht16_1_2_reg;
reg [31:0] fwht16_1_3;
reg [31:0] fwht16_1_3_reg;
reg [31:0] fwht16_1_4;
reg [31:0] fwht16_1_4_reg;
reg [31:0] fwht16_1_5;
reg [31:0] fwht16_1_5_reg;
reg [31:0] fwht16_1_6;
reg [31:0] fwht16_1_6_reg;
reg [31:0] fwht16_1_7;
reg [31:0] fwht16_1_7_reg;
reg [31:0] fwht16_1_8;
reg [31:0] fwht16_1_8_reg;
reg [31:0] fwht16_1_9;
reg [31:0] fwht16_1_9_reg;
reg [31:0] fwht16_1_10;
reg [31:0] fwht16_1_10_reg;
reg [31:0] fwht16_1_11;
reg [31:0] fwht16_1_11_reg;
reg [31:0] fwht16_1_12;
reg [31:0] fwht16_1_12_reg;
reg [31:0] fwht16_1_13;
reg [31:0] fwht16_1_13_reg;
reg [31:0] fwht16_1_14;
reg [31:0] fwht16_1_14_reg;
reg [31:0] fwht16_1_15;
reg [31:0] fwht16_1_15_reg;
reg [31:0] fwht16_1_16;
reg [31:0] fwht16_1_16_reg;
reg [31:0] fwht16_1_17;
reg [31:0] fwht16_1_17_reg;
reg [31:0] fwht16_1_18;
reg [31:0] fwht16_1_18_reg;
reg [31:0] fwht16_1_19;
reg [31:0] fwht16_1_19_reg;
reg [31:0] fwht16_1_20;
reg [31:0] fwht16_1_20_reg;
reg [31:0] fwht16_1_21;
reg [31:0] fwht16_1_21_reg;
reg [31:0] fwht16_1_22;
reg [31:0] fwht16_1_22_reg;
reg [31:0] fwht16_1_23;
reg [31:0] fwht16_1_23_reg;
reg [31:0] fwht16_1_24;
reg [31:0] fwht16_1_24_reg;
reg [31:0] fwht16_1_25;
reg [31:0] fwht16_1_25_reg;
reg [31:0] fwht16_1_26;
reg [31:0] fwht16_1_26_reg;
reg [31:0] fwht16_1_27;
reg [31:0] fwht16_1_27_reg;
reg [31:0] fwht16_1_28;
reg [31:0] fwht16_1_28_reg;
reg [31:0] fwht16_1_29;
reg [31:0] fwht16_1_29_reg;
reg [31:0] fwht16_1_30;
reg [31:0] fwht16_1_30_reg;
reg [31:0] fwht16_1_31;
reg [31:0] fwht16_1_31_reg;
reg [31:0] fwht16_1_32;
reg [31:0] fwht16_1_32_reg;
reg [31:0] fwht16_1_33;
reg [31:0] fwht16_1_33_reg;
reg [31:0] fwht16_1_34;
reg [31:0] fwht16_1_34_reg;
reg  fwht16_1_exitcond19;
reg  fwht16_1_exitcond19_reg;
reg [31:0] fwht16__preheader_i_12;
reg [31:0] fwht16__preheader_i_12_reg;
reg [31:0] fwht16__preheader_tmp;
reg [31:0] fwht16__preheader_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep_reg;
reg [31:0] fwht16__preheader_tmp6;
reg [31:0] fwht16__preheader_tmp6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep7_reg;
reg [31:0] fwht16__preheader_tmp8;
reg [31:0] fwht16__preheader_tmp8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep9_reg;
reg [31:0] fwht16__preheader_tmp10;
reg [31:0] fwht16__preheader_tmp10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep11_reg;
reg [31:0] fwht16__preheader_tmp12;
reg [31:0] fwht16__preheader_tmp12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep13_reg;
reg [31:0] fwht16__preheader_tmp14;
reg [31:0] fwht16__preheader_tmp14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep15_reg;
reg [31:0] fwht16__preheader_tmp16;
reg [31:0] fwht16__preheader_tmp16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_out_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16__preheader_out_11_reg;
reg [31:0] fwht16__preheader_35;
reg [31:0] fwht16__preheader_35_reg;
reg [31:0] fwht16__preheader_36;
reg [31:0] fwht16__preheader_36_reg;
reg [31:0] fwht16__preheader_37;
reg [31:0] fwht16__preheader_37_reg;
reg [31:0] fwht16__preheader_38;
reg [31:0] fwht16__preheader_38_reg;
reg [31:0] fwht16__preheader_39;
reg [31:0] fwht16__preheader_39_reg;
reg [31:0] fwht16__preheader_40;
reg [31:0] fwht16__preheader_40_reg;
reg [31:0] fwht16__preheader_41;
reg [31:0] fwht16__preheader_41_reg;
reg [31:0] fwht16__preheader_42;
reg [31:0] fwht16__preheader_42_reg;
reg [31:0] fwht16__preheader_43;
reg [31:0] fwht16__preheader_43_reg;
reg [31:0] fwht16__preheader_44;
reg [31:0] fwht16__preheader_44_reg;
reg [31:0] fwht16__preheader_45;
reg [31:0] fwht16__preheader_45_reg;
reg [31:0] fwht16__preheader_46;
reg [31:0] fwht16__preheader_46_reg;
reg [31:0] fwht16__preheader_47;
reg [31:0] fwht16__preheader_47_reg;
reg [31:0] fwht16__preheader_48;
reg [31:0] fwht16__preheader_48_reg;
reg [31:0] fwht16__preheader_49;
reg [31:0] fwht16__preheader_49_reg;
reg [31:0] fwht16__preheader_50;
reg [31:0] fwht16__preheader_50_reg;
reg [31:0] fwht16__preheader_51;
reg [31:0] fwht16__preheader_51_reg;
reg [31:0] fwht16__preheader_52;
reg [31:0] fwht16__preheader_52_reg;
reg [31:0] fwht16__preheader_53;
reg [31:0] fwht16__preheader_53_reg;
reg [31:0] fwht16__preheader_54;
reg [31:0] fwht16__preheader_54_reg;
reg [31:0] fwht16__preheader_55;
reg [31:0] fwht16__preheader_55_reg;
reg [31:0] fwht16__preheader_56;
reg [31:0] fwht16__preheader_56_reg;
reg [31:0] fwht16__preheader_57;
reg [31:0] fwht16__preheader_57_reg;
reg [31:0] fwht16__preheader_58;
reg [31:0] fwht16__preheader_58_reg;
reg [31:0] fwht16__preheader_59;
reg [31:0] fwht16__preheader_59_reg;
reg [31:0] fwht16__preheader_60;
reg [31:0] fwht16__preheader_60_reg;
reg [31:0] fwht16__preheader_61;
reg [31:0] fwht16__preheader_61_reg;
reg [31:0] fwht16__preheader_62;
reg [31:0] fwht16__preheader_62_reg;
reg [31:0] fwht16__preheader_63;
reg [31:0] fwht16__preheader_63_reg;
reg [31:0] fwht16__preheader_64;
reg [31:0] fwht16__preheader_64_reg;
reg [31:0] fwht16__preheader_65;
reg [31:0] fwht16__preheader_65_reg;
reg [31:0] fwht16__preheader_66;
reg [31:0] fwht16__preheader_66_reg;
reg [31:0] fwht16__preheader_67;
reg [31:0] fwht16__preheader_67_reg;
reg  fwht16__preheader_exitcond;
reg  fwht16__preheader_exitcond_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fwht16_1_tmp36_en;
reg [31:0] fwht16_1_tmp36_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_1;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_1;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_12;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_1_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_12;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht16_BB_1_12) & (memory_controller_waitrequest == 1'd0)) & (fwht16_1_exitcond19_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht16_BB_1_12) & (memory_controller_waitrequest == 1'd0)) & (fwht16_1_exitcond19_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB_1_1;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_preheader_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_preheader_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_19;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_19;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_20;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_20;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_22;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_22;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB__preheader_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht16_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)) & (fwht16__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_68_25;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_68_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fwht16_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)) & (fwht16__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fwht16_BB__preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_68_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fwht16_BB_68_25;
if (reset == 1'b0 && ^(LEGUP_F_fwht16_BB_68_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fwht16_BB_68_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %i.05 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
fwht16_1_i_05 = 32'd0;
end
/* fwht16: %1*/
/*   %i.05 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
else /* if ((((cur_state == LEGUP_F_fwht16_BB_1_12) & (memory_controller_waitrequest == 1'd0)) & (fwht16_1_exitcond19_reg == 1'd0))) */
begin
fwht16_1_i_05 = fwht16_1_34_reg;
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %i.05 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
fwht16_1_i_05_reg <= fwht16_1_i_05;
if (reset == 1'b0 && ^(fwht16_1_i_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_i_05_reg"); $finish; end
end
/* fwht16: %1*/
/*   %i.05 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_F_fwht16_BB_1_12) & (memory_controller_waitrequest == 1'd0)) & (fwht16_1_exitcond19_reg == 1'd0)))
begin
fwht16_1_i_05_reg <= fwht16_1_i_05;
if (reset == 1'b0 && ^(fwht16_1_i_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_i_05_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp20 = shl i32 %i.05, 3*/
begin
fwht16_1_tmp20 = (fwht16_1_i_05_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp20 = shl i32 %i.05, 3*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp20_reg <= fwht16_1_tmp20;
if (reset == 1'b0 && ^(fwht16_1_tmp20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp20_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp2152 = or i32 %tmp20, 1*/
begin
fwht16_1_tmp2152 = (fwht16_1_tmp20 | 32'd1);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp2152 = or i32 %tmp20, 1*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp2152_reg <= fwht16_1_tmp2152;
if (reset == 1'b0 && ^(fwht16_1_tmp2152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp2152_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep22 = getelementptr i32* %output_block, i32 %tmp2152*/
begin
fwht16_1_scevgep22 = (arg_output_block + (4 * fwht16_1_tmp2152));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep22 = getelementptr i32* %output_block, i32 %tmp2152*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep22_reg <= fwht16_1_scevgep22;
if (reset == 1'b0 && ^(fwht16_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep22_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp2353 = or i32 %tmp20, 2*/
begin
fwht16_1_tmp2353 = (fwht16_1_tmp20 | 32'd2);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp2353 = or i32 %tmp20, 2*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp2353_reg <= fwht16_1_tmp2353;
if (reset == 1'b0 && ^(fwht16_1_tmp2353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp2353_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep24 = getelementptr i32* %output_block, i32 %tmp2353*/
begin
fwht16_1_scevgep24 = (arg_output_block + (4 * fwht16_1_tmp2353));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep24 = getelementptr i32* %output_block, i32 %tmp2353*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep24_reg <= fwht16_1_scevgep24;
if (reset == 1'b0 && ^(fwht16_1_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep24_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp2554 = or i32 %tmp20, 3*/
begin
fwht16_1_tmp2554 = (fwht16_1_tmp20 | 32'd3);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp2554 = or i32 %tmp20, 3*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp2554_reg <= fwht16_1_tmp2554;
if (reset == 1'b0 && ^(fwht16_1_tmp2554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp2554_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep26 = getelementptr i32* %output_block, i32 %tmp2554*/
begin
fwht16_1_scevgep26 = (arg_output_block + (4 * fwht16_1_tmp2554));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep26 = getelementptr i32* %output_block, i32 %tmp2554*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep26_reg <= fwht16_1_scevgep26;
if (reset == 1'b0 && ^(fwht16_1_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep26_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp2755 = or i32 %tmp20, 4*/
begin
fwht16_1_tmp2755 = (fwht16_1_tmp20 | 32'd4);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp2755 = or i32 %tmp20, 4*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp2755_reg <= fwht16_1_tmp2755;
if (reset == 1'b0 && ^(fwht16_1_tmp2755) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp2755_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep28 = getelementptr i32* %output_block, i32 %tmp2755*/
begin
fwht16_1_scevgep28 = (arg_output_block + (4 * fwht16_1_tmp2755));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep28 = getelementptr i32* %output_block, i32 %tmp2755*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep28_reg <= fwht16_1_scevgep28;
if (reset == 1'b0 && ^(fwht16_1_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep28_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp2956 = or i32 %tmp20, 5*/
begin
fwht16_1_tmp2956 = (fwht16_1_tmp20 | 32'd5);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp2956 = or i32 %tmp20, 5*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp2956_reg <= fwht16_1_tmp2956;
if (reset == 1'b0 && ^(fwht16_1_tmp2956) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp2956_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep30 = getelementptr i32* %output_block, i32 %tmp2956*/
begin
fwht16_1_scevgep30 = (arg_output_block + (4 * fwht16_1_tmp2956));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep30 = getelementptr i32* %output_block, i32 %tmp2956*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep30_reg <= fwht16_1_scevgep30;
if (reset == 1'b0 && ^(fwht16_1_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep30_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp3157 = or i32 %tmp20, 6*/
begin
fwht16_1_tmp3157 = (fwht16_1_tmp20 | 32'd6);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp3157 = or i32 %tmp20, 6*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp3157_reg <= fwht16_1_tmp3157;
if (reset == 1'b0 && ^(fwht16_1_tmp3157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp3157_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep32 = getelementptr i32* %output_block, i32 %tmp3157*/
begin
fwht16_1_scevgep32 = (arg_output_block + (4 * fwht16_1_tmp3157));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep32 = getelementptr i32* %output_block, i32 %tmp3157*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep32_reg <= fwht16_1_scevgep32;
if (reset == 1'b0 && ^(fwht16_1_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep32_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp3358 = or i32 %tmp20, 7*/
begin
fwht16_1_tmp3358 = (fwht16_1_tmp20 | 32'd7);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp3358 = or i32 %tmp20, 7*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_tmp3358_reg <= fwht16_1_tmp3358;
if (reset == 1'b0 && ^(fwht16_1_tmp3358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp3358_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep34 = getelementptr i32* %output_block, i32 %tmp3358*/
begin
fwht16_1_scevgep34 = (arg_output_block + (4 * fwht16_1_tmp3358));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep34 = getelementptr i32* %output_block, i32 %tmp3358*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_scevgep34_reg <= fwht16_1_scevgep34;
if (reset == 1'b0 && ^(fwht16_1_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %out.04 = getelementptr i32* %output_block, i32 %tmp20*/
begin
fwht16_1_out_04 = (arg_output_block + (4 * fwht16_1_tmp20));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %out.04 = getelementptr i32* %output_block, i32 %tmp20*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_out_04_reg <= fwht16_1_out_04;
if (reset == 1'b0 && ^(fwht16_1_out_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_out_04_reg"); $finish; end
end
end
always @(*) begin
fwht16_1_tmp36 = fwht16_1_tmp36_stage0_reg;
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp36 = mul i32 %i.05, %stride*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp36_reg <= fwht16_1_tmp36;
if (reset == 1'b0 && ^(fwht16_1_tmp36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp36_reg"); $finish; end
end
/* fwht16: %1*/
/*   %tmp36 = mul i32 %i.05, %stride*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp36_reg <= fwht16_1_tmp36;
if (reset == 1'b0 && ^(fwht16_1_tmp36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp36_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp37 = add i32 %tmp36, 1*/
begin
fwht16_1_tmp37 = (fwht16_1_tmp36 + 32'd1);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp37 = add i32 %tmp36, 1*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp37_reg <= fwht16_1_tmp37;
if (reset == 1'b0 && ^(fwht16_1_tmp37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp37_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep38 = getelementptr i32* %block, i32 %tmp37*/
begin
fwht16_1_scevgep38 = (arg_block + (4 * fwht16_1_tmp37_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep38 = getelementptr i32* %block, i32 %tmp37*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep38_reg <= fwht16_1_scevgep38;
if (reset == 1'b0 && ^(fwht16_1_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep38_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp39 = add i32 %tmp36, 2*/
begin
fwht16_1_tmp39 = (fwht16_1_tmp36 + 32'd2);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp39 = add i32 %tmp36, 2*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp39_reg <= fwht16_1_tmp39;
if (reset == 1'b0 && ^(fwht16_1_tmp39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp39_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep40 = getelementptr i32* %block, i32 %tmp39*/
begin
fwht16_1_scevgep40 = (arg_block + (4 * fwht16_1_tmp39_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep40 = getelementptr i32* %block, i32 %tmp39*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep40_reg <= fwht16_1_scevgep40;
if (reset == 1'b0 && ^(fwht16_1_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep40_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp41 = add i32 %tmp36, 3*/
begin
fwht16_1_tmp41 = (fwht16_1_tmp36 + 32'd3);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp41 = add i32 %tmp36, 3*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp41_reg <= fwht16_1_tmp41;
if (reset == 1'b0 && ^(fwht16_1_tmp41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp41_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep42 = getelementptr i32* %block, i32 %tmp41*/
begin
fwht16_1_scevgep42 = (arg_block + (4 * fwht16_1_tmp41_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep42 = getelementptr i32* %block, i32 %tmp41*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep42_reg <= fwht16_1_scevgep42;
if (reset == 1'b0 && ^(fwht16_1_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep42_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp43 = add i32 %tmp36, 4*/
begin
fwht16_1_tmp43 = (fwht16_1_tmp36 + 32'd4);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp43 = add i32 %tmp36, 4*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp43_reg <= fwht16_1_tmp43;
if (reset == 1'b0 && ^(fwht16_1_tmp43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp43_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep44 = getelementptr i32* %block, i32 %tmp43*/
begin
fwht16_1_scevgep44 = (arg_block + (4 * fwht16_1_tmp43_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep44 = getelementptr i32* %block, i32 %tmp43*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep44_reg <= fwht16_1_scevgep44;
if (reset == 1'b0 && ^(fwht16_1_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep44_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp45 = add i32 %tmp36, 5*/
begin
fwht16_1_tmp45 = (fwht16_1_tmp36 + 32'd5);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp45 = add i32 %tmp36, 5*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp45_reg <= fwht16_1_tmp45;
if (reset == 1'b0 && ^(fwht16_1_tmp45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp45_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp45*/
begin
fwht16_1_scevgep46 = (arg_block + (4 * fwht16_1_tmp45_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp45*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep46_reg <= fwht16_1_scevgep46;
if (reset == 1'b0 && ^(fwht16_1_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp47 = add i32 %tmp36, 6*/
begin
fwht16_1_tmp47 = (fwht16_1_tmp36 + 32'd6);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp47 = add i32 %tmp36, 6*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp47_reg <= fwht16_1_tmp47;
if (reset == 1'b0 && ^(fwht16_1_tmp47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp47_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp47*/
begin
fwht16_1_scevgep48 = (arg_block + (4 * fwht16_1_tmp47_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp47*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep48_reg <= fwht16_1_scevgep48;
if (reset == 1'b0 && ^(fwht16_1_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep48_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp49 = add i32 %tmp36, 7*/
begin
fwht16_1_tmp49 = (fwht16_1_tmp36 + 32'd7);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp49 = add i32 %tmp36, 7*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp49_reg <= fwht16_1_tmp49;
if (reset == 1'b0 && ^(fwht16_1_tmp49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp49_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp49*/
begin
fwht16_1_scevgep50 = (arg_block + (4 * fwht16_1_tmp49_reg));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp49*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
fwht16_1_scevgep50_reg <= fwht16_1_scevgep50;
if (reset == 1'b0 && ^(fwht16_1_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %tmp.03 = getelementptr i32* %block, i32 %tmp36*/
begin
fwht16_1_tmp_03 = (arg_block + (4 * fwht16_1_tmp36));
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp.03 = getelementptr i32* %block, i32 %tmp36*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
fwht16_1_tmp_03_reg <= fwht16_1_tmp_03;
if (reset == 1'b0 && ^(fwht16_1_tmp_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_tmp_03_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
begin
fwht16_1_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
fwht16_1_2_reg <= fwht16_1_2;
if (reset == 1'b0 && ^(fwht16_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_2_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
begin
fwht16_1_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
fwht16_1_3_reg <= fwht16_1_3;
if (reset == 1'b0 && ^(fwht16_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_3_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %4 = add nsw i32 %3, %2*/
begin
fwht16_1_4 = (fwht16_1_3 + fwht16_1_2_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %4 = add nsw i32 %3, %2*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
fwht16_1_4_reg <= fwht16_1_4;
if (reset == 1'b0 && ^(fwht16_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_4_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %5 = sub nsw i32 %2, %3*/
begin
fwht16_1_5 = (fwht16_1_2_reg - fwht16_1_3);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %5 = sub nsw i32 %2, %3*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
fwht16_1_5_reg <= fwht16_1_5;
if (reset == 1'b0 && ^(fwht16_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_5_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
begin
fwht16_1_6 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
fwht16_1_6_reg <= fwht16_1_6;
if (reset == 1'b0 && ^(fwht16_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_6_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
begin
fwht16_1_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_7_reg <= fwht16_1_7;
if (reset == 1'b0 && ^(fwht16_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_7_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %8 = add nsw i32 %7, %6*/
begin
fwht16_1_8 = (fwht16_1_7 + fwht16_1_6_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %8 = add nsw i32 %7, %6*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_8_reg <= fwht16_1_8;
if (reset == 1'b0 && ^(fwht16_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_8_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %9 = sub nsw i32 %6, %7*/
begin
fwht16_1_9 = (fwht16_1_6_reg - fwht16_1_7);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %9 = sub nsw i32 %6, %7*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_9_reg <= fwht16_1_9;
if (reset == 1'b0 && ^(fwht16_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_9_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
begin
fwht16_1_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_10_reg <= fwht16_1_10;
if (reset == 1'b0 && ^(fwht16_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_10_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
begin
fwht16_1_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_7))
begin
fwht16_1_11_reg <= fwht16_1_11;
if (reset == 1'b0 && ^(fwht16_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_11_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %12 = add nsw i32 %11, %10*/
begin
fwht16_1_12 = (fwht16_1_11 + fwht16_1_10_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %12 = add nsw i32 %11, %10*/
if ((cur_state == LEGUP_F_fwht16_BB_1_7))
begin
fwht16_1_12_reg <= fwht16_1_12;
if (reset == 1'b0 && ^(fwht16_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_12_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %13 = sub nsw i32 %10, %11*/
begin
fwht16_1_13 = (fwht16_1_10_reg - fwht16_1_11);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %13 = sub nsw i32 %10, %11*/
if ((cur_state == LEGUP_F_fwht16_BB_1_7))
begin
fwht16_1_13_reg <= fwht16_1_13;
if (reset == 1'b0 && ^(fwht16_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_13_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
fwht16_1_14 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_7))
begin
fwht16_1_14_reg <= fwht16_1_14;
if (reset == 1'b0 && ^(fwht16_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_14_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
begin
fwht16_1_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_15_reg <= fwht16_1_15;
if (reset == 1'b0 && ^(fwht16_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_15_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %16 = add nsw i32 %15, %14*/
begin
fwht16_1_16 = (fwht16_1_15 + fwht16_1_14_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %16 = add nsw i32 %15, %14*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_16_reg <= fwht16_1_16;
if (reset == 1'b0 && ^(fwht16_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_16_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %17 = sub nsw i32 %14, %15*/
begin
fwht16_1_17 = (fwht16_1_14_reg - fwht16_1_15);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %17 = sub nsw i32 %14, %15*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_17_reg <= fwht16_1_17;
if (reset == 1'b0 && ^(fwht16_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_17_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %18 = add nsw i32 %8, %4*/
begin
fwht16_1_18 = (fwht16_1_8 + fwht16_1_4_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %18 = add nsw i32 %8, %4*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_18_reg <= fwht16_1_18;
if (reset == 1'b0 && ^(fwht16_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_18_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %19 = sub nsw i32 %4, %8*/
begin
fwht16_1_19 = (fwht16_1_4_reg - fwht16_1_8);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %19 = sub nsw i32 %4, %8*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_19_reg <= fwht16_1_19;
if (reset == 1'b0 && ^(fwht16_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_19_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %20 = sub nsw i32 %5, %9*/
begin
fwht16_1_20 = (fwht16_1_5_reg - fwht16_1_9);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %20 = sub nsw i32 %5, %9*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_20_reg <= fwht16_1_20;
if (reset == 1'b0 && ^(fwht16_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_20_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %21 = add nsw i32 %9, %5*/
begin
fwht16_1_21 = (fwht16_1_9 + fwht16_1_5_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %21 = add nsw i32 %9, %5*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
fwht16_1_21_reg <= fwht16_1_21;
if (reset == 1'b0 && ^(fwht16_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_21_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %22 = add nsw i32 %16, %12*/
begin
fwht16_1_22 = (fwht16_1_16 + fwht16_1_12_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %22 = add nsw i32 %16, %12*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_22_reg <= fwht16_1_22;
if (reset == 1'b0 && ^(fwht16_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_22_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %23 = sub nsw i32 %12, %16*/
begin
fwht16_1_23 = (fwht16_1_12_reg - fwht16_1_16);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %23 = sub nsw i32 %12, %16*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_23_reg <= fwht16_1_23;
if (reset == 1'b0 && ^(fwht16_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_23_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %24 = sub nsw i32 %13, %17*/
begin
fwht16_1_24 = (fwht16_1_13_reg - fwht16_1_17);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %24 = sub nsw i32 %13, %17*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_24_reg <= fwht16_1_24;
if (reset == 1'b0 && ^(fwht16_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_24_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %25 = add nsw i32 %17, %13*/
begin
fwht16_1_25 = (fwht16_1_17 + fwht16_1_13_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %25 = add nsw i32 %17, %13*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_25_reg <= fwht16_1_25;
if (reset == 1'b0 && ^(fwht16_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_25_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %26 = add nsw i32 %22, %18*/
begin
fwht16_1_26 = (fwht16_1_22 + fwht16_1_18_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %26 = add nsw i32 %22, %18*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_26_reg <= fwht16_1_26;
if (reset == 1'b0 && ^(fwht16_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_26_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %27 = sub nsw i32 %18, %22*/
begin
fwht16_1_27 = (fwht16_1_18_reg - fwht16_1_22);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %27 = sub nsw i32 %18, %22*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_27_reg <= fwht16_1_27;
if (reset == 1'b0 && ^(fwht16_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_27_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %28 = sub nsw i32 %19, %23*/
begin
fwht16_1_28 = (fwht16_1_19_reg - fwht16_1_23);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %28 = sub nsw i32 %19, %23*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_28_reg <= fwht16_1_28;
if (reset == 1'b0 && ^(fwht16_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_28_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %29 = add nsw i32 %23, %19*/
begin
fwht16_1_29 = (fwht16_1_23 + fwht16_1_19_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %29 = add nsw i32 %23, %19*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_29_reg <= fwht16_1_29;
if (reset == 1'b0 && ^(fwht16_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_29_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %30 = add nsw i32 %24, %20*/
begin
fwht16_1_30 = (fwht16_1_24 + fwht16_1_20_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %30 = add nsw i32 %24, %20*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_30_reg <= fwht16_1_30;
if (reset == 1'b0 && ^(fwht16_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_30_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %31 = sub nsw i32 %20, %24*/
begin
fwht16_1_31 = (fwht16_1_20_reg - fwht16_1_24);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %31 = sub nsw i32 %20, %24*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_31_reg <= fwht16_1_31;
if (reset == 1'b0 && ^(fwht16_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_31_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %32 = sub nsw i32 %21, %25*/
begin
fwht16_1_32 = (fwht16_1_21_reg - fwht16_1_25);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %32 = sub nsw i32 %21, %25*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_32_reg <= fwht16_1_32;
if (reset == 1'b0 && ^(fwht16_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_32_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %33 = add nsw i32 %25, %21*/
begin
fwht16_1_33 = (fwht16_1_25 + fwht16_1_21_reg);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %33 = add nsw i32 %25, %21*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
fwht16_1_33_reg <= fwht16_1_33;
if (reset == 1'b0 && ^(fwht16_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_33_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %34 = add nsw i32 %i.05, 1*/
begin
fwht16_1_34 = (fwht16_1_i_05_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %34 = add nsw i32 %i.05, 1*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_34_reg <= fwht16_1_34;
if (reset == 1'b0 && ^(fwht16_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_34_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %1*/
/*   %exitcond19 = icmp eq i32 %34, 8*/
begin
fwht16_1_exitcond19 = (fwht16_1_34 == 32'd8);
end
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %exitcond19 = icmp eq i32 %34, 8*/
if ((cur_state == LEGUP_F_fwht16_BB_1_1))
begin
fwht16_1_exitcond19_reg <= fwht16_1_exitcond19;
if (reset == 1'b0 && ^(fwht16_1_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_1_exitcond19_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %i.12 = phi i32 [ %67, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_fwht16_BB__preheader_preheader_13) & (memory_controller_waitrequest == 1'd0)))
begin
fwht16__preheader_i_12 = 32'd0;
end
/* fwht16: %.preheader*/
/*   %i.12 = phi i32 [ %67, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_fwht16_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)) & (fwht16__preheader_exitcond_reg == 1'd0))) */
begin
fwht16__preheader_i_12 = fwht16__preheader_67_reg;
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %i.12 = phi i32 [ %67, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_fwht16_BB__preheader_preheader_13) & (memory_controller_waitrequest == 1'd0)))
begin
fwht16__preheader_i_12_reg <= fwht16__preheader_i_12;
if (reset == 1'b0 && ^(fwht16__preheader_i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_i_12_reg"); $finish; end
end
/* fwht16: %.preheader*/
/*   %i.12 = phi i32 [ %67, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_fwht16_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)) & (fwht16__preheader_exitcond_reg == 1'd0)))
begin
fwht16__preheader_i_12_reg <= fwht16__preheader_i_12;
if (reset == 1'b0 && ^(fwht16__preheader_i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_i_12_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp = add i32 %i.12, 8*/
begin
fwht16__preheader_tmp = (fwht16__preheader_i_12_reg + 32'd8);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp = add i32 %i.12, 8*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp_reg <= fwht16__preheader_tmp;
if (reset == 1'b0 && ^(fwht16__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp*/
begin
fwht16__preheader_scevgep = (arg_output_block + (4 * fwht16__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep_reg <= fwht16__preheader_scevgep;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp6 = add i32 %i.12, 16*/
begin
fwht16__preheader_tmp6 = (fwht16__preheader_i_12_reg + 32'd16);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp6 = add i32 %i.12, 16*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp6_reg <= fwht16__preheader_tmp6;
if (reset == 1'b0 && ^(fwht16__preheader_tmp6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp6_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep7 = getelementptr i32* %output_block, i32 %tmp6*/
begin
fwht16__preheader_scevgep7 = (arg_output_block + (4 * fwht16__preheader_tmp6_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep7 = getelementptr i32* %output_block, i32 %tmp6*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep7_reg <= fwht16__preheader_scevgep7;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep7_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp8 = add i32 %i.12, 24*/
begin
fwht16__preheader_tmp8 = (fwht16__preheader_i_12_reg + 32'd24);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp8 = add i32 %i.12, 24*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp8_reg <= fwht16__preheader_tmp8;
if (reset == 1'b0 && ^(fwht16__preheader_tmp8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp8_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep9 = getelementptr i32* %output_block, i32 %tmp8*/
begin
fwht16__preheader_scevgep9 = (arg_output_block + (4 * fwht16__preheader_tmp8_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep9 = getelementptr i32* %output_block, i32 %tmp8*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep9_reg <= fwht16__preheader_scevgep9;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep9_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp10 = add i32 %i.12, 32*/
begin
fwht16__preheader_tmp10 = (fwht16__preheader_i_12_reg + 32'd32);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp10 = add i32 %i.12, 32*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp10_reg <= fwht16__preheader_tmp10;
if (reset == 1'b0 && ^(fwht16__preheader_tmp10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp10_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep11 = getelementptr i32* %output_block, i32 %tmp10*/
begin
fwht16__preheader_scevgep11 = (arg_output_block + (4 * fwht16__preheader_tmp10_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep11 = getelementptr i32* %output_block, i32 %tmp10*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep11_reg <= fwht16__preheader_scevgep11;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep11_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp12 = add i32 %i.12, 40*/
begin
fwht16__preheader_tmp12 = (fwht16__preheader_i_12_reg + 32'd40);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp12 = add i32 %i.12, 40*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp12_reg <= fwht16__preheader_tmp12;
if (reset == 1'b0 && ^(fwht16__preheader_tmp12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp12_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep13 = getelementptr i32* %output_block, i32 %tmp12*/
begin
fwht16__preheader_scevgep13 = (arg_output_block + (4 * fwht16__preheader_tmp12_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep13 = getelementptr i32* %output_block, i32 %tmp12*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep13_reg <= fwht16__preheader_scevgep13;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep13_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp14 = add i32 %i.12, 48*/
begin
fwht16__preheader_tmp14 = (fwht16__preheader_i_12_reg + 32'd48);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp14 = add i32 %i.12, 48*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp14_reg <= fwht16__preheader_tmp14;
if (reset == 1'b0 && ^(fwht16__preheader_tmp14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp14_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep15 = getelementptr i32* %output_block, i32 %tmp14*/
begin
fwht16__preheader_scevgep15 = (arg_output_block + (4 * fwht16__preheader_tmp14_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep15 = getelementptr i32* %output_block, i32 %tmp14*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep15_reg <= fwht16__preheader_scevgep15;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep15_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %tmp16 = add i32 %i.12, 56*/
begin
fwht16__preheader_tmp16 = (fwht16__preheader_i_12_reg + 32'd56);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %tmp16 = add i32 %i.12, 56*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_tmp16_reg <= fwht16__preheader_tmp16;
if (reset == 1'b0 && ^(fwht16__preheader_tmp16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_tmp16_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %scevgep17 = getelementptr i32* %output_block, i32 %tmp16*/
begin
fwht16__preheader_scevgep17 = (arg_output_block + (4 * fwht16__preheader_tmp16_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %scevgep17 = getelementptr i32* %output_block, i32 %tmp16*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
fwht16__preheader_scevgep17_reg <= fwht16__preheader_scevgep17;
if (reset == 1'b0 && ^(fwht16__preheader_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_scevgep17_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %out.11 = getelementptr i32* %output_block, i32 %i.12*/
begin
fwht16__preheader_out_11 = (arg_output_block + (4 * fwht16__preheader_i_12_reg));
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %out.11 = getelementptr i32* %output_block, i32 %i.12*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_out_11_reg <= fwht16__preheader_out_11;
if (reset == 1'b0 && ^(fwht16__preheader_out_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_out_11_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
begin
fwht16__preheader_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
fwht16__preheader_35_reg <= fwht16__preheader_35;
if (reset == 1'b0 && ^(fwht16__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_35_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
begin
fwht16__preheader_36 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
fwht16__preheader_36_reg <= fwht16__preheader_36;
if (reset == 1'b0 && ^(fwht16__preheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_36_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %37 = add nsw i32 %36, %35*/
begin
fwht16__preheader_37 = (fwht16__preheader_36 + fwht16__preheader_35_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %37 = add nsw i32 %36, %35*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
fwht16__preheader_37_reg <= fwht16__preheader_37;
if (reset == 1'b0 && ^(fwht16__preheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_37_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %38 = sub nsw i32 %35, %36*/
begin
fwht16__preheader_38 = (fwht16__preheader_35_reg - fwht16__preheader_36);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %38 = sub nsw i32 %35, %36*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
fwht16__preheader_38_reg <= fwht16__preheader_38;
if (reset == 1'b0 && ^(fwht16__preheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_38_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
begin
fwht16__preheader_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
fwht16__preheader_39_reg <= fwht16__preheader_39;
if (reset == 1'b0 && ^(fwht16__preheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_39_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
begin
fwht16__preheader_40 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_40_reg <= fwht16__preheader_40;
if (reset == 1'b0 && ^(fwht16__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_40_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %41 = add nsw i32 %40, %39*/
begin
fwht16__preheader_41 = (fwht16__preheader_40 + fwht16__preheader_39_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %41 = add nsw i32 %40, %39*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_41_reg <= fwht16__preheader_41;
if (reset == 1'b0 && ^(fwht16__preheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_41_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %42 = sub nsw i32 %39, %40*/
begin
fwht16__preheader_42 = (fwht16__preheader_39_reg - fwht16__preheader_40);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %42 = sub nsw i32 %39, %40*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_42_reg <= fwht16__preheader_42;
if (reset == 1'b0 && ^(fwht16__preheader_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_42_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
begin
fwht16__preheader_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_43_reg <= fwht16__preheader_43;
if (reset == 1'b0 && ^(fwht16__preheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_43_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
begin
fwht16__preheader_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_19))
begin
fwht16__preheader_44_reg <= fwht16__preheader_44;
if (reset == 1'b0 && ^(fwht16__preheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_44_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %45 = add nsw i32 %44, %43*/
begin
fwht16__preheader_45 = (fwht16__preheader_44 + fwht16__preheader_43_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %45 = add nsw i32 %44, %43*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_19))
begin
fwht16__preheader_45_reg <= fwht16__preheader_45;
if (reset == 1'b0 && ^(fwht16__preheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_45_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %46 = sub nsw i32 %43, %44*/
begin
fwht16__preheader_46 = (fwht16__preheader_43_reg - fwht16__preheader_44);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %46 = sub nsw i32 %43, %44*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_19))
begin
fwht16__preheader_46_reg <= fwht16__preheader_46;
if (reset == 1'b0 && ^(fwht16__preheader_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_46_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
begin
fwht16__preheader_47 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_19))
begin
fwht16__preheader_47_reg <= fwht16__preheader_47;
if (reset == 1'b0 && ^(fwht16__preheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_47_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
begin
fwht16__preheader_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_48_reg <= fwht16__preheader_48;
if (reset == 1'b0 && ^(fwht16__preheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_48_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %49 = add nsw i32 %48, %47*/
begin
fwht16__preheader_49 = (fwht16__preheader_48 + fwht16__preheader_47_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %49 = add nsw i32 %48, %47*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_49_reg <= fwht16__preheader_49;
if (reset == 1'b0 && ^(fwht16__preheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_49_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %50 = sub nsw i32 %47, %48*/
begin
fwht16__preheader_50 = (fwht16__preheader_47_reg - fwht16__preheader_48);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %50 = sub nsw i32 %47, %48*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_50_reg <= fwht16__preheader_50;
if (reset == 1'b0 && ^(fwht16__preheader_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_50_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %51 = add nsw i32 %41, %37*/
begin
fwht16__preheader_51 = (fwht16__preheader_41 + fwht16__preheader_37_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %51 = add nsw i32 %41, %37*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_51_reg <= fwht16__preheader_51;
if (reset == 1'b0 && ^(fwht16__preheader_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_51_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %52 = sub nsw i32 %37, %41*/
begin
fwht16__preheader_52 = (fwht16__preheader_37_reg - fwht16__preheader_41);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %52 = sub nsw i32 %37, %41*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_52_reg <= fwht16__preheader_52;
if (reset == 1'b0 && ^(fwht16__preheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_52_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %53 = sub nsw i32 %38, %42*/
begin
fwht16__preheader_53 = (fwht16__preheader_38_reg - fwht16__preheader_42);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %53 = sub nsw i32 %38, %42*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_53_reg <= fwht16__preheader_53;
if (reset == 1'b0 && ^(fwht16__preheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_53_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %54 = add nsw i32 %42, %38*/
begin
fwht16__preheader_54 = (fwht16__preheader_42 + fwht16__preheader_38_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %54 = add nsw i32 %42, %38*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
fwht16__preheader_54_reg <= fwht16__preheader_54;
if (reset == 1'b0 && ^(fwht16__preheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_54_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %55 = add nsw i32 %49, %45*/
begin
fwht16__preheader_55 = (fwht16__preheader_49 + fwht16__preheader_45_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %55 = add nsw i32 %49, %45*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_55_reg <= fwht16__preheader_55;
if (reset == 1'b0 && ^(fwht16__preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_55_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %56 = sub nsw i32 %45, %49*/
begin
fwht16__preheader_56 = (fwht16__preheader_45_reg - fwht16__preheader_49);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %56 = sub nsw i32 %45, %49*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_56_reg <= fwht16__preheader_56;
if (reset == 1'b0 && ^(fwht16__preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_56_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %57 = sub nsw i32 %46, %50*/
begin
fwht16__preheader_57 = (fwht16__preheader_46_reg - fwht16__preheader_50);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %57 = sub nsw i32 %46, %50*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_57_reg <= fwht16__preheader_57;
if (reset == 1'b0 && ^(fwht16__preheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_57_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %58 = add nsw i32 %50, %46*/
begin
fwht16__preheader_58 = (fwht16__preheader_50 + fwht16__preheader_46_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %58 = add nsw i32 %50, %46*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_58_reg <= fwht16__preheader_58;
if (reset == 1'b0 && ^(fwht16__preheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_58_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %59 = add nsw i32 %55, %51*/
begin
fwht16__preheader_59 = (fwht16__preheader_55 + fwht16__preheader_51_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %59 = add nsw i32 %55, %51*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_59_reg <= fwht16__preheader_59;
if (reset == 1'b0 && ^(fwht16__preheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_59_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %60 = sub nsw i32 %51, %55*/
begin
fwht16__preheader_60 = (fwht16__preheader_51_reg - fwht16__preheader_55);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %60 = sub nsw i32 %51, %55*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_60_reg <= fwht16__preheader_60;
if (reset == 1'b0 && ^(fwht16__preheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_60_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %61 = sub nsw i32 %52, %56*/
begin
fwht16__preheader_61 = (fwht16__preheader_52_reg - fwht16__preheader_56);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %61 = sub nsw i32 %52, %56*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_61_reg <= fwht16__preheader_61;
if (reset == 1'b0 && ^(fwht16__preheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_61_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %62 = add nsw i32 %56, %52*/
begin
fwht16__preheader_62 = (fwht16__preheader_56 + fwht16__preheader_52_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %62 = add nsw i32 %56, %52*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_62_reg <= fwht16__preheader_62;
if (reset == 1'b0 && ^(fwht16__preheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_62_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %63 = add nsw i32 %57, %53*/
begin
fwht16__preheader_63 = (fwht16__preheader_57 + fwht16__preheader_53_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %63 = add nsw i32 %57, %53*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_63_reg <= fwht16__preheader_63;
if (reset == 1'b0 && ^(fwht16__preheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_63_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %64 = sub nsw i32 %53, %57*/
begin
fwht16__preheader_64 = (fwht16__preheader_53_reg - fwht16__preheader_57);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %64 = sub nsw i32 %53, %57*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_64_reg <= fwht16__preheader_64;
if (reset == 1'b0 && ^(fwht16__preheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_64_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %65 = sub nsw i32 %54, %58*/
begin
fwht16__preheader_65 = (fwht16__preheader_54_reg - fwht16__preheader_58);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %65 = sub nsw i32 %54, %58*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_65_reg <= fwht16__preheader_65;
if (reset == 1'b0 && ^(fwht16__preheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_65_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %66 = add nsw i32 %58, %54*/
begin
fwht16__preheader_66 = (fwht16__preheader_58 + fwht16__preheader_54_reg);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %66 = add nsw i32 %58, %54*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
fwht16__preheader_66_reg <= fwht16__preheader_66;
if (reset == 1'b0 && ^(fwht16__preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_66_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %67 = add nsw i32 %i.12, 1*/
begin
fwht16__preheader_67 = (fwht16__preheader_i_12_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %67 = add nsw i32 %i.12, 1*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_67_reg <= fwht16__preheader_67;
if (reset == 1'b0 && ^(fwht16__preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_67_reg"); $finish; end
end
end
always @(*) begin
/* fwht16: %.preheader*/
/*   %exitcond = icmp eq i32 %67, 8*/
begin
fwht16__preheader_exitcond = (fwht16__preheader_67 == 32'd8);
end
end
always @(posedge clk) begin
/* fwht16: %.preheader*/
/*   %exitcond = icmp eq i32 %67, 8*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
fwht16__preheader_exitcond_reg <= fwht16__preheader_exitcond;
if (reset == 1'b0 && ^(fwht16__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fwht16_1_tmp36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fwht16: %1*/
/*   %tmp36 = mul i32 %i.05, %stride*/
if ((lpm_mult_fwht16_1_tmp36_en == 1'd1))
begin
fwht16_1_tmp36_stage0_reg <= (fwht16_1_i_05_reg * arg_stride);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fwht16: %68*/
/*   ret void*/
if ((cur_state == LEGUP_F_fwht16_BB_68_25))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %26, i32* %out.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %28, i32* %scevgep24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %30, i32* %scevgep28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %32, i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %60, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %62, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %64, i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %65, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
memory_controller_address_a = fwht16_1_tmp_03;
end
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_address_a = fwht16_1_scevgep38;
end
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_address_a = fwht16_1_scevgep42_reg;
end
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_address_a = fwht16_1_scevgep46_reg;
end
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
memory_controller_address_a = fwht16_1_scevgep50_reg;
end
/* fwht16: %1*/
/*   store i32 %26, i32* %out.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_address_a = fwht16_1_out_04_reg;
end
/* fwht16: %1*/
/*   store i32 %28, i32* %scevgep24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_address_a = fwht16_1_scevgep24_reg;
end
/* fwht16: %1*/
/*   store i32 %30, i32* %scevgep28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_address_a = fwht16_1_scevgep28_reg;
end
/* fwht16: %1*/
/*   store i32 %32, i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_address_a = fwht16_1_scevgep32_reg;
end
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_address_a = fwht16__preheader_scevgep;
end
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_address_a = fwht16__preheader_scevgep9_reg;
end
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_address_a = fwht16__preheader_scevgep13_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %60, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_address_a = fwht16__preheader_scevgep_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %62, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_address_a = fwht16__preheader_scevgep9_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %64, i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_address_a = fwht16__preheader_scevgep13_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %65, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_address_a = fwht16__preheader_scevgep15_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %1*/
/*   store i32 %26, i32* %out.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %28, i32* %scevgep24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %30, i32* %scevgep28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %32, i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fwht16: %.preheader*/
/*   store i32 %60, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %62, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %64, i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %65, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fwht16: %1*/
/*   store i32 %26, i32* %out.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_in_a = fwht16_1_26;
end
/* fwht16: %1*/
/*   store i32 %28, i32* %scevgep24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_in_a = fwht16_1_28_reg;
end
/* fwht16: %1*/
/*   store i32 %30, i32* %scevgep28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_in_a = fwht16_1_30_reg;
end
/* fwht16: %1*/
/*   store i32 %32, i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_in_a = fwht16_1_32_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %60, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_in_a = fwht16__preheader_60;
end
/* fwht16: %.preheader*/
/*   store i32 %62, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_in_a = fwht16__preheader_62_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %64, i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_in_a = fwht16__preheader_64_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %65, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_in_a = fwht16__preheader_65_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fwht16: %1*/
/*   %2 = load i32* %tmp.03, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_2))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   %3 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   %7 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   %11 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   %15 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_6))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %26, i32* %out.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %28, i32* %scevgep24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %30, i32* %scevgep28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %32, i32* %scevgep32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   %36 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   %40 = load i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   %44 = load i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %60, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %62, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %64, i32* %scevgep13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_size_a = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %65, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %27, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %29, i32* %scevgep26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %31, i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %33, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %59, i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %61, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %63, i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %66, i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_address_b = fwht16_1_scevgep40;
end
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_address_b = fwht16_1_scevgep44_reg;
end
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_address_b = fwht16_1_scevgep48_reg;
end
/* fwht16: %1*/
/*   store i32 %27, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_address_b = fwht16_1_scevgep22_reg;
end
/* fwht16: %1*/
/*   store i32 %29, i32* %scevgep26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_address_b = fwht16_1_scevgep26_reg;
end
/* fwht16: %1*/
/*   store i32 %31, i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_address_b = fwht16_1_scevgep30_reg;
end
/* fwht16: %1*/
/*   store i32 %33, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_address_b = fwht16_1_scevgep34_reg;
end
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
memory_controller_address_b = fwht16__preheader_out_11;
end
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_address_b = fwht16__preheader_scevgep7;
end
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_address_b = fwht16__preheader_scevgep11_reg;
end
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_address_b = fwht16__preheader_scevgep15_reg;
end
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
memory_controller_address_b = fwht16__preheader_scevgep17_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %59, i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_address_b = fwht16__preheader_out_11_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %61, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_address_b = fwht16__preheader_scevgep7_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %63, i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_address_b = fwht16__preheader_scevgep11_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %66, i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_address_b = fwht16__preheader_scevgep17_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %1*/
/*   store i32 %27, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %29, i32* %scevgep26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %31, i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %1*/
/*   store i32 %33, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fwht16: %.preheader*/
/*   store i32 %59, i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %61, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %63, i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fwht16: %.preheader*/
/*   store i32 %66, i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fwht16: %1*/
/*   store i32 %27, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_in_b = fwht16_1_27;
end
/* fwht16: %1*/
/*   store i32 %29, i32* %scevgep26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_in_b = fwht16_1_29_reg;
end
/* fwht16: %1*/
/*   store i32 %31, i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_in_b = fwht16_1_31_reg;
end
/* fwht16: %1*/
/*   store i32 %33, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_in_b = fwht16_1_33_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %59, i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_in_b = fwht16__preheader_59;
end
/* fwht16: %.preheader*/
/*   store i32 %61, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_in_b = fwht16__preheader_61_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %63, i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_in_b = fwht16__preheader_63_reg;
end
/* fwht16: %.preheader*/
/*   store i32 %66, i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_in_b = fwht16__preheader_66_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fwht16: %1*/
/*   %6 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_3))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   %10 = load i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_4))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   %14 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_5))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %27, i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_8))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %29, i32* %scevgep26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_9))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %31, i32* %scevgep30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_10))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %1*/
/*   store i32 %33, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB_1_11))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   %35 = load i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_14))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   %39 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_15))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   %43 = load i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_16))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   %47 = load i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_17))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   %48 = load i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_18))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %59, i32* %out.11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_20))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %61, i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_21))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %63, i32* %scevgep11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_22))
begin
memory_controller_size_b = 2'd2;
end
/* fwht16: %.preheader*/
/*   store i32 %66, i32* %scevgep17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fwht16_BB__preheader_23))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fwht16_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_arg_block;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_arg_output_block;
reg [31:0] fwht16_arg_stride;
reg [31:0] fwht16_arg_intra;
wire  fwht16_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_memory_controller_address_a;
wire  fwht16_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht16_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht16_memory_controller_out_a;
wire [1:0] fwht16_memory_controller_size_a;
wire  fwht16_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fwht16_memory_controller_address_b;
wire  fwht16_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht16_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fwht16_memory_controller_out_b;
wire [1:0] fwht16_memory_controller_size_b;
reg  fwht16_memory_controller_waitrequest;
wire  fwht16_finish;
reg  fwht16_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fwht16 fwht16_inst (
	.memory_controller_enable_a (fwht16_memory_controller_enable_a),
	.memory_controller_address_a (fwht16_memory_controller_address_a),
	.memory_controller_write_enable_a (fwht16_memory_controller_write_enable_a),
	.memory_controller_in_a (fwht16_memory_controller_in_a),
	.memory_controller_size_a (fwht16_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fwht16_memory_controller_enable_b),
	.memory_controller_address_b (fwht16_memory_controller_address_b),
	.memory_controller_write_enable_b (fwht16_memory_controller_write_enable_b),
	.memory_controller_in_b (fwht16_memory_controller_in_b),
	.memory_controller_size_b (fwht16_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fwht16_start),
	.finish (fwht16_finish),
	.arg_block (fwht16_arg_block),
	.arg_output_block (fwht16_arg_output_block),
	.arg_stride (fwht16_arg_stride),
	.arg_intra (fwht16_arg_intra)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fwht16_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fwht16_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht16_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fwht16_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht16_arg_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_arg_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht16_arg_output_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_arg_output_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht16_arg_stride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_arg_stride"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fwht16_arg_intra <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fwht16_arg_intra"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
fwht16_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
fwht16_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fwht16_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fwht16_finish_final = fwht16_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fwht16_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fwht16_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht16_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht16_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fwht16_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fwht16_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht16_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht16_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fwht16_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fwht16_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fwht16_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fwht16_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht16_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fwht16_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fwht16_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fwht16_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht16_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fwht16_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fwht16_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fwht16(i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fwht16_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
