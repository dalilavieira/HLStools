//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:57:42 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fe_sq2
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_h,
	arg_f
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_4 = 5'd4;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_5 = 5'd5;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_6 = 5'd6;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_7 = 5'd7;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_8 = 5'd8;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_9 = 5'd9;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_10 = 5'd10;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_11 = 5'd11;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_12 = 5'd12;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_13 = 5'd13;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_14 = 5'd14;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_15 = 5'd15;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_16 = 5'd16;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_17 = 5'd17;
parameter [4:0] LEGUP_F_fe_sq2_BB_0_18 = 5'd18;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_h;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_f;
reg [4:0] cur_state;
reg [31:0] fe_sq2_0_1;
reg [31:0] fe_sq2_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_2_reg;
reg [31:0] fe_sq2_0_3;
reg [31:0] fe_sq2_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_4_reg;
reg [31:0] fe_sq2_0_5;
reg [31:0] fe_sq2_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_6_reg;
reg [31:0] fe_sq2_0_7;
reg [31:0] fe_sq2_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_8_reg;
reg [31:0] fe_sq2_0_9;
reg [31:0] fe_sq2_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_10_reg;
reg [31:0] fe_sq2_0_11;
reg [31:0] fe_sq2_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_12_reg;
reg [31:0] fe_sq2_0_13;
reg [31:0] fe_sq2_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_14_reg;
reg [31:0] fe_sq2_0_15;
reg [31:0] fe_sq2_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_16_reg;
reg [31:0] fe_sq2_0_17;
reg [31:0] fe_sq2_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_18_reg;
reg [31:0] fe_sq2_0_19;
reg [31:0] fe_sq2_0_19_reg;
reg [31:0] fe_sq2_0_20;
reg [31:0] fe_sq2_0_20_reg;
reg [31:0] fe_sq2_0_21;
reg [31:0] fe_sq2_0_21_reg;
reg [31:0] fe_sq2_0_22;
reg [31:0] fe_sq2_0_22_reg;
reg [31:0] fe_sq2_0_23;
reg [31:0] fe_sq2_0_23_reg;
reg [31:0] fe_sq2_0_24;
reg [31:0] fe_sq2_0_24_reg;
reg [31:0] fe_sq2_0_25;
reg [31:0] fe_sq2_0_25_reg;
reg [31:0] fe_sq2_0_26;
reg [31:0] fe_sq2_0_26_reg;
reg [31:0] fe_sq2_0_27;
reg [31:0] fe_sq2_0_27_reg;
reg [31:0] fe_sq2_0_28;
reg [31:0] fe_sq2_0_28_reg;
reg [31:0] fe_sq2_0_29;
reg [31:0] fe_sq2_0_29_reg;
reg [31:0] fe_sq2_0_30;
reg [31:0] fe_sq2_0_30_reg;
reg [31:0] fe_sq2_0_31;
reg [31:0] fe_sq2_0_31_reg;
reg [31:0] fe_sq2_0_32;
reg [31:0] fe_sq2_0_32_reg;
reg [31:0] fe_sq2_0_33;
reg [31:0] fe_sq2_0_33_reg;
reg [31:0] fe_sq2_0_34;
reg [31:0] fe_sq2_0_34_reg;
reg [31:0] fe_sq2_0_35;
reg [31:0] fe_sq2_0_35_reg;
reg [31:0] fe_sq2_0_36;
reg [31:0] fe_sq2_0_36_reg;
reg [31:0] fe_sq2_0_37;
reg [31:0] fe_sq2_0_37_reg;
reg [31:0] fe_sq2_0_38;
reg [31:0] fe_sq2_0_38_reg;
reg [31:0] fe_sq2_0_39;
reg [31:0] fe_sq2_0_39_reg;
reg [31:0] fe_sq2_0_40;
reg [31:0] fe_sq2_0_40_reg;
reg [31:0] fe_sq2_0_41;
reg [31:0] fe_sq2_0_41_reg;
reg [31:0] fe_sq2_0_42;
reg [31:0] fe_sq2_0_42_reg;
reg [31:0] fe_sq2_0_43;
reg [31:0] fe_sq2_0_43_reg;
reg [31:0] fe_sq2_0_44;
reg [31:0] fe_sq2_0_44_reg;
reg [31:0] fe_sq2_0_45;
reg [31:0] fe_sq2_0_45_reg;
reg [31:0] fe_sq2_0_46;
reg [31:0] fe_sq2_0_46_reg;
reg [31:0] fe_sq2_0_47;
reg [31:0] fe_sq2_0_47_reg;
reg [31:0] fe_sq2_0_48;
reg [31:0] fe_sq2_0_48_reg;
reg [31:0] fe_sq2_0_49;
reg [31:0] fe_sq2_0_49_reg;
reg [31:0] fe_sq2_0_50;
reg [31:0] fe_sq2_0_50_reg;
reg [31:0] fe_sq2_0_51;
reg [31:0] fe_sq2_0_51_reg;
reg [31:0] fe_sq2_0_52;
reg [31:0] fe_sq2_0_52_reg;
reg [31:0] fe_sq2_0_53;
reg [31:0] fe_sq2_0_53_reg;
reg [31:0] fe_sq2_0_54;
reg [31:0] fe_sq2_0_54_reg;
reg [31:0] fe_sq2_0_55;
reg [31:0] fe_sq2_0_55_reg;
reg [31:0] fe_sq2_0_56;
reg [31:0] fe_sq2_0_56_reg;
reg [31:0] fe_sq2_0_57;
reg [31:0] fe_sq2_0_57_reg;
reg [31:0] fe_sq2_0_58;
reg [31:0] fe_sq2_0_58_reg;
reg [31:0] fe_sq2_0_59;
reg [31:0] fe_sq2_0_59_reg;
reg [31:0] fe_sq2_0_60;
reg [31:0] fe_sq2_0_60_reg;
reg [31:0] fe_sq2_0_61;
reg [31:0] fe_sq2_0_61_reg;
reg [31:0] fe_sq2_0_62;
reg [31:0] fe_sq2_0_62_reg;
reg [31:0] fe_sq2_0_63;
reg [31:0] fe_sq2_0_63_reg;
reg [31:0] fe_sq2_0_64;
reg [31:0] fe_sq2_0_64_reg;
reg [31:0] fe_sq2_0_65;
reg [31:0] fe_sq2_0_65_reg;
reg [31:0] fe_sq2_0_66;
reg [31:0] fe_sq2_0_66_reg;
reg [31:0] fe_sq2_0_67;
reg [31:0] fe_sq2_0_67_reg;
reg [31:0] fe_sq2_0_68;
reg [31:0] fe_sq2_0_68_reg;
reg [31:0] fe_sq2_0_69;
reg [31:0] fe_sq2_0_69_reg;
reg [31:0] fe_sq2_0_70;
reg [31:0] fe_sq2_0_70_reg;
reg [31:0] fe_sq2_0_71;
reg [31:0] fe_sq2_0_71_reg;
reg [31:0] fe_sq2_0_72;
reg [31:0] fe_sq2_0_72_reg;
reg [31:0] fe_sq2_0_73;
reg [31:0] fe_sq2_0_73_reg;
reg [31:0] fe_sq2_0_74;
reg [31:0] fe_sq2_0_74_reg;
reg [31:0] fe_sq2_0_75;
reg [31:0] fe_sq2_0_75_reg;
reg [31:0] fe_sq2_0_76;
reg [31:0] fe_sq2_0_76_reg;
reg [31:0] fe_sq2_0_77;
reg [31:0] fe_sq2_0_77_reg;
reg [31:0] fe_sq2_0_78;
reg [31:0] fe_sq2_0_78_reg;
reg [31:0] fe_sq2_0_79;
reg [31:0] fe_sq2_0_79_reg;
reg [31:0] fe_sq2_0_80;
reg [31:0] fe_sq2_0_80_reg;
reg [31:0] fe_sq2_0_81;
reg [31:0] fe_sq2_0_81_reg;
reg [31:0] fe_sq2_0_82;
reg [31:0] fe_sq2_0_82_reg;
reg [31:0] fe_sq2_0_83;
reg [31:0] fe_sq2_0_83_reg;
reg [31:0] fe_sq2_0_84;
reg [31:0] fe_sq2_0_84_reg;
reg [31:0] fe_sq2_0_85;
reg [31:0] fe_sq2_0_85_reg;
reg [31:0] fe_sq2_0_86;
reg [31:0] fe_sq2_0_86_reg;
reg [31:0] fe_sq2_0_87;
reg [31:0] fe_sq2_0_87_reg;
reg [31:0] fe_sq2_0_88;
reg [31:0] fe_sq2_0_88_reg;
reg [31:0] fe_sq2_0_89;
reg [31:0] fe_sq2_0_89_reg;
reg [31:0] fe_sq2_0_90;
reg [31:0] fe_sq2_0_90_reg;
reg [31:0] fe_sq2_0_91;
reg [31:0] fe_sq2_0_91_reg;
reg [31:0] fe_sq2_0_92;
reg [31:0] fe_sq2_0_92_reg;
reg [31:0] fe_sq2_0_93;
reg [31:0] fe_sq2_0_93_reg;
reg [31:0] fe_sq2_0_94;
reg [31:0] fe_sq2_0_94_reg;
reg [31:0] fe_sq2_0_95;
reg [31:0] fe_sq2_0_95_reg;
reg [31:0] fe_sq2_0_96;
reg [31:0] fe_sq2_0_96_reg;
reg [31:0] fe_sq2_0_97;
reg [31:0] fe_sq2_0_97_reg;
reg [31:0] fe_sq2_0_98;
reg [31:0] fe_sq2_0_98_reg;
reg [31:0] fe_sq2_0_99;
reg [31:0] fe_sq2_0_99_reg;
reg [31:0] fe_sq2_0_100;
reg [31:0] fe_sq2_0_100_reg;
reg [31:0] fe_sq2_0_101;
reg [31:0] fe_sq2_0_101_reg;
reg [31:0] fe_sq2_0_102;
reg [31:0] fe_sq2_0_102_reg;
reg [31:0] fe_sq2_0_103;
reg [31:0] fe_sq2_0_103_reg;
reg [31:0] fe_sq2_0_104;
reg [31:0] fe_sq2_0_104_reg;
reg [31:0] fe_sq2_0_105;
reg [31:0] fe_sq2_0_105_reg;
reg [31:0] fe_sq2_0_106;
reg [31:0] fe_sq2_0_106_reg;
reg [31:0] fe_sq2_0_107;
reg [31:0] fe_sq2_0_107_reg;
reg [31:0] fe_sq2_0_108;
reg [31:0] fe_sq2_0_108_reg;
reg [31:0] fe_sq2_0_109;
reg [31:0] fe_sq2_0_109_reg;
reg [31:0] fe_sq2_0_110;
reg [31:0] fe_sq2_0_110_reg;
reg [31:0] fe_sq2_0_111;
reg [31:0] fe_sq2_0_111_reg;
reg [31:0] fe_sq2_0_112;
reg [31:0] fe_sq2_0_112_reg;
reg [31:0] fe_sq2_0_113;
reg [31:0] fe_sq2_0_113_reg;
reg [31:0] fe_sq2_0_114;
reg [31:0] fe_sq2_0_114_reg;
reg [31:0] fe_sq2_0_115;
reg [31:0] fe_sq2_0_115_reg;
reg [31:0] fe_sq2_0_116;
reg [31:0] fe_sq2_0_116_reg;
reg [31:0] fe_sq2_0_117;
reg [31:0] fe_sq2_0_117_reg;
reg [31:0] fe_sq2_0_118;
reg [31:0] fe_sq2_0_118_reg;
reg [31:0] fe_sq2_0_119;
reg [31:0] fe_sq2_0_119_reg;
reg [31:0] fe_sq2_0_120;
reg [31:0] fe_sq2_0_120_reg;
reg [31:0] fe_sq2_0_121;
reg [31:0] fe_sq2_0_121_reg;
reg [31:0] fe_sq2_0_122;
reg [31:0] fe_sq2_0_122_reg;
reg [31:0] fe_sq2_0_123;
reg [31:0] fe_sq2_0_123_reg;
reg [31:0] fe_sq2_0_124;
reg [31:0] fe_sq2_0_124_reg;
reg [31:0] fe_sq2_0_125;
reg [31:0] fe_sq2_0_125_reg;
reg [31:0] fe_sq2_0_126;
reg [31:0] fe_sq2_0_126_reg;
reg [31:0] fe_sq2_0_127;
reg [31:0] fe_sq2_0_127_reg;
reg [31:0] fe_sq2_0_128;
reg [31:0] fe_sq2_0_128_reg;
reg [31:0] fe_sq2_0_129;
reg [31:0] fe_sq2_0_129_reg;
reg [31:0] fe_sq2_0_130;
reg [31:0] fe_sq2_0_130_reg;
reg [31:0] fe_sq2_0_131;
reg [31:0] fe_sq2_0_131_reg;
reg [31:0] fe_sq2_0_132;
reg [31:0] fe_sq2_0_132_reg;
reg [31:0] fe_sq2_0_133;
reg [31:0] fe_sq2_0_133_reg;
reg [31:0] fe_sq2_0_134;
reg [31:0] fe_sq2_0_134_reg;
reg [31:0] fe_sq2_0_135;
reg [31:0] fe_sq2_0_135_reg;
reg [31:0] fe_sq2_0_136;
reg [31:0] fe_sq2_0_136_reg;
reg [31:0] fe_sq2_0_137;
reg [31:0] fe_sq2_0_137_reg;
reg [31:0] fe_sq2_0_138;
reg [31:0] fe_sq2_0_138_reg;
reg [31:0] fe_sq2_0_139;
reg [31:0] fe_sq2_0_139_reg;
reg [31:0] fe_sq2_0_140;
reg [31:0] fe_sq2_0_140_reg;
reg [31:0] fe_sq2_0_141;
reg [31:0] fe_sq2_0_141_reg;
reg [31:0] fe_sq2_0_142;
reg [31:0] fe_sq2_0_142_reg;
reg [31:0] fe_sq2_0_143;
reg [31:0] fe_sq2_0_143_reg;
reg [31:0] fe_sq2_0_144;
reg [31:0] fe_sq2_0_144_reg;
reg [31:0] fe_sq2_0_145;
reg [31:0] fe_sq2_0_145_reg;
reg [31:0] fe_sq2_0_146;
reg [31:0] fe_sq2_0_146_reg;
reg [31:0] fe_sq2_0_147;
reg [31:0] fe_sq2_0_147_reg;
reg [31:0] fe_sq2_0_148;
reg [31:0] fe_sq2_0_148_reg;
reg [31:0] fe_sq2_0_149;
reg [31:0] fe_sq2_0_149_reg;
reg [31:0] fe_sq2_0_150;
reg [31:0] fe_sq2_0_150_reg;
reg [31:0] fe_sq2_0_151;
reg [31:0] fe_sq2_0_151_reg;
reg [31:0] fe_sq2_0_152;
reg [31:0] fe_sq2_0_152_reg;
reg [31:0] fe_sq2_0_153;
reg [31:0] fe_sq2_0_153_reg;
reg [31:0] fe_sq2_0_154;
reg [31:0] fe_sq2_0_154_reg;
reg [31:0] fe_sq2_0_155;
reg [31:0] fe_sq2_0_155_reg;
reg [31:0] fe_sq2_0_156;
reg [31:0] fe_sq2_0_156_reg;
reg [31:0] fe_sq2_0_157;
reg [31:0] fe_sq2_0_157_reg;
reg [31:0] fe_sq2_0_158;
reg [31:0] fe_sq2_0_158_reg;
reg [31:0] fe_sq2_0_159;
reg [31:0] fe_sq2_0_159_reg;
reg [31:0] fe_sq2_0_160;
reg [31:0] fe_sq2_0_160_reg;
reg [31:0] fe_sq2_0_161;
reg [31:0] fe_sq2_0_161_reg;
reg [31:0] fe_sq2_0_162;
reg [31:0] fe_sq2_0_162_reg;
reg [31:0] fe_sq2_0_163;
reg [31:0] fe_sq2_0_163_reg;
reg [31:0] fe_sq2_0_164;
reg [31:0] fe_sq2_0_164_reg;
reg [31:0] fe_sq2_0_165;
reg [31:0] fe_sq2_0_165_reg;
reg [31:0] fe_sq2_0_166;
reg [31:0] fe_sq2_0_166_reg;
reg [31:0] fe_sq2_0_167;
reg [31:0] fe_sq2_0_167_reg;
reg [31:0] fe_sq2_0_168;
reg [31:0] fe_sq2_0_168_reg;
reg [31:0] fe_sq2_0_169;
reg [31:0] fe_sq2_0_169_reg;
reg [31:0] fe_sq2_0_170;
reg [31:0] fe_sq2_0_170_reg;
reg [31:0] fe_sq2_0_171;
reg [31:0] fe_sq2_0_171_reg;
reg [31:0] fe_sq2_0_172;
reg [31:0] fe_sq2_0_172_reg;
reg [31:0] fe_sq2_0_173;
reg [31:0] fe_sq2_0_173_reg;
reg [31:0] fe_sq2_0_174;
reg [31:0] fe_sq2_0_174_reg;
reg [31:0] fe_sq2_0_175;
reg [31:0] fe_sq2_0_175_reg;
reg [31:0] fe_sq2_0_176;
reg [31:0] fe_sq2_0_176_reg;
reg [31:0] fe_sq2_0_177;
reg [31:0] fe_sq2_0_177_reg;
reg [31:0] fe_sq2_0_178;
reg [31:0] fe_sq2_0_178_reg;
reg [31:0] fe_sq2_0_179;
reg [31:0] fe_sq2_0_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_0_188_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fe_sq2_0_31_en;
reg [31:0] fe_sq2_0_31_stage0_reg;
reg  lpm_mult_fe_sq2_0_32_en;
reg [31:0] fe_sq2_0_32_stage0_reg;
reg  lpm_mult_fe_sq2_0_41_en;
reg [31:0] fe_sq2_0_41_stage0_reg;
reg  lpm_mult_fe_sq2_0_33_en;
reg [31:0] fe_sq2_0_33_stage0_reg;
reg  lpm_mult_fe_sq2_0_34_en;
reg [31:0] fe_sq2_0_34_stage0_reg;
reg  lpm_mult_fe_sq2_0_42_en;
reg [31:0] fe_sq2_0_42_stage0_reg;
reg  lpm_mult_fe_sq2_0_43_en;
reg [31:0] fe_sq2_0_43_stage0_reg;
reg  lpm_mult_fe_sq2_0_50_en;
reg [31:0] fe_sq2_0_50_stage0_reg;
reg  lpm_mult_fe_sq2_0_51_en;
reg [31:0] fe_sq2_0_51_stage0_reg;
reg  lpm_mult_fe_sq2_0_58_en;
reg [31:0] fe_sq2_0_58_stage0_reg;
reg  lpm_mult_fe_sq2_0_28_en;
reg [31:0] fe_sq2_0_28_stage0_reg;
reg  lpm_mult_fe_sq2_0_29_en;
reg [31:0] fe_sq2_0_29_stage0_reg;
reg  lpm_mult_fe_sq2_0_38_en;
reg [31:0] fe_sq2_0_38_stage0_reg;
reg  lpm_mult_fe_sq2_0_39_en;
reg [31:0] fe_sq2_0_39_stage0_reg;
reg  lpm_mult_fe_sq2_0_47_en;
reg [31:0] fe_sq2_0_47_stage0_reg;
reg  lpm_mult_fe_sq2_0_48_en;
reg [31:0] fe_sq2_0_48_stage0_reg;
reg  lpm_mult_fe_sq2_0_55_en;
reg [31:0] fe_sq2_0_55_stage0_reg;
reg  lpm_mult_fe_sq2_0_35_en;
reg [31:0] fe_sq2_0_35_stage0_reg;
reg  lpm_mult_fe_sq2_0_36_en;
reg [31:0] fe_sq2_0_36_stage0_reg;
reg  lpm_mult_fe_sq2_0_44_en;
reg [31:0] fe_sq2_0_44_stage0_reg;
reg  lpm_mult_fe_sq2_0_45_en;
reg [31:0] fe_sq2_0_45_stage0_reg;
reg  lpm_mult_fe_sq2_0_52_en;
reg [31:0] fe_sq2_0_52_stage0_reg;
reg  lpm_mult_fe_sq2_0_53_en;
reg [31:0] fe_sq2_0_53_stage0_reg;
reg  lpm_mult_fe_sq2_0_56_en;
reg [31:0] fe_sq2_0_56_stage0_reg;
reg  lpm_mult_fe_sq2_0_59_en;
reg [31:0] fe_sq2_0_59_stage0_reg;
reg  lpm_mult_fe_sq2_0_60_en;
reg [31:0] fe_sq2_0_60_stage0_reg;
reg  lpm_mult_fe_sq2_0_62_en;
reg [31:0] fe_sq2_0_62_stage0_reg;
reg  lpm_mult_fe_sq2_0_63_en;
reg [31:0] fe_sq2_0_63_stage0_reg;
reg  lpm_mult_fe_sq2_0_65_en;
reg [31:0] fe_sq2_0_65_stage0_reg;
reg  lpm_mult_fe_sq2_0_66_en;
reg [31:0] fe_sq2_0_66_stage0_reg;
reg  lpm_mult_fe_sq2_0_68_en;
reg [31:0] fe_sq2_0_68_stage0_reg;
reg  lpm_mult_fe_sq2_0_69_en;
reg [31:0] fe_sq2_0_69_stage0_reg;
reg  lpm_mult_fe_sq2_0_71_en;
reg [31:0] fe_sq2_0_71_stage0_reg;
reg  lpm_mult_fe_sq2_0_74_en;
reg [31:0] fe_sq2_0_74_stage0_reg;
reg  lpm_mult_fe_sq2_0_75_en;
reg [31:0] fe_sq2_0_75_stage0_reg;
reg  lpm_mult_fe_sq2_0_82_en;
reg [31:0] fe_sq2_0_82_stage0_reg;
reg  lpm_mult_fe_sq2_0_83_en;
reg [31:0] fe_sq2_0_83_stage0_reg;
reg  lpm_mult_fe_sq2_0_85_en;
reg [31:0] fe_sq2_0_85_stage0_reg;
reg  lpm_mult_fe_sq2_0_27_en;
reg [31:0] fe_sq2_0_27_stage0_reg;
reg  lpm_mult_fe_sq2_0_30_en;
reg [31:0] fe_sq2_0_30_stage0_reg;
reg  lpm_mult_fe_sq2_0_37_en;
reg [31:0] fe_sq2_0_37_stage0_reg;
reg  lpm_mult_fe_sq2_0_40_en;
reg [31:0] fe_sq2_0_40_stage0_reg;
reg  lpm_mult_fe_sq2_0_46_en;
reg [31:0] fe_sq2_0_46_stage0_reg;
reg  lpm_mult_fe_sq2_0_54_en;
reg [31:0] fe_sq2_0_54_stage0_reg;
reg  lpm_mult_fe_sq2_0_61_en;
reg [31:0] fe_sq2_0_61_stage0_reg;
reg  lpm_mult_fe_sq2_0_72_en;
reg [31:0] fe_sq2_0_72_stage0_reg;
reg  lpm_mult_fe_sq2_0_78_en;
reg [31:0] fe_sq2_0_78_stage0_reg;
reg  lpm_mult_fe_sq2_0_80_en;
reg [31:0] fe_sq2_0_80_stage0_reg;
reg  lpm_mult_fe_sq2_0_49_en;
reg [31:0] fe_sq2_0_49_stage0_reg;
reg  lpm_mult_fe_sq2_0_57_en;
reg [31:0] fe_sq2_0_57_stage0_reg;
reg  lpm_mult_fe_sq2_0_64_en;
reg [31:0] fe_sq2_0_64_stage0_reg;
reg  lpm_mult_fe_sq2_0_67_en;
reg [31:0] fe_sq2_0_67_stage0_reg;
reg  lpm_mult_fe_sq2_0_70_en;
reg [31:0] fe_sq2_0_70_stage0_reg;
reg  lpm_mult_fe_sq2_0_73_en;
reg [31:0] fe_sq2_0_73_stage0_reg;
reg  lpm_mult_fe_sq2_0_76_en;
reg [31:0] fe_sq2_0_76_stage0_reg;
reg  lpm_mult_fe_sq2_0_77_en;
reg [31:0] fe_sq2_0_77_stage0_reg;
reg  lpm_mult_fe_sq2_0_81_en;
reg [31:0] fe_sq2_0_81_stage0_reg;
reg  lpm_mult_fe_sq2_0_84_en;
reg [31:0] fe_sq2_0_84_stage0_reg;
reg  lpm_mult_fe_sq2_0_86_en;
reg [31:0] fe_sq2_0_86_stage0_reg;
reg  lpm_mult_fe_sq2_0_87_en;
reg [31:0] fe_sq2_0_87_stage0_reg;
reg  lpm_mult_fe_sq2_0_175_en;
reg [31:0] fe_sq2_0_175_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_sq2_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fe_sq2_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_sq2_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
begin
fe_sq2_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
fe_sq2_0_1_reg <= fe_sq2_0_1;
if (reset == 1'b0 && ^(fe_sq2_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_1_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %2 = getelementptr inbounds i32* %f, i32 1*/
begin
fe_sq2_0_2 = (arg_f + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %2 = getelementptr inbounds i32* %f, i32 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_2_reg <= fe_sq2_0_2;
if (reset == 1'b0 && ^(fe_sq2_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_2_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
begin
fe_sq2_0_3 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
fe_sq2_0_3_reg <= fe_sq2_0_3;
if (reset == 1'b0 && ^(fe_sq2_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %4 = getelementptr inbounds i32* %f, i32 2*/
begin
fe_sq2_0_4 = (arg_f + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %4 = getelementptr inbounds i32* %f, i32 2*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_4_reg <= fe_sq2_0_4;
if (reset == 1'b0 && ^(fe_sq2_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
fe_sq2_0_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_5_reg <= fe_sq2_0_5;
if (reset == 1'b0 && ^(fe_sq2_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_5_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %6 = getelementptr inbounds i32* %f, i32 3*/
begin
fe_sq2_0_6 = (arg_f + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %6 = getelementptr inbounds i32* %f, i32 3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_6_reg <= fe_sq2_0_6;
if (reset == 1'b0 && ^(fe_sq2_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_6_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
fe_sq2_0_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_7_reg <= fe_sq2_0_7;
if (reset == 1'b0 && ^(fe_sq2_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_7_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %8 = getelementptr inbounds i32* %f, i32 4*/
begin
fe_sq2_0_8 = (arg_f + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %8 = getelementptr inbounds i32* %f, i32 4*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_8_reg <= fe_sq2_0_8;
if (reset == 1'b0 && ^(fe_sq2_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_8_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
fe_sq2_0_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_9_reg <= fe_sq2_0_9;
if (reset == 1'b0 && ^(fe_sq2_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_9_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %10 = getelementptr inbounds i32* %f, i32 5*/
begin
fe_sq2_0_10 = (arg_f + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %10 = getelementptr inbounds i32* %f, i32 5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_10_reg <= fe_sq2_0_10;
if (reset == 1'b0 && ^(fe_sq2_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_10_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
fe_sq2_0_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_11_reg <= fe_sq2_0_11;
if (reset == 1'b0 && ^(fe_sq2_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_11_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %12 = getelementptr inbounds i32* %f, i32 6*/
begin
fe_sq2_0_12 = (arg_f + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %12 = getelementptr inbounds i32* %f, i32 6*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_12_reg <= fe_sq2_0_12;
if (reset == 1'b0 && ^(fe_sq2_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_12_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
fe_sq2_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_13_reg <= fe_sq2_0_13;
if (reset == 1'b0 && ^(fe_sq2_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_13_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %14 = getelementptr inbounds i32* %f, i32 7*/
begin
fe_sq2_0_14 = (arg_f + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %14 = getelementptr inbounds i32* %f, i32 7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_14_reg <= fe_sq2_0_14;
if (reset == 1'b0 && ^(fe_sq2_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_14_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
fe_sq2_0_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_15_reg <= fe_sq2_0_15;
if (reset == 1'b0 && ^(fe_sq2_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_15_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %16 = getelementptr inbounds i32* %f, i32 8*/
begin
fe_sq2_0_16 = (arg_f + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %16 = getelementptr inbounds i32* %f, i32 8*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_16_reg <= fe_sq2_0_16;
if (reset == 1'b0 && ^(fe_sq2_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_16_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
begin
fe_sq2_0_17 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_17_reg <= fe_sq2_0_17;
if (reset == 1'b0 && ^(fe_sq2_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_17_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %18 = getelementptr inbounds i32* %f, i32 9*/
begin
fe_sq2_0_18 = (arg_f + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %18 = getelementptr inbounds i32* %f, i32 9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_18_reg <= fe_sq2_0_18;
if (reset == 1'b0 && ^(fe_sq2_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_18_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
fe_sq2_0_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_19_reg <= fe_sq2_0_19;
if (reset == 1'b0 && ^(fe_sq2_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_19_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %20 = shl nsw i32 %1, 1*/
begin
fe_sq2_0_20 = (fe_sq2_0_1 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %20 = shl nsw i32 %1, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
fe_sq2_0_20_reg <= fe_sq2_0_20;
if (reset == 1'b0 && ^(fe_sq2_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_20_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %21 = shl nsw i32 %3, 1*/
begin
fe_sq2_0_21 = (fe_sq2_0_3 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %21 = shl nsw i32 %3, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
fe_sq2_0_21_reg <= fe_sq2_0_21;
if (reset == 1'b0 && ^(fe_sq2_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_21_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %22 = shl nsw i32 %5, 1*/
begin
fe_sq2_0_22 = (fe_sq2_0_5 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %22 = shl nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_22_reg <= fe_sq2_0_22;
if (reset == 1'b0 && ^(fe_sq2_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_22_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %23 = shl nsw i32 %7, 1*/
begin
fe_sq2_0_23 = (fe_sq2_0_7 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %23 = shl nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_23_reg <= fe_sq2_0_23;
if (reset == 1'b0 && ^(fe_sq2_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_23_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %24 = shl nsw i32 %9, 1*/
begin
fe_sq2_0_24 = (fe_sq2_0_9 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %24 = shl nsw i32 %9, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_24_reg <= fe_sq2_0_24;
if (reset == 1'b0 && ^(fe_sq2_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_24_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %25 = shl nsw i32 %11, 1*/
begin
fe_sq2_0_25 = (fe_sq2_0_11 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %25 = shl nsw i32 %11, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_25_reg <= fe_sq2_0_25;
if (reset == 1'b0 && ^(fe_sq2_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_25_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %26 = shl nsw i32 %15, 1*/
begin
fe_sq2_0_26 = (fe_sq2_0_15 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %26 = shl nsw i32 %15, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_26_reg <= fe_sq2_0_26;
if (reset == 1'b0 && ^(fe_sq2_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_26_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_27 = fe_sq2_0_27_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %27 = mul nsw i32 %13, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_27_reg <= fe_sq2_0_27;
if (reset == 1'b0 && ^(fe_sq2_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_27_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %27 = mul nsw i32 %13, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_27_reg <= fe_sq2_0_27;
if (reset == 1'b0 && ^(fe_sq2_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_27_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_28 = fe_sq2_0_28_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %28 = mul nsw i32 %15, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_28_reg <= fe_sq2_0_28;
if (reset == 1'b0 && ^(fe_sq2_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_28_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %28 = mul nsw i32 %15, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_28_reg <= fe_sq2_0_28;
if (reset == 1'b0 && ^(fe_sq2_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_28_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_29 = fe_sq2_0_29_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %29 = mul nsw i32 %17, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_29_reg <= fe_sq2_0_29;
if (reset == 1'b0 && ^(fe_sq2_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_29_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %29 = mul nsw i32 %17, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_29_reg <= fe_sq2_0_29;
if (reset == 1'b0 && ^(fe_sq2_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_29_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_30 = fe_sq2_0_30_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %30 = mul nsw i32 %19, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_30_reg <= fe_sq2_0_30;
if (reset == 1'b0 && ^(fe_sq2_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_30_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %30 = mul nsw i32 %19, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_30_reg <= fe_sq2_0_30;
if (reset == 1'b0 && ^(fe_sq2_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_30_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_31 = fe_sq2_0_31_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %31 = mul nsw i32 %1, %1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_31_reg <= fe_sq2_0_31;
if (reset == 1'b0 && ^(fe_sq2_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_31_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %31 = mul nsw i32 %1, %1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_31_reg <= fe_sq2_0_31;
if (reset == 1'b0 && ^(fe_sq2_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_31_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_32 = fe_sq2_0_32_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %32 = mul nsw i32 %20, %3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_32_reg <= fe_sq2_0_32;
if (reset == 1'b0 && ^(fe_sq2_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_32_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %32 = mul nsw i32 %20, %3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_32_reg <= fe_sq2_0_32;
if (reset == 1'b0 && ^(fe_sq2_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_32_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_33 = fe_sq2_0_33_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %33 = mul nsw i32 %5, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_33_reg <= fe_sq2_0_33;
if (reset == 1'b0 && ^(fe_sq2_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_33_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %33 = mul nsw i32 %5, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_33_reg <= fe_sq2_0_33;
if (reset == 1'b0 && ^(fe_sq2_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_33_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_34 = fe_sq2_0_34_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %34 = mul nsw i32 %7, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_34_reg <= fe_sq2_0_34;
if (reset == 1'b0 && ^(fe_sq2_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_34_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %34 = mul nsw i32 %7, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_34_reg <= fe_sq2_0_34;
if (reset == 1'b0 && ^(fe_sq2_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_34_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_35 = fe_sq2_0_35_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %35 = mul nsw i32 %9, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_35_reg <= fe_sq2_0_35;
if (reset == 1'b0 && ^(fe_sq2_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_35_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %35 = mul nsw i32 %9, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_35_reg <= fe_sq2_0_35;
if (reset == 1'b0 && ^(fe_sq2_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_35_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_36 = fe_sq2_0_36_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %36 = mul nsw i32 %11, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_36_reg <= fe_sq2_0_36;
if (reset == 1'b0 && ^(fe_sq2_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_36_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %36 = mul nsw i32 %11, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_36_reg <= fe_sq2_0_36;
if (reset == 1'b0 && ^(fe_sq2_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_36_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_37 = fe_sq2_0_37_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %37 = mul nsw i32 %13, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_37_reg <= fe_sq2_0_37;
if (reset == 1'b0 && ^(fe_sq2_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_37_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %37 = mul nsw i32 %13, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_37_reg <= fe_sq2_0_37;
if (reset == 1'b0 && ^(fe_sq2_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_37_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_38 = fe_sq2_0_38_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %38 = mul nsw i32 %15, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_38_reg <= fe_sq2_0_38;
if (reset == 1'b0 && ^(fe_sq2_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_38_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %38 = mul nsw i32 %15, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_38_reg <= fe_sq2_0_38;
if (reset == 1'b0 && ^(fe_sq2_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_38_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_39 = fe_sq2_0_39_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %39 = mul nsw i32 %17, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_39_reg <= fe_sq2_0_39;
if (reset == 1'b0 && ^(fe_sq2_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_39_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %39 = mul nsw i32 %17, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_39_reg <= fe_sq2_0_39;
if (reset == 1'b0 && ^(fe_sq2_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_39_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_40 = fe_sq2_0_40_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %40 = mul nsw i32 %19, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_40_reg <= fe_sq2_0_40;
if (reset == 1'b0 && ^(fe_sq2_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_40_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %40 = mul nsw i32 %19, %20*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_40_reg <= fe_sq2_0_40;
if (reset == 1'b0 && ^(fe_sq2_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_40_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_41 = fe_sq2_0_41_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %41 = mul nsw i32 %21, %3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_41_reg <= fe_sq2_0_41;
if (reset == 1'b0 && ^(fe_sq2_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_41_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %41 = mul nsw i32 %21, %3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
fe_sq2_0_41_reg <= fe_sq2_0_41;
if (reset == 1'b0 && ^(fe_sq2_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_41_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_42 = fe_sq2_0_42_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %42 = mul nsw i32 %21, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_42_reg <= fe_sq2_0_42;
if (reset == 1'b0 && ^(fe_sq2_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_42_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %42 = mul nsw i32 %21, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_42_reg <= fe_sq2_0_42;
if (reset == 1'b0 && ^(fe_sq2_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_42_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_43 = fe_sq2_0_43_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %43 = mul nsw i32 %23, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_43_reg <= fe_sq2_0_43;
if (reset == 1'b0 && ^(fe_sq2_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_43_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %43 = mul nsw i32 %23, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_43_reg <= fe_sq2_0_43;
if (reset == 1'b0 && ^(fe_sq2_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_43_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_44 = fe_sq2_0_44_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %44 = mul nsw i32 %9, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_44_reg <= fe_sq2_0_44;
if (reset == 1'b0 && ^(fe_sq2_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_44_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %44 = mul nsw i32 %9, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_44_reg <= fe_sq2_0_44;
if (reset == 1'b0 && ^(fe_sq2_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_44_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_45 = fe_sq2_0_45_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %45 = mul nsw i32 %25, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_45_reg <= fe_sq2_0_45;
if (reset == 1'b0 && ^(fe_sq2_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_45_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %45 = mul nsw i32 %25, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_45_reg <= fe_sq2_0_45;
if (reset == 1'b0 && ^(fe_sq2_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_45_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_46 = fe_sq2_0_46_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %46 = mul nsw i32 %13, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_46_reg <= fe_sq2_0_46;
if (reset == 1'b0 && ^(fe_sq2_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_46_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %46 = mul nsw i32 %13, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_46_reg <= fe_sq2_0_46;
if (reset == 1'b0 && ^(fe_sq2_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_46_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_47 = fe_sq2_0_47_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %47 = mul nsw i32 %26, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_47_reg <= fe_sq2_0_47;
if (reset == 1'b0 && ^(fe_sq2_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_47_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %47 = mul nsw i32 %26, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_47_reg <= fe_sq2_0_47;
if (reset == 1'b0 && ^(fe_sq2_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_47_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_48 = fe_sq2_0_48_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %48 = mul nsw i32 %17, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_48_reg <= fe_sq2_0_48;
if (reset == 1'b0 && ^(fe_sq2_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_48_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %48 = mul nsw i32 %17, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_48_reg <= fe_sq2_0_48;
if (reset == 1'b0 && ^(fe_sq2_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_48_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_49 = fe_sq2_0_49_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %49 = mul nsw i32 %30, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_49_reg <= fe_sq2_0_49;
if (reset == 1'b0 && ^(fe_sq2_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_49_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %49 = mul nsw i32 %30, %21*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_49_reg <= fe_sq2_0_49;
if (reset == 1'b0 && ^(fe_sq2_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_49_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_50 = fe_sq2_0_50_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %50 = mul nsw i32 %5, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_50_reg <= fe_sq2_0_50;
if (reset == 1'b0 && ^(fe_sq2_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_50_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %50 = mul nsw i32 %5, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_50_reg <= fe_sq2_0_50;
if (reset == 1'b0 && ^(fe_sq2_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_50_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_51 = fe_sq2_0_51_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %51 = mul nsw i32 %22, %7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_51_reg <= fe_sq2_0_51;
if (reset == 1'b0 && ^(fe_sq2_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_51_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %51 = mul nsw i32 %22, %7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_51_reg <= fe_sq2_0_51;
if (reset == 1'b0 && ^(fe_sq2_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_51_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_52 = fe_sq2_0_52_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %52 = mul nsw i32 %9, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_52_reg <= fe_sq2_0_52;
if (reset == 1'b0 && ^(fe_sq2_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_52_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %52 = mul nsw i32 %9, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_52_reg <= fe_sq2_0_52;
if (reset == 1'b0 && ^(fe_sq2_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_52_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_53 = fe_sq2_0_53_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %53 = mul nsw i32 %11, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_53_reg <= fe_sq2_0_53;
if (reset == 1'b0 && ^(fe_sq2_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_53_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %53 = mul nsw i32 %11, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_53_reg <= fe_sq2_0_53;
if (reset == 1'b0 && ^(fe_sq2_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_53_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_54 = fe_sq2_0_54_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %54 = mul nsw i32 %13, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_54_reg <= fe_sq2_0_54;
if (reset == 1'b0 && ^(fe_sq2_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_54_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %54 = mul nsw i32 %13, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_54_reg <= fe_sq2_0_54;
if (reset == 1'b0 && ^(fe_sq2_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_54_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_55 = fe_sq2_0_55_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %55 = mul nsw i32 %15, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_55_reg <= fe_sq2_0_55;
if (reset == 1'b0 && ^(fe_sq2_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_55_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %55 = mul nsw i32 %15, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_6))
begin
fe_sq2_0_55_reg <= fe_sq2_0_55;
if (reset == 1'b0 && ^(fe_sq2_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_55_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_56 = fe_sq2_0_56_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %56 = mul nsw i32 %29, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_56_reg <= fe_sq2_0_56;
if (reset == 1'b0 && ^(fe_sq2_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_56_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %56 = mul nsw i32 %29, %22*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_56_reg <= fe_sq2_0_56;
if (reset == 1'b0 && ^(fe_sq2_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_56_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_57 = fe_sq2_0_57_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %57 = mul nsw i32 %30, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_57_reg <= fe_sq2_0_57;
if (reset == 1'b0 && ^(fe_sq2_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_57_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %57 = mul nsw i32 %30, %5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_57_reg <= fe_sq2_0_57;
if (reset == 1'b0 && ^(fe_sq2_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_57_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_58 = fe_sq2_0_58_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %58 = mul nsw i32 %23, %7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_58_reg <= fe_sq2_0_58;
if (reset == 1'b0 && ^(fe_sq2_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_58_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %58 = mul nsw i32 %23, %7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_58_reg <= fe_sq2_0_58;
if (reset == 1'b0 && ^(fe_sq2_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_58_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_59 = fe_sq2_0_59_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %59 = mul nsw i32 %23, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_59_reg <= fe_sq2_0_59;
if (reset == 1'b0 && ^(fe_sq2_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_59_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %59 = mul nsw i32 %23, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_59_reg <= fe_sq2_0_59;
if (reset == 1'b0 && ^(fe_sq2_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_59_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_60 = fe_sq2_0_60_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %60 = mul nsw i32 %25, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_60_reg <= fe_sq2_0_60;
if (reset == 1'b0 && ^(fe_sq2_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_60_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %60 = mul nsw i32 %25, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_60_reg <= fe_sq2_0_60;
if (reset == 1'b0 && ^(fe_sq2_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_60_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_61 = fe_sq2_0_61_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %61 = mul nsw i32 %13, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_61_reg <= fe_sq2_0_61;
if (reset == 1'b0 && ^(fe_sq2_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_61_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %61 = mul nsw i32 %13, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_61_reg <= fe_sq2_0_61;
if (reset == 1'b0 && ^(fe_sq2_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_61_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_62 = fe_sq2_0_62_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %62 = mul nsw i32 %28, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_62_reg <= fe_sq2_0_62;
if (reset == 1'b0 && ^(fe_sq2_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_62_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %62 = mul nsw i32 %28, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_62_reg <= fe_sq2_0_62;
if (reset == 1'b0 && ^(fe_sq2_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_62_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_63 = fe_sq2_0_63_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %63 = mul nsw i32 %29, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_63_reg <= fe_sq2_0_63;
if (reset == 1'b0 && ^(fe_sq2_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_63_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %63 = mul nsw i32 %29, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_63_reg <= fe_sq2_0_63;
if (reset == 1'b0 && ^(fe_sq2_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_63_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_64 = fe_sq2_0_64_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %64 = mul nsw i32 %30, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_64_reg <= fe_sq2_0_64;
if (reset == 1'b0 && ^(fe_sq2_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_64_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %64 = mul nsw i32 %30, %23*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_64_reg <= fe_sq2_0_64;
if (reset == 1'b0 && ^(fe_sq2_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_64_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_65 = fe_sq2_0_65_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %65 = mul nsw i32 %9, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_65_reg <= fe_sq2_0_65;
if (reset == 1'b0 && ^(fe_sq2_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_65_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %65 = mul nsw i32 %9, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_65_reg <= fe_sq2_0_65;
if (reset == 1'b0 && ^(fe_sq2_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_65_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_66 = fe_sq2_0_66_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %66 = mul nsw i32 %24, %11*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_66_reg <= fe_sq2_0_66;
if (reset == 1'b0 && ^(fe_sq2_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_66_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %66 = mul nsw i32 %24, %11*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_66_reg <= fe_sq2_0_66;
if (reset == 1'b0 && ^(fe_sq2_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_66_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_67 = fe_sq2_0_67_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %67 = mul nsw i32 %27, %24*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_67_reg <= fe_sq2_0_67;
if (reset == 1'b0 && ^(fe_sq2_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_67_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %67 = mul nsw i32 %27, %24*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_67_reg <= fe_sq2_0_67;
if (reset == 1'b0 && ^(fe_sq2_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_67_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_68 = fe_sq2_0_68_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %68 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_68_reg <= fe_sq2_0_68;
if (reset == 1'b0 && ^(fe_sq2_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_68_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %68 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_68_reg <= fe_sq2_0_68;
if (reset == 1'b0 && ^(fe_sq2_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_68_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_69 = fe_sq2_0_69_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %69 = mul nsw i32 %29, %24*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_69_reg <= fe_sq2_0_69;
if (reset == 1'b0 && ^(fe_sq2_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_69_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %69 = mul nsw i32 %29, %24*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_69_reg <= fe_sq2_0_69;
if (reset == 1'b0 && ^(fe_sq2_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_69_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_70 = fe_sq2_0_70_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %70 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_70_reg <= fe_sq2_0_70;
if (reset == 1'b0 && ^(fe_sq2_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_70_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %70 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_70_reg <= fe_sq2_0_70;
if (reset == 1'b0 && ^(fe_sq2_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_70_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_71 = fe_sq2_0_71_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %71 = mul i32 %11, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_71_reg <= fe_sq2_0_71;
if (reset == 1'b0 && ^(fe_sq2_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_71_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %71 = mul i32 %11, 38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_71_reg <= fe_sq2_0_71;
if (reset == 1'b0 && ^(fe_sq2_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_71_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_72 = fe_sq2_0_72_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %72 = mul i32 %71, %11*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_72_reg <= fe_sq2_0_72;
if (reset == 1'b0 && ^(fe_sq2_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_72_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %72 = mul i32 %71, %11*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_72_reg <= fe_sq2_0_72;
if (reset == 1'b0 && ^(fe_sq2_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_72_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_73 = fe_sq2_0_73_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %73 = mul nsw i32 %27, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_73_reg <= fe_sq2_0_73;
if (reset == 1'b0 && ^(fe_sq2_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_73_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %73 = mul nsw i32 %27, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_73_reg <= fe_sq2_0_73;
if (reset == 1'b0 && ^(fe_sq2_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_73_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_74 = fe_sq2_0_74_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %74 = mul nsw i32 %28, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_74_reg <= fe_sq2_0_74;
if (reset == 1'b0 && ^(fe_sq2_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_74_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %74 = mul nsw i32 %28, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_74_reg <= fe_sq2_0_74;
if (reset == 1'b0 && ^(fe_sq2_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_74_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_75 = fe_sq2_0_75_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %75 = mul nsw i32 %29, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_75_reg <= fe_sq2_0_75;
if (reset == 1'b0 && ^(fe_sq2_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_75_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %75 = mul nsw i32 %29, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_75_reg <= fe_sq2_0_75;
if (reset == 1'b0 && ^(fe_sq2_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_75_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_76 = fe_sq2_0_76_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %76 = mul nsw i32 %30, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_76_reg <= fe_sq2_0_76;
if (reset == 1'b0 && ^(fe_sq2_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_76_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %76 = mul nsw i32 %30, %25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_76_reg <= fe_sq2_0_76;
if (reset == 1'b0 && ^(fe_sq2_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_76_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_77 = fe_sq2_0_77_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %77 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_77_reg <= fe_sq2_0_77;
if (reset == 1'b0 && ^(fe_sq2_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_77_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %77 = mul nsw i32 %27, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_77_reg <= fe_sq2_0_77;
if (reset == 1'b0 && ^(fe_sq2_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_77_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_78 = fe_sq2_0_78_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %78 = mul nsw i32 %28, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_78_reg <= fe_sq2_0_78;
if (reset == 1'b0 && ^(fe_sq2_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_78_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %78 = mul nsw i32 %28, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_78_reg <= fe_sq2_0_78;
if (reset == 1'b0 && ^(fe_sq2_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_78_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %79 = shl i32 %13, 1*/
begin
fe_sq2_0_79 = (fe_sq2_0_13 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %79 = shl i32 %13, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_79_reg <= fe_sq2_0_79;
if (reset == 1'b0 && ^(fe_sq2_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_79_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_80 = fe_sq2_0_80_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %80 = mul i32 %79, %29*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_80_reg <= fe_sq2_0_80;
if (reset == 1'b0 && ^(fe_sq2_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_80_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %80 = mul i32 %79, %29*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_80_reg <= fe_sq2_0_80;
if (reset == 1'b0 && ^(fe_sq2_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_80_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_81 = fe_sq2_0_81_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %81 = mul nsw i32 %30, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_81_reg <= fe_sq2_0_81;
if (reset == 1'b0 && ^(fe_sq2_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_81_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %81 = mul nsw i32 %30, %13*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_81_reg <= fe_sq2_0_81;
if (reset == 1'b0 && ^(fe_sq2_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_81_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_82 = fe_sq2_0_82_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %82 = mul nsw i32 %28, %15*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_82_reg <= fe_sq2_0_82;
if (reset == 1'b0 && ^(fe_sq2_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_82_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %82 = mul nsw i32 %28, %15*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_82_reg <= fe_sq2_0_82;
if (reset == 1'b0 && ^(fe_sq2_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_82_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_83 = fe_sq2_0_83_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %83 = mul nsw i32 %29, %26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_83_reg <= fe_sq2_0_83;
if (reset == 1'b0 && ^(fe_sq2_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_83_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %83 = mul nsw i32 %29, %26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_83_reg <= fe_sq2_0_83;
if (reset == 1'b0 && ^(fe_sq2_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_83_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_84 = fe_sq2_0_84_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %84 = mul nsw i32 %30, %26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_84_reg <= fe_sq2_0_84;
if (reset == 1'b0 && ^(fe_sq2_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_84_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %84 = mul nsw i32 %30, %26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_84_reg <= fe_sq2_0_84;
if (reset == 1'b0 && ^(fe_sq2_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_84_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_85 = fe_sq2_0_85_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %85 = mul nsw i32 %29, %17*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_85_reg <= fe_sq2_0_85;
if (reset == 1'b0 && ^(fe_sq2_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_85_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %85 = mul nsw i32 %29, %17*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_85_reg <= fe_sq2_0_85;
if (reset == 1'b0 && ^(fe_sq2_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_85_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_86 = fe_sq2_0_86_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %86 = mul nsw i32 %30, %17*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_86_reg <= fe_sq2_0_86;
if (reset == 1'b0 && ^(fe_sq2_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_86_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %86 = mul nsw i32 %30, %17*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_86_reg <= fe_sq2_0_86;
if (reset == 1'b0 && ^(fe_sq2_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_86_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_87 = fe_sq2_0_87_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %87 = mul nsw i32 %30, %19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_87_reg <= fe_sq2_0_87;
if (reset == 1'b0 && ^(fe_sq2_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_87_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %87 = mul nsw i32 %30, %19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_87_reg <= fe_sq2_0_87;
if (reset == 1'b0 && ^(fe_sq2_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_87_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %88 = add i32 %72, %31*/
begin
fe_sq2_0_88 = (fe_sq2_0_72 + fe_sq2_0_31_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %88 = add i32 %72, %31*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_88_reg <= fe_sq2_0_88;
if (reset == 1'b0 && ^(fe_sq2_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_88_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %89 = add i32 %88, %67*/
begin
fe_sq2_0_89 = (fe_sq2_0_88_reg + fe_sq2_0_67);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %89 = add i32 %88, %67*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_89_reg <= fe_sq2_0_89;
if (reset == 1'b0 && ^(fe_sq2_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_89_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %90 = add i32 %89, %62*/
begin
fe_sq2_0_90 = (fe_sq2_0_89 + fe_sq2_0_62_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %90 = add i32 %89, %62*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_90_reg <= fe_sq2_0_90;
if (reset == 1'b0 && ^(fe_sq2_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_90_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %91 = add i32 %90, %56*/
begin
fe_sq2_0_91 = (fe_sq2_0_90 + fe_sq2_0_56_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %91 = add i32 %90, %56*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_91_reg <= fe_sq2_0_91;
if (reset == 1'b0 && ^(fe_sq2_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_91_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %92 = add i32 %91, %49*/
begin
fe_sq2_0_92 = (fe_sq2_0_91_reg + fe_sq2_0_49_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %92 = add i32 %91, %49*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_92_reg <= fe_sq2_0_92;
if (reset == 1'b0 && ^(fe_sq2_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_92_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %93 = add i32 %73, %32*/
begin
fe_sq2_0_93 = (fe_sq2_0_73 + fe_sq2_0_32_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %93 = add i32 %73, %32*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_93_reg <= fe_sq2_0_93;
if (reset == 1'b0 && ^(fe_sq2_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_93_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %94 = add i32 %93, %68*/
begin
fe_sq2_0_94 = (fe_sq2_0_93 + fe_sq2_0_68_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %94 = add i32 %93, %68*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_94_reg <= fe_sq2_0_94;
if (reset == 1'b0 && ^(fe_sq2_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_94_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %95 = add i32 %94, %63*/
begin
fe_sq2_0_95 = (fe_sq2_0_94 + fe_sq2_0_63_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %95 = add i32 %94, %63*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_95_reg <= fe_sq2_0_95;
if (reset == 1'b0 && ^(fe_sq2_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_95_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %96 = add i32 %95, %57*/
begin
fe_sq2_0_96 = (fe_sq2_0_95_reg + fe_sq2_0_57_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %96 = add i32 %95, %57*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_96_reg <= fe_sq2_0_96;
if (reset == 1'b0 && ^(fe_sq2_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_96_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %97 = add i32 %33, %41*/
begin
fe_sq2_0_97 = (fe_sq2_0_33 + fe_sq2_0_41_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %97 = add i32 %33, %41*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_97_reg <= fe_sq2_0_97;
if (reset == 1'b0 && ^(fe_sq2_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_97_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %98 = add i32 %97, %77*/
begin
fe_sq2_0_98 = (fe_sq2_0_97_reg + fe_sq2_0_77);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %98 = add i32 %97, %77*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_98_reg <= fe_sq2_0_98;
if (reset == 1'b0 && ^(fe_sq2_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_98_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %99 = add i32 %98, %74*/
begin
fe_sq2_0_99 = (fe_sq2_0_98 + fe_sq2_0_74_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %99 = add i32 %98, %74*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_99_reg <= fe_sq2_0_99;
if (reset == 1'b0 && ^(fe_sq2_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_99_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %100 = add i32 %99, %69*/
begin
fe_sq2_0_100 = (fe_sq2_0_99 + fe_sq2_0_69_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %100 = add i32 %99, %69*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_100_reg <= fe_sq2_0_100;
if (reset == 1'b0 && ^(fe_sq2_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_100_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %101 = add i32 %100, %64*/
begin
fe_sq2_0_101 = (fe_sq2_0_100_reg + fe_sq2_0_64_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %101 = add i32 %100, %64*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_101_reg <= fe_sq2_0_101;
if (reset == 1'b0 && ^(fe_sq2_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_101_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %102 = add i32 %34, %42*/
begin
fe_sq2_0_102 = (fe_sq2_0_34 + fe_sq2_0_42);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %102 = add i32 %34, %42*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_102_reg <= fe_sq2_0_102;
if (reset == 1'b0 && ^(fe_sq2_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_102_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %103 = add i32 %102, %78*/
begin
fe_sq2_0_103 = (fe_sq2_0_102_reg + fe_sq2_0_78);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %103 = add i32 %102, %78*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_103_reg <= fe_sq2_0_103;
if (reset == 1'b0 && ^(fe_sq2_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_103_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %104 = add i32 %103, %75*/
begin
fe_sq2_0_104 = (fe_sq2_0_103 + fe_sq2_0_75_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %104 = add i32 %103, %75*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_104_reg <= fe_sq2_0_104;
if (reset == 1'b0 && ^(fe_sq2_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_104_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %105 = add i32 %104, %70*/
begin
fe_sq2_0_105 = (fe_sq2_0_104_reg + fe_sq2_0_70);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %105 = add i32 %104, %70*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_105_reg <= fe_sq2_0_105;
if (reset == 1'b0 && ^(fe_sq2_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_105_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %106 = add i32 %43, %50*/
begin
fe_sq2_0_106 = (fe_sq2_0_43 + fe_sq2_0_50);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %106 = add i32 %43, %50*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
fe_sq2_0_106_reg <= fe_sq2_0_106;
if (reset == 1'b0 && ^(fe_sq2_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_106_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %107 = add i32 %106, %35*/
begin
fe_sq2_0_107 = (fe_sq2_0_106_reg + fe_sq2_0_35);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %107 = add i32 %106, %35*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_107_reg <= fe_sq2_0_107;
if (reset == 1'b0 && ^(fe_sq2_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_107_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %108 = add i32 %107, %82*/
begin
fe_sq2_0_108 = (fe_sq2_0_107 + fe_sq2_0_82);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %108 = add i32 %107, %82*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_108_reg <= fe_sq2_0_108;
if (reset == 1'b0 && ^(fe_sq2_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_108_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %109 = add i32 %108, %80*/
begin
fe_sq2_0_109 = (fe_sq2_0_108_reg + fe_sq2_0_80);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %109 = add i32 %108, %80*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_109_reg <= fe_sq2_0_109;
if (reset == 1'b0 && ^(fe_sq2_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_109_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %110 = add i32 %109, %76*/
begin
fe_sq2_0_110 = (fe_sq2_0_109_reg + fe_sq2_0_76);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %110 = add i32 %109, %76*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_110_reg <= fe_sq2_0_110;
if (reset == 1'b0 && ^(fe_sq2_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_110_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %111 = add i32 %44, %51*/
begin
fe_sq2_0_111 = (fe_sq2_0_44 + fe_sq2_0_51_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %111 = add i32 %44, %51*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_111_reg <= fe_sq2_0_111;
if (reset == 1'b0 && ^(fe_sq2_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_111_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %112 = add i32 %111, %36*/
begin
fe_sq2_0_112 = (fe_sq2_0_111 + fe_sq2_0_36);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %112 = add i32 %111, %36*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_112_reg <= fe_sq2_0_112;
if (reset == 1'b0 && ^(fe_sq2_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_112_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %113 = add i32 %112, %83*/
begin
fe_sq2_0_113 = (fe_sq2_0_112 + fe_sq2_0_83);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %113 = add i32 %112, %83*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_113_reg <= fe_sq2_0_113;
if (reset == 1'b0 && ^(fe_sq2_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_113_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %114 = add i32 %113, %81*/
begin
fe_sq2_0_114 = (fe_sq2_0_113_reg + fe_sq2_0_81);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %114 = add i32 %113, %81*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_114_reg <= fe_sq2_0_114;
if (reset == 1'b0 && ^(fe_sq2_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_114_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %115 = add i32 %52, %58*/
begin
fe_sq2_0_115 = (fe_sq2_0_52 + fe_sq2_0_58_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %115 = add i32 %52, %58*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_115_reg <= fe_sq2_0_115;
if (reset == 1'b0 && ^(fe_sq2_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_115_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %116 = add i32 %115, %45*/
begin
fe_sq2_0_116 = (fe_sq2_0_115 + fe_sq2_0_45);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %116 = add i32 %115, %45*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_116_reg <= fe_sq2_0_116;
if (reset == 1'b0 && ^(fe_sq2_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_116_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %117 = add i32 %116, %37*/
begin
fe_sq2_0_117 = (fe_sq2_0_116_reg + fe_sq2_0_37);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %117 = add i32 %116, %37*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_117_reg <= fe_sq2_0_117;
if (reset == 1'b0 && ^(fe_sq2_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_117_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %118 = add i32 %117, %85*/
begin
fe_sq2_0_118 = (fe_sq2_0_117 + fe_sq2_0_85_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %118 = add i32 %117, %85*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_118_reg <= fe_sq2_0_118;
if (reset == 1'b0 && ^(fe_sq2_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_118_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %119 = add i32 %118, %84*/
begin
fe_sq2_0_119 = (fe_sq2_0_118_reg + fe_sq2_0_84);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %119 = add i32 %118, %84*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_119_reg <= fe_sq2_0_119;
if (reset == 1'b0 && ^(fe_sq2_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_119_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %120 = add i32 %53, %59*/
begin
fe_sq2_0_120 = (fe_sq2_0_53 + fe_sq2_0_59);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %120 = add i32 %53, %59*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_120_reg <= fe_sq2_0_120;
if (reset == 1'b0 && ^(fe_sq2_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_120_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %121 = add i32 %120, %46*/
begin
fe_sq2_0_121 = (fe_sq2_0_120_reg + fe_sq2_0_46);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %121 = add i32 %120, %46*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_121_reg <= fe_sq2_0_121;
if (reset == 1'b0 && ^(fe_sq2_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_121_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %122 = add i32 %121, %38*/
begin
fe_sq2_0_122 = (fe_sq2_0_121 + fe_sq2_0_38_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %122 = add i32 %121, %38*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_122_reg <= fe_sq2_0_122;
if (reset == 1'b0 && ^(fe_sq2_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_122_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %123 = add i32 %122, %86*/
begin
fe_sq2_0_123 = (fe_sq2_0_122_reg + fe_sq2_0_86);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %123 = add i32 %122, %86*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_123_reg <= fe_sq2_0_123;
if (reset == 1'b0 && ^(fe_sq2_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_123_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %124 = add i32 %60, %65*/
begin
fe_sq2_0_124 = (fe_sq2_0_60 + fe_sq2_0_65);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %124 = add i32 %60, %65*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_7))
begin
fe_sq2_0_124_reg <= fe_sq2_0_124;
if (reset == 1'b0 && ^(fe_sq2_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_124_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %125 = add i32 %124, %54*/
begin
fe_sq2_0_125 = (fe_sq2_0_124_reg + fe_sq2_0_54);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %125 = add i32 %124, %54*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_125_reg <= fe_sq2_0_125;
if (reset == 1'b0 && ^(fe_sq2_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_125_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %126 = add i32 %125, %47*/
begin
fe_sq2_0_126 = (fe_sq2_0_125 + fe_sq2_0_47_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %126 = add i32 %125, %47*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_126_reg <= fe_sq2_0_126;
if (reset == 1'b0 && ^(fe_sq2_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_126_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %127 = add i32 %126, %39*/
begin
fe_sq2_0_127 = (fe_sq2_0_126 + fe_sq2_0_39_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %127 = add i32 %126, %39*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_127_reg <= fe_sq2_0_127;
if (reset == 1'b0 && ^(fe_sq2_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_127_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %128 = add i32 %127, %87*/
begin
fe_sq2_0_128 = (fe_sq2_0_127_reg + fe_sq2_0_87);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %128 = add i32 %127, %87*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_128_reg <= fe_sq2_0_128;
if (reset == 1'b0 && ^(fe_sq2_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_128_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %129 = add i32 %61, %66*/
begin
fe_sq2_0_129 = (fe_sq2_0_61 + fe_sq2_0_66_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %129 = add i32 %61, %66*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_129_reg <= fe_sq2_0_129;
if (reset == 1'b0 && ^(fe_sq2_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_129_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %130 = add i32 %129, %55*/
begin
fe_sq2_0_130 = (fe_sq2_0_129 + fe_sq2_0_55_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %130 = add i32 %129, %55*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_130_reg <= fe_sq2_0_130;
if (reset == 1'b0 && ^(fe_sq2_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_130_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %131 = add i32 %130, %48*/
begin
fe_sq2_0_131 = (fe_sq2_0_130 + fe_sq2_0_48_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %131 = add i32 %130, %48*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_8))
begin
fe_sq2_0_131_reg <= fe_sq2_0_131;
if (reset == 1'b0 && ^(fe_sq2_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_131_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %132 = add i32 %131, %40*/
begin
fe_sq2_0_132 = (fe_sq2_0_131_reg + fe_sq2_0_40_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %132 = add i32 %131, %40*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_132_reg <= fe_sq2_0_132;
if (reset == 1'b0 && ^(fe_sq2_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_132_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %133 = shl nsw i32 %92, 1*/
begin
fe_sq2_0_133 = (fe_sq2_0_92 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %133 = shl nsw i32 %92, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_133_reg <= fe_sq2_0_133;
if (reset == 1'b0 && ^(fe_sq2_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_133_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %134 = shl nsw i32 %96, 1*/
begin
fe_sq2_0_134 = (fe_sq2_0_96 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %134 = shl nsw i32 %96, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_134_reg <= fe_sq2_0_134;
if (reset == 1'b0 && ^(fe_sq2_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_134_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %135 = shl nsw i32 %101, 1*/
begin
fe_sq2_0_135 = (fe_sq2_0_101 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %135 = shl nsw i32 %101, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_135_reg <= fe_sq2_0_135;
if (reset == 1'b0 && ^(fe_sq2_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_135_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %136 = shl nsw i32 %105, 1*/
begin
fe_sq2_0_136 = (fe_sq2_0_105 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %136 = shl nsw i32 %105, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_136_reg <= fe_sq2_0_136;
if (reset == 1'b0 && ^(fe_sq2_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_136_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %137 = shl nsw i32 %110, 1*/
begin
fe_sq2_0_137 = (fe_sq2_0_110 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %137 = shl nsw i32 %110, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_137_reg <= fe_sq2_0_137;
if (reset == 1'b0 && ^(fe_sq2_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_137_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %138 = shl nsw i32 %114, 1*/
begin
fe_sq2_0_138 = (fe_sq2_0_114 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %138 = shl nsw i32 %114, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_138_reg <= fe_sq2_0_138;
if (reset == 1'b0 && ^(fe_sq2_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_138_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %139 = shl nsw i32 %119, 1*/
begin
fe_sq2_0_139 = (fe_sq2_0_119 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %139 = shl nsw i32 %119, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_139_reg <= fe_sq2_0_139;
if (reset == 1'b0 && ^(fe_sq2_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_139_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %140 = shl nsw i32 %123, 1*/
begin
fe_sq2_0_140 = (fe_sq2_0_123 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %140 = shl nsw i32 %123, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_140_reg <= fe_sq2_0_140;
if (reset == 1'b0 && ^(fe_sq2_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_140_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %141 = shl nsw i32 %128, 1*/
begin
fe_sq2_0_141 = (fe_sq2_0_128 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %141 = shl nsw i32 %128, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_141_reg <= fe_sq2_0_141;
if (reset == 1'b0 && ^(fe_sq2_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_141_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %142 = shl nsw i32 %132, 1*/
begin
fe_sq2_0_142 = (fe_sq2_0_132 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %142 = shl nsw i32 %132, 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_142_reg <= fe_sq2_0_142;
if (reset == 1'b0 && ^(fe_sq2_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_142_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %143 = add nsw i32 %133, 33554432*/
begin
fe_sq2_0_143 = (fe_sq2_0_133 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %143 = add nsw i32 %133, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_143_reg <= fe_sq2_0_143;
if (reset == 1'b0 && ^(fe_sq2_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_143_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %144 = ashr i32 %143, 26*/
begin
fe_sq2_0_144 = ($signed(fe_sq2_0_143) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %144 = ashr i32 %143, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_144_reg <= fe_sq2_0_144;
if (reset == 1'b0 && ^(fe_sq2_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_144_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %145 = add nsw i32 %144, %134*/
begin
fe_sq2_0_145 = (fe_sq2_0_144 + fe_sq2_0_134);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %145 = add nsw i32 %144, %134*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_145_reg <= fe_sq2_0_145;
if (reset == 1'b0 && ^(fe_sq2_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_145_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %146 = add nsw i32 %137, 33554432*/
begin
fe_sq2_0_146 = (fe_sq2_0_137 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %146 = add nsw i32 %137, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_146_reg <= fe_sq2_0_146;
if (reset == 1'b0 && ^(fe_sq2_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_146_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %147 = ashr i32 %146, 26*/
begin
fe_sq2_0_147 = ($signed(fe_sq2_0_146) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %147 = ashr i32 %146, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_147_reg <= fe_sq2_0_147;
if (reset == 1'b0 && ^(fe_sq2_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_147_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %148 = add nsw i32 %147, %138*/
begin
fe_sq2_0_148 = (fe_sq2_0_147 + fe_sq2_0_138);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %148 = add nsw i32 %147, %138*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_9))
begin
fe_sq2_0_148_reg <= fe_sq2_0_148;
if (reset == 1'b0 && ^(fe_sq2_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_148_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %149 = add nsw i32 %145, 16777216*/
begin
fe_sq2_0_149 = (fe_sq2_0_145_reg + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %149 = add nsw i32 %145, 16777216*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_149_reg <= fe_sq2_0_149;
if (reset == 1'b0 && ^(fe_sq2_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_149_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %150 = ashr i32 %149, 25*/
begin
fe_sq2_0_150 = ($signed(fe_sq2_0_149) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %150 = ashr i32 %149, 25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_150_reg <= fe_sq2_0_150;
if (reset == 1'b0 && ^(fe_sq2_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_150_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %151 = add nsw i32 %150, %135*/
begin
fe_sq2_0_151 = (fe_sq2_0_150 + fe_sq2_0_135_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %151 = add nsw i32 %150, %135*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_151_reg <= fe_sq2_0_151;
if (reset == 1'b0 && ^(fe_sq2_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_151_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %152 = add nsw i32 %148, 16777216*/
begin
fe_sq2_0_152 = (fe_sq2_0_148_reg + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %152 = add nsw i32 %148, 16777216*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_152_reg <= fe_sq2_0_152;
if (reset == 1'b0 && ^(fe_sq2_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_152_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %153 = ashr i32 %152, 25*/
begin
fe_sq2_0_153 = ($signed(fe_sq2_0_152) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %153 = ashr i32 %152, 25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_153_reg <= fe_sq2_0_153;
if (reset == 1'b0 && ^(fe_sq2_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_153_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %154 = add nsw i32 %153, %139*/
begin
fe_sq2_0_154 = (fe_sq2_0_153 + fe_sq2_0_139_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %154 = add nsw i32 %153, %139*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_154_reg <= fe_sq2_0_154;
if (reset == 1'b0 && ^(fe_sq2_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_154_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %155 = add nsw i32 %151, 33554432*/
begin
fe_sq2_0_155 = (fe_sq2_0_151 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %155 = add nsw i32 %151, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_155_reg <= fe_sq2_0_155;
if (reset == 1'b0 && ^(fe_sq2_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_155_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %156 = ashr i32 %155, 26*/
begin
fe_sq2_0_156 = ($signed(fe_sq2_0_155) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %156 = ashr i32 %155, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_156_reg <= fe_sq2_0_156;
if (reset == 1'b0 && ^(fe_sq2_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_156_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %157 = add nsw i32 %156, %136*/
begin
fe_sq2_0_157 = (fe_sq2_0_156_reg + fe_sq2_0_136_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %157 = add nsw i32 %156, %136*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_157_reg <= fe_sq2_0_157;
if (reset == 1'b0 && ^(fe_sq2_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_157_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %158 = add nsw i32 %154, 33554432*/
begin
fe_sq2_0_158 = (fe_sq2_0_154 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %158 = add nsw i32 %154, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_158_reg <= fe_sq2_0_158;
if (reset == 1'b0 && ^(fe_sq2_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_158_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %159 = ashr i32 %158, 26*/
begin
fe_sq2_0_159 = ($signed(fe_sq2_0_158) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %159 = ashr i32 %158, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_10))
begin
fe_sq2_0_159_reg <= fe_sq2_0_159;
if (reset == 1'b0 && ^(fe_sq2_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_159_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %160 = add nsw i32 %159, %140*/
begin
fe_sq2_0_160 = (fe_sq2_0_159_reg + fe_sq2_0_140_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %160 = add nsw i32 %159, %140*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_160_reg <= fe_sq2_0_160;
if (reset == 1'b0 && ^(fe_sq2_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_160_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %161 = add nsw i32 %157, 16777216*/
begin
fe_sq2_0_161 = (fe_sq2_0_157 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %161 = add nsw i32 %157, 16777216*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_161_reg <= fe_sq2_0_161;
if (reset == 1'b0 && ^(fe_sq2_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_161_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %162 = ashr i32 %161, 25*/
begin
fe_sq2_0_162 = ($signed(fe_sq2_0_161) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %162 = ashr i32 %161, 25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_162_reg <= fe_sq2_0_162;
if (reset == 1'b0 && ^(fe_sq2_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_162_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %163 = add nsw i32 %162, %137*/
begin
fe_sq2_0_163 = (fe_sq2_0_162 + fe_sq2_0_137_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %163 = add nsw i32 %162, %137*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_163_reg <= fe_sq2_0_163;
if (reset == 1'b0 && ^(fe_sq2_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_163_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %164 = add nsw i32 %160, 16777216*/
begin
fe_sq2_0_164 = (fe_sq2_0_160 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %164 = add nsw i32 %160, 16777216*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_164_reg <= fe_sq2_0_164;
if (reset == 1'b0 && ^(fe_sq2_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_164_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %165 = ashr i32 %164, 25*/
begin
fe_sq2_0_165 = ($signed(fe_sq2_0_164) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %165 = ashr i32 %164, 25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_165_reg <= fe_sq2_0_165;
if (reset == 1'b0 && ^(fe_sq2_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_165_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %166 = add nsw i32 %165, %141*/
begin
fe_sq2_0_166 = (fe_sq2_0_165 + fe_sq2_0_141_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %166 = add nsw i32 %165, %141*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_11))
begin
fe_sq2_0_166_reg <= fe_sq2_0_166;
if (reset == 1'b0 && ^(fe_sq2_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_166_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %167 = add nsw i32 %163, 33554432*/
begin
fe_sq2_0_167 = (fe_sq2_0_163_reg + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %167 = add nsw i32 %163, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_167_reg <= fe_sq2_0_167;
if (reset == 1'b0 && ^(fe_sq2_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_167_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %168 = ashr i32 %167, 26*/
begin
fe_sq2_0_168 = ($signed(fe_sq2_0_167) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %168 = ashr i32 %167, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_168_reg <= fe_sq2_0_168;
if (reset == 1'b0 && ^(fe_sq2_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_168_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %169 = add i32 %148, %168*/
begin
fe_sq2_0_169 = (fe_sq2_0_148_reg + fe_sq2_0_168);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %169 = add i32 %148, %168*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_169_reg <= fe_sq2_0_169;
if (reset == 1'b0 && ^(fe_sq2_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_169_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %170 = add nsw i32 %166, 33554432*/
begin
fe_sq2_0_170 = (fe_sq2_0_166_reg + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %170 = add nsw i32 %166, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_170_reg <= fe_sq2_0_170;
if (reset == 1'b0 && ^(fe_sq2_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_170_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %171 = ashr i32 %170, 26*/
begin
fe_sq2_0_171 = ($signed(fe_sq2_0_170) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %171 = ashr i32 %170, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_171_reg <= fe_sq2_0_171;
if (reset == 1'b0 && ^(fe_sq2_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_171_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %172 = add nsw i32 %171, %142*/
begin
fe_sq2_0_172 = (fe_sq2_0_171 + fe_sq2_0_142_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %172 = add nsw i32 %171, %142*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_172_reg <= fe_sq2_0_172;
if (reset == 1'b0 && ^(fe_sq2_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_172_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %173 = add nsw i32 %172, 16777216*/
begin
fe_sq2_0_173 = (fe_sq2_0_172 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %173 = add nsw i32 %172, 16777216*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_173_reg <= fe_sq2_0_173;
if (reset == 1'b0 && ^(fe_sq2_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_173_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %174 = ashr i32 %173, 25*/
begin
fe_sq2_0_174 = ($signed(fe_sq2_0_173) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %174 = ashr i32 %173, 25*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_12))
begin
fe_sq2_0_174_reg <= fe_sq2_0_174;
if (reset == 1'b0 && ^(fe_sq2_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_174_reg"); $finish; end
end
end
always @(*) begin
fe_sq2_0_175 = fe_sq2_0_175_stage0_reg;
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %175 = mul nsw i32 %174, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_175_reg <= fe_sq2_0_175;
if (reset == 1'b0 && ^(fe_sq2_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_175_reg"); $finish; end
end
/* fe_sq2: %0*/
/*   %175 = mul nsw i32 %174, 19*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_175_reg <= fe_sq2_0_175;
if (reset == 1'b0 && ^(fe_sq2_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_175_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %176 = add nsw i32 %175, %133*/
begin
fe_sq2_0_176 = (fe_sq2_0_175 + fe_sq2_0_133_reg);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %176 = add nsw i32 %175, %133*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_176_reg <= fe_sq2_0_176;
if (reset == 1'b0 && ^(fe_sq2_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_176_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %177 = add nsw i32 %176, 33554432*/
begin
fe_sq2_0_177 = (fe_sq2_0_176 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %177 = add nsw i32 %176, 33554432*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_177_reg <= fe_sq2_0_177;
if (reset == 1'b0 && ^(fe_sq2_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_177_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %178 = ashr i32 %177, 26*/
begin
fe_sq2_0_178 = ($signed(fe_sq2_0_177) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %178 = ashr i32 %177, 26*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_178_reg <= fe_sq2_0_178;
if (reset == 1'b0 && ^(fe_sq2_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_178_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %179 = add i32 %145, %178*/
begin
fe_sq2_0_179 = (fe_sq2_0_145_reg + fe_sq2_0_178);
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %179 = add i32 %145, %178*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
fe_sq2_0_179_reg <= fe_sq2_0_179;
if (reset == 1'b0 && ^(fe_sq2_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_179_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %180 = getelementptr inbounds i32* %h, i32 1*/
begin
fe_sq2_0_180 = (arg_h + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %180 = getelementptr inbounds i32* %h, i32 1*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_180_reg <= fe_sq2_0_180;
if (reset == 1'b0 && ^(fe_sq2_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_180_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %181 = getelementptr inbounds i32* %h, i32 2*/
begin
fe_sq2_0_181 = (arg_h + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %181 = getelementptr inbounds i32* %h, i32 2*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_181_reg <= fe_sq2_0_181;
if (reset == 1'b0 && ^(fe_sq2_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_181_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %182 = getelementptr inbounds i32* %h, i32 3*/
begin
fe_sq2_0_182 = (arg_h + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %182 = getelementptr inbounds i32* %h, i32 3*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_182_reg <= fe_sq2_0_182;
if (reset == 1'b0 && ^(fe_sq2_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_182_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %183 = getelementptr inbounds i32* %h, i32 4*/
begin
fe_sq2_0_183 = (arg_h + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %183 = getelementptr inbounds i32* %h, i32 4*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_183_reg <= fe_sq2_0_183;
if (reset == 1'b0 && ^(fe_sq2_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_183_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %184 = getelementptr inbounds i32* %h, i32 5*/
begin
fe_sq2_0_184 = (arg_h + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %184 = getelementptr inbounds i32* %h, i32 5*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_184_reg <= fe_sq2_0_184;
if (reset == 1'b0 && ^(fe_sq2_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_184_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %185 = getelementptr inbounds i32* %h, i32 6*/
begin
fe_sq2_0_185 = (arg_h + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %185 = getelementptr inbounds i32* %h, i32 6*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_185_reg <= fe_sq2_0_185;
if (reset == 1'b0 && ^(fe_sq2_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_185_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %186 = getelementptr inbounds i32* %h, i32 7*/
begin
fe_sq2_0_186 = (arg_h + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %186 = getelementptr inbounds i32* %h, i32 7*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_186_reg <= fe_sq2_0_186;
if (reset == 1'b0 && ^(fe_sq2_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_186_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %187 = getelementptr inbounds i32* %h, i32 8*/
begin
fe_sq2_0_187 = (arg_h + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %187 = getelementptr inbounds i32* %h, i32 8*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_187_reg <= fe_sq2_0_187;
if (reset == 1'b0 && ^(fe_sq2_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_187_reg"); $finish; end
end
end
always @(*) begin
/* fe_sq2: %0*/
/*   %188 = getelementptr inbounds i32* %h, i32 9*/
begin
fe_sq2_0_188 = (arg_h + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %188 = getelementptr inbounds i32* %h, i32 9*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
fe_sq2_0_188_reg <= fe_sq2_0_188;
if (reset == 1'b0 && ^(fe_sq2_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_0_188_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fe_sq2_0_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %31 = mul nsw i32 %1, %1*/
if ((lpm_mult_fe_sq2_0_31_en == 1'd1))
begin
fe_sq2_0_31_stage0_reg <= (fe_sq2_0_1 * fe_sq2_0_1);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %32 = mul nsw i32 %20, %3*/
if ((lpm_mult_fe_sq2_0_32_en == 1'd1))
begin
fe_sq2_0_32_stage0_reg <= (fe_sq2_0_20 * fe_sq2_0_3);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %41 = mul nsw i32 %21, %3*/
if ((lpm_mult_fe_sq2_0_41_en == 1'd1))
begin
fe_sq2_0_41_stage0_reg <= (fe_sq2_0_21 * fe_sq2_0_3);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %33 = mul nsw i32 %5, %20*/
if ((lpm_mult_fe_sq2_0_33_en == 1'd1))
begin
fe_sq2_0_33_stage0_reg <= (fe_sq2_0_5 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %34 = mul nsw i32 %7, %20*/
if ((lpm_mult_fe_sq2_0_34_en == 1'd1))
begin
fe_sq2_0_34_stage0_reg <= (fe_sq2_0_7 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %42 = mul nsw i32 %21, %5*/
if ((lpm_mult_fe_sq2_0_42_en == 1'd1))
begin
fe_sq2_0_42_stage0_reg <= (fe_sq2_0_21_reg * fe_sq2_0_5);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %43 = mul nsw i32 %23, %21*/
if ((lpm_mult_fe_sq2_0_43_en == 1'd1))
begin
fe_sq2_0_43_stage0_reg <= (fe_sq2_0_23 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %50 = mul nsw i32 %5, %5*/
if ((lpm_mult_fe_sq2_0_50_en == 1'd1))
begin
fe_sq2_0_50_stage0_reg <= (fe_sq2_0_5 * fe_sq2_0_5);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %51 = mul nsw i32 %22, %7*/
if ((lpm_mult_fe_sq2_0_51_en == 1'd1))
begin
fe_sq2_0_51_stage0_reg <= (fe_sq2_0_22 * fe_sq2_0_7);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %58 = mul nsw i32 %23, %7*/
if ((lpm_mult_fe_sq2_0_58_en == 1'd1))
begin
fe_sq2_0_58_stage0_reg <= (fe_sq2_0_23 * fe_sq2_0_7);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %28 = mul nsw i32 %15, 38*/
if ((lpm_mult_fe_sq2_0_28_en == 1'd1))
begin
fe_sq2_0_28_stage0_reg <= (fe_sq2_0_15 * 32'd38);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %29 = mul nsw i32 %17, 19*/
if ((lpm_mult_fe_sq2_0_29_en == 1'd1))
begin
fe_sq2_0_29_stage0_reg <= (fe_sq2_0_17 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %38 = mul nsw i32 %15, %20*/
if ((lpm_mult_fe_sq2_0_38_en == 1'd1))
begin
fe_sq2_0_38_stage0_reg <= (fe_sq2_0_15 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %39 = mul nsw i32 %17, %20*/
if ((lpm_mult_fe_sq2_0_39_en == 1'd1))
begin
fe_sq2_0_39_stage0_reg <= (fe_sq2_0_17 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_47_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %47 = mul nsw i32 %26, %21*/
if ((lpm_mult_fe_sq2_0_47_en == 1'd1))
begin
fe_sq2_0_47_stage0_reg <= (fe_sq2_0_26 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %48 = mul nsw i32 %17, %21*/
if ((lpm_mult_fe_sq2_0_48_en == 1'd1))
begin
fe_sq2_0_48_stage0_reg <= (fe_sq2_0_17 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %55 = mul nsw i32 %15, %22*/
if ((lpm_mult_fe_sq2_0_55_en == 1'd1))
begin
fe_sq2_0_55_stage0_reg <= (fe_sq2_0_15 * fe_sq2_0_22_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %35 = mul nsw i32 %9, %20*/
if ((lpm_mult_fe_sq2_0_35_en == 1'd1))
begin
fe_sq2_0_35_stage0_reg <= (fe_sq2_0_9 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %36 = mul nsw i32 %11, %20*/
if ((lpm_mult_fe_sq2_0_36_en == 1'd1))
begin
fe_sq2_0_36_stage0_reg <= (fe_sq2_0_11 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %44 = mul nsw i32 %9, %21*/
if ((lpm_mult_fe_sq2_0_44_en == 1'd1))
begin
fe_sq2_0_44_stage0_reg <= (fe_sq2_0_9 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %45 = mul nsw i32 %25, %21*/
if ((lpm_mult_fe_sq2_0_45_en == 1'd1))
begin
fe_sq2_0_45_stage0_reg <= (fe_sq2_0_25 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %52 = mul nsw i32 %9, %22*/
if ((lpm_mult_fe_sq2_0_52_en == 1'd1))
begin
fe_sq2_0_52_stage0_reg <= (fe_sq2_0_9 * fe_sq2_0_22_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_53_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %53 = mul nsw i32 %11, %22*/
if ((lpm_mult_fe_sq2_0_53_en == 1'd1))
begin
fe_sq2_0_53_stage0_reg <= (fe_sq2_0_11 * fe_sq2_0_22_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %56 = mul nsw i32 %29, %22*/
if ((lpm_mult_fe_sq2_0_56_en == 1'd1))
begin
fe_sq2_0_56_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_22_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %59 = mul nsw i32 %23, %9*/
if ((lpm_mult_fe_sq2_0_59_en == 1'd1))
begin
fe_sq2_0_59_stage0_reg <= (fe_sq2_0_23_reg * fe_sq2_0_9);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %60 = mul nsw i32 %25, %23*/
if ((lpm_mult_fe_sq2_0_60_en == 1'd1))
begin
fe_sq2_0_60_stage0_reg <= (fe_sq2_0_25 * fe_sq2_0_23_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %62 = mul nsw i32 %28, %23*/
if ((lpm_mult_fe_sq2_0_62_en == 1'd1))
begin
fe_sq2_0_62_stage0_reg <= (fe_sq2_0_28 * fe_sq2_0_23_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %63 = mul nsw i32 %29, %23*/
if ((lpm_mult_fe_sq2_0_63_en == 1'd1))
begin
fe_sq2_0_63_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_23_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %65 = mul nsw i32 %9, %9*/
if ((lpm_mult_fe_sq2_0_65_en == 1'd1))
begin
fe_sq2_0_65_stage0_reg <= (fe_sq2_0_9 * fe_sq2_0_9);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %66 = mul nsw i32 %24, %11*/
if ((lpm_mult_fe_sq2_0_66_en == 1'd1))
begin
fe_sq2_0_66_stage0_reg <= (fe_sq2_0_24 * fe_sq2_0_11);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %68 = mul nsw i32 %28, %9*/
if ((lpm_mult_fe_sq2_0_68_en == 1'd1))
begin
fe_sq2_0_68_stage0_reg <= (fe_sq2_0_28 * fe_sq2_0_9);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %69 = mul nsw i32 %29, %24*/
if ((lpm_mult_fe_sq2_0_69_en == 1'd1))
begin
fe_sq2_0_69_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_24);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %71 = mul i32 %11, 38*/
if ((lpm_mult_fe_sq2_0_71_en == 1'd1))
begin
fe_sq2_0_71_stage0_reg <= (fe_sq2_0_11 * 32'd38);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %74 = mul nsw i32 %28, %25*/
if ((lpm_mult_fe_sq2_0_74_en == 1'd1))
begin
fe_sq2_0_74_stage0_reg <= (fe_sq2_0_28 * fe_sq2_0_25);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %75 = mul nsw i32 %29, %25*/
if ((lpm_mult_fe_sq2_0_75_en == 1'd1))
begin
fe_sq2_0_75_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_25);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_82_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %82 = mul nsw i32 %28, %15*/
if ((lpm_mult_fe_sq2_0_82_en == 1'd1))
begin
fe_sq2_0_82_stage0_reg <= (fe_sq2_0_28 * fe_sq2_0_15_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_83_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %83 = mul nsw i32 %29, %26*/
if ((lpm_mult_fe_sq2_0_83_en == 1'd1))
begin
fe_sq2_0_83_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_26_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_85_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %85 = mul nsw i32 %29, %17*/
if ((lpm_mult_fe_sq2_0_85_en == 1'd1))
begin
fe_sq2_0_85_stage0_reg <= (fe_sq2_0_29 * fe_sq2_0_17_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %27 = mul nsw i32 %13, 19*/
if ((lpm_mult_fe_sq2_0_27_en == 1'd1))
begin
fe_sq2_0_27_stage0_reg <= (fe_sq2_0_13 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %30 = mul nsw i32 %19, 38*/
if ((lpm_mult_fe_sq2_0_30_en == 1'd1))
begin
fe_sq2_0_30_stage0_reg <= (fe_sq2_0_19 * 32'd38);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %37 = mul nsw i32 %13, %20*/
if ((lpm_mult_fe_sq2_0_37_en == 1'd1))
begin
fe_sq2_0_37_stage0_reg <= (fe_sq2_0_13 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %40 = mul nsw i32 %19, %20*/
if ((lpm_mult_fe_sq2_0_40_en == 1'd1))
begin
fe_sq2_0_40_stage0_reg <= (fe_sq2_0_19 * fe_sq2_0_20_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %46 = mul nsw i32 %13, %21*/
if ((lpm_mult_fe_sq2_0_46_en == 1'd1))
begin
fe_sq2_0_46_stage0_reg <= (fe_sq2_0_13 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %54 = mul nsw i32 %13, %22*/
if ((lpm_mult_fe_sq2_0_54_en == 1'd1))
begin
fe_sq2_0_54_stage0_reg <= (fe_sq2_0_13 * fe_sq2_0_22_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %61 = mul nsw i32 %13, %23*/
if ((lpm_mult_fe_sq2_0_61_en == 1'd1))
begin
fe_sq2_0_61_stage0_reg <= (fe_sq2_0_13 * fe_sq2_0_23_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_72_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %72 = mul i32 %71, %11*/
if ((lpm_mult_fe_sq2_0_72_en == 1'd1))
begin
fe_sq2_0_72_stage0_reg <= (fe_sq2_0_71 * fe_sq2_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %78 = mul nsw i32 %28, %13*/
if ((lpm_mult_fe_sq2_0_78_en == 1'd1))
begin
fe_sq2_0_78_stage0_reg <= (fe_sq2_0_28_reg * fe_sq2_0_13);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %80 = mul i32 %79, %29*/
if ((lpm_mult_fe_sq2_0_80_en == 1'd1))
begin
fe_sq2_0_80_stage0_reg <= (fe_sq2_0_79 * fe_sq2_0_29_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %49 = mul nsw i32 %30, %21*/
if ((lpm_mult_fe_sq2_0_49_en == 1'd1))
begin
fe_sq2_0_49_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_21_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %57 = mul nsw i32 %30, %5*/
if ((lpm_mult_fe_sq2_0_57_en == 1'd1))
begin
fe_sq2_0_57_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %64 = mul nsw i32 %30, %23*/
if ((lpm_mult_fe_sq2_0_64_en == 1'd1))
begin
fe_sq2_0_64_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_23_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %67 = mul nsw i32 %27, %24*/
if ((lpm_mult_fe_sq2_0_67_en == 1'd1))
begin
fe_sq2_0_67_stage0_reg <= (fe_sq2_0_27 * fe_sq2_0_24_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %70 = mul nsw i32 %30, %9*/
if ((lpm_mult_fe_sq2_0_70_en == 1'd1))
begin
fe_sq2_0_70_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %73 = mul nsw i32 %27, %25*/
if ((lpm_mult_fe_sq2_0_73_en == 1'd1))
begin
fe_sq2_0_73_stage0_reg <= (fe_sq2_0_27 * fe_sq2_0_25_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %76 = mul nsw i32 %30, %25*/
if ((lpm_mult_fe_sq2_0_76_en == 1'd1))
begin
fe_sq2_0_76_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_25_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %77 = mul nsw i32 %27, %13*/
if ((lpm_mult_fe_sq2_0_77_en == 1'd1))
begin
fe_sq2_0_77_stage0_reg <= (fe_sq2_0_27 * fe_sq2_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %81 = mul nsw i32 %30, %13*/
if ((lpm_mult_fe_sq2_0_81_en == 1'd1))
begin
fe_sq2_0_81_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_84_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %84 = mul nsw i32 %30, %26*/
if ((lpm_mult_fe_sq2_0_84_en == 1'd1))
begin
fe_sq2_0_84_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_26_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %86 = mul nsw i32 %30, %17*/
if ((lpm_mult_fe_sq2_0_86_en == 1'd1))
begin
fe_sq2_0_86_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_17_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %87 = mul nsw i32 %30, %19*/
if ((lpm_mult_fe_sq2_0_87_en == 1'd1))
begin
fe_sq2_0_87_stage0_reg <= (fe_sq2_0_30 * fe_sq2_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_sq2_0_175_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_sq2: %0*/
/*   %175 = mul nsw i32 %174, 19*/
if ((lpm_mult_fe_sq2_0_175_en == 1'd1))
begin
fe_sq2_0_175_stage0_reg <= (fe_sq2_0_174 * 32'd19);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fe_sq2: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_18))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %176, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %151, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %163, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %154, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %166, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_address_a = arg_f;
end
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_address_a = fe_sq2_0_4_reg;
end
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_address_a = fe_sq2_0_14_reg;
end
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_address_a = fe_sq2_0_8_reg;
end
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_address_a = fe_sq2_0_12_reg;
end
/* fe_sq2: %0*/
/*   store i32 %176, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_address_a = arg_h;
end
/* fe_sq2: %0*/
/*   store i32 %151, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_address_a = fe_sq2_0_181_reg;
end
/* fe_sq2: %0*/
/*   store i32 %163, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_address_a = fe_sq2_0_183_reg;
end
/* fe_sq2: %0*/
/*   store i32 %154, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_address_a = fe_sq2_0_185_reg;
end
/* fe_sq2: %0*/
/*   store i32 %166, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_address_a = fe_sq2_0_187_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_sq2: %0*/
/*   store i32 %176, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %151, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %163, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %154, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %166, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fe_sq2: %0*/
/*   store i32 %176, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_in_a = fe_sq2_0_176;
end
/* fe_sq2: %0*/
/*   store i32 %151, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_in_a = fe_sq2_0_151_reg;
end
/* fe_sq2: %0*/
/*   store i32 %163, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_in_a = fe_sq2_0_163_reg;
end
/* fe_sq2: %0*/
/*   store i32 %154, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_in_a = fe_sq2_0_154_reg;
end
/* fe_sq2: %0*/
/*   store i32 %166, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_in_a = fe_sq2_0_166_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fe_sq2: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %176, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %151, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %163, i32* %183, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %154, i32* %185, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_size_a = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %166, i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %157, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %169, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %160, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %172, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_address_b = fe_sq2_0_2;
end
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_address_b = fe_sq2_0_6_reg;
end
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_address_b = fe_sq2_0_16_reg;
end
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_address_b = fe_sq2_0_10_reg;
end
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_address_b = fe_sq2_0_18_reg;
end
/* fe_sq2: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_address_b = fe_sq2_0_180_reg;
end
/* fe_sq2: %0*/
/*   store i32 %157, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_address_b = fe_sq2_0_182_reg;
end
/* fe_sq2: %0*/
/*   store i32 %169, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_address_b = fe_sq2_0_184_reg;
end
/* fe_sq2: %0*/
/*   store i32 %160, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_address_b = fe_sq2_0_186_reg;
end
/* fe_sq2: %0*/
/*   store i32 %172, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_address_b = fe_sq2_0_188_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_sq2: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %157, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %169, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %160, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_sq2: %0*/
/*   store i32 %172, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fe_sq2: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_in_b = fe_sq2_0_179;
end
/* fe_sq2: %0*/
/*   store i32 %157, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_in_b = fe_sq2_0_157_reg;
end
/* fe_sq2: %0*/
/*   store i32 %169, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_in_b = fe_sq2_0_169_reg;
end
/* fe_sq2: %0*/
/*   store i32 %160, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_in_b = fe_sq2_0_160_reg;
end
/* fe_sq2: %0*/
/*   store i32 %172, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_in_b = fe_sq2_0_172_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fe_sq2: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %179, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_13))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %157, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_14))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %169, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_15))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %160, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_16))
begin
memory_controller_size_b = 2'd2;
end
/* fe_sq2: %0*/
/*   store i32 %172, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_sq2_BB_0_17))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fe_sq2_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_arg_h;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_arg_f;
wire  fe_sq2_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_memory_controller_address_a;
wire  fe_sq2_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_sq2_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_sq2_memory_controller_out_a;
wire [1:0] fe_sq2_memory_controller_size_a;
wire  fe_sq2_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_sq2_memory_controller_address_b;
wire  fe_sq2_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_sq2_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_sq2_memory_controller_out_b;
wire [1:0] fe_sq2_memory_controller_size_b;
reg  fe_sq2_memory_controller_waitrequest;
wire  fe_sq2_finish;
reg  fe_sq2_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fe_sq2 fe_sq2_inst (
	.memory_controller_enable_a (fe_sq2_memory_controller_enable_a),
	.memory_controller_address_a (fe_sq2_memory_controller_address_a),
	.memory_controller_write_enable_a (fe_sq2_memory_controller_write_enable_a),
	.memory_controller_in_a (fe_sq2_memory_controller_in_a),
	.memory_controller_size_a (fe_sq2_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fe_sq2_memory_controller_enable_b),
	.memory_controller_address_b (fe_sq2_memory_controller_address_b),
	.memory_controller_write_enable_b (fe_sq2_memory_controller_write_enable_b),
	.memory_controller_in_b (fe_sq2_memory_controller_in_b),
	.memory_controller_size_b (fe_sq2_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fe_sq2_start),
	.finish (fe_sq2_finish),
	.arg_h (fe_sq2_arg_h),
	.arg_f (fe_sq2_arg_f)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fe_sq2_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fe_sq2_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_sq2_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fe_sq2_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_sq2_arg_h <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_arg_h"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_sq2_arg_f <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_sq2_arg_f"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
begin
fe_sq2_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
begin
fe_sq2_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fe_sq2_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fe_sq2_finish_final = fe_sq2_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fe_sq2_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fe_sq2_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_sq2_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_sq2_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fe_sq2_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fe_sq2_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_sq2_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_sq2_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fe_sq2_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fe_sq2_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fe_sq2_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fe_sq2_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_sq2_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_sq2_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fe_sq2_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fe_sq2_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_sq2_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_sq2_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fe_sq2_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fe_sq2(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fe_sq2_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
