//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:36 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fill_pixels
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_y0,
	arg_y1,
	arg_u,
	arg_v,
	arg_ylinesize,
	arg_ulinesize,
	arg_vlinesize,
	arg_fill,
	arg_nx,
	arg_ny,
	arg_np,
	arg_w,
	arg_h
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_2 = 6'd2;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_3 = 6'd3;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_4 = 6'd4;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_5 = 6'd5;
parameter [5:0] LEGUP_F_fill_pixels_BB_0_6 = 6'd6;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_7 = 6'd7;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_8 = 6'd8;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_9 = 6'd9;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_10 = 6'd10;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_11 = 6'd11;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_12 = 6'd12;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_13 = 6'd13;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_14 = 6'd14;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_15 = 6'd15;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_16 = 6'd16;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_17 = 6'd17;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_18 = 6'd18;
parameter [5:0] LEGUP_F_fill_pixels_BB_8_19 = 6'd19;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_20 = 6'd20;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_21 = 6'd21;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_22 = 6'd22;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_23 = 6'd23;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_24 = 6'd24;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_25 = 6'd25;
parameter [5:0] LEGUP_F_fill_pixels_BB_31_26 = 6'd26;
parameter [5:0] LEGUP_F_fill_pixels_BB_43_27 = 6'd27;
parameter [5:0] LEGUP_F_fill_pixels_BB_46_28 = 6'd28;
parameter [5:0] LEGUP_F_fill_pixels_BB_46_29 = 6'd29;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_30 = 6'd30;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_31 = 6'd31;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_32 = 6'd32;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_33 = 6'd33;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_34 = 6'd34;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_35 = 6'd35;
parameter [5:0] LEGUP_F_fill_pixels_BB_55_36 = 6'd36;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_37 = 6'd37;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_38 = 6'd38;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_39 = 6'd39;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_40 = 6'd40;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_41 = 6'd41;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_42 = 6'd42;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_43 = 6'd43;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_44 = 6'd44;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_45 = 6'd45;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_46 = 6'd46;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_47 = 6'd47;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_48 = 6'd48;
parameter [5:0] LEGUP_F_fill_pixels_BB_69_49 = 6'd49;
parameter [5:0] LEGUP_F_fill_pixels_BB_93_50 = 6'd50;
parameter [5:0] LEGUP_F_fill_pixels_BB_96_51 = 6'd51;
parameter [5:0] LEGUP_F_fill_pixels_BB_96_52 = 6'd52;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_53 = 6'd53;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_54 = 6'd54;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_55 = 6'd55;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_56 = 6'd56;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_57 = 6'd57;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_58 = 6'd58;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_59 = 6'd59;
parameter [5:0] LEGUP_F_fill_pixels_BB_105_60 = 6'd60;
parameter [5:0] LEGUP_F_fill_pixels_BB_106_61 = 6'd61;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_y0;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_y1;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_u;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_v;
input [31:0] arg_ylinesize;
input [31:0] arg_ulinesize;
input [31:0] arg_vlinesize;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_fill;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ny;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_np;
input [31:0] arg_w;
input [31:0] arg_h;
reg [5:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_0_4_reg;
reg [31:0] fill_pixels_0_5;
reg [31:0] fill_pixels_0_5_reg;
reg [31:0] fill_pixels_0_6;
reg [31:0] fill_pixels_0_6_reg;
reg [31:0] fill_pixels_0_7;
reg [31:0] fill_pixels_0_7_reg;
reg [31:0] fill_pixels_8_9;
reg [31:0] fill_pixels_8_9_reg;
reg [31:0] fill_pixels_8_10;
reg [31:0] fill_pixels_8_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_11_reg;
reg [31:0] fill_pixels_8_12;
reg [31:0] fill_pixels_8_12_reg;
reg [31:0] fill_pixels_8_13;
reg [31:0] fill_pixels_8_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_14_reg;
reg [31:0] fill_pixels_8_15;
reg [31:0] fill_pixels_8_15_reg;
reg [31:0] fill_pixels_8_16;
reg [31:0] fill_pixels_8_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_17_reg;
reg [31:0] fill_pixels_8_18;
reg [31:0] fill_pixels_8_18_reg;
reg [31:0] fill_pixels_8_19;
reg [31:0] fill_pixels_8_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_20_reg;
reg [31:0] fill_pixels_8_21;
reg [31:0] fill_pixels_8_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_22_reg;
reg [31:0] fill_pixels_8_23;
reg [31:0] fill_pixels_8_23_reg;
reg [31:0] fill_pixels_8_24;
reg [31:0] fill_pixels_8_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_25_reg;
reg [31:0] fill_pixels_8_26;
reg [31:0] fill_pixels_8_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_8_27_reg;
reg [31:0] fill_pixels_8_28;
reg [31:0] fill_pixels_8_28_reg;
reg [31:0] fill_pixels_8_29;
reg [31:0] fill_pixels_8_29_reg;
reg [31:0] fill_pixels_8_30;
reg [31:0] fill_pixels_8_30_reg;
reg [31:0] fill_pixels_31_32;
reg [31:0] fill_pixels_31_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_33_reg;
reg [31:0] fill_pixels_31_34;
reg [31:0] fill_pixels_31_34_reg;
reg [31:0] fill_pixels_31_35;
reg [31:0] fill_pixels_31_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_36_reg;
reg [31:0] fill_pixels_31_37;
reg [31:0] fill_pixels_31_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_31_38_reg;
reg [31:0] fill_pixels_31_39;
reg [31:0] fill_pixels_31_39_reg;
reg [31:0] fill_pixels_31_40;
reg [31:0] fill_pixels_31_40_reg;
reg [31:0] fill_pixels_31_41;
reg [31:0] fill_pixels_31_41_reg;
reg  fill_pixels_31_42;
reg  fill_pixels_31_42_reg;
reg [31:0] fill_pixels_43_44;
reg [31:0] fill_pixels_43_44_reg;
reg  fill_pixels_43_45;
reg  fill_pixels_43_45_reg;
reg [31:0] fill_pixels_46_47;
reg [31:0] fill_pixels_46_47_reg;
reg [31:0] fill_pixels_46_48;
reg [31:0] fill_pixels_46_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_50_reg;
reg [31:0] fill_pixels_46_51;
reg [31:0] fill_pixels_46_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_52_reg;
reg [31:0] fill_pixels_46_53;
reg [31:0] fill_pixels_46_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_46_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_y0dst_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_y0dst_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_y1dst_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_y1dst_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_udst_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_udst_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_vdst_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_vdst_0_reg;
reg [31:0] fill_pixels_55_x_0;
reg [31:0] fill_pixels_55_x_0_reg;
reg [31:0] fill_pixels_55_y_0;
reg [31:0] fill_pixels_55_y_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_56_reg;
reg [31:0] fill_pixels_55_57;
reg [31:0] fill_pixels_55_57_reg;
reg [31:0] fill_pixels_55_58;
reg [31:0] fill_pixels_55_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_59_reg;
reg [31:0] fill_pixels_55_60;
reg [31:0] fill_pixels_55_60_reg;
reg [31:0] fill_pixels_55_61;
reg [31:0] fill_pixels_55_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_62_reg;
reg [31:0] fill_pixels_55_63;
reg [31:0] fill_pixels_55_63_reg;
reg [31:0] fill_pixels_55_64;
reg [31:0] fill_pixels_55_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_55_65_reg;
reg [31:0] fill_pixels_55_66;
reg [31:0] fill_pixels_55_66_reg;
reg [31:0] fill_pixels_55_67;
reg [31:0] fill_pixels_55_67_reg;
reg [31:0] fill_pixels_55_68;
reg [31:0] fill_pixels_55_68_reg;
reg [31:0] fill_pixels_69_70;
reg [31:0] fill_pixels_69_70_reg;
reg [31:0] fill_pixels_69_71;
reg [31:0] fill_pixels_69_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_72_reg;
reg [31:0] fill_pixels_69_73;
reg [31:0] fill_pixels_69_73_reg;
reg [31:0] fill_pixels_69_74;
reg [31:0] fill_pixels_69_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_75_reg;
reg [31:0] fill_pixels_69_76;
reg [31:0] fill_pixels_69_76_reg;
reg [31:0] fill_pixels_69_77;
reg [31:0] fill_pixels_69_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_78_reg;
reg [31:0] fill_pixels_69_79;
reg [31:0] fill_pixels_69_79_reg;
reg [31:0] fill_pixels_69_80;
reg [31:0] fill_pixels_69_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_81_reg;
reg [31:0] fill_pixels_69_82;
reg [31:0] fill_pixels_69_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_83_reg;
reg [31:0] fill_pixels_69_84;
reg [31:0] fill_pixels_69_84_reg;
reg [31:0] fill_pixels_69_85;
reg [31:0] fill_pixels_69_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_86_reg;
reg [31:0] fill_pixels_69_87;
reg [31:0] fill_pixels_69_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_69_88_reg;
reg [31:0] fill_pixels_69_89;
reg [31:0] fill_pixels_69_89_reg;
reg [31:0] fill_pixels_69_90;
reg [31:0] fill_pixels_69_90_reg;
reg [31:0] fill_pixels_69_91;
reg [31:0] fill_pixels_69_91_reg;
reg  fill_pixels_69_92;
reg  fill_pixels_69_92_reg;
reg [31:0] fill_pixels_93_94;
reg [31:0] fill_pixels_93_94_reg;
reg  fill_pixels_93_95;
reg  fill_pixels_93_95_reg;
reg [31:0] fill_pixels_96_97;
reg [31:0] fill_pixels_96_97_reg;
reg [31:0] fill_pixels_96_98;
reg [31:0] fill_pixels_96_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_100_reg;
reg [31:0] fill_pixels_96_101;
reg [31:0] fill_pixels_96_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_102_reg;
reg [31:0] fill_pixels_96_103;
reg [31:0] fill_pixels_96_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_96_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_y0dst_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_y0dst_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_y1dst_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_y1dst_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_udst_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_udst_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_vdst_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_105_vdst_2_reg;
reg [31:0] fill_pixels_105_x_2;
reg [31:0] fill_pixels_105_x_2_reg;
reg [31:0] fill_pixels_105_y_2;
reg [31:0] fill_pixels_105_y_2_reg;
reg [31:0] fill_pixels_105_pos_0;
reg [31:0] fill_pixels_105_pos_0_reg;
reg [31:0] fill_pixels_106__0;
reg [31:0] fill_pixels_106__0_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 == 32'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 == 32'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_20;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 == 32'd2)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_37;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_7;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_8;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_12;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_12;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_13;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_13;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_14;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_14;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_15;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_15;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_16;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_16;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_17;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_17;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_18;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_18;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_19;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_8_19;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_20;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_21;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_21;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_22;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_22;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_23;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_23;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_24;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_24;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_25;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_25;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_26;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_31_26;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_30;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_43_27;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_43_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_43_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_43_27;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_43_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_43_27) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_43_45 == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_46_28;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_46_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_43_27) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_43_45 == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_106_61;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_106_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_46_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_46_28;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_46_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_46_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_46_29;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_46_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_46_29;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_46_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_30;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_30;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_31;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_31;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_32;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_32;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_33;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_33;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_34;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_34;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_35;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_35;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_36;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_55_36;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_55_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_37;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_38;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_38;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_39;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_39;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_40;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_40;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_41;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_42;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_43;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_44;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_44;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_45;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_45;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_46;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_46;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_47;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_47;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_48;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_48;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_93_50;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_93_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_93_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_93_50;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_93_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_93_50) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_93_95 == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_96_51;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_96_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_fill_pixels_BB_93_50) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_93_95 == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_106_61;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_106_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_96_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_96_51;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_96_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_96_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_96_52;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_96_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_96_52;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_96_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_53;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_54;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_54;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_55;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_55;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_56;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_56;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_57;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_57;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_58;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_58;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_59;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_59;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_60;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_105_60;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_105_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_105_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_106_61;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_106_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_106_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fill_pixels_BB_106_61;
if (reset == 1'b0 && ^(LEGUP_F_fill_pixels_BB_106_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fill_pixels_BB_106_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
begin
fill_pixels_0_1 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
fill_pixels_0_1_reg <= fill_pixels_0_1;
if (reset == 1'b0 && ^(fill_pixels_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_1_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
begin
fill_pixels_0_2 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
fill_pixels_0_2_reg <= fill_pixels_0_2;
if (reset == 1'b0 && ^(fill_pixels_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
begin
fill_pixels_0_3 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
fill_pixels_0_3_reg <= fill_pixels_0_3;
if (reset == 1'b0 && ^(fill_pixels_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
begin
fill_pixels_0_4 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
fill_pixels_0_4_reg <= fill_pixels_0_4;
if (reset == 1'b0 && ^(fill_pixels_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
begin
fill_pixels_0_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_5))
begin
fill_pixels_0_5_reg <= fill_pixels_0_5;
if (reset == 1'b0 && ^(fill_pixels_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_5_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
begin
fill_pixels_0_6 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_5))
begin
fill_pixels_0_6_reg <= fill_pixels_0_6;
if (reset == 1'b0 && ^(fill_pixels_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_6_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
begin
fill_pixels_0_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_6))
begin
fill_pixels_0_7_reg <= fill_pixels_0_7;
if (reset == 1'b0 && ^(fill_pixels_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_0_7_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
begin
fill_pixels_8_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
fill_pixels_8_9_reg <= fill_pixels_8_9;
if (reset == 1'b0 && ^(fill_pixels_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_9_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %10 = shl nsw i32 %5, 1*/
begin
fill_pixels_8_10 = (fill_pixels_0_5_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %10 = shl nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_10_reg <= fill_pixels_8_10;
if (reset == 1'b0 && ^(fill_pixels_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_10_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %11 = getelementptr inbounds i32* %1, i32 %10*/
begin
fill_pixels_8_11 = (fill_pixels_0_1_reg + (4 * fill_pixels_8_10));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %11 = getelementptr inbounds i32* %1, i32 %10*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_11_reg <= fill_pixels_8_11;
if (reset == 1'b0 && ^(fill_pixels_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_11_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
begin
fill_pixels_8_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
fill_pixels_8_12_reg <= fill_pixels_8_12;
if (reset == 1'b0 && ^(fill_pixels_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_12_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %13 = add nsw i32 %12, %9*/
begin
fill_pixels_8_13 = (fill_pixels_8_12 + fill_pixels_8_9);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %13 = add nsw i32 %12, %9*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
fill_pixels_8_13_reg <= fill_pixels_8_13;
if (reset == 1'b0 && ^(fill_pixels_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_13_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %14 = getelementptr inbounds i32* %fill, i32 1*/
begin
fill_pixels_8_14 = (arg_fill + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %14 = getelementptr inbounds i32* %fill, i32 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_14_reg <= fill_pixels_8_14;
if (reset == 1'b0 && ^(fill_pixels_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_14_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
begin
fill_pixels_8_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
fill_pixels_8_15_reg <= fill_pixels_8_15;
if (reset == 1'b0 && ^(fill_pixels_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_15_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %16 = or i32 %10, 1*/
begin
fill_pixels_8_16 = (fill_pixels_8_10 | 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %16 = or i32 %10, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_16_reg <= fill_pixels_8_16;
if (reset == 1'b0 && ^(fill_pixels_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_16_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %17 = getelementptr inbounds i32* %1, i32 %16*/
begin
fill_pixels_8_17 = (fill_pixels_0_1_reg + (4 * fill_pixels_8_16));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %17 = getelementptr inbounds i32* %1, i32 %16*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_17_reg <= fill_pixels_8_17;
if (reset == 1'b0 && ^(fill_pixels_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_17_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
begin
fill_pixels_8_18 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
fill_pixels_8_18_reg <= fill_pixels_8_18;
if (reset == 1'b0 && ^(fill_pixels_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_18_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %19 = add nsw i32 %18, %15*/
begin
fill_pixels_8_19 = (fill_pixels_8_18 + fill_pixels_8_15);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %19 = add nsw i32 %18, %15*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
fill_pixels_8_19_reg <= fill_pixels_8_19;
if (reset == 1'b0 && ^(fill_pixels_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_19_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %20 = getelementptr inbounds i32* %fill, i32 2*/
begin
fill_pixels_8_20 = (arg_fill + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %20 = getelementptr inbounds i32* %fill, i32 2*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_20_reg <= fill_pixels_8_20;
if (reset == 1'b0 && ^(fill_pixels_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_20_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
begin
fill_pixels_8_21 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
fill_pixels_8_21_reg <= fill_pixels_8_21;
if (reset == 1'b0 && ^(fill_pixels_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_21_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %22 = getelementptr inbounds i32* %2, i32 %10*/
begin
fill_pixels_8_22 = (fill_pixels_0_2_reg + (4 * fill_pixels_8_10));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %22 = getelementptr inbounds i32* %2, i32 %10*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_22_reg <= fill_pixels_8_22;
if (reset == 1'b0 && ^(fill_pixels_8_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_22_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
begin
fill_pixels_8_23 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
fill_pixels_8_23_reg <= fill_pixels_8_23;
if (reset == 1'b0 && ^(fill_pixels_8_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_23_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %24 = add nsw i32 %23, %21*/
begin
fill_pixels_8_24 = (fill_pixels_8_23 + fill_pixels_8_21);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %24 = add nsw i32 %23, %21*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
fill_pixels_8_24_reg <= fill_pixels_8_24;
if (reset == 1'b0 && ^(fill_pixels_8_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_24_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %25 = getelementptr inbounds i32* %fill, i32 3*/
begin
fill_pixels_8_25 = (arg_fill + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %25 = getelementptr inbounds i32* %fill, i32 3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_25_reg <= fill_pixels_8_25;
if (reset == 1'b0 && ^(fill_pixels_8_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_25_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
begin
fill_pixels_8_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
fill_pixels_8_26_reg <= fill_pixels_8_26;
if (reset == 1'b0 && ^(fill_pixels_8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_26_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %27 = getelementptr inbounds i32* %2, i32 %16*/
begin
fill_pixels_8_27 = (fill_pixels_0_2_reg + (4 * fill_pixels_8_16));
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %27 = getelementptr inbounds i32* %2, i32 %16*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_27_reg <= fill_pixels_8_27;
if (reset == 1'b0 && ^(fill_pixels_8_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_27_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
begin
fill_pixels_8_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
fill_pixels_8_28_reg <= fill_pixels_8_28;
if (reset == 1'b0 && ^(fill_pixels_8_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_28_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %29 = add nsw i32 %28, %26*/
begin
fill_pixels_8_29 = (fill_pixels_8_28 + fill_pixels_8_26);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %29 = add nsw i32 %28, %26*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
fill_pixels_8_29_reg <= fill_pixels_8_29;
if (reset == 1'b0 && ^(fill_pixels_8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_29_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %8*/
/*   %30 = add nsw i32 %7, 1*/
begin
fill_pixels_8_30 = (fill_pixels_0_7_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %8*/
/*   %30 = add nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
fill_pixels_8_30_reg <= fill_pixels_8_30;
if (reset == 1'b0 && ^(fill_pixels_8_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_8_30_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
begin
fill_pixels_31_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
fill_pixels_31_32_reg <= fill_pixels_31_32;
if (reset == 1'b0 && ^(fill_pixels_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_32_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %33 = getelementptr inbounds i32* %3, i32 %5*/
begin
fill_pixels_31_33 = (fill_pixels_0_3_reg + (4 * fill_pixels_0_5_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %33 = getelementptr inbounds i32* %3, i32 %5*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
fill_pixels_31_33_reg <= fill_pixels_31_33;
if (reset == 1'b0 && ^(fill_pixels_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_33_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
begin
fill_pixels_31_34 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
fill_pixels_31_34_reg <= fill_pixels_31_34;
if (reset == 1'b0 && ^(fill_pixels_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_34_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %35 = add nsw i32 %34, %32*/
begin
fill_pixels_31_35 = (fill_pixels_31_34 + fill_pixels_31_32);
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %35 = add nsw i32 %34, %32*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
fill_pixels_31_35_reg <= fill_pixels_31_35;
if (reset == 1'b0 && ^(fill_pixels_31_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_35_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %36 = getelementptr inbounds i32* %fill, i32 1*/
begin
fill_pixels_31_36 = (arg_fill + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %36 = getelementptr inbounds i32* %fill, i32 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
fill_pixels_31_36_reg <= fill_pixels_31_36;
if (reset == 1'b0 && ^(fill_pixels_31_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_36_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
begin
fill_pixels_31_37 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
fill_pixels_31_37_reg <= fill_pixels_31_37;
if (reset == 1'b0 && ^(fill_pixels_31_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_37_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %38 = getelementptr inbounds i32* %4, i32 %5*/
begin
fill_pixels_31_38 = (fill_pixels_0_4_reg + (4 * fill_pixels_0_5_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %38 = getelementptr inbounds i32* %4, i32 %5*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
fill_pixels_31_38_reg <= fill_pixels_31_38;
if (reset == 1'b0 && ^(fill_pixels_31_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_38_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
begin
fill_pixels_31_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
fill_pixels_31_39_reg <= fill_pixels_31_39;
if (reset == 1'b0 && ^(fill_pixels_31_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_39_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %40 = add nsw i32 %39, %37*/
begin
fill_pixels_31_40 = (fill_pixels_31_39 + fill_pixels_31_37);
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %40 = add nsw i32 %39, %37*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
fill_pixels_31_40_reg <= fill_pixels_31_40;
if (reset == 1'b0 && ^(fill_pixels_31_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_40_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %41 = add nsw i32 %5, 1*/
begin
fill_pixels_31_41 = (fill_pixels_0_5_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %41 = add nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
fill_pixels_31_41_reg <= fill_pixels_31_41;
if (reset == 1'b0 && ^(fill_pixels_31_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_41_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %31*/
/*   %42 = icmp slt i32 %41, %w*/
begin
fill_pixels_31_42 = ($signed(fill_pixels_31_41) < $signed(arg_w));
end
end
always @(posedge clk) begin
/* fill_pixels: %31*/
/*   %42 = icmp slt i32 %41, %w*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
fill_pixels_31_42_reg <= fill_pixels_31_42;
if (reset == 1'b0 && ^(fill_pixels_31_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_31_42_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %43*/
/*   %44 = add nsw i32 %6, 1*/
begin
fill_pixels_43_44 = (fill_pixels_0_6_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %43*/
/*   %44 = add nsw i32 %6, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_43_27))
begin
fill_pixels_43_44_reg <= fill_pixels_43_44;
if (reset == 1'b0 && ^(fill_pixels_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_43_44_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %43*/
/*   %45 = icmp slt i32 %44, %h*/
begin
fill_pixels_43_45 = ($signed(fill_pixels_43_44) < $signed(arg_h));
end
end
always @(posedge clk) begin
/* fill_pixels: %43*/
/*   %45 = icmp slt i32 %44, %h*/
if ((cur_state == LEGUP_F_fill_pixels_BB_43_27))
begin
fill_pixels_43_45_reg <= fill_pixels_43_45;
if (reset == 1'b0 && ^(fill_pixels_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_43_45_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %47 = shl nsw i32 %ylinesize, 1*/
begin
fill_pixels_46_47 = (arg_ylinesize <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %47 = shl nsw i32 %ylinesize, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_28))
begin
fill_pixels_46_47_reg <= fill_pixels_46_47;
if (reset == 1'b0 && ^(fill_pixels_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_47_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %48 = sub i32 0, %47*/
begin
fill_pixels_46_48 = (32'd0 - fill_pixels_46_47);
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %48 = sub i32 0, %47*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_28))
begin
fill_pixels_46_48_reg <= fill_pixels_46_48;
if (reset == 1'b0 && ^(fill_pixels_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_48_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %49 = getelementptr inbounds i32* %1, i32 %48*/
begin
fill_pixels_46_49 = (fill_pixels_0_1_reg + (4 * fill_pixels_46_48_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %49 = getelementptr inbounds i32* %1, i32 %48*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_29))
begin
fill_pixels_46_49_reg <= fill_pixels_46_49;
if (reset == 1'b0 && ^(fill_pixels_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_49_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %50 = getelementptr inbounds i32* %2, i32 %48*/
begin
fill_pixels_46_50 = (fill_pixels_0_2_reg + (4 * fill_pixels_46_48_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %50 = getelementptr inbounds i32* %2, i32 %48*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_29))
begin
fill_pixels_46_50_reg <= fill_pixels_46_50;
if (reset == 1'b0 && ^(fill_pixels_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_50_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %51 = sub i32 0, %ulinesize*/
begin
fill_pixels_46_51 = (32'd0 - arg_ulinesize);
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %51 = sub i32 0, %ulinesize*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_28))
begin
fill_pixels_46_51_reg <= fill_pixels_46_51;
if (reset == 1'b0 && ^(fill_pixels_46_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_51_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %52 = getelementptr inbounds i32* %3, i32 %51*/
begin
fill_pixels_46_52 = (fill_pixels_0_3_reg + (4 * fill_pixels_46_51_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %52 = getelementptr inbounds i32* %3, i32 %51*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_29))
begin
fill_pixels_46_52_reg <= fill_pixels_46_52;
if (reset == 1'b0 && ^(fill_pixels_46_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_52_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %53 = sub i32 0, %vlinesize*/
begin
fill_pixels_46_53 = (32'd0 - arg_vlinesize);
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %53 = sub i32 0, %vlinesize*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_28))
begin
fill_pixels_46_53_reg <= fill_pixels_46_53;
if (reset == 1'b0 && ^(fill_pixels_46_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_53_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %46*/
/*   %54 = getelementptr inbounds i32* %4, i32 %53*/
begin
fill_pixels_46_54 = (fill_pixels_0_4_reg + (4 * fill_pixels_46_53_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %46*/
/*   %54 = getelementptr inbounds i32* %4, i32 %53*/
if ((cur_state == LEGUP_F_fill_pixels_BB_46_29))
begin
fill_pixels_46_54_reg <= fill_pixels_46_54;
if (reset == 1'b0 && ^(fill_pixels_46_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_46_54_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %y0dst.0 = phi i32* [ %49, %46 ], [ %1, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y0dst_0 = fill_pixels_0_1_reg;
end
/* fill_pixels: %55*/
/*   %y0dst.0 = phi i32* [ %49, %46 ], [ %1, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_y0dst_0 = fill_pixels_46_49;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %y0dst.0 = phi i32* [ %49, %46 ], [ %1, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y0dst_0_reg <= fill_pixels_55_y0dst_0;
if (reset == 1'b0 && ^(fill_pixels_55_y0dst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y0dst_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %y0dst.0 = phi i32* [ %49, %46 ], [ %1, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_y0dst_0_reg <= fill_pixels_55_y0dst_0;
if (reset == 1'b0 && ^(fill_pixels_55_y0dst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y0dst_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %y1dst.0 = phi i32* [ %50, %46 ], [ %2, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y1dst_0 = fill_pixels_0_2_reg;
end
/* fill_pixels: %55*/
/*   %y1dst.0 = phi i32* [ %50, %46 ], [ %2, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_y1dst_0 = fill_pixels_46_50;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %y1dst.0 = phi i32* [ %50, %46 ], [ %2, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y1dst_0_reg <= fill_pixels_55_y1dst_0;
if (reset == 1'b0 && ^(fill_pixels_55_y1dst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y1dst_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %y1dst.0 = phi i32* [ %50, %46 ], [ %2, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_y1dst_0_reg <= fill_pixels_55_y1dst_0;
if (reset == 1'b0 && ^(fill_pixels_55_y1dst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y1dst_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %udst.0 = phi i32* [ %52, %46 ], [ %3, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_udst_0 = fill_pixels_0_3_reg;
end
/* fill_pixels: %55*/
/*   %udst.0 = phi i32* [ %52, %46 ], [ %3, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_udst_0 = fill_pixels_46_52;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %udst.0 = phi i32* [ %52, %46 ], [ %3, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_udst_0_reg <= fill_pixels_55_udst_0;
if (reset == 1'b0 && ^(fill_pixels_55_udst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_udst_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %udst.0 = phi i32* [ %52, %46 ], [ %3, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_udst_0_reg <= fill_pixels_55_udst_0;
if (reset == 1'b0 && ^(fill_pixels_55_udst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_udst_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %vdst.0 = phi i32* [ %54, %46 ], [ %4, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_vdst_0 = fill_pixels_0_4_reg;
end
/* fill_pixels: %55*/
/*   %vdst.0 = phi i32* [ %54, %46 ], [ %4, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_vdst_0 = fill_pixels_46_54;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %vdst.0 = phi i32* [ %54, %46 ], [ %4, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_vdst_0_reg <= fill_pixels_55_vdst_0;
if (reset == 1'b0 && ^(fill_pixels_55_vdst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_vdst_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %vdst.0 = phi i32* [ %54, %46 ], [ %4, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_vdst_0_reg <= fill_pixels_55_vdst_0;
if (reset == 1'b0 && ^(fill_pixels_55_vdst_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_vdst_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %x.0 = phi i32 [ 0, %46 ], [ %41, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_x_0 = fill_pixels_31_41_reg;
end
/* fill_pixels: %55*/
/*   %x.0 = phi i32 [ 0, %46 ], [ %41, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_x_0 = 32'd0;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %x.0 = phi i32 [ 0, %46 ], [ %41, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_x_0_reg <= fill_pixels_55_x_0;
if (reset == 1'b0 && ^(fill_pixels_55_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_x_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %x.0 = phi i32 [ 0, %46 ], [ %41, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_x_0_reg <= fill_pixels_55_x_0;
if (reset == 1'b0 && ^(fill_pixels_55_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_x_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %y.0 = phi i32 [ %44, %46 ], [ %6, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y_0 = fill_pixels_0_6_reg;
end
/* fill_pixels: %55*/
/*   %y.0 = phi i32 [ %44, %46 ], [ %6, %31 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_55_y_0 = fill_pixels_43_44_reg;
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %y.0 = phi i32 [ %44, %46 ], [ %6, %31 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_31_42_reg == 1'd1)))
begin
fill_pixels_55_y_0_reg <= fill_pixels_55_y_0;
if (reset == 1'b0 && ^(fill_pixels_55_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y_0_reg"); $finish; end
end
/* fill_pixels: %55*/
/*   %y.0 = phi i32 [ %44, %46 ], [ %6, %31 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_46_29) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_55_y_0_reg <= fill_pixels_55_y_0;
if (reset == 1'b0 && ^(fill_pixels_55_y_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_y_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %56 = getelementptr inbounds i32* %fill, i32 2*/
begin
fill_pixels_55_56 = (arg_fill + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %56 = getelementptr inbounds i32* %fill, i32 2*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_56_reg <= fill_pixels_55_56;
if (reset == 1'b0 && ^(fill_pixels_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_56_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
begin
fill_pixels_55_57 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
fill_pixels_55_57_reg <= fill_pixels_55_57;
if (reset == 1'b0 && ^(fill_pixels_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_57_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %58 = shl nsw i32 %x.0, 1*/
begin
fill_pixels_55_58 = (fill_pixels_55_x_0_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %58 = shl nsw i32 %x.0, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_58_reg <= fill_pixels_55_58;
if (reset == 1'b0 && ^(fill_pixels_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_58_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %59 = getelementptr inbounds i32* %y0dst.0, i32 %58*/
begin
fill_pixels_55_59 = (fill_pixels_55_y0dst_0_reg + (4 * fill_pixels_55_58));
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %59 = getelementptr inbounds i32* %y0dst.0, i32 %58*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_59_reg <= fill_pixels_55_59;
if (reset == 1'b0 && ^(fill_pixels_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_59_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
begin
fill_pixels_55_60 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
fill_pixels_55_60_reg <= fill_pixels_55_60;
if (reset == 1'b0 && ^(fill_pixels_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_60_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %61 = add nsw i32 %60, %57*/
begin
fill_pixels_55_61 = (fill_pixels_55_60 + fill_pixels_55_57);
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %61 = add nsw i32 %60, %57*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
fill_pixels_55_61_reg <= fill_pixels_55_61;
if (reset == 1'b0 && ^(fill_pixels_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_61_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %62 = getelementptr inbounds i32* %fill, i32 3*/
begin
fill_pixels_55_62 = (arg_fill + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %62 = getelementptr inbounds i32* %fill, i32 3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_62_reg <= fill_pixels_55_62;
if (reset == 1'b0 && ^(fill_pixels_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_62_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
begin
fill_pixels_55_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
fill_pixels_55_63_reg <= fill_pixels_55_63;
if (reset == 1'b0 && ^(fill_pixels_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_63_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %64 = or i32 %58, 1*/
begin
fill_pixels_55_64 = (fill_pixels_55_58 | 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %64 = or i32 %58, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_64_reg <= fill_pixels_55_64;
if (reset == 1'b0 && ^(fill_pixels_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_64_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %65 = getelementptr inbounds i32* %y0dst.0, i32 %64*/
begin
fill_pixels_55_65 = (fill_pixels_55_y0dst_0_reg + (4 * fill_pixels_55_64));
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %65 = getelementptr inbounds i32* %y0dst.0, i32 %64*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_65_reg <= fill_pixels_55_65;
if (reset == 1'b0 && ^(fill_pixels_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_65_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
begin
fill_pixels_55_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
fill_pixels_55_66_reg <= fill_pixels_55_66;
if (reset == 1'b0 && ^(fill_pixels_55_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_66_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %67 = add nsw i32 %66, %63*/
begin
fill_pixels_55_67 = (fill_pixels_55_66 + fill_pixels_55_63);
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %67 = add nsw i32 %66, %63*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
fill_pixels_55_67_reg <= fill_pixels_55_67;
if (reset == 1'b0 && ^(fill_pixels_55_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_67_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %55*/
/*   %68 = add nsw i32 %7, 1*/
begin
fill_pixels_55_68 = (fill_pixels_0_7_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %55*/
/*   %68 = add nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
fill_pixels_55_68_reg <= fill_pixels_55_68;
if (reset == 1'b0 && ^(fill_pixels_55_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_55_68_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
begin
fill_pixels_69_70 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
fill_pixels_69_70_reg <= fill_pixels_69_70;
if (reset == 1'b0 && ^(fill_pixels_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_70_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %71 = shl nsw i32 %5, 1*/
begin
fill_pixels_69_71 = (fill_pixels_0_5_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %71 = shl nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_71_reg <= fill_pixels_69_71;
if (reset == 1'b0 && ^(fill_pixels_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_71_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %72 = getelementptr inbounds i32* %2, i32 %71*/
begin
fill_pixels_69_72 = (fill_pixels_0_2_reg + (4 * fill_pixels_69_71));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %72 = getelementptr inbounds i32* %2, i32 %71*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_72_reg <= fill_pixels_69_72;
if (reset == 1'b0 && ^(fill_pixels_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_72_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
begin
fill_pixels_69_73 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
fill_pixels_69_73_reg <= fill_pixels_69_73;
if (reset == 1'b0 && ^(fill_pixels_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_73_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %74 = add nsw i32 %73, %70*/
begin
fill_pixels_69_74 = (fill_pixels_69_73 + fill_pixels_69_70);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %74 = add nsw i32 %73, %70*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
fill_pixels_69_74_reg <= fill_pixels_69_74;
if (reset == 1'b0 && ^(fill_pixels_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_74_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %75 = getelementptr inbounds i32* %fill, i32 1*/
begin
fill_pixels_69_75 = (arg_fill + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %75 = getelementptr inbounds i32* %fill, i32 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_75_reg <= fill_pixels_69_75;
if (reset == 1'b0 && ^(fill_pixels_69_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_75_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
begin
fill_pixels_69_76 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
fill_pixels_69_76_reg <= fill_pixels_69_76;
if (reset == 1'b0 && ^(fill_pixels_69_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_76_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %77 = or i32 %71, 1*/
begin
fill_pixels_69_77 = (fill_pixels_69_71 | 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %77 = or i32 %71, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_77_reg <= fill_pixels_69_77;
if (reset == 1'b0 && ^(fill_pixels_69_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_77_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %78 = getelementptr inbounds i32* %2, i32 %77*/
begin
fill_pixels_69_78 = (fill_pixels_0_2_reg + (4 * fill_pixels_69_77));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %78 = getelementptr inbounds i32* %2, i32 %77*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_78_reg <= fill_pixels_69_78;
if (reset == 1'b0 && ^(fill_pixels_69_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_78_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
begin
fill_pixels_69_79 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
fill_pixels_69_79_reg <= fill_pixels_69_79;
if (reset == 1'b0 && ^(fill_pixels_69_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_79_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %80 = add nsw i32 %79, %76*/
begin
fill_pixels_69_80 = (fill_pixels_69_79 + fill_pixels_69_76);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %80 = add nsw i32 %79, %76*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
fill_pixels_69_80_reg <= fill_pixels_69_80;
if (reset == 1'b0 && ^(fill_pixels_69_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_80_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %81 = getelementptr inbounds i32* %fill, i32 2*/
begin
fill_pixels_69_81 = (arg_fill + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %81 = getelementptr inbounds i32* %fill, i32 2*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_81_reg <= fill_pixels_69_81;
if (reset == 1'b0 && ^(fill_pixels_69_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_81_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
begin
fill_pixels_69_82 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
fill_pixels_69_82_reg <= fill_pixels_69_82;
if (reset == 1'b0 && ^(fill_pixels_69_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_82_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %83 = getelementptr inbounds i32* %3, i32 %5*/
begin
fill_pixels_69_83 = (fill_pixels_0_3_reg + (4 * fill_pixels_0_5_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %83 = getelementptr inbounds i32* %3, i32 %5*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_83_reg <= fill_pixels_69_83;
if (reset == 1'b0 && ^(fill_pixels_69_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_83_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
begin
fill_pixels_69_84 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
fill_pixels_69_84_reg <= fill_pixels_69_84;
if (reset == 1'b0 && ^(fill_pixels_69_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_84_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %85 = add nsw i32 %84, %82*/
begin
fill_pixels_69_85 = (fill_pixels_69_84 + fill_pixels_69_82);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %85 = add nsw i32 %84, %82*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
fill_pixels_69_85_reg <= fill_pixels_69_85;
if (reset == 1'b0 && ^(fill_pixels_69_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_85_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %86 = getelementptr inbounds i32* %fill, i32 3*/
begin
fill_pixels_69_86 = (arg_fill + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %86 = getelementptr inbounds i32* %fill, i32 3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_86_reg <= fill_pixels_69_86;
if (reset == 1'b0 && ^(fill_pixels_69_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_86_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
begin
fill_pixels_69_87 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
fill_pixels_69_87_reg <= fill_pixels_69_87;
if (reset == 1'b0 && ^(fill_pixels_69_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_87_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %88 = getelementptr inbounds i32* %4, i32 %5*/
begin
fill_pixels_69_88 = (fill_pixels_0_4_reg + (4 * fill_pixels_0_5_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %88 = getelementptr inbounds i32* %4, i32 %5*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_88_reg <= fill_pixels_69_88;
if (reset == 1'b0 && ^(fill_pixels_69_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_88_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
begin
fill_pixels_69_89 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
fill_pixels_69_89_reg <= fill_pixels_69_89;
if (reset == 1'b0 && ^(fill_pixels_69_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_89_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %90 = add nsw i32 %89, %87*/
begin
fill_pixels_69_90 = (fill_pixels_69_89 + fill_pixels_69_87);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %90 = add nsw i32 %89, %87*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
fill_pixels_69_90_reg <= fill_pixels_69_90;
if (reset == 1'b0 && ^(fill_pixels_69_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_90_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %91 = add nsw i32 %5, 1*/
begin
fill_pixels_69_91 = (fill_pixels_0_5_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %91 = add nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_91_reg <= fill_pixels_69_91;
if (reset == 1'b0 && ^(fill_pixels_69_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_91_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %69*/
/*   %92 = icmp slt i32 %91, %w*/
begin
fill_pixels_69_92 = ($signed(fill_pixels_69_91) < $signed(arg_w));
end
end
always @(posedge clk) begin
/* fill_pixels: %69*/
/*   %92 = icmp slt i32 %91, %w*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
fill_pixels_69_92_reg <= fill_pixels_69_92;
if (reset == 1'b0 && ^(fill_pixels_69_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_69_92_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %93*/
/*   %94 = add nsw i32 %6, 1*/
begin
fill_pixels_93_94 = (fill_pixels_0_6_reg + 32'd1);
end
end
always @(posedge clk) begin
/* fill_pixels: %93*/
/*   %94 = add nsw i32 %6, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_93_50))
begin
fill_pixels_93_94_reg <= fill_pixels_93_94;
if (reset == 1'b0 && ^(fill_pixels_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_93_94_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %93*/
/*   %95 = icmp slt i32 %94, %h*/
begin
fill_pixels_93_95 = ($signed(fill_pixels_93_94) < $signed(arg_h));
end
end
always @(posedge clk) begin
/* fill_pixels: %93*/
/*   %95 = icmp slt i32 %94, %h*/
if ((cur_state == LEGUP_F_fill_pixels_BB_93_50))
begin
fill_pixels_93_95_reg <= fill_pixels_93_95;
if (reset == 1'b0 && ^(fill_pixels_93_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_93_95_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %97 = shl nsw i32 %ylinesize, 1*/
begin
fill_pixels_96_97 = (arg_ylinesize <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %97 = shl nsw i32 %ylinesize, 1*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_51))
begin
fill_pixels_96_97_reg <= fill_pixels_96_97;
if (reset == 1'b0 && ^(fill_pixels_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_97_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %98 = sub i32 0, %97*/
begin
fill_pixels_96_98 = (32'd0 - fill_pixels_96_97);
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %98 = sub i32 0, %97*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_51))
begin
fill_pixels_96_98_reg <= fill_pixels_96_98;
if (reset == 1'b0 && ^(fill_pixels_96_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_98_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %99 = getelementptr inbounds i32* %1, i32 %98*/
begin
fill_pixels_96_99 = (fill_pixels_0_1_reg + (4 * fill_pixels_96_98_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %99 = getelementptr inbounds i32* %1, i32 %98*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_52))
begin
fill_pixels_96_99_reg <= fill_pixels_96_99;
if (reset == 1'b0 && ^(fill_pixels_96_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_99_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %100 = getelementptr inbounds i32* %2, i32 %98*/
begin
fill_pixels_96_100 = (fill_pixels_0_2_reg + (4 * fill_pixels_96_98_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %100 = getelementptr inbounds i32* %2, i32 %98*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_52))
begin
fill_pixels_96_100_reg <= fill_pixels_96_100;
if (reset == 1'b0 && ^(fill_pixels_96_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_100_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %101 = sub i32 0, %ulinesize*/
begin
fill_pixels_96_101 = (32'd0 - arg_ulinesize);
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %101 = sub i32 0, %ulinesize*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_51))
begin
fill_pixels_96_101_reg <= fill_pixels_96_101;
if (reset == 1'b0 && ^(fill_pixels_96_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_101_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %102 = getelementptr inbounds i32* %3, i32 %101*/
begin
fill_pixels_96_102 = (fill_pixels_0_3_reg + (4 * fill_pixels_96_101_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %102 = getelementptr inbounds i32* %3, i32 %101*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_52))
begin
fill_pixels_96_102_reg <= fill_pixels_96_102;
if (reset == 1'b0 && ^(fill_pixels_96_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_102_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %103 = sub i32 0, %vlinesize*/
begin
fill_pixels_96_103 = (32'd0 - arg_vlinesize);
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %103 = sub i32 0, %vlinesize*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_51))
begin
fill_pixels_96_103_reg <= fill_pixels_96_103;
if (reset == 1'b0 && ^(fill_pixels_96_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_103_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %96*/
/*   %104 = getelementptr inbounds i32* %4, i32 %103*/
begin
fill_pixels_96_104 = (fill_pixels_0_4_reg + (4 * fill_pixels_96_103_reg));
end
end
always @(posedge clk) begin
/* fill_pixels: %96*/
/*   %104 = getelementptr inbounds i32* %4, i32 %103*/
if ((cur_state == LEGUP_F_fill_pixels_BB_96_52))
begin
fill_pixels_96_104_reg <= fill_pixels_96_104;
if (reset == 1'b0 && ^(fill_pixels_96_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_96_104_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y0dst_2 = fill_pixels_0_1_reg;
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y0dst_2 = fill_pixels_0_1_reg;
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y0dst_2 = fill_pixels_55_y0dst_0_reg;
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y0dst_2 = fill_pixels_0_1_reg;
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_y0dst_2 = fill_pixels_96_99;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y0dst_2_reg <= fill_pixels_105_y0dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y0dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y0dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y0dst_2_reg <= fill_pixels_105_y0dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y0dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y0dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y0dst_2_reg <= fill_pixels_105_y0dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y0dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y0dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y0dst_2_reg <= fill_pixels_105_y0dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y0dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y0dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y0dst.2 = phi i32* [ %1, %8 ], [ %y0dst.0, %55 ], [ %1, %0 ], [ %99, %96 ], [ %1, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y0dst_2_reg <= fill_pixels_105_y0dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y0dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y0dst_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y1dst_2 = fill_pixels_0_2_reg;
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y1dst_2 = fill_pixels_0_2_reg;
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y1dst_2 = fill_pixels_55_y1dst_0_reg;
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y1dst_2 = fill_pixels_0_2_reg;
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_y1dst_2 = fill_pixels_96_100;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y1dst_2_reg <= fill_pixels_105_y1dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y1dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y1dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y1dst_2_reg <= fill_pixels_105_y1dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y1dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y1dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y1dst_2_reg <= fill_pixels_105_y1dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y1dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y1dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y1dst_2_reg <= fill_pixels_105_y1dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y1dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y1dst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y1dst.2 = phi i32* [ %2, %8 ], [ %y1dst.0, %55 ], [ %2, %0 ], [ %100, %96 ], [ %2, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y1dst_2_reg <= fill_pixels_105_y1dst_2;
if (reset == 1'b0 && ^(fill_pixels_105_y1dst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y1dst_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_udst_2 = fill_pixels_0_3_reg;
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_udst_2 = fill_pixels_0_3_reg;
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_udst_2 = fill_pixels_55_udst_0_reg;
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_udst_2 = fill_pixels_0_3_reg;
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_udst_2 = fill_pixels_96_102;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_udst_2_reg <= fill_pixels_105_udst_2;
if (reset == 1'b0 && ^(fill_pixels_105_udst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_udst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_udst_2_reg <= fill_pixels_105_udst_2;
if (reset == 1'b0 && ^(fill_pixels_105_udst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_udst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_udst_2_reg <= fill_pixels_105_udst_2;
if (reset == 1'b0 && ^(fill_pixels_105_udst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_udst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_udst_2_reg <= fill_pixels_105_udst_2;
if (reset == 1'b0 && ^(fill_pixels_105_udst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_udst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %udst.2 = phi i32* [ %3, %8 ], [ %udst.0, %55 ], [ %3, %0 ], [ %102, %96 ], [ %3, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_udst_2_reg <= fill_pixels_105_udst_2;
if (reset == 1'b0 && ^(fill_pixels_105_udst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_udst_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_vdst_2 = fill_pixels_0_4_reg;
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_vdst_2 = fill_pixels_0_4_reg;
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_vdst_2 = fill_pixels_55_vdst_0_reg;
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_vdst_2 = fill_pixels_0_4_reg;
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_vdst_2 = fill_pixels_96_104;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_vdst_2_reg <= fill_pixels_105_vdst_2;
if (reset == 1'b0 && ^(fill_pixels_105_vdst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_vdst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_vdst_2_reg <= fill_pixels_105_vdst_2;
if (reset == 1'b0 && ^(fill_pixels_105_vdst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_vdst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_vdst_2_reg <= fill_pixels_105_vdst_2;
if (reset == 1'b0 && ^(fill_pixels_105_vdst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_vdst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_vdst_2_reg <= fill_pixels_105_vdst_2;
if (reset == 1'b0 && ^(fill_pixels_105_vdst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_vdst_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %vdst.2 = phi i32* [ %4, %8 ], [ %vdst.0, %55 ], [ %4, %0 ], [ %104, %96 ], [ %4, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_vdst_2_reg <= fill_pixels_105_vdst_2;
if (reset == 1'b0 && ^(fill_pixels_105_vdst_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_vdst_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_x_2 = fill_pixels_0_5_reg;
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_x_2 = fill_pixels_0_5_reg;
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_x_2 = fill_pixels_55_x_0_reg;
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_x_2 = fill_pixels_69_91_reg;
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_x_2 = 32'd0;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_x_2_reg <= fill_pixels_105_x_2;
if (reset == 1'b0 && ^(fill_pixels_105_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_x_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_x_2_reg <= fill_pixels_105_x_2;
if (reset == 1'b0 && ^(fill_pixels_105_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_x_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_x_2_reg <= fill_pixels_105_x_2;
if (reset == 1'b0 && ^(fill_pixels_105_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_x_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_x_2_reg <= fill_pixels_105_x_2;
if (reset == 1'b0 && ^(fill_pixels_105_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_x_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %x.2 = phi i32 [ %5, %8 ], [ %x.0, %55 ], [ %5, %0 ], [ 0, %96 ], [ %91, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_x_2_reg <= fill_pixels_105_x_2;
if (reset == 1'b0 && ^(fill_pixels_105_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_x_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y_2 = fill_pixels_0_6_reg;
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y_2 = fill_pixels_0_6_reg;
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y_2 = fill_pixels_55_y_0_reg;
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y_2 = fill_pixels_0_6_reg;
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_y_2 = fill_pixels_93_94_reg;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_y_2_reg <= fill_pixels_105_y_2;
if (reset == 1'b0 && ^(fill_pixels_105_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y_2_reg <= fill_pixels_105_y_2;
if (reset == 1'b0 && ^(fill_pixels_105_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y_2_reg <= fill_pixels_105_y_2;
if (reset == 1'b0 && ^(fill_pixels_105_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_y_2_reg <= fill_pixels_105_y_2;
if (reset == 1'b0 && ^(fill_pixels_105_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y_2_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %y.2 = phi i32 [ %6, %8 ], [ %y.0, %55 ], [ %6, %0 ], [ %94, %96 ], [ %6, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_y_2_reg <= fill_pixels_105_y_2;
if (reset == 1'b0 && ^(fill_pixels_105_y_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_y_2_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_pos_0 = fill_pixels_0_7;
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_pos_0 = fill_pixels_8_30_reg;
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
else if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_pos_0 = fill_pixels_55_68_reg;
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_pos_0 = 32'd0;
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_105_pos_0 = 32'd0;
end
end
always @(posedge clk) begin
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if ((((((cur_state == LEGUP_F_fill_pixels_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_0_7 != 32'd0)) & (fill_pixels_0_7 != 32'd1)) & (fill_pixels_0_7 != 32'd2)))
begin
fill_pixels_105_pos_0_reg <= fill_pixels_105_pos_0;
if (reset == 1'b0 && ^(fill_pixels_105_pos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_pos_0_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_8_19) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_pos_0_reg <= fill_pixels_105_pos_0;
if (reset == 1'b0 && ^(fill_pixels_105_pos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_pos_0_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_55_36) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_pos_0_reg <= fill_pixels_105_pos_0;
if (reset == 1'b0 && ^(fill_pixels_105_pos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_pos_0_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_69_92_reg == 1'd1)))
begin
fill_pixels_105_pos_0_reg <= fill_pixels_105_pos_0;
if (reset == 1'b0 && ^(fill_pixels_105_pos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_pos_0_reg"); $finish; end
end
/* fill_pixels: %105*/
/*   %pos.0 = phi i32 [ %30, %8 ], [ %68, %55 ], [ %7, %0 ], [ 0, %96 ], [ 0, %69 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_96_52) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_105_pos_0_reg <= fill_pixels_105_pos_0;
if (reset == 1'b0 && ^(fill_pixels_105_pos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_105_pos_0_reg"); $finish; end
end
end
always @(*) begin
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_43_27) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_43_45 == 1'd0)))
begin
fill_pixels_106__0 = 32'd1;
end
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
else if ((((cur_state == LEGUP_F_fill_pixels_BB_93_50) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_93_95 == 1'd0)))
begin
fill_pixels_106__0 = 32'd1;
end
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
else /* if (((cur_state == LEGUP_F_fill_pixels_BB_105_60) & (memory_controller_waitrequest == 1'd0))) */
begin
fill_pixels_106__0 = 32'd0;
end
end
always @(posedge clk) begin
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_43_27) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_43_45 == 1'd0)))
begin
fill_pixels_106__0_reg <= fill_pixels_106__0;
if (reset == 1'b0 && ^(fill_pixels_106__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_106__0_reg"); $finish; end
end
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
if ((((cur_state == LEGUP_F_fill_pixels_BB_93_50) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_93_95 == 1'd0)))
begin
fill_pixels_106__0_reg <= fill_pixels_106__0;
if (reset == 1'b0 && ^(fill_pixels_106__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_106__0_reg"); $finish; end
end
/* fill_pixels: %106*/
/*   %.0 = phi i32 [ 0, %105 ], [ 1, %43 ], [ 1, %93 ]*/
if (((cur_state == LEGUP_F_fill_pixels_BB_105_60) & (memory_controller_waitrequest == 1'd0)))
begin
fill_pixels_106__0_reg <= fill_pixels_106__0;
if (reset == 1'b0 && ^(fill_pixels_106__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_106__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fill_pixels: %106*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_106_61))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   store i32 %74, i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %y0dst.2, i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_53))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %y1dst.2, i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_54))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %udst.2, i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_55))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %vdst.2, i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_56))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %pos.0, i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_57))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %x.2, i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_58))
begin
memory_controller_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %y.2, i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_59))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_address_a = arg_y0;
end
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_address_a = arg_u;
end
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_address_a = arg_nx;
end
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
memory_controller_address_a = arg_np;
end
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_address_a = arg_fill;
end
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_address_a = fill_pixels_8_14_reg;
end
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_address_a = fill_pixels_8_20_reg;
end
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_address_a = fill_pixels_8_25_reg;
end
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_address_a = arg_fill;
end
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_address_a = fill_pixels_31_36_reg;
end
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_address_a = fill_pixels_55_56;
end
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_address_a = fill_pixels_55_62_reg;
end
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_address_a = arg_fill;
end
/* fill_pixels: %69*/
/*   store i32 %74, i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
memory_controller_address_a = fill_pixels_69_72_reg;
end
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_address_a = fill_pixels_69_75_reg;
end
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_address_a = fill_pixels_69_81_reg;
end
/* fill_pixels: %69*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
memory_controller_address_a = fill_pixels_69_83_reg;
end
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_address_a = fill_pixels_69_86_reg;
end
/* fill_pixels: %105*/
/*   store i32* %y0dst.2, i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_53))
begin
memory_controller_address_a = arg_y0;
end
/* fill_pixels: %105*/
/*   store i32* %y1dst.2, i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_54))
begin
memory_controller_address_a = arg_y1;
end
/* fill_pixels: %105*/
/*   store i32* %udst.2, i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_55))
begin
memory_controller_address_a = arg_u;
end
/* fill_pixels: %105*/
/*   store i32* %vdst.2, i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_56))
begin
memory_controller_address_a = arg_v;
end
/* fill_pixels: %105*/
/*   store i32 %pos.0, i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_57))
begin
memory_controller_address_a = arg_np;
end
/* fill_pixels: %105*/
/*   store i32 %x.2, i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_58))
begin
memory_controller_address_a = arg_nx;
end
/* fill_pixels: %105*/
/*   store i32 %y.2, i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_59))
begin
memory_controller_address_a = arg_ny;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %69*/
/*   store i32 %74, i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %69*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fill_pixels: %105*/
/*   store i32* %y0dst.2, i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %y1dst.2, i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %udst.2, i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_55))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32* %vdst.2, i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_56))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %pos.0, i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %x.2, i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_58))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fill_pixels: %105*/
/*   store i32 %y.2, i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_59))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fill_pixels: %69*/
/*   store i32 %74, i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
memory_controller_in_a = fill_pixels_69_74;
end
/* fill_pixels: %69*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
memory_controller_in_a = fill_pixels_69_85;
end
/* fill_pixels: %105*/
/*   store i32* %y0dst.2, i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_53))
begin
memory_controller_in_a = fill_pixels_105_y0dst_2_reg;
end
/* fill_pixels: %105*/
/*   store i32* %y1dst.2, i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_54))
begin
memory_controller_in_a = fill_pixels_105_y1dst_2_reg;
end
/* fill_pixels: %105*/
/*   store i32* %udst.2, i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_55))
begin
memory_controller_in_a = fill_pixels_105_udst_2_reg;
end
/* fill_pixels: %105*/
/*   store i32* %vdst.2, i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_56))
begin
memory_controller_in_a = fill_pixels_105_vdst_2_reg;
end
/* fill_pixels: %105*/
/*   store i32 %pos.0, i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_57))
begin
memory_controller_in_a = fill_pixels_105_pos_0_reg;
end
/* fill_pixels: %105*/
/*   store i32 %x.2, i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_58))
begin
memory_controller_in_a = fill_pixels_105_x_2_reg;
end
/* fill_pixels: %105*/
/*   store i32 %y.2, i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_59))
begin
memory_controller_in_a = fill_pixels_105_y_2_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fill_pixels: %0*/
/*   %1 = load i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %0*/
/*   %3 = load i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %0*/
/*   %5 = load i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %0*/
/*   %7 = load i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %8*/
/*   %9 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %8*/
/*   %15 = load i32* %14, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %8*/
/*   %21 = load i32* %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %8*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %31*/
/*   %32 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %31*/
/*   %37 = load i32* %36, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %55*/
/*   %57 = load i32* %56, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %55*/
/*   %63 = load i32* %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   %70 = load i32* %fill, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   store i32 %74, i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_39))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   %76 = load i32* %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   %82 = load i32* %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   store i32 %85, i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_45))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %69*/
/*   %87 = load i32* %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32* %y0dst.2, i32** %y0, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_53))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32* %y1dst.2, i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_54))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32* %udst.2, i32** %u, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_55))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32* %vdst.2, i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_56))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32 %pos.0, i32* %np, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_57))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32 %x.2, i32* %nx, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_58))
begin
memory_controller_size_a = 2'd2;
end
/* fill_pixels: %105*/
/*   store i32 %y.2, i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_105_59))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   store i32 %13, i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   store i32 %19, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   store i32 %24, i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   store i32 %29, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   store i32 %35, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   store i32 %40, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   store i32 %61, i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   store i32 %67, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   store i32 %80, i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   store i32 %90, i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_address_b = arg_y1;
end
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_address_b = arg_v;
end
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_address_b = arg_ny;
end
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_address_b = fill_pixels_8_11;
end
/* fill_pixels: %8*/
/*   store i32 %13, i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
memory_controller_address_b = fill_pixels_8_11_reg;
end
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_address_b = fill_pixels_8_17_reg;
end
/* fill_pixels: %8*/
/*   store i32 %19, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
memory_controller_address_b = fill_pixels_8_17_reg;
end
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_address_b = fill_pixels_8_22_reg;
end
/* fill_pixels: %8*/
/*   store i32 %24, i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
memory_controller_address_b = fill_pixels_8_22_reg;
end
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_address_b = fill_pixels_8_27_reg;
end
/* fill_pixels: %8*/
/*   store i32 %29, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
memory_controller_address_b = fill_pixels_8_27_reg;
end
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_address_b = fill_pixels_31_33;
end
/* fill_pixels: %31*/
/*   store i32 %35, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
memory_controller_address_b = fill_pixels_31_33_reg;
end
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_address_b = fill_pixels_31_38_reg;
end
/* fill_pixels: %31*/
/*   store i32 %40, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
memory_controller_address_b = fill_pixels_31_38_reg;
end
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_address_b = fill_pixels_55_59;
end
/* fill_pixels: %55*/
/*   store i32 %61, i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
memory_controller_address_b = fill_pixels_55_59_reg;
end
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_address_b = fill_pixels_55_65_reg;
end
/* fill_pixels: %55*/
/*   store i32 %67, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
memory_controller_address_b = fill_pixels_55_65_reg;
end
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_address_b = fill_pixels_69_72;
end
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_address_b = fill_pixels_69_78_reg;
end
/* fill_pixels: %69*/
/*   store i32 %80, i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
memory_controller_address_b = fill_pixels_69_78_reg;
end
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_address_b = fill_pixels_69_83_reg;
end
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_address_b = fill_pixels_69_88_reg;
end
/* fill_pixels: %69*/
/*   store i32 %90, i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
memory_controller_address_b = fill_pixels_69_88_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %8*/
/*   store i32 %13, i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %8*/
/*   store i32 %19, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %8*/
/*   store i32 %24, i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %8*/
/*   store i32 %29, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %31*/
/*   store i32 %35, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %31*/
/*   store i32 %40, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %55*/
/*   store i32 %61, i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %55*/
/*   store i32 %67, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %69*/
/*   store i32 %80, i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fill_pixels: %69*/
/*   store i32 %90, i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fill_pixels: %8*/
/*   store i32 %13, i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
memory_controller_in_b = fill_pixels_8_13;
end
/* fill_pixels: %8*/
/*   store i32 %19, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
memory_controller_in_b = fill_pixels_8_19;
end
/* fill_pixels: %8*/
/*   store i32 %24, i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
memory_controller_in_b = fill_pixels_8_24;
end
/* fill_pixels: %8*/
/*   store i32 %29, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
memory_controller_in_b = fill_pixels_8_29;
end
/* fill_pixels: %31*/
/*   store i32 %35, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
memory_controller_in_b = fill_pixels_31_35;
end
/* fill_pixels: %31*/
/*   store i32 %40, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
memory_controller_in_b = fill_pixels_31_40;
end
/* fill_pixels: %55*/
/*   store i32 %61, i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
memory_controller_in_b = fill_pixels_55_61;
end
/* fill_pixels: %55*/
/*   store i32 %67, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
memory_controller_in_b = fill_pixels_55_67;
end
/* fill_pixels: %69*/
/*   store i32 %80, i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
memory_controller_in_b = fill_pixels_69_80;
end
/* fill_pixels: %69*/
/*   store i32 %90, i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
memory_controller_in_b = fill_pixels_69_90;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fill_pixels: %0*/
/*   %2 = load i32** %y1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %0*/
/*   %4 = load i32** %v, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %0*/
/*   %6 = load i32* %ny, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   %12 = load i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_7))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   store i32 %13, i32* %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_9))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   %18 = load i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_10))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   store i32 %19, i32* %17, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_12))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   %23 = load i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_13))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   store i32 %24, i32* %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_15))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   %28 = load i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_16))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %8*/
/*   store i32 %29, i32* %27, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_8_18))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %31*/
/*   %34 = load i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_20))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %31*/
/*   store i32 %35, i32* %33, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_22))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %31*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_23))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %31*/
/*   store i32 %40, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_31_25))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %55*/
/*   %60 = load i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_30))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %55*/
/*   store i32 %61, i32* %59, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_32))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %55*/
/*   %66 = load i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_33))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %55*/
/*   store i32 %67, i32* %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_55_35))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   %73 = load i32* %72, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_37))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   %79 = load i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_40))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   store i32 %80, i32* %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_42))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   %84 = load i32* %83, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_43))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   %89 = load i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_46))
begin
memory_controller_size_b = 2'd2;
end
/* fill_pixels: %69*/
/*   store i32 %90, i32* %88, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_fill_pixels_BB_69_48))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* fill_pixels: %106*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F_fill_pixels_BB_106_61))
begin
return_val <= fill_pixels_106__0_reg;
if (reset == 1'b0 && ^(fill_pixels_106__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  fill_pixels_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_y0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_y1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_u;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_v;
reg [31:0] fill_pixels_arg_ylinesize;
reg [31:0] fill_pixels_arg_ulinesize;
reg [31:0] fill_pixels_arg_vlinesize;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_fill;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_nx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_ny;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_arg_np;
reg [31:0] fill_pixels_arg_w;
reg [31:0] fill_pixels_arg_h;
wire  fill_pixels_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_memory_controller_address_a;
wire  fill_pixels_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fill_pixels_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fill_pixels_memory_controller_out_a;
wire [1:0] fill_pixels_memory_controller_size_a;
wire  fill_pixels_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fill_pixels_memory_controller_address_b;
wire  fill_pixels_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fill_pixels_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fill_pixels_memory_controller_out_b;
wire [1:0] fill_pixels_memory_controller_size_b;
reg  fill_pixels_memory_controller_waitrequest;
wire  fill_pixels_finish;
reg  fill_pixels_finish_final;
wire [31:0] fill_pixels_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fill_pixels fill_pixels_inst (
	.memory_controller_enable_a (fill_pixels_memory_controller_enable_a),
	.memory_controller_address_a (fill_pixels_memory_controller_address_a),
	.memory_controller_write_enable_a (fill_pixels_memory_controller_write_enable_a),
	.memory_controller_in_a (fill_pixels_memory_controller_in_a),
	.memory_controller_size_a (fill_pixels_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fill_pixels_memory_controller_enable_b),
	.memory_controller_address_b (fill_pixels_memory_controller_address_b),
	.memory_controller_write_enable_b (fill_pixels_memory_controller_write_enable_b),
	.memory_controller_in_b (fill_pixels_memory_controller_in_b),
	.memory_controller_size_b (fill_pixels_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fill_pixels_start),
	.finish (fill_pixels_finish),
	.return_val (fill_pixels_return_val),
	.arg_y0 (fill_pixels_arg_y0),
	.arg_y1 (fill_pixels_arg_y1),
	.arg_u (fill_pixels_arg_u),
	.arg_v (fill_pixels_arg_v),
	.arg_ylinesize (fill_pixels_arg_ylinesize),
	.arg_ulinesize (fill_pixels_arg_ulinesize),
	.arg_vlinesize (fill_pixels_arg_vlinesize),
	.arg_fill (fill_pixels_arg_fill),
	.arg_nx (fill_pixels_arg_nx),
	.arg_ny (fill_pixels_arg_ny),
	.arg_np (fill_pixels_arg_np),
	.arg_w (fill_pixels_arg_w),
	.arg_h (fill_pixels_arg_h)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fill_pixels_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
main_0_1 = fill_pixels_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fill_pixels_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_y0 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_y0"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_y1 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_y1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_u <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_u"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_v <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_v"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_ylinesize <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_ylinesize"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_ulinesize <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_ulinesize"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_vlinesize <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_vlinesize"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_fill <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_fill"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_nx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_nx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_ny <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_ny"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_np <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_np"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_w <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_w"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fill_pixels_arg_h <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fill_pixels_arg_h"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
fill_pixels_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
fill_pixels_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fill_pixels_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fill_pixels_finish_final = fill_pixels_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fill_pixels_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fill_pixels_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fill_pixels_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fill_pixels_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fill_pixels_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fill_pixels_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fill_pixels_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fill_pixels_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fill_pixels_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fill_pixels_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fill_pixels_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fill_pixels_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fill_pixels_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fill_pixels_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fill_pixels_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fill_pixels_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fill_pixels_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fill_pixels_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fill_pixels_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @fill_pixels(i32** undef, i32** undef, i32** undef, i32** undef, i32 undef, i32 undef, i32 undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fill_pixels_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
